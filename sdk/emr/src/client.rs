// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = aws_smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    client: aws_smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `ElasticMapReduce`.
///
/// This client allows ergonomic access to a `ElasticMapReduce`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = aws_smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl<C, M, R> From<aws_smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: aws_smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    /// Creates a client with the given service configuration.
    pub fn with_config(client: aws_smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: aws_smithy_client::bounds::SmithyConnector,
    M: aws_smithy_client::bounds::SmithyMiddleware<C>,
    R: aws_smithy_client::retry::NewRequestPolicy,
{
    /// Constructs a fluent builder for the `AddInstanceFleet` operation.
    ///
    /// See [`AddInstanceFleet`](crate::client::fluent_builders::AddInstanceFleet) for more information about the
    /// operation and its arguments.
    pub fn add_instance_fleet(&self) -> fluent_builders::AddInstanceFleet<C, M, R> {
        fluent_builders::AddInstanceFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `AddInstanceGroups` operation.
    ///
    /// See [`AddInstanceGroups`](crate::client::fluent_builders::AddInstanceGroups) for more information about the
    /// operation and its arguments.
    pub fn add_instance_groups(&self) -> fluent_builders::AddInstanceGroups<C, M, R> {
        fluent_builders::AddInstanceGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `AddJobFlowSteps` operation.
    ///
    /// See [`AddJobFlowSteps`](crate::client::fluent_builders::AddJobFlowSteps) for more information about the
    /// operation and its arguments.
    pub fn add_job_flow_steps(&self) -> fluent_builders::AddJobFlowSteps<C, M, R> {
        fluent_builders::AddJobFlowSteps::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `AddTags` operation.
    ///
    /// See [`AddTags`](crate::client::fluent_builders::AddTags) for more information about the
    /// operation and its arguments.
    pub fn add_tags(&self) -> fluent_builders::AddTags<C, M, R> {
        fluent_builders::AddTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CancelSteps` operation.
    ///
    /// See [`CancelSteps`](crate::client::fluent_builders::CancelSteps) for more information about the
    /// operation and its arguments.
    pub fn cancel_steps(&self) -> fluent_builders::CancelSteps<C, M, R> {
        fluent_builders::CancelSteps::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateSecurityConfiguration` operation.
    ///
    /// See [`CreateSecurityConfiguration`](crate::client::fluent_builders::CreateSecurityConfiguration) for more information about the
    /// operation and its arguments.
    pub fn create_security_configuration(
        &self,
    ) -> fluent_builders::CreateSecurityConfiguration<C, M, R> {
        fluent_builders::CreateSecurityConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateStudio` operation.
    ///
    /// See [`CreateStudio`](crate::client::fluent_builders::CreateStudio) for more information about the
    /// operation and its arguments.
    pub fn create_studio(&self) -> fluent_builders::CreateStudio<C, M, R> {
        fluent_builders::CreateStudio::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateStudioSessionMapping` operation.
    ///
    /// See [`CreateStudioSessionMapping`](crate::client::fluent_builders::CreateStudioSessionMapping) for more information about the
    /// operation and its arguments.
    pub fn create_studio_session_mapping(
        &self,
    ) -> fluent_builders::CreateStudioSessionMapping<C, M, R> {
        fluent_builders::CreateStudioSessionMapping::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteSecurityConfiguration` operation.
    ///
    /// See [`DeleteSecurityConfiguration`](crate::client::fluent_builders::DeleteSecurityConfiguration) for more information about the
    /// operation and its arguments.
    pub fn delete_security_configuration(
        &self,
    ) -> fluent_builders::DeleteSecurityConfiguration<C, M, R> {
        fluent_builders::DeleteSecurityConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteStudio` operation.
    ///
    /// See [`DeleteStudio`](crate::client::fluent_builders::DeleteStudio) for more information about the
    /// operation and its arguments.
    pub fn delete_studio(&self) -> fluent_builders::DeleteStudio<C, M, R> {
        fluent_builders::DeleteStudio::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteStudioSessionMapping` operation.
    ///
    /// See [`DeleteStudioSessionMapping`](crate::client::fluent_builders::DeleteStudioSessionMapping) for more information about the
    /// operation and its arguments.
    pub fn delete_studio_session_mapping(
        &self,
    ) -> fluent_builders::DeleteStudioSessionMapping<C, M, R> {
        fluent_builders::DeleteStudioSessionMapping::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeCluster` operation.
    ///
    /// See [`DescribeCluster`](crate::client::fluent_builders::DescribeCluster) for more information about the
    /// operation and its arguments.
    pub fn describe_cluster(&self) -> fluent_builders::DescribeCluster<C, M, R> {
        fluent_builders::DescribeCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeJobFlows` operation.
    ///
    /// See [`DescribeJobFlows`](crate::client::fluent_builders::DescribeJobFlows) for more information about the
    /// operation and its arguments.
    pub fn describe_job_flows(&self) -> fluent_builders::DescribeJobFlows<C, M, R> {
        fluent_builders::DescribeJobFlows::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeNotebookExecution` operation.
    ///
    /// See [`DescribeNotebookExecution`](crate::client::fluent_builders::DescribeNotebookExecution) for more information about the
    /// operation and its arguments.
    pub fn describe_notebook_execution(
        &self,
    ) -> fluent_builders::DescribeNotebookExecution<C, M, R> {
        fluent_builders::DescribeNotebookExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeReleaseLabel` operation.
    ///
    /// See [`DescribeReleaseLabel`](crate::client::fluent_builders::DescribeReleaseLabel) for more information about the
    /// operation and its arguments.
    pub fn describe_release_label(&self) -> fluent_builders::DescribeReleaseLabel<C, M, R> {
        fluent_builders::DescribeReleaseLabel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeSecurityConfiguration` operation.
    ///
    /// See [`DescribeSecurityConfiguration`](crate::client::fluent_builders::DescribeSecurityConfiguration) for more information about the
    /// operation and its arguments.
    pub fn describe_security_configuration(
        &self,
    ) -> fluent_builders::DescribeSecurityConfiguration<C, M, R> {
        fluent_builders::DescribeSecurityConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeStep` operation.
    ///
    /// See [`DescribeStep`](crate::client::fluent_builders::DescribeStep) for more information about the
    /// operation and its arguments.
    pub fn describe_step(&self) -> fluent_builders::DescribeStep<C, M, R> {
        fluent_builders::DescribeStep::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeStudio` operation.
    ///
    /// See [`DescribeStudio`](crate::client::fluent_builders::DescribeStudio) for more information about the
    /// operation and its arguments.
    pub fn describe_studio(&self) -> fluent_builders::DescribeStudio<C, M, R> {
        fluent_builders::DescribeStudio::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetAutoTerminationPolicy` operation.
    ///
    /// See [`GetAutoTerminationPolicy`](crate::client::fluent_builders::GetAutoTerminationPolicy) for more information about the
    /// operation and its arguments.
    pub fn get_auto_termination_policy(
        &self,
    ) -> fluent_builders::GetAutoTerminationPolicy<C, M, R> {
        fluent_builders::GetAutoTerminationPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetBlockPublicAccessConfiguration` operation.
    ///
    /// See [`GetBlockPublicAccessConfiguration`](crate::client::fluent_builders::GetBlockPublicAccessConfiguration) for more information about the
    /// operation and its arguments.
    pub fn get_block_public_access_configuration(
        &self,
    ) -> fluent_builders::GetBlockPublicAccessConfiguration<C, M, R> {
        fluent_builders::GetBlockPublicAccessConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetManagedScalingPolicy` operation.
    ///
    /// See [`GetManagedScalingPolicy`](crate::client::fluent_builders::GetManagedScalingPolicy) for more information about the
    /// operation and its arguments.
    pub fn get_managed_scaling_policy(&self) -> fluent_builders::GetManagedScalingPolicy<C, M, R> {
        fluent_builders::GetManagedScalingPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetStudioSessionMapping` operation.
    ///
    /// See [`GetStudioSessionMapping`](crate::client::fluent_builders::GetStudioSessionMapping) for more information about the
    /// operation and its arguments.
    pub fn get_studio_session_mapping(&self) -> fluent_builders::GetStudioSessionMapping<C, M, R> {
        fluent_builders::GetStudioSessionMapping::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListBootstrapActions` operation.
    ///
    /// See [`ListBootstrapActions`](crate::client::fluent_builders::ListBootstrapActions) for more information about the
    /// operation and its arguments.
    pub fn list_bootstrap_actions(&self) -> fluent_builders::ListBootstrapActions<C, M, R> {
        fluent_builders::ListBootstrapActions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListClusters` operation.
    ///
    /// See [`ListClusters`](crate::client::fluent_builders::ListClusters) for more information about the
    /// operation and its arguments.
    pub fn list_clusters(&self) -> fluent_builders::ListClusters<C, M, R> {
        fluent_builders::ListClusters::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListInstanceFleets` operation.
    ///
    /// See [`ListInstanceFleets`](crate::client::fluent_builders::ListInstanceFleets) for more information about the
    /// operation and its arguments.
    pub fn list_instance_fleets(&self) -> fluent_builders::ListInstanceFleets<C, M, R> {
        fluent_builders::ListInstanceFleets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListInstanceGroups` operation.
    ///
    /// See [`ListInstanceGroups`](crate::client::fluent_builders::ListInstanceGroups) for more information about the
    /// operation and its arguments.
    pub fn list_instance_groups(&self) -> fluent_builders::ListInstanceGroups<C, M, R> {
        fluent_builders::ListInstanceGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListInstances` operation.
    ///
    /// See [`ListInstances`](crate::client::fluent_builders::ListInstances) for more information about the
    /// operation and its arguments.
    pub fn list_instances(&self) -> fluent_builders::ListInstances<C, M, R> {
        fluent_builders::ListInstances::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListNotebookExecutions` operation.
    ///
    /// See [`ListNotebookExecutions`](crate::client::fluent_builders::ListNotebookExecutions) for more information about the
    /// operation and its arguments.
    pub fn list_notebook_executions(&self) -> fluent_builders::ListNotebookExecutions<C, M, R> {
        fluent_builders::ListNotebookExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListReleaseLabels` operation.
    ///
    /// See [`ListReleaseLabels`](crate::client::fluent_builders::ListReleaseLabels) for more information about the
    /// operation and its arguments.
    pub fn list_release_labels(&self) -> fluent_builders::ListReleaseLabels<C, M, R> {
        fluent_builders::ListReleaseLabels::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListSecurityConfigurations` operation.
    ///
    /// See [`ListSecurityConfigurations`](crate::client::fluent_builders::ListSecurityConfigurations) for more information about the
    /// operation and its arguments.
    pub fn list_security_configurations(
        &self,
    ) -> fluent_builders::ListSecurityConfigurations<C, M, R> {
        fluent_builders::ListSecurityConfigurations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListSteps` operation.
    ///
    /// See [`ListSteps`](crate::client::fluent_builders::ListSteps) for more information about the
    /// operation and its arguments.
    pub fn list_steps(&self) -> fluent_builders::ListSteps<C, M, R> {
        fluent_builders::ListSteps::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListStudios` operation.
    ///
    /// See [`ListStudios`](crate::client::fluent_builders::ListStudios) for more information about the
    /// operation and its arguments.
    pub fn list_studios(&self) -> fluent_builders::ListStudios<C, M, R> {
        fluent_builders::ListStudios::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListStudioSessionMappings` operation.
    ///
    /// See [`ListStudioSessionMappings`](crate::client::fluent_builders::ListStudioSessionMappings) for more information about the
    /// operation and its arguments.
    pub fn list_studio_session_mappings(
        &self,
    ) -> fluent_builders::ListStudioSessionMappings<C, M, R> {
        fluent_builders::ListStudioSessionMappings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ModifyCluster` operation.
    ///
    /// See [`ModifyCluster`](crate::client::fluent_builders::ModifyCluster) for more information about the
    /// operation and its arguments.
    pub fn modify_cluster(&self) -> fluent_builders::ModifyCluster<C, M, R> {
        fluent_builders::ModifyCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ModifyInstanceFleet` operation.
    ///
    /// See [`ModifyInstanceFleet`](crate::client::fluent_builders::ModifyInstanceFleet) for more information about the
    /// operation and its arguments.
    pub fn modify_instance_fleet(&self) -> fluent_builders::ModifyInstanceFleet<C, M, R> {
        fluent_builders::ModifyInstanceFleet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ModifyInstanceGroups` operation.
    ///
    /// See [`ModifyInstanceGroups`](crate::client::fluent_builders::ModifyInstanceGroups) for more information about the
    /// operation and its arguments.
    pub fn modify_instance_groups(&self) -> fluent_builders::ModifyInstanceGroups<C, M, R> {
        fluent_builders::ModifyInstanceGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `PutAutoScalingPolicy` operation.
    ///
    /// See [`PutAutoScalingPolicy`](crate::client::fluent_builders::PutAutoScalingPolicy) for more information about the
    /// operation and its arguments.
    pub fn put_auto_scaling_policy(&self) -> fluent_builders::PutAutoScalingPolicy<C, M, R> {
        fluent_builders::PutAutoScalingPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `PutAutoTerminationPolicy` operation.
    ///
    /// See [`PutAutoTerminationPolicy`](crate::client::fluent_builders::PutAutoTerminationPolicy) for more information about the
    /// operation and its arguments.
    pub fn put_auto_termination_policy(
        &self,
    ) -> fluent_builders::PutAutoTerminationPolicy<C, M, R> {
        fluent_builders::PutAutoTerminationPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `PutBlockPublicAccessConfiguration` operation.
    ///
    /// See [`PutBlockPublicAccessConfiguration`](crate::client::fluent_builders::PutBlockPublicAccessConfiguration) for more information about the
    /// operation and its arguments.
    pub fn put_block_public_access_configuration(
        &self,
    ) -> fluent_builders::PutBlockPublicAccessConfiguration<C, M, R> {
        fluent_builders::PutBlockPublicAccessConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `PutManagedScalingPolicy` operation.
    ///
    /// See [`PutManagedScalingPolicy`](crate::client::fluent_builders::PutManagedScalingPolicy) for more information about the
    /// operation and its arguments.
    pub fn put_managed_scaling_policy(&self) -> fluent_builders::PutManagedScalingPolicy<C, M, R> {
        fluent_builders::PutManagedScalingPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `RemoveAutoScalingPolicy` operation.
    ///
    /// See [`RemoveAutoScalingPolicy`](crate::client::fluent_builders::RemoveAutoScalingPolicy) for more information about the
    /// operation and its arguments.
    pub fn remove_auto_scaling_policy(&self) -> fluent_builders::RemoveAutoScalingPolicy<C, M, R> {
        fluent_builders::RemoveAutoScalingPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `RemoveAutoTerminationPolicy` operation.
    ///
    /// See [`RemoveAutoTerminationPolicy`](crate::client::fluent_builders::RemoveAutoTerminationPolicy) for more information about the
    /// operation and its arguments.
    pub fn remove_auto_termination_policy(
        &self,
    ) -> fluent_builders::RemoveAutoTerminationPolicy<C, M, R> {
        fluent_builders::RemoveAutoTerminationPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `RemoveManagedScalingPolicy` operation.
    ///
    /// See [`RemoveManagedScalingPolicy`](crate::client::fluent_builders::RemoveManagedScalingPolicy) for more information about the
    /// operation and its arguments.
    pub fn remove_managed_scaling_policy(
        &self,
    ) -> fluent_builders::RemoveManagedScalingPolicy<C, M, R> {
        fluent_builders::RemoveManagedScalingPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `RemoveTags` operation.
    ///
    /// See [`RemoveTags`](crate::client::fluent_builders::RemoveTags) for more information about the
    /// operation and its arguments.
    pub fn remove_tags(&self) -> fluent_builders::RemoveTags<C, M, R> {
        fluent_builders::RemoveTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `RunJobFlow` operation.
    ///
    /// See [`RunJobFlow`](crate::client::fluent_builders::RunJobFlow) for more information about the
    /// operation and its arguments.
    pub fn run_job_flow(&self) -> fluent_builders::RunJobFlow<C, M, R> {
        fluent_builders::RunJobFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `SetTerminationProtection` operation.
    ///
    /// See [`SetTerminationProtection`](crate::client::fluent_builders::SetTerminationProtection) for more information about the
    /// operation and its arguments.
    pub fn set_termination_protection(&self) -> fluent_builders::SetTerminationProtection<C, M, R> {
        fluent_builders::SetTerminationProtection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `SetVisibleToAllUsers` operation.
    ///
    /// See [`SetVisibleToAllUsers`](crate::client::fluent_builders::SetVisibleToAllUsers) for more information about the
    /// operation and its arguments.
    pub fn set_visible_to_all_users(&self) -> fluent_builders::SetVisibleToAllUsers<C, M, R> {
        fluent_builders::SetVisibleToAllUsers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `StartNotebookExecution` operation.
    ///
    /// See [`StartNotebookExecution`](crate::client::fluent_builders::StartNotebookExecution) for more information about the
    /// operation and its arguments.
    pub fn start_notebook_execution(&self) -> fluent_builders::StartNotebookExecution<C, M, R> {
        fluent_builders::StartNotebookExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `StopNotebookExecution` operation.
    ///
    /// See [`StopNotebookExecution`](crate::client::fluent_builders::StopNotebookExecution) for more information about the
    /// operation and its arguments.
    pub fn stop_notebook_execution(&self) -> fluent_builders::StopNotebookExecution<C, M, R> {
        fluent_builders::StopNotebookExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `TerminateJobFlows` operation.
    ///
    /// See [`TerminateJobFlows`](crate::client::fluent_builders::TerminateJobFlows) for more information about the
    /// operation and its arguments.
    pub fn terminate_job_flows(&self) -> fluent_builders::TerminateJobFlows<C, M, R> {
        fluent_builders::TerminateJobFlows::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateStudio` operation.
    ///
    /// See [`UpdateStudio`](crate::client::fluent_builders::UpdateStudio) for more information about the
    /// operation and its arguments.
    pub fn update_studio(&self) -> fluent_builders::UpdateStudio<C, M, R> {
        fluent_builders::UpdateStudio::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateStudioSessionMapping` operation.
    ///
    /// See [`UpdateStudioSessionMapping`](crate::client::fluent_builders::UpdateStudioSessionMapping) for more information about the
    /// operation and its arguments.
    pub fn update_studio_session_mapping(
        &self,
    ) -> fluent_builders::UpdateStudioSessionMapping<C, M, R> {
        fluent_builders::UpdateStudioSessionMapping::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `AddInstanceFleet`.
    ///
    /// <p>Adds an instance fleet to a running cluster.</p>
    /// <note>
    /// <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    /// later, excluding 5.0.x.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct AddInstanceFleet<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_instance_fleet_input::Builder,
    }
    impl<C, M, R> AddInstanceFleet<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AddInstanceFleet`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddInstanceFleetOutput,
            aws_smithy_http::result::SdkError<crate::error::AddInstanceFleetError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddInstanceFleetInputOperationOutputAlias,
                crate::output::AddInstanceFleetOutput,
                crate::error::AddInstanceFleetError,
                crate::input::AddInstanceFleetInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Specifies the configuration of the instance fleet.</p>
        pub fn instance_fleet(mut self, inp: crate::model::InstanceFleetConfig) -> Self {
            self.inner = self.inner.instance_fleet(inp);
            self
        }
        /// <p>Specifies the configuration of the instance fleet.</p>
        pub fn set_instance_fleet(
            mut self,
            input: std::option::Option<crate::model::InstanceFleetConfig>,
        ) -> Self {
            self.inner = self.inner.set_instance_fleet(input);
            self
        }
    }
    /// Fluent builder constructing a request to `AddInstanceGroups`.
    ///
    /// <p>Adds one or more instance groups to a running cluster.</p>
    #[derive(std::fmt::Debug)]
    pub struct AddInstanceGroups<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_instance_groups_input::Builder,
    }
    impl<C, M, R> AddInstanceGroups<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AddInstanceGroups`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddInstanceGroupsOutput,
            aws_smithy_http::result::SdkError<crate::error::AddInstanceGroupsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddInstanceGroupsInputOperationOutputAlias,
                crate::output::AddInstanceGroupsOutput,
                crate::error::AddInstanceGroupsError,
                crate::input::AddInstanceGroupsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `InstanceGroups`.
        ///
        /// To override the contents of this collection use [`set_instance_groups`](Self::set_instance_groups).
        ///
        /// <p>Instance groups to add.</p>
        pub fn instance_groups(
            mut self,
            inp: impl Into<crate::model::InstanceGroupConfig>,
        ) -> Self {
            self.inner = self.inner.instance_groups(inp);
            self
        }
        /// <p>Instance groups to add.</p>
        pub fn set_instance_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceGroupConfig>>,
        ) -> Self {
            self.inner = self.inner.set_instance_groups(input);
            self
        }
        /// <p>Job flow in which to add the instance groups.</p>
        pub fn job_flow_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_id(inp);
            self
        }
        /// <p>Job flow in which to add the instance groups.</p>
        pub fn set_job_flow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_flow_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `AddJobFlowSteps`.
    ///
    /// <p>AddJobFlowSteps adds new steps to a running cluster. A maximum of 256 steps are allowed
    /// in each job flow.</p>
    /// <p>If your cluster is long-running (such as a Hive data warehouse) or complex, you may
    /// require more than 256 steps to process your data. You can bypass the 256-step limitation in
    /// various ways, including using SSH to connect to the master node and submitting queries
    /// directly to the software running on the master node, such as Hive and Hadoop. For more
    /// information on how to do this, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/AddMoreThan256Steps.html">Add More than 256 Steps to a
    /// Cluster</a> in the <i>Amazon EMR Management Guide</i>.</p>
    /// <p>A step specifies the location of a JAR file stored either on the master node of the
    /// cluster or in Amazon S3. Each step is performed by the main function of the main class of
    /// the JAR file. The main class can be specified either in the manifest of the JAR or by using
    /// the MainFunction parameter of the step.</p>
    /// <p>Amazon EMR executes each step in the order listed. For a step to be considered complete,
    /// the main function must exit with a zero exit code and all Hadoop jobs started while the
    /// step was running must have completed and run successfully.</p>
    /// <p>You can only add steps to a cluster that is in one of the following states: STARTING,
    /// BOOTSTRAPPING, RUNNING, or WAITING.</p>
    #[derive(std::fmt::Debug)]
    pub struct AddJobFlowSteps<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_job_flow_steps_input::Builder,
    }
    impl<C, M, R> AddJobFlowSteps<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AddJobFlowSteps`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddJobFlowStepsOutput,
            aws_smithy_http::result::SdkError<crate::error::AddJobFlowStepsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddJobFlowStepsInputOperationOutputAlias,
                crate::output::AddJobFlowStepsOutput,
                crate::error::AddJobFlowStepsError,
                crate::input::AddJobFlowStepsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>A string that uniquely identifies the job flow. This identifier is returned by <a>RunJobFlow</a> and can also be obtained from <a>ListClusters</a>.
        /// </p>
        pub fn job_flow_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_id(inp);
            self
        }
        /// <p>A string that uniquely identifies the job flow. This identifier is returned by <a>RunJobFlow</a> and can also be obtained from <a>ListClusters</a>.
        /// </p>
        pub fn set_job_flow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_flow_id(input);
            self
        }
        /// Appends an item to `Steps`.
        ///
        /// To override the contents of this collection use [`set_steps`](Self::set_steps).
        ///
        /// <p> A list of <a>StepConfig</a> to be executed by the job flow. </p>
        pub fn steps(mut self, inp: impl Into<crate::model::StepConfig>) -> Self {
            self.inner = self.inner.steps(inp);
            self
        }
        /// <p> A list of <a>StepConfig</a> to be executed by the job flow. </p>
        pub fn set_steps(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StepConfig>>,
        ) -> Self {
            self.inner = self.inner.set_steps(input);
            self
        }
    }
    /// Fluent builder constructing a request to `AddTags`.
    ///
    /// <p>Adds tags to an Amazon EMR resource, such as a cluster or an Amazon EMR Studio. Tags make it easier to associate resources in
    /// various ways, such as grouping clusters to track your Amazon EMR resource allocation costs.
    /// For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag Clusters</a>. </p>
    #[derive(std::fmt::Debug)]
    pub struct AddTags<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_tags_input::Builder,
    }
    impl<C, M, R> AddTags<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AddTags`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddTagsOutput,
            aws_smithy_http::result::SdkError<crate::error::AddTagsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddTagsInputOperationOutputAlias,
                crate::output::AddTagsOutput,
                crate::error::AddTagsError,
                crate::input::AddTagsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon EMR resource identifier to which tags will be added. For example, a
        /// cluster identifier or an Amazon EMR Studio ID.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The Amazon EMR resource identifier to which tags will be added. For example, a
        /// cluster identifier or an Amazon EMR Studio ID.</p>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tags to associate with a resource. Tags are
        /// user-defined key-value pairs that consist of a required key string with a maximum of 128
        /// characters, and an optional value string with a maximum of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>A list of tags to associate with a resource. Tags are
        /// user-defined key-value pairs that consist of a required key string with a maximum of 128
        /// characters, and an optional value string with a maximum of 256 characters.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CancelSteps`.
    ///
    /// <p>Cancels a pending step or steps in a running cluster. Available only in Amazon EMR
    /// versions 4.8.0 and later, excluding version 5.0.0. A maximum of 256 steps are allowed in
    /// each CancelSteps request. CancelSteps is idempotent but asynchronous; it does not guarantee
    /// that a step will be canceled, even if the request is successfully submitted. When you use Amazon EMR versions 5.28.0 and later, you can cancel steps that are in a <code>PENDING</code> or <code>RUNNING</code> state. In earlier versions of Amazon EMR, you can only cancel steps that are in a <code>PENDING</code> state. </p>
    #[derive(std::fmt::Debug)]
    pub struct CancelSteps<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::cancel_steps_input::Builder,
    }
    impl<C, M, R> CancelSteps<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CancelSteps`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CancelStepsOutput,
            aws_smithy_http::result::SdkError<crate::error::CancelStepsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CancelStepsInputOperationOutputAlias,
                crate::output::CancelStepsOutput,
                crate::error::CancelStepsError,
                crate::input::CancelStepsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>ClusterID</code> for the specified steps that will be canceled. Use <a>RunJobFlow</a> and <a>ListClusters</a> to get ClusterIDs. </p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The <code>ClusterID</code> for the specified steps that will be canceled. Use <a>RunJobFlow</a> and <a>ListClusters</a> to get ClusterIDs. </p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// Appends an item to `StepIds`.
        ///
        /// To override the contents of this collection use [`set_step_ids`](Self::set_step_ids).
        ///
        /// <p>The list of <code>StepIDs</code> to cancel. Use <a>ListSteps</a> to get steps
        /// and their states for the specified cluster.</p>
        pub fn step_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.step_ids(inp);
            self
        }
        /// <p>The list of <code>StepIDs</code> to cancel. Use <a>ListSteps</a> to get steps
        /// and their states for the specified cluster.</p>
        pub fn set_step_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_step_ids(input);
            self
        }
        /// <p>The option to choose to cancel <code>RUNNING</code> steps. By default, the value is
        /// <code>SEND_INTERRUPT</code>.</p>
        pub fn step_cancellation_option(
            mut self,
            inp: crate::model::StepCancellationOption,
        ) -> Self {
            self.inner = self.inner.step_cancellation_option(inp);
            self
        }
        /// <p>The option to choose to cancel <code>RUNNING</code> steps. By default, the value is
        /// <code>SEND_INTERRUPT</code>.</p>
        pub fn set_step_cancellation_option(
            mut self,
            input: std::option::Option<crate::model::StepCancellationOption>,
        ) -> Self {
            self.inner = self.inner.set_step_cancellation_option(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateSecurityConfiguration`.
    ///
    /// <p>Creates a security configuration, which is stored in the service and can be specified
    /// when a cluster is created.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateSecurityConfiguration<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_security_configuration_input::Builder,
    }
    impl<C, M, R> CreateSecurityConfiguration<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateSecurityConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateSecurityConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateSecurityConfigurationError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateSecurityConfigurationInputOperationOutputAlias,
                crate::output::CreateSecurityConfigurationOutput,
                crate::error::CreateSecurityConfigurationError,
                crate::input::CreateSecurityConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the security configuration.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the security configuration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The security configuration details in JSON format. For JSON parameters and examples, see
        /// <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-configurations.html">Use Security
        /// Configurations to Set Up Cluster Security</a> in the <i>Amazon EMR Management
        /// Guide</i>.</p>
        pub fn security_configuration(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_configuration(inp);
            self
        }
        /// <p>The security configuration details in JSON format. For JSON parameters and examples, see
        /// <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-security-configurations.html">Use Security
        /// Configurations to Set Up Cluster Security</a> in the <i>Amazon EMR Management
        /// Guide</i>.</p>
        pub fn set_security_configuration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_security_configuration(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateStudio`.
    ///
    /// <p>Creates a new Amazon EMR Studio.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateStudio<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_studio_input::Builder,
    }
    impl<C, M, R> CreateStudio<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateStudio`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateStudioOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateStudioError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateStudioInputOperationOutputAlias,
                crate::output::CreateStudioOutput,
                crate::error::CreateStudioError,
                crate::input::CreateStudioInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>A descriptive name for the Amazon EMR Studio.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>A descriptive name for the Amazon EMR Studio.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A detailed description of the Amazon EMR Studio.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        /// <p>A detailed description of the Amazon EMR Studio.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>Specifies whether the Studio authenticates users using IAM or Amazon Web Services SSO.</p>
        pub fn auth_mode(mut self, inp: crate::model::AuthMode) -> Self {
            self.inner = self.inner.auth_mode(inp);
            self
        }
        /// <p>Specifies whether the Studio authenticates users using IAM or Amazon Web Services SSO.</p>
        pub fn set_auth_mode(mut self, input: std::option::Option<crate::model::AuthMode>) -> Self {
            self.inner = self.inner.set_auth_mode(input);
            self
        }
        /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the
        /// Studio.</p>
        pub fn vpc_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vpc_id(inp);
            self
        }
        /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the
        /// Studio.</p>
        pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vpc_id(input);
            self
        }
        /// Appends an item to `SubnetIds`.
        ///
        /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
        ///
        /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC
        /// specified by <code>VpcId</code>. Studio users can create a Workspace in any of the
        /// specified subnets.</p>
        pub fn subnet_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_ids(inp);
            self
        }
        /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC
        /// specified by <code>VpcId</code>. Studio users can create a Workspace in any of the
        /// specified subnets.</p>
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnet_ids(input);
            self
        }
        /// <p>The IAM role that the Amazon EMR Studio assumes. The service role provides a
        /// way for Amazon EMR Studio to interoperate with other Amazon Web Services services.</p>
        pub fn service_role(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role(inp);
            self
        }
        /// <p>The IAM role that the Amazon EMR Studio assumes. The service role provides a
        /// way for Amazon EMR Studio to interoperate with other Amazon Web Services services.</p>
        pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_service_role(input);
            self
        }
        /// <p>The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a <code>UserRole</code> when you use Amazon Web Services SSO authentication. The
        /// permissions attached to the <code>UserRole</code> can be scoped down for each user or group using
        /// session policies.</p>
        pub fn user_role(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_role(inp);
            self
        }
        /// <p>The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a <code>UserRole</code> when you use Amazon Web Services SSO authentication. The
        /// permissions attached to the <code>UserRole</code> can be scoped down for each user or group using
        /// session policies.</p>
        pub fn set_user_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_role(input);
            self
        }
        /// <p>The ID of the Amazon EMR Studio Workspace security group. The Workspace security group
        /// allows outbound network traffic to resources in the Engine security group, and it must be
        /// in the same VPC specified by <code>VpcId</code>.</p>
        pub fn workspace_security_group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.workspace_security_group_id(inp);
            self
        }
        /// <p>The ID of the Amazon EMR Studio Workspace security group. The Workspace security group
        /// allows outbound network traffic to resources in the Engine security group, and it must be
        /// in the same VPC specified by <code>VpcId</code>.</p>
        pub fn set_workspace_security_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_workspace_security_group_id(input);
            self
        }
        /// <p>The ID of the Amazon EMR Studio Engine security group. The Engine security group allows
        /// inbound network traffic from the Workspace security group, and it must be in the same VPC
        /// specified by <code>VpcId</code>.</p>
        pub fn engine_security_group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.engine_security_group_id(inp);
            self
        }
        /// <p>The ID of the Amazon EMR Studio Engine security group. The Engine security group allows
        /// inbound network traffic from the Workspace security group, and it must be in the same VPC
        /// specified by <code>VpcId</code>.</p>
        pub fn set_engine_security_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_engine_security_group_id(input);
            self
        }
        /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
        pub fn default_s3_location(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_s3_location(inp);
            self
        }
        /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
        pub fn set_default_s3_location(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_s3_location(input);
            self
        }
        /// <p>The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.</p>
        pub fn idp_auth_url(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idp_auth_url(inp);
            self
        }
        /// <p>The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.</p>
        pub fn set_idp_auth_url(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_idp_auth_url(input);
            self
        }
        /// <p>The name that your identity provider (IdP) uses for its <code>RelayState</code> parameter. For example, <code>RelayState</code> or <code>TargetSource</code>. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The <code>RelayState</code> parameter differs by IdP.</p>
        pub fn idp_relay_state_parameter_name(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.idp_relay_state_parameter_name(inp);
            self
        }
        /// <p>The name that your identity provider (IdP) uses for its <code>RelayState</code> parameter. For example, <code>RelayState</code> or <code>TargetSource</code>. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The <code>RelayState</code> parameter differs by IdP.</p>
        pub fn set_idp_relay_state_parameter_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idp_relay_state_parameter_name(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that
        /// consist of a required key string with a maximum of 128 characters, and an optional value
        /// string with a maximum of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that
        /// consist of a required key string with a maximum of 128 characters, and an optional value
        /// string with a maximum of 256 characters.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateStudioSessionMapping`.
    ///
    /// <p>Maps a user or group to the Amazon EMR Studio specified by <code>StudioId</code>, and
    /// applies a session policy to refine Studio permissions for that user or group. Use <code>CreateStudioSessionMapping</code> to assign users to a Studio when you use Amazon Web Services SSO authentication. For instructions on how to assign users to a Studio when you use IAM authentication, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-manage-users.html#emr-studio-assign-users-groups">Assign a user or group to your EMR Studio</a>.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateStudioSessionMapping<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_studio_session_mapping_input::Builder,
    }
    impl<C, M, R> CreateStudioSessionMapping<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateStudioSessionMapping`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateStudioSessionMappingOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateStudioSessionMappingError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateStudioSessionMappingInputOperationOutputAlias,
                crate::output::CreateStudioSessionMappingOutput,
                crate::error::CreateStudioSessionMappingError,
                crate::input::CreateStudioSessionMappingInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio to which the user or group will be mapped.</p>
        pub fn studio_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(inp);
            self
        }
        /// <p>The ID of the Amazon EMR Studio to which the user or group will be mapped.</p>
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group from the Amazon Web Services SSO Identity
        /// Store. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified, but not both.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group from the Amazon Web Services SSO Identity
        /// Store. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified, but not both.</p>
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>The name of the user or group. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified, but not both.</p>
        pub fn identity_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_name(inp);
            self
        }
        /// <p>The name of the user or group. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified, but not both.</p>
        pub fn set_identity_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_name(input);
            self
        }
        /// <p>Specifies whether the identity to map to the Amazon EMR Studio is a user or a group.</p>
        pub fn identity_type(mut self, inp: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(inp);
            self
        }
        /// <p>Specifies whether the identity to map to the Amazon EMR Studio is a user or a group.</p>
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the session policy that will be applied to the user
        /// or group. You should specify the ARN for the session policy that you want to apply, not the ARN of your user role. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-user-role.html">Create an EMR Studio User Role with Session Policies</a>.</p>
        pub fn session_policy_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session_policy_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the session policy that will be applied to the user
        /// or group. You should specify the ARN for the session policy that you want to apply, not the ARN of your user role. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio-user-role.html">Create an EMR Studio User Role with Session Policies</a>.</p>
        pub fn set_session_policy_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_session_policy_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteSecurityConfiguration`.
    ///
    /// <p>Deletes a security configuration.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteSecurityConfiguration<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_security_configuration_input::Builder,
    }
    impl<C, M, R> DeleteSecurityConfiguration<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteSecurityConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteSecurityConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteSecurityConfigurationError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteSecurityConfigurationInputOperationOutputAlias,
                crate::output::DeleteSecurityConfigurationOutput,
                crate::error::DeleteSecurityConfigurationError,
                crate::input::DeleteSecurityConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the security configuration.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the security configuration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteStudio`.
    ///
    /// <p>Removes an Amazon EMR Studio from the Studio metadata store.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteStudio<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_studio_input::Builder,
    }
    impl<C, M, R> DeleteStudio<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteStudio`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteStudioOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteStudioError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteStudioInputOperationOutputAlias,
                crate::output::DeleteStudioOutput,
                crate::error::DeleteStudioError,
                crate::input::DeleteStudioInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(inp);
            self
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteStudioSessionMapping`.
    ///
    /// <p>Removes a user or group from an Amazon EMR Studio.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteStudioSessionMapping<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_studio_session_mapping_input::Builder,
    }
    impl<C, M, R> DeleteStudioSessionMapping<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteStudioSessionMapping`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteStudioSessionMappingOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteStudioSessionMappingError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteStudioSessionMappingInputOperationOutputAlias,
                crate::output::DeleteStudioSessionMappingOutput,
                crate::error::DeleteStudioSessionMappingError,
                crate::input::DeleteStudioSessionMappingInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(inp);
            self
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group to remove from the Amazon EMR
        /// Studio. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group to remove from the Amazon EMR
        /// Studio. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>The name of the user name or group to remove from the Amazon EMR Studio. For more information, see
        /// <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>Amazon Web Services SSO Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_name(inp);
            self
        }
        /// <p>The name of the user name or group to remove from the Amazon EMR Studio. For more information, see
        /// <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>Amazon Web Services SSO Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn set_identity_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_name(input);
            self
        }
        /// <p>Specifies whether the identity to delete from the Amazon EMR Studio is a user or a group.</p>
        pub fn identity_type(mut self, inp: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(inp);
            self
        }
        /// <p>Specifies whether the identity to delete from the Amazon EMR Studio is a user or a group.</p>
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeCluster`.
    ///
    /// <p>Provides cluster-level details including status, hardware and software configuration,
    /// VPC settings, and so on.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeCluster<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_cluster_input::Builder,
    }
    impl<C, M, R> DescribeCluster<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeClusterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeClusterInputOperationOutputAlias,
                crate::output::DescribeClusterOutput,
                crate::error::DescribeClusterError,
                crate::input::DescribeClusterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster to describe.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The identifier of the cluster to describe.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeJobFlows`.
    ///
    /// <p>This API is no longer supported and will eventually be removed. We recommend you use
    /// <a>ListClusters</a>, <a>DescribeCluster</a>, <a>ListSteps</a>, <a>ListInstanceGroups</a> and <a>ListBootstrapActions</a> instead.</p>
    /// <p>DescribeJobFlows returns a list of job flows that match all of the supplied parameters.
    /// The parameters can include a list of job flow IDs, job flow states, and restrictions on job
    /// flow creation date and time.</p>
    /// <p>Regardless of supplied parameters, only job flows created within the last two months are
    /// returned.</p>
    /// <p>If no parameters are supplied, then job flows matching either of the following criteria
    /// are returned:</p>
    /// <ul>
    /// <li>
    /// <p>Job flows created and completed in the last two weeks</p>
    /// </li>
    /// <li>
    /// <p> Job flows created within the last two months that are in one of the following
    /// states: <code>RUNNING</code>, <code>WAITING</code>, <code>SHUTTING_DOWN</code>,
    /// <code>STARTING</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>Amazon EMR can return a maximum of 512 job flow descriptions.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeJobFlows<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_job_flows_input::Builder,
    }
    impl<C, M, R> DescribeJobFlows<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeJobFlows`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeJobFlowsOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeJobFlowsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeJobFlowsInputOperationOutputAlias,
                crate::output::DescribeJobFlowsOutput,
                crate::error::DescribeJobFlowsError,
                crate::input::DescribeJobFlowsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Return only job flows created after this date and time.</p>
        pub fn created_after(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.created_after(inp);
            self
        }
        /// <p>Return only job flows created after this date and time.</p>
        pub fn set_created_after(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_created_after(input);
            self
        }
        /// <p>Return only job flows created before this date and time.</p>
        pub fn created_before(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.created_before(inp);
            self
        }
        /// <p>Return only job flows created before this date and time.</p>
        pub fn set_created_before(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_created_before(input);
            self
        }
        /// Appends an item to `JobFlowIds`.
        ///
        /// To override the contents of this collection use [`set_job_flow_ids`](Self::set_job_flow_ids).
        ///
        /// <p>Return only job flows whose job flow ID is contained in this list.</p>
        pub fn job_flow_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_ids(inp);
            self
        }
        /// <p>Return only job flows whose job flow ID is contained in this list.</p>
        pub fn set_job_flow_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_ids(input);
            self
        }
        /// Appends an item to `JobFlowStates`.
        ///
        /// To override the contents of this collection use [`set_job_flow_states`](Self::set_job_flow_states).
        ///
        /// <p>Return only job flows whose state is contained in this list.</p>
        pub fn job_flow_states(
            mut self,
            inp: impl Into<crate::model::JobFlowExecutionState>,
        ) -> Self {
            self.inner = self.inner.job_flow_states(inp);
            self
        }
        /// <p>Return only job flows whose state is contained in this list.</p>
        pub fn set_job_flow_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobFlowExecutionState>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_states(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeNotebookExecution`.
    ///
    /// <p>Provides details of a notebook execution.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeNotebookExecution<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_notebook_execution_input::Builder,
    }
    impl<C, M, R> DescribeNotebookExecution<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeNotebookExecution`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeNotebookExecutionOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeNotebookExecutionError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeNotebookExecutionInputOperationOutputAlias,
                crate::output::DescribeNotebookExecutionOutput,
                crate::error::DescribeNotebookExecutionError,
                crate::input::DescribeNotebookExecutionInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the notebook execution.</p>
        pub fn notebook_execution_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notebook_execution_id(inp);
            self
        }
        /// <p>The unique identifier of the notebook execution.</p>
        pub fn set_notebook_execution_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_execution_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeReleaseLabel`.
    ///
    /// <p>Provides EMR release label details, such as releases available the region where the API request is run, and the available applications for a specific EMR release label. Can also list EMR release versions that support a specified version of Spark.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeReleaseLabel<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_release_label_input::Builder,
    }
    impl<C, M, R> DescribeReleaseLabel<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeReleaseLabel`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeReleaseLabelOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeReleaseLabelError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeReleaseLabelInputOperationOutputAlias,
                crate::output::DescribeReleaseLabelOutput,
                crate::error::DescribeReleaseLabelError,
                crate::input::DescribeReleaseLabelInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The target release label to be described.</p>
        pub fn release_label(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.release_label(inp);
            self
        }
        /// <p>The target release label to be described.</p>
        pub fn set_release_label(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_release_label(input);
            self
        }
        /// <p>The pagination token. Reserved for future use. Currently set to null.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>The pagination token. Reserved for future use. Currently set to null.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>Reserved for future use. Currently set to null.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>Reserved for future use. Currently set to null.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeSecurityConfiguration`.
    ///
    /// <p>Provides the details of a security configuration by returning the configuration
    /// JSON.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeSecurityConfiguration<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_security_configuration_input::Builder,
    }
    impl<C, M, R> DescribeSecurityConfiguration<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeSecurityConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeSecurityConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeSecurityConfigurationError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeSecurityConfigurationInputOperationOutputAlias,
                crate::output::DescribeSecurityConfigurationOutput,
                crate::error::DescribeSecurityConfigurationError,
                crate::input::DescribeSecurityConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the security configuration.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the security configuration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeStep`.
    ///
    /// <p>Provides more detail about the cluster step.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeStep<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_step_input::Builder,
    }
    impl<C, M, R> DescribeStep<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeStep`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeStepOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeStepError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeStepInputOperationOutputAlias,
                crate::output::DescribeStepOutput,
                crate::error::DescribeStepError,
                crate::input::DescribeStepInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster with steps to describe.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The identifier of the cluster with steps to describe.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The identifier of the step to describe.</p>
        pub fn step_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.step_id(inp);
            self
        }
        /// <p>The identifier of the step to describe.</p>
        pub fn set_step_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_step_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeStudio`.
    ///
    /// <p>Returns details for the specified Amazon EMR Studio including ID, Name, VPC, Studio
    /// access URL, and so on.</p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeStudio<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_studio_input::Builder,
    }
    impl<C, M, R> DescribeStudio<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeStudio`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeStudioOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeStudioError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeStudioInputOperationOutputAlias,
                crate::output::DescribeStudioOutput,
                crate::error::DescribeStudioError,
                crate::input::DescribeStudioInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon EMR Studio ID.</p>
        pub fn studio_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(inp);
            self
        }
        /// <p>The Amazon EMR Studio ID.</p>
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetAutoTerminationPolicy`.
    ///
    /// <p>Returns the auto-termination policy for an Amazon EMR cluster.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetAutoTerminationPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_auto_termination_policy_input::Builder,
    }
    impl<C, M, R> GetAutoTerminationPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetAutoTerminationPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAutoTerminationPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::GetAutoTerminationPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetAutoTerminationPolicyInputOperationOutputAlias,
                crate::output::GetAutoTerminationPolicyOutput,
                crate::error::GetAutoTerminationPolicyError,
                crate::input::GetAutoTerminationPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of the Amazon EMR cluster for which the auto-termination policy will be fetched.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>Specifies the ID of the Amazon EMR cluster for which the auto-termination policy will be fetched.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetBlockPublicAccessConfiguration`.
    ///
    /// <p>Returns the Amazon EMR block public access configuration for your Amazon Web Services account in the
    /// current Region. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/configure-block-public-access.html">Configure Block
    /// Public Access for Amazon EMR</a> in the <i>Amazon EMR Management
    /// Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetBlockPublicAccessConfiguration<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_block_public_access_configuration_input::Builder,
    }
    impl<C, M, R> GetBlockPublicAccessConfiguration<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetBlockPublicAccessConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetBlockPublicAccessConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::GetBlockPublicAccessConfigurationError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetBlockPublicAccessConfigurationInputOperationOutputAlias,
                crate::output::GetBlockPublicAccessConfigurationOutput,
                crate::error::GetBlockPublicAccessConfigurationError,
                crate::input::GetBlockPublicAccessConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
    }
    /// Fluent builder constructing a request to `GetManagedScalingPolicy`.
    ///
    /// <p>Fetches the attached managed scaling policy for an Amazon EMR cluster. </p>
    #[derive(std::fmt::Debug)]
    pub struct GetManagedScalingPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_managed_scaling_policy_input::Builder,
    }
    impl<C, M, R> GetManagedScalingPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetManagedScalingPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetManagedScalingPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::GetManagedScalingPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetManagedScalingPolicyInputOperationOutputAlias,
                crate::output::GetManagedScalingPolicyOutput,
                crate::error::GetManagedScalingPolicyError,
                crate::input::GetManagedScalingPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of the cluster for which the managed scaling policy will be fetched.
        /// </p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>Specifies the ID of the cluster for which the managed scaling policy will be fetched.
        /// </p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetStudioSessionMapping`.
    ///
    /// <p>Fetches mapping details for the specified Amazon EMR Studio and identity (user or
    /// group).</p>
    #[derive(std::fmt::Debug)]
    pub struct GetStudioSessionMapping<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_studio_session_mapping_input::Builder,
    }
    impl<C, M, R> GetStudioSessionMapping<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetStudioSessionMapping`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetStudioSessionMappingOutput,
            aws_smithy_http::result::SdkError<crate::error::GetStudioSessionMappingError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetStudioSessionMappingInputOperationOutputAlias,
                crate::output::GetStudioSessionMappingOutput,
                crate::error::GetStudioSessionMappingError,
                crate::input::GetStudioSessionMappingInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(inp);
            self
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group. For more information, see
        /// <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group. For more information, see
        /// <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>The name of the user or group to fetch. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_name(inp);
            self
        }
        /// <p>The name of the user or group to fetch. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn set_identity_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_name(input);
            self
        }
        /// <p>Specifies whether the identity to fetch is a user or a group.</p>
        pub fn identity_type(mut self, inp: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(inp);
            self
        }
        /// <p>Specifies whether the identity to fetch is a user or a group.</p>
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListBootstrapActions`.
    ///
    /// <p>Provides information about the bootstrap actions associated with a cluster.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListBootstrapActions<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_bootstrap_actions_input::Builder,
    }
    impl<C, M, R> ListBootstrapActions<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListBootstrapActions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListBootstrapActionsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListBootstrapActionsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListBootstrapActionsInputOperationOutputAlias,
                crate::output::ListBootstrapActionsOutput,
                crate::error::ListBootstrapActionsError,
                crate::input::ListBootstrapActionsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The cluster identifier for the bootstrap actions to list.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The cluster identifier for the bootstrap actions to list.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListClusters`.
    ///
    /// <p>Provides the status of all clusters visible to this Amazon Web Services account. Allows you to filter
    /// the list of clusters based on certain criteria; for example, filtering by cluster creation
    /// date and time or by status. This call returns a maximum of 50 clusters in unsorted order per call, but
    /// returns a marker to track the paging of the cluster list across multiple ListClusters
    /// calls.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListClusters<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_clusters_input::Builder,
    }
    impl<C, M, R> ListClusters<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListClusters`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListClustersOutput,
            aws_smithy_http::result::SdkError<crate::error::ListClustersError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListClustersInputOperationOutputAlias,
                crate::output::ListClustersOutput,
                crate::error::ListClustersError,
                crate::input::ListClustersInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The creation date and time beginning value filter for listing clusters.</p>
        pub fn created_after(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.created_after(inp);
            self
        }
        /// <p>The creation date and time beginning value filter for listing clusters.</p>
        pub fn set_created_after(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_created_after(input);
            self
        }
        /// <p>The creation date and time end value filter for listing clusters.</p>
        pub fn created_before(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.created_before(inp);
            self
        }
        /// <p>The creation date and time end value filter for listing clusters.</p>
        pub fn set_created_before(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_created_before(input);
            self
        }
        /// Appends an item to `ClusterStates`.
        ///
        /// To override the contents of this collection use [`set_cluster_states`](Self::set_cluster_states).
        ///
        /// <p>The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.</p>
        pub fn cluster_states(mut self, inp: impl Into<crate::model::ClusterState>) -> Self {
            self.inner = self.inner.cluster_states(inp);
            self
        }
        /// <p>The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.</p>
        pub fn set_cluster_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClusterState>>,
        ) -> Self {
            self.inner = self.inner.set_cluster_states(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListInstanceFleets`.
    ///
    /// <p>Lists all available details about the instance fleets in a cluster.</p>
    /// <note>
    /// <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    /// later, excluding 5.0.x versions.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct ListInstanceFleets<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_instance_fleets_input::Builder,
    }
    impl<C, M, R> ListInstanceFleets<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListInstanceFleets`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListInstanceFleetsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListInstanceFleetsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListInstanceFleetsInputOperationOutputAlias,
                crate::output::ListInstanceFleetsOutput,
                crate::error::ListInstanceFleetsError,
                crate::input::ListInstanceFleetsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListInstanceGroups`.
    ///
    /// <p>Provides all available details about the instance groups in a cluster.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListInstanceGroups<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_instance_groups_input::Builder,
    }
    impl<C, M, R> ListInstanceGroups<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListInstanceGroups`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListInstanceGroupsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListInstanceGroupsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListInstanceGroupsInputOperationOutputAlias,
                crate::output::ListInstanceGroupsOutput,
                crate::error::ListInstanceGroupsError,
                crate::input::ListInstanceGroupsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster for which to list the instance groups.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The identifier of the cluster for which to list the instance groups.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListInstances`.
    ///
    /// <p>Provides information for all active EC2 instances and EC2 instances terminated in the
    /// last 30 days, up to a maximum of 2,000. EC2 instances in any of the following states are
    /// considered active: AWAITING_FULFILLMENT, PROVISIONING, BOOTSTRAPPING, RUNNING.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListInstances<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_instances_input::Builder,
    }
    impl<C, M, R> ListInstances<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListInstances`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListInstancesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListInstancesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListInstancesInputOperationOutputAlias,
                crate::output::ListInstancesOutput,
                crate::error::ListInstancesError,
                crate::input::ListInstancesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster for which to list the instances.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The identifier of the cluster for which to list the instances.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The identifier of the instance group for which to list the instances.</p>
        pub fn instance_group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_group_id(inp);
            self
        }
        /// <p>The identifier of the instance group for which to list the instances.</p>
        pub fn set_instance_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_group_id(input);
            self
        }
        /// Appends an item to `InstanceGroupTypes`.
        ///
        /// To override the contents of this collection use [`set_instance_group_types`](Self::set_instance_group_types).
        ///
        /// <p>The type of instance group for which to list the instances.</p>
        pub fn instance_group_types(
            mut self,
            inp: impl Into<crate::model::InstanceGroupType>,
        ) -> Self {
            self.inner = self.inner.instance_group_types(inp);
            self
        }
        /// <p>The type of instance group for which to list the instances.</p>
        pub fn set_instance_group_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceGroupType>>,
        ) -> Self {
            self.inner = self.inner.set_instance_group_types(input);
            self
        }
        /// <p>The unique identifier of the instance fleet.</p>
        pub fn instance_fleet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_fleet_id(inp);
            self
        }
        /// <p>The unique identifier of the instance fleet.</p>
        pub fn set_instance_fleet_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_fleet_id(input);
            self
        }
        /// <p>The node type of the instance fleet. For example MASTER, CORE, or TASK.</p>
        pub fn instance_fleet_type(mut self, inp: crate::model::InstanceFleetType) -> Self {
            self.inner = self.inner.instance_fleet_type(inp);
            self
        }
        /// <p>The node type of the instance fleet. For example MASTER, CORE, or TASK.</p>
        pub fn set_instance_fleet_type(
            mut self,
            input: std::option::Option<crate::model::InstanceFleetType>,
        ) -> Self {
            self.inner = self.inner.set_instance_fleet_type(input);
            self
        }
        /// Appends an item to `InstanceStates`.
        ///
        /// To override the contents of this collection use [`set_instance_states`](Self::set_instance_states).
        ///
        /// <p>A list of instance states that will filter the instances returned with this
        /// request.</p>
        pub fn instance_states(mut self, inp: impl Into<crate::model::InstanceState>) -> Self {
            self.inner = self.inner.instance_states(inp);
            self
        }
        /// <p>A list of instance states that will filter the instances returned with this
        /// request.</p>
        pub fn set_instance_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceState>>,
        ) -> Self {
            self.inner = self.inner.set_instance_states(input);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The pagination token that indicates the next set of results to retrieve.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListNotebookExecutions`.
    ///
    /// <p>Provides summaries of all notebook executions. You can filter the list based on multiple
    /// criteria such as status, time range, and editor id. Returns a maximum of 50 notebook
    /// executions and a marker to track the paging of a longer notebook execution list across
    /// multiple <code>ListNotebookExecution</code> calls.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListNotebookExecutions<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_notebook_executions_input::Builder,
    }
    impl<C, M, R> ListNotebookExecutions<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListNotebookExecutions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListNotebookExecutionsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListNotebookExecutionsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListNotebookExecutionsInputOperationOutputAlias,
                crate::output::ListNotebookExecutionsOutput,
                crate::error::ListNotebookExecutionsError,
                crate::input::ListNotebookExecutionsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique ID of the editor associated with the notebook execution.</p>
        pub fn editor_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.editor_id(inp);
            self
        }
        /// <p>The unique ID of the editor associated with the notebook execution.</p>
        pub fn set_editor_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_editor_id(input);
            self
        }
        /// <p>The status filter for listing notebook executions.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>START_PENDING</code> indicates that the cluster has received the execution
        /// request but execution has not begun.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STARTING</code> indicates that the execution is starting on the
        /// cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RUNNING</code> indicates that the execution is being processed by the
        /// cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FINISHING</code> indicates that execution processing is in the final
        /// stages.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FINISHED</code> indicates that the execution has completed without
        /// error.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FAILING</code> indicates that the execution is failing and will not finish
        /// successfully.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FAILED</code> indicates that the execution failed.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STOP_PENDING</code> indicates that the cluster has received a
        /// <code>StopNotebookExecution</code> request and the stop is pending.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STOPPING</code> indicates that the cluster is in the process of stopping the
        /// execution as a result of a <code>StopNotebookExecution</code> request.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STOPPED</code> indicates that the execution stopped because of a
        /// <code>StopNotebookExecution</code> request.</p>
        /// </li>
        /// </ul>
        pub fn status(mut self, inp: crate::model::NotebookExecutionStatus) -> Self {
            self.inner = self.inner.status(inp);
            self
        }
        /// <p>The status filter for listing notebook executions.</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>START_PENDING</code> indicates that the cluster has received the execution
        /// request but execution has not begun.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STARTING</code> indicates that the execution is starting on the
        /// cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RUNNING</code> indicates that the execution is being processed by the
        /// cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FINISHING</code> indicates that execution processing is in the final
        /// stages.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FINISHED</code> indicates that the execution has completed without
        /// error.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FAILING</code> indicates that the execution is failing and will not finish
        /// successfully.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FAILED</code> indicates that the execution failed.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STOP_PENDING</code> indicates that the cluster has received a
        /// <code>StopNotebookExecution</code> request and the stop is pending.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STOPPING</code> indicates that the cluster is in the process of stopping the
        /// execution as a result of a <code>StopNotebookExecution</code> request.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>STOPPED</code> indicates that the execution stopped because of a
        /// <code>StopNotebookExecution</code> request.</p>
        /// </li>
        /// </ul>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::NotebookExecutionStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>The beginning of time range filter for listing notebook executions. The default is the
        /// timestamp of 30 days ago.</p>
        pub fn from(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.from(inp);
            self
        }
        /// <p>The beginning of time range filter for listing notebook executions. The default is the
        /// timestamp of 30 days ago.</p>
        pub fn set_from(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
            self.inner = self.inner.set_from(input);
            self
        }
        /// <p>The end of time range filter for listing notebook executions. The default is the current
        /// timestamp.</p>
        pub fn to(mut self, inp: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.to(inp);
            self
        }
        /// <p>The end of time range filter for listing notebook executions. The default is the current
        /// timestamp.</p>
        pub fn set_to(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
            self.inner = self.inner.set_to(input);
            self
        }
        /// <p>The pagination token, returned by a previous <code>ListNotebookExecutions</code> call,
        /// that indicates the start of the list for this <code>ListNotebookExecutions</code>
        /// call.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The pagination token, returned by a previous <code>ListNotebookExecutions</code> call,
        /// that indicates the start of the list for this <code>ListNotebookExecutions</code>
        /// call.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListReleaseLabels`.
    ///
    /// <p>Retrieves release labels of EMR services in the region where the API is called.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListReleaseLabels<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_release_labels_input::Builder,
    }
    impl<C, M, R> ListReleaseLabels<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListReleaseLabels`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListReleaseLabelsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListReleaseLabelsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListReleaseLabelsInputOperationOutputAlias,
                crate::output::ListReleaseLabelsOutput,
                crate::error::ListReleaseLabelsError,
                crate::input::ListReleaseLabelsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Filters the results of the request. <code>Prefix</code> specifies the prefix of release labels to return. <code>Application</code> specifies the application (with/without version) of release labels to return.</p>
        pub fn filters(mut self, inp: crate::model::ReleaseLabelFilter) -> Self {
            self.inner = self.inner.filters(inp);
            self
        }
        /// <p>Filters the results of the request. <code>Prefix</code> specifies the prefix of release labels to return. <code>Application</code> specifies the application (with/without version) of release labels to return.</p>
        pub fn set_filters(
            mut self,
            input: std::option::Option<crate::model::ReleaseLabelFilter>,
        ) -> Self {
            self.inner = self.inner.set_filters(input);
            self
        }
        /// <p>Specifies the next page of results. If <code>NextToken</code> is not specified, which is usually the case for the first request of ListReleaseLabels, the first page of results are determined by other filtering parameters or by the latest version. The <code>ListReleaseLabels</code> request fails if the identity (Amazon Web Services account ID) and all filtering parameters are different from the original request, or if the <code>NextToken</code> is expired or tampered with.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>Specifies the next page of results. If <code>NextToken</code> is not specified, which is usually the case for the first request of ListReleaseLabels, the first page of results are determined by other filtering parameters or by the latest version. The <code>ListReleaseLabels</code> request fails if the identity (Amazon Web Services account ID) and all filtering parameters are different from the original request, or if the <code>NextToken</code> is expired or tampered with.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>Defines the maximum number of release labels to return in a single response. The default is <code>100</code>.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>Defines the maximum number of release labels to return in a single response. The default is <code>100</code>.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListSecurityConfigurations`.
    ///
    /// <p>Lists all the security configurations visible to this account, providing their creation
    /// dates and times, and their names. This call returns a maximum of 50 clusters per call, but
    /// returns a marker to track the paging of the cluster list across multiple
    /// ListSecurityConfigurations calls.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListSecurityConfigurations<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_security_configurations_input::Builder,
    }
    impl<C, M, R> ListSecurityConfigurations<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListSecurityConfigurations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListSecurityConfigurationsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListSecurityConfigurationsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListSecurityConfigurationsInputOperationOutputAlias,
                crate::output::ListSecurityConfigurationsOutput,
                crate::error::ListSecurityConfigurationsError,
                crate::input::ListSecurityConfigurationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The pagination token that indicates the set of results to retrieve.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The pagination token that indicates the set of results to retrieve.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListSteps`.
    ///
    /// <p>Provides a list of steps for the cluster in reverse order unless you specify
    /// <code>stepIds</code> with the request or filter by <code>StepStates</code>. You can
    /// specify a maximum of 10 <code>stepIDs</code>. The CLI automatically paginates results to return a list greater than 50 steps. To return more than 50 steps using the CLI, specify a <code>Marker</code>, which is a pagination token that indicates the next set of steps to retrieve.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListSteps<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_steps_input::Builder,
    }
    impl<C, M, R> ListSteps<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListSteps`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListStepsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListStepsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListStepsInputOperationOutputAlias,
                crate::output::ListStepsOutput,
                crate::error::ListStepsError,
                crate::input::ListStepsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The identifier of the cluster for which to list the steps.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The identifier of the cluster for which to list the steps.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// Appends an item to `StepStates`.
        ///
        /// To override the contents of this collection use [`set_step_states`](Self::set_step_states).
        ///
        /// <p>The filter to limit the step list based on certain states.</p>
        pub fn step_states(mut self, inp: impl Into<crate::model::StepState>) -> Self {
            self.inner = self.inner.step_states(inp);
            self
        }
        /// <p>The filter to limit the step list based on certain states.</p>
        pub fn set_step_states(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StepState>>,
        ) -> Self {
            self.inner = self.inner.set_step_states(input);
            self
        }
        /// Appends an item to `StepIds`.
        ///
        /// To override the contents of this collection use [`set_step_ids`](Self::set_step_ids).
        ///
        /// <p>The filter to limit the step list based on the identifier of the steps. You can specify
        /// a maximum of ten Step IDs. The character constraint applies to the overall length of the
        /// array.</p>
        pub fn step_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.step_ids(inp);
            self
        }
        /// <p>The filter to limit the step list based on the identifier of the steps. You can specify
        /// a maximum of ten Step IDs. The character constraint applies to the overall length of the
        /// array.</p>
        pub fn set_step_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_step_ids(input);
            self
        }
        /// <p>The maximum number of steps that a single <code>ListSteps</code> action returns is 50. To return a longer list of steps, use multiple <code>ListSteps</code> actions along with the <code>Marker</code> parameter, which is a pagination token that indicates the next set of results to retrieve.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The maximum number of steps that a single <code>ListSteps</code> action returns is 50. To return a longer list of steps, use multiple <code>ListSteps</code> actions along with the <code>Marker</code> parameter, which is a pagination token that indicates the next set of results to retrieve.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListStudios`.
    ///
    /// <p>Returns a list of all Amazon EMR Studios associated with the Amazon Web Services account. The list
    /// includes details such as ID, Studio Access URL, and creation time for each Studio.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListStudios<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_studios_input::Builder,
    }
    impl<C, M, R> ListStudios<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListStudios`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListStudiosOutput,
            aws_smithy_http::result::SdkError<crate::error::ListStudiosError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListStudiosInputOperationOutputAlias,
                crate::output::ListStudiosOutput,
                crate::error::ListStudiosError,
                crate::input::ListStudiosInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The pagination token that indicates the set of results to retrieve.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The pagination token that indicates the set of results to retrieve.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListStudioSessionMappings`.
    ///
    /// <p>Returns a list of all user or group session mappings for the Amazon EMR Studio specified by
    /// <code>StudioId</code>.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListStudioSessionMappings<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_studio_session_mappings_input::Builder,
    }
    impl<C, M, R> ListStudioSessionMappings<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListStudioSessionMappings`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListStudioSessionMappingsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListStudioSessionMappingsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListStudioSessionMappingsInputOperationOutputAlias,
                crate::output::ListStudioSessionMappingsOutput,
                crate::error::ListStudioSessionMappingsError,
                crate::input::ListStudioSessionMappingsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(inp);
            self
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>Specifies whether to return session mappings for users or groups. If not specified, the
        /// results include session mapping details for both users and groups.</p>
        pub fn identity_type(mut self, inp: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(inp);
            self
        }
        /// <p>Specifies whether to return session mappings for users or groups. If not specified, the
        /// results include session mapping details for both users and groups.</p>
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
        /// <p>The pagination token that indicates the set of results to retrieve.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>The pagination token that indicates the set of results to retrieve.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ModifyCluster`.
    ///
    /// <p>Modifies the number of steps that can be executed concurrently for the cluster specified
    /// using ClusterID.</p>
    #[derive(std::fmt::Debug)]
    pub struct ModifyCluster<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_cluster_input::Builder,
    }
    impl<C, M, R> ModifyCluster<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ModifyCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::ModifyClusterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifyClusterInputOperationOutputAlias,
                crate::output::ModifyClusterOutput,
                crate::error::ModifyClusterError,
                crate::input::ModifyClusterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256 steps. We recommend that you do not change this parameter while steps are running or the <code>ActionOnFailure</code> setting may not behave as expected. For more information see <a>Step$ActionOnFailure</a>.</p>
        pub fn step_concurrency_level(mut self, inp: i32) -> Self {
            self.inner = self.inner.step_concurrency_level(inp);
            self
        }
        /// <p>The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256 steps. We recommend that you do not change this parameter while steps are running or the <code>ActionOnFailure</code> setting may not behave as expected. For more information see <a>Step$ActionOnFailure</a>.</p>
        pub fn set_step_concurrency_level(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_step_concurrency_level(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ModifyInstanceFleet`.
    ///
    /// <p>Modifies the target On-Demand and target Spot capacities for the instance fleet with the
    /// specified InstanceFleetID within the cluster specified using ClusterID. The call either
    /// succeeds or fails atomically.</p>
    /// <note>
    /// <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and
    /// later, excluding 5.0.x versions.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct ModifyInstanceFleet<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_instance_fleet_input::Builder,
    }
    impl<C, M, R> ModifyInstanceFleet<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ModifyInstanceFleet`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyInstanceFleetOutput,
            aws_smithy_http::result::SdkError<crate::error::ModifyInstanceFleetError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifyInstanceFleetInputOperationOutputAlias,
                crate::output::ModifyInstanceFleetOutput,
                crate::error::ModifyInstanceFleetError,
                crate::input::ModifyInstanceFleetInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The unique identifier of the cluster.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>The configuration parameters of the instance fleet.</p>
        pub fn instance_fleet(mut self, inp: crate::model::InstanceFleetModifyConfig) -> Self {
            self.inner = self.inner.instance_fleet(inp);
            self
        }
        /// <p>The configuration parameters of the instance fleet.</p>
        pub fn set_instance_fleet(
            mut self,
            input: std::option::Option<crate::model::InstanceFleetModifyConfig>,
        ) -> Self {
            self.inner = self.inner.set_instance_fleet(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ModifyInstanceGroups`.
    ///
    /// <p>ModifyInstanceGroups modifies the number of nodes and configuration settings of an
    /// instance group. The input parameters include the new target instance count for the group
    /// and the instance group ID. The call will either succeed or fail atomically.</p>
    #[derive(std::fmt::Debug)]
    pub struct ModifyInstanceGroups<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::modify_instance_groups_input::Builder,
    }
    impl<C, M, R> ModifyInstanceGroups<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ModifyInstanceGroups`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ModifyInstanceGroupsOutput,
            aws_smithy_http::result::SdkError<crate::error::ModifyInstanceGroupsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ModifyInstanceGroupsInputOperationOutputAlias,
                crate::output::ModifyInstanceGroupsOutput,
                crate::error::ModifyInstanceGroupsError,
                crate::input::ModifyInstanceGroupsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the cluster to which the instance group belongs.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>The ID of the cluster to which the instance group belongs.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// Appends an item to `InstanceGroups`.
        ///
        /// To override the contents of this collection use [`set_instance_groups`](Self::set_instance_groups).
        ///
        /// <p>Instance groups to change.</p>
        pub fn instance_groups(
            mut self,
            inp: impl Into<crate::model::InstanceGroupModifyConfig>,
        ) -> Self {
            self.inner = self.inner.instance_groups(inp);
            self
        }
        /// <p>Instance groups to change.</p>
        pub fn set_instance_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceGroupModifyConfig>>,
        ) -> Self {
            self.inner = self.inner.set_instance_groups(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutAutoScalingPolicy`.
    ///
    /// <p>Creates or updates an automatic scaling policy for a core instance group or task
    /// instance group in an Amazon EMR cluster. The automatic scaling policy defines how an
    /// instance group dynamically adds and terminates EC2 instances in response to the value of a
    /// CloudWatch metric.</p>
    #[derive(std::fmt::Debug)]
    pub struct PutAutoScalingPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_auto_scaling_policy_input::Builder,
    }
    impl<C, M, R> PutAutoScalingPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `PutAutoScalingPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutAutoScalingPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::PutAutoScalingPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutAutoScalingPolicyInputOperationOutputAlias,
                crate::output::PutAutoScalingPolicyOutput,
                crate::error::PutAutoScalingPolicyError,
                crate::input::PutAutoScalingPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
        /// is applied is within this cluster.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
        /// is applied is within this cluster.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Specifies the ID of the instance group to which the automatic scaling policy is
        /// applied.</p>
        pub fn instance_group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_group_id(inp);
            self
        }
        /// <p>Specifies the ID of the instance group to which the automatic scaling policy is
        /// applied.</p>
        pub fn set_instance_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_group_id(input);
            self
        }
        /// <p>Specifies the definition of the automatic scaling policy.</p>
        pub fn auto_scaling_policy(mut self, inp: crate::model::AutoScalingPolicy) -> Self {
            self.inner = self.inner.auto_scaling_policy(inp);
            self
        }
        /// <p>Specifies the definition of the automatic scaling policy.</p>
        pub fn set_auto_scaling_policy(
            mut self,
            input: std::option::Option<crate::model::AutoScalingPolicy>,
        ) -> Self {
            self.inner = self.inner.set_auto_scaling_policy(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutAutoTerminationPolicy`.
    ///
    /// <p>Creates or updates an auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html">Control cluster termination</a>.</p>
    #[derive(std::fmt::Debug)]
    pub struct PutAutoTerminationPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_auto_termination_policy_input::Builder,
    }
    impl<C, M, R> PutAutoTerminationPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `PutAutoTerminationPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutAutoTerminationPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::PutAutoTerminationPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutAutoTerminationPolicyInputOperationOutputAlias,
                crate::output::PutAutoTerminationPolicyOutput,
                crate::error::PutAutoTerminationPolicyError,
                crate::input::PutAutoTerminationPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of the Amazon EMR cluster to which the auto-termination policy will be attached.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>Specifies the ID of the Amazon EMR cluster to which the auto-termination policy will be attached.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Specifies the auto-termination policy to attach to the cluster.</p>
        pub fn auto_termination_policy(mut self, inp: crate::model::AutoTerminationPolicy) -> Self {
            self.inner = self.inner.auto_termination_policy(inp);
            self
        }
        /// <p>Specifies the auto-termination policy to attach to the cluster.</p>
        pub fn set_auto_termination_policy(
            mut self,
            input: std::option::Option<crate::model::AutoTerminationPolicy>,
        ) -> Self {
            self.inner = self.inner.set_auto_termination_policy(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutBlockPublicAccessConfiguration`.
    ///
    /// <p>Creates or updates an Amazon EMR block public access configuration for your Amazon Web Services account
    /// in the current Region. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/configure-block-public-access.html">Configure Block
    /// Public Access for Amazon EMR</a> in the <i>Amazon EMR Management
    /// Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct PutBlockPublicAccessConfiguration<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_block_public_access_configuration_input::Builder,
    }
    impl<C, M, R> PutBlockPublicAccessConfiguration<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `PutBlockPublicAccessConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutBlockPublicAccessConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::PutBlockPublicAccessConfigurationError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutBlockPublicAccessConfigurationInputOperationOutputAlias,
                crate::output::PutBlockPublicAccessConfigurationOutput,
                crate::error::PutBlockPublicAccessConfigurationError,
                crate::input::PutBlockPublicAccessConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>A configuration for Amazon EMR block public access. The configuration applies to all
        /// clusters created in your account for the current Region. The configuration specifies
        /// whether block public access is enabled. If block public access is enabled, security groups
        /// associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or
        /// ::/0 on a port, unless the port is specified as an exception using
        /// <code>PermittedPublicSecurityGroupRuleRanges</code> in the
        /// <code>BlockPublicAccessConfiguration</code>. By default, Port 22 (SSH) is an exception,
        /// and public access is allowed on this port. You can change this by updating
        /// <code>BlockPublicSecurityGroupRules</code> to remove the exception.</p>
        /// <note>
        /// <p>For accounts that created clusters in a Region before November 25, 2019, block public
        /// access is disabled by default in that Region. To use this feature, you must manually
        /// enable and configure it. For accounts that did not create an EMR cluster in a Region
        /// before this date, block public access is enabled by default in that Region.</p>
        /// </note>
        pub fn block_public_access_configuration(
            mut self,
            inp: crate::model::BlockPublicAccessConfiguration,
        ) -> Self {
            self.inner = self.inner.block_public_access_configuration(inp);
            self
        }
        /// <p>A configuration for Amazon EMR block public access. The configuration applies to all
        /// clusters created in your account for the current Region. The configuration specifies
        /// whether block public access is enabled. If block public access is enabled, security groups
        /// associated with the cluster cannot have rules that allow inbound traffic from 0.0.0.0/0 or
        /// ::/0 on a port, unless the port is specified as an exception using
        /// <code>PermittedPublicSecurityGroupRuleRanges</code> in the
        /// <code>BlockPublicAccessConfiguration</code>. By default, Port 22 (SSH) is an exception,
        /// and public access is allowed on this port. You can change this by updating
        /// <code>BlockPublicSecurityGroupRules</code> to remove the exception.</p>
        /// <note>
        /// <p>For accounts that created clusters in a Region before November 25, 2019, block public
        /// access is disabled by default in that Region. To use this feature, you must manually
        /// enable and configure it. For accounts that did not create an EMR cluster in a Region
        /// before this date, block public access is enabled by default in that Region.</p>
        /// </note>
        pub fn set_block_public_access_configuration(
            mut self,
            input: std::option::Option<crate::model::BlockPublicAccessConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_block_public_access_configuration(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutManagedScalingPolicy`.
    ///
    /// <p>Creates or updates a managed scaling policy for an Amazon EMR cluster. The managed
    /// scaling policy defines the limits for resources, such as EC2 instances that can be added or
    /// terminated from a cluster. The policy only applies to the core and task nodes. The master
    /// node cannot be scaled after initial configuration. </p>
    #[derive(std::fmt::Debug)]
    pub struct PutManagedScalingPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_managed_scaling_policy_input::Builder,
    }
    impl<C, M, R> PutManagedScalingPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `PutManagedScalingPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutManagedScalingPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::PutManagedScalingPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutManagedScalingPolicyInputOperationOutputAlias,
                crate::output::PutManagedScalingPolicyOutput,
                crate::error::PutManagedScalingPolicyError,
                crate::input::PutManagedScalingPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of an EMR cluster where the managed scaling policy is attached. </p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>Specifies the ID of an EMR cluster where the managed scaling policy is attached. </p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Specifies the constraints for the managed scaling policy. </p>
        pub fn managed_scaling_policy(mut self, inp: crate::model::ManagedScalingPolicy) -> Self {
            self.inner = self.inner.managed_scaling_policy(inp);
            self
        }
        /// <p>Specifies the constraints for the managed scaling policy. </p>
        pub fn set_managed_scaling_policy(
            mut self,
            input: std::option::Option<crate::model::ManagedScalingPolicy>,
        ) -> Self {
            self.inner = self.inner.set_managed_scaling_policy(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RemoveAutoScalingPolicy`.
    ///
    /// <p>Removes an automatic scaling policy from a specified instance group within an EMR
    /// cluster.</p>
    #[derive(std::fmt::Debug)]
    pub struct RemoveAutoScalingPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::remove_auto_scaling_policy_input::Builder,
    }
    impl<C, M, R> RemoveAutoScalingPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `RemoveAutoScalingPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RemoveAutoScalingPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::RemoveAutoScalingPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RemoveAutoScalingPolicyInputOperationOutputAlias,
                crate::output::RemoveAutoScalingPolicyOutput,
                crate::error::RemoveAutoScalingPolicyError,
                crate::input::RemoveAutoScalingPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
        /// is applied is within this cluster.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy
        /// is applied is within this cluster.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
        /// <p>Specifies the ID of the instance group to which the scaling policy is applied.</p>
        pub fn instance_group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.instance_group_id(inp);
            self
        }
        /// <p>Specifies the ID of the instance group to which the scaling policy is applied.</p>
        pub fn set_instance_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_instance_group_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RemoveAutoTerminationPolicy`.
    ///
    /// <p>Removes an auto-termination policy from an Amazon EMR cluster.</p>
    #[derive(std::fmt::Debug)]
    pub struct RemoveAutoTerminationPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::remove_auto_termination_policy_input::Builder,
    }
    impl<C, M, R> RemoveAutoTerminationPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `RemoveAutoTerminationPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RemoveAutoTerminationPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::RemoveAutoTerminationPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RemoveAutoTerminationPolicyInputOperationOutputAlias,
                crate::output::RemoveAutoTerminationPolicyOutput,
                crate::error::RemoveAutoTerminationPolicyError,
                crate::input::RemoveAutoTerminationPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Specifies the ID of the Amazon EMR cluster from which the auto-termination policy will be removed.</p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p>Specifies the ID of the Amazon EMR cluster from which the auto-termination policy will be removed.</p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RemoveManagedScalingPolicy`.
    ///
    /// <p> Removes a managed scaling policy from a specified EMR cluster. </p>
    #[derive(std::fmt::Debug)]
    pub struct RemoveManagedScalingPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::remove_managed_scaling_policy_input::Builder,
    }
    impl<C, M, R> RemoveManagedScalingPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `RemoveManagedScalingPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RemoveManagedScalingPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::RemoveManagedScalingPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RemoveManagedScalingPolicyInputOperationOutputAlias,
                crate::output::RemoveManagedScalingPolicyOutput,
                crate::error::RemoveManagedScalingPolicyError,
                crate::input::RemoveManagedScalingPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p> Specifies the ID of the cluster from which the managed scaling policy will be removed.
        /// </p>
        pub fn cluster_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_id(inp);
            self
        }
        /// <p> Specifies the ID of the cluster from which the managed scaling policy will be removed.
        /// </p>
        pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RemoveTags`.
    ///
    /// <p>Removes tags from an Amazon EMR resource, such as a cluster or Amazon EMR Studio. Tags make it easier to associate resources in
    /// various ways, such as grouping clusters to track your Amazon EMR resource allocation costs.
    /// For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag Clusters</a>. </p>
    /// <p>The following example removes the stack tag with value Prod from a cluster:</p>
    #[derive(std::fmt::Debug)]
    pub struct RemoveTags<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::remove_tags_input::Builder,
    }
    impl<C, M, R> RemoveTags<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `RemoveTags`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RemoveTagsOutput,
            aws_smithy_http::result::SdkError<crate::error::RemoveTagsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RemoveTagsInputOperationOutputAlias,
                crate::output::RemoveTagsOutput,
                crate::error::RemoveTagsError,
                crate::input::RemoveTagsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon EMR resource identifier from which tags will be removed. For example, a
        /// cluster identifier or an Amazon EMR Studio ID.</p>
        pub fn resource_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_id(inp);
            self
        }
        /// <p>The Amazon EMR resource identifier from which tags will be removed. For example, a
        /// cluster identifier or an Amazon EMR Studio ID.</p>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_id(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>A list of tag keys to remove from the resource.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        /// <p>A list of tag keys to remove from the resource.</p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RunJobFlow`.
    ///
    /// <p>RunJobFlow creates and starts running a new cluster (job flow). The cluster runs the
    /// steps specified. After the steps complete, the cluster stops and the HDFS partition is
    /// lost. To prevent loss of data, configure the last step of the job flow to store results in
    /// Amazon S3. If the <a>JobFlowInstancesConfig</a>
    /// <code>KeepJobFlowAliveWhenNoSteps</code> parameter is set to <code>TRUE</code>, the cluster
    /// transitions to the WAITING state rather than shutting down after the steps have completed. </p>
    /// <p>For additional protection, you can set the <a>JobFlowInstancesConfig</a>
    /// <code>TerminationProtected</code> parameter to <code>TRUE</code> to lock the cluster and
    /// prevent it from being terminated by API call, user intervention, or in the event of a job
    /// flow error.</p>
    /// <p>A maximum of 256 steps are allowed in each job flow.</p>
    /// <p>If your cluster is long-running (such as a Hive data warehouse) or complex, you may
    /// require more than 256 steps to process your data. You can bypass the 256-step limitation in
    /// various ways, including using the SSH shell to connect to the master node and submitting
    /// queries directly to the software running on the master node, such as Hive and Hadoop. For
    /// more information on how to do this, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/AddMoreThan256Steps.html">Add More than 256 Steps to a
    /// Cluster</a> in the <i>Amazon EMR Management Guide</i>.</p>
    /// <p>For long running clusters, we recommend that you periodically store your results.</p>
    /// <note>
    /// <p>The instance fleets configuration is available only in Amazon EMR versions 4.8.0 and
    /// later, excluding 5.0.x versions. The RunJobFlow request can contain InstanceFleets
    /// parameters or InstanceGroups parameters, but not both.</p>
    /// </note>
    #[derive(std::fmt::Debug)]
    pub struct RunJobFlow<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::run_job_flow_input::Builder,
    }
    impl<C, M, R> RunJobFlow<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `RunJobFlow`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RunJobFlowOutput,
            aws_smithy_http::result::SdkError<crate::error::RunJobFlowError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RunJobFlowInputOperationOutputAlias,
                crate::output::RunJobFlowOutput,
                crate::error::RunJobFlowError,
                crate::input::RunJobFlowInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the job flow.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>The name of the job flow.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The location in Amazon S3 to write the log files of the job flow. If a value is not
        /// provided, logs are not created.</p>
        pub fn log_uri(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.log_uri(inp);
            self
        }
        /// <p>The location in Amazon S3 to write the log files of the job flow. If a value is not
        /// provided, logs are not created.</p>
        pub fn set_log_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_log_uri(input);
            self
        }
        /// <p>The KMS key used for encrypting log files. If a value is not
        /// provided, the logs remain encrypted by AES-256. This attribute is only available with
        /// Amazon EMR version 5.30.0 and later, excluding Amazon EMR 6.0.0.</p>
        pub fn log_encryption_kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.log_encryption_kms_key_id(inp);
            self
        }
        /// <p>The KMS key used for encrypting log files. If a value is not
        /// provided, the logs remain encrypted by AES-256. This attribute is only available with
        /// Amazon EMR version 5.30.0 and later, excluding Amazon EMR 6.0.0.</p>
        pub fn set_log_encryption_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_log_encryption_kms_key_id(input);
            self
        }
        /// <p>A JSON string for selecting additional features.</p>
        pub fn additional_info(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.additional_info(inp);
            self
        }
        /// <p>A JSON string for selecting additional features.</p>
        pub fn set_additional_info(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_additional_info(input);
            self
        }
        /// <p>Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and
        /// later, <code>ReleaseLabel</code> is used. To specify a custom AMI, use
        /// <code>CustomAmiID</code>.</p>
        pub fn ami_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ami_version(inp);
            self
        }
        /// <p>Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and
        /// later, <code>ReleaseLabel</code> is used. To specify a custom AMI, use
        /// <code>CustomAmiID</code>.</p>
        pub fn set_ami_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ami_version(input);
            self
        }
        /// <p>The Amazon EMR release label, which determines the version of open-source application
        /// packages installed on the cluster. Release labels are in the form <code>emr-x.x.x</code>,
        /// where x.x.x is an Amazon EMR release version such as <code>emr-5.14.0</code>. For more
        /// information about Amazon EMR release versions and included application versions and
        /// features, see <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/">https://docs.aws.amazon.com/emr/latest/ReleaseGuide/</a>. The release
        /// label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use
        /// <code>AmiVersion</code>.</p>
        pub fn release_label(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.release_label(inp);
            self
        }
        /// <p>The Amazon EMR release label, which determines the version of open-source application
        /// packages installed on the cluster. Release labels are in the form <code>emr-x.x.x</code>,
        /// where x.x.x is an Amazon EMR release version such as <code>emr-5.14.0</code>. For more
        /// information about Amazon EMR release versions and included application versions and
        /// features, see <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/">https://docs.aws.amazon.com/emr/latest/ReleaseGuide/</a>. The release
        /// label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use
        /// <code>AmiVersion</code>.</p>
        pub fn set_release_label(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_release_label(input);
            self
        }
        /// <p>A specification of the number and type of Amazon EC2 instances.</p>
        pub fn instances(mut self, inp: crate::model::JobFlowInstancesConfig) -> Self {
            self.inner = self.inner.instances(inp);
            self
        }
        /// <p>A specification of the number and type of Amazon EC2 instances.</p>
        pub fn set_instances(
            mut self,
            input: std::option::Option<crate::model::JobFlowInstancesConfig>,
        ) -> Self {
            self.inner = self.inner.set_instances(input);
            self
        }
        /// Appends an item to `Steps`.
        ///
        /// To override the contents of this collection use [`set_steps`](Self::set_steps).
        ///
        /// <p>A list of steps to run.</p>
        pub fn steps(mut self, inp: impl Into<crate::model::StepConfig>) -> Self {
            self.inner = self.inner.steps(inp);
            self
        }
        /// <p>A list of steps to run.</p>
        pub fn set_steps(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StepConfig>>,
        ) -> Self {
            self.inner = self.inner.set_steps(input);
            self
        }
        /// Appends an item to `BootstrapActions`.
        ///
        /// To override the contents of this collection use [`set_bootstrap_actions`](Self::set_bootstrap_actions).
        ///
        /// <p>A list of bootstrap actions to run before Hadoop starts on the cluster nodes.</p>
        pub fn bootstrap_actions(
            mut self,
            inp: impl Into<crate::model::BootstrapActionConfig>,
        ) -> Self {
            self.inner = self.inner.bootstrap_actions(inp);
            self
        }
        /// <p>A list of bootstrap actions to run before Hadoop starts on the cluster nodes.</p>
        pub fn set_bootstrap_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BootstrapActionConfig>>,
        ) -> Self {
            self.inner = self.inner.set_bootstrap_actions(input);
            self
        }
        /// Appends an item to `SupportedProducts`.
        ///
        /// To override the contents of this collection use [`set_supported_products`](Self::set_supported_products).
        ///
        /// <note>
        /// <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use
        /// Applications.</p>
        /// </note>
        /// <p>A list of strings that indicates third-party software to use. For more information, see
        /// the <a href="https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf">Amazon EMR
        /// Developer Guide</a>. Currently supported values are:</p>
        /// <ul>
        /// <li>
        /// <p>"mapr-m3" - launch the job flow using MapR M3 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"mapr-m5" - launch the job flow using MapR M5 Edition.</p>
        /// </li>
        /// </ul>
        pub fn supported_products(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.supported_products(inp);
            self
        }
        /// <note>
        /// <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use
        /// Applications.</p>
        /// </note>
        /// <p>A list of strings that indicates third-party software to use. For more information, see
        /// the <a href="https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf">Amazon EMR
        /// Developer Guide</a>. Currently supported values are:</p>
        /// <ul>
        /// <li>
        /// <p>"mapr-m3" - launch the job flow using MapR M3 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"mapr-m5" - launch the job flow using MapR M5 Edition.</p>
        /// </li>
        /// </ul>
        pub fn set_supported_products(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_supported_products(input);
            self
        }
        /// Appends an item to `NewSupportedProducts`.
        ///
        /// To override the contents of this collection use [`set_new_supported_products`](Self::set_new_supported_products).
        ///
        /// <note>
        /// <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use
        /// Applications.</p>
        /// </note>
        /// <p>A list of strings that indicates third-party software to use with the job flow that
        /// accepts a user argument list. EMR accepts and forwards the argument list to the
        /// corresponding installation script as bootstrap action arguments. For more information, see
        /// "Launch a Job Flow on the MapR Distribution for Hadoop" in the <a href="https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf">Amazon EMR Developer Guide</a>. Supported
        /// values are:</p>
        /// <ul>
        /// <li>
        /// <p>"mapr-m3" - launch the cluster using MapR M3 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"mapr-m5" - launch the cluster using MapR M5 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" -
        /// launch the job flow using MapR M3 or M5 Edition respectively.</p>
        /// </li>
        /// <li>
        /// <p>"mapr-m7" - launch the cluster using MapR M7 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"hunk" - launch the cluster with the Hunk Big Data Analytics Platform.</p>
        /// </li>
        /// <li>
        /// <p>"hue"- launch the cluster with Hue installed.</p>
        /// </li>
        /// <li>
        /// <p>"spark" - launch the cluster with Apache Spark installed.</p>
        /// </li>
        /// <li>
        /// <p>"ganglia" - launch the cluster with the Ganglia Monitoring System
        /// installed.</p>
        /// </li>
        /// </ul>
        pub fn new_supported_products(
            mut self,
            inp: impl Into<crate::model::SupportedProductConfig>,
        ) -> Self {
            self.inner = self.inner.new_supported_products(inp);
            self
        }
        /// <note>
        /// <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use
        /// Applications.</p>
        /// </note>
        /// <p>A list of strings that indicates third-party software to use with the job flow that
        /// accepts a user argument list. EMR accepts and forwards the argument list to the
        /// corresponding installation script as bootstrap action arguments. For more information, see
        /// "Launch a Job Flow on the MapR Distribution for Hadoop" in the <a href="https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf">Amazon EMR Developer Guide</a>. Supported
        /// values are:</p>
        /// <ul>
        /// <li>
        /// <p>"mapr-m3" - launch the cluster using MapR M3 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"mapr-m5" - launch the cluster using MapR M5 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"mapr" with the user arguments specifying "--edition,m3" or "--edition,m5" -
        /// launch the job flow using MapR M3 or M5 Edition respectively.</p>
        /// </li>
        /// <li>
        /// <p>"mapr-m7" - launch the cluster using MapR M7 Edition.</p>
        /// </li>
        /// <li>
        /// <p>"hunk" - launch the cluster with the Hunk Big Data Analytics Platform.</p>
        /// </li>
        /// <li>
        /// <p>"hue"- launch the cluster with Hue installed.</p>
        /// </li>
        /// <li>
        /// <p>"spark" - launch the cluster with Apache Spark installed.</p>
        /// </li>
        /// <li>
        /// <p>"ganglia" - launch the cluster with the Ganglia Monitoring System
        /// installed.</p>
        /// </li>
        /// </ul>
        pub fn set_new_supported_products(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SupportedProductConfig>>,
        ) -> Self {
            self.inner = self.inner.set_new_supported_products(input);
            self
        }
        /// Appends an item to `Applications`.
        ///
        /// To override the contents of this collection use [`set_applications`](Self::set_applications).
        ///
        /// <p>Applies to Amazon EMR releases 4.0 and later. A case-insensitive list of applications
        /// for Amazon EMR to install and configure when launching the cluster. For a list of
        /// applications available for each Amazon EMR release version, see the <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/">Amazon EMR Release
        /// Guide</a>.</p>
        pub fn applications(mut self, inp: impl Into<crate::model::Application>) -> Self {
            self.inner = self.inner.applications(inp);
            self
        }
        /// <p>Applies to Amazon EMR releases 4.0 and later. A case-insensitive list of applications
        /// for Amazon EMR to install and configure when launching the cluster. For a list of
        /// applications available for each Amazon EMR release version, see the <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/">Amazon EMR Release
        /// Guide</a>.</p>
        pub fn set_applications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Application>>,
        ) -> Self {
            self.inner = self.inner.set_applications(input);
            self
        }
        /// Appends an item to `Configurations`.
        ///
        /// To override the contents of this collection use [`set_configurations`](Self::set_configurations).
        ///
        /// <p>For Amazon EMR releases 4.0 and later. The list of configurations supplied for the EMR
        /// cluster you are creating.</p>
        pub fn configurations(mut self, inp: impl Into<crate::model::Configuration>) -> Self {
            self.inner = self.inner.configurations(inp);
            self
        }
        /// <p>For Amazon EMR releases 4.0 and later. The list of configurations supplied for the EMR
        /// cluster you are creating.</p>
        pub fn set_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Configuration>>,
        ) -> Self {
            self.inner = self.inner.set_configurations(input);
            self
        }
        /// <p>Set this value to <code>true</code> so that IAM principals in the Amazon Web Services account associated with the cluster can perform EMR actions on the cluster that their IAM policies allow. This value defaults to <code>true</code> for clusters created using the EMR API or the CLI <a href="https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html">create-cluster</a> command.</p>
        /// <p>When set to <code>false</code>, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform EMR actions for the cluster, regardless of the IAM permissions policies attached to other IAM principals. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/security_iam_emr-with-iam.html#security_set_visible_to_all_users">Understanding the EMR Cluster VisibleToAllUsers Setting</a> in the <i>Amazon EMRManagement Guide</i>.</p>
        pub fn visible_to_all_users(mut self, inp: bool) -> Self {
            self.inner = self.inner.visible_to_all_users(inp);
            self
        }
        /// <p>Set this value to <code>true</code> so that IAM principals in the Amazon Web Services account associated with the cluster can perform EMR actions on the cluster that their IAM policies allow. This value defaults to <code>true</code> for clusters created using the EMR API or the CLI <a href="https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html">create-cluster</a> command.</p>
        /// <p>When set to <code>false</code>, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform EMR actions for the cluster, regardless of the IAM permissions policies attached to other IAM principals. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/security_iam_emr-with-iam.html#security_set_visible_to_all_users">Understanding the EMR Cluster VisibleToAllUsers Setting</a> in the <i>Amazon EMRManagement Guide</i>.</p>
        pub fn set_visible_to_all_users(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_visible_to_all_users(input);
            self
        }
        /// <p>Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2
        /// instances of the cluster assume this role. The default role is
        /// <code>EMR_EC2_DefaultRole</code>. In order to use the default role, you must have
        /// already created it using the CLI or console.</p>
        pub fn job_flow_role(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_role(inp);
            self
        }
        /// <p>Also called instance profile and EC2 role. An IAM role for an EMR cluster. The EC2
        /// instances of the cluster assume this role. The default role is
        /// <code>EMR_EC2_DefaultRole</code>. In order to use the default role, you must have
        /// already created it using the CLI or console.</p>
        pub fn set_job_flow_role(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_role(input);
            self
        }
        /// <p>The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on
        /// your behalf.</p>
        pub fn service_role(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role(inp);
            self
        }
        /// <p>The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on
        /// your behalf.</p>
        pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_service_role(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tags to associate with a cluster and propagate to Amazon EC2 instances.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>A list of tags to associate with a cluster and propagate to Amazon EC2 instances.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The name of a security configuration to apply to the cluster.</p>
        pub fn security_configuration(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.security_configuration(inp);
            self
        }
        /// <p>The name of a security configuration to apply to the cluster.</p>
        pub fn set_security_configuration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_security_configuration(input);
            self
        }
        /// <p>An IAM role for automatic scaling policies. The default role is
        /// <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides permissions that the
        /// automatic scaling feature requires to launch and terminate EC2 instances in an instance
        /// group.</p>
        pub fn auto_scaling_role(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.auto_scaling_role(inp);
            self
        }
        /// <p>An IAM role for automatic scaling policies. The default role is
        /// <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides permissions that the
        /// automatic scaling feature requires to launch and terminate EC2 instances in an instance
        /// group.</p>
        pub fn set_auto_scaling_role(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_auto_scaling_role(input);
            self
        }
        /// <p>Specifies the way that individual Amazon EC2 instances terminate when an automatic
        /// scale-in activity occurs or an instance group is resized.
        /// <code>TERMINATE_AT_INSTANCE_HOUR</code> indicates that Amazon EMR terminates nodes at
        /// the instance-hour boundary, regardless of when the request to terminate the instance was
        /// submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default
        /// for clusters created using that version. <code>TERMINATE_AT_TASK_COMPLETION</code>
        /// indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before
        /// terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either
        /// behavior, Amazon EMR removes the least active nodes first and blocks instance termination
        /// if it could lead to HDFS corruption. <code>TERMINATE_AT_TASK_COMPLETION</code> available
        /// only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR
        /// earlier than 5.1.0.</p>
        pub fn scale_down_behavior(mut self, inp: crate::model::ScaleDownBehavior) -> Self {
            self.inner = self.inner.scale_down_behavior(inp);
            self
        }
        /// <p>Specifies the way that individual Amazon EC2 instances terminate when an automatic
        /// scale-in activity occurs or an instance group is resized.
        /// <code>TERMINATE_AT_INSTANCE_HOUR</code> indicates that Amazon EMR terminates nodes at
        /// the instance-hour boundary, regardless of when the request to terminate the instance was
        /// submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default
        /// for clusters created using that version. <code>TERMINATE_AT_TASK_COMPLETION</code>
        /// indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before
        /// terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either
        /// behavior, Amazon EMR removes the least active nodes first and blocks instance termination
        /// if it could lead to HDFS corruption. <code>TERMINATE_AT_TASK_COMPLETION</code> available
        /// only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR
        /// earlier than 5.1.0.</p>
        pub fn set_scale_down_behavior(
            mut self,
            input: std::option::Option<crate::model::ScaleDownBehavior>,
        ) -> Self {
            self.inner = self.inner.set_scale_down_behavior(input);
            self
        }
        /// <p>Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon
        /// EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster EC2
        /// instances. For more information about custom AMIs in Amazon EMR, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-custom-ami.html">Using a Custom
        /// AMI</a> in the <i>Amazon EMR Management Guide</i>. If omitted, the
        /// cluster uses the base Linux AMI for the <code>ReleaseLabel</code> specified. For Amazon EMR
        /// versions 2.x and 3.x, use <code>AmiVersion</code> instead.</p>
        /// <p>For information about creating a custom AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating an Amazon EBS-Backed
        /// Linux AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide for Linux
        /// Instances</i>. For information about finding an AMI ID, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding a Linux
        /// AMI</a>. </p>
        pub fn custom_ami_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.custom_ami_id(inp);
            self
        }
        /// <p>Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon
        /// EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster EC2
        /// instances. For more information about custom AMIs in Amazon EMR, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-custom-ami.html">Using a Custom
        /// AMI</a> in the <i>Amazon EMR Management Guide</i>. If omitted, the
        /// cluster uses the base Linux AMI for the <code>ReleaseLabel</code> specified. For Amazon EMR
        /// versions 2.x and 3.x, use <code>AmiVersion</code> instead.</p>
        /// <p>For information about creating a custom AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating an Amazon EBS-Backed
        /// Linux AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide for Linux
        /// Instances</i>. For information about finding an AMI ID, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding a Linux
        /// AMI</a>. </p>
        pub fn set_custom_ami_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_custom_ami_id(input);
            self
        }
        /// <p>The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for
        /// each EC2 instance. Available in Amazon EMR version 4.x and later.</p>
        pub fn ebs_root_volume_size(mut self, inp: i32) -> Self {
            self.inner = self.inner.ebs_root_volume_size(inp);
            self
        }
        /// <p>The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for
        /// each EC2 instance. Available in Amazon EMR version 4.x and later.</p>
        pub fn set_ebs_root_volume_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_ebs_root_volume_size(input);
            self
        }
        /// <p>Applies only when <code>CustomAmiID</code> is used. Specifies which updates from the
        /// Amazon Linux AMI package repositories to apply automatically when the instance boots using
        /// the AMI. If omitted, the default is <code>SECURITY</code>, which indicates that only
        /// security updates are applied. If <code>NONE</code> is specified, no updates are applied,
        /// and all updates must be applied manually.</p>
        pub fn repo_upgrade_on_boot(mut self, inp: crate::model::RepoUpgradeOnBoot) -> Self {
            self.inner = self.inner.repo_upgrade_on_boot(inp);
            self
        }
        /// <p>Applies only when <code>CustomAmiID</code> is used. Specifies which updates from the
        /// Amazon Linux AMI package repositories to apply automatically when the instance boots using
        /// the AMI. If omitted, the default is <code>SECURITY</code>, which indicates that only
        /// security updates are applied. If <code>NONE</code> is specified, no updates are applied,
        /// and all updates must be applied manually.</p>
        pub fn set_repo_upgrade_on_boot(
            mut self,
            input: std::option::Option<crate::model::RepoUpgradeOnBoot>,
        ) -> Self {
            self.inner = self.inner.set_repo_upgrade_on_boot(input);
            self
        }
        /// <p>Attributes for Kerberos configuration when Kerberos authentication is enabled using a
        /// security configuration. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html">Use Kerberos Authentication</a>
        /// in the <i>Amazon EMR Management Guide</i>.</p>
        pub fn kerberos_attributes(mut self, inp: crate::model::KerberosAttributes) -> Self {
            self.inner = self.inner.kerberos_attributes(inp);
            self
        }
        /// <p>Attributes for Kerberos configuration when Kerberos authentication is enabled using a
        /// security configuration. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html">Use Kerberos Authentication</a>
        /// in the <i>Amazon EMR Management Guide</i>.</p>
        pub fn set_kerberos_attributes(
            mut self,
            input: std::option::Option<crate::model::KerberosAttributes>,
        ) -> Self {
            self.inner = self.inner.set_kerberos_attributes(input);
            self
        }
        /// <p>Specifies the number of steps that can be executed concurrently. The default value is
        /// <code>1</code>. The maximum value is <code>256</code>.</p>
        pub fn step_concurrency_level(mut self, inp: i32) -> Self {
            self.inner = self.inner.step_concurrency_level(inp);
            self
        }
        /// <p>Specifies the number of steps that can be executed concurrently. The default value is
        /// <code>1</code>. The maximum value is <code>256</code>.</p>
        pub fn set_step_concurrency_level(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_step_concurrency_level(input);
            self
        }
        /// <p> The specified managed scaling policy for an Amazon EMR cluster. </p>
        pub fn managed_scaling_policy(mut self, inp: crate::model::ManagedScalingPolicy) -> Self {
            self.inner = self.inner.managed_scaling_policy(inp);
            self
        }
        /// <p> The specified managed scaling policy for an Amazon EMR cluster. </p>
        pub fn set_managed_scaling_policy(
            mut self,
            input: std::option::Option<crate::model::ManagedScalingPolicy>,
        ) -> Self {
            self.inner = self.inner.set_managed_scaling_policy(input);
            self
        }
        /// Appends an item to `PlacementGroupConfigs`.
        ///
        /// To override the contents of this collection use [`set_placement_group_configs`](Self::set_placement_group_configs).
        ///
        /// <p>The specified placement group configuration for an Amazon EMR cluster.</p>
        pub fn placement_group_configs(
            mut self,
            inp: impl Into<crate::model::PlacementGroupConfig>,
        ) -> Self {
            self.inner = self.inner.placement_group_configs(inp);
            self
        }
        /// <p>The specified placement group configuration for an Amazon EMR cluster.</p>
        pub fn set_placement_group_configs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PlacementGroupConfig>>,
        ) -> Self {
            self.inner = self.inner.set_placement_group_configs(input);
            self
        }
        /// <p>An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html">Control cluster termination</a>.</p>
        pub fn auto_termination_policy(mut self, inp: crate::model::AutoTerminationPolicy) -> Self {
            self.inner = self.inner.auto_termination_policy(inp);
            self
        }
        /// <p>An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html">Control cluster termination</a>.</p>
        pub fn set_auto_termination_policy(
            mut self,
            input: std::option::Option<crate::model::AutoTerminationPolicy>,
        ) -> Self {
            self.inner = self.inner.set_auto_termination_policy(input);
            self
        }
    }
    /// Fluent builder constructing a request to `SetTerminationProtection`.
    ///
    /// <p>SetTerminationProtection locks a cluster (job flow) so the EC2 instances in the cluster
    /// cannot be terminated by user intervention, an API call, or in the event of a job-flow
    /// error. The cluster still terminates upon successful completion of the job flow. Calling
    /// <code>SetTerminationProtection</code> on a cluster is similar to calling the Amazon EC2
    /// <code>DisableAPITermination</code> API on all EC2 instances in a cluster.</p>
    /// <p>
    /// <code>SetTerminationProtection</code> is used to prevent accidental termination of a
    /// cluster and to ensure that in the event of an error, the instances persist so that you can
    /// recover any data stored in their ephemeral instance storage.</p>
    /// <p> To terminate a cluster that has been locked by setting
    /// <code>SetTerminationProtection</code> to <code>true</code>, you must first unlock the
    /// job flow by a subsequent call to <code>SetTerminationProtection</code> in which you set the
    /// value to <code>false</code>. </p>
    /// <p> For more information, see<a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/UsingEMR_TerminationProtection.html">Managing Cluster
    /// Termination</a> in the <i>Amazon EMR Management Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct SetTerminationProtection<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_termination_protection_input::Builder,
    }
    impl<C, M, R> SetTerminationProtection<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `SetTerminationProtection`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetTerminationProtectionOutput,
            aws_smithy_http::result::SdkError<crate::error::SetTerminationProtectionError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetTerminationProtectionInputOperationOutputAlias,
                crate::output::SetTerminationProtectionOutput,
                crate::error::SetTerminationProtectionError,
                crate::input::SetTerminationProtectionInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `JobFlowIds`.
        ///
        /// To override the contents of this collection use [`set_job_flow_ids`](Self::set_job_flow_ids).
        ///
        /// <p> A list of strings that uniquely identify the clusters to protect. This identifier is
        /// returned by <a>RunJobFlow</a> and can also be obtained from <a>DescribeJobFlows</a> . </p>
        pub fn job_flow_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_ids(inp);
            self
        }
        /// <p> A list of strings that uniquely identify the clusters to protect. This identifier is
        /// returned by <a>RunJobFlow</a> and can also be obtained from <a>DescribeJobFlows</a> . </p>
        pub fn set_job_flow_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_ids(input);
            self
        }
        /// <p>A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2
        /// instances in the cluster from shutting down due to API calls, user intervention, or
        /// job-flow error.</p>
        pub fn termination_protected(mut self, inp: bool) -> Self {
            self.inner = self.inner.termination_protected(inp);
            self
        }
        /// <p>A Boolean that indicates whether to protect the cluster and prevent the Amazon EC2
        /// instances in the cluster from shutting down due to API calls, user intervention, or
        /// job-flow error.</p>
        pub fn set_termination_protected(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_termination_protected(input);
            self
        }
    }
    /// Fluent builder constructing a request to `SetVisibleToAllUsers`.
    ///
    /// <p>Sets the <a>Cluster$VisibleToAllUsers</a> value for an EMR cluster. When <code>true</code>, IAM principals in the
    /// Amazon Web Services account can perform EMR cluster actions that their IAM policies allow. When <code>false</code>, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform EMR actions on the cluster, regardless of IAM permissions policies attached to other IAM principals.</p>
    /// <p>This action works on running clusters. When you create a cluster, use the <a>RunJobFlowInput$VisibleToAllUsers</a> parameter.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/security_iam_emr-with-iam.html#security_set_visible_to_all_users">Understanding the EMR Cluster VisibleToAllUsers Setting</a> in the <i>Amazon EMRManagement Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct SetVisibleToAllUsers<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_visible_to_all_users_input::Builder,
    }
    impl<C, M, R> SetVisibleToAllUsers<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `SetVisibleToAllUsers`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetVisibleToAllUsersOutput,
            aws_smithy_http::result::SdkError<crate::error::SetVisibleToAllUsersError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetVisibleToAllUsersInputOperationOutputAlias,
                crate::output::SetVisibleToAllUsersOutput,
                crate::error::SetVisibleToAllUsersError,
                crate::input::SetVisibleToAllUsersInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `JobFlowIds`.
        ///
        /// To override the contents of this collection use [`set_job_flow_ids`](Self::set_job_flow_ids).
        ///
        /// <p>The unique identifier of the job flow (cluster).</p>
        pub fn job_flow_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_ids(inp);
            self
        }
        /// <p>The unique identifier of the job flow (cluster).</p>
        pub fn set_job_flow_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_ids(input);
            self
        }
        /// <p>A value of <code>true</code> indicates that an IAM principal in the Amazon Web Services account can perform
        /// EMR actions on the cluster that the IAM policies attached to the principal allow. A
        /// value of <code>false</code> indicates that only the IAM principal that created the cluster and the Amazon Web Services root user can perform EMR actions on the cluster.</p>
        pub fn visible_to_all_users(mut self, inp: bool) -> Self {
            self.inner = self.inner.visible_to_all_users(inp);
            self
        }
        /// <p>A value of <code>true</code> indicates that an IAM principal in the Amazon Web Services account can perform
        /// EMR actions on the cluster that the IAM policies attached to the principal allow. A
        /// value of <code>false</code> indicates that only the IAM principal that created the cluster and the Amazon Web Services root user can perform EMR actions on the cluster.</p>
        pub fn set_visible_to_all_users(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_visible_to_all_users(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StartNotebookExecution`.
    ///
    /// <p>Starts a notebook execution.</p>
    #[derive(std::fmt::Debug)]
    pub struct StartNotebookExecution<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_notebook_execution_input::Builder,
    }
    impl<C, M, R> StartNotebookExecution<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `StartNotebookExecution`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartNotebookExecutionOutput,
            aws_smithy_http::result::SdkError<crate::error::StartNotebookExecutionError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartNotebookExecutionInputOperationOutputAlias,
                crate::output::StartNotebookExecutionOutput,
                crate::error::StartNotebookExecutionError,
                crate::input::StartNotebookExecutionInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the EMR Notebook to use for notebook execution.</p>
        pub fn editor_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.editor_id(inp);
            self
        }
        /// <p>The unique identifier of the EMR Notebook to use for notebook execution.</p>
        pub fn set_editor_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_editor_id(input);
            self
        }
        /// <p>The path and file name of the notebook file for this execution, relative to the path
        /// specified for the EMR Notebook. For example, if you specify a path of
        /// <code>s3://MyBucket/MyNotebooks</code> when you create an EMR Notebook for a notebook
        /// with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this
        /// request), and you specify a <code>RelativePath</code> of
        /// <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file
        /// for the notebook execution is
        /// <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
        pub fn relative_path(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.relative_path(inp);
            self
        }
        /// <p>The path and file name of the notebook file for this execution, relative to the path
        /// specified for the EMR Notebook. For example, if you specify a path of
        /// <code>s3://MyBucket/MyNotebooks</code> when you create an EMR Notebook for a notebook
        /// with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this
        /// request), and you specify a <code>RelativePath</code> of
        /// <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file
        /// for the notebook execution is
        /// <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
        pub fn set_relative_path(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_relative_path(input);
            self
        }
        /// <p>An optional name for the notebook execution.</p>
        pub fn notebook_execution_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notebook_execution_name(inp);
            self
        }
        /// <p>An optional name for the notebook execution.</p>
        pub fn set_notebook_execution_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_execution_name(input);
            self
        }
        /// <p>Input parameters in JSON format passed to the EMR Notebook at runtime for
        /// execution.</p>
        pub fn notebook_params(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notebook_params(inp);
            self
        }
        /// <p>Input parameters in JSON format passed to the EMR Notebook at runtime for
        /// execution.</p>
        pub fn set_notebook_params(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_params(input);
            self
        }
        /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
        pub fn execution_engine(mut self, inp: crate::model::ExecutionEngineConfig) -> Self {
            self.inner = self.inner.execution_engine(inp);
            self
        }
        /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
        pub fn set_execution_engine(
            mut self,
            input: std::option::Option<crate::model::ExecutionEngineConfig>,
        ) -> Self {
            self.inner = self.inner.set_execution_engine(input);
            self
        }
        /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR
        /// role) for the notebook execution.</p>
        pub fn service_role(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_role(inp);
            self
        }
        /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR
        /// role) for the notebook execution.</p>
        pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_service_role(input);
            self
        }
        /// <p>The unique identifier of the Amazon EC2 security group to associate with the EMR
        /// Notebook for this notebook execution.</p>
        pub fn notebook_instance_security_group_id(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.notebook_instance_security_group_id(inp);
            self
        }
        /// <p>The unique identifier of the Amazon EC2 security group to associate with the EMR
        /// Notebook for this notebook execution.</p>
        pub fn set_notebook_instance_security_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_instance_security_group_id(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value
        /// pairs that consist of a required key string with a maximum of 128 characters and an
        /// optional value string with a maximum of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value
        /// pairs that consist of a required key string with a maximum of 128 characters and an
        /// optional value string with a maximum of 256 characters.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StopNotebookExecution`.
    ///
    /// <p>Stops a notebook execution.</p>
    #[derive(std::fmt::Debug)]
    pub struct StopNotebookExecution<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::stop_notebook_execution_input::Builder,
    }
    impl<C, M, R> StopNotebookExecution<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `StopNotebookExecution`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopNotebookExecutionOutput,
            aws_smithy_http::result::SdkError<crate::error::StopNotebookExecutionError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StopNotebookExecutionInputOperationOutputAlias,
                crate::output::StopNotebookExecutionOutput,
                crate::error::StopNotebookExecutionError,
                crate::input::StopNotebookExecutionInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the notebook execution.</p>
        pub fn notebook_execution_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.notebook_execution_id(inp);
            self
        }
        /// <p>The unique identifier of the notebook execution.</p>
        pub fn set_notebook_execution_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_notebook_execution_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TerminateJobFlows`.
    ///
    /// <p>TerminateJobFlows shuts a list of clusters (job flows) down. When a job flow is shut
    /// down, any step not yet completed is canceled and the EC2 instances on which the cluster is
    /// running are stopped. Any log files not already saved are uploaded to Amazon S3 if a LogUri
    /// was specified when the cluster was created.</p>
    /// <p>The maximum number of clusters allowed is 10. The call to <code>TerminateJobFlows</code>
    /// is asynchronous. Depending on the configuration of the cluster, it may take up to 1-5
    /// minutes for the cluster to completely terminate and release allocated resources, such as
    /// Amazon EC2 instances.</p>
    #[derive(std::fmt::Debug)]
    pub struct TerminateJobFlows<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::terminate_job_flows_input::Builder,
    }
    impl<C, M, R> TerminateJobFlows<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `TerminateJobFlows`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TerminateJobFlowsOutput,
            aws_smithy_http::result::SdkError<crate::error::TerminateJobFlowsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TerminateJobFlowsInputOperationOutputAlias,
                crate::output::TerminateJobFlowsOutput,
                crate::error::TerminateJobFlowsError,
                crate::input::TerminateJobFlowsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `JobFlowIds`.
        ///
        /// To override the contents of this collection use [`set_job_flow_ids`](Self::set_job_flow_ids).
        ///
        /// <p>A list of job flows to be shut down.</p>
        pub fn job_flow_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_flow_ids(inp);
            self
        }
        /// <p>A list of job flows to be shut down.</p>
        pub fn set_job_flow_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_job_flow_ids(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateStudio`.
    ///
    /// <p>Updates an Amazon EMR Studio configuration, including attributes such as name, description, and subnets.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateStudio<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_studio_input::Builder,
    }
    impl<C, M, R> UpdateStudio<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateStudio`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateStudioOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateStudioError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateStudioInputOperationOutputAlias,
                crate::output::UpdateStudioOutput,
                crate::error::UpdateStudioError,
                crate::input::UpdateStudioInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio to update.</p>
        pub fn studio_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(inp);
            self
        }
        /// <p>The ID of the Amazon EMR Studio to update.</p>
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>A descriptive name for the Amazon EMR Studio.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        /// <p>A descriptive name for the Amazon EMR Studio.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A detailed description to assign to the Amazon EMR Studio.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        /// <p>A detailed description to assign to the Amazon EMR Studio.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// Appends an item to `SubnetIds`.
        ///
        /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
        ///
        /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio. </p>
        pub fn subnet_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subnet_ids(inp);
            self
        }
        /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio. </p>
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_subnet_ids(input);
            self
        }
        /// <p>The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.</p>
        pub fn default_s3_location(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_s3_location(inp);
            self
        }
        /// <p>The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.</p>
        pub fn set_default_s3_location(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_s3_location(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateStudioSessionMapping`.
    ///
    /// <p>Updates the session policy attached to the user or group for the specified Amazon EMR
    /// Studio.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateStudioSessionMapping<
        C = aws_smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_studio_session_mapping_input::Builder,
    }
    impl<C, M, R> UpdateStudioSessionMapping<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateStudioSessionMapping`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateStudioSessionMappingOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateStudioSessionMappingError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateStudioSessionMappingInputOperationOutputAlias,
                crate::output::UpdateStudioSessionMappingOutput,
                crate::error::UpdateStudioSessionMappingError,
                crate::input::UpdateStudioSessionMappingInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn studio_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.studio_id(inp);
            self
        }
        /// <p>The ID of the Amazon EMR Studio.</p>
        pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_studio_id(input);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group. For more information, see
        /// <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_id(inp);
            self
        }
        /// <p>The globally unique identifier (GUID) of the user or group. For more information, see
        /// <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserId">UserId</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-GroupId">GroupId</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identity_id(input);
            self
        }
        /// <p>The name of the user or group to update. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn identity_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identity_name(inp);
            self
        }
        /// <p>The name of the user or group to update. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_User.html#singlesignon-Type-User-UserName">UserName</a> and <a href="https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/API_Group.html#singlesignon-Type-Group-DisplayName">DisplayName</a> in the <i>Amazon Web Services SSO Identity Store API Reference</i>.
        /// Either <code>IdentityName</code> or <code>IdentityId</code> must be specified.</p>
        pub fn set_identity_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_identity_name(input);
            self
        }
        /// <p>Specifies whether the identity to update is a user or a group.</p>
        pub fn identity_type(mut self, inp: crate::model::IdentityType) -> Self {
            self.inner = self.inner.identity_type(inp);
            self
        }
        /// <p>Specifies whether the identity to update is a user or a group.</p>
        pub fn set_identity_type(
            mut self,
            input: std::option::Option<crate::model::IdentityType>,
        ) -> Self {
            self.inner = self.inner.set_identity_type(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the session policy to associate with the specified
        /// user or group.</p>
        pub fn session_policy_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session_policy_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the session policy to associate with the specified
        /// user or group.</p>
        pub fn set_session_policy_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_session_policy_arn(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, aws_smithy_client::retry::Standard> {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut client = aws_hyper::Client::new(conn)
            .with_retry_config(retry_config.into())
            .with_timeout_config(timeout_config);

        client.set_sleep_impl(sleep_impl);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        aws_smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        aws_smithy_client::retry::Standard,
    >
{
    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut client = aws_hyper::Client::https()
            .with_retry_config(retry_config.into())
            .with_timeout_config(timeout_config);

        client.set_sleep_impl(sleep_impl);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
