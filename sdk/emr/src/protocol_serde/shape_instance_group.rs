// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_instance_group<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::InstanceGroup>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::InstanceGroupBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Id" => {
                                builder = builder.set_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Market" => {
                                builder = builder.set_market(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::MarketType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "InstanceGroupType" => {
                                builder = builder.set_instance_group_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::InstanceGroupType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "BidPrice" => {
                                builder = builder.set_bid_price(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "InstanceType" => {
                                builder = builder.set_instance_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "RequestedInstanceCount" => {
                                builder = builder.set_requested_instance_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "RunningInstanceCount" => {
                                builder = builder.set_running_instance_count(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "Status" => {
                                builder = builder.set_status(
                                    crate::protocol_serde::shape_instance_group_status::de_instance_group_status(tokens)?
                                );
                            }
                            "Configurations" => {
                                builder = builder.set_configurations(
                                    crate::protocol_serde::shape_configuration_list::de_configuration_list(tokens)?
                                );
                            }
                            "ConfigurationsVersion" => {
                                builder = builder.set_configurations_version(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i64::try_from)
                                    .transpose()?,
                                );
                            }
                            "LastSuccessfullyAppliedConfigurations" => {
                                builder = builder.set_last_successfully_applied_configurations(
                                    crate::protocol_serde::shape_configuration_list::de_configuration_list(tokens)?
                                );
                            }
                            "LastSuccessfullyAppliedConfigurationsVersion" => {
                                builder = builder
                                    .set_last_successfully_applied_configurations_version(
                                        aws_smithy_json::deserialize::token::expect_number_or_null(
                                            tokens.next(),
                                        )?
                                        .map(i64::try_from)
                                        .transpose()?,
                                    );
                            }
                            "EbsBlockDevices" => {
                                builder = builder.set_ebs_block_devices(
                                    crate::protocol_serde::shape_ebs_block_device_list::de_ebs_block_device_list(tokens)?
                                );
                            }
                            "EbsOptimized" => {
                                builder = builder.set_ebs_optimized(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ShrinkPolicy" => {
                                builder = builder.set_shrink_policy(
                                    crate::protocol_serde::shape_shrink_policy::de_shrink_policy(
                                        tokens,
                                    )?,
                                );
                            }
                            "AutoScalingPolicy" => {
                                builder = builder.set_auto_scaling_policy(
                                    crate::protocol_serde::shape_auto_scaling_policy_description::de_auto_scaling_policy_description(tokens)?
                                );
                            }
                            "CustomAmiId" => {
                                builder = builder.set_custom_ami_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
