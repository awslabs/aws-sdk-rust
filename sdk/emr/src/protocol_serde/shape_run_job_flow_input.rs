// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_run_job_flow_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::run_job_flow::RunJobFlowInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.log_uri {
        object.key("LogUri").string(var_2.as_str());
    }
    if let Some(var_3) = &input.log_encryption_kms_key_id {
        object.key("LogEncryptionKmsKeyId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.additional_info {
        object.key("AdditionalInfo").string(var_4.as_str());
    }
    if let Some(var_5) = &input.ami_version {
        object.key("AmiVersion").string(var_5.as_str());
    }
    if let Some(var_6) = &input.release_label {
        object.key("ReleaseLabel").string(var_6.as_str());
    }
    if let Some(var_7) = &input.instances {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Instances").start_object();
        crate::protocol_serde::shape_job_flow_instances_config::ser_job_flow_instances_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.steps {
        let mut array_10 = object.key("Steps").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_step_config::ser_step_config(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.bootstrap_actions {
        let mut array_14 = object.key("BootstrapActions").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_bootstrap_action_config::ser_bootstrap_action_config(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.supported_products {
        let mut array_18 = object.key("SupportedProducts").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.new_supported_products {
        let mut array_21 = object.key("NewSupportedProducts").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_supported_product_config::ser_supported_product_config(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.applications {
        let mut array_25 = object.key("Applications").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_application::ser_application(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.configurations {
        let mut array_29 = object.key("Configurations").start_array();
        for item_30 in var_28 {
            {
                #[allow(unused_mut)]
                let mut object_31 = array_29.value().start_object();
                crate::protocol_serde::shape_configuration::ser_configuration(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.visible_to_all_users {
        object.key("VisibleToAllUsers").boolean(*var_32);
    }
    if let Some(var_33) = &input.job_flow_role {
        object.key("JobFlowRole").string(var_33.as_str());
    }
    if let Some(var_34) = &input.service_role {
        object.key("ServiceRole").string(var_34.as_str());
    }
    if let Some(var_35) = &input.tags {
        let mut array_36 = object.key("Tags").start_array();
        for item_37 in var_35 {
            {
                #[allow(unused_mut)]
                let mut object_38 = array_36.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_38, item_37)?;
                object_38.finish();
            }
        }
        array_36.finish();
    }
    if let Some(var_39) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_39.as_str());
    }
    if let Some(var_40) = &input.auto_scaling_role {
        object.key("AutoScalingRole").string(var_40.as_str());
    }
    if let Some(var_41) = &input.scale_down_behavior {
        object.key("ScaleDownBehavior").string(var_41.as_str());
    }
    if let Some(var_42) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_42.as_str());
    }
    if let Some(var_43) = &input.ebs_root_volume_size {
        object.key("EbsRootVolumeSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_43).into()),
        );
    }
    if let Some(var_44) = &input.repo_upgrade_on_boot {
        object.key("RepoUpgradeOnBoot").string(var_44.as_str());
    }
    if let Some(var_45) = &input.kerberos_attributes {
        #[allow(unused_mut)]
        let mut object_46 = object.key("KerberosAttributes").start_object();
        crate::protocol_serde::shape_kerberos_attributes::ser_kerberos_attributes(&mut object_46, var_45)?;
        object_46.finish();
    }
    if let Some(var_47) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_47).into()),
        );
    }
    if let Some(var_48) = &input.managed_scaling_policy {
        #[allow(unused_mut)]
        let mut object_49 = object.key("ManagedScalingPolicy").start_object();
        crate::protocol_serde::shape_managed_scaling_policy::ser_managed_scaling_policy(&mut object_49, var_48)?;
        object_49.finish();
    }
    if let Some(var_50) = &input.placement_group_configs {
        let mut array_51 = object.key("PlacementGroupConfigs").start_array();
        for item_52 in var_50 {
            {
                #[allow(unused_mut)]
                let mut object_53 = array_51.value().start_object();
                crate::protocol_serde::shape_placement_group_config::ser_placement_group_config(&mut object_53, item_52)?;
                object_53.finish();
            }
        }
        array_51.finish();
    }
    if let Some(var_54) = &input.auto_termination_policy {
        #[allow(unused_mut)]
        let mut object_55 = object.key("AutoTerminationPolicy").start_object();
        crate::protocol_serde::shape_auto_termination_policy::ser_auto_termination_policy(&mut object_55, var_54)?;
        object_55.finish();
    }
    if let Some(var_56) = &input.os_release_label {
        object.key("OSReleaseLabel").string(var_56.as_str());
    }
    if let Some(var_57) = &input.ebs_root_volume_iops {
        object.key("EbsRootVolumeIops").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_57).into()),
        );
    }
    if let Some(var_58) = &input.ebs_root_volume_throughput {
        object.key("EbsRootVolumeThroughput").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    Ok(())
}
