// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_instance_fleet_modify_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InstanceFleetModifyConfig,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.resize_specifications {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ResizeSpecifications").start_object();
        crate::protocol_serde::shape_instance_fleet_resizing_specifications::ser_instance_fleet_resizing_specifications(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.instance_type_configs {
        let mut array_7 = object.key("InstanceTypeConfigs").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_instance_type_config::ser_instance_type_config(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    Ok(())
}
