// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_instance_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceFleetInput,
) {
    if let Some(var_1) = &input.cluster_id {
        object.key("ClusterId").string(var_1);
    }
    if let Some(var_2) = &input.instance_fleet {
        let mut object_3 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_instance_fleet_config(&mut object_3, var_2);
        object_3.finish();
    }
}

pub fn serialize_structure_add_instance_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceGroupsInput,
) {
    if let Some(var_4) = &input.instance_groups {
        let mut array_5 = object.key("InstanceGroups").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_instance_group_config(&mut object_7, item_6);
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.job_flow_id {
        object.key("JobFlowId").string(var_8);
    }
}

pub fn serialize_structure_add_job_flow_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddJobFlowStepsInput,
) {
    if let Some(var_9) = &input.job_flow_id {
        object.key("JobFlowId").string(var_9);
    }
    if let Some(var_10) = &input.steps {
        let mut array_11 = object.key("Steps").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_step_config(&mut object_13, item_12);
                object_13.finish();
            }
        }
        array_11.finish();
    }
}

pub fn serialize_structure_add_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) {
    if let Some(var_14) = &input.resource_id {
        object.key("ResourceId").string(var_14);
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
}

pub fn serialize_structure_cancel_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelStepsInput,
) {
    if let Some(var_19) = &input.cluster_id {
        object.key("ClusterId").string(var_19);
    }
    if let Some(var_20) = &input.step_ids {
        let mut array_21 = object.key("StepIds").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22);
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.step_cancellation_option {
        object.key("StepCancellationOption").string(var_23.as_str());
    }
}

pub fn serialize_structure_create_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) {
    if let Some(var_24) = &input.name {
        object.key("Name").string(var_24);
    }
    if let Some(var_25) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_25);
    }
}

pub fn serialize_structure_create_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioInput,
) {
    if let Some(var_26) = &input.name {
        object.key("Name").string(var_26);
    }
    if let Some(var_27) = &input.description {
        object.key("Description").string(var_27);
    }
    if let Some(var_28) = &input.auth_mode {
        object.key("AuthMode").string(var_28.as_str());
    }
    if let Some(var_29) = &input.vpc_id {
        object.key("VpcId").string(var_29);
    }
    if let Some(var_30) = &input.subnet_ids {
        let mut array_31 = object.key("SubnetIds").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32);
            }
        }
        array_31.finish();
    }
    if let Some(var_33) = &input.service_role {
        object.key("ServiceRole").string(var_33);
    }
    if let Some(var_34) = &input.user_role {
        object.key("UserRole").string(var_34);
    }
    if let Some(var_35) = &input.workspace_security_group_id {
        object.key("WorkspaceSecurityGroupId").string(var_35);
    }
    if let Some(var_36) = &input.engine_security_group_id {
        object.key("EngineSecurityGroupId").string(var_36);
    }
    if let Some(var_37) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_37);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
}

pub fn serialize_structure_create_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioSessionMappingInput,
) {
    if let Some(var_42) = &input.studio_id {
        object.key("StudioId").string(var_42);
    }
    if let Some(var_43) = &input.identity_id {
        object.key("IdentityId").string(var_43);
    }
    if let Some(var_44) = &input.identity_name {
        object.key("IdentityName").string(var_44);
    }
    if let Some(var_45) = &input.identity_type {
        object.key("IdentityType").string(var_45.as_str());
    }
    if let Some(var_46) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_46);
    }
}

pub fn serialize_structure_delete_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) {
    if let Some(var_47) = &input.name {
        object.key("Name").string(var_47);
    }
}

pub fn serialize_structure_delete_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioInput,
) {
    if let Some(var_48) = &input.studio_id {
        object.key("StudioId").string(var_48);
    }
}

pub fn serialize_structure_delete_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioSessionMappingInput,
) {
    if let Some(var_49) = &input.studio_id {
        object.key("StudioId").string(var_49);
    }
    if let Some(var_50) = &input.identity_id {
        object.key("IdentityId").string(var_50);
    }
    if let Some(var_51) = &input.identity_name {
        object.key("IdentityName").string(var_51);
    }
    if let Some(var_52) = &input.identity_type {
        object.key("IdentityType").string(var_52.as_str());
    }
}

pub fn serialize_structure_describe_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeClusterInput,
) {
    if let Some(var_53) = &input.cluster_id {
        object.key("ClusterId").string(var_53);
    }
}

pub fn serialize_structure_describe_job_flows_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobFlowsInput,
) {
    if let Some(var_54) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_54, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_55) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_55, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_56) = &input.job_flow_ids {
        let mut array_57 = object.key("JobFlowIds").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58);
            }
        }
        array_57.finish();
    }
    if let Some(var_59) = &input.job_flow_states {
        let mut array_60 = object.key("JobFlowStates").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
}

pub fn serialize_structure_describe_notebook_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookExecutionInput,
) {
    if let Some(var_62) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_62);
    }
}

pub fn serialize_structure_describe_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSecurityConfigurationInput,
) {
    if let Some(var_63) = &input.name {
        object.key("Name").string(var_63);
    }
}

pub fn serialize_structure_describe_step_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStepInput,
) {
    if let Some(var_64) = &input.cluster_id {
        object.key("ClusterId").string(var_64);
    }
    if let Some(var_65) = &input.step_id {
        object.key("StepId").string(var_65);
    }
}

pub fn serialize_structure_describe_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStudioInput,
) {
    if let Some(var_66) = &input.studio_id {
        object.key("StudioId").string(var_66);
    }
}

pub fn serialize_structure_get_managed_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetManagedScalingPolicyInput,
) {
    if let Some(var_67) = &input.cluster_id {
        object.key("ClusterId").string(var_67);
    }
}

pub fn serialize_structure_get_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStudioSessionMappingInput,
) {
    if let Some(var_68) = &input.studio_id {
        object.key("StudioId").string(var_68);
    }
    if let Some(var_69) = &input.identity_id {
        object.key("IdentityId").string(var_69);
    }
    if let Some(var_70) = &input.identity_name {
        object.key("IdentityName").string(var_70);
    }
    if let Some(var_71) = &input.identity_type {
        object.key("IdentityType").string(var_71.as_str());
    }
}

pub fn serialize_structure_list_bootstrap_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBootstrapActionsInput,
) {
    if let Some(var_72) = &input.cluster_id {
        object.key("ClusterId").string(var_72);
    }
    if let Some(var_73) = &input.marker {
        object.key("Marker").string(var_73);
    }
}

pub fn serialize_structure_list_clusters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListClustersInput,
) {
    if let Some(var_74) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_74, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_75) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_75, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_76) = &input.cluster_states {
        let mut array_77 = object.key("ClusterStates").start_array();
        for item_78 in var_76 {
            {
                array_77.value().string(item_78.as_str());
            }
        }
        array_77.finish();
    }
    if let Some(var_79) = &input.marker {
        object.key("Marker").string(var_79);
    }
}

pub fn serialize_structure_list_instance_fleets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceFleetsInput,
) {
    if let Some(var_80) = &input.cluster_id {
        object.key("ClusterId").string(var_80);
    }
    if let Some(var_81) = &input.marker {
        object.key("Marker").string(var_81);
    }
}

pub fn serialize_structure_list_instance_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceGroupsInput,
) {
    if let Some(var_82) = &input.cluster_id {
        object.key("ClusterId").string(var_82);
    }
    if let Some(var_83) = &input.marker {
        object.key("Marker").string(var_83);
    }
}

pub fn serialize_structure_list_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstancesInput,
) {
    if let Some(var_84) = &input.cluster_id {
        object.key("ClusterId").string(var_84);
    }
    if let Some(var_85) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_85);
    }
    if let Some(var_86) = &input.instance_group_types {
        let mut array_87 = object.key("InstanceGroupTypes").start_array();
        for item_88 in var_86 {
            {
                array_87.value().string(item_88.as_str());
            }
        }
        array_87.finish();
    }
    if let Some(var_89) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_89);
    }
    if let Some(var_90) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_90.as_str());
    }
    if let Some(var_91) = &input.instance_states {
        let mut array_92 = object.key("InstanceStates").start_array();
        for item_93 in var_91 {
            {
                array_92.value().string(item_93.as_str());
            }
        }
        array_92.finish();
    }
    if let Some(var_94) = &input.marker {
        object.key("Marker").string(var_94);
    }
}

pub fn serialize_structure_list_notebook_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookExecutionsInput,
) {
    if let Some(var_95) = &input.editor_id {
        object.key("EditorId").string(var_95);
    }
    if let Some(var_96) = &input.status {
        object.key("Status").string(var_96.as_str());
    }
    if let Some(var_97) = &input.from {
        object
            .key("From")
            .instant(var_97, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_98) = &input.to {
        object
            .key("To")
            .instant(var_98, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_99) = &input.marker {
        object.key("Marker").string(var_99);
    }
}

pub fn serialize_structure_list_security_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSecurityConfigurationsInput,
) {
    if let Some(var_100) = &input.marker {
        object.key("Marker").string(var_100);
    }
}

pub fn serialize_structure_list_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStepsInput,
) {
    if let Some(var_101) = &input.cluster_id {
        object.key("ClusterId").string(var_101);
    }
    if let Some(var_102) = &input.step_states {
        let mut array_103 = object.key("StepStates").start_array();
        for item_104 in var_102 {
            {
                array_103.value().string(item_104.as_str());
            }
        }
        array_103.finish();
    }
    if let Some(var_105) = &input.step_ids {
        let mut array_106 = object.key("StepIds").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107);
            }
        }
        array_106.finish();
    }
    if let Some(var_108) = &input.marker {
        object.key("Marker").string(var_108);
    }
}

pub fn serialize_structure_list_studios_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudiosInput,
) {
    if let Some(var_109) = &input.marker {
        object.key("Marker").string(var_109);
    }
}

pub fn serialize_structure_list_studio_session_mappings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudioSessionMappingsInput,
) {
    if let Some(var_110) = &input.studio_id {
        object.key("StudioId").string(var_110);
    }
    if let Some(var_111) = &input.identity_type {
        object.key("IdentityType").string(var_111.as_str());
    }
    if let Some(var_112) = &input.marker {
        object.key("Marker").string(var_112);
    }
}

pub fn serialize_structure_modify_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyClusterInput,
) {
    if let Some(var_113) = &input.cluster_id {
        object.key("ClusterId").string(var_113);
    }
    if let Some(var_114) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_114).into()),
        );
    }
}

pub fn serialize_structure_modify_instance_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceFleetInput,
) {
    if let Some(var_115) = &input.cluster_id {
        object.key("ClusterId").string(var_115);
    }
    if let Some(var_116) = &input.instance_fleet {
        let mut object_117 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_instance_fleet_modify_config(&mut object_117, var_116);
        object_117.finish();
    }
}

pub fn serialize_structure_modify_instance_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceGroupsInput,
) {
    if let Some(var_118) = &input.cluster_id {
        object.key("ClusterId").string(var_118);
    }
    if let Some(var_119) = &input.instance_groups {
        let mut array_120 = object.key("InstanceGroups").start_array();
        for item_121 in var_119 {
            {
                let mut object_122 = array_120.value().start_object();
                crate::json_ser::serialize_structure_instance_group_modify_config(
                    &mut object_122,
                    item_121,
                );
                object_122.finish();
            }
        }
        array_120.finish();
    }
}

pub fn serialize_structure_put_auto_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAutoScalingPolicyInput,
) {
    if let Some(var_123) = &input.cluster_id {
        object.key("ClusterId").string(var_123);
    }
    if let Some(var_124) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_124);
    }
    if let Some(var_125) = &input.auto_scaling_policy {
        let mut object_126 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_auto_scaling_policy(&mut object_126, var_125);
        object_126.finish();
    }
}

pub fn serialize_structure_put_block_public_access_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBlockPublicAccessConfigurationInput,
) {
    if let Some(var_127) = &input.block_public_access_configuration {
        let mut object_128 = object.key("BlockPublicAccessConfiguration").start_object();
        crate::json_ser::serialize_structure_block_public_access_configuration(
            &mut object_128,
            var_127,
        );
        object_128.finish();
    }
}

pub fn serialize_structure_put_managed_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutManagedScalingPolicyInput,
) {
    if let Some(var_129) = &input.cluster_id {
        object.key("ClusterId").string(var_129);
    }
    if let Some(var_130) = &input.managed_scaling_policy {
        let mut object_131 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_managed_scaling_policy(&mut object_131, var_130);
        object_131.finish();
    }
}

pub fn serialize_structure_remove_auto_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveAutoScalingPolicyInput,
) {
    if let Some(var_132) = &input.cluster_id {
        object.key("ClusterId").string(var_132);
    }
    if let Some(var_133) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_133);
    }
}

pub fn serialize_structure_remove_managed_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveManagedScalingPolicyInput,
) {
    if let Some(var_134) = &input.cluster_id {
        object.key("ClusterId").string(var_134);
    }
}

pub fn serialize_structure_remove_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsInput,
) {
    if let Some(var_135) = &input.resource_id {
        object.key("ResourceId").string(var_135);
    }
    if let Some(var_136) = &input.tag_keys {
        let mut array_137 = object.key("TagKeys").start_array();
        for item_138 in var_136 {
            {
                array_137.value().string(item_138);
            }
        }
        array_137.finish();
    }
}

pub fn serialize_structure_run_job_flow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunJobFlowInput,
) {
    if let Some(var_139) = &input.name {
        object.key("Name").string(var_139);
    }
    if let Some(var_140) = &input.log_uri {
        object.key("LogUri").string(var_140);
    }
    if let Some(var_141) = &input.log_encryption_kms_key_id {
        object.key("LogEncryptionKmsKeyId").string(var_141);
    }
    if let Some(var_142) = &input.additional_info {
        object.key("AdditionalInfo").string(var_142);
    }
    if let Some(var_143) = &input.ami_version {
        object.key("AmiVersion").string(var_143);
    }
    if let Some(var_144) = &input.release_label {
        object.key("ReleaseLabel").string(var_144);
    }
    if let Some(var_145) = &input.instances {
        let mut object_146 = object.key("Instances").start_object();
        crate::json_ser::serialize_structure_job_flow_instances_config(&mut object_146, var_145);
        object_146.finish();
    }
    if let Some(var_147) = &input.steps {
        let mut array_148 = object.key("Steps").start_array();
        for item_149 in var_147 {
            {
                let mut object_150 = array_148.value().start_object();
                crate::json_ser::serialize_structure_step_config(&mut object_150, item_149);
                object_150.finish();
            }
        }
        array_148.finish();
    }
    if let Some(var_151) = &input.bootstrap_actions {
        let mut array_152 = object.key("BootstrapActions").start_array();
        for item_153 in var_151 {
            {
                let mut object_154 = array_152.value().start_object();
                crate::json_ser::serialize_structure_bootstrap_action_config(
                    &mut object_154,
                    item_153,
                );
                object_154.finish();
            }
        }
        array_152.finish();
    }
    if let Some(var_155) = &input.supported_products {
        let mut array_156 = object.key("SupportedProducts").start_array();
        for item_157 in var_155 {
            {
                array_156.value().string(item_157);
            }
        }
        array_156.finish();
    }
    if let Some(var_158) = &input.new_supported_products {
        let mut array_159 = object.key("NewSupportedProducts").start_array();
        for item_160 in var_158 {
            {
                let mut object_161 = array_159.value().start_object();
                crate::json_ser::serialize_structure_supported_product_config(
                    &mut object_161,
                    item_160,
                );
                object_161.finish();
            }
        }
        array_159.finish();
    }
    if let Some(var_162) = &input.applications {
        let mut array_163 = object.key("Applications").start_array();
        for item_164 in var_162 {
            {
                let mut object_165 = array_163.value().start_object();
                crate::json_ser::serialize_structure_application(&mut object_165, item_164);
                object_165.finish();
            }
        }
        array_163.finish();
    }
    if let Some(var_166) = &input.configurations {
        let mut array_167 = object.key("Configurations").start_array();
        for item_168 in var_166 {
            {
                let mut object_169 = array_167.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_169, item_168);
                object_169.finish();
            }
        }
        array_167.finish();
    }
    if input.visible_to_all_users {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
    if let Some(var_170) = &input.job_flow_role {
        object.key("JobFlowRole").string(var_170);
    }
    if let Some(var_171) = &input.service_role {
        object.key("ServiceRole").string(var_171);
    }
    if let Some(var_172) = &input.tags {
        let mut array_173 = object.key("Tags").start_array();
        for item_174 in var_172 {
            {
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_175, item_174);
                object_175.finish();
            }
        }
        array_173.finish();
    }
    if let Some(var_176) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_176);
    }
    if let Some(var_177) = &input.auto_scaling_role {
        object.key("AutoScalingRole").string(var_177);
    }
    if let Some(var_178) = &input.scale_down_behavior {
        object.key("ScaleDownBehavior").string(var_178.as_str());
    }
    if let Some(var_179) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_179);
    }
    if let Some(var_180) = &input.ebs_root_volume_size {
        object.key("EbsRootVolumeSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    if let Some(var_181) = &input.repo_upgrade_on_boot {
        object.key("RepoUpgradeOnBoot").string(var_181.as_str());
    }
    if let Some(var_182) = &input.kerberos_attributes {
        let mut object_183 = object.key("KerberosAttributes").start_object();
        crate::json_ser::serialize_structure_kerberos_attributes(&mut object_183, var_182);
        object_183.finish();
    }
    if let Some(var_184) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_184).into()),
        );
    }
    if let Some(var_185) = &input.managed_scaling_policy {
        let mut object_186 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_managed_scaling_policy(&mut object_186, var_185);
        object_186.finish();
    }
    if let Some(var_187) = &input.placement_group_configs {
        let mut array_188 = object.key("PlacementGroupConfigs").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_placement_group_config(
                    &mut object_190,
                    item_189,
                );
                object_190.finish();
            }
        }
        array_188.finish();
    }
}

pub fn serialize_structure_set_termination_protection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetTerminationProtectionInput,
) {
    if let Some(var_191) = &input.job_flow_ids {
        let mut array_192 = object.key("JobFlowIds").start_array();
        for item_193 in var_191 {
            {
                array_192.value().string(item_193);
            }
        }
        array_192.finish();
    }
    {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
}

pub fn serialize_structure_set_visible_to_all_users_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetVisibleToAllUsersInput,
) {
    if let Some(var_194) = &input.job_flow_ids {
        let mut array_195 = object.key("JobFlowIds").start_array();
        for item_196 in var_194 {
            {
                array_195.value().string(item_196);
            }
        }
        array_195.finish();
    }
    {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
}

pub fn serialize_structure_start_notebook_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookExecutionInput,
) {
    if let Some(var_197) = &input.editor_id {
        object.key("EditorId").string(var_197);
    }
    if let Some(var_198) = &input.relative_path {
        object.key("RelativePath").string(var_198);
    }
    if let Some(var_199) = &input.notebook_execution_name {
        object.key("NotebookExecutionName").string(var_199);
    }
    if let Some(var_200) = &input.notebook_params {
        object.key("NotebookParams").string(var_200);
    }
    if let Some(var_201) = &input.execution_engine {
        let mut object_202 = object.key("ExecutionEngine").start_object();
        crate::json_ser::serialize_structure_execution_engine_config(&mut object_202, var_201);
        object_202.finish();
    }
    if let Some(var_203) = &input.service_role {
        object.key("ServiceRole").string(var_203);
    }
    if let Some(var_204) = &input.notebook_instance_security_group_id {
        object
            .key("NotebookInstanceSecurityGroupId")
            .string(var_204);
    }
    if let Some(var_205) = &input.tags {
        let mut array_206 = object.key("Tags").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_208, item_207);
                object_208.finish();
            }
        }
        array_206.finish();
    }
}

pub fn serialize_structure_stop_notebook_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookExecutionInput,
) {
    if let Some(var_209) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_209);
    }
}

pub fn serialize_structure_terminate_job_flows_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateJobFlowsInput,
) {
    if let Some(var_210) = &input.job_flow_ids {
        let mut array_211 = object.key("JobFlowIds").start_array();
        for item_212 in var_210 {
            {
                array_211.value().string(item_212);
            }
        }
        array_211.finish();
    }
}

pub fn serialize_structure_update_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioInput,
) {
    if let Some(var_213) = &input.studio_id {
        object.key("StudioId").string(var_213);
    }
    if let Some(var_214) = &input.name {
        object.key("Name").string(var_214);
    }
    if let Some(var_215) = &input.description {
        object.key("Description").string(var_215);
    }
    if let Some(var_216) = &input.subnet_ids {
        let mut array_217 = object.key("SubnetIds").start_array();
        for item_218 in var_216 {
            {
                array_217.value().string(item_218);
            }
        }
        array_217.finish();
    }
    if let Some(var_219) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_219);
    }
}

pub fn serialize_structure_update_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioSessionMappingInput,
) {
    if let Some(var_220) = &input.studio_id {
        object.key("StudioId").string(var_220);
    }
    if let Some(var_221) = &input.identity_id {
        object.key("IdentityId").string(var_221);
    }
    if let Some(var_222) = &input.identity_name {
        object.key("IdentityName").string(var_222);
    }
    if let Some(var_223) = &input.identity_type {
        object.key("IdentityType").string(var_223.as_str());
    }
    if let Some(var_224) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_224);
    }
}

pub fn serialize_structure_instance_fleet_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetConfig,
) {
    if let Some(var_225) = &input.name {
        object.key("Name").string(var_225);
    }
    if let Some(var_226) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_226.as_str());
    }
    if let Some(var_227) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_227).into()),
        );
    }
    if let Some(var_228) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_228).into()),
        );
    }
    if let Some(var_229) = &input.instance_type_configs {
        let mut array_230 = object.key("InstanceTypeConfigs").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_instance_type_config(
                    &mut object_232,
                    item_231,
                );
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.launch_specifications {
        let mut object_234 = object.key("LaunchSpecifications").start_object();
        crate::json_ser::serialize_structure_instance_fleet_provisioning_specifications(
            &mut object_234,
            var_233,
        );
        object_234.finish();
    }
}

pub fn serialize_structure_instance_group_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupConfig,
) {
    if let Some(var_235) = &input.name {
        object.key("Name").string(var_235);
    }
    if let Some(var_236) = &input.market {
        object.key("Market").string(var_236.as_str());
    }
    if let Some(var_237) = &input.instance_role {
        object.key("InstanceRole").string(var_237.as_str());
    }
    if let Some(var_238) = &input.bid_price {
        object.key("BidPrice").string(var_238);
    }
    if let Some(var_239) = &input.instance_type {
        object.key("InstanceType").string(var_239);
    }
    if let Some(var_240) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_240).into()),
        );
    }
    if let Some(var_241) = &input.configurations {
        let mut array_242 = object.key("Configurations").start_array();
        for item_243 in var_241 {
            {
                let mut object_244 = array_242.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_244, item_243);
                object_244.finish();
            }
        }
        array_242.finish();
    }
    if let Some(var_245) = &input.ebs_configuration {
        let mut object_246 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_ebs_configuration(&mut object_246, var_245);
        object_246.finish();
    }
    if let Some(var_247) = &input.auto_scaling_policy {
        let mut object_248 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_auto_scaling_policy(&mut object_248, var_247);
        object_248.finish();
    }
}

pub fn serialize_structure_step_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepConfig,
) {
    if let Some(var_249) = &input.name {
        object.key("Name").string(var_249);
    }
    if let Some(var_250) = &input.action_on_failure {
        object.key("ActionOnFailure").string(var_250.as_str());
    }
    if let Some(var_251) = &input.hadoop_jar_step {
        let mut object_252 = object.key("HadoopJarStep").start_object();
        crate::json_ser::serialize_structure_hadoop_jar_step_config(&mut object_252, var_251);
        object_252.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_253) = &input.key {
        object.key("Key").string(var_253);
    }
    if let Some(var_254) = &input.value {
        object.key("Value").string(var_254);
    }
}

pub fn serialize_structure_instance_fleet_modify_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetModifyConfig,
) {
    if let Some(var_255) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_255);
    }
    if let Some(var_256) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_256).into()),
        );
    }
    if let Some(var_257) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_257).into()),
        );
    }
}

pub fn serialize_structure_instance_group_modify_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupModifyConfig,
) {
    if let Some(var_258) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_258);
    }
    if let Some(var_259) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_259).into()),
        );
    }
    if let Some(var_260) = &input.ec2_instance_ids_to_terminate {
        let mut array_261 = object.key("EC2InstanceIdsToTerminate").start_array();
        for item_262 in var_260 {
            {
                array_261.value().string(item_262);
            }
        }
        array_261.finish();
    }
    if let Some(var_263) = &input.shrink_policy {
        let mut object_264 = object.key("ShrinkPolicy").start_object();
        crate::json_ser::serialize_structure_shrink_policy(&mut object_264, var_263);
        object_264.finish();
    }
    if let Some(var_265) = &input.configurations {
        let mut array_266 = object.key("Configurations").start_array();
        for item_267 in var_265 {
            {
                let mut object_268 = array_266.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_268, item_267);
                object_268.finish();
            }
        }
        array_266.finish();
    }
}

pub fn serialize_structure_auto_scaling_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingPolicy,
) {
    if let Some(var_269) = &input.constraints {
        let mut object_270 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_scaling_constraints(&mut object_270, var_269);
        object_270.finish();
    }
    if let Some(var_271) = &input.rules {
        let mut array_272 = object.key("Rules").start_array();
        for item_273 in var_271 {
            {
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_scaling_rule(&mut object_274, item_273);
                object_274.finish();
            }
        }
        array_272.finish();
    }
}

pub fn serialize_structure_block_public_access_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockPublicAccessConfiguration,
) {
    {
        object
            .key("BlockPublicSecurityGroupRules")
            .boolean(input.block_public_security_group_rules);
    }
    if let Some(var_275) = &input.permitted_public_security_group_rule_ranges {
        let mut array_276 = object
            .key("PermittedPublicSecurityGroupRuleRanges")
            .start_array();
        for item_277 in var_275 {
            {
                let mut object_278 = array_276.value().start_object();
                crate::json_ser::serialize_structure_port_range(&mut object_278, item_277);
                object_278.finish();
            }
        }
        array_276.finish();
    }
    if let Some(var_279) = &input.classification {
        object.key("Classification").string(var_279);
    }
    if let Some(var_280) = &input.configurations {
        let mut array_281 = object.key("Configurations").start_array();
        for item_282 in var_280 {
            {
                let mut object_283 = array_281.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_283, item_282);
                object_283.finish();
            }
        }
        array_281.finish();
    }
    if let Some(var_284) = &input.properties {
        let mut object_285 = object.key("Properties").start_object();
        for (key_286, value_287) in var_284 {
            {
                object_285.key(key_286).string(value_287);
            }
        }
        object_285.finish();
    }
}

pub fn serialize_structure_managed_scaling_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedScalingPolicy,
) {
    if let Some(var_288) = &input.compute_limits {
        let mut object_289 = object.key("ComputeLimits").start_object();
        crate::json_ser::serialize_structure_compute_limits(&mut object_289, var_288);
        object_289.finish();
    }
}

pub fn serialize_structure_job_flow_instances_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobFlowInstancesConfig,
) {
    if let Some(var_290) = &input.master_instance_type {
        object.key("MasterInstanceType").string(var_290);
    }
    if let Some(var_291) = &input.slave_instance_type {
        object.key("SlaveInstanceType").string(var_291);
    }
    if let Some(var_292) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_292).into()),
        );
    }
    if let Some(var_293) = &input.instance_groups {
        let mut array_294 = object.key("InstanceGroups").start_array();
        for item_295 in var_293 {
            {
                let mut object_296 = array_294.value().start_object();
                crate::json_ser::serialize_structure_instance_group_config(
                    &mut object_296,
                    item_295,
                );
                object_296.finish();
            }
        }
        array_294.finish();
    }
    if let Some(var_297) = &input.instance_fleets {
        let mut array_298 = object.key("InstanceFleets").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_instance_fleet_config(
                    &mut object_300,
                    item_299,
                );
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.ec2_key_name {
        object.key("Ec2KeyName").string(var_301);
    }
    if let Some(var_302) = &input.placement {
        let mut object_303 = object.key("Placement").start_object();
        crate::json_ser::serialize_structure_placement_type(&mut object_303, var_302);
        object_303.finish();
    }
    if input.keep_job_flow_alive_when_no_steps {
        object
            .key("KeepJobFlowAliveWhenNoSteps")
            .boolean(input.keep_job_flow_alive_when_no_steps);
    }
    if input.termination_protected {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
    if let Some(var_304) = &input.hadoop_version {
        object.key("HadoopVersion").string(var_304);
    }
    if let Some(var_305) = &input.ec2_subnet_id {
        object.key("Ec2SubnetId").string(var_305);
    }
    if let Some(var_306) = &input.ec2_subnet_ids {
        let mut array_307 = object.key("Ec2SubnetIds").start_array();
        for item_308 in var_306 {
            {
                array_307.value().string(item_308);
            }
        }
        array_307.finish();
    }
    if let Some(var_309) = &input.emr_managed_master_security_group {
        object.key("EmrManagedMasterSecurityGroup").string(var_309);
    }
    if let Some(var_310) = &input.emr_managed_slave_security_group {
        object.key("EmrManagedSlaveSecurityGroup").string(var_310);
    }
    if let Some(var_311) = &input.service_access_security_group {
        object.key("ServiceAccessSecurityGroup").string(var_311);
    }
    if let Some(var_312) = &input.additional_master_security_groups {
        let mut array_313 = object.key("AdditionalMasterSecurityGroups").start_array();
        for item_314 in var_312 {
            {
                array_313.value().string(item_314);
            }
        }
        array_313.finish();
    }
    if let Some(var_315) = &input.additional_slave_security_groups {
        let mut array_316 = object.key("AdditionalSlaveSecurityGroups").start_array();
        for item_317 in var_315 {
            {
                array_316.value().string(item_317);
            }
        }
        array_316.finish();
    }
}

pub fn serialize_structure_bootstrap_action_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BootstrapActionConfig,
) {
    if let Some(var_318) = &input.name {
        object.key("Name").string(var_318);
    }
    if let Some(var_319) = &input.script_bootstrap_action {
        let mut object_320 = object.key("ScriptBootstrapAction").start_object();
        crate::json_ser::serialize_structure_script_bootstrap_action_config(
            &mut object_320,
            var_319,
        );
        object_320.finish();
    }
}

pub fn serialize_structure_supported_product_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SupportedProductConfig,
) {
    if let Some(var_321) = &input.name {
        object.key("Name").string(var_321);
    }
    if let Some(var_322) = &input.args {
        let mut array_323 = object.key("Args").start_array();
        for item_324 in var_322 {
            {
                array_323.value().string(item_324);
            }
        }
        array_323.finish();
    }
}

pub fn serialize_structure_application(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Application,
) {
    if let Some(var_325) = &input.name {
        object.key("Name").string(var_325);
    }
    if let Some(var_326) = &input.version {
        object.key("Version").string(var_326);
    }
    if let Some(var_327) = &input.args {
        let mut array_328 = object.key("Args").start_array();
        for item_329 in var_327 {
            {
                array_328.value().string(item_329);
            }
        }
        array_328.finish();
    }
    if let Some(var_330) = &input.additional_info {
        let mut object_331 = object.key("AdditionalInfo").start_object();
        for (key_332, value_333) in var_330 {
            {
                object_331.key(key_332).string(value_333);
            }
        }
        object_331.finish();
    }
}

pub fn serialize_structure_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Configuration,
) {
    if let Some(var_334) = &input.classification {
        object.key("Classification").string(var_334);
    }
    if let Some(var_335) = &input.configurations {
        let mut array_336 = object.key("Configurations").start_array();
        for item_337 in var_335 {
            {
                let mut object_338 = array_336.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_338, item_337);
                object_338.finish();
            }
        }
        array_336.finish();
    }
    if let Some(var_339) = &input.properties {
        let mut object_340 = object.key("Properties").start_object();
        for (key_341, value_342) in var_339 {
            {
                object_340.key(key_341).string(value_342);
            }
        }
        object_340.finish();
    }
}

pub fn serialize_structure_kerberos_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KerberosAttributes,
) {
    if let Some(var_343) = &input.realm {
        object.key("Realm").string(var_343);
    }
    if let Some(var_344) = &input.kdc_admin_password {
        object.key("KdcAdminPassword").string(var_344);
    }
    if let Some(var_345) = &input.cross_realm_trust_principal_password {
        object
            .key("CrossRealmTrustPrincipalPassword")
            .string(var_345);
    }
    if let Some(var_346) = &input.ad_domain_join_user {
        object.key("ADDomainJoinUser").string(var_346);
    }
    if let Some(var_347) = &input.ad_domain_join_password {
        object.key("ADDomainJoinPassword").string(var_347);
    }
}

pub fn serialize_structure_placement_group_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementGroupConfig,
) {
    if let Some(var_348) = &input.instance_role {
        object.key("InstanceRole").string(var_348.as_str());
    }
    if let Some(var_349) = &input.placement_strategy {
        object.key("PlacementStrategy").string(var_349.as_str());
    }
}

pub fn serialize_structure_execution_engine_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionEngineConfig,
) {
    if let Some(var_350) = &input.id {
        object.key("Id").string(var_350);
    }
    if let Some(var_351) = &input.r#type {
        object.key("Type").string(var_351.as_str());
    }
    if let Some(var_352) = &input.master_instance_security_group_id {
        object.key("MasterInstanceSecurityGroupId").string(var_352);
    }
}

pub fn serialize_structure_instance_type_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceTypeConfig,
) {
    if let Some(var_353) = &input.instance_type {
        object.key("InstanceType").string(var_353);
    }
    if let Some(var_354) = &input.weighted_capacity {
        object.key("WeightedCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_354).into()),
        );
    }
    if let Some(var_355) = &input.bid_price {
        object.key("BidPrice").string(var_355);
    }
    if let Some(var_356) = &input.bid_price_as_percentage_of_on_demand_price {
        object.key("BidPriceAsPercentageOfOnDemandPrice").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_356).into()),
        );
    }
    if let Some(var_357) = &input.ebs_configuration {
        let mut object_358 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_ebs_configuration(&mut object_358, var_357);
        object_358.finish();
    }
    if let Some(var_359) = &input.configurations {
        let mut array_360 = object.key("Configurations").start_array();
        for item_361 in var_359 {
            {
                let mut object_362 = array_360.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_362, item_361);
                object_362.finish();
            }
        }
        array_360.finish();
    }
}

pub fn serialize_structure_instance_fleet_provisioning_specifications(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetProvisioningSpecifications,
) {
    if let Some(var_363) = &input.spot_specification {
        let mut object_364 = object.key("SpotSpecification").start_object();
        crate::json_ser::serialize_structure_spot_provisioning_specification(
            &mut object_364,
            var_363,
        );
        object_364.finish();
    }
    if let Some(var_365) = &input.on_demand_specification {
        let mut object_366 = object.key("OnDemandSpecification").start_object();
        crate::json_ser::serialize_structure_on_demand_provisioning_specification(
            &mut object_366,
            var_365,
        );
        object_366.finish();
    }
}

pub fn serialize_structure_ebs_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsConfiguration,
) {
    if let Some(var_367) = &input.ebs_block_device_configs {
        let mut array_368 = object.key("EbsBlockDeviceConfigs").start_array();
        for item_369 in var_367 {
            {
                let mut object_370 = array_368.value().start_object();
                crate::json_ser::serialize_structure_ebs_block_device_config(
                    &mut object_370,
                    item_369,
                );
                object_370.finish();
            }
        }
        array_368.finish();
    }
    if let Some(var_371) = &input.ebs_optimized {
        object.key("EbsOptimized").boolean(*var_371);
    }
}

pub fn serialize_structure_hadoop_jar_step_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HadoopJarStepConfig,
) {
    if let Some(var_372) = &input.properties {
        let mut array_373 = object.key("Properties").start_array();
        for item_374 in var_372 {
            {
                let mut object_375 = array_373.value().start_object();
                crate::json_ser::serialize_structure_key_value(&mut object_375, item_374);
                object_375.finish();
            }
        }
        array_373.finish();
    }
    if let Some(var_376) = &input.jar {
        object.key("Jar").string(var_376);
    }
    if let Some(var_377) = &input.main_class {
        object.key("MainClass").string(var_377);
    }
    if let Some(var_378) = &input.args {
        let mut array_379 = object.key("Args").start_array();
        for item_380 in var_378 {
            {
                array_379.value().string(item_380);
            }
        }
        array_379.finish();
    }
}

pub fn serialize_structure_shrink_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShrinkPolicy,
) {
    if let Some(var_381) = &input.decommission_timeout {
        object.key("DecommissionTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_381).into()),
        );
    }
    if let Some(var_382) = &input.instance_resize_policy {
        let mut object_383 = object.key("InstanceResizePolicy").start_object();
        crate::json_ser::serialize_structure_instance_resize_policy(&mut object_383, var_382);
        object_383.finish();
    }
}

pub fn serialize_structure_scaling_constraints(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingConstraints,
) {
    if let Some(var_384) = &input.min_capacity {
        object.key("MinCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_384).into()),
        );
    }
    if let Some(var_385) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_385).into()),
        );
    }
}

pub fn serialize_structure_scaling_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingRule,
) {
    if let Some(var_386) = &input.name {
        object.key("Name").string(var_386);
    }
    if let Some(var_387) = &input.description {
        object.key("Description").string(var_387);
    }
    if let Some(var_388) = &input.action {
        let mut object_389 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_scaling_action(&mut object_389, var_388);
        object_389.finish();
    }
    if let Some(var_390) = &input.trigger {
        let mut object_391 = object.key("Trigger").start_object();
        crate::json_ser::serialize_structure_scaling_trigger(&mut object_391, var_390);
        object_391.finish();
    }
}

pub fn serialize_structure_port_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) {
    if let Some(var_392) = &input.min_range {
        object.key("MinRange").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_392).into()),
        );
    }
    if let Some(var_393) = &input.max_range {
        object.key("MaxRange").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_393).into()),
        );
    }
}

pub fn serialize_structure_compute_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeLimits,
) {
    if let Some(var_394) = &input.unit_type {
        object.key("UnitType").string(var_394.as_str());
    }
    if let Some(var_395) = &input.minimum_capacity_units {
        object.key("MinimumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_395).into()),
        );
    }
    if let Some(var_396) = &input.maximum_capacity_units {
        object.key("MaximumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_396).into()),
        );
    }
    if let Some(var_397) = &input.maximum_on_demand_capacity_units {
        object.key("MaximumOnDemandCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_397).into()),
        );
    }
    if let Some(var_398) = &input.maximum_core_capacity_units {
        object.key("MaximumCoreCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_398).into()),
        );
    }
}

pub fn serialize_structure_placement_type(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementType,
) {
    if let Some(var_399) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_399);
    }
    if let Some(var_400) = &input.availability_zones {
        let mut array_401 = object.key("AvailabilityZones").start_array();
        for item_402 in var_400 {
            {
                array_401.value().string(item_402);
            }
        }
        array_401.finish();
    }
}

pub fn serialize_structure_script_bootstrap_action_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScriptBootstrapActionConfig,
) {
    if let Some(var_403) = &input.path {
        object.key("Path").string(var_403);
    }
    if let Some(var_404) = &input.args {
        let mut array_405 = object.key("Args").start_array();
        for item_406 in var_404 {
            {
                array_405.value().string(item_406);
            }
        }
        array_405.finish();
    }
}

pub fn serialize_structure_spot_provisioning_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpotProvisioningSpecification,
) {
    if let Some(var_407) = &input.timeout_duration_minutes {
        object.key("TimeoutDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_407).into()),
        );
    }
    if let Some(var_408) = &input.timeout_action {
        object.key("TimeoutAction").string(var_408.as_str());
    }
    if let Some(var_409) = &input.block_duration_minutes {
        object.key("BlockDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_409).into()),
        );
    }
    if let Some(var_410) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_410.as_str());
    }
}

pub fn serialize_structure_on_demand_provisioning_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandProvisioningSpecification,
) {
    if let Some(var_411) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_411.as_str());
    }
    if let Some(var_412) = &input.capacity_reservation_options {
        let mut object_413 = object.key("CapacityReservationOptions").start_object();
        crate::json_ser::serialize_structure_on_demand_capacity_reservation_options(
            &mut object_413,
            var_412,
        );
        object_413.finish();
    }
}

pub fn serialize_structure_ebs_block_device_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsBlockDeviceConfig,
) {
    if let Some(var_414) = &input.volume_specification {
        let mut object_415 = object.key("VolumeSpecification").start_object();
        crate::json_ser::serialize_structure_volume_specification(&mut object_415, var_414);
        object_415.finish();
    }
    if let Some(var_416) = &input.volumes_per_instance {
        object.key("VolumesPerInstance").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_416).into()),
        );
    }
}

pub fn serialize_structure_key_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValue,
) {
    if let Some(var_417) = &input.key {
        object.key("Key").string(var_417);
    }
    if let Some(var_418) = &input.value {
        object.key("Value").string(var_418);
    }
}

pub fn serialize_structure_instance_resize_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceResizePolicy,
) {
    if let Some(var_419) = &input.instances_to_terminate {
        let mut array_420 = object.key("InstancesToTerminate").start_array();
        for item_421 in var_419 {
            {
                array_420.value().string(item_421);
            }
        }
        array_420.finish();
    }
    if let Some(var_422) = &input.instances_to_protect {
        let mut array_423 = object.key("InstancesToProtect").start_array();
        for item_424 in var_422 {
            {
                array_423.value().string(item_424);
            }
        }
        array_423.finish();
    }
    if let Some(var_425) = &input.instance_termination_timeout {
        object.key("InstanceTerminationTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_425).into()),
        );
    }
}

pub fn serialize_structure_scaling_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingAction,
) {
    if let Some(var_426) = &input.market {
        object.key("Market").string(var_426.as_str());
    }
    if let Some(var_427) = &input.simple_scaling_policy_configuration {
        let mut object_428 = object
            .key("SimpleScalingPolicyConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_simple_scaling_policy_configuration(
            &mut object_428,
            var_427,
        );
        object_428.finish();
    }
}

pub fn serialize_structure_scaling_trigger(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingTrigger,
) {
    if let Some(var_429) = &input.cloud_watch_alarm_definition {
        let mut object_430 = object.key("CloudWatchAlarmDefinition").start_object();
        crate::json_ser::serialize_structure_cloud_watch_alarm_definition(&mut object_430, var_429);
        object_430.finish();
    }
}

pub fn serialize_structure_on_demand_capacity_reservation_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandCapacityReservationOptions,
) {
    if let Some(var_431) = &input.usage_strategy {
        object.key("UsageStrategy").string(var_431.as_str());
    }
    if let Some(var_432) = &input.capacity_reservation_preference {
        object
            .key("CapacityReservationPreference")
            .string(var_432.as_str());
    }
    if let Some(var_433) = &input.capacity_reservation_resource_group_arn {
        object
            .key("CapacityReservationResourceGroupArn")
            .string(var_433);
    }
}

pub fn serialize_structure_volume_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeSpecification,
) {
    if let Some(var_434) = &input.volume_type {
        object.key("VolumeType").string(var_434);
    }
    if let Some(var_435) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_435).into()),
        );
    }
    if let Some(var_436) = &input.size_in_gb {
        object.key("SizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_436).into()),
        );
    }
}

pub fn serialize_structure_simple_scaling_policy_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleScalingPolicyConfiguration,
) {
    if let Some(var_437) = &input.adjustment_type {
        object.key("AdjustmentType").string(var_437.as_str());
    }
    if let Some(var_438) = &input.scaling_adjustment {
        object.key("ScalingAdjustment").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    if let Some(var_439) = &input.cool_down {
        object.key("CoolDown").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_439).into()),
        );
    }
}

pub fn serialize_structure_cloud_watch_alarm_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchAlarmDefinition,
) {
    if let Some(var_440) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_440.as_str());
    }
    if let Some(var_441) = &input.evaluation_periods {
        object.key("EvaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_441).into()),
        );
    }
    if let Some(var_442) = &input.metric_name {
        object.key("MetricName").string(var_442);
    }
    if let Some(var_443) = &input.namespace {
        object.key("Namespace").string(var_443);
    }
    if let Some(var_444) = &input.period {
        object.key("Period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_444).into()),
        );
    }
    if let Some(var_445) = &input.statistic {
        object.key("Statistic").string(var_445.as_str());
    }
    if let Some(var_446) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_446).into()),
        );
    }
    if let Some(var_447) = &input.unit {
        object.key("Unit").string(var_447.as_str());
    }
    if let Some(var_448) = &input.dimensions {
        let mut array_449 = object.key("Dimensions").start_array();
        for item_450 in var_448 {
            {
                let mut object_451 = array_449.value().start_object();
                crate::json_ser::serialize_structure_metric_dimension(&mut object_451, item_450);
                object_451.finish();
            }
        }
        array_449.finish();
    }
}

pub fn serialize_structure_metric_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) {
    if let Some(var_452) = &input.key {
        object.key("Key").string(var_452);
    }
    if let Some(var_453) = &input.value {
        object.key("Value").string(var_453);
    }
}
