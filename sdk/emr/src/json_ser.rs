// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_instance_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceFleetInput,
) {
    if let Some(var_1) = &input.cluster_id {
        object.key("ClusterId").string(var_1);
    }
    if let Some(var_2) = &input.instance_fleet {
        let mut object_3 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_instance_fleet_config(&mut object_3, var_2);
        object_3.finish();
    }
}

pub fn serialize_structure_add_instance_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceGroupsInput,
) {
    if let Some(var_4) = &input.instance_groups {
        let mut array_5 = object.key("InstanceGroups").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_instance_group_config(&mut object_7, item_6);
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.job_flow_id {
        object.key("JobFlowId").string(var_8);
    }
}

pub fn serialize_structure_add_job_flow_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddJobFlowStepsInput,
) {
    if let Some(var_9) = &input.job_flow_id {
        object.key("JobFlowId").string(var_9);
    }
    if let Some(var_10) = &input.steps {
        let mut array_11 = object.key("Steps").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_step_config(&mut object_13, item_12);
                object_13.finish();
            }
        }
        array_11.finish();
    }
}

pub fn serialize_structure_add_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) {
    if let Some(var_14) = &input.resource_id {
        object.key("ResourceId").string(var_14);
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
}

pub fn serialize_structure_cancel_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelStepsInput,
) {
    if let Some(var_19) = &input.cluster_id {
        object.key("ClusterId").string(var_19);
    }
    if let Some(var_20) = &input.step_ids {
        let mut array_21 = object.key("StepIds").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22);
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.step_cancellation_option {
        object.key("StepCancellationOption").string(var_23.as_str());
    }
}

pub fn serialize_structure_create_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) {
    if let Some(var_24) = &input.name {
        object.key("Name").string(var_24);
    }
    if let Some(var_25) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_25);
    }
}

pub fn serialize_structure_create_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioInput,
) {
    if let Some(var_26) = &input.name {
        object.key("Name").string(var_26);
    }
    if let Some(var_27) = &input.description {
        object.key("Description").string(var_27);
    }
    if let Some(var_28) = &input.auth_mode {
        object.key("AuthMode").string(var_28.as_str());
    }
    if let Some(var_29) = &input.vpc_id {
        object.key("VpcId").string(var_29);
    }
    if let Some(var_30) = &input.subnet_ids {
        let mut array_31 = object.key("SubnetIds").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32);
            }
        }
        array_31.finish();
    }
    if let Some(var_33) = &input.service_role {
        object.key("ServiceRole").string(var_33);
    }
    if let Some(var_34) = &input.user_role {
        object.key("UserRole").string(var_34);
    }
    if let Some(var_35) = &input.workspace_security_group_id {
        object.key("WorkspaceSecurityGroupId").string(var_35);
    }
    if let Some(var_36) = &input.engine_security_group_id {
        object.key("EngineSecurityGroupId").string(var_36);
    }
    if let Some(var_37) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_37);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
}

pub fn serialize_structure_create_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioSessionMappingInput,
) {
    if let Some(var_42) = &input.studio_id {
        object.key("StudioId").string(var_42);
    }
    if let Some(var_43) = &input.identity_id {
        object.key("IdentityId").string(var_43);
    }
    if let Some(var_44) = &input.identity_name {
        object.key("IdentityName").string(var_44);
    }
    if let Some(var_45) = &input.identity_type {
        object.key("IdentityType").string(var_45.as_str());
    }
    if let Some(var_46) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_46);
    }
}

pub fn serialize_structure_delete_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) {
    if let Some(var_47) = &input.name {
        object.key("Name").string(var_47);
    }
}

pub fn serialize_structure_delete_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioInput,
) {
    if let Some(var_48) = &input.studio_id {
        object.key("StudioId").string(var_48);
    }
}

pub fn serialize_structure_delete_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioSessionMappingInput,
) {
    if let Some(var_49) = &input.studio_id {
        object.key("StudioId").string(var_49);
    }
    if let Some(var_50) = &input.identity_id {
        object.key("IdentityId").string(var_50);
    }
    if let Some(var_51) = &input.identity_name {
        object.key("IdentityName").string(var_51);
    }
    if let Some(var_52) = &input.identity_type {
        object.key("IdentityType").string(var_52.as_str());
    }
}

pub fn serialize_structure_describe_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeClusterInput,
) {
    if let Some(var_53) = &input.cluster_id {
        object.key("ClusterId").string(var_53);
    }
}

pub fn serialize_structure_describe_job_flows_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobFlowsInput,
) {
    if let Some(var_54) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_54, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_55) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_55, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_56) = &input.job_flow_ids {
        let mut array_57 = object.key("JobFlowIds").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58);
            }
        }
        array_57.finish();
    }
    if let Some(var_59) = &input.job_flow_states {
        let mut array_60 = object.key("JobFlowStates").start_array();
        for item_61 in var_59 {
            {
                array_60.value().string(item_61.as_str());
            }
        }
        array_60.finish();
    }
}

pub fn serialize_structure_describe_notebook_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookExecutionInput,
) {
    if let Some(var_62) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_62);
    }
}

pub fn serialize_structure_describe_release_label_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReleaseLabelInput,
) {
    if let Some(var_63) = &input.release_label {
        object.key("ReleaseLabel").string(var_63);
    }
    if let Some(var_64) = &input.next_token {
        object.key("NextToken").string(var_64);
    }
    if let Some(var_65) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_65).into()),
        );
    }
}

pub fn serialize_structure_describe_security_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSecurityConfigurationInput,
) {
    if let Some(var_66) = &input.name {
        object.key("Name").string(var_66);
    }
}

pub fn serialize_structure_describe_step_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStepInput,
) {
    if let Some(var_67) = &input.cluster_id {
        object.key("ClusterId").string(var_67);
    }
    if let Some(var_68) = &input.step_id {
        object.key("StepId").string(var_68);
    }
}

pub fn serialize_structure_describe_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStudioInput,
) {
    if let Some(var_69) = &input.studio_id {
        object.key("StudioId").string(var_69);
    }
}

pub fn serialize_structure_get_auto_termination_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutoTerminationPolicyInput,
) {
    if let Some(var_70) = &input.cluster_id {
        object.key("ClusterId").string(var_70);
    }
}

pub fn serialize_structure_get_managed_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetManagedScalingPolicyInput,
) {
    if let Some(var_71) = &input.cluster_id {
        object.key("ClusterId").string(var_71);
    }
}

pub fn serialize_structure_get_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStudioSessionMappingInput,
) {
    if let Some(var_72) = &input.studio_id {
        object.key("StudioId").string(var_72);
    }
    if let Some(var_73) = &input.identity_id {
        object.key("IdentityId").string(var_73);
    }
    if let Some(var_74) = &input.identity_name {
        object.key("IdentityName").string(var_74);
    }
    if let Some(var_75) = &input.identity_type {
        object.key("IdentityType").string(var_75.as_str());
    }
}

pub fn serialize_structure_list_bootstrap_actions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBootstrapActionsInput,
) {
    if let Some(var_76) = &input.cluster_id {
        object.key("ClusterId").string(var_76);
    }
    if let Some(var_77) = &input.marker {
        object.key("Marker").string(var_77);
    }
}

pub fn serialize_structure_list_clusters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListClustersInput,
) {
    if let Some(var_78) = &input.created_after {
        object
            .key("CreatedAfter")
            .instant(var_78, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_79) = &input.created_before {
        object
            .key("CreatedBefore")
            .instant(var_79, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_80) = &input.cluster_states {
        let mut array_81 = object.key("ClusterStates").start_array();
        for item_82 in var_80 {
            {
                array_81.value().string(item_82.as_str());
            }
        }
        array_81.finish();
    }
    if let Some(var_83) = &input.marker {
        object.key("Marker").string(var_83);
    }
}

pub fn serialize_structure_list_instance_fleets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceFleetsInput,
) {
    if let Some(var_84) = &input.cluster_id {
        object.key("ClusterId").string(var_84);
    }
    if let Some(var_85) = &input.marker {
        object.key("Marker").string(var_85);
    }
}

pub fn serialize_structure_list_instance_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceGroupsInput,
) {
    if let Some(var_86) = &input.cluster_id {
        object.key("ClusterId").string(var_86);
    }
    if let Some(var_87) = &input.marker {
        object.key("Marker").string(var_87);
    }
}

pub fn serialize_structure_list_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstancesInput,
) {
    if let Some(var_88) = &input.cluster_id {
        object.key("ClusterId").string(var_88);
    }
    if let Some(var_89) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_89);
    }
    if let Some(var_90) = &input.instance_group_types {
        let mut array_91 = object.key("InstanceGroupTypes").start_array();
        for item_92 in var_90 {
            {
                array_91.value().string(item_92.as_str());
            }
        }
        array_91.finish();
    }
    if let Some(var_93) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_93);
    }
    if let Some(var_94) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_94.as_str());
    }
    if let Some(var_95) = &input.instance_states {
        let mut array_96 = object.key("InstanceStates").start_array();
        for item_97 in var_95 {
            {
                array_96.value().string(item_97.as_str());
            }
        }
        array_96.finish();
    }
    if let Some(var_98) = &input.marker {
        object.key("Marker").string(var_98);
    }
}

pub fn serialize_structure_list_notebook_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookExecutionsInput,
) {
    if let Some(var_99) = &input.editor_id {
        object.key("EditorId").string(var_99);
    }
    if let Some(var_100) = &input.status {
        object.key("Status").string(var_100.as_str());
    }
    if let Some(var_101) = &input.from {
        object
            .key("From")
            .instant(var_101, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_102) = &input.to {
        object
            .key("To")
            .instant(var_102, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_103) = &input.marker {
        object.key("Marker").string(var_103);
    }
}

pub fn serialize_structure_list_release_labels_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListReleaseLabelsInput,
) {
    if let Some(var_104) = &input.filters {
        let mut object_105 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_release_label_filter(&mut object_105, var_104);
        object_105.finish();
    }
    if let Some(var_106) = &input.next_token {
        object.key("NextToken").string(var_106);
    }
    if let Some(var_107) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_107).into()),
        );
    }
}

pub fn serialize_structure_list_security_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSecurityConfigurationsInput,
) {
    if let Some(var_108) = &input.marker {
        object.key("Marker").string(var_108);
    }
}

pub fn serialize_structure_list_steps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStepsInput,
) {
    if let Some(var_109) = &input.cluster_id {
        object.key("ClusterId").string(var_109);
    }
    if let Some(var_110) = &input.step_states {
        let mut array_111 = object.key("StepStates").start_array();
        for item_112 in var_110 {
            {
                array_111.value().string(item_112.as_str());
            }
        }
        array_111.finish();
    }
    if let Some(var_113) = &input.step_ids {
        let mut array_114 = object.key("StepIds").start_array();
        for item_115 in var_113 {
            {
                array_114.value().string(item_115);
            }
        }
        array_114.finish();
    }
    if let Some(var_116) = &input.marker {
        object.key("Marker").string(var_116);
    }
}

pub fn serialize_structure_list_studios_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudiosInput,
) {
    if let Some(var_117) = &input.marker {
        object.key("Marker").string(var_117);
    }
}

pub fn serialize_structure_list_studio_session_mappings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudioSessionMappingsInput,
) {
    if let Some(var_118) = &input.studio_id {
        object.key("StudioId").string(var_118);
    }
    if let Some(var_119) = &input.identity_type {
        object.key("IdentityType").string(var_119.as_str());
    }
    if let Some(var_120) = &input.marker {
        object.key("Marker").string(var_120);
    }
}

pub fn serialize_structure_modify_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyClusterInput,
) {
    if let Some(var_121) = &input.cluster_id {
        object.key("ClusterId").string(var_121);
    }
    if let Some(var_122) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_122).into()),
        );
    }
}

pub fn serialize_structure_modify_instance_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceFleetInput,
) {
    if let Some(var_123) = &input.cluster_id {
        object.key("ClusterId").string(var_123);
    }
    if let Some(var_124) = &input.instance_fleet {
        let mut object_125 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_instance_fleet_modify_config(&mut object_125, var_124);
        object_125.finish();
    }
}

pub fn serialize_structure_modify_instance_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceGroupsInput,
) {
    if let Some(var_126) = &input.cluster_id {
        object.key("ClusterId").string(var_126);
    }
    if let Some(var_127) = &input.instance_groups {
        let mut array_128 = object.key("InstanceGroups").start_array();
        for item_129 in var_127 {
            {
                let mut object_130 = array_128.value().start_object();
                crate::json_ser::serialize_structure_instance_group_modify_config(
                    &mut object_130,
                    item_129,
                );
                object_130.finish();
            }
        }
        array_128.finish();
    }
}

pub fn serialize_structure_put_auto_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAutoScalingPolicyInput,
) {
    if let Some(var_131) = &input.cluster_id {
        object.key("ClusterId").string(var_131);
    }
    if let Some(var_132) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_132);
    }
    if let Some(var_133) = &input.auto_scaling_policy {
        let mut object_134 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_auto_scaling_policy(&mut object_134, var_133);
        object_134.finish();
    }
}

pub fn serialize_structure_put_auto_termination_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAutoTerminationPolicyInput,
) {
    if let Some(var_135) = &input.cluster_id {
        object.key("ClusterId").string(var_135);
    }
    if let Some(var_136) = &input.auto_termination_policy {
        let mut object_137 = object.key("AutoTerminationPolicy").start_object();
        crate::json_ser::serialize_structure_auto_termination_policy(&mut object_137, var_136);
        object_137.finish();
    }
}

pub fn serialize_structure_put_block_public_access_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBlockPublicAccessConfigurationInput,
) {
    if let Some(var_138) = &input.block_public_access_configuration {
        let mut object_139 = object.key("BlockPublicAccessConfiguration").start_object();
        crate::json_ser::serialize_structure_block_public_access_configuration(
            &mut object_139,
            var_138,
        );
        object_139.finish();
    }
}

pub fn serialize_structure_put_managed_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutManagedScalingPolicyInput,
) {
    if let Some(var_140) = &input.cluster_id {
        object.key("ClusterId").string(var_140);
    }
    if let Some(var_141) = &input.managed_scaling_policy {
        let mut object_142 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_managed_scaling_policy(&mut object_142, var_141);
        object_142.finish();
    }
}

pub fn serialize_structure_remove_auto_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveAutoScalingPolicyInput,
) {
    if let Some(var_143) = &input.cluster_id {
        object.key("ClusterId").string(var_143);
    }
    if let Some(var_144) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_144);
    }
}

pub fn serialize_structure_remove_auto_termination_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveAutoTerminationPolicyInput,
) {
    if let Some(var_145) = &input.cluster_id {
        object.key("ClusterId").string(var_145);
    }
}

pub fn serialize_structure_remove_managed_scaling_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveManagedScalingPolicyInput,
) {
    if let Some(var_146) = &input.cluster_id {
        object.key("ClusterId").string(var_146);
    }
}

pub fn serialize_structure_remove_tags_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsInput,
) {
    if let Some(var_147) = &input.resource_id {
        object.key("ResourceId").string(var_147);
    }
    if let Some(var_148) = &input.tag_keys {
        let mut array_149 = object.key("TagKeys").start_array();
        for item_150 in var_148 {
            {
                array_149.value().string(item_150);
            }
        }
        array_149.finish();
    }
}

pub fn serialize_structure_run_job_flow_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunJobFlowInput,
) {
    if let Some(var_151) = &input.name {
        object.key("Name").string(var_151);
    }
    if let Some(var_152) = &input.log_uri {
        object.key("LogUri").string(var_152);
    }
    if let Some(var_153) = &input.log_encryption_kms_key_id {
        object.key("LogEncryptionKmsKeyId").string(var_153);
    }
    if let Some(var_154) = &input.additional_info {
        object.key("AdditionalInfo").string(var_154);
    }
    if let Some(var_155) = &input.ami_version {
        object.key("AmiVersion").string(var_155);
    }
    if let Some(var_156) = &input.release_label {
        object.key("ReleaseLabel").string(var_156);
    }
    if let Some(var_157) = &input.instances {
        let mut object_158 = object.key("Instances").start_object();
        crate::json_ser::serialize_structure_job_flow_instances_config(&mut object_158, var_157);
        object_158.finish();
    }
    if let Some(var_159) = &input.steps {
        let mut array_160 = object.key("Steps").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_step_config(&mut object_162, item_161);
                object_162.finish();
            }
        }
        array_160.finish();
    }
    if let Some(var_163) = &input.bootstrap_actions {
        let mut array_164 = object.key("BootstrapActions").start_array();
        for item_165 in var_163 {
            {
                let mut object_166 = array_164.value().start_object();
                crate::json_ser::serialize_structure_bootstrap_action_config(
                    &mut object_166,
                    item_165,
                );
                object_166.finish();
            }
        }
        array_164.finish();
    }
    if let Some(var_167) = &input.supported_products {
        let mut array_168 = object.key("SupportedProducts").start_array();
        for item_169 in var_167 {
            {
                array_168.value().string(item_169);
            }
        }
        array_168.finish();
    }
    if let Some(var_170) = &input.new_supported_products {
        let mut array_171 = object.key("NewSupportedProducts").start_array();
        for item_172 in var_170 {
            {
                let mut object_173 = array_171.value().start_object();
                crate::json_ser::serialize_structure_supported_product_config(
                    &mut object_173,
                    item_172,
                );
                object_173.finish();
            }
        }
        array_171.finish();
    }
    if let Some(var_174) = &input.applications {
        let mut array_175 = object.key("Applications").start_array();
        for item_176 in var_174 {
            {
                let mut object_177 = array_175.value().start_object();
                crate::json_ser::serialize_structure_application(&mut object_177, item_176);
                object_177.finish();
            }
        }
        array_175.finish();
    }
    if let Some(var_178) = &input.configurations {
        let mut array_179 = object.key("Configurations").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_181, item_180);
                object_181.finish();
            }
        }
        array_179.finish();
    }
    if input.visible_to_all_users {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
    if let Some(var_182) = &input.job_flow_role {
        object.key("JobFlowRole").string(var_182);
    }
    if let Some(var_183) = &input.service_role {
        object.key("ServiceRole").string(var_183);
    }
    if let Some(var_184) = &input.tags {
        let mut array_185 = object.key("Tags").start_array();
        for item_186 in var_184 {
            {
                let mut object_187 = array_185.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_187, item_186);
                object_187.finish();
            }
        }
        array_185.finish();
    }
    if let Some(var_188) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_188);
    }
    if let Some(var_189) = &input.auto_scaling_role {
        object.key("AutoScalingRole").string(var_189);
    }
    if let Some(var_190) = &input.scale_down_behavior {
        object.key("ScaleDownBehavior").string(var_190.as_str());
    }
    if let Some(var_191) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_191);
    }
    if let Some(var_192) = &input.ebs_root_volume_size {
        object.key("EbsRootVolumeSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    if let Some(var_193) = &input.repo_upgrade_on_boot {
        object.key("RepoUpgradeOnBoot").string(var_193.as_str());
    }
    if let Some(var_194) = &input.kerberos_attributes {
        let mut object_195 = object.key("KerberosAttributes").start_object();
        crate::json_ser::serialize_structure_kerberos_attributes(&mut object_195, var_194);
        object_195.finish();
    }
    if let Some(var_196) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_196).into()),
        );
    }
    if let Some(var_197) = &input.managed_scaling_policy {
        let mut object_198 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_managed_scaling_policy(&mut object_198, var_197);
        object_198.finish();
    }
    if let Some(var_199) = &input.placement_group_configs {
        let mut array_200 = object.key("PlacementGroupConfigs").start_array();
        for item_201 in var_199 {
            {
                let mut object_202 = array_200.value().start_object();
                crate::json_ser::serialize_structure_placement_group_config(
                    &mut object_202,
                    item_201,
                );
                object_202.finish();
            }
        }
        array_200.finish();
    }
    if let Some(var_203) = &input.auto_termination_policy {
        let mut object_204 = object.key("AutoTerminationPolicy").start_object();
        crate::json_ser::serialize_structure_auto_termination_policy(&mut object_204, var_203);
        object_204.finish();
    }
}

pub fn serialize_structure_set_termination_protection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetTerminationProtectionInput,
) {
    if let Some(var_205) = &input.job_flow_ids {
        let mut array_206 = object.key("JobFlowIds").start_array();
        for item_207 in var_205 {
            {
                array_206.value().string(item_207);
            }
        }
        array_206.finish();
    }
    {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
}

pub fn serialize_structure_set_visible_to_all_users_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetVisibleToAllUsersInput,
) {
    if let Some(var_208) = &input.job_flow_ids {
        let mut array_209 = object.key("JobFlowIds").start_array();
        for item_210 in var_208 {
            {
                array_209.value().string(item_210);
            }
        }
        array_209.finish();
    }
    {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
}

pub fn serialize_structure_start_notebook_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookExecutionInput,
) {
    if let Some(var_211) = &input.editor_id {
        object.key("EditorId").string(var_211);
    }
    if let Some(var_212) = &input.relative_path {
        object.key("RelativePath").string(var_212);
    }
    if let Some(var_213) = &input.notebook_execution_name {
        object.key("NotebookExecutionName").string(var_213);
    }
    if let Some(var_214) = &input.notebook_params {
        object.key("NotebookParams").string(var_214);
    }
    if let Some(var_215) = &input.execution_engine {
        let mut object_216 = object.key("ExecutionEngine").start_object();
        crate::json_ser::serialize_structure_execution_engine_config(&mut object_216, var_215);
        object_216.finish();
    }
    if let Some(var_217) = &input.service_role {
        object.key("ServiceRole").string(var_217);
    }
    if let Some(var_218) = &input.notebook_instance_security_group_id {
        object
            .key("NotebookInstanceSecurityGroupId")
            .string(var_218);
    }
    if let Some(var_219) = &input.tags {
        let mut array_220 = object.key("Tags").start_array();
        for item_221 in var_219 {
            {
                let mut object_222 = array_220.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_222, item_221);
                object_222.finish();
            }
        }
        array_220.finish();
    }
}

pub fn serialize_structure_stop_notebook_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookExecutionInput,
) {
    if let Some(var_223) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_223);
    }
}

pub fn serialize_structure_terminate_job_flows_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateJobFlowsInput,
) {
    if let Some(var_224) = &input.job_flow_ids {
        let mut array_225 = object.key("JobFlowIds").start_array();
        for item_226 in var_224 {
            {
                array_225.value().string(item_226);
            }
        }
        array_225.finish();
    }
}

pub fn serialize_structure_update_studio_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioInput,
) {
    if let Some(var_227) = &input.studio_id {
        object.key("StudioId").string(var_227);
    }
    if let Some(var_228) = &input.name {
        object.key("Name").string(var_228);
    }
    if let Some(var_229) = &input.description {
        object.key("Description").string(var_229);
    }
    if let Some(var_230) = &input.subnet_ids {
        let mut array_231 = object.key("SubnetIds").start_array();
        for item_232 in var_230 {
            {
                array_231.value().string(item_232);
            }
        }
        array_231.finish();
    }
    if let Some(var_233) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_233);
    }
}

pub fn serialize_structure_update_studio_session_mapping_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioSessionMappingInput,
) {
    if let Some(var_234) = &input.studio_id {
        object.key("StudioId").string(var_234);
    }
    if let Some(var_235) = &input.identity_id {
        object.key("IdentityId").string(var_235);
    }
    if let Some(var_236) = &input.identity_name {
        object.key("IdentityName").string(var_236);
    }
    if let Some(var_237) = &input.identity_type {
        object.key("IdentityType").string(var_237.as_str());
    }
    if let Some(var_238) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_238);
    }
}

pub fn serialize_structure_instance_fleet_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetConfig,
) {
    if let Some(var_239) = &input.name {
        object.key("Name").string(var_239);
    }
    if let Some(var_240) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_240.as_str());
    }
    if let Some(var_241) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_241).into()),
        );
    }
    if let Some(var_242) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_242).into()),
        );
    }
    if let Some(var_243) = &input.instance_type_configs {
        let mut array_244 = object.key("InstanceTypeConfigs").start_array();
        for item_245 in var_243 {
            {
                let mut object_246 = array_244.value().start_object();
                crate::json_ser::serialize_structure_instance_type_config(
                    &mut object_246,
                    item_245,
                );
                object_246.finish();
            }
        }
        array_244.finish();
    }
    if let Some(var_247) = &input.launch_specifications {
        let mut object_248 = object.key("LaunchSpecifications").start_object();
        crate::json_ser::serialize_structure_instance_fleet_provisioning_specifications(
            &mut object_248,
            var_247,
        );
        object_248.finish();
    }
}

pub fn serialize_structure_instance_group_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupConfig,
) {
    if let Some(var_249) = &input.name {
        object.key("Name").string(var_249);
    }
    if let Some(var_250) = &input.market {
        object.key("Market").string(var_250.as_str());
    }
    if let Some(var_251) = &input.instance_role {
        object.key("InstanceRole").string(var_251.as_str());
    }
    if let Some(var_252) = &input.bid_price {
        object.key("BidPrice").string(var_252);
    }
    if let Some(var_253) = &input.instance_type {
        object.key("InstanceType").string(var_253);
    }
    if let Some(var_254) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_254).into()),
        );
    }
    if let Some(var_255) = &input.configurations {
        let mut array_256 = object.key("Configurations").start_array();
        for item_257 in var_255 {
            {
                let mut object_258 = array_256.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_258, item_257);
                object_258.finish();
            }
        }
        array_256.finish();
    }
    if let Some(var_259) = &input.ebs_configuration {
        let mut object_260 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_ebs_configuration(&mut object_260, var_259);
        object_260.finish();
    }
    if let Some(var_261) = &input.auto_scaling_policy {
        let mut object_262 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_auto_scaling_policy(&mut object_262, var_261);
        object_262.finish();
    }
    if let Some(var_263) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_263);
    }
}

pub fn serialize_structure_step_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepConfig,
) {
    if let Some(var_264) = &input.name {
        object.key("Name").string(var_264);
    }
    if let Some(var_265) = &input.action_on_failure {
        object.key("ActionOnFailure").string(var_265.as_str());
    }
    if let Some(var_266) = &input.hadoop_jar_step {
        let mut object_267 = object.key("HadoopJarStep").start_object();
        crate::json_ser::serialize_structure_hadoop_jar_step_config(&mut object_267, var_266);
        object_267.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_268) = &input.key {
        object.key("Key").string(var_268);
    }
    if let Some(var_269) = &input.value {
        object.key("Value").string(var_269);
    }
}

pub fn serialize_structure_release_label_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReleaseLabelFilter,
) {
    if let Some(var_270) = &input.prefix {
        object.key("Prefix").string(var_270);
    }
    if let Some(var_271) = &input.application {
        object.key("Application").string(var_271);
    }
}

pub fn serialize_structure_instance_fleet_modify_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetModifyConfig,
) {
    if let Some(var_272) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_272);
    }
    if let Some(var_273) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_273).into()),
        );
    }
    if let Some(var_274) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_274).into()),
        );
    }
}

pub fn serialize_structure_instance_group_modify_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupModifyConfig,
) {
    if let Some(var_275) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_275);
    }
    if let Some(var_276) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_276).into()),
        );
    }
    if let Some(var_277) = &input.ec2_instance_ids_to_terminate {
        let mut array_278 = object.key("EC2InstanceIdsToTerminate").start_array();
        for item_279 in var_277 {
            {
                array_278.value().string(item_279);
            }
        }
        array_278.finish();
    }
    if let Some(var_280) = &input.shrink_policy {
        let mut object_281 = object.key("ShrinkPolicy").start_object();
        crate::json_ser::serialize_structure_shrink_policy(&mut object_281, var_280);
        object_281.finish();
    }
    if let Some(var_282) = &input.configurations {
        let mut array_283 = object.key("Configurations").start_array();
        for item_284 in var_282 {
            {
                let mut object_285 = array_283.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_285, item_284);
                object_285.finish();
            }
        }
        array_283.finish();
    }
}

pub fn serialize_structure_auto_scaling_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingPolicy,
) {
    if let Some(var_286) = &input.constraints {
        let mut object_287 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_scaling_constraints(&mut object_287, var_286);
        object_287.finish();
    }
    if let Some(var_288) = &input.rules {
        let mut array_289 = object.key("Rules").start_array();
        for item_290 in var_288 {
            {
                let mut object_291 = array_289.value().start_object();
                crate::json_ser::serialize_structure_scaling_rule(&mut object_291, item_290);
                object_291.finish();
            }
        }
        array_289.finish();
    }
}

pub fn serialize_structure_auto_termination_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoTerminationPolicy,
) {
    if input.idle_timeout != 0 {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.idle_timeout).into()),
        );
    }
}

pub fn serialize_structure_block_public_access_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockPublicAccessConfiguration,
) {
    {
        object
            .key("BlockPublicSecurityGroupRules")
            .boolean(input.block_public_security_group_rules);
    }
    if let Some(var_292) = &input.permitted_public_security_group_rule_ranges {
        let mut array_293 = object
            .key("PermittedPublicSecurityGroupRuleRanges")
            .start_array();
        for item_294 in var_292 {
            {
                let mut object_295 = array_293.value().start_object();
                crate::json_ser::serialize_structure_port_range(&mut object_295, item_294);
                object_295.finish();
            }
        }
        array_293.finish();
    }
    if let Some(var_296) = &input.classification {
        object.key("Classification").string(var_296);
    }
    if let Some(var_297) = &input.configurations {
        let mut array_298 = object.key("Configurations").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_300, item_299);
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.properties {
        let mut object_302 = object.key("Properties").start_object();
        for (key_303, value_304) in var_301 {
            {
                object_302.key(key_303).string(value_304);
            }
        }
        object_302.finish();
    }
}

pub fn serialize_structure_managed_scaling_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedScalingPolicy,
) {
    if let Some(var_305) = &input.compute_limits {
        let mut object_306 = object.key("ComputeLimits").start_object();
        crate::json_ser::serialize_structure_compute_limits(&mut object_306, var_305);
        object_306.finish();
    }
}

pub fn serialize_structure_job_flow_instances_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobFlowInstancesConfig,
) {
    if let Some(var_307) = &input.master_instance_type {
        object.key("MasterInstanceType").string(var_307);
    }
    if let Some(var_308) = &input.slave_instance_type {
        object.key("SlaveInstanceType").string(var_308);
    }
    if let Some(var_309) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_309).into()),
        );
    }
    if let Some(var_310) = &input.instance_groups {
        let mut array_311 = object.key("InstanceGroups").start_array();
        for item_312 in var_310 {
            {
                let mut object_313 = array_311.value().start_object();
                crate::json_ser::serialize_structure_instance_group_config(
                    &mut object_313,
                    item_312,
                );
                object_313.finish();
            }
        }
        array_311.finish();
    }
    if let Some(var_314) = &input.instance_fleets {
        let mut array_315 = object.key("InstanceFleets").start_array();
        for item_316 in var_314 {
            {
                let mut object_317 = array_315.value().start_object();
                crate::json_ser::serialize_structure_instance_fleet_config(
                    &mut object_317,
                    item_316,
                );
                object_317.finish();
            }
        }
        array_315.finish();
    }
    if let Some(var_318) = &input.ec2_key_name {
        object.key("Ec2KeyName").string(var_318);
    }
    if let Some(var_319) = &input.placement {
        let mut object_320 = object.key("Placement").start_object();
        crate::json_ser::serialize_structure_placement_type(&mut object_320, var_319);
        object_320.finish();
    }
    if input.keep_job_flow_alive_when_no_steps {
        object
            .key("KeepJobFlowAliveWhenNoSteps")
            .boolean(input.keep_job_flow_alive_when_no_steps);
    }
    if input.termination_protected {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
    if let Some(var_321) = &input.hadoop_version {
        object.key("HadoopVersion").string(var_321);
    }
    if let Some(var_322) = &input.ec2_subnet_id {
        object.key("Ec2SubnetId").string(var_322);
    }
    if let Some(var_323) = &input.ec2_subnet_ids {
        let mut array_324 = object.key("Ec2SubnetIds").start_array();
        for item_325 in var_323 {
            {
                array_324.value().string(item_325);
            }
        }
        array_324.finish();
    }
    if let Some(var_326) = &input.emr_managed_master_security_group {
        object.key("EmrManagedMasterSecurityGroup").string(var_326);
    }
    if let Some(var_327) = &input.emr_managed_slave_security_group {
        object.key("EmrManagedSlaveSecurityGroup").string(var_327);
    }
    if let Some(var_328) = &input.service_access_security_group {
        object.key("ServiceAccessSecurityGroup").string(var_328);
    }
    if let Some(var_329) = &input.additional_master_security_groups {
        let mut array_330 = object.key("AdditionalMasterSecurityGroups").start_array();
        for item_331 in var_329 {
            {
                array_330.value().string(item_331);
            }
        }
        array_330.finish();
    }
    if let Some(var_332) = &input.additional_slave_security_groups {
        let mut array_333 = object.key("AdditionalSlaveSecurityGroups").start_array();
        for item_334 in var_332 {
            {
                array_333.value().string(item_334);
            }
        }
        array_333.finish();
    }
}

pub fn serialize_structure_bootstrap_action_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BootstrapActionConfig,
) {
    if let Some(var_335) = &input.name {
        object.key("Name").string(var_335);
    }
    if let Some(var_336) = &input.script_bootstrap_action {
        let mut object_337 = object.key("ScriptBootstrapAction").start_object();
        crate::json_ser::serialize_structure_script_bootstrap_action_config(
            &mut object_337,
            var_336,
        );
        object_337.finish();
    }
}

pub fn serialize_structure_supported_product_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SupportedProductConfig,
) {
    if let Some(var_338) = &input.name {
        object.key("Name").string(var_338);
    }
    if let Some(var_339) = &input.args {
        let mut array_340 = object.key("Args").start_array();
        for item_341 in var_339 {
            {
                array_340.value().string(item_341);
            }
        }
        array_340.finish();
    }
}

pub fn serialize_structure_application(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Application,
) {
    if let Some(var_342) = &input.name {
        object.key("Name").string(var_342);
    }
    if let Some(var_343) = &input.version {
        object.key("Version").string(var_343);
    }
    if let Some(var_344) = &input.args {
        let mut array_345 = object.key("Args").start_array();
        for item_346 in var_344 {
            {
                array_345.value().string(item_346);
            }
        }
        array_345.finish();
    }
    if let Some(var_347) = &input.additional_info {
        let mut object_348 = object.key("AdditionalInfo").start_object();
        for (key_349, value_350) in var_347 {
            {
                object_348.key(key_349).string(value_350);
            }
        }
        object_348.finish();
    }
}

pub fn serialize_structure_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Configuration,
) {
    if let Some(var_351) = &input.classification {
        object.key("Classification").string(var_351);
    }
    if let Some(var_352) = &input.configurations {
        let mut array_353 = object.key("Configurations").start_array();
        for item_354 in var_352 {
            {
                let mut object_355 = array_353.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_355, item_354);
                object_355.finish();
            }
        }
        array_353.finish();
    }
    if let Some(var_356) = &input.properties {
        let mut object_357 = object.key("Properties").start_object();
        for (key_358, value_359) in var_356 {
            {
                object_357.key(key_358).string(value_359);
            }
        }
        object_357.finish();
    }
}

pub fn serialize_structure_kerberos_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KerberosAttributes,
) {
    if let Some(var_360) = &input.realm {
        object.key("Realm").string(var_360);
    }
    if let Some(var_361) = &input.kdc_admin_password {
        object.key("KdcAdminPassword").string(var_361);
    }
    if let Some(var_362) = &input.cross_realm_trust_principal_password {
        object
            .key("CrossRealmTrustPrincipalPassword")
            .string(var_362);
    }
    if let Some(var_363) = &input.ad_domain_join_user {
        object.key("ADDomainJoinUser").string(var_363);
    }
    if let Some(var_364) = &input.ad_domain_join_password {
        object.key("ADDomainJoinPassword").string(var_364);
    }
}

pub fn serialize_structure_placement_group_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementGroupConfig,
) {
    if let Some(var_365) = &input.instance_role {
        object.key("InstanceRole").string(var_365.as_str());
    }
    if let Some(var_366) = &input.placement_strategy {
        object.key("PlacementStrategy").string(var_366.as_str());
    }
}

pub fn serialize_structure_execution_engine_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionEngineConfig,
) {
    if let Some(var_367) = &input.id {
        object.key("Id").string(var_367);
    }
    if let Some(var_368) = &input.r#type {
        object.key("Type").string(var_368.as_str());
    }
    if let Some(var_369) = &input.master_instance_security_group_id {
        object.key("MasterInstanceSecurityGroupId").string(var_369);
    }
}

pub fn serialize_structure_instance_type_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceTypeConfig,
) {
    if let Some(var_370) = &input.instance_type {
        object.key("InstanceType").string(var_370);
    }
    if let Some(var_371) = &input.weighted_capacity {
        object.key("WeightedCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_371).into()),
        );
    }
    if let Some(var_372) = &input.bid_price {
        object.key("BidPrice").string(var_372);
    }
    if let Some(var_373) = &input.bid_price_as_percentage_of_on_demand_price {
        object.key("BidPriceAsPercentageOfOnDemandPrice").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_373).into()),
        );
    }
    if let Some(var_374) = &input.ebs_configuration {
        let mut object_375 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_ebs_configuration(&mut object_375, var_374);
        object_375.finish();
    }
    if let Some(var_376) = &input.configurations {
        let mut array_377 = object.key("Configurations").start_array();
        for item_378 in var_376 {
            {
                let mut object_379 = array_377.value().start_object();
                crate::json_ser::serialize_structure_configuration(&mut object_379, item_378);
                object_379.finish();
            }
        }
        array_377.finish();
    }
    if let Some(var_380) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_380);
    }
}

pub fn serialize_structure_instance_fleet_provisioning_specifications(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetProvisioningSpecifications,
) {
    if let Some(var_381) = &input.spot_specification {
        let mut object_382 = object.key("SpotSpecification").start_object();
        crate::json_ser::serialize_structure_spot_provisioning_specification(
            &mut object_382,
            var_381,
        );
        object_382.finish();
    }
    if let Some(var_383) = &input.on_demand_specification {
        let mut object_384 = object.key("OnDemandSpecification").start_object();
        crate::json_ser::serialize_structure_on_demand_provisioning_specification(
            &mut object_384,
            var_383,
        );
        object_384.finish();
    }
}

pub fn serialize_structure_ebs_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsConfiguration,
) {
    if let Some(var_385) = &input.ebs_block_device_configs {
        let mut array_386 = object.key("EbsBlockDeviceConfigs").start_array();
        for item_387 in var_385 {
            {
                let mut object_388 = array_386.value().start_object();
                crate::json_ser::serialize_structure_ebs_block_device_config(
                    &mut object_388,
                    item_387,
                );
                object_388.finish();
            }
        }
        array_386.finish();
    }
    if let Some(var_389) = &input.ebs_optimized {
        object.key("EbsOptimized").boolean(*var_389);
    }
}

pub fn serialize_structure_hadoop_jar_step_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HadoopJarStepConfig,
) {
    if let Some(var_390) = &input.properties {
        let mut array_391 = object.key("Properties").start_array();
        for item_392 in var_390 {
            {
                let mut object_393 = array_391.value().start_object();
                crate::json_ser::serialize_structure_key_value(&mut object_393, item_392);
                object_393.finish();
            }
        }
        array_391.finish();
    }
    if let Some(var_394) = &input.jar {
        object.key("Jar").string(var_394);
    }
    if let Some(var_395) = &input.main_class {
        object.key("MainClass").string(var_395);
    }
    if let Some(var_396) = &input.args {
        let mut array_397 = object.key("Args").start_array();
        for item_398 in var_396 {
            {
                array_397.value().string(item_398);
            }
        }
        array_397.finish();
    }
}

pub fn serialize_structure_shrink_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShrinkPolicy,
) {
    if let Some(var_399) = &input.decommission_timeout {
        object.key("DecommissionTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_399).into()),
        );
    }
    if let Some(var_400) = &input.instance_resize_policy {
        let mut object_401 = object.key("InstanceResizePolicy").start_object();
        crate::json_ser::serialize_structure_instance_resize_policy(&mut object_401, var_400);
        object_401.finish();
    }
}

pub fn serialize_structure_scaling_constraints(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingConstraints,
) {
    if let Some(var_402) = &input.min_capacity {
        object.key("MinCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_402).into()),
        );
    }
    if let Some(var_403) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_403).into()),
        );
    }
}

pub fn serialize_structure_scaling_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingRule,
) {
    if let Some(var_404) = &input.name {
        object.key("Name").string(var_404);
    }
    if let Some(var_405) = &input.description {
        object.key("Description").string(var_405);
    }
    if let Some(var_406) = &input.action {
        let mut object_407 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_scaling_action(&mut object_407, var_406);
        object_407.finish();
    }
    if let Some(var_408) = &input.trigger {
        let mut object_409 = object.key("Trigger").start_object();
        crate::json_ser::serialize_structure_scaling_trigger(&mut object_409, var_408);
        object_409.finish();
    }
}

pub fn serialize_structure_port_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) {
    if let Some(var_410) = &input.min_range {
        object.key("MinRange").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_410).into()),
        );
    }
    if let Some(var_411) = &input.max_range {
        object.key("MaxRange").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_411).into()),
        );
    }
}

pub fn serialize_structure_compute_limits(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeLimits,
) {
    if let Some(var_412) = &input.unit_type {
        object.key("UnitType").string(var_412.as_str());
    }
    if let Some(var_413) = &input.minimum_capacity_units {
        object.key("MinimumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_413).into()),
        );
    }
    if let Some(var_414) = &input.maximum_capacity_units {
        object.key("MaximumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_414).into()),
        );
    }
    if let Some(var_415) = &input.maximum_on_demand_capacity_units {
        object.key("MaximumOnDemandCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_415).into()),
        );
    }
    if let Some(var_416) = &input.maximum_core_capacity_units {
        object.key("MaximumCoreCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_416).into()),
        );
    }
}

pub fn serialize_structure_placement_type(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementType,
) {
    if let Some(var_417) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_417);
    }
    if let Some(var_418) = &input.availability_zones {
        let mut array_419 = object.key("AvailabilityZones").start_array();
        for item_420 in var_418 {
            {
                array_419.value().string(item_420);
            }
        }
        array_419.finish();
    }
}

pub fn serialize_structure_script_bootstrap_action_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScriptBootstrapActionConfig,
) {
    if let Some(var_421) = &input.path {
        object.key("Path").string(var_421);
    }
    if let Some(var_422) = &input.args {
        let mut array_423 = object.key("Args").start_array();
        for item_424 in var_422 {
            {
                array_423.value().string(item_424);
            }
        }
        array_423.finish();
    }
}

pub fn serialize_structure_spot_provisioning_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpotProvisioningSpecification,
) {
    if let Some(var_425) = &input.timeout_duration_minutes {
        object.key("TimeoutDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_425).into()),
        );
    }
    if let Some(var_426) = &input.timeout_action {
        object.key("TimeoutAction").string(var_426.as_str());
    }
    if let Some(var_427) = &input.block_duration_minutes {
        object.key("BlockDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_427).into()),
        );
    }
    if let Some(var_428) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_428.as_str());
    }
}

pub fn serialize_structure_on_demand_provisioning_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandProvisioningSpecification,
) {
    if let Some(var_429) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_429.as_str());
    }
    if let Some(var_430) = &input.capacity_reservation_options {
        let mut object_431 = object.key("CapacityReservationOptions").start_object();
        crate::json_ser::serialize_structure_on_demand_capacity_reservation_options(
            &mut object_431,
            var_430,
        );
        object_431.finish();
    }
}

pub fn serialize_structure_ebs_block_device_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsBlockDeviceConfig,
) {
    if let Some(var_432) = &input.volume_specification {
        let mut object_433 = object.key("VolumeSpecification").start_object();
        crate::json_ser::serialize_structure_volume_specification(&mut object_433, var_432);
        object_433.finish();
    }
    if let Some(var_434) = &input.volumes_per_instance {
        object.key("VolumesPerInstance").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_434).into()),
        );
    }
}

pub fn serialize_structure_key_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValue,
) {
    if let Some(var_435) = &input.key {
        object.key("Key").string(var_435);
    }
    if let Some(var_436) = &input.value {
        object.key("Value").string(var_436);
    }
}

pub fn serialize_structure_instance_resize_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceResizePolicy,
) {
    if let Some(var_437) = &input.instances_to_terminate {
        let mut array_438 = object.key("InstancesToTerminate").start_array();
        for item_439 in var_437 {
            {
                array_438.value().string(item_439);
            }
        }
        array_438.finish();
    }
    if let Some(var_440) = &input.instances_to_protect {
        let mut array_441 = object.key("InstancesToProtect").start_array();
        for item_442 in var_440 {
            {
                array_441.value().string(item_442);
            }
        }
        array_441.finish();
    }
    if let Some(var_443) = &input.instance_termination_timeout {
        object.key("InstanceTerminationTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_443).into()),
        );
    }
}

pub fn serialize_structure_scaling_action(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingAction,
) {
    if let Some(var_444) = &input.market {
        object.key("Market").string(var_444.as_str());
    }
    if let Some(var_445) = &input.simple_scaling_policy_configuration {
        let mut object_446 = object
            .key("SimpleScalingPolicyConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_simple_scaling_policy_configuration(
            &mut object_446,
            var_445,
        );
        object_446.finish();
    }
}

pub fn serialize_structure_scaling_trigger(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingTrigger,
) {
    if let Some(var_447) = &input.cloud_watch_alarm_definition {
        let mut object_448 = object.key("CloudWatchAlarmDefinition").start_object();
        crate::json_ser::serialize_structure_cloud_watch_alarm_definition(&mut object_448, var_447);
        object_448.finish();
    }
}

pub fn serialize_structure_on_demand_capacity_reservation_options(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandCapacityReservationOptions,
) {
    if let Some(var_449) = &input.usage_strategy {
        object.key("UsageStrategy").string(var_449.as_str());
    }
    if let Some(var_450) = &input.capacity_reservation_preference {
        object
            .key("CapacityReservationPreference")
            .string(var_450.as_str());
    }
    if let Some(var_451) = &input.capacity_reservation_resource_group_arn {
        object
            .key("CapacityReservationResourceGroupArn")
            .string(var_451);
    }
}

pub fn serialize_structure_volume_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeSpecification,
) {
    if let Some(var_452) = &input.volume_type {
        object.key("VolumeType").string(var_452);
    }
    if let Some(var_453) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_453).into()),
        );
    }
    if let Some(var_454) = &input.size_in_gb {
        object.key("SizeInGB").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_454).into()),
        );
    }
}

pub fn serialize_structure_simple_scaling_policy_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleScalingPolicyConfiguration,
) {
    if let Some(var_455) = &input.adjustment_type {
        object.key("AdjustmentType").string(var_455.as_str());
    }
    if let Some(var_456) = &input.scaling_adjustment {
        object.key("ScalingAdjustment").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_456).into()),
        );
    }
    if let Some(var_457) = &input.cool_down {
        object.key("CoolDown").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_457).into()),
        );
    }
}

pub fn serialize_structure_cloud_watch_alarm_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchAlarmDefinition,
) {
    if let Some(var_458) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_458.as_str());
    }
    if let Some(var_459) = &input.evaluation_periods {
        object.key("EvaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_459).into()),
        );
    }
    if let Some(var_460) = &input.metric_name {
        object.key("MetricName").string(var_460);
    }
    if let Some(var_461) = &input.namespace {
        object.key("Namespace").string(var_461);
    }
    if let Some(var_462) = &input.period {
        object.key("Period").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_462).into()),
        );
    }
    if let Some(var_463) = &input.statistic {
        object.key("Statistic").string(var_463.as_str());
    }
    if let Some(var_464) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_464).into()),
        );
    }
    if let Some(var_465) = &input.unit {
        object.key("Unit").string(var_465.as_str());
    }
    if let Some(var_466) = &input.dimensions {
        let mut array_467 = object.key("Dimensions").start_array();
        for item_468 in var_466 {
            {
                let mut object_469 = array_467.value().start_object();
                crate::json_ser::serialize_structure_metric_dimension(&mut object_469, item_468);
                object_469.finish();
            }
        }
        array_467.finish();
    }
}

pub fn serialize_structure_metric_dimension(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) {
    if let Some(var_470) = &input.key {
        object.key("Key").string(var_470);
    }
    if let Some(var_471) = &input.value {
        object.key("Value").string(var_471);
    }
}
