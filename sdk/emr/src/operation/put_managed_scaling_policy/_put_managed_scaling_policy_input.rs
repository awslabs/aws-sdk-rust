// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutManagedScalingPolicyInput {
    /// <p>Specifies the ID of an Amazon EMR cluster where the managed scaling policy is attached. </p>
    pub cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the constraints for the managed scaling policy. </p>
    pub managed_scaling_policy: ::std::option::Option<crate::types::ManagedScalingPolicy>,
}
impl PutManagedScalingPolicyInput {
    /// <p>Specifies the ID of an Amazon EMR cluster where the managed scaling policy is attached. </p>
    pub fn cluster_id(&self) -> ::std::option::Option<&str> {
        self.cluster_id.as_deref()
    }
    /// <p>Specifies the constraints for the managed scaling policy. </p>
    pub fn managed_scaling_policy(&self) -> ::std::option::Option<&crate::types::ManagedScalingPolicy> {
        self.managed_scaling_policy.as_ref()
    }
}
impl PutManagedScalingPolicyInput {
    /// Creates a new builder-style object to manufacture [`PutManagedScalingPolicyInput`](crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyInput).
    pub fn builder() -> crate::operation::put_managed_scaling_policy::builders::PutManagedScalingPolicyInputBuilder {
        crate::operation::put_managed_scaling_policy::builders::PutManagedScalingPolicyInputBuilder::default()
    }
}

/// A builder for [`PutManagedScalingPolicyInput`](crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutManagedScalingPolicyInputBuilder {
    pub(crate) cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) managed_scaling_policy: ::std::option::Option<crate::types::ManagedScalingPolicy>,
}
impl PutManagedScalingPolicyInputBuilder {
    /// <p>Specifies the ID of an Amazon EMR cluster where the managed scaling policy is attached. </p>
    /// This field is required.
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of an Amazon EMR cluster where the managed scaling policy is attached. </p>
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// <p>Specifies the ID of an Amazon EMR cluster where the managed scaling policy is attached. </p>
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_id
    }
    /// <p>Specifies the constraints for the managed scaling policy. </p>
    /// This field is required.
    pub fn managed_scaling_policy(mut self, input: crate::types::ManagedScalingPolicy) -> Self {
        self.managed_scaling_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the constraints for the managed scaling policy. </p>
    pub fn set_managed_scaling_policy(mut self, input: ::std::option::Option<crate::types::ManagedScalingPolicy>) -> Self {
        self.managed_scaling_policy = input;
        self
    }
    /// <p>Specifies the constraints for the managed scaling policy. </p>
    pub fn get_managed_scaling_policy(&self) -> &::std::option::Option<crate::types::ManagedScalingPolicy> {
        &self.managed_scaling_policy
    }
    /// Consumes the builder and constructs a [`PutManagedScalingPolicyInput`](crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_managed_scaling_policy::PutManagedScalingPolicyInput {
            cluster_id: self.cluster_id,
            managed_scaling_policy: self.managed_scaling_policy,
        })
    }
}
