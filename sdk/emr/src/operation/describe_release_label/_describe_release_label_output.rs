// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeReleaseLabelOutput {
    /// <p>The target release label described in the response.</p>
    #[doc(hidden)]
    pub release_label: std::option::Option<std::string::String>,
    /// <p>The list of applications available for the target release label. <code>Name</code> is the name of the application. <code>Version</code> is the concise version of the application.</p>
    #[doc(hidden)]
    pub applications: std::option::Option<std::vec::Vec<crate::types::SimplifiedApplication>>,
    /// <p>The pagination token. Reserved for future use. Currently set to null.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of available Amazon Linux release versions for an Amazon EMR release. Contains a Label field that is formatted as shown in <a href="https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-al2.html"> <i>Amazon Linux 2 Release Notes</i> </a>. For example, <a href="https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-20220218.html">2.0.20220218.1</a>.</p>
    #[doc(hidden)]
    pub available_os_releases: std::option::Option<std::vec::Vec<crate::types::OsRelease>>,
    _request_id: Option<String>,
}
impl DescribeReleaseLabelOutput {
    /// <p>The target release label described in the response.</p>
    pub fn release_label(&self) -> std::option::Option<&str> {
        self.release_label.as_deref()
    }
    /// <p>The list of applications available for the target release label. <code>Name</code> is the name of the application. <code>Version</code> is the concise version of the application.</p>
    pub fn applications(&self) -> std::option::Option<&[crate::types::SimplifiedApplication]> {
        self.applications.as_deref()
    }
    /// <p>The pagination token. Reserved for future use. Currently set to null.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of available Amazon Linux release versions for an Amazon EMR release. Contains a Label field that is formatted as shown in <a href="https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-al2.html"> <i>Amazon Linux 2 Release Notes</i> </a>. For example, <a href="https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-20220218.html">2.0.20220218.1</a>.</p>
    pub fn available_os_releases(&self) -> std::option::Option<&[crate::types::OsRelease]> {
        self.available_os_releases.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeReleaseLabelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeReleaseLabelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReleaseLabelOutput`](crate::operation::describe_release_label::DescribeReleaseLabelOutput).
    pub fn builder(
    ) -> crate::operation::describe_release_label::builders::DescribeReleaseLabelOutputBuilder {
        crate::operation::describe_release_label::builders::DescribeReleaseLabelOutputBuilder::default()
    }
}

/// A builder for [`DescribeReleaseLabelOutput`](crate::operation::describe_release_label::DescribeReleaseLabelOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeReleaseLabelOutputBuilder {
    pub(crate) release_label: std::option::Option<std::string::String>,
    pub(crate) applications:
        std::option::Option<std::vec::Vec<crate::types::SimplifiedApplication>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) available_os_releases: std::option::Option<std::vec::Vec<crate::types::OsRelease>>,
    _request_id: Option<String>,
}
impl DescribeReleaseLabelOutputBuilder {
    /// <p>The target release label described in the response.</p>
    pub fn release_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.release_label = Some(input.into());
        self
    }
    /// <p>The target release label described in the response.</p>
    pub fn set_release_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.release_label = input;
        self
    }
    /// Appends an item to `applications`.
    ///
    /// To override the contents of this collection use [`set_applications`](Self::set_applications).
    ///
    /// <p>The list of applications available for the target release label. <code>Name</code> is the name of the application. <code>Version</code> is the concise version of the application.</p>
    pub fn applications(mut self, input: crate::types::SimplifiedApplication) -> Self {
        let mut v = self.applications.unwrap_or_default();
        v.push(input);
        self.applications = Some(v);
        self
    }
    /// <p>The list of applications available for the target release label. <code>Name</code> is the name of the application. <code>Version</code> is the concise version of the application.</p>
    pub fn set_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SimplifiedApplication>>,
    ) -> Self {
        self.applications = input;
        self
    }
    /// <p>The pagination token. Reserved for future use. Currently set to null.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token. Reserved for future use. Currently set to null.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `available_os_releases`.
    ///
    /// To override the contents of this collection use [`set_available_os_releases`](Self::set_available_os_releases).
    ///
    /// <p>The list of available Amazon Linux release versions for an Amazon EMR release. Contains a Label field that is formatted as shown in <a href="https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-al2.html"> <i>Amazon Linux 2 Release Notes</i> </a>. For example, <a href="https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-20220218.html">2.0.20220218.1</a>.</p>
    pub fn available_os_releases(mut self, input: crate::types::OsRelease) -> Self {
        let mut v = self.available_os_releases.unwrap_or_default();
        v.push(input);
        self.available_os_releases = Some(v);
        self
    }
    /// <p>The list of available Amazon Linux release versions for an Amazon EMR release. Contains a Label field that is formatted as shown in <a href="https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-al2.html"> <i>Amazon Linux 2 Release Notes</i> </a>. For example, <a href="https://docs.aws.amazon.com/AL2/latest/relnotes/relnotes-20220218.html">2.0.20220218.1</a>.</p>
    pub fn set_available_os_releases(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OsRelease>>,
    ) -> Self {
        self.available_os_releases = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeReleaseLabelOutput`](crate::operation::describe_release_label::DescribeReleaseLabelOutput).
    pub fn build(self) -> crate::operation::describe_release_label::DescribeReleaseLabelOutput {
        crate::operation::describe_release_label::DescribeReleaseLabelOutput {
            release_label: self.release_label,
            applications: self.applications,
            next_token: self.next_token,
            available_os_releases: self.available_os_releases,
            _request_id: self._request_id,
        }
    }
}
