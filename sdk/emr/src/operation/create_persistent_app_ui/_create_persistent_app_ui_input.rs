// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePersistentAppUiInput {
    /// <p>The unique Amazon Resource Name (ARN) of the target resource.</p>
    pub target_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The EMR containers configuration.</p>
    pub emr_containers_config: ::std::option::Option<crate::types::EmrContainersConfig>,
    /// <p>Tags for the persistent application user interface.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The cross reference for the persistent application user interface.</p>
    pub x_referer: ::std::option::Option<::std::string::String>,
    /// <p>The profiler type for the persistent application user interface.</p>
    pub profiler_type: ::std::option::Option<crate::types::ProfilerType>,
}
impl CreatePersistentAppUiInput {
    /// <p>The unique Amazon Resource Name (ARN) of the target resource.</p>
    pub fn target_resource_arn(&self) -> ::std::option::Option<&str> {
        self.target_resource_arn.as_deref()
    }
    /// <p>The EMR containers configuration.</p>
    pub fn emr_containers_config(&self) -> ::std::option::Option<&crate::types::EmrContainersConfig> {
        self.emr_containers_config.as_ref()
    }
    /// <p>Tags for the persistent application user interface.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The cross reference for the persistent application user interface.</p>
    pub fn x_referer(&self) -> ::std::option::Option<&str> {
        self.x_referer.as_deref()
    }
    /// <p>The profiler type for the persistent application user interface.</p>
    pub fn profiler_type(&self) -> ::std::option::Option<&crate::types::ProfilerType> {
        self.profiler_type.as_ref()
    }
}
impl CreatePersistentAppUiInput {
    /// Creates a new builder-style object to manufacture [`CreatePersistentAppUiInput`](crate::operation::create_persistent_app_ui::CreatePersistentAppUiInput).
    pub fn builder() -> crate::operation::create_persistent_app_ui::builders::CreatePersistentAppUiInputBuilder {
        crate::operation::create_persistent_app_ui::builders::CreatePersistentAppUiInputBuilder::default()
    }
}

/// A builder for [`CreatePersistentAppUiInput`](crate::operation::create_persistent_app_ui::CreatePersistentAppUiInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreatePersistentAppUiInputBuilder {
    pub(crate) target_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) emr_containers_config: ::std::option::Option<crate::types::EmrContainersConfig>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) x_referer: ::std::option::Option<::std::string::String>,
    pub(crate) profiler_type: ::std::option::Option<crate::types::ProfilerType>,
}
impl CreatePersistentAppUiInputBuilder {
    /// <p>The unique Amazon Resource Name (ARN) of the target resource.</p>
    /// This field is required.
    pub fn target_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the target resource.</p>
    pub fn set_target_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_resource_arn = input;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the target resource.</p>
    pub fn get_target_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_resource_arn
    }
    /// <p>The EMR containers configuration.</p>
    pub fn emr_containers_config(mut self, input: crate::types::EmrContainersConfig) -> Self {
        self.emr_containers_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The EMR containers configuration.</p>
    pub fn set_emr_containers_config(mut self, input: ::std::option::Option<crate::types::EmrContainersConfig>) -> Self {
        self.emr_containers_config = input;
        self
    }
    /// <p>The EMR containers configuration.</p>
    pub fn get_emr_containers_config(&self) -> &::std::option::Option<crate::types::EmrContainersConfig> {
        &self.emr_containers_config
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the persistent application user interface.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags for the persistent application user interface.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags for the persistent application user interface.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The cross reference for the persistent application user interface.</p>
    pub fn x_referer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.x_referer = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cross reference for the persistent application user interface.</p>
    pub fn set_x_referer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.x_referer = input;
        self
    }
    /// <p>The cross reference for the persistent application user interface.</p>
    pub fn get_x_referer(&self) -> &::std::option::Option<::std::string::String> {
        &self.x_referer
    }
    /// <p>The profiler type for the persistent application user interface.</p>
    pub fn profiler_type(mut self, input: crate::types::ProfilerType) -> Self {
        self.profiler_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The profiler type for the persistent application user interface.</p>
    pub fn set_profiler_type(mut self, input: ::std::option::Option<crate::types::ProfilerType>) -> Self {
        self.profiler_type = input;
        self
    }
    /// <p>The profiler type for the persistent application user interface.</p>
    pub fn get_profiler_type(&self) -> &::std::option::Option<crate::types::ProfilerType> {
        &self.profiler_type
    }
    /// Consumes the builder and constructs a [`CreatePersistentAppUiInput`](crate::operation::create_persistent_app_ui::CreatePersistentAppUiInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_persistent_app_ui::CreatePersistentAppUiInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_persistent_app_ui::CreatePersistentAppUiInput {
            target_resource_arn: self.target_resource_arn,
            emr_containers_config: self.emr_containers_config,
            tags: self.tags,
            x_referer: self.x_referer,
            profiler_type: self.profiler_type,
        })
    }
}
