// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_persistent_app_ui::_create_persistent_app_ui_output::CreatePersistentAppUiOutputBuilder;

pub use crate::operation::create_persistent_app_ui::_create_persistent_app_ui_input::CreatePersistentAppUiInputBuilder;

impl crate::operation::create_persistent_app_ui::builders::CreatePersistentAppUiInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_persistent_app_ui::CreatePersistentAppUiOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_persistent_app_ui::CreatePersistentAppUIError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_persistent_app_ui();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreatePersistentAppUI`.
///
/// <p>Creates a persistent application user interface.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreatePersistentAppUIFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_persistent_app_ui::builders::CreatePersistentAppUiInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_persistent_app_ui::CreatePersistentAppUiOutput,
        crate::operation::create_persistent_app_ui::CreatePersistentAppUIError,
    > for CreatePersistentAppUIFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_persistent_app_ui::CreatePersistentAppUiOutput,
            crate::operation::create_persistent_app_ui::CreatePersistentAppUIError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreatePersistentAppUIFluentBuilder {
    /// Creates a new `CreatePersistentAppUIFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreatePersistentAppUI as a reference.
    pub fn as_input(&self) -> &crate::operation::create_persistent_app_ui::builders::CreatePersistentAppUiInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_persistent_app_ui::CreatePersistentAppUiOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_persistent_app_ui::CreatePersistentAppUIError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_persistent_app_ui::CreatePersistentAppUI::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_persistent_app_ui::CreatePersistentAppUI::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_persistent_app_ui::CreatePersistentAppUiOutput,
        crate::operation::create_persistent_app_ui::CreatePersistentAppUIError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the target resource.</p>
    pub fn target_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target_resource_arn(input.into());
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the target resource.</p>
    pub fn set_target_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target_resource_arn(input);
        self
    }
    /// <p>The unique Amazon Resource Name (ARN) of the target resource.</p>
    pub fn get_target_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target_resource_arn()
    }
    /// <p>The EMR containers configuration.</p>
    pub fn emr_containers_config(mut self, input: crate::types::EmrContainersConfig) -> Self {
        self.inner = self.inner.emr_containers_config(input);
        self
    }
    /// <p>The EMR containers configuration.</p>
    pub fn set_emr_containers_config(mut self, input: ::std::option::Option<crate::types::EmrContainersConfig>) -> Self {
        self.inner = self.inner.set_emr_containers_config(input);
        self
    }
    /// <p>The EMR containers configuration.</p>
    pub fn get_emr_containers_config(&self) -> &::std::option::Option<crate::types::EmrContainersConfig> {
        self.inner.get_emr_containers_config()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags for the persistent application user interface.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Tags for the persistent application user interface.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Tags for the persistent application user interface.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>The cross reference for the persistent application user interface.</p>
    pub fn x_referer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.x_referer(input.into());
        self
    }
    /// <p>The cross reference for the persistent application user interface.</p>
    pub fn set_x_referer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_x_referer(input);
        self
    }
    /// <p>The cross reference for the persistent application user interface.</p>
    pub fn get_x_referer(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_x_referer()
    }
    /// <p>The profiler type for the persistent application user interface.</p>
    pub fn profiler_type(mut self, input: crate::types::ProfilerType) -> Self {
        self.inner = self.inner.profiler_type(input);
        self
    }
    /// <p>The profiler type for the persistent application user interface.</p>
    pub fn set_profiler_type(mut self, input: ::std::option::Option<crate::types::ProfilerType>) -> Self {
        self.inner = self.inner.set_profiler_type(input);
        self
    }
    /// <p>The profiler type for the persistent application user interface.</p>
    pub fn get_profiler_type(&self) -> &::std::option::Option<crate::types::ProfilerType> {
        self.inner.get_profiler_type()
    }
}
