// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_auto_scaling_policy::_put_auto_scaling_policy_output::PutAutoScalingPolicyOutputBuilder;

pub use crate::operation::put_auto_scaling_policy::_put_auto_scaling_policy_input::PutAutoScalingPolicyInputBuilder;

impl PutAutoScalingPolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_auto_scaling_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutAutoScalingPolicy`.
///
/// <p>Creates or updates an automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutAutoScalingPolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_auto_scaling_policy::builders::PutAutoScalingPolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyOutput,
        crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError,
    > for PutAutoScalingPolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyOutput,
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutAutoScalingPolicyFluentBuilder {
    /// Creates a new `PutAutoScalingPolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutAutoScalingPolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::put_auto_scaling_policy::builders::PutAutoScalingPolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_auto_scaling_policy::PutAutoScalingPolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_auto_scaling_policy::PutAutoScalingPolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyOutput,
        crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.</p>
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_id(input.into());
        self
    }
    /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.</p>
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_id(input);
        self
    }
    /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.</p>
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_id()
    }
    /// <p>Specifies the ID of the instance group to which the automatic scaling policy is applied.</p>
    pub fn instance_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_group_id(input.into());
        self
    }
    /// <p>Specifies the ID of the instance group to which the automatic scaling policy is applied.</p>
    pub fn set_instance_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_group_id(input);
        self
    }
    /// <p>Specifies the ID of the instance group to which the automatic scaling policy is applied.</p>
    pub fn get_instance_group_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_group_id()
    }
    /// <p>Specifies the definition of the automatic scaling policy.</p>
    pub fn auto_scaling_policy(mut self, input: crate::types::AutoScalingPolicy) -> Self {
        self.inner = self.inner.auto_scaling_policy(input);
        self
    }
    /// <p>Specifies the definition of the automatic scaling policy.</p>
    pub fn set_auto_scaling_policy(mut self, input: ::std::option::Option<crate::types::AutoScalingPolicy>) -> Self {
        self.inner = self.inner.set_auto_scaling_policy(input);
        self
    }
    /// <p>Specifies the definition of the automatic scaling policy.</p>
    pub fn get_auto_scaling_policy(&self) -> &::std::option::Option<crate::types::AutoScalingPolicy> {
        self.inner.get_auto_scaling_policy()
    }
}
