// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_auto_scaling_policy::_put_auto_scaling_policy_output::PutAutoScalingPolicyOutputBuilder;

pub use crate::operation::put_auto_scaling_policy::_put_auto_scaling_policy_input::PutAutoScalingPolicyInputBuilder;

/// Fluent builder constructing a request to `PutAutoScalingPolicy`.
///
/// <p>Creates or updates an automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutAutoScalingPolicyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_auto_scaling_policy::builders::PutAutoScalingPolicyInputBuilder,
}
impl PutAutoScalingPolicyFluentBuilder {
    /// Creates a new `PutAutoScalingPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_auto_scaling_policy::PutAutoScalingPolicyError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.</p>
    pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_id(input.into());
        self
    }
    /// <p>Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster.</p>
    pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_id(input);
        self
    }
    /// <p>Specifies the ID of the instance group to which the automatic scaling policy is applied.</p>
    pub fn instance_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_group_id(input.into());
        self
    }
    /// <p>Specifies the ID of the instance group to which the automatic scaling policy is applied.</p>
    pub fn set_instance_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_instance_group_id(input);
        self
    }
    /// <p>Specifies the definition of the automatic scaling policy.</p>
    pub fn auto_scaling_policy(mut self, input: crate::types::AutoScalingPolicy) -> Self {
        self.inner = self.inner.auto_scaling_policy(input);
        self
    }
    /// <p>Specifies the definition of the automatic scaling policy.</p>
    pub fn set_auto_scaling_policy(
        mut self,
        input: std::option::Option<crate::types::AutoScalingPolicy>,
    ) -> Self {
        self.inner = self.inner.set_auto_scaling_policy(input);
        self
    }
}
