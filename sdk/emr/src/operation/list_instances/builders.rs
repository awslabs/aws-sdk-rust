// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_instances::_list_instances_output::ListInstancesOutputBuilder;

pub use crate::operation::list_instances::_list_instances_input::ListInstancesInputBuilder;

/// Fluent builder constructing a request to `ListInstances`.
///
/// <p>Provides information for all active EC2 instances and EC2 instances terminated in the last 30 days, up to a maximum of 2,000. EC2 instances in any of the following states are considered active: AWAITING_FULFILLMENT, PROVISIONING, BOOTSTRAPPING, RUNNING.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListInstancesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_instances::builders::ListInstancesInputBuilder,
}
impl ListInstancesFluentBuilder {
    /// Creates a new `ListInstances`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_instances::ListInstances,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_instances::ListInstancesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_instances::ListInstancesOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_instances::ListInstancesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_instances::paginator::ListInstancesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_instances::paginator::ListInstancesPaginator {
        crate::operation::list_instances::paginator::ListInstancesPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The identifier of the cluster for which to list the instances.</p>
    pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_id(input.into());
        self
    }
    /// <p>The identifier of the cluster for which to list the instances.</p>
    pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_id(input);
        self
    }
    /// <p>The identifier of the instance group for which to list the instances.</p>
    pub fn instance_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_group_id(input.into());
        self
    }
    /// <p>The identifier of the instance group for which to list the instances.</p>
    pub fn set_instance_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_instance_group_id(input);
        self
    }
    /// Appends an item to `InstanceGroupTypes`.
    ///
    /// To override the contents of this collection use [`set_instance_group_types`](Self::set_instance_group_types).
    ///
    /// <p>The type of instance group for which to list the instances.</p>
    pub fn instance_group_types(mut self, input: crate::types::InstanceGroupType) -> Self {
        self.inner = self.inner.instance_group_types(input);
        self
    }
    /// <p>The type of instance group for which to list the instances.</p>
    pub fn set_instance_group_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InstanceGroupType>>,
    ) -> Self {
        self.inner = self.inner.set_instance_group_types(input);
        self
    }
    /// <p>The unique identifier of the instance fleet.</p>
    pub fn instance_fleet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_fleet_id(input.into());
        self
    }
    /// <p>The unique identifier of the instance fleet.</p>
    pub fn set_instance_fleet_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_instance_fleet_id(input);
        self
    }
    /// <p>The node type of the instance fleet. For example MASTER, CORE, or TASK.</p>
    pub fn instance_fleet_type(mut self, input: crate::types::InstanceFleetType) -> Self {
        self.inner = self.inner.instance_fleet_type(input);
        self
    }
    /// <p>The node type of the instance fleet. For example MASTER, CORE, or TASK.</p>
    pub fn set_instance_fleet_type(
        mut self,
        input: std::option::Option<crate::types::InstanceFleetType>,
    ) -> Self {
        self.inner = self.inner.set_instance_fleet_type(input);
        self
    }
    /// Appends an item to `InstanceStates`.
    ///
    /// To override the contents of this collection use [`set_instance_states`](Self::set_instance_states).
    ///
    /// <p>A list of instance states that will filter the instances returned with this request.</p>
    pub fn instance_states(mut self, input: crate::types::InstanceState) -> Self {
        self.inner = self.inner.instance_states(input);
        self
    }
    /// <p>A list of instance states that will filter the instances returned with this request.</p>
    pub fn set_instance_states(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InstanceState>>,
    ) -> Self {
        self.inner = self.inner.set_instance_states(input);
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
}
