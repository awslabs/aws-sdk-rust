// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_clusters::_list_clusters_output::ListClustersOutputBuilder;

pub use crate::operation::list_clusters::_list_clusters_input::ListClustersInputBuilder;

/// Fluent builder constructing a request to `ListClusters`.
///
/// <p>Provides the status of all clusters visible to this Amazon Web Services account. Allows you to filter the list of clusters based on certain criteria; for example, filtering by cluster creation date and time or by status. This call returns a maximum of 50 clusters in unsorted order per call, but returns a marker to track the paging of the cluster list across multiple ListClusters calls.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListClustersFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_clusters::builders::ListClustersInputBuilder,
}
impl ListClustersFluentBuilder {
    /// Creates a new `ListClusters`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_clusters::ListClusters,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_clusters::ListClustersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_clusters::ListClustersOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_clusters::ListClustersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_clusters::paginator::ListClustersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_clusters::paginator::ListClustersPaginator {
        crate::operation::list_clusters::paginator::ListClustersPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The creation date and time beginning value filter for listing clusters.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>The creation date and time beginning value filter for listing clusters.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>The creation date and time end value filter for listing clusters.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>The creation date and time end value filter for listing clusters.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// Appends an item to `ClusterStates`.
    ///
    /// To override the contents of this collection use [`set_cluster_states`](Self::set_cluster_states).
    ///
    /// <p>The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.</p>
    pub fn cluster_states(mut self, input: crate::types::ClusterState) -> Self {
        self.inner = self.inner.cluster_states(input);
        self
    }
    /// <p>The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.</p>
    pub fn set_cluster_states(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ClusterState>>,
    ) -> Self {
        self.inner = self.inner.set_cluster_states(input);
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
}
