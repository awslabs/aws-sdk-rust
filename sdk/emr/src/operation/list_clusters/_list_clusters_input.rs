// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This input determines how the ListClusters action filters the list of clusters that it returns.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListClustersInput {
    /// <p>The creation date and time beginning value filter for listing clusters.</p>
    #[doc(hidden)]
    pub created_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The creation date and time end value filter for listing clusters.</p>
    #[doc(hidden)]
    pub created_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.</p>
    #[doc(hidden)]
    pub cluster_states: std::option::Option<std::vec::Vec<crate::types::ClusterState>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl ListClustersInput {
    /// <p>The creation date and time beginning value filter for listing clusters.</p>
    pub fn created_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_after.as_ref()
    }
    /// <p>The creation date and time end value filter for listing clusters.</p>
    pub fn created_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_before.as_ref()
    }
    /// <p>The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.</p>
    pub fn cluster_states(&self) -> std::option::Option<&[crate::types::ClusterState]> {
        self.cluster_states.as_deref()
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ListClustersInput {
    /// Creates a new builder-style object to manufacture [`ListClustersInput`](crate::operation::list_clusters::ListClustersInput).
    pub fn builder() -> crate::operation::list_clusters::builders::ListClustersInputBuilder {
        crate::operation::list_clusters::builders::ListClustersInputBuilder::default()
    }
}

/// A builder for [`ListClustersInput`](crate::operation::list_clusters::ListClustersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListClustersInputBuilder {
    pub(crate) created_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) cluster_states: std::option::Option<std::vec::Vec<crate::types::ClusterState>>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl ListClustersInputBuilder {
    /// <p>The creation date and time beginning value filter for listing clusters.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_after = Some(input);
        self
    }
    /// <p>The creation date and time beginning value filter for listing clusters.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_after = input;
        self
    }
    /// <p>The creation date and time end value filter for listing clusters.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_before = Some(input);
        self
    }
    /// <p>The creation date and time end value filter for listing clusters.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_before = input;
        self
    }
    /// Appends an item to `cluster_states`.
    ///
    /// To override the contents of this collection use [`set_cluster_states`](Self::set_cluster_states).
    ///
    /// <p>The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.</p>
    pub fn cluster_states(mut self, input: crate::types::ClusterState) -> Self {
        let mut v = self.cluster_states.unwrap_or_default();
        v.push(input);
        self.cluster_states = Some(v);
        self
    }
    /// <p>The cluster state filters to apply when listing clusters. Clusters that change state while this action runs may be not be returned as expected in the list of clusters.</p>
    pub fn set_cluster_states(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ClusterState>>,
    ) -> Self {
        self.cluster_states = input;
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`ListClustersInput`](crate::operation::list_clusters::ListClustersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_clusters::ListClustersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_clusters::ListClustersInput {
            created_after: self.created_after,
            created_before: self.created_before,
            cluster_states: self.cluster_states,
            marker: self.marker,
        })
    }
}
