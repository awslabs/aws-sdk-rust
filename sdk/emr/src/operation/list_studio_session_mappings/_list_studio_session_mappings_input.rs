// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStudioSessionMappingsInput {
    /// <p>The ID of the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub studio_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether to return session mappings for users or groups. If not specified, the results include session mapping details for both users and groups.</p>
    #[doc(hidden)]
    pub identity_type: std::option::Option<crate::types::IdentityType>,
    /// <p>The pagination token that indicates the set of results to retrieve.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl ListStudioSessionMappingsInput {
    /// <p>The ID of the Amazon EMR Studio.</p>
    pub fn studio_id(&self) -> std::option::Option<&str> {
        self.studio_id.as_deref()
    }
    /// <p>Specifies whether to return session mappings for users or groups. If not specified, the results include session mapping details for both users and groups.</p>
    pub fn identity_type(&self) -> std::option::Option<&crate::types::IdentityType> {
        self.identity_type.as_ref()
    }
    /// <p>The pagination token that indicates the set of results to retrieve.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ListStudioSessionMappingsInput {
    /// Creates a new builder-style object to manufacture [`ListStudioSessionMappingsInput`](crate::operation::list_studio_session_mappings::ListStudioSessionMappingsInput).
    pub fn builder() -> crate::operation::list_studio_session_mappings::builders::ListStudioSessionMappingsInputBuilder{
        crate::operation::list_studio_session_mappings::builders::ListStudioSessionMappingsInputBuilder::default()
    }
}

/// A builder for [`ListStudioSessionMappingsInput`](crate::operation::list_studio_session_mappings::ListStudioSessionMappingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListStudioSessionMappingsInputBuilder {
    pub(crate) studio_id: std::option::Option<std::string::String>,
    pub(crate) identity_type: std::option::Option<crate::types::IdentityType>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl ListStudioSessionMappingsInputBuilder {
    /// <p>The ID of the Amazon EMR Studio.</p>
    pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.studio_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon EMR Studio.</p>
    pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.studio_id = input;
        self
    }
    /// <p>Specifies whether to return session mappings for users or groups. If not specified, the results include session mapping details for both users and groups.</p>
    pub fn identity_type(mut self, input: crate::types::IdentityType) -> Self {
        self.identity_type = Some(input);
        self
    }
    /// <p>Specifies whether to return session mappings for users or groups. If not specified, the results include session mapping details for both users and groups.</p>
    pub fn set_identity_type(
        mut self,
        input: std::option::Option<crate::types::IdentityType>,
    ) -> Self {
        self.identity_type = input;
        self
    }
    /// <p>The pagination token that indicates the set of results to retrieve.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>The pagination token that indicates the set of results to retrieve.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`ListStudioSessionMappingsInput`](crate::operation::list_studio_session_mappings::ListStudioSessionMappingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_studio_session_mappings::ListStudioSessionMappingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_studio_session_mappings::ListStudioSessionMappingsInput {
                studio_id: self.studio_id,
                identity_type: self.identity_type,
                marker: self.marker,
            },
        )
    }
}
