// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This output contains the bootstrap actions detail.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListBootstrapActionsOutput {
    /// <p>The bootstrap actions associated with the cluster.</p>
    #[doc(hidden)]
    pub bootstrap_actions: std::option::Option<std::vec::Vec<crate::types::Command>>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListBootstrapActionsOutput {
    /// <p>The bootstrap actions associated with the cluster.</p>
    pub fn bootstrap_actions(&self) -> std::option::Option<&[crate::types::Command]> {
        self.bootstrap_actions.as_deref()
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListBootstrapActionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListBootstrapActionsOutput {
    /// Creates a new builder-style object to manufacture [`ListBootstrapActionsOutput`](crate::operation::list_bootstrap_actions::ListBootstrapActionsOutput).
    pub fn builder(
    ) -> crate::operation::list_bootstrap_actions::builders::ListBootstrapActionsOutputBuilder {
        crate::operation::list_bootstrap_actions::builders::ListBootstrapActionsOutputBuilder::default()
    }
}

/// A builder for [`ListBootstrapActionsOutput`](crate::operation::list_bootstrap_actions::ListBootstrapActionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListBootstrapActionsOutputBuilder {
    pub(crate) bootstrap_actions: std::option::Option<std::vec::Vec<crate::types::Command>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListBootstrapActionsOutputBuilder {
    /// Appends an item to `bootstrap_actions`.
    ///
    /// To override the contents of this collection use [`set_bootstrap_actions`](Self::set_bootstrap_actions).
    ///
    /// <p>The bootstrap actions associated with the cluster.</p>
    pub fn bootstrap_actions(mut self, input: crate::types::Command) -> Self {
        let mut v = self.bootstrap_actions.unwrap_or_default();
        v.push(input);
        self.bootstrap_actions = Some(v);
        self
    }
    /// <p>The bootstrap actions associated with the cluster.</p>
    pub fn set_bootstrap_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Command>>,
    ) -> Self {
        self.bootstrap_actions = input;
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListBootstrapActionsOutput`](crate::operation::list_bootstrap_actions::ListBootstrapActionsOutput).
    pub fn build(self) -> crate::operation::list_bootstrap_actions::ListBootstrapActionsOutput {
        crate::operation::list_bootstrap_actions::ListBootstrapActionsOutput {
            bootstrap_actions: self.bootstrap_actions,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
