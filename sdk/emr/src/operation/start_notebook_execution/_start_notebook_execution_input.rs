// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartNotebookExecutionInput {
    /// <p>The unique identifier of the EMR Notebook to use for notebook execution.</p>
    #[doc(hidden)]
    pub editor_id: std::option::Option<std::string::String>,
    /// <p>The path and file name of the notebook file for this execution, relative to the path specified for the EMR Notebook. For example, if you specify a path of <code>s3://MyBucket/MyNotebooks</code> when you create an EMR Notebook for a notebook with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this request), and you specify a <code>RelativePath</code> of <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file for the notebook execution is <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
    #[doc(hidden)]
    pub relative_path: std::option::Option<std::string::String>,
    /// <p>An optional name for the notebook execution.</p>
    #[doc(hidden)]
    pub notebook_execution_name: std::option::Option<std::string::String>,
    /// <p>Input parameters in JSON format passed to the EMR Notebook at runtime for execution.</p>
    #[doc(hidden)]
    pub notebook_params: std::option::Option<std::string::String>,
    /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
    #[doc(hidden)]
    pub execution_engine: std::option::Option<crate::types::ExecutionEngineConfig>,
    /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR role) for the notebook execution.</p>
    #[doc(hidden)]
    pub service_role: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the Amazon EC2 security group to associate with the EMR Notebook for this notebook execution.</p>
    #[doc(hidden)]
    pub notebook_instance_security_group_id: std::option::Option<std::string::String>,
    /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl StartNotebookExecutionInput {
    /// <p>The unique identifier of the EMR Notebook to use for notebook execution.</p>
    pub fn editor_id(&self) -> std::option::Option<&str> {
        self.editor_id.as_deref()
    }
    /// <p>The path and file name of the notebook file for this execution, relative to the path specified for the EMR Notebook. For example, if you specify a path of <code>s3://MyBucket/MyNotebooks</code> when you create an EMR Notebook for a notebook with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this request), and you specify a <code>RelativePath</code> of <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file for the notebook execution is <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
    pub fn relative_path(&self) -> std::option::Option<&str> {
        self.relative_path.as_deref()
    }
    /// <p>An optional name for the notebook execution.</p>
    pub fn notebook_execution_name(&self) -> std::option::Option<&str> {
        self.notebook_execution_name.as_deref()
    }
    /// <p>Input parameters in JSON format passed to the EMR Notebook at runtime for execution.</p>
    pub fn notebook_params(&self) -> std::option::Option<&str> {
        self.notebook_params.as_deref()
    }
    /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
    pub fn execution_engine(&self) -> std::option::Option<&crate::types::ExecutionEngineConfig> {
        self.execution_engine.as_ref()
    }
    /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR role) for the notebook execution.</p>
    pub fn service_role(&self) -> std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>The unique identifier of the Amazon EC2 security group to associate with the EMR Notebook for this notebook execution.</p>
    pub fn notebook_instance_security_group_id(&self) -> std::option::Option<&str> {
        self.notebook_instance_security_group_id.as_deref()
    }
    /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl StartNotebookExecutionInput {
    /// Creates a new builder-style object to manufacture [`StartNotebookExecutionInput`](crate::operation::start_notebook_execution::StartNotebookExecutionInput).
    pub fn builder(
    ) -> crate::operation::start_notebook_execution::builders::StartNotebookExecutionInputBuilder
    {
        crate::operation::start_notebook_execution::builders::StartNotebookExecutionInputBuilder::default()
    }
}

/// A builder for [`StartNotebookExecutionInput`](crate::operation::start_notebook_execution::StartNotebookExecutionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartNotebookExecutionInputBuilder {
    pub(crate) editor_id: std::option::Option<std::string::String>,
    pub(crate) relative_path: std::option::Option<std::string::String>,
    pub(crate) notebook_execution_name: std::option::Option<std::string::String>,
    pub(crate) notebook_params: std::option::Option<std::string::String>,
    pub(crate) execution_engine: std::option::Option<crate::types::ExecutionEngineConfig>,
    pub(crate) service_role: std::option::Option<std::string::String>,
    pub(crate) notebook_instance_security_group_id: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl StartNotebookExecutionInputBuilder {
    /// <p>The unique identifier of the EMR Notebook to use for notebook execution.</p>
    pub fn editor_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.editor_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the EMR Notebook to use for notebook execution.</p>
    pub fn set_editor_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.editor_id = input;
        self
    }
    /// <p>The path and file name of the notebook file for this execution, relative to the path specified for the EMR Notebook. For example, if you specify a path of <code>s3://MyBucket/MyNotebooks</code> when you create an EMR Notebook for a notebook with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this request), and you specify a <code>RelativePath</code> of <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file for the notebook execution is <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
    pub fn relative_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.relative_path = Some(input.into());
        self
    }
    /// <p>The path and file name of the notebook file for this execution, relative to the path specified for the EMR Notebook. For example, if you specify a path of <code>s3://MyBucket/MyNotebooks</code> when you create an EMR Notebook for a notebook with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this request), and you specify a <code>RelativePath</code> of <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file for the notebook execution is <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
    pub fn set_relative_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.relative_path = input;
        self
    }
    /// <p>An optional name for the notebook execution.</p>
    pub fn notebook_execution_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.notebook_execution_name = Some(input.into());
        self
    }
    /// <p>An optional name for the notebook execution.</p>
    pub fn set_notebook_execution_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notebook_execution_name = input;
        self
    }
    /// <p>Input parameters in JSON format passed to the EMR Notebook at runtime for execution.</p>
    pub fn notebook_params(mut self, input: impl Into<std::string::String>) -> Self {
        self.notebook_params = Some(input.into());
        self
    }
    /// <p>Input parameters in JSON format passed to the EMR Notebook at runtime for execution.</p>
    pub fn set_notebook_params(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.notebook_params = input;
        self
    }
    /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
    pub fn execution_engine(mut self, input: crate::types::ExecutionEngineConfig) -> Self {
        self.execution_engine = Some(input);
        self
    }
    /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
    pub fn set_execution_engine(
        mut self,
        input: std::option::Option<crate::types::ExecutionEngineConfig>,
    ) -> Self {
        self.execution_engine = input;
        self
    }
    /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR role) for the notebook execution.</p>
    pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role = Some(input.into());
        self
    }
    /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the EMR role) for the notebook execution.</p>
    pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role = input;
        self
    }
    /// <p>The unique identifier of the Amazon EC2 security group to associate with the EMR Notebook for this notebook execution.</p>
    pub fn notebook_instance_security_group_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.notebook_instance_security_group_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon EC2 security group to associate with the EMR Notebook for this notebook execution.</p>
    pub fn set_notebook_instance_security_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notebook_instance_security_group_id = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`StartNotebookExecutionInput`](crate::operation::start_notebook_execution::StartNotebookExecutionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_notebook_execution::StartNotebookExecutionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_notebook_execution::StartNotebookExecutionInput {
                editor_id: self.editor_id,
                relative_path: self.relative_path,
                notebook_execution_name: self.notebook_execution_name,
                notebook_params: self.notebook_params,
                execution_engine: self.execution_engine,
                service_role: self.service_role,
                notebook_instance_security_group_id: self.notebook_instance_security_group_id,
                tags: self.tags,
            },
        )
    }
}
