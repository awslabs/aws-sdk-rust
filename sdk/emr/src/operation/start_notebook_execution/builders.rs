// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_notebook_execution::_start_notebook_execution_output::StartNotebookExecutionOutputBuilder;

pub use crate::operation::start_notebook_execution::_start_notebook_execution_input::StartNotebookExecutionInputBuilder;

impl StartNotebookExecutionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_notebook_execution::StartNotebookExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_notebook_execution::StartNotebookExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_notebook_execution();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartNotebookExecution`.
///
/// <p>Starts a notebook execution.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartNotebookExecutionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_notebook_execution::builders::StartNotebookExecutionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_notebook_execution::StartNotebookExecutionOutput,
        crate::operation::start_notebook_execution::StartNotebookExecutionError,
    > for StartNotebookExecutionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_notebook_execution::StartNotebookExecutionOutput,
            crate::operation::start_notebook_execution::StartNotebookExecutionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartNotebookExecutionFluentBuilder {
    /// Creates a new `StartNotebookExecution`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartNotebookExecution as a reference.
    pub fn as_input(&self) -> &crate::operation::start_notebook_execution::builders::StartNotebookExecutionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_notebook_execution::StartNotebookExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_notebook_execution::StartNotebookExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_notebook_execution::StartNotebookExecution::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_notebook_execution::StartNotebookExecution::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_notebook_execution::StartNotebookExecutionOutput,
        crate::operation::start_notebook_execution::StartNotebookExecutionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier of the Amazon EMR Notebook to use for notebook execution.</p>
    pub fn editor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.editor_id(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon EMR Notebook to use for notebook execution.</p>
    pub fn set_editor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_editor_id(input);
        self
    }
    /// <p>The unique identifier of the Amazon EMR Notebook to use for notebook execution.</p>
    pub fn get_editor_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_editor_id()
    }
    /// <p>The path and file name of the notebook file for this execution, relative to the path specified for the Amazon EMR Notebook. For example, if you specify a path of <code>s3://MyBucket/MyNotebooks</code> when you create an Amazon EMR Notebook for a notebook with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this request), and you specify a <code>RelativePath</code> of <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file for the notebook execution is <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
    pub fn relative_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.relative_path(input.into());
        self
    }
    /// <p>The path and file name of the notebook file for this execution, relative to the path specified for the Amazon EMR Notebook. For example, if you specify a path of <code>s3://MyBucket/MyNotebooks</code> when you create an Amazon EMR Notebook for a notebook with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this request), and you specify a <code>RelativePath</code> of <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file for the notebook execution is <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
    pub fn set_relative_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_relative_path(input);
        self
    }
    /// <p>The path and file name of the notebook file for this execution, relative to the path specified for the Amazon EMR Notebook. For example, if you specify a path of <code>s3://MyBucket/MyNotebooks</code> when you create an Amazon EMR Notebook for a notebook with an ID of <code>e-ABCDEFGHIJK1234567890ABCD</code> (the <code>EditorID</code> of this request), and you specify a <code>RelativePath</code> of <code>my_notebook_executions/notebook_execution.ipynb</code>, the location of the file for the notebook execution is <code>s3://MyBucket/MyNotebooks/e-ABCDEFGHIJK1234567890ABCD/my_notebook_executions/notebook_execution.ipynb</code>.</p>
    pub fn get_relative_path(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_relative_path()
    }
    /// <p>An optional name for the notebook execution.</p>
    pub fn notebook_execution_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.notebook_execution_name(input.into());
        self
    }
    /// <p>An optional name for the notebook execution.</p>
    pub fn set_notebook_execution_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_notebook_execution_name(input);
        self
    }
    /// <p>An optional name for the notebook execution.</p>
    pub fn get_notebook_execution_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_notebook_execution_name()
    }
    /// <p>Input parameters in JSON format passed to the Amazon EMR Notebook at runtime for execution.</p>
    pub fn notebook_params(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.notebook_params(input.into());
        self
    }
    /// <p>Input parameters in JSON format passed to the Amazon EMR Notebook at runtime for execution.</p>
    pub fn set_notebook_params(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_notebook_params(input);
        self
    }
    /// <p>Input parameters in JSON format passed to the Amazon EMR Notebook at runtime for execution.</p>
    pub fn get_notebook_params(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_notebook_params()
    }
    /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
    pub fn execution_engine(mut self, input: crate::types::ExecutionEngineConfig) -> Self {
        self.inner = self.inner.execution_engine(input);
        self
    }
    /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
    pub fn set_execution_engine(mut self, input: ::std::option::Option<crate::types::ExecutionEngineConfig>) -> Self {
        self.inner = self.inner.set_execution_engine(input);
        self
    }
    /// <p>Specifies the execution engine (cluster) that runs the notebook execution.</p>
    pub fn get_execution_engine(&self) -> &::std::option::Option<crate::types::ExecutionEngineConfig> {
        self.inner.get_execution_engine()
    }
    /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the Amazon EMR role) for the notebook execution.</p>
    pub fn service_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_role(input.into());
        self
    }
    /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the Amazon EMR role) for the notebook execution.</p>
    pub fn set_service_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_role(input);
        self
    }
    /// <p>The name or ARN of the IAM role that is used as the service role for Amazon EMR (the Amazon EMR role) for the notebook execution.</p>
    pub fn get_service_role(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_role()
    }
    /// <p>The unique identifier of the Amazon EC2 security group to associate with the Amazon EMR Notebook for this notebook execution.</p>
    pub fn notebook_instance_security_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_security_group_id(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon EC2 security group to associate with the Amazon EMR Notebook for this notebook execution.</p>
    pub fn set_notebook_instance_security_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_notebook_instance_security_group_id(input);
        self
    }
    /// <p>The unique identifier of the Amazon EC2 security group to associate with the Amazon EMR Notebook for this notebook execution.</p>
    pub fn get_notebook_instance_security_group_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_notebook_instance_security_group_id()
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>The Amazon S3 location for the notebook execution input.</p>
    pub fn notebook_s3_location(mut self, input: crate::types::NotebookS3LocationFromInput) -> Self {
        self.inner = self.inner.notebook_s3_location(input);
        self
    }
    /// <p>The Amazon S3 location for the notebook execution input.</p>
    pub fn set_notebook_s3_location(mut self, input: ::std::option::Option<crate::types::NotebookS3LocationFromInput>) -> Self {
        self.inner = self.inner.set_notebook_s3_location(input);
        self
    }
    /// <p>The Amazon S3 location for the notebook execution input.</p>
    pub fn get_notebook_s3_location(&self) -> &::std::option::Option<crate::types::NotebookS3LocationFromInput> {
        self.inner.get_notebook_s3_location()
    }
    /// <p>The Amazon S3 location for the notebook execution output.</p>
    pub fn output_notebook_s3_location(mut self, input: crate::types::OutputNotebookS3LocationFromInput) -> Self {
        self.inner = self.inner.output_notebook_s3_location(input);
        self
    }
    /// <p>The Amazon S3 location for the notebook execution output.</p>
    pub fn set_output_notebook_s3_location(mut self, input: ::std::option::Option<crate::types::OutputNotebookS3LocationFromInput>) -> Self {
        self.inner = self.inner.set_output_notebook_s3_location(input);
        self
    }
    /// <p>The Amazon S3 location for the notebook execution output.</p>
    pub fn get_output_notebook_s3_location(&self) -> &::std::option::Option<crate::types::OutputNotebookS3LocationFromInput> {
        self.inner.get_output_notebook_s3_location()
    }
    /// <p>The output format for the notebook execution.</p>
    pub fn output_notebook_format(mut self, input: crate::types::OutputNotebookFormat) -> Self {
        self.inner = self.inner.output_notebook_format(input);
        self
    }
    /// <p>The output format for the notebook execution.</p>
    pub fn set_output_notebook_format(mut self, input: ::std::option::Option<crate::types::OutputNotebookFormat>) -> Self {
        self.inner = self.inner.set_output_notebook_format(input);
        self
    }
    /// <p>The output format for the notebook execution.</p>
    pub fn get_output_notebook_format(&self) -> &::std::option::Option<crate::types::OutputNotebookFormat> {
        self.inner.get_output_notebook_format()
    }
    /// Adds a key-value pair to `EnvironmentVariables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p>The environment variables associated with the notebook execution.</p>
    pub fn environment_variables(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.environment_variables(k.into(), v.into());
        self
    }
    /// <p>The environment variables associated with the notebook execution.</p>
    pub fn set_environment_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_environment_variables(input);
        self
    }
    /// <p>The environment variables associated with the notebook execution.</p>
    pub fn get_environment_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_environment_variables()
    }
}
