// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateStudioInput {
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A detailed description of the Amazon EMR Studio.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the Studio authenticates users using IAM or IAM Identity Center.</p>
    pub auth_mode: ::std::option::Option<crate::types::AuthMode>,
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by <code>VpcId</code>. Studio users can create a Workspace in any of the specified subnets.</p>
    pub subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IAM role that the Amazon EMR Studio assumes. The service role provides a way for Amazon EMR Studio to interoperate with other Amazon Web Services services.</p>
    pub service_role: ::std::option::Option<::std::string::String>,
    /// <p>The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a <code>UserRole</code> when you use IAM Identity Center authentication. The permissions attached to the <code>UserRole</code> can be scoped down for each user or group using session policies.</p>
    pub user_role: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    pub workspace_security_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    pub engine_security_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    pub default_s3_location: ::std::option::Option<::std::string::String>,
    /// <p>The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.</p>
    pub idp_auth_url: ::std::option::Option<::std::string::String>,
    /// <p>The name that your identity provider (IdP) uses for its <code>RelayState</code> parameter. For example, <code>RelayState</code> or <code>TargetSource</code>. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The <code>RelayState</code> parameter differs by IdP.</p>
    pub idp_relay_state_parameter_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateStudioInput {
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A detailed description of the Amazon EMR Studio.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether the Studio authenticates users using IAM or IAM Identity Center.</p>
    pub fn auth_mode(&self) -> ::std::option::Option<&crate::types::AuthMode> {
        self.auth_mode.as_ref()
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by <code>VpcId</code>. Studio users can create a Workspace in any of the specified subnets.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_ids.is_none()`.
    pub fn subnet_ids(&self) -> &[::std::string::String] {
        self.subnet_ids.as_deref().unwrap_or_default()
    }
    /// <p>The IAM role that the Amazon EMR Studio assumes. The service role provides a way for Amazon EMR Studio to interoperate with other Amazon Web Services services.</p>
    pub fn service_role(&self) -> ::std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a <code>UserRole</code> when you use IAM Identity Center authentication. The permissions attached to the <code>UserRole</code> can be scoped down for each user or group using session policies.</p>
    pub fn user_role(&self) -> ::std::option::Option<&str> {
        self.user_role.as_deref()
    }
    /// <p>The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    pub fn workspace_security_group_id(&self) -> ::std::option::Option<&str> {
        self.workspace_security_group_id.as_deref()
    }
    /// <p>The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    pub fn engine_security_group_id(&self) -> ::std::option::Option<&str> {
        self.engine_security_group_id.as_deref()
    }
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    pub fn default_s3_location(&self) -> ::std::option::Option<&str> {
        self.default_s3_location.as_deref()
    }
    /// <p>The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.</p>
    pub fn idp_auth_url(&self) -> ::std::option::Option<&str> {
        self.idp_auth_url.as_deref()
    }
    /// <p>The name that your identity provider (IdP) uses for its <code>RelayState</code> parameter. For example, <code>RelayState</code> or <code>TargetSource</code>. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The <code>RelayState</code> parameter differs by IdP.</p>
    pub fn idp_relay_state_parameter_name(&self) -> ::std::option::Option<&str> {
        self.idp_relay_state_parameter_name.as_deref()
    }
    /// <p>A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateStudioInput {
    /// Creates a new builder-style object to manufacture [`CreateStudioInput`](crate::operation::create_studio::CreateStudioInput).
    pub fn builder() -> crate::operation::create_studio::builders::CreateStudioInputBuilder {
        crate::operation::create_studio::builders::CreateStudioInputBuilder::default()
    }
}

/// A builder for [`CreateStudioInput`](crate::operation::create_studio::CreateStudioInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateStudioInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) auth_mode: ::std::option::Option<crate::types::AuthMode>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) service_role: ::std::option::Option<::std::string::String>,
    pub(crate) user_role: ::std::option::Option<::std::string::String>,
    pub(crate) workspace_security_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) engine_security_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) default_s3_location: ::std::option::Option<::std::string::String>,
    pub(crate) idp_auth_url: ::std::option::Option<::std::string::String>,
    pub(crate) idp_relay_state_parameter_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateStudioInputBuilder {
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A detailed description of the Amazon EMR Studio.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed description of the Amazon EMR Studio.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A detailed description of the Amazon EMR Studio.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies whether the Studio authenticates users using IAM or IAM Identity Center.</p>
    /// This field is required.
    pub fn auth_mode(mut self, input: crate::types::AuthMode) -> Self {
        self.auth_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the Studio authenticates users using IAM or IAM Identity Center.</p>
    pub fn set_auth_mode(mut self, input: ::std::option::Option<crate::types::AuthMode>) -> Self {
        self.auth_mode = input;
        self
    }
    /// <p>Specifies whether the Studio authenticates users using IAM or IAM Identity Center.</p>
    pub fn get_auth_mode(&self) -> &::std::option::Option<crate::types::AuthMode> {
        &self.auth_mode
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.</p>
    /// This field is required.
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by <code>VpcId</code>. Studio users can create a Workspace in any of the specified subnets.</p>
    pub fn subnet_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by <code>VpcId</code>. Studio users can create a Workspace in any of the specified subnets.</p>
    pub fn set_subnet_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by <code>VpcId</code>. Studio users can create a Workspace in any of the specified subnets.</p>
    pub fn get_subnet_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_ids
    }
    /// <p>The IAM role that the Amazon EMR Studio assumes. The service role provides a way for Amazon EMR Studio to interoperate with other Amazon Web Services services.</p>
    /// This field is required.
    pub fn service_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role that the Amazon EMR Studio assumes. The service role provides a way for Amazon EMR Studio to interoperate with other Amazon Web Services services.</p>
    pub fn set_service_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_role = input;
        self
    }
    /// <p>The IAM role that the Amazon EMR Studio assumes. The service role provides a way for Amazon EMR Studio to interoperate with other Amazon Web Services services.</p>
    pub fn get_service_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_role
    }
    /// <p>The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a <code>UserRole</code> when you use IAM Identity Center authentication. The permissions attached to the <code>UserRole</code> can be scoped down for each user or group using session policies.</p>
    pub fn user_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a <code>UserRole</code> when you use IAM Identity Center authentication. The permissions attached to the <code>UserRole</code> can be scoped down for each user or group using session policies.</p>
    pub fn set_user_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_role = input;
        self
    }
    /// <p>The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a <code>UserRole</code> when you use IAM Identity Center authentication. The permissions attached to the <code>UserRole</code> can be scoped down for each user or group using session policies.</p>
    pub fn get_user_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_role
    }
    /// <p>The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    /// This field is required.
    pub fn workspace_security_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_security_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    pub fn set_workspace_security_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_security_group_id = input;
        self
    }
    /// <p>The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    pub fn get_workspace_security_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_security_group_id
    }
    /// <p>The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    /// This field is required.
    pub fn engine_security_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_security_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    pub fn set_engine_security_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_security_group_id = input;
        self
    }
    /// <p>The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by <code>VpcId</code>.</p>
    pub fn get_engine_security_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_security_group_id
    }
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    /// This field is required.
    pub fn default_s3_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_s3_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    pub fn set_default_s3_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_s3_location = input;
        self
    }
    /// <p>The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.</p>
    pub fn get_default_s3_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_s3_location
    }
    /// <p>The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.</p>
    pub fn idp_auth_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.idp_auth_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.</p>
    pub fn set_idp_auth_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.idp_auth_url = input;
        self
    }
    /// <p>The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.</p>
    pub fn get_idp_auth_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.idp_auth_url
    }
    /// <p>The name that your identity provider (IdP) uses for its <code>RelayState</code> parameter. For example, <code>RelayState</code> or <code>TargetSource</code>. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The <code>RelayState</code> parameter differs by IdP.</p>
    pub fn idp_relay_state_parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.idp_relay_state_parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name that your identity provider (IdP) uses for its <code>RelayState</code> parameter. For example, <code>RelayState</code> or <code>TargetSource</code>. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The <code>RelayState</code> parameter differs by IdP.</p>
    pub fn set_idp_relay_state_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.idp_relay_state_parameter_name = input;
        self
    }
    /// <p>The name that your identity provider (IdP) uses for its <code>RelayState</code> parameter. For example, <code>RelayState</code> or <code>TargetSource</code>. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The <code>RelayState</code> parameter differs by IdP.</p>
    pub fn get_idp_relay_state_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.idp_relay_state_parameter_name
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags to associate with the Amazon EMR Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateStudioInput`](crate::operation::create_studio::CreateStudioInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_studio::CreateStudioInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_studio::CreateStudioInput {
            name: self.name,
            description: self.description,
            auth_mode: self.auth_mode,
            vpc_id: self.vpc_id,
            subnet_ids: self.subnet_ids,
            service_role: self.service_role,
            user_role: self.user_role,
            workspace_security_group_id: self.workspace_security_group_id,
            engine_security_group_id: self.engine_security_group_id,
            default_s3_location: self.default_s3_location,
            idp_auth_url: self.idp_auth_url,
            idp_relay_state_parameter_name: self.idp_relay_state_parameter_name,
            tags: self.tags,
        })
    }
}
