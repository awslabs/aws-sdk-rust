// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSupportedInstanceTypesOutput {
    /// <p>The list of instance types that the release specified in <code>ListSupportedInstanceTypesInput$ReleaseLabel</code> supports, filtered by Amazon Web Services Region.</p>
    pub supported_instance_types: ::std::option::Option<::std::vec::Vec<crate::types::SupportedInstanceType>>,
    /// <p>The pagination token that marks the next set of results to retrieve.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSupportedInstanceTypesOutput {
    /// <p>The list of instance types that the release specified in <code>ListSupportedInstanceTypesInput$ReleaseLabel</code> supports, filtered by Amazon Web Services Region.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_instance_types.is_none()`.
    pub fn supported_instance_types(&self) -> &[crate::types::SupportedInstanceType] {
        self.supported_instance_types.as_deref().unwrap_or_default()
    }
    /// <p>The pagination token that marks the next set of results to retrieve.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListSupportedInstanceTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSupportedInstanceTypesOutput {
    /// Creates a new builder-style object to manufacture [`ListSupportedInstanceTypesOutput`](crate::operation::list_supported_instance_types::ListSupportedInstanceTypesOutput).
    pub fn builder() -> crate::operation::list_supported_instance_types::builders::ListSupportedInstanceTypesOutputBuilder {
        crate::operation::list_supported_instance_types::builders::ListSupportedInstanceTypesOutputBuilder::default()
    }
}

/// A builder for [`ListSupportedInstanceTypesOutput`](crate::operation::list_supported_instance_types::ListSupportedInstanceTypesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSupportedInstanceTypesOutputBuilder {
    pub(crate) supported_instance_types: ::std::option::Option<::std::vec::Vec<crate::types::SupportedInstanceType>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSupportedInstanceTypesOutputBuilder {
    /// Appends an item to `supported_instance_types`.
    ///
    /// To override the contents of this collection use [`set_supported_instance_types`](Self::set_supported_instance_types).
    ///
    /// <p>The list of instance types that the release specified in <code>ListSupportedInstanceTypesInput$ReleaseLabel</code> supports, filtered by Amazon Web Services Region.</p>
    pub fn supported_instance_types(mut self, input: crate::types::SupportedInstanceType) -> Self {
        let mut v = self.supported_instance_types.unwrap_or_default();
        v.push(input);
        self.supported_instance_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of instance types that the release specified in <code>ListSupportedInstanceTypesInput$ReleaseLabel</code> supports, filtered by Amazon Web Services Region.</p>
    pub fn set_supported_instance_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SupportedInstanceType>>) -> Self {
        self.supported_instance_types = input;
        self
    }
    /// <p>The list of instance types that the release specified in <code>ListSupportedInstanceTypesInput$ReleaseLabel</code> supports, filtered by Amazon Web Services Region.</p>
    pub fn get_supported_instance_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SupportedInstanceType>> {
        &self.supported_instance_types
    }
    /// <p>The pagination token that marks the next set of results to retrieve.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that marks the next set of results to retrieve.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The pagination token that marks the next set of results to retrieve.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListSupportedInstanceTypesOutput`](crate::operation::list_supported_instance_types::ListSupportedInstanceTypesOutput).
    pub fn build(self) -> crate::operation::list_supported_instance_types::ListSupportedInstanceTypesOutput {
        crate::operation::list_supported_instance_types::ListSupportedInstanceTypesOutput {
            supported_instance_types: self.supported_instance_types,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
