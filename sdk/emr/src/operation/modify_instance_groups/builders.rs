// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_instance_groups::_modify_instance_groups_output::ModifyInstanceGroupsOutputBuilder;

pub use crate::operation::modify_instance_groups::_modify_instance_groups_input::ModifyInstanceGroupsInputBuilder;

impl ModifyInstanceGroupsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_instance_groups::ModifyInstanceGroupsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_instance_groups::ModifyInstanceGroupsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_instance_groups();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyInstanceGroups`.
///
/// <p>ModifyInstanceGroups modifies the number of nodes and configuration settings of an instance group. The input parameters include the new target instance count for the group and the instance group ID. The call will either succeed or fail atomically.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyInstanceGroupsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_instance_groups::builders::ModifyInstanceGroupsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_instance_groups::ModifyInstanceGroupsOutput,
        crate::operation::modify_instance_groups::ModifyInstanceGroupsError,
    > for ModifyInstanceGroupsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_instance_groups::ModifyInstanceGroupsOutput,
            crate::operation::modify_instance_groups::ModifyInstanceGroupsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyInstanceGroupsFluentBuilder {
    /// Creates a new `ModifyInstanceGroups`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyInstanceGroups as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_instance_groups::builders::ModifyInstanceGroupsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_instance_groups::ModifyInstanceGroupsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_instance_groups::ModifyInstanceGroupsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_instance_groups::ModifyInstanceGroups::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_instance_groups::ModifyInstanceGroups::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_instance_groups::ModifyInstanceGroupsOutput,
        crate::operation::modify_instance_groups::ModifyInstanceGroupsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the cluster to which the instance group belongs.</p>
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_id(input.into());
        self
    }
    /// <p>The ID of the cluster to which the instance group belongs.</p>
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_id(input);
        self
    }
    /// <p>The ID of the cluster to which the instance group belongs.</p>
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_id()
    }
    /// Appends an item to `InstanceGroups`.
    ///
    /// To override the contents of this collection use [`set_instance_groups`](Self::set_instance_groups).
    ///
    /// <p>Instance groups to change.</p>
    pub fn instance_groups(mut self, input: crate::types::InstanceGroupModifyConfig) -> Self {
        self.inner = self.inner.instance_groups(input);
        self
    }
    /// <p>Instance groups to change.</p>
    pub fn set_instance_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InstanceGroupModifyConfig>>) -> Self {
        self.inner = self.inner.set_instance_groups(input);
        self
    }
    /// <p>Instance groups to change.</p>
    pub fn get_instance_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InstanceGroupModifyConfig>> {
        self.inner.get_instance_groups()
    }
}
