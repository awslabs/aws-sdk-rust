// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateStudioInput {
    /// <p>The ID of the Amazon EMR Studio to update.</p>
    #[doc(hidden)]
    pub studio_id: std::option::Option<std::string::String>,
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A detailed description to assign to the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio. </p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.</p>
    #[doc(hidden)]
    pub default_s3_location: std::option::Option<std::string::String>,
}
impl UpdateStudioInput {
    /// <p>The ID of the Amazon EMR Studio to update.</p>
    pub fn studio_id(&self) -> std::option::Option<&str> {
        self.studio_id.as_deref()
    }
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A detailed description to assign to the Amazon EMR Studio.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio. </p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.</p>
    pub fn default_s3_location(&self) -> std::option::Option<&str> {
        self.default_s3_location.as_deref()
    }
}
impl UpdateStudioInput {
    /// Creates a new builder-style object to manufacture [`UpdateStudioInput`](crate::operation::update_studio::UpdateStudioInput).
    pub fn builder() -> crate::operation::update_studio::builders::UpdateStudioInputBuilder {
        crate::operation::update_studio::builders::UpdateStudioInputBuilder::default()
    }
}

/// A builder for [`UpdateStudioInput`](crate::operation::update_studio::UpdateStudioInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateStudioInputBuilder {
    pub(crate) studio_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) default_s3_location: std::option::Option<std::string::String>,
}
impl UpdateStudioInputBuilder {
    /// <p>The ID of the Amazon EMR Studio to update.</p>
    pub fn studio_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.studio_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon EMR Studio to update.</p>
    pub fn set_studio_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.studio_id = input;
        self
    }
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A descriptive name for the Amazon EMR Studio.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A detailed description to assign to the Amazon EMR Studio.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A detailed description to assign to the Amazon EMR Studio.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio. </p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>A list of subnet IDs to associate with the Amazon EMR Studio. The list can include new subnet IDs, but must also include all of the subnet IDs previously associated with the Studio. The list order does not matter. A Studio can have a maximum of 5 subnets. The subnets must belong to the same VPC as the Studio. </p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.</p>
    pub fn default_s3_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_s3_location = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location to back up Workspaces and notebook files for the Amazon EMR Studio.</p>
    pub fn set_default_s3_location(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_s3_location = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateStudioInput`](crate::operation::update_studio::UpdateStudioInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_studio::UpdateStudioInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_studio::UpdateStudioInput {
            studio_id: self.studio_id,
            name: self.name,
            description: self.description,
            subnet_ids: self.subnet_ids,
            default_s3_location: self.default_s3_location,
        })
    }
}
