// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::terminate_job_flows::_terminate_job_flows_output::TerminateJobFlowsOutputBuilder;

pub use crate::operation::terminate_job_flows::_terminate_job_flows_input::TerminateJobFlowsInputBuilder;

/// Fluent builder constructing a request to `TerminateJobFlows`.
///
/// <p>TerminateJobFlows shuts a list of clusters (job flows) down. When a job flow is shut down, any step not yet completed is canceled and the EC2 instances on which the cluster is running are stopped. Any log files not already saved are uploaded to Amazon S3 if a LogUri was specified when the cluster was created.</p>
/// <p>The maximum number of clusters allowed is 10. The call to <code>TerminateJobFlows</code> is asynchronous. Depending on the configuration of the cluster, it may take up to 1-5 minutes for the cluster to completely terminate and release allocated resources, such as Amazon EC2 instances.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TerminateJobFlowsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::terminate_job_flows::builders::TerminateJobFlowsInputBuilder,
}
impl TerminateJobFlowsFluentBuilder {
    /// Creates a new `TerminateJobFlows`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::terminate_job_flows::TerminateJobFlows,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::terminate_job_flows::TerminateJobFlowsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::terminate_job_flows::TerminateJobFlowsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::terminate_job_flows::TerminateJobFlowsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `JobFlowIds`.
    ///
    /// To override the contents of this collection use [`set_job_flow_ids`](Self::set_job_flow_ids).
    ///
    /// <p>A list of job flows to be shut down.</p>
    pub fn job_flow_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_flow_ids(input.into());
        self
    }
    /// <p>A list of job flows to be shut down.</p>
    pub fn set_job_flow_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_job_flow_ids(input);
        self
    }
}
