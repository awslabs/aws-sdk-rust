// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyClusterInput {
    /// <p>The unique identifier of the cluster.</p>
    #[doc(hidden)]
    pub cluster_id: std::option::Option<std::string::String>,
    /// <p>The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256 steps. We recommend that you do not change this parameter while steps are running or the <code>ActionOnFailure</code> setting may not behave as expected. For more information see <code>Step$ActionOnFailure</code>.</p>
    #[doc(hidden)]
    pub step_concurrency_level: std::option::Option<i32>,
}
impl ModifyClusterInput {
    /// <p>The unique identifier of the cluster.</p>
    pub fn cluster_id(&self) -> std::option::Option<&str> {
        self.cluster_id.as_deref()
    }
    /// <p>The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256 steps. We recommend that you do not change this parameter while steps are running or the <code>ActionOnFailure</code> setting may not behave as expected. For more information see <code>Step$ActionOnFailure</code>.</p>
    pub fn step_concurrency_level(&self) -> std::option::Option<i32> {
        self.step_concurrency_level
    }
}
impl ModifyClusterInput {
    /// Creates a new builder-style object to manufacture [`ModifyClusterInput`](crate::operation::modify_cluster::ModifyClusterInput).
    pub fn builder() -> crate::operation::modify_cluster::builders::ModifyClusterInputBuilder {
        crate::operation::modify_cluster::builders::ModifyClusterInputBuilder::default()
    }
}

/// A builder for [`ModifyClusterInput`](crate::operation::modify_cluster::ModifyClusterInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModifyClusterInputBuilder {
    pub(crate) cluster_id: std::option::Option<std::string::String>,
    pub(crate) step_concurrency_level: std::option::Option<i32>,
}
impl ModifyClusterInputBuilder {
    /// <p>The unique identifier of the cluster.</p>
    pub fn cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the cluster.</p>
    pub fn set_cluster_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// <p>The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256 steps. We recommend that you do not change this parameter while steps are running or the <code>ActionOnFailure</code> setting may not behave as expected. For more information see <code>Step$ActionOnFailure</code>.</p>
    pub fn step_concurrency_level(mut self, input: i32) -> Self {
        self.step_concurrency_level = Some(input);
        self
    }
    /// <p>The number of steps that can be executed concurrently. You can specify a minimum of 1 step and a maximum of 256 steps. We recommend that you do not change this parameter while steps are running or the <code>ActionOnFailure</code> setting may not behave as expected. For more information see <code>Step$ActionOnFailure</code>.</p>
    pub fn set_step_concurrency_level(mut self, input: std::option::Option<i32>) -> Self {
        self.step_concurrency_level = input;
        self
    }
    /// Consumes the builder and constructs a [`ModifyClusterInput`](crate::operation::modify_cluster::ModifyClusterInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::modify_cluster::ModifyClusterInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::modify_cluster::ModifyClusterInput {
            cluster_id: self.cluster_id,
            step_concurrency_level: self.step_concurrency_level,
        })
    }
}
