// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_compare_faces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CompareFacesInput,
) {
    if let Some(var_1) = &input.source_image {
        let mut object_2 = object.key("SourceImage").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_2, var_1);
        object_2.finish();
    }
    if let Some(var_3) = &input.target_image {
        let mut object_4 = object.key("TargetImage").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_4, var_3);
        object_4.finish();
    }
    if let Some(var_5) = &input.similarity_threshold {
        object.key("SimilarityThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.quality_filter {
        object.key("QualityFilter").string(var_6.as_str());
    }
}

pub fn serialize_structure_crate_input_create_collection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCollectionInput,
) {
    if let Some(var_7) = &input.collection_id {
        object.key("CollectionId").string(var_7);
    }
    if let Some(var_8) = &input.tags {
        let mut object_9 = object.key("Tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10).string(value_11);
            }
        }
        object_9.finish();
    }
}

pub fn serialize_structure_crate_input_create_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectInput,
) {
    if let Some(var_12) = &input.project_name {
        object.key("ProjectName").string(var_12);
    }
}

pub fn serialize_structure_crate_input_create_project_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProjectVersionInput,
) {
    if let Some(var_13) = &input.project_arn {
        object.key("ProjectArn").string(var_13);
    }
    if let Some(var_14) = &input.version_name {
        object.key("VersionName").string(var_14);
    }
    if let Some(var_15) = &input.output_config {
        let mut object_16 = object.key("OutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_output_config(&mut object_16, var_15);
        object_16.finish();
    }
    if let Some(var_17) = &input.training_data {
        let mut object_18 = object.key("TrainingData").start_object();
        crate::json_ser::serialize_structure_crate_model_training_data(&mut object_18, var_17);
        object_18.finish();
    }
    if let Some(var_19) = &input.testing_data {
        let mut object_20 = object.key("TestingData").start_object();
        crate::json_ser::serialize_structure_crate_model_testing_data(&mut object_20, var_19);
        object_20.finish();
    }
    if let Some(var_21) = &input.tags {
        let mut object_22 = object.key("Tags").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23).string(value_24);
            }
        }
        object_22.finish();
    }
    if let Some(var_25) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_25);
    }
}

pub fn serialize_structure_crate_input_create_stream_processor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStreamProcessorInput,
) {
    if let Some(var_26) = &input.input {
        let mut object_27 = object.key("Input").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_input(
            &mut object_27,
            var_26,
        );
        object_27.finish();
    }
    if let Some(var_28) = &input.output {
        let mut object_29 = object.key("Output").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_output(
            &mut object_29,
            var_28,
        );
        object_29.finish();
    }
    if let Some(var_30) = &input.name {
        object.key("Name").string(var_30);
    }
    if let Some(var_31) = &input.settings {
        let mut object_32 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_processor_settings(
            &mut object_32,
            var_31,
        );
        object_32.finish();
    }
    if let Some(var_33) = &input.role_arn {
        object.key("RoleArn").string(var_33);
    }
    if let Some(var_34) = &input.tags {
        let mut object_35 = object.key("Tags").start_object();
        for (key_36, value_37) in var_34 {
            {
                object_35.key(key_36).string(value_37);
            }
        }
        object_35.finish();
    }
}

pub fn serialize_structure_crate_input_delete_collection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCollectionInput,
) {
    if let Some(var_38) = &input.collection_id {
        object.key("CollectionId").string(var_38);
    }
}

pub fn serialize_structure_crate_input_delete_faces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFacesInput,
) {
    if let Some(var_39) = &input.collection_id {
        object.key("CollectionId").string(var_39);
    }
    if let Some(var_40) = &input.face_ids {
        let mut array_41 = object.key("FaceIds").start_array();
        for item_42 in var_40 {
            {
                array_41.value().string(item_42);
            }
        }
        array_41.finish();
    }
}

pub fn serialize_structure_crate_input_delete_project_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectInput,
) {
    if let Some(var_43) = &input.project_arn {
        object.key("ProjectArn").string(var_43);
    }
}

pub fn serialize_structure_crate_input_delete_project_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteProjectVersionInput,
) {
    if let Some(var_44) = &input.project_version_arn {
        object.key("ProjectVersionArn").string(var_44);
    }
}

pub fn serialize_structure_crate_input_delete_stream_processor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStreamProcessorInput,
) {
    if let Some(var_45) = &input.name {
        object.key("Name").string(var_45);
    }
}

pub fn serialize_structure_crate_input_describe_collection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCollectionInput,
) {
    if let Some(var_46) = &input.collection_id {
        object.key("CollectionId").string(var_46);
    }
}

pub fn serialize_structure_crate_input_describe_projects_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectsInput,
) {
    if let Some(var_47) = &input.next_token {
        object.key("NextToken").string(var_47);
    }
    if let Some(var_48) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_48).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_project_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeProjectVersionsInput,
) {
    if let Some(var_49) = &input.project_arn {
        object.key("ProjectArn").string(var_49);
    }
    if let Some(var_50) = &input.version_names {
        let mut array_51 = object.key("VersionNames").start_array();
        for item_52 in var_50 {
            {
                array_51.value().string(item_52);
            }
        }
        array_51.finish();
    }
    if let Some(var_53) = &input.next_token {
        object.key("NextToken").string(var_53);
    }
    if let Some(var_54) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_54).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_stream_processor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStreamProcessorInput,
) {
    if let Some(var_55) = &input.name {
        object.key("Name").string(var_55);
    }
}

pub fn serialize_structure_crate_input_detect_custom_labels_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectCustomLabelsInput,
) {
    if let Some(var_56) = &input.project_version_arn {
        object.key("ProjectVersionArn").string(var_56);
    }
    if let Some(var_57) = &input.image {
        let mut object_58 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_58, var_57);
        object_58.finish();
    }
    if let Some(var_59) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_59).into()),
        );
    }
    if let Some(var_60) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_60).into()),
        );
    }
}

pub fn serialize_structure_crate_input_detect_faces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectFacesInput,
) {
    if let Some(var_61) = &input.image {
        let mut object_62 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_62, var_61);
        object_62.finish();
    }
    if let Some(var_63) = &input.attributes {
        let mut array_64 = object.key("Attributes").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
}

pub fn serialize_structure_crate_input_detect_labels_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectLabelsInput,
) {
    if let Some(var_66) = &input.image {
        let mut object_67 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_67, var_66);
        object_67.finish();
    }
    if let Some(var_68) = &input.max_labels {
        object.key("MaxLabels").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_68).into()),
        );
    }
    if let Some(var_69) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_69).into()),
        );
    }
}

pub fn serialize_structure_crate_input_detect_moderation_labels_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectModerationLabelsInput,
) {
    if let Some(var_70) = &input.image {
        let mut object_71 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_71, var_70);
        object_71.finish();
    }
    if let Some(var_72) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_72).into()),
        );
    }
    if let Some(var_73) = &input.human_loop_config {
        let mut object_74 = object.key("HumanLoopConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_config(&mut object_74, var_73);
        object_74.finish();
    }
}

pub fn serialize_structure_crate_input_detect_protective_equipment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectProtectiveEquipmentInput,
) {
    if let Some(var_75) = &input.image {
        let mut object_76 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_76, var_75);
        object_76.finish();
    }
    if let Some(var_77) = &input.summarization_attributes {
        let mut object_78 = object.key("SummarizationAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_protective_equipment_summarization_attributes(&mut object_78, var_77);
        object_78.finish();
    }
}

pub fn serialize_structure_crate_input_detect_text_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetectTextInput,
) {
    if let Some(var_79) = &input.image {
        let mut object_80 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_80, var_79);
        object_80.finish();
    }
    if let Some(var_81) = &input.filters {
        let mut object_82 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_detect_text_filters(
            &mut object_82,
            var_81,
        );
        object_82.finish();
    }
}

pub fn serialize_structure_crate_input_get_celebrity_info_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCelebrityInfoInput,
) {
    if let Some(var_83) = &input.id {
        object.key("Id").string(var_83);
    }
}

pub fn serialize_structure_crate_input_get_celebrity_recognition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCelebrityRecognitionInput,
) {
    if let Some(var_84) = &input.job_id {
        object.key("JobId").string(var_84);
    }
    if let Some(var_85) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_85).into()),
        );
    }
    if let Some(var_86) = &input.next_token {
        object.key("NextToken").string(var_86);
    }
    if let Some(var_87) = &input.sort_by {
        object.key("SortBy").string(var_87.as_str());
    }
}

pub fn serialize_structure_crate_input_get_content_moderation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContentModerationInput,
) {
    if let Some(var_88) = &input.job_id {
        object.key("JobId").string(var_88);
    }
    if let Some(var_89) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_89).into()),
        );
    }
    if let Some(var_90) = &input.next_token {
        object.key("NextToken").string(var_90);
    }
    if let Some(var_91) = &input.sort_by {
        object.key("SortBy").string(var_91.as_str());
    }
}

pub fn serialize_structure_crate_input_get_face_detection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFaceDetectionInput,
) {
    if let Some(var_92) = &input.job_id {
        object.key("JobId").string(var_92);
    }
    if let Some(var_93) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_93).into()),
        );
    }
    if let Some(var_94) = &input.next_token {
        object.key("NextToken").string(var_94);
    }
}

pub fn serialize_structure_crate_input_get_face_search_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFaceSearchInput,
) {
    if let Some(var_95) = &input.job_id {
        object.key("JobId").string(var_95);
    }
    if let Some(var_96) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_96).into()),
        );
    }
    if let Some(var_97) = &input.next_token {
        object.key("NextToken").string(var_97);
    }
    if let Some(var_98) = &input.sort_by {
        object.key("SortBy").string(var_98.as_str());
    }
}

pub fn serialize_structure_crate_input_get_label_detection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLabelDetectionInput,
) {
    if let Some(var_99) = &input.job_id {
        object.key("JobId").string(var_99);
    }
    if let Some(var_100) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_100).into()),
        );
    }
    if let Some(var_101) = &input.next_token {
        object.key("NextToken").string(var_101);
    }
    if let Some(var_102) = &input.sort_by {
        object.key("SortBy").string(var_102.as_str());
    }
}

pub fn serialize_structure_crate_input_get_person_tracking_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPersonTrackingInput,
) {
    if let Some(var_103) = &input.job_id {
        object.key("JobId").string(var_103);
    }
    if let Some(var_104) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    if let Some(var_105) = &input.next_token {
        object.key("NextToken").string(var_105);
    }
    if let Some(var_106) = &input.sort_by {
        object.key("SortBy").string(var_106.as_str());
    }
}

pub fn serialize_structure_crate_input_get_segment_detection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSegmentDetectionInput,
) {
    if let Some(var_107) = &input.job_id {
        object.key("JobId").string(var_107);
    }
    if let Some(var_108) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_108).into()),
        );
    }
    if let Some(var_109) = &input.next_token {
        object.key("NextToken").string(var_109);
    }
}

pub fn serialize_structure_crate_input_get_text_detection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTextDetectionInput,
) {
    if let Some(var_110) = &input.job_id {
        object.key("JobId").string(var_110);
    }
    if let Some(var_111) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    if let Some(var_112) = &input.next_token {
        object.key("NextToken").string(var_112);
    }
}

pub fn serialize_structure_crate_input_index_faces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::IndexFacesInput,
) {
    if let Some(var_113) = &input.collection_id {
        object.key("CollectionId").string(var_113);
    }
    if let Some(var_114) = &input.image {
        let mut object_115 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_115, var_114);
        object_115.finish();
    }
    if let Some(var_116) = &input.external_image_id {
        object.key("ExternalImageId").string(var_116);
    }
    if let Some(var_117) = &input.detection_attributes {
        let mut array_118 = object.key("DetectionAttributes").start_array();
        for item_119 in var_117 {
            {
                array_118.value().string(item_119.as_str());
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.max_faces {
        object.key("MaxFaces").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_120).into()),
        );
    }
    if let Some(var_121) = &input.quality_filter {
        object.key("QualityFilter").string(var_121.as_str());
    }
}

pub fn serialize_structure_crate_input_list_collections_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCollectionsInput,
) {
    if let Some(var_122) = &input.next_token {
        object.key("NextToken").string(var_122);
    }
    if let Some(var_123) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_123).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_faces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFacesInput,
) {
    if let Some(var_124) = &input.collection_id {
        object.key("CollectionId").string(var_124);
    }
    if let Some(var_125) = &input.next_token {
        object.key("NextToken").string(var_125);
    }
    if let Some(var_126) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_126).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_stream_processors_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStreamProcessorsInput,
) {
    if let Some(var_127) = &input.next_token {
        object.key("NextToken").string(var_127);
    }
    if let Some(var_128) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_128).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_129) = &input.resource_arn {
        object.key("ResourceArn").string(var_129);
    }
}

pub fn serialize_structure_crate_input_recognize_celebrities_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RecognizeCelebritiesInput,
) {
    if let Some(var_130) = &input.image {
        let mut object_131 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_131, var_130);
        object_131.finish();
    }
}

pub fn serialize_structure_crate_input_search_faces_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchFacesInput,
) {
    if let Some(var_132) = &input.collection_id {
        object.key("CollectionId").string(var_132);
    }
    if let Some(var_133) = &input.face_id {
        object.key("FaceId").string(var_133);
    }
    if let Some(var_134) = &input.max_faces {
        object.key("MaxFaces").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    if let Some(var_135) = &input.face_match_threshold {
        object.key("FaceMatchThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_135).into()),
        );
    }
}

pub fn serialize_structure_crate_input_search_faces_by_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchFacesByImageInput,
) {
    if let Some(var_136) = &input.collection_id {
        object.key("CollectionId").string(var_136);
    }
    if let Some(var_137) = &input.image {
        let mut object_138 = object.key("Image").start_object();
        crate::json_ser::serialize_structure_crate_model_image(&mut object_138, var_137);
        object_138.finish();
    }
    if let Some(var_139) = &input.max_faces {
        object.key("MaxFaces").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_139).into()),
        );
    }
    if let Some(var_140) = &input.face_match_threshold {
        object.key("FaceMatchThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_140).into()),
        );
    }
    if let Some(var_141) = &input.quality_filter {
        object.key("QualityFilter").string(var_141.as_str());
    }
}

pub fn serialize_structure_crate_input_start_celebrity_recognition_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCelebrityRecognitionInput,
) {
    if let Some(var_142) = &input.video {
        let mut object_143 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_143, var_142);
        object_143.finish();
    }
    if let Some(var_144) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_144);
    }
    if let Some(var_145) = &input.notification_channel {
        let mut object_146 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_146,
            var_145,
        );
        object_146.finish();
    }
    if let Some(var_147) = &input.job_tag {
        object.key("JobTag").string(var_147);
    }
}

pub fn serialize_structure_crate_input_start_content_moderation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartContentModerationInput,
) {
    if let Some(var_148) = &input.video {
        let mut object_149 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_149, var_148);
        object_149.finish();
    }
    if let Some(var_150) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_150).into()),
        );
    }
    if let Some(var_151) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_151);
    }
    if let Some(var_152) = &input.notification_channel {
        let mut object_153 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_153,
            var_152,
        );
        object_153.finish();
    }
    if let Some(var_154) = &input.job_tag {
        object.key("JobTag").string(var_154);
    }
}

pub fn serialize_structure_crate_input_start_face_detection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFaceDetectionInput,
) {
    if let Some(var_155) = &input.video {
        let mut object_156 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_156, var_155);
        object_156.finish();
    }
    if let Some(var_157) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_157);
    }
    if let Some(var_158) = &input.notification_channel {
        let mut object_159 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_159,
            var_158,
        );
        object_159.finish();
    }
    if let Some(var_160) = &input.face_attributes {
        object.key("FaceAttributes").string(var_160.as_str());
    }
    if let Some(var_161) = &input.job_tag {
        object.key("JobTag").string(var_161);
    }
}

pub fn serialize_structure_crate_input_start_face_search_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFaceSearchInput,
) {
    if let Some(var_162) = &input.video {
        let mut object_163 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_163, var_162);
        object_163.finish();
    }
    if let Some(var_164) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_164);
    }
    if let Some(var_165) = &input.face_match_threshold {
        object.key("FaceMatchThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_165).into()),
        );
    }
    if let Some(var_166) = &input.collection_id {
        object.key("CollectionId").string(var_166);
    }
    if let Some(var_167) = &input.notification_channel {
        let mut object_168 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_168,
            var_167,
        );
        object_168.finish();
    }
    if let Some(var_169) = &input.job_tag {
        object.key("JobTag").string(var_169);
    }
}

pub fn serialize_structure_crate_input_start_label_detection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartLabelDetectionInput,
) {
    if let Some(var_170) = &input.video {
        let mut object_171 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_171, var_170);
        object_171.finish();
    }
    if let Some(var_172) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_172);
    }
    if let Some(var_173) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.notification_channel {
        let mut object_175 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_175,
            var_174,
        );
        object_175.finish();
    }
    if let Some(var_176) = &input.job_tag {
        object.key("JobTag").string(var_176);
    }
}

pub fn serialize_structure_crate_input_start_person_tracking_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartPersonTrackingInput,
) {
    if let Some(var_177) = &input.video {
        let mut object_178 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_178, var_177);
        object_178.finish();
    }
    if let Some(var_179) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_179);
    }
    if let Some(var_180) = &input.notification_channel {
        let mut object_181 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_181,
            var_180,
        );
        object_181.finish();
    }
    if let Some(var_182) = &input.job_tag {
        object.key("JobTag").string(var_182);
    }
}

pub fn serialize_structure_crate_input_start_project_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartProjectVersionInput,
) {
    if let Some(var_183) = &input.project_version_arn {
        object.key("ProjectVersionArn").string(var_183);
    }
    if let Some(var_184) = &input.min_inference_units {
        object.key("MinInferenceUnits").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_184).into()),
        );
    }
}

pub fn serialize_structure_crate_input_start_segment_detection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSegmentDetectionInput,
) {
    if let Some(var_185) = &input.video {
        let mut object_186 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_186, var_185);
        object_186.finish();
    }
    if let Some(var_187) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_187);
    }
    if let Some(var_188) = &input.notification_channel {
        let mut object_189 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_189,
            var_188,
        );
        object_189.finish();
    }
    if let Some(var_190) = &input.job_tag {
        object.key("JobTag").string(var_190);
    }
    if let Some(var_191) = &input.filters {
        let mut object_192 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_start_segment_detection_filters(
            &mut object_192,
            var_191,
        );
        object_192.finish();
    }
    if let Some(var_193) = &input.segment_types {
        let mut array_194 = object.key("SegmentTypes").start_array();
        for item_195 in var_193 {
            {
                array_194.value().string(item_195.as_str());
            }
        }
        array_194.finish();
    }
}

pub fn serialize_structure_crate_input_start_stream_processor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartStreamProcessorInput,
) {
    if let Some(var_196) = &input.name {
        object.key("Name").string(var_196);
    }
}

pub fn serialize_structure_crate_input_start_text_detection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTextDetectionInput,
) {
    if let Some(var_197) = &input.video {
        let mut object_198 = object.key("Video").start_object();
        crate::json_ser::serialize_structure_crate_model_video(&mut object_198, var_197);
        object_198.finish();
    }
    if let Some(var_199) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_199);
    }
    if let Some(var_200) = &input.notification_channel {
        let mut object_201 = object.key("NotificationChannel").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_channel(
            &mut object_201,
            var_200,
        );
        object_201.finish();
    }
    if let Some(var_202) = &input.job_tag {
        object.key("JobTag").string(var_202);
    }
    if let Some(var_203) = &input.filters {
        let mut object_204 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_start_text_detection_filters(
            &mut object_204,
            var_203,
        );
        object_204.finish();
    }
}

pub fn serialize_structure_crate_input_stop_project_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopProjectVersionInput,
) {
    if let Some(var_205) = &input.project_version_arn {
        object.key("ProjectVersionArn").string(var_205);
    }
}

pub fn serialize_structure_crate_input_stop_stream_processor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopStreamProcessorInput,
) {
    if let Some(var_206) = &input.name {
        object.key("Name").string(var_206);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_207) = &input.resource_arn {
        object.key("ResourceArn").string(var_207);
    }
    if let Some(var_208) = &input.tags {
        let mut object_209 = object.key("Tags").start_object();
        for (key_210, value_211) in var_208 {
            {
                object_209.key(key_210).string(value_211);
            }
        }
        object_209.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_212) = &input.resource_arn {
        object.key("ResourceArn").string(var_212);
    }
    if let Some(var_213) = &input.tag_keys {
        let mut array_214 = object.key("TagKeys").start_array();
        for item_215 in var_213 {
            {
                array_214.value().string(item_215);
            }
        }
        array_214.finish();
    }
}

pub fn serialize_structure_crate_model_image(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Image,
) {
    if let Some(var_216) = &input.bytes {
        object
            .key("Bytes")
            .string_unchecked(&smithy_types::base64::encode(var_216));
    }
    if let Some(var_217) = &input.s3_object {
        let mut object_218 = object.key("S3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_object(&mut object_218, var_217);
        object_218.finish();
    }
}

pub fn serialize_structure_crate_model_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputConfig,
) {
    if let Some(var_219) = &input.s3_bucket {
        object.key("S3Bucket").string(var_219);
    }
    if let Some(var_220) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_220);
    }
}

pub fn serialize_structure_crate_model_training_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TrainingData,
) {
    if let Some(var_221) = &input.assets {
        let mut array_222 = object.key("Assets").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset(&mut object_224, item_223);
                object_224.finish();
            }
        }
        array_222.finish();
    }
}

pub fn serialize_structure_crate_model_testing_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TestingData,
) {
    if let Some(var_225) = &input.assets {
        let mut array_226 = object.key("Assets").start_array();
        for item_227 in var_225 {
            {
                let mut object_228 = array_226.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset(&mut object_228, item_227);
                object_228.finish();
            }
        }
        array_226.finish();
    }
    if input.auto_create {
        object.key("AutoCreate").boolean(input.auto_create);
    }
}

pub fn serialize_structure_crate_model_stream_processor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessorInput,
) {
    if let Some(var_229) = &input.kinesis_video_stream {
        let mut object_230 = object.key("KinesisVideoStream").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_video_stream(
            &mut object_230,
            var_229,
        );
        object_230.finish();
    }
}

pub fn serialize_structure_crate_model_stream_processor_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessorOutput,
) {
    if let Some(var_231) = &input.kinesis_data_stream {
        let mut object_232 = object.key("KinesisDataStream").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_data_stream(
            &mut object_232,
            var_231,
        );
        object_232.finish();
    }
}

pub fn serialize_structure_crate_model_stream_processor_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamProcessorSettings,
) {
    if let Some(var_233) = &input.face_search {
        let mut object_234 = object.key("FaceSearch").start_object();
        crate::json_ser::serialize_structure_crate_model_face_search_settings(
            &mut object_234,
            var_233,
        );
        object_234.finish();
    }
}

pub fn serialize_structure_crate_model_human_loop_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopConfig,
) {
    if let Some(var_235) = &input.human_loop_name {
        object.key("HumanLoopName").string(var_235);
    }
    if let Some(var_236) = &input.flow_definition_arn {
        object.key("FlowDefinitionArn").string(var_236);
    }
    if let Some(var_237) = &input.data_attributes {
        let mut object_238 = object.key("DataAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_human_loop_data_attributes(
            &mut object_238,
            var_237,
        );
        object_238.finish();
    }
}

pub fn serialize_structure_crate_model_protective_equipment_summarization_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProtectiveEquipmentSummarizationAttributes,
) {
    if let Some(var_239) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_239).into()),
        );
    }
    if let Some(var_240) = &input.required_equipment_types {
        let mut array_241 = object.key("RequiredEquipmentTypes").start_array();
        for item_242 in var_240 {
            {
                array_241.value().string(item_242.as_str());
            }
        }
        array_241.finish();
    }
}

pub fn serialize_structure_crate_model_detect_text_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DetectTextFilters,
) {
    if let Some(var_243) = &input.word_filter {
        let mut object_244 = object.key("WordFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_detection_filter(&mut object_244, var_243);
        object_244.finish();
    }
    if let Some(var_245) = &input.regions_of_interest {
        let mut array_246 = object.key("RegionsOfInterest").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_region_of_interest(
                    &mut object_248,
                    item_247,
                );
                object_248.finish();
            }
        }
        array_246.finish();
    }
}

pub fn serialize_structure_crate_model_video(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Video,
) {
    if let Some(var_249) = &input.s3_object {
        let mut object_250 = object.key("S3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_object(&mut object_250, var_249);
        object_250.finish();
    }
}

pub fn serialize_structure_crate_model_notification_channel(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationChannel,
) {
    if let Some(var_251) = &input.sns_topic_arn {
        object.key("SNSTopicArn").string(var_251);
    }
    if let Some(var_252) = &input.role_arn {
        object.key("RoleArn").string(var_252);
    }
}

pub fn serialize_structure_crate_model_start_segment_detection_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartSegmentDetectionFilters,
) {
    if let Some(var_253) = &input.technical_cue_filter {
        let mut object_254 = object.key("TechnicalCueFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_start_technical_cue_detection_filter(
            &mut object_254,
            var_253,
        );
        object_254.finish();
    }
    if let Some(var_255) = &input.shot_filter {
        let mut object_256 = object.key("ShotFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_start_shot_detection_filter(
            &mut object_256,
            var_255,
        );
        object_256.finish();
    }
}

pub fn serialize_structure_crate_model_start_text_detection_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartTextDetectionFilters,
) {
    if let Some(var_257) = &input.word_filter {
        let mut object_258 = object.key("WordFilter").start_object();
        crate::json_ser::serialize_structure_crate_model_detection_filter(&mut object_258, var_257);
        object_258.finish();
    }
    if let Some(var_259) = &input.regions_of_interest {
        let mut array_260 = object.key("RegionsOfInterest").start_array();
        for item_261 in var_259 {
            {
                let mut object_262 = array_260.value().start_object();
                crate::json_ser::serialize_structure_crate_model_region_of_interest(
                    &mut object_262,
                    item_261,
                );
                object_262.finish();
            }
        }
        array_260.finish();
    }
}

pub fn serialize_structure_crate_model_s3_object(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Object,
) {
    if let Some(var_263) = &input.bucket {
        object.key("Bucket").string(var_263);
    }
    if let Some(var_264) = &input.name {
        object.key("Name").string(var_264);
    }
    if let Some(var_265) = &input.version {
        object.key("Version").string(var_265);
    }
}

pub fn serialize_structure_crate_model_asset(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Asset,
) {
    if let Some(var_266) = &input.ground_truth_manifest {
        let mut object_267 = object.key("GroundTruthManifest").start_object();
        crate::json_ser::serialize_structure_crate_model_ground_truth_manifest(
            &mut object_267,
            var_266,
        );
        object_267.finish();
    }
}

pub fn serialize_structure_crate_model_kinesis_video_stream(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisVideoStream,
) {
    if let Some(var_268) = &input.arn {
        object.key("Arn").string(var_268);
    }
}

pub fn serialize_structure_crate_model_kinesis_data_stream(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisDataStream,
) {
    if let Some(var_269) = &input.arn {
        object.key("Arn").string(var_269);
    }
}

pub fn serialize_structure_crate_model_face_search_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FaceSearchSettings,
) {
    if let Some(var_270) = &input.collection_id {
        object.key("CollectionId").string(var_270);
    }
    if let Some(var_271) = &input.face_match_threshold {
        object.key("FaceMatchThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_271).into()),
        );
    }
}

pub fn serialize_structure_crate_model_human_loop_data_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HumanLoopDataAttributes,
) {
    if let Some(var_272) = &input.content_classifiers {
        let mut array_273 = object.key("ContentClassifiers").start_array();
        for item_274 in var_272 {
            {
                array_273.value().string(item_274.as_str());
            }
        }
        array_273.finish();
    }
}

pub fn serialize_structure_crate_model_detection_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DetectionFilter,
) {
    if let Some(var_275) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_275).into()),
        );
    }
    if let Some(var_276) = &input.min_bounding_box_height {
        object.key("MinBoundingBoxHeight").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_276).into()),
        );
    }
    if let Some(var_277) = &input.min_bounding_box_width {
        object.key("MinBoundingBoxWidth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_277).into()),
        );
    }
}

pub fn serialize_structure_crate_model_region_of_interest(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegionOfInterest,
) {
    if let Some(var_278) = &input.bounding_box {
        let mut object_279 = object.key("BoundingBox").start_object();
        crate::json_ser::serialize_structure_crate_model_bounding_box(&mut object_279, var_278);
        object_279.finish();
    }
}

pub fn serialize_structure_crate_model_start_technical_cue_detection_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartTechnicalCueDetectionFilter,
) {
    if let Some(var_280) = &input.min_segment_confidence {
        object.key("MinSegmentConfidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_280).into()),
        );
    }
    if let Some(var_281) = &input.black_frame {
        let mut object_282 = object.key("BlackFrame").start_object();
        crate::json_ser::serialize_structure_crate_model_black_frame(&mut object_282, var_281);
        object_282.finish();
    }
}

pub fn serialize_structure_crate_model_start_shot_detection_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartShotDetectionFilter,
) {
    if let Some(var_283) = &input.min_segment_confidence {
        object.key("MinSegmentConfidence").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_283).into()),
        );
    }
}

pub fn serialize_structure_crate_model_ground_truth_manifest(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GroundTruthManifest,
) {
    if let Some(var_284) = &input.s3_object {
        let mut object_285 = object.key("S3Object").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_object(&mut object_285, var_284);
        object_285.finish();
    }
}

pub fn serialize_structure_crate_model_bounding_box(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BoundingBox,
) {
    if let Some(var_286) = &input.width {
        object.key("Width").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_286).into()),
        );
    }
    if let Some(var_287) = &input.height {
        object.key("Height").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_287).into()),
        );
    }
    if let Some(var_288) = &input.left {
        object.key("Left").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_288).into()),
        );
    }
    if let Some(var_289) = &input.top {
        object.key("Top").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_289).into()),
        );
    }
}

pub fn serialize_structure_crate_model_black_frame(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlackFrame,
) {
    if let Some(var_290) = &input.max_pixel_threshold {
        object.key("MaxPixelThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_290).into()),
        );
    }
    if let Some(var_291) = &input.min_coverage_percentage {
        object.key("MinCoveragePercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_291).into()),
        );
    }
}
