// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_project_versions_output_next_token(
    input: &crate::operation::describe_project_versions::DescribeProjectVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_projects_output_next_token(
    input: &crate::operation::describe_projects::DescribeProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_celebrity_recognition_output_next_token(
    input: &crate::operation::get_celebrity_recognition::GetCelebrityRecognitionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_content_moderation_output_next_token(
    input: &crate::operation::get_content_moderation::GetContentModerationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_face_detection_output_next_token(
    input: &crate::operation::get_face_detection::GetFaceDetectionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_face_search_output_next_token(
    input: &crate::operation::get_face_search::GetFaceSearchOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_label_detection_output_next_token(
    input: &crate::operation::get_label_detection::GetLabelDetectionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_person_tracking_output_next_token(
    input: &crate::operation::get_person_tracking::GetPersonTrackingOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_segment_detection_output_next_token(
    input: &crate::operation::get_segment_detection::GetSegmentDetectionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_text_detection_output_next_token(
    input: &crate::operation::get_text_detection::GetTextDetectionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_collections_output_next_token(
    input: &crate::operation::list_collections::ListCollectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dataset_entries_output_next_token(
    input: &crate::operation::list_dataset_entries::ListDatasetEntriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dataset_labels_output_next_token(
    input: &crate::operation::list_dataset_labels::ListDatasetLabelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_faces_output_next_token(
    input: &crate::operation::list_faces::ListFacesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_project_policies_output_next_token(
    input: &crate::operation::list_project_policies::ListProjectPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_stream_processors_output_next_token(
    input: &crate::operation::list_stream_processors::ListStreamProcessorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_project_versions_output_project_version_descriptions(
    input: crate::operation::describe_project_versions::DescribeProjectVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProjectVersionDescription>> {
    let input = match input.project_version_descriptions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_projects_output_project_descriptions(
    input: crate::operation::describe_projects::DescribeProjectsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProjectDescription>> {
    let input = match input.project_descriptions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_collections_output_collection_ids(
    input: crate::operation::list_collections::ListCollectionsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.collection_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dataset_entries_output_dataset_entries(
    input: crate::operation::list_dataset_entries::ListDatasetEntriesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.dataset_entries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dataset_labels_output_dataset_label_descriptions(
    input: crate::operation::list_dataset_labels::ListDatasetLabelsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DatasetLabelDescription>> {
    let input = match input.dataset_label_descriptions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_faces_output_faces(
    input: crate::operation::list_faces::ListFacesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Face>> {
    let input = match input.faces {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_project_policies_output_project_policies(
    input: crate::operation::list_project_policies::ListProjectPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProjectPolicy>> {
    let input = match input.project_policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
