// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You are not authorized to perform the action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p> A User with the same Id already exists within the collection, or the update or deletion of the User caused an inconsistent state. ** </p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The number of in-progress human reviews you have has exceeded the number allowed.</p>
    HumanLoopQuotaExceededException(crate::types::error::HumanLoopQuotaExceededException),
    /// <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input parameters is different from the previous call to the operation.</p>
    IdempotentParameterMismatchException(crate::types::error::IdempotentParameterMismatchException),
    /// <p>The input image size exceeds the allowed limit. If you are calling DetectProtectiveEquipment, the image size or resolution exceeds the allowed limit. For more information, see Guidelines and quotas in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>
    ImageTooLargeException(crate::types::error::ImageTooLargeException),
    /// <p>Amazon Rekognition experienced a service issue. Try your call again.</p>
    InternalServerError(crate::types::error::InternalServerError),
    /// <p>The provided image format is not supported. </p>
    InvalidImageFormatException(crate::types::error::InvalidImageFormatException),
    /// <p>Indicates that a provided manifest file is empty or larger than the allowed limit.</p>
    InvalidManifestException(crate::types::error::InvalidManifestException),
    /// <p>Pagination token in the request is not valid.</p>
    InvalidPaginationTokenException(crate::types::error::InvalidPaginationTokenException),
    /// <p>Input parameter violated a constraint. Validate your parameter before calling the API operation again.</p>
    InvalidParameterException(crate::types::error::InvalidParameterException),
    /// <p>The supplied revision id for the project policy is invalid.</p>
    InvalidPolicyRevisionIdException(crate::types::error::InvalidPolicyRevisionIdException),
    /// <p>Amazon Rekognition is unable to access the S3 object specified in the request.</p>
    InvalidS3ObjectException(crate::types::error::InvalidS3ObjectException),
    /// <p>An Amazon Rekognition service limit was exceeded. For example, if you start too many jobs concurrently, subsequent calls to start operations (ex: <code>StartLabelDetection</code>) will raise a <code>LimitExceededException</code> exception (HTTP status code: 400) until the number of concurrently running jobs is below the Amazon Rekognition service limit. </p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The format of the project policy document that you supplied to <code>PutProjectPolicy</code> is incorrect. </p>
    MalformedPolicyDocumentException(crate::types::error::MalformedPolicyDocumentException),
    /// <p>The number of requests exceeded your throughput limit. If you want to increase this limit, contact Amazon Rekognition.</p>
    ProvisionedThroughputExceededException(crate::types::error::ProvisionedThroughputExceededException),
    /// <p>A resource with the specified ID already exists.</p>
    ResourceAlreadyExistsException(crate::types::error::ResourceAlreadyExistsException),
    /// <p>The specified resource is already being used.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>The resource specified in the request cannot be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The requested resource isn't ready. For example, this exception occurs when you call <code>DetectCustomLabels</code> with a model version that isn't deployed. </p>
    ResourceNotReadyException(crate::types::error::ResourceNotReadyException),
    /// <p></p>
    /// <p>The size of the collection exceeds the allowed limit. For more information, see Guidelines and quotas in Amazon Rekognition in the Amazon Rekognition Developer Guide. </p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Occurs when a given sessionId is not found.</p>
    SessionNotFoundException(crate::types::error::SessionNotFoundException),
    /// <p>Amazon Rekognition is temporarily unable to process the request. Try your call again.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The file size or duration of the supplied media is too large. The maximum file size is 10GB. The maximum duration is 6 hours. </p>
    VideoTooLargeException(crate::types::error::VideoTooLargeException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::HumanLoopQuotaExceededException(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatchException(inner) => inner.fmt(f),
            Error::ImageTooLargeException(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidImageFormatException(inner) => inner.fmt(f),
            Error::InvalidManifestException(inner) => inner.fmt(f),
            Error::InvalidPaginationTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidPolicyRevisionIdException(inner) => inner.fmt(f),
            Error::InvalidS3ObjectException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MalformedPolicyDocumentException(inner) => inner.fmt(f),
            Error::ProvisionedThroughputExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceNotReadyException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::SessionNotFoundException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::VideoTooLargeException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_faces::AssociateFacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_faces::AssociateFacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_faces::AssociateFacesError> for Error {
    fn from(err: crate::operation::associate_faces::AssociateFacesError) -> Self {
        match err {
            crate::operation::associate_faces::AssociateFacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_faces::AssociateFacesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_faces::AssociateFacesError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::associate_faces::AssociateFacesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::associate_faces::AssociateFacesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::associate_faces::AssociateFacesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::associate_faces::AssociateFacesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_faces::AssociateFacesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_faces::AssociateFacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_faces::AssociateFacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::compare_faces::CompareFacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::compare_faces::CompareFacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::compare_faces::CompareFacesError> for Error {
    fn from(err: crate::operation::compare_faces::CompareFacesError) -> Self {
        match err {
            crate::operation::compare_faces::CompareFacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::compare_faces::CompareFacesError::ImageTooLargeException(inner) => Error::ImageTooLargeException(inner),
            crate::operation::compare_faces::CompareFacesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::compare_faces::CompareFacesError::InvalidImageFormatException(inner) => Error::InvalidImageFormatException(inner),
            crate::operation::compare_faces::CompareFacesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::compare_faces::CompareFacesError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::compare_faces::CompareFacesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::compare_faces::CompareFacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::compare_faces::CompareFacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_project_version::CopyProjectVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_project_version::CopyProjectVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::copy_project_version::CopyProjectVersionError> for Error {
    fn from(err: crate::operation::copy_project_version::CopyProjectVersionError) -> Self {
        match err {
            crate::operation::copy_project_version::CopyProjectVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::copy_project_version::CopyProjectVersionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::copy_project_version::CopyProjectVersionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::copy_project_version::CopyProjectVersionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::copy_project_version::CopyProjectVersionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::copy_project_version::CopyProjectVersionError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::copy_project_version::CopyProjectVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::copy_project_version::CopyProjectVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::copy_project_version::CopyProjectVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::copy_project_version::CopyProjectVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_collection::CreateCollectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_collection::CreateCollectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_collection::CreateCollectionError> for Error {
    fn from(err: crate::operation::create_collection::CreateCollectionError) -> Self {
        match err {
            crate::operation::create_collection::CreateCollectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_collection::CreateCollectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_collection::CreateCollectionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_collection::CreateCollectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::create_collection::CreateCollectionError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_collection::CreateCollectionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_collection::CreateCollectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_collection::CreateCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_dataset::CreateDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_dataset::CreateDatasetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_dataset::CreateDatasetError> for Error {
    fn from(err: crate::operation::create_dataset::CreateDatasetError) -> Self {
        match err {
            crate::operation::create_dataset::CreateDatasetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_dataset::CreateDatasetError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_dataset::CreateDatasetError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_dataset::CreateDatasetError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::create_dataset::CreateDatasetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_dataset::CreateDatasetError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_dataset::CreateDatasetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_dataset::CreateDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError> for Error {
    fn from(err: crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError) -> Self {
        match err {
            crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_face_liveness_session::CreateFaceLivenessSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_project::CreateProjectError> for Error {
    fn from(err: crate::operation::create_project::CreateProjectError) -> Self {
        match err {
            crate::operation::create_project::CreateProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_project::CreateProjectError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_project::CreateProjectError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_project::CreateProjectError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_project::CreateProjectError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::create_project::CreateProjectError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_project::CreateProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_project::CreateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project_version::CreateProjectVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project_version::CreateProjectVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_project_version::CreateProjectVersionError> for Error {
    fn from(err: crate::operation::create_project_version::CreateProjectVersionError) -> Self {
        match err {
            crate::operation::create_project_version::CreateProjectVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_project_version::CreateProjectVersionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_project_version::CreateProjectVersionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::create_project_version::CreateProjectVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_project_version::CreateProjectVersionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::create_project_version::CreateProjectVersionError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::create_project_version::CreateProjectVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_project_version::CreateProjectVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_project_version::CreateProjectVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_project_version::CreateProjectVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_stream_processor::CreateStreamProcessorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_stream_processor::CreateStreamProcessorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_stream_processor::CreateStreamProcessorError> for Error {
    fn from(err: crate::operation::create_stream_processor::CreateStreamProcessorError) -> Self {
        match err {
            crate::operation::create_stream_processor::CreateStreamProcessorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_stream_processor::CreateStreamProcessorError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_stream_processor::CreateStreamProcessorError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::create_stream_processor::CreateStreamProcessorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_stream_processor::CreateStreamProcessorError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::create_stream_processor::CreateStreamProcessorError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::create_stream_processor::CreateStreamProcessorError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_stream_processor::CreateStreamProcessorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_stream_processor::CreateStreamProcessorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user::CreateUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_user::CreateUserError> for Error {
    fn from(err: crate::operation::create_user::CreateUserError) -> Self {
        match err {
            crate::operation::create_user::CreateUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_user::CreateUserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_user::CreateUserError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::create_user::CreateUserError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::create_user::CreateUserError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_user::CreateUserError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::create_user::CreateUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_user::CreateUserError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_user::CreateUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_user::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_collection::DeleteCollectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_collection::DeleteCollectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_collection::DeleteCollectionError> for Error {
    fn from(err: crate::operation::delete_collection::DeleteCollectionError) -> Self {
        match err {
            crate::operation::delete_collection::DeleteCollectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_collection::DeleteCollectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_collection::DeleteCollectionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_collection::DeleteCollectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::delete_collection::DeleteCollectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_collection::DeleteCollectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_collection::DeleteCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_dataset::DeleteDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_dataset::DeleteDatasetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_dataset::DeleteDatasetError> for Error {
    fn from(err: crate::operation::delete_dataset::DeleteDatasetError) -> Self {
        match err {
            crate::operation::delete_dataset::DeleteDatasetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_dataset::DeleteDatasetError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_faces::DeleteFacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_faces::DeleteFacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_faces::DeleteFacesError> for Error {
    fn from(err: crate::operation::delete_faces::DeleteFacesError) -> Self {
        match err {
            crate::operation::delete_faces::DeleteFacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_faces::DeleteFacesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_faces::DeleteFacesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_faces::DeleteFacesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::delete_faces::DeleteFacesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_faces::DeleteFacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_faces::DeleteFacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_project::DeleteProjectError> for Error {
    fn from(err: crate::operation::delete_project::DeleteProjectError) -> Self {
        match err {
            crate::operation::delete_project::DeleteProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_project::DeleteProjectError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_project::DeleteProjectError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_project::DeleteProjectError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::delete_project::DeleteProjectError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_project::DeleteProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_project::DeleteProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_project::DeleteProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_policy::DeleteProjectPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_policy::DeleteProjectPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_project_policy::DeleteProjectPolicyError> for Error {
    fn from(err: crate::operation::delete_project_policy::DeleteProjectPolicyError) -> Self {
        match err {
            crate::operation::delete_project_policy::DeleteProjectPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_project_policy::DeleteProjectPolicyError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_project_policy::DeleteProjectPolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::delete_project_policy::DeleteProjectPolicyError::InvalidPolicyRevisionIdException(inner) => {
                Error::InvalidPolicyRevisionIdException(inner)
            }
            crate::operation::delete_project_policy::DeleteProjectPolicyError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::delete_project_policy::DeleteProjectPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_project_policy::DeleteProjectPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_project_policy::DeleteProjectPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_version::DeleteProjectVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_version::DeleteProjectVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_project_version::DeleteProjectVersionError> for Error {
    fn from(err: crate::operation::delete_project_version::DeleteProjectVersionError) -> Self {
        match err {
            crate::operation::delete_project_version::DeleteProjectVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_project_version::DeleteProjectVersionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_project_version::DeleteProjectVersionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::delete_project_version::DeleteProjectVersionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::delete_project_version::DeleteProjectVersionError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::delete_project_version::DeleteProjectVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_project_version::DeleteProjectVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_project_version::DeleteProjectVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_stream_processor::DeleteStreamProcessorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_stream_processor::DeleteStreamProcessorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_stream_processor::DeleteStreamProcessorError> for Error {
    fn from(err: crate::operation::delete_stream_processor::DeleteStreamProcessorError) -> Self {
        match err {
            crate::operation::delete_stream_processor::DeleteStreamProcessorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_stream_processor::DeleteStreamProcessorError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_stream_processor::DeleteStreamProcessorError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::delete_stream_processor::DeleteStreamProcessorError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::delete_stream_processor::DeleteStreamProcessorError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::delete_stream_processor::DeleteStreamProcessorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_stream_processor::DeleteStreamProcessorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_stream_processor::DeleteStreamProcessorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_user::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_user::DeleteUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_user::DeleteUserError> for Error {
    fn from(err: crate::operation::delete_user::DeleteUserError) -> Self {
        match err {
            crate::operation::delete_user::DeleteUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_user::DeleteUserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_user::DeleteUserError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::delete_user::DeleteUserError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::delete_user::DeleteUserError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_user::DeleteUserError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::delete_user::DeleteUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_user::DeleteUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_user::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_collection::DescribeCollectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_collection::DescribeCollectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_collection::DescribeCollectionError> for Error {
    fn from(err: crate::operation::describe_collection::DescribeCollectionError) -> Self {
        match err {
            crate::operation::describe_collection::DescribeCollectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_collection::DescribeCollectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_collection::DescribeCollectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::describe_collection::DescribeCollectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::describe_collection::DescribeCollectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_collection::DescribeCollectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_collection::DescribeCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_dataset::DescribeDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_dataset::DescribeDatasetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_dataset::DescribeDatasetError> for Error {
    fn from(err: crate::operation::describe_dataset::DescribeDatasetError) -> Self {
        match err {
            crate::operation::describe_dataset::DescribeDatasetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_dataset::DescribeDatasetError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::describe_dataset::DescribeDatasetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_projects::DescribeProjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_projects::DescribeProjectsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_projects::DescribeProjectsError> for Error {
    fn from(err: crate::operation::describe_projects::DescribeProjectsError) -> Self {
        match err {
            crate::operation::describe_projects::DescribeProjectsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_projects::DescribeProjectsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::describe_projects::DescribeProjectsError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::describe_projects::DescribeProjectsError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_projects::DescribeProjectsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::describe_projects::DescribeProjectsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_projects::DescribeProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_project_versions::DescribeProjectVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_project_versions::DescribeProjectVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_project_versions::DescribeProjectVersionsError> for Error {
    fn from(err: crate::operation::describe_project_versions::DescribeProjectVersionsError) -> Self {
        match err {
            crate::operation::describe_project_versions::DescribeProjectVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_project_versions::DescribeProjectVersionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::describe_project_versions::DescribeProjectVersionsError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::describe_project_versions::DescribeProjectVersionsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::describe_project_versions::DescribeProjectVersionsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::describe_project_versions::DescribeProjectVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_project_versions::DescribeProjectVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_project_versions::DescribeProjectVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_stream_processor::DescribeStreamProcessorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_stream_processor::DescribeStreamProcessorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_stream_processor::DescribeStreamProcessorError> for Error {
    fn from(err: crate::operation::describe_stream_processor::DescribeStreamProcessorError) -> Self {
        match err {
            crate::operation::describe_stream_processor::DescribeStreamProcessorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_stream_processor::DescribeStreamProcessorError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::describe_stream_processor::DescribeStreamProcessorError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::describe_stream_processor::DescribeStreamProcessorError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::describe_stream_processor::DescribeStreamProcessorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_stream_processor::DescribeStreamProcessorError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_stream_processor::DescribeStreamProcessorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_custom_labels::DetectCustomLabelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_custom_labels::DetectCustomLabelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_custom_labels::DetectCustomLabelsError> for Error {
    fn from(err: crate::operation::detect_custom_labels::DetectCustomLabelsError) -> Self {
        match err {
            crate::operation::detect_custom_labels::DetectCustomLabelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::detect_custom_labels::DetectCustomLabelsError::ImageTooLargeException(inner) => Error::ImageTooLargeException(inner),
            crate::operation::detect_custom_labels::DetectCustomLabelsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::detect_custom_labels::DetectCustomLabelsError::InvalidImageFormatException(inner) => {
                Error::InvalidImageFormatException(inner)
            }
            crate::operation::detect_custom_labels::DetectCustomLabelsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::detect_custom_labels::DetectCustomLabelsError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::detect_custom_labels::DetectCustomLabelsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::detect_custom_labels::DetectCustomLabelsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::detect_custom_labels::DetectCustomLabelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::detect_custom_labels::DetectCustomLabelsError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::operation::detect_custom_labels::DetectCustomLabelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::detect_custom_labels::DetectCustomLabelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_faces::DetectFacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_faces::DetectFacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_faces::DetectFacesError> for Error {
    fn from(err: crate::operation::detect_faces::DetectFacesError) -> Self {
        match err {
            crate::operation::detect_faces::DetectFacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::detect_faces::DetectFacesError::ImageTooLargeException(inner) => Error::ImageTooLargeException(inner),
            crate::operation::detect_faces::DetectFacesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::detect_faces::DetectFacesError::InvalidImageFormatException(inner) => Error::InvalidImageFormatException(inner),
            crate::operation::detect_faces::DetectFacesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::detect_faces::DetectFacesError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::detect_faces::DetectFacesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::detect_faces::DetectFacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::detect_faces::DetectFacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_labels::DetectLabelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_labels::DetectLabelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_labels::DetectLabelsError> for Error {
    fn from(err: crate::operation::detect_labels::DetectLabelsError) -> Self {
        match err {
            crate::operation::detect_labels::DetectLabelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::detect_labels::DetectLabelsError::ImageTooLargeException(inner) => Error::ImageTooLargeException(inner),
            crate::operation::detect_labels::DetectLabelsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::detect_labels::DetectLabelsError::InvalidImageFormatException(inner) => Error::InvalidImageFormatException(inner),
            crate::operation::detect_labels::DetectLabelsError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::detect_labels::DetectLabelsError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::detect_labels::DetectLabelsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::detect_labels::DetectLabelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::detect_labels::DetectLabelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_moderation_labels::DetectModerationLabelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_moderation_labels::DetectModerationLabelsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_moderation_labels::DetectModerationLabelsError> for Error {
    fn from(err: crate::operation::detect_moderation_labels::DetectModerationLabelsError) -> Self {
        match err {
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::HumanLoopQuotaExceededException(inner) => {
                Error::HumanLoopQuotaExceededException(inner)
            }
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::ImageTooLargeException(inner) => {
                Error::ImageTooLargeException(inner)
            }
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::InvalidImageFormatException(inner) => {
                Error::InvalidImageFormatException(inner)
            }
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::detect_moderation_labels::DetectModerationLabelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError> for Error {
    fn from(err: crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError) -> Self {
        match err {
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError::ImageTooLargeException(inner) => {
                Error::ImageTooLargeException(inner)
            }
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError::InvalidImageFormatException(inner) => {
                Error::InvalidImageFormatException(inner)
            }
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_text::DetectTextError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::detect_text::DetectTextError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_text::DetectTextError> for Error {
    fn from(err: crate::operation::detect_text::DetectTextError) -> Self {
        match err {
            crate::operation::detect_text::DetectTextError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::detect_text::DetectTextError::ImageTooLargeException(inner) => Error::ImageTooLargeException(inner),
            crate::operation::detect_text::DetectTextError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::detect_text::DetectTextError::InvalidImageFormatException(inner) => Error::InvalidImageFormatException(inner),
            crate::operation::detect_text::DetectTextError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::detect_text::DetectTextError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::detect_text::DetectTextError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::detect_text::DetectTextError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::detect_text::DetectTextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_faces::DisassociateFacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_faces::DisassociateFacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_faces::DisassociateFacesError> for Error {
    fn from(err: crate::operation::disassociate_faces::DisassociateFacesError) -> Self {
        match err {
            crate::operation::disassociate_faces::DisassociateFacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_faces::DisassociateFacesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_faces::DisassociateFacesError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::disassociate_faces::DisassociateFacesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::disassociate_faces::DisassociateFacesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::disassociate_faces::DisassociateFacesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::disassociate_faces::DisassociateFacesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_faces::DisassociateFacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_faces::DisassociateFacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError> for Error {
    fn from(err: crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError) -> Self {
        match err {
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_celebrity_info::GetCelebrityInfoError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_celebrity_info::GetCelebrityInfoError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_celebrity_info::GetCelebrityInfoError> for Error {
    fn from(err: crate::operation::get_celebrity_info::GetCelebrityInfoError) -> Self {
        match err {
            crate::operation::get_celebrity_info::GetCelebrityInfoError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_celebrity_info::GetCelebrityInfoError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_celebrity_info::GetCelebrityInfoError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_celebrity_info::GetCelebrityInfoError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_celebrity_info::GetCelebrityInfoError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_celebrity_info::GetCelebrityInfoError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_celebrity_info::GetCelebrityInfoError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError> for Error {
    fn from(err: crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError) -> Self {
        match err {
            crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_celebrity_recognition::GetCelebrityRecognitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_content_moderation::GetContentModerationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_content_moderation::GetContentModerationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_content_moderation::GetContentModerationError> for Error {
    fn from(err: crate::operation::get_content_moderation::GetContentModerationError) -> Self {
        match err {
            crate::operation::get_content_moderation::GetContentModerationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_content_moderation::GetContentModerationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_content_moderation::GetContentModerationError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::get_content_moderation::GetContentModerationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_content_moderation::GetContentModerationError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_content_moderation::GetContentModerationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_content_moderation::GetContentModerationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_content_moderation::GetContentModerationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_face_detection::GetFaceDetectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_face_detection::GetFaceDetectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_face_detection::GetFaceDetectionError> for Error {
    fn from(err: crate::operation::get_face_detection::GetFaceDetectionError) -> Self {
        match err {
            crate::operation::get_face_detection::GetFaceDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_face_detection::GetFaceDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_face_detection::GetFaceDetectionError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::get_face_detection::GetFaceDetectionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_face_detection::GetFaceDetectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_face_detection::GetFaceDetectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_face_detection::GetFaceDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_face_detection::GetFaceDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError> for Error {
    fn from(err: crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError) -> Self {
        match err {
            crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError::ProvisionedThroughputExceededException(
                inner,
            ) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError::SessionNotFoundException(inner) => {
                Error::SessionNotFoundException(inner)
            }
            crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_face_search::GetFaceSearchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_face_search::GetFaceSearchError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_face_search::GetFaceSearchError> for Error {
    fn from(err: crate::operation::get_face_search::GetFaceSearchError) -> Self {
        match err {
            crate::operation::get_face_search::GetFaceSearchError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_face_search::GetFaceSearchError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_face_search::GetFaceSearchError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::get_face_search::GetFaceSearchError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_face_search::GetFaceSearchError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_face_search::GetFaceSearchError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_face_search::GetFaceSearchError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_face_search::GetFaceSearchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_label_detection::GetLabelDetectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_label_detection::GetLabelDetectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_label_detection::GetLabelDetectionError> for Error {
    fn from(err: crate::operation::get_label_detection::GetLabelDetectionError) -> Self {
        match err {
            crate::operation::get_label_detection::GetLabelDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_label_detection::GetLabelDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_label_detection::GetLabelDetectionError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::get_label_detection::GetLabelDetectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_label_detection::GetLabelDetectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_label_detection::GetLabelDetectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_label_detection::GetLabelDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_label_detection::GetLabelDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_media_analysis_job::GetMediaAnalysisJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_media_analysis_job::GetMediaAnalysisJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_media_analysis_job::GetMediaAnalysisJobError> for Error {
    fn from(err: crate::operation::get_media_analysis_job::GetMediaAnalysisJobError) -> Self {
        match err {
            crate::operation::get_media_analysis_job::GetMediaAnalysisJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_media_analysis_job::GetMediaAnalysisJobError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_media_analysis_job::GetMediaAnalysisJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_media_analysis_job::GetMediaAnalysisJobError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_media_analysis_job::GetMediaAnalysisJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_media_analysis_job::GetMediaAnalysisJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_media_analysis_job::GetMediaAnalysisJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_person_tracking::GetPersonTrackingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_person_tracking::GetPersonTrackingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_person_tracking::GetPersonTrackingError> for Error {
    fn from(err: crate::operation::get_person_tracking::GetPersonTrackingError) -> Self {
        match err {
            crate::operation::get_person_tracking::GetPersonTrackingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_person_tracking::GetPersonTrackingError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_person_tracking::GetPersonTrackingError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::get_person_tracking::GetPersonTrackingError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_person_tracking::GetPersonTrackingError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_person_tracking::GetPersonTrackingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_person_tracking::GetPersonTrackingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_person_tracking::GetPersonTrackingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_segment_detection::GetSegmentDetectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_segment_detection::GetSegmentDetectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_segment_detection::GetSegmentDetectionError> for Error {
    fn from(err: crate::operation::get_segment_detection::GetSegmentDetectionError) -> Self {
        match err {
            crate::operation::get_segment_detection::GetSegmentDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_segment_detection::GetSegmentDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_segment_detection::GetSegmentDetectionError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::get_segment_detection::GetSegmentDetectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_segment_detection::GetSegmentDetectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_segment_detection::GetSegmentDetectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_segment_detection::GetSegmentDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_segment_detection::GetSegmentDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_text_detection::GetTextDetectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_text_detection::GetTextDetectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_text_detection::GetTextDetectionError> for Error {
    fn from(err: crate::operation::get_text_detection::GetTextDetectionError) -> Self {
        match err {
            crate::operation::get_text_detection::GetTextDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_text_detection::GetTextDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_text_detection::GetTextDetectionError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::get_text_detection::GetTextDetectionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_text_detection::GetTextDetectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::get_text_detection::GetTextDetectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_text_detection::GetTextDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_text_detection::GetTextDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::index_faces::IndexFacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::index_faces::IndexFacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::index_faces::IndexFacesError> for Error {
    fn from(err: crate::operation::index_faces::IndexFacesError) -> Self {
        match err {
            crate::operation::index_faces::IndexFacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::index_faces::IndexFacesError::ImageTooLargeException(inner) => Error::ImageTooLargeException(inner),
            crate::operation::index_faces::IndexFacesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::index_faces::IndexFacesError::InvalidImageFormatException(inner) => Error::InvalidImageFormatException(inner),
            crate::operation::index_faces::IndexFacesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::index_faces::IndexFacesError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::index_faces::IndexFacesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::index_faces::IndexFacesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::index_faces::IndexFacesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::index_faces::IndexFacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::index_faces::IndexFacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_collections::ListCollectionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_collections::ListCollectionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_collections::ListCollectionsError> for Error {
    fn from(err: crate::operation::list_collections::ListCollectionsError) -> Self {
        match err {
            crate::operation::list_collections::ListCollectionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_collections::ListCollectionsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_collections::ListCollectionsError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::list_collections::ListCollectionsError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::list_collections::ListCollectionsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::list_collections::ListCollectionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_collections::ListCollectionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_collections::ListCollectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dataset_entries::ListDatasetEntriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dataset_entries::ListDatasetEntriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_dataset_entries::ListDatasetEntriesError> for Error {
    fn from(err: crate::operation::list_dataset_entries::ListDatasetEntriesError) -> Self {
        match err {
            crate::operation::list_dataset_entries::ListDatasetEntriesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::list_dataset_entries::ListDatasetEntriesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_dataset_entries::ListDatasetEntriesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::list_dataset_entries::ListDatasetEntriesError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_dataset_entries::ListDatasetEntriesError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::operation::list_dataset_entries::ListDatasetEntriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dataset_labels::ListDatasetLabelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_dataset_labels::ListDatasetLabelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_dataset_labels::ListDatasetLabelsError> for Error {
    fn from(err: crate::operation::list_dataset_labels::ListDatasetLabelsError) -> Self {
        match err {
            crate::operation::list_dataset_labels::ListDatasetLabelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_dataset_labels::ListDatasetLabelsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_dataset_labels::ListDatasetLabelsError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::list_dataset_labels::ListDatasetLabelsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_dataset_labels::ListDatasetLabelsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::list_dataset_labels::ListDatasetLabelsError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::list_dataset_labels::ListDatasetLabelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_dataset_labels::ListDatasetLabelsError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::operation::list_dataset_labels::ListDatasetLabelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_dataset_labels::ListDatasetLabelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_faces::ListFacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_faces::ListFacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_faces::ListFacesError> for Error {
    fn from(err: crate::operation::list_faces::ListFacesError) -> Self {
        match err {
            crate::operation::list_faces::ListFacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_faces::ListFacesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_faces::ListFacesError::InvalidPaginationTokenException(inner) => Error::InvalidPaginationTokenException(inner),
            crate::operation::list_faces::ListFacesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::list_faces::ListFacesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::list_faces::ListFacesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_faces::ListFacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_faces::ListFacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError> for Error {
    fn from(err: crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError) -> Self {
        match err {
            crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_media_analysis_jobs::ListMediaAnalysisJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_policies::ListProjectPoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_policies::ListProjectPoliciesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_project_policies::ListProjectPoliciesError> for Error {
    fn from(err: crate::operation::list_project_policies::ListProjectPoliciesError) -> Self {
        match err {
            crate::operation::list_project_policies::ListProjectPoliciesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_project_policies::ListProjectPoliciesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_project_policies::ListProjectPoliciesError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::list_project_policies::ListProjectPoliciesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_project_policies::ListProjectPoliciesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::list_project_policies::ListProjectPoliciesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_project_policies::ListProjectPoliciesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_project_policies::ListProjectPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stream_processors::ListStreamProcessorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stream_processors::ListStreamProcessorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stream_processors::ListStreamProcessorsError> for Error {
    fn from(err: crate::operation::list_stream_processors::ListStreamProcessorsError) -> Self {
        match err {
            crate::operation::list_stream_processors::ListStreamProcessorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_stream_processors::ListStreamProcessorsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_stream_processors::ListStreamProcessorsError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::operation::list_stream_processors::ListStreamProcessorsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_stream_processors::ListStreamProcessorsError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::list_stream_processors::ListStreamProcessorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_stream_processors::ListStreamProcessorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_users::ListUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_users::ListUsersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_users::ListUsersError> for Error {
    fn from(err: crate::operation::list_users::ListUsersError) -> Self {
        match err {
            crate::operation::list_users::ListUsersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_users::ListUsersError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::list_users::ListUsersError::InvalidPaginationTokenException(inner) => Error::InvalidPaginationTokenException(inner),
            crate::operation::list_users::ListUsersError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::list_users::ListUsersError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::list_users::ListUsersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_users::ListUsersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_users::ListUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_project_policy::PutProjectPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_project_policy::PutProjectPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_project_policy::PutProjectPolicyError> for Error {
    fn from(err: crate::operation::put_project_policy::PutProjectPolicyError) -> Self {
        match err {
            crate::operation::put_project_policy::PutProjectPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_project_policy::PutProjectPolicyError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::put_project_policy::PutProjectPolicyError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::put_project_policy::PutProjectPolicyError::InvalidPolicyRevisionIdException(inner) => {
                Error::InvalidPolicyRevisionIdException(inner)
            }
            crate::operation::put_project_policy::PutProjectPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_project_policy::PutProjectPolicyError::MalformedPolicyDocumentException(inner) => {
                Error::MalformedPolicyDocumentException(inner)
            }
            crate::operation::put_project_policy::PutProjectPolicyError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::put_project_policy::PutProjectPolicyError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::put_project_policy::PutProjectPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_project_policy::PutProjectPolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::put_project_policy::PutProjectPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_project_policy::PutProjectPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::recognize_celebrities::RecognizeCelebritiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::recognize_celebrities::RecognizeCelebritiesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::recognize_celebrities::RecognizeCelebritiesError> for Error {
    fn from(err: crate::operation::recognize_celebrities::RecognizeCelebritiesError) -> Self {
        match err {
            crate::operation::recognize_celebrities::RecognizeCelebritiesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::recognize_celebrities::RecognizeCelebritiesError::ImageTooLargeException(inner) => Error::ImageTooLargeException(inner),
            crate::operation::recognize_celebrities::RecognizeCelebritiesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::recognize_celebrities::RecognizeCelebritiesError::InvalidImageFormatException(inner) => {
                Error::InvalidImageFormatException(inner)
            }
            crate::operation::recognize_celebrities::RecognizeCelebritiesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::recognize_celebrities::RecognizeCelebritiesError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::recognize_celebrities::RecognizeCelebritiesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::recognize_celebrities::RecognizeCelebritiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::recognize_celebrities::RecognizeCelebritiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_faces::SearchFacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_faces::SearchFacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_faces::SearchFacesError> for Error {
    fn from(err: crate::operation::search_faces::SearchFacesError) -> Self {
        match err {
            crate::operation::search_faces::SearchFacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_faces::SearchFacesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::search_faces::SearchFacesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::search_faces::SearchFacesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::search_faces::SearchFacesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_faces::SearchFacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_faces::SearchFacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_faces_by_image::SearchFacesByImageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_faces_by_image::SearchFacesByImageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_faces_by_image::SearchFacesByImageError> for Error {
    fn from(err: crate::operation::search_faces_by_image::SearchFacesByImageError) -> Self {
        match err {
            crate::operation::search_faces_by_image::SearchFacesByImageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_faces_by_image::SearchFacesByImageError::ImageTooLargeException(inner) => Error::ImageTooLargeException(inner),
            crate::operation::search_faces_by_image::SearchFacesByImageError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::search_faces_by_image::SearchFacesByImageError::InvalidImageFormatException(inner) => {
                Error::InvalidImageFormatException(inner)
            }
            crate::operation::search_faces_by_image::SearchFacesByImageError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::search_faces_by_image::SearchFacesByImageError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::search_faces_by_image::SearchFacesByImageError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::search_faces_by_image::SearchFacesByImageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::search_faces_by_image::SearchFacesByImageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_faces_by_image::SearchFacesByImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_users::SearchUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_users::SearchUsersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_users::SearchUsersError> for Error {
    fn from(err: crate::operation::search_users::SearchUsersError) -> Self {
        match err {
            crate::operation::search_users::SearchUsersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_users::SearchUsersError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::search_users::SearchUsersError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::search_users::SearchUsersError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::search_users::SearchUsersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_users::SearchUsersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_users::SearchUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_users_by_image::SearchUsersByImageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_users_by_image::SearchUsersByImageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_users_by_image::SearchUsersByImageError> for Error {
    fn from(err: crate::operation::search_users_by_image::SearchUsersByImageError) -> Self {
        match err {
            crate::operation::search_users_by_image::SearchUsersByImageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_users_by_image::SearchUsersByImageError::ImageTooLargeException(inner) => Error::ImageTooLargeException(inner),
            crate::operation::search_users_by_image::SearchUsersByImageError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::search_users_by_image::SearchUsersByImageError::InvalidImageFormatException(inner) => {
                Error::InvalidImageFormatException(inner)
            }
            crate::operation::search_users_by_image::SearchUsersByImageError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::search_users_by_image::SearchUsersByImageError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::search_users_by_image::SearchUsersByImageError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::search_users_by_image::SearchUsersByImageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::search_users_by_image::SearchUsersByImageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_users_by_image::SearchUsersByImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError> for Error {
    fn from(err: crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError) -> Self {
        match err {
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::VideoTooLargeException(inner) => {
                Error::VideoTooLargeException(inner)
            }
            crate::operation::start_celebrity_recognition::StartCelebrityRecognitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_content_moderation::StartContentModerationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_content_moderation::StartContentModerationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_content_moderation::StartContentModerationError> for Error {
    fn from(err: crate::operation::start_content_moderation::StartContentModerationError) -> Self {
        match err {
            crate::operation::start_content_moderation::StartContentModerationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_content_moderation::StartContentModerationError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::start_content_moderation::StartContentModerationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_content_moderation::StartContentModerationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_content_moderation::StartContentModerationError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::start_content_moderation::StartContentModerationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::start_content_moderation::StartContentModerationError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_content_moderation::StartContentModerationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_content_moderation::StartContentModerationError::VideoTooLargeException(inner) => {
                Error::VideoTooLargeException(inner)
            }
            crate::operation::start_content_moderation::StartContentModerationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_face_detection::StartFaceDetectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_face_detection::StartFaceDetectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_face_detection::StartFaceDetectionError> for Error {
    fn from(err: crate::operation::start_face_detection::StartFaceDetectionError) -> Self {
        match err {
            crate::operation::start_face_detection::StartFaceDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_face_detection::StartFaceDetectionError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::start_face_detection::StartFaceDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_face_detection::StartFaceDetectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_face_detection::StartFaceDetectionError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::start_face_detection::StartFaceDetectionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_face_detection::StartFaceDetectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_face_detection::StartFaceDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_face_detection::StartFaceDetectionError::VideoTooLargeException(inner) => Error::VideoTooLargeException(inner),
            crate::operation::start_face_detection::StartFaceDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_face_search::StartFaceSearchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_face_search::StartFaceSearchError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_face_search::StartFaceSearchError> for Error {
    fn from(err: crate::operation::start_face_search::StartFaceSearchError) -> Self {
        match err {
            crate::operation::start_face_search::StartFaceSearchError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_face_search::StartFaceSearchError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::start_face_search::StartFaceSearchError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_face_search::StartFaceSearchError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::start_face_search::StartFaceSearchError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::start_face_search::StartFaceSearchError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_face_search::StartFaceSearchError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_face_search::StartFaceSearchError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_face_search::StartFaceSearchError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_face_search::StartFaceSearchError::VideoTooLargeException(inner) => Error::VideoTooLargeException(inner),
            crate::operation::start_face_search::StartFaceSearchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_label_detection::StartLabelDetectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_label_detection::StartLabelDetectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_label_detection::StartLabelDetectionError> for Error {
    fn from(err: crate::operation::start_label_detection::StartLabelDetectionError) -> Self {
        match err {
            crate::operation::start_label_detection::StartLabelDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_label_detection::StartLabelDetectionError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::start_label_detection::StartLabelDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_label_detection::StartLabelDetectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_label_detection::StartLabelDetectionError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::start_label_detection::StartLabelDetectionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_label_detection::StartLabelDetectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_label_detection::StartLabelDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_label_detection::StartLabelDetectionError::VideoTooLargeException(inner) => Error::VideoTooLargeException(inner),
            crate::operation::start_label_detection::StartLabelDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_media_analysis_job::StartMediaAnalysisJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_media_analysis_job::StartMediaAnalysisJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_media_analysis_job::StartMediaAnalysisJobError> for Error {
    fn from(err: crate::operation::start_media_analysis_job::StartMediaAnalysisJobError) -> Self {
        match err {
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::InvalidManifestException(inner) => {
                Error::InvalidManifestException(inner)
            }
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::ResourceNotReadyException(inner) => {
                Error::ResourceNotReadyException(inner)
            }
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_person_tracking::StartPersonTrackingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_person_tracking::StartPersonTrackingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_person_tracking::StartPersonTrackingError> for Error {
    fn from(err: crate::operation::start_person_tracking::StartPersonTrackingError) -> Self {
        match err {
            crate::operation::start_person_tracking::StartPersonTrackingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_person_tracking::StartPersonTrackingError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::start_person_tracking::StartPersonTrackingError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_person_tracking::StartPersonTrackingError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_person_tracking::StartPersonTrackingError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::start_person_tracking::StartPersonTrackingError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_person_tracking::StartPersonTrackingError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_person_tracking::StartPersonTrackingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_person_tracking::StartPersonTrackingError::VideoTooLargeException(inner) => Error::VideoTooLargeException(inner),
            crate::operation::start_person_tracking::StartPersonTrackingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_project_version::StartProjectVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_project_version::StartProjectVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_project_version::StartProjectVersionError> for Error {
    fn from(err: crate::operation::start_project_version::StartProjectVersionError) -> Self {
        match err {
            crate::operation::start_project_version::StartProjectVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_project_version::StartProjectVersionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_project_version::StartProjectVersionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_project_version::StartProjectVersionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_project_version::StartProjectVersionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_project_version::StartProjectVersionError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::start_project_version::StartProjectVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_project_version::StartProjectVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_project_version::StartProjectVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_segment_detection::StartSegmentDetectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_segment_detection::StartSegmentDetectionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_segment_detection::StartSegmentDetectionError> for Error {
    fn from(err: crate::operation::start_segment_detection::StartSegmentDetectionError) -> Self {
        match err {
            crate::operation::start_segment_detection::StartSegmentDetectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_segment_detection::StartSegmentDetectionError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::start_segment_detection::StartSegmentDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_segment_detection::StartSegmentDetectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_segment_detection::StartSegmentDetectionError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::start_segment_detection::StartSegmentDetectionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::start_segment_detection::StartSegmentDetectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_segment_detection::StartSegmentDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_segment_detection::StartSegmentDetectionError::VideoTooLargeException(inner) => {
                Error::VideoTooLargeException(inner)
            }
            crate::operation::start_segment_detection::StartSegmentDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_stream_processor::StartStreamProcessorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_stream_processor::StartStreamProcessorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_stream_processor::StartStreamProcessorError> for Error {
    fn from(err: crate::operation::start_stream_processor::StartStreamProcessorError) -> Self {
        match err {
            crate::operation::start_stream_processor::StartStreamProcessorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_stream_processor::StartStreamProcessorError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_stream_processor::StartStreamProcessorError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_stream_processor::StartStreamProcessorError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_stream_processor::StartStreamProcessorError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::start_stream_processor::StartStreamProcessorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_stream_processor::StartStreamProcessorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_stream_processor::StartStreamProcessorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_text_detection::StartTextDetectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_text_detection::StartTextDetectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_text_detection::StartTextDetectionError> for Error {
    fn from(err: crate::operation::start_text_detection::StartTextDetectionError) -> Self {
        match err {
            crate::operation::start_text_detection::StartTextDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_text_detection::StartTextDetectionError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::operation::start_text_detection::StartTextDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_text_detection::StartTextDetectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::start_text_detection::StartTextDetectionError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::operation::start_text_detection::StartTextDetectionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_text_detection::StartTextDetectionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::start_text_detection::StartTextDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_text_detection::StartTextDetectionError::VideoTooLargeException(inner) => Error::VideoTooLargeException(inner),
            crate::operation::start_text_detection::StartTextDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_project_version::StopProjectVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_project_version::StopProjectVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_project_version::StopProjectVersionError> for Error {
    fn from(err: crate::operation::stop_project_version::StopProjectVersionError) -> Self {
        match err {
            crate::operation::stop_project_version::StopProjectVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_project_version::StopProjectVersionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::stop_project_version::StopProjectVersionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::stop_project_version::StopProjectVersionError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::stop_project_version::StopProjectVersionError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::stop_project_version::StopProjectVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_project_version::StopProjectVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_project_version::StopProjectVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_stream_processor::StopStreamProcessorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_stream_processor::StopStreamProcessorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_stream_processor::StopStreamProcessorError> for Error {
    fn from(err: crate::operation::stop_stream_processor::StopStreamProcessorError) -> Self {
        match err {
            crate::operation::stop_stream_processor::StopStreamProcessorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_stream_processor::StopStreamProcessorError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::stop_stream_processor::StopStreamProcessorError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::stop_stream_processor::StopStreamProcessorError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::stop_stream_processor::StopStreamProcessorError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::stop_stream_processor::StopStreamProcessorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_stream_processor::StopStreamProcessorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_stream_processor::StopStreamProcessorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::tag_resource::TagResourceError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::tag_resource::TagResourceError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::untag_resource::UntagResourceError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_dataset_entries::UpdateDatasetEntriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_dataset_entries::UpdateDatasetEntriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_dataset_entries::UpdateDatasetEntriesError> for Error {
    fn from(err: crate::operation::update_dataset_entries::UpdateDatasetEntriesError) -> Self {
        match err {
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_stream_processor::UpdateStreamProcessorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_stream_processor::UpdateStreamProcessorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_stream_processor::UpdateStreamProcessorError> for Error {
    fn from(err: crate::operation::update_stream_processor::UpdateStreamProcessorError) -> Self {
        match err {
            crate::operation::update_stream_processor::UpdateStreamProcessorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_stream_processor::UpdateStreamProcessorError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::update_stream_processor::UpdateStreamProcessorError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::update_stream_processor::UpdateStreamProcessorError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::operation::update_stream_processor::UpdateStreamProcessorError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::update_stream_processor::UpdateStreamProcessorError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_stream_processor::UpdateStreamProcessorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_stream_processor::UpdateStreamProcessorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::HumanLoopQuotaExceededException(inner) => inner.source(),
            Error::IdempotentParameterMismatchException(inner) => inner.source(),
            Error::ImageTooLargeException(inner) => inner.source(),
            Error::InternalServerError(inner) => inner.source(),
            Error::InvalidImageFormatException(inner) => inner.source(),
            Error::InvalidManifestException(inner) => inner.source(),
            Error::InvalidPaginationTokenException(inner) => inner.source(),
            Error::InvalidParameterException(inner) => inner.source(),
            Error::InvalidPolicyRevisionIdException(inner) => inner.source(),
            Error::InvalidS3ObjectException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::MalformedPolicyDocumentException(inner) => inner.source(),
            Error::ProvisionedThroughputExceededException(inner) => inner.source(),
            Error::ResourceAlreadyExistsException(inner) => inner.source(),
            Error::ResourceInUseException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ResourceNotReadyException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::SessionNotFoundException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::VideoTooLargeException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::HumanLoopQuotaExceededException(e) => e.request_id(),
            Self::IdempotentParameterMismatchException(e) => e.request_id(),
            Self::ImageTooLargeException(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::InvalidImageFormatException(e) => e.request_id(),
            Self::InvalidManifestException(e) => e.request_id(),
            Self::InvalidPaginationTokenException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidPolicyRevisionIdException(e) => e.request_id(),
            Self::InvalidS3ObjectException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MalformedPolicyDocumentException(e) => e.request_id(),
            Self::ProvisionedThroughputExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceNotReadyException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::SessionNotFoundException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::VideoTooLargeException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
