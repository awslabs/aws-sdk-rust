// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCollectionInput {
    /// <p>ID of the collection to delete.</p>
    #[doc(hidden)]
    pub collection_id: std::option::Option<std::string::String>,
}
impl DeleteCollectionInput {
    /// <p>ID of the collection to delete.</p>
    pub fn collection_id(&self) -> std::option::Option<&str> {
        self.collection_id.as_deref()
    }
}
impl DeleteCollectionInput {
    /// Creates a new builder-style object to manufacture [`DeleteCollectionInput`](crate::operation::delete_collection::DeleteCollectionInput).
    pub fn builder() -> crate::operation::delete_collection::builders::DeleteCollectionInputBuilder
    {
        crate::operation::delete_collection::builders::DeleteCollectionInputBuilder::default()
    }
}

/// A builder for [`DeleteCollectionInput`](crate::operation::delete_collection::DeleteCollectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteCollectionInputBuilder {
    pub(crate) collection_id: std::option::Option<std::string::String>,
}
impl DeleteCollectionInputBuilder {
    /// <p>ID of the collection to delete.</p>
    pub fn collection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.collection_id = Some(input.into());
        self
    }
    /// <p>ID of the collection to delete.</p>
    pub fn set_collection_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.collection_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteCollectionInput`](crate::operation::delete_collection::DeleteCollectionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_collection::DeleteCollectionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_collection::DeleteCollectionInput {
            collection_id: self.collection_id,
        })
    }
}
