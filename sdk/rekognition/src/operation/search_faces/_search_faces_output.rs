// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchFacesOutput {
    /// <p>ID of the face that was searched for matches in a collection.</p>
    pub searched_face_id: ::std::option::Option<::std::string::String>,
    /// <p>An array of faces that matched the input face, along with the confidence in the match.</p>
    pub face_matches: ::std::option::Option<::std::vec::Vec<crate::types::FaceMatch>>,
    /// <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>
    pub face_model_version: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl SearchFacesOutput {
    /// <p>ID of the face that was searched for matches in a collection.</p>
    pub fn searched_face_id(&self) -> ::std::option::Option<&str> {
        self.searched_face_id.as_deref()
    }
    /// <p>An array of faces that matched the input face, along with the confidence in the match.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.face_matches.is_none()`.
    pub fn face_matches(&self) -> &[crate::types::FaceMatch] {
        self.face_matches.as_deref().unwrap_or_default()
    }
    /// <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>
    pub fn face_model_version(&self) -> ::std::option::Option<&str> {
        self.face_model_version.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for SearchFacesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchFacesOutput {
    /// Creates a new builder-style object to manufacture [`SearchFacesOutput`](crate::operation::search_faces::SearchFacesOutput).
    pub fn builder() -> crate::operation::search_faces::builders::SearchFacesOutputBuilder {
        crate::operation::search_faces::builders::SearchFacesOutputBuilder::default()
    }
}

/// A builder for [`SearchFacesOutput`](crate::operation::search_faces::SearchFacesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchFacesOutputBuilder {
    pub(crate) searched_face_id: ::std::option::Option<::std::string::String>,
    pub(crate) face_matches: ::std::option::Option<::std::vec::Vec<crate::types::FaceMatch>>,
    pub(crate) face_model_version: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl SearchFacesOutputBuilder {
    /// <p>ID of the face that was searched for matches in a collection.</p>
    pub fn searched_face_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.searched_face_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the face that was searched for matches in a collection.</p>
    pub fn set_searched_face_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.searched_face_id = input;
        self
    }
    /// <p>ID of the face that was searched for matches in a collection.</p>
    pub fn get_searched_face_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.searched_face_id
    }
    /// Appends an item to `face_matches`.
    ///
    /// To override the contents of this collection use [`set_face_matches`](Self::set_face_matches).
    ///
    /// <p>An array of faces that matched the input face, along with the confidence in the match.</p>
    pub fn face_matches(mut self, input: crate::types::FaceMatch) -> Self {
        let mut v = self.face_matches.unwrap_or_default();
        v.push(input);
        self.face_matches = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of faces that matched the input face, along with the confidence in the match.</p>
    pub fn set_face_matches(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FaceMatch>>) -> Self {
        self.face_matches = input;
        self
    }
    /// <p>An array of faces that matched the input face, along with the confidence in the match.</p>
    pub fn get_face_matches(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FaceMatch>> {
        &self.face_matches
    }
    /// <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>
    pub fn face_model_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.face_model_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>
    pub fn set_face_model_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.face_model_version = input;
        self
    }
    /// <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>
    pub fn get_face_model_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.face_model_version
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SearchFacesOutput`](crate::operation::search_faces::SearchFacesOutput).
    pub fn build(self) -> crate::operation::search_faces::SearchFacesOutput {
        crate::operation::search_faces::SearchFacesOutput {
            searched_face_id: self.searched_face_id,
            face_matches: self.face_matches,
            face_model_version: self.face_model_version,
            _request_id: self._request_id,
        }
    }
}
