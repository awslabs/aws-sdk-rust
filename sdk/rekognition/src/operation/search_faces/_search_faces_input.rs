// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchFacesInput {
    /// <p>ID of the collection the face belongs to.</p>
    #[doc(hidden)]
    pub collection_id: std::option::Option<std::string::String>,
    /// <p>ID of a face to find matches for in the collection.</p>
    #[doc(hidden)]
    pub face_id: std::option::Option<std::string::String>,
    /// <p>Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.</p>
    #[doc(hidden)]
    pub max_faces: std::option::Option<i32>,
    /// <p>Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%. </p>
    #[doc(hidden)]
    pub face_match_threshold: std::option::Option<f32>,
}
impl SearchFacesInput {
    /// <p>ID of the collection the face belongs to.</p>
    pub fn collection_id(&self) -> std::option::Option<&str> {
        self.collection_id.as_deref()
    }
    /// <p>ID of a face to find matches for in the collection.</p>
    pub fn face_id(&self) -> std::option::Option<&str> {
        self.face_id.as_deref()
    }
    /// <p>Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.</p>
    pub fn max_faces(&self) -> std::option::Option<i32> {
        self.max_faces
    }
    /// <p>Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%. </p>
    pub fn face_match_threshold(&self) -> std::option::Option<f32> {
        self.face_match_threshold
    }
}
impl SearchFacesInput {
    /// Creates a new builder-style object to manufacture [`SearchFacesInput`](crate::operation::search_faces::SearchFacesInput).
    pub fn builder() -> crate::operation::search_faces::builders::SearchFacesInputBuilder {
        crate::operation::search_faces::builders::SearchFacesInputBuilder::default()
    }
}

/// A builder for [`SearchFacesInput`](crate::operation::search_faces::SearchFacesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchFacesInputBuilder {
    pub(crate) collection_id: std::option::Option<std::string::String>,
    pub(crate) face_id: std::option::Option<std::string::String>,
    pub(crate) max_faces: std::option::Option<i32>,
    pub(crate) face_match_threshold: std::option::Option<f32>,
}
impl SearchFacesInputBuilder {
    /// <p>ID of the collection the face belongs to.</p>
    pub fn collection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.collection_id = Some(input.into());
        self
    }
    /// <p>ID of the collection the face belongs to.</p>
    pub fn set_collection_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.collection_id = input;
        self
    }
    /// <p>ID of a face to find matches for in the collection.</p>
    pub fn face_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.face_id = Some(input.into());
        self
    }
    /// <p>ID of a face to find matches for in the collection.</p>
    pub fn set_face_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.face_id = input;
        self
    }
    /// <p>Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.</p>
    pub fn max_faces(mut self, input: i32) -> Self {
        self.max_faces = Some(input);
        self
    }
    /// <p>Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.</p>
    pub fn set_max_faces(mut self, input: std::option::Option<i32>) -> Self {
        self.max_faces = input;
        self
    }
    /// <p>Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%. </p>
    pub fn face_match_threshold(mut self, input: f32) -> Self {
        self.face_match_threshold = Some(input);
        self
    }
    /// <p>Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%. The default value is 80%. </p>
    pub fn set_face_match_threshold(mut self, input: std::option::Option<f32>) -> Self {
        self.face_match_threshold = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchFacesInput`](crate::operation::search_faces::SearchFacesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::search_faces::SearchFacesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::search_faces::SearchFacesInput {
            collection_id: self.collection_id,
            face_id: self.face_id,
            max_faces: self.max_faces,
            face_match_threshold: self.face_match_threshold,
        })
    }
}
