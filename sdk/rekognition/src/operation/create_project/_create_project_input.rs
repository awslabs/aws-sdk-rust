// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateProjectInput {
    /// <p>The name of the project to create.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies feature that is being customized. If no value is provided CUSTOM_LABELS is used as a default.</p>
    pub feature: ::std::option::Option<crate::types::CustomizationFeature>,
    /// <p>Specifies whether automatic retraining should be attempted for the versions of the project. Automatic retraining is done as a best effort. Required argument for Content Moderation. Applicable only to adapters.</p>
    pub auto_update: ::std::option::Option<crate::types::ProjectAutoUpdate>,
}
impl CreateProjectInput {
    /// <p>The name of the project to create.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>Specifies feature that is being customized. If no value is provided CUSTOM_LABELS is used as a default.</p>
    pub fn feature(&self) -> ::std::option::Option<&crate::types::CustomizationFeature> {
        self.feature.as_ref()
    }
    /// <p>Specifies whether automatic retraining should be attempted for the versions of the project. Automatic retraining is done as a best effort. Required argument for Content Moderation. Applicable only to adapters.</p>
    pub fn auto_update(&self) -> ::std::option::Option<&crate::types::ProjectAutoUpdate> {
        self.auto_update.as_ref()
    }
}
impl CreateProjectInput {
    /// Creates a new builder-style object to manufacture [`CreateProjectInput`](crate::operation::create_project::CreateProjectInput).
    pub fn builder() -> crate::operation::create_project::builders::CreateProjectInputBuilder {
        crate::operation::create_project::builders::CreateProjectInputBuilder::default()
    }
}

/// A builder for [`CreateProjectInput`](crate::operation::create_project::CreateProjectInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateProjectInputBuilder {
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) feature: ::std::option::Option<crate::types::CustomizationFeature>,
    pub(crate) auto_update: ::std::option::Option<crate::types::ProjectAutoUpdate>,
}
impl CreateProjectInputBuilder {
    /// <p>The name of the project to create.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project to create.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project to create.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>Specifies feature that is being customized. If no value is provided CUSTOM_LABELS is used as a default.</p>
    pub fn feature(mut self, input: crate::types::CustomizationFeature) -> Self {
        self.feature = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies feature that is being customized. If no value is provided CUSTOM_LABELS is used as a default.</p>
    pub fn set_feature(mut self, input: ::std::option::Option<crate::types::CustomizationFeature>) -> Self {
        self.feature = input;
        self
    }
    /// <p>Specifies feature that is being customized. If no value is provided CUSTOM_LABELS is used as a default.</p>
    pub fn get_feature(&self) -> &::std::option::Option<crate::types::CustomizationFeature> {
        &self.feature
    }
    /// <p>Specifies whether automatic retraining should be attempted for the versions of the project. Automatic retraining is done as a best effort. Required argument for Content Moderation. Applicable only to adapters.</p>
    pub fn auto_update(mut self, input: crate::types::ProjectAutoUpdate) -> Self {
        self.auto_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether automatic retraining should be attempted for the versions of the project. Automatic retraining is done as a best effort. Required argument for Content Moderation. Applicable only to adapters.</p>
    pub fn set_auto_update(mut self, input: ::std::option::Option<crate::types::ProjectAutoUpdate>) -> Self {
        self.auto_update = input;
        self
    }
    /// <p>Specifies whether automatic retraining should be attempted for the versions of the project. Automatic retraining is done as a best effort. Required argument for Content Moderation. Applicable only to adapters.</p>
    pub fn get_auto_update(&self) -> &::std::option::Option<crate::types::ProjectAutoUpdate> {
        &self.auto_update
    }
    /// Consumes the builder and constructs a [`CreateProjectInput`](crate::operation::create_project::CreateProjectInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_project::CreateProjectInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_project::CreateProjectInput {
            project_name: self.project_name,
            feature: self.feature,
            auto_update: self.auto_update,
        })
    }
}
