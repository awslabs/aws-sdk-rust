// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_project_version::_start_project_version_output::StartProjectVersionOutputBuilder;

pub use crate::operation::start_project_version::_start_project_version_input::StartProjectVersionInputBuilder;

/// Fluent builder constructing a request to `StartProjectVersion`.
///
/// <p>Starts the running of the version of a model. Starting a model takes a while to complete. To check the current state of the model, use <code>DescribeProjectVersions</code>.</p>
/// <p>Once the model is running, you can detect custom labels in new images by calling <code>DetectCustomLabels</code>.</p> <note>
/// <p>You are charged for the amount of time that the model is running. To stop a running model, call <code>StopProjectVersion</code>.</p>
/// </note>
/// <p>For more information, see <i>Running a trained Amazon Rekognition Custom Labels model</i> in the Amazon Rekognition Custom Labels Guide.</p>
/// <p>This operation requires permissions to perform the <code>rekognition:StartProjectVersion</code> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartProjectVersionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_project_version::builders::StartProjectVersionInputBuilder,
}
impl StartProjectVersionFluentBuilder {
    /// Creates a new `StartProjectVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_project_version::StartProjectVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::start_project_version::StartProjectVersionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_project_version::StartProjectVersionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::start_project_version::StartProjectVersionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name(ARN) of the model version that you want to start.</p>
    pub fn project_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.project_version_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name(ARN) of the model version that you want to start.</p>
    pub fn set_project_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_project_version_arn(input);
        self
    }
    /// <p>The minimum number of inference units to use. A single inference unit represents 1 hour of processing. </p>
    /// <p>For information about the number of transactions per second (TPS) that an inference unit can support, see <i>Running a trained Amazon Rekognition Custom Labels model</i> in the Amazon Rekognition Custom Labels Guide. </p>
    /// <p>Use a higher number to increase the TPS throughput of your model. You are charged for the number of inference units that you use. </p>
    pub fn min_inference_units(mut self, input: i32) -> Self {
        self.inner = self.inner.min_inference_units(input);
        self
    }
    /// <p>The minimum number of inference units to use. A single inference unit represents 1 hour of processing. </p>
    /// <p>For information about the number of transactions per second (TPS) that an inference unit can support, see <i>Running a trained Amazon Rekognition Custom Labels model</i> in the Amazon Rekognition Custom Labels Guide. </p>
    /// <p>Use a higher number to increase the TPS throughput of your model. You are charged for the number of inference units that you use. </p>
    pub fn set_min_inference_units(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_min_inference_units(input);
        self
    }
    /// <p>The maximum number of inference units to use for auto-scaling the model. If you don't specify a value, Amazon Rekognition Custom Labels doesn't auto-scale the model.</p>
    pub fn max_inference_units(mut self, input: i32) -> Self {
        self.inner = self.inner.max_inference_units(input);
        self
    }
    /// <p>The maximum number of inference units to use for auto-scaling the model. If you don't specify a value, Amazon Rekognition Custom Labels doesn't auto-scale the model.</p>
    pub fn set_max_inference_units(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_inference_units(input);
        self
    }
}
