// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartMediaAnalysisJobInput {
    /// <p>Idempotency token used to prevent the accidental creation of duplicate versions. If you use the same token with multiple <code>StartMediaAnalysisJobRequest</code> requests, the same response is returned. Use <code>ClientRequestToken</code> to prevent the same request from being processed more than once.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The name of the job. Does not have to be unique.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>Configuration options for the media analysis job to be created.</p>
    pub operations_config: ::std::option::Option<crate::types::MediaAnalysisOperationsConfig>,
    /// <p>Input data to be analyzed by the job.</p>
    pub input: ::std::option::Option<crate::types::MediaAnalysisInput>,
    /// <p>The Amazon S3 bucket location to store the results.</p>
    pub output_config: ::std::option::Option<crate::types::MediaAnalysisOutputConfig>,
    /// <p>The identifier of customer managed AWS KMS key (name or ARN). The key is used to encrypt images copied into the service. The key is also used to encrypt results and manifest files written to the output Amazon S3 bucket.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl StartMediaAnalysisJobInput {
    /// <p>Idempotency token used to prevent the accidental creation of duplicate versions. If you use the same token with multiple <code>StartMediaAnalysisJobRequest</code> requests, the same response is returned. Use <code>ClientRequestToken</code> to prevent the same request from being processed more than once.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The name of the job. Does not have to be unique.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>Configuration options for the media analysis job to be created.</p>
    pub fn operations_config(&self) -> ::std::option::Option<&crate::types::MediaAnalysisOperationsConfig> {
        self.operations_config.as_ref()
    }
    /// <p>Input data to be analyzed by the job.</p>
    pub fn input(&self) -> ::std::option::Option<&crate::types::MediaAnalysisInput> {
        self.input.as_ref()
    }
    /// <p>The Amazon S3 bucket location to store the results.</p>
    pub fn output_config(&self) -> ::std::option::Option<&crate::types::MediaAnalysisOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>The identifier of customer managed AWS KMS key (name or ARN). The key is used to encrypt images copied into the service. The key is also used to encrypt results and manifest files written to the output Amazon S3 bucket.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl StartMediaAnalysisJobInput {
    /// Creates a new builder-style object to manufacture [`StartMediaAnalysisJobInput`](crate::operation::start_media_analysis_job::StartMediaAnalysisJobInput).
    pub fn builder() -> crate::operation::start_media_analysis_job::builders::StartMediaAnalysisJobInputBuilder {
        crate::operation::start_media_analysis_job::builders::StartMediaAnalysisJobInputBuilder::default()
    }
}

/// A builder for [`StartMediaAnalysisJobInput`](crate::operation::start_media_analysis_job::StartMediaAnalysisJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartMediaAnalysisJobInputBuilder {
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) operations_config: ::std::option::Option<crate::types::MediaAnalysisOperationsConfig>,
    pub(crate) input: ::std::option::Option<crate::types::MediaAnalysisInput>,
    pub(crate) output_config: ::std::option::Option<crate::types::MediaAnalysisOutputConfig>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl StartMediaAnalysisJobInputBuilder {
    /// <p>Idempotency token used to prevent the accidental creation of duplicate versions. If you use the same token with multiple <code>StartMediaAnalysisJobRequest</code> requests, the same response is returned. Use <code>ClientRequestToken</code> to prevent the same request from being processed more than once.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Idempotency token used to prevent the accidental creation of duplicate versions. If you use the same token with multiple <code>StartMediaAnalysisJobRequest</code> requests, the same response is returned. Use <code>ClientRequestToken</code> to prevent the same request from being processed more than once.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>Idempotency token used to prevent the accidental creation of duplicate versions. If you use the same token with multiple <code>StartMediaAnalysisJobRequest</code> requests, the same response is returned. Use <code>ClientRequestToken</code> to prevent the same request from being processed more than once.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>The name of the job. Does not have to be unique.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the job. Does not have to be unique.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of the job. Does not have to be unique.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>Configuration options for the media analysis job to be created.</p>
    /// This field is required.
    pub fn operations_config(mut self, input: crate::types::MediaAnalysisOperationsConfig) -> Self {
        self.operations_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration options for the media analysis job to be created.</p>
    pub fn set_operations_config(mut self, input: ::std::option::Option<crate::types::MediaAnalysisOperationsConfig>) -> Self {
        self.operations_config = input;
        self
    }
    /// <p>Configuration options for the media analysis job to be created.</p>
    pub fn get_operations_config(&self) -> &::std::option::Option<crate::types::MediaAnalysisOperationsConfig> {
        &self.operations_config
    }
    /// <p>Input data to be analyzed by the job.</p>
    /// This field is required.
    pub fn input(mut self, input: crate::types::MediaAnalysisInput) -> Self {
        self.input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Input data to be analyzed by the job.</p>
    pub fn set_input(mut self, input: ::std::option::Option<crate::types::MediaAnalysisInput>) -> Self {
        self.input = input;
        self
    }
    /// <p>Input data to be analyzed by the job.</p>
    pub fn get_input(&self) -> &::std::option::Option<crate::types::MediaAnalysisInput> {
        &self.input
    }
    /// <p>The Amazon S3 bucket location to store the results.</p>
    /// This field is required.
    pub fn output_config(mut self, input: crate::types::MediaAnalysisOutputConfig) -> Self {
        self.output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 bucket location to store the results.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::MediaAnalysisOutputConfig>) -> Self {
        self.output_config = input;
        self
    }
    /// <p>The Amazon S3 bucket location to store the results.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::MediaAnalysisOutputConfig> {
        &self.output_config
    }
    /// <p>The identifier of customer managed AWS KMS key (name or ARN). The key is used to encrypt images copied into the service. The key is also used to encrypt results and manifest files written to the output Amazon S3 bucket.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of customer managed AWS KMS key (name or ARN). The key is used to encrypt images copied into the service. The key is also used to encrypt results and manifest files written to the output Amazon S3 bucket.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The identifier of customer managed AWS KMS key (name or ARN). The key is used to encrypt images copied into the service. The key is also used to encrypt results and manifest files written to the output Amazon S3 bucket.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`StartMediaAnalysisJobInput`](crate::operation::start_media_analysis_job::StartMediaAnalysisJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_media_analysis_job::StartMediaAnalysisJobInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_media_analysis_job::StartMediaAnalysisJobInput {
            client_request_token: self.client_request_token,
            job_name: self.job_name,
            operations_config: self.operations_config,
            input: self.input,
            output_config: self.output_config,
            kms_key_id: self.kms_key_id,
        })
    }
}
