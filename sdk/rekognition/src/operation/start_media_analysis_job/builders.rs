// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_media_analysis_job::_start_media_analysis_job_output::StartMediaAnalysisJobOutputBuilder;

pub use crate::operation::start_media_analysis_job::_start_media_analysis_job_input::StartMediaAnalysisJobInputBuilder;

impl crate::operation::start_media_analysis_job::builders::StartMediaAnalysisJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_media_analysis_job::StartMediaAnalysisJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_media_analysis_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartMediaAnalysisJob`.
///
/// <p>Initiates a new media analysis job. Accepts a manifest file in an Amazon S3 bucket. The output is a manifest file and a summary of the manifest stored in the Amazon S3 bucket.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartMediaAnalysisJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_media_analysis_job::builders::StartMediaAnalysisJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_media_analysis_job::StartMediaAnalysisJobOutput,
        crate::operation::start_media_analysis_job::StartMediaAnalysisJobError,
    > for StartMediaAnalysisJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobOutput,
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartMediaAnalysisJobFluentBuilder {
    /// Creates a new `StartMediaAnalysisJob`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartMediaAnalysisJob as a reference.
    pub fn as_input(&self) -> &crate::operation::start_media_analysis_job::builders::StartMediaAnalysisJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_media_analysis_job::StartMediaAnalysisJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_media_analysis_job::StartMediaAnalysisJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_media_analysis_job::StartMediaAnalysisJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_media_analysis_job::StartMediaAnalysisJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_media_analysis_job::StartMediaAnalysisJobOutput,
        crate::operation::start_media_analysis_job::StartMediaAnalysisJobError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Idempotency token used to prevent the accidental creation of duplicate versions. If you use the same token with multiple <code>StartMediaAnalysisJobRequest</code> requests, the same response is returned. Use <code>ClientRequestToken</code> to prevent the same request from being processed more than once.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>Idempotency token used to prevent the accidental creation of duplicate versions. If you use the same token with multiple <code>StartMediaAnalysisJobRequest</code> requests, the same response is returned. Use <code>ClientRequestToken</code> to prevent the same request from being processed more than once.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>Idempotency token used to prevent the accidental creation of duplicate versions. If you use the same token with multiple <code>StartMediaAnalysisJobRequest</code> requests, the same response is returned. Use <code>ClientRequestToken</code> to prevent the same request from being processed more than once.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    /// <p>The name of the job. Does not have to be unique.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>The name of the job. Does not have to be unique.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p>The name of the job. Does not have to be unique.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_name()
    }
    /// <p>Configuration options for the media analysis job to be created.</p>
    pub fn operations_config(mut self, input: crate::types::MediaAnalysisOperationsConfig) -> Self {
        self.inner = self.inner.operations_config(input);
        self
    }
    /// <p>Configuration options for the media analysis job to be created.</p>
    pub fn set_operations_config(mut self, input: ::std::option::Option<crate::types::MediaAnalysisOperationsConfig>) -> Self {
        self.inner = self.inner.set_operations_config(input);
        self
    }
    /// <p>Configuration options for the media analysis job to be created.</p>
    pub fn get_operations_config(&self) -> &::std::option::Option<crate::types::MediaAnalysisOperationsConfig> {
        self.inner.get_operations_config()
    }
    /// <p>Input data to be analyzed by the job.</p>
    pub fn input(mut self, input: crate::types::MediaAnalysisInput) -> Self {
        self.inner = self.inner.input(input);
        self
    }
    /// <p>Input data to be analyzed by the job.</p>
    pub fn set_input(mut self, input: ::std::option::Option<crate::types::MediaAnalysisInput>) -> Self {
        self.inner = self.inner.set_input(input);
        self
    }
    /// <p>Input data to be analyzed by the job.</p>
    pub fn get_input(&self) -> &::std::option::Option<crate::types::MediaAnalysisInput> {
        self.inner.get_input()
    }
    /// <p>The Amazon S3 bucket location to store the results.</p>
    pub fn output_config(mut self, input: crate::types::MediaAnalysisOutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>The Amazon S3 bucket location to store the results.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::MediaAnalysisOutputConfig>) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// <p>The Amazon S3 bucket location to store the results.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::MediaAnalysisOutputConfig> {
        self.inner.get_output_config()
    }
    /// <p>The identifier of customer managed AWS KMS key (name or ARN). The key is used to encrypt images copied into the service. The key is also used to encrypt results and manifest files written to the output Amazon S3 bucket.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The identifier of customer managed AWS KMS key (name or ARN). The key is used to encrypt images copied into the service. The key is also used to encrypt results and manifest files written to the output Amazon S3 bucket.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>The identifier of customer managed AWS KMS key (name or ARN). The key is used to encrypt images copied into the service. The key is also used to encrypt results and manifest files written to the output Amazon S3 bucket.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_kms_key_id()
    }
}
