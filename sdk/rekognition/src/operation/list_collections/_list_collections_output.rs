// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCollectionsOutput {
    /// <p>An array of collection IDs.</p>
    #[doc(hidden)]
    pub collection_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>If the result is truncated, the response provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Version numbers of the face detection models associated with the collections in the array <code>CollectionIds</code>. For example, the value of <code>FaceModelVersions[2]</code> is the version number for the face detection model used by the collection in <code>CollectionId[2]</code>.</p>
    #[doc(hidden)]
    pub face_model_versions: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ListCollectionsOutput {
    /// <p>An array of collection IDs.</p>
    pub fn collection_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.collection_ids.as_deref()
    }
    /// <p>If the result is truncated, the response provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Version numbers of the face detection models associated with the collections in the array <code>CollectionIds</code>. For example, the value of <code>FaceModelVersions[2]</code> is the version number for the face detection model used by the collection in <code>CollectionId[2]</code>.</p>
    pub fn face_model_versions(&self) -> std::option::Option<&[std::string::String]> {
        self.face_model_versions.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCollectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListCollectionsOutput {
    /// Creates a new builder-style object to manufacture [`ListCollectionsOutput`](crate::operation::list_collections::ListCollectionsOutput).
    pub fn builder() -> crate::operation::list_collections::builders::ListCollectionsOutputBuilder {
        crate::operation::list_collections::builders::ListCollectionsOutputBuilder::default()
    }
}

/// A builder for [`ListCollectionsOutput`](crate::operation::list_collections::ListCollectionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListCollectionsOutputBuilder {
    pub(crate) collection_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) face_model_versions: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ListCollectionsOutputBuilder {
    /// Appends an item to `collection_ids`.
    ///
    /// To override the contents of this collection use [`set_collection_ids`](Self::set_collection_ids).
    ///
    /// <p>An array of collection IDs.</p>
    pub fn collection_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.collection_ids.unwrap_or_default();
        v.push(input.into());
        self.collection_ids = Some(v);
        self
    }
    /// <p>An array of collection IDs.</p>
    pub fn set_collection_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.collection_ids = input;
        self
    }
    /// <p>If the result is truncated, the response provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the result is truncated, the response provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `face_model_versions`.
    ///
    /// To override the contents of this collection use [`set_face_model_versions`](Self::set_face_model_versions).
    ///
    /// <p>Version numbers of the face detection models associated with the collections in the array <code>CollectionIds</code>. For example, the value of <code>FaceModelVersions[2]</code> is the version number for the face detection model used by the collection in <code>CollectionId[2]</code>.</p>
    pub fn face_model_versions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.face_model_versions.unwrap_or_default();
        v.push(input.into());
        self.face_model_versions = Some(v);
        self
    }
    /// <p>Version numbers of the face detection models associated with the collections in the array <code>CollectionIds</code>. For example, the value of <code>FaceModelVersions[2]</code> is the version number for the face detection model used by the collection in <code>CollectionId[2]</code>.</p>
    pub fn set_face_model_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.face_model_versions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListCollectionsOutput`](crate::operation::list_collections::ListCollectionsOutput).
    pub fn build(self) -> crate::operation::list_collections::ListCollectionsOutput {
        crate::operation::list_collections::ListCollectionsOutput {
            collection_ids: self.collection_ids,
            next_token: self.next_token,
            face_model_versions: self.face_model_versions,
            _request_id: self._request_id,
        }
    }
}
