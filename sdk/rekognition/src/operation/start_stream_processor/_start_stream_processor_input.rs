// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartStreamProcessorInput {
    /// <p>The name of the stream processor to start processing.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> Specifies the starting point in the Kinesis stream to start processing. You can use the producer timestamp or the fragment number. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html">Fragment</a>. </p>
    /// <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    #[doc(hidden)]
    pub start_selector: std::option::Option<crate::types::StreamProcessingStartSelector>,
    /// <p> Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video. </p>
    /// <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    #[doc(hidden)]
    pub stop_selector: std::option::Option<crate::types::StreamProcessingStopSelector>,
}
impl StartStreamProcessorInput {
    /// <p>The name of the stream processor to start processing.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> Specifies the starting point in the Kinesis stream to start processing. You can use the producer timestamp or the fragment number. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html">Fragment</a>. </p>
    /// <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    pub fn start_selector(
        &self,
    ) -> std::option::Option<&crate::types::StreamProcessingStartSelector> {
        self.start_selector.as_ref()
    }
    /// <p> Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video. </p>
    /// <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    pub fn stop_selector(
        &self,
    ) -> std::option::Option<&crate::types::StreamProcessingStopSelector> {
        self.stop_selector.as_ref()
    }
}
impl StartStreamProcessorInput {
    /// Creates a new builder-style object to manufacture [`StartStreamProcessorInput`](crate::operation::start_stream_processor::StartStreamProcessorInput).
    pub fn builder(
    ) -> crate::operation::start_stream_processor::builders::StartStreamProcessorInputBuilder {
        crate::operation::start_stream_processor::builders::StartStreamProcessorInputBuilder::default()
    }
}

/// A builder for [`StartStreamProcessorInput`](crate::operation::start_stream_processor::StartStreamProcessorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartStreamProcessorInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) start_selector: std::option::Option<crate::types::StreamProcessingStartSelector>,
    pub(crate) stop_selector: std::option::Option<crate::types::StreamProcessingStopSelector>,
}
impl StartStreamProcessorInputBuilder {
    /// <p>The name of the stream processor to start processing.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the stream processor to start processing.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> Specifies the starting point in the Kinesis stream to start processing. You can use the producer timestamp or the fragment number. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html">Fragment</a>. </p>
    /// <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    pub fn start_selector(mut self, input: crate::types::StreamProcessingStartSelector) -> Self {
        self.start_selector = Some(input);
        self
    }
    /// <p> Specifies the starting point in the Kinesis stream to start processing. You can use the producer timestamp or the fragment number. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html">Fragment</a>. </p>
    /// <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    pub fn set_start_selector(
        mut self,
        input: std::option::Option<crate::types::StreamProcessingStartSelector>,
    ) -> Self {
        self.start_selector = input;
        self
    }
    /// <p> Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video. </p>
    /// <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    pub fn stop_selector(mut self, input: crate::types::StreamProcessingStopSelector) -> Self {
        self.stop_selector = Some(input);
        self
    }
    /// <p> Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video. </p>
    /// <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    pub fn set_stop_selector(
        mut self,
        input: std::option::Option<crate::types::StreamProcessingStopSelector>,
    ) -> Self {
        self.stop_selector = input;
        self
    }
    /// Consumes the builder and constructs a [`StartStreamProcessorInput`](crate::operation::start_stream_processor::StartStreamProcessorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_stream_processor::StartStreamProcessorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_stream_processor::StartStreamProcessorInput {
                name: self.name,
                start_selector: self.start_selector,
                stop_selector: self.stop_selector,
            },
        )
    }
}
