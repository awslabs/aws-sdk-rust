// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DistributeDatasetEntriesInput {
    /// <p>The ARNS for the training dataset and test dataset that you want to use. The datasets must belong to the same project. The test dataset must be empty. </p>
    #[doc(hidden)]
    pub datasets: std::option::Option<std::vec::Vec<crate::types::DistributeDataset>>,
}
impl DistributeDatasetEntriesInput {
    /// <p>The ARNS for the training dataset and test dataset that you want to use. The datasets must belong to the same project. The test dataset must be empty. </p>
    pub fn datasets(&self) -> std::option::Option<&[crate::types::DistributeDataset]> {
        self.datasets.as_deref()
    }
}
impl DistributeDatasetEntriesInput {
    /// Creates a new builder-style object to manufacture [`DistributeDatasetEntriesInput`](crate::operation::distribute_dataset_entries::DistributeDatasetEntriesInput).
    pub fn builder(
    ) -> crate::operation::distribute_dataset_entries::builders::DistributeDatasetEntriesInputBuilder
    {
        crate::operation::distribute_dataset_entries::builders::DistributeDatasetEntriesInputBuilder::default()
    }
}

/// A builder for [`DistributeDatasetEntriesInput`](crate::operation::distribute_dataset_entries::DistributeDatasetEntriesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DistributeDatasetEntriesInputBuilder {
    pub(crate) datasets: std::option::Option<std::vec::Vec<crate::types::DistributeDataset>>,
}
impl DistributeDatasetEntriesInputBuilder {
    /// Appends an item to `datasets`.
    ///
    /// To override the contents of this collection use [`set_datasets`](Self::set_datasets).
    ///
    /// <p>The ARNS for the training dataset and test dataset that you want to use. The datasets must belong to the same project. The test dataset must be empty. </p>
    pub fn datasets(mut self, input: crate::types::DistributeDataset) -> Self {
        let mut v = self.datasets.unwrap_or_default();
        v.push(input);
        self.datasets = Some(v);
        self
    }
    /// <p>The ARNS for the training dataset and test dataset that you want to use. The datasets must belong to the same project. The test dataset must be empty. </p>
    pub fn set_datasets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DistributeDataset>>,
    ) -> Self {
        self.datasets = input;
        self
    }
    /// Consumes the builder and constructs a [`DistributeDatasetEntriesInput`](crate::operation::distribute_dataset_entries::DistributeDatasetEntriesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::distribute_dataset_entries::DistributeDatasetEntriesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesInput {
                datasets: self.datasets,
            },
        )
    }
}
