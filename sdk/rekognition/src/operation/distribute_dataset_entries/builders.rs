// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::distribute_dataset_entries::_distribute_dataset_entries_output::DistributeDatasetEntriesOutputBuilder;

pub use crate::operation::distribute_dataset_entries::_distribute_dataset_entries_input::DistributeDatasetEntriesInputBuilder;

/// Fluent builder constructing a request to `DistributeDatasetEntries`.
///
/// <p>Distributes the entries (images) in a training dataset across the training dataset and the test dataset for a project. <code>DistributeDatasetEntries</code> moves 20% of the training dataset images to the test dataset. An entry is a JSON Line that describes an image. </p>
/// <p>You supply the Amazon Resource Names (ARN) of a project's training dataset and test dataset. The training dataset must contain the images that you want to split. The test dataset must be empty. The datasets must belong to the same project. To create training and test datasets for a project, call <code>CreateDataset</code>.</p>
/// <p>Distributing a dataset takes a while to complete. To check the status call <code>DescribeDataset</code>. The operation is complete when the <code>Status</code> field for the training dataset and the test dataset is <code>UPDATE_COMPLETE</code>. If the dataset split fails, the value of <code>Status</code> is <code>UPDATE_FAILED</code>.</p>
/// <p>This operation requires permissions to perform the <code>rekognition:DistributeDatasetEntries</code> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DistributeDatasetEntriesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::distribute_dataset_entries::builders::DistributeDatasetEntriesInputBuilder
            }
impl DistributeDatasetEntriesFluentBuilder {
    /// Creates a new `DistributeDatasetEntries`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::distribute_dataset_entries::DistributeDatasetEntries,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::distribute_dataset_entries::DistributeDatasetEntriesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::distribute_dataset_entries::DistributeDatasetEntriesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `Datasets`.
    ///
    /// To override the contents of this collection use [`set_datasets`](Self::set_datasets).
    ///
    /// <p>The ARNS for the training dataset and test dataset that you want to use. The datasets must belong to the same project. The test dataset must be empty. </p>
    pub fn datasets(mut self, input: crate::types::DistributeDataset) -> Self {
        self.inner = self.inner.datasets(input);
        self
    }
    /// <p>The ARNS for the training dataset and test dataset that you want to use. The datasets must belong to the same project. The test dataset must be empty. </p>
    pub fn set_datasets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DistributeDataset>>,
    ) -> Self {
        self.inner = self.inner.set_datasets(input);
        self
    }
}
