// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartSegmentDetectionInput {
    /// <p>Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as <code>StartLabelDetection</code> use <code>Video</code> to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.</p>
    #[doc(hidden)]
    pub video: std::option::Option<crate::types::Video>,
    /// <p>Idempotent token used to identify the start request. If you use the same token with multiple <code>StartSegmentDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the segment detection operation. Note that the Amazon SNS topic must have a topic name that begins with <i>AmazonRekognition</i> if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.</p>
    #[doc(hidden)]
    pub notification_channel: std::option::Option<crate::types::NotificationChannel>,
    /// <p>An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code> to group related jobs and identify them in the completion notification.</p>
    #[doc(hidden)]
    pub job_tag: std::option::Option<std::string::String>,
    /// <p>Filters for technical cue or shot detection.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<crate::types::StartSegmentDetectionFilters>,
    /// <p>An array of segment types to detect in the video. Valid values are TECHNICAL_CUE and SHOT.</p>
    #[doc(hidden)]
    pub segment_types: std::option::Option<std::vec::Vec<crate::types::SegmentType>>,
}
impl StartSegmentDetectionInput {
    /// <p>Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as <code>StartLabelDetection</code> use <code>Video</code> to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.</p>
    pub fn video(&self) -> std::option::Option<&crate::types::Video> {
        self.video.as_ref()
    }
    /// <p>Idempotent token used to identify the start request. If you use the same token with multiple <code>StartSegmentDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the segment detection operation. Note that the Amazon SNS topic must have a topic name that begins with <i>AmazonRekognition</i> if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.</p>
    pub fn notification_channel(&self) -> std::option::Option<&crate::types::NotificationChannel> {
        self.notification_channel.as_ref()
    }
    /// <p>An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code> to group related jobs and identify them in the completion notification.</p>
    pub fn job_tag(&self) -> std::option::Option<&str> {
        self.job_tag.as_deref()
    }
    /// <p>Filters for technical cue or shot detection.</p>
    pub fn filters(&self) -> std::option::Option<&crate::types::StartSegmentDetectionFilters> {
        self.filters.as_ref()
    }
    /// <p>An array of segment types to detect in the video. Valid values are TECHNICAL_CUE and SHOT.</p>
    pub fn segment_types(&self) -> std::option::Option<&[crate::types::SegmentType]> {
        self.segment_types.as_deref()
    }
}
impl StartSegmentDetectionInput {
    /// Creates a new builder-style object to manufacture [`StartSegmentDetectionInput`](crate::operation::start_segment_detection::StartSegmentDetectionInput).
    pub fn builder(
    ) -> crate::operation::start_segment_detection::builders::StartSegmentDetectionInputBuilder
    {
        crate::operation::start_segment_detection::builders::StartSegmentDetectionInputBuilder::default()
    }
}

/// A builder for [`StartSegmentDetectionInput`](crate::operation::start_segment_detection::StartSegmentDetectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartSegmentDetectionInputBuilder {
    pub(crate) video: std::option::Option<crate::types::Video>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) notification_channel: std::option::Option<crate::types::NotificationChannel>,
    pub(crate) job_tag: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<crate::types::StartSegmentDetectionFilters>,
    pub(crate) segment_types: std::option::Option<std::vec::Vec<crate::types::SegmentType>>,
}
impl StartSegmentDetectionInputBuilder {
    /// <p>Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as <code>StartLabelDetection</code> use <code>Video</code> to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.</p>
    pub fn video(mut self, input: crate::types::Video) -> Self {
        self.video = Some(input);
        self
    }
    /// <p>Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as <code>StartLabelDetection</code> use <code>Video</code> to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.</p>
    pub fn set_video(mut self, input: std::option::Option<crate::types::Video>) -> Self {
        self.video = input;
        self
    }
    /// <p>Idempotent token used to identify the start request. If you use the same token with multiple <code>StartSegmentDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>Idempotent token used to identify the start request. If you use the same token with multiple <code>StartSegmentDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. </p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the segment detection operation. Note that the Amazon SNS topic must have a topic name that begins with <i>AmazonRekognition</i> if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.</p>
    pub fn notification_channel(mut self, input: crate::types::NotificationChannel) -> Self {
        self.notification_channel = Some(input);
        self
    }
    /// <p>The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the segment detection operation. Note that the Amazon SNS topic must have a topic name that begins with <i>AmazonRekognition</i> if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.</p>
    pub fn set_notification_channel(
        mut self,
        input: std::option::Option<crate::types::NotificationChannel>,
    ) -> Self {
        self.notification_channel = input;
        self
    }
    /// <p>An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code> to group related jobs and identify them in the completion notification.</p>
    pub fn job_tag(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_tag = Some(input.into());
        self
    }
    /// <p>An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code> to group related jobs and identify them in the completion notification.</p>
    pub fn set_job_tag(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_tag = input;
        self
    }
    /// <p>Filters for technical cue or shot detection.</p>
    pub fn filters(mut self, input: crate::types::StartSegmentDetectionFilters) -> Self {
        self.filters = Some(input);
        self
    }
    /// <p>Filters for technical cue or shot detection.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<crate::types::StartSegmentDetectionFilters>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// Appends an item to `segment_types`.
    ///
    /// To override the contents of this collection use [`set_segment_types`](Self::set_segment_types).
    ///
    /// <p>An array of segment types to detect in the video. Valid values are TECHNICAL_CUE and SHOT.</p>
    pub fn segment_types(mut self, input: crate::types::SegmentType) -> Self {
        let mut v = self.segment_types.unwrap_or_default();
        v.push(input);
        self.segment_types = Some(v);
        self
    }
    /// <p>An array of segment types to detect in the video. Valid values are TECHNICAL_CUE and SHOT.</p>
    pub fn set_segment_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SegmentType>>,
    ) -> Self {
        self.segment_types = input;
        self
    }
    /// Consumes the builder and constructs a [`StartSegmentDetectionInput`](crate::operation::start_segment_detection::StartSegmentDetectionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_segment_detection::StartSegmentDetectionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_segment_detection::StartSegmentDetectionInput {
                video: self.video,
                client_request_token: self.client_request_token,
                notification_channel: self.notification_channel,
                job_tag: self.job_tag,
                filters: self.filters,
                segment_types: self.segment_types,
            },
        )
    }
}
