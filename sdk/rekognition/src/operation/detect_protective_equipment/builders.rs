// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::detect_protective_equipment::_detect_protective_equipment_output::DetectProtectiveEquipmentOutputBuilder;

pub use crate::operation::detect_protective_equipment::_detect_protective_equipment_input::DetectProtectiveEquipmentInputBuilder;

/// Fluent builder constructing a request to `DetectProtectiveEquipment`.
///
/// <p>Detects Personal Protective Equipment (PPE) worn by people detected in an image. Amazon Rekognition can detect the following types of PPE.</p>
/// <ul>
/// <li> <p>Face cover</p> </li>
/// <li> <p>Hand cover</p> </li>
/// <li> <p>Head cover</p> </li>
/// </ul>
/// <p>You pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. The image must be either a PNG or JPG formatted file. </p>
/// <p> <code>DetectProtectiveEquipment</code> detects PPE worn by up to 15 persons detected in an image.</p>
/// <p>For each person detected in the image the API returns an array of body parts (face, head, left-hand, right-hand). For each body part, an array of detected items of PPE is returned, including an indicator of whether or not the PPE covers the body part. The API returns the confidence it has in each detection (person, PPE, body part and body part coverage). It also returns a bounding box (<code>BoundingBox</code>) for each detected person and each detected item of PPE. </p>
/// <p>You can optionally request a summary of detected PPE items with the <code>SummarizationAttributes</code> input parameter. The summary provides the following information. </p>
/// <ul>
/// <li> <p>The persons detected as wearing all of the types of PPE that you specify.</p> </li>
/// <li> <p>The persons detected as not wearing all of the types PPE that you specify.</p> </li>
/// <li> <p>The persons detected where PPE adornment could not be determined. </p> </li>
/// </ul>
/// <p>This is a stateless API operation. That is, the operation does not persist any data.</p>
/// <p>This operation requires permissions to perform the <code>rekognition:DetectProtectiveEquipment</code> action. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DetectProtectiveEquipmentFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::detect_protective_equipment::builders::DetectProtectiveEquipmentInputBuilder
            }
impl DetectProtectiveEquipmentFluentBuilder {
    /// Creates a new `DetectProtectiveEquipment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::detect_protective_equipment::DetectProtectiveEquipment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::detect_protective_equipment::DetectProtectiveEquipmentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::detect_protective_equipment::DetectProtectiveEquipmentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The image in which you want to detect PPE on detected persons. The image can be passed as image bytes or you can reference an image stored in an Amazon S3 bucket. </p>
    pub fn image(mut self, input: crate::types::Image) -> Self {
        self.inner = self.inner.image(input);
        self
    }
    /// <p>The image in which you want to detect PPE on detected persons. The image can be passed as image bytes or you can reference an image stored in an Amazon S3 bucket. </p>
    pub fn set_image(mut self, input: std::option::Option<crate::types::Image>) -> Self {
        self.inner = self.inner.set_image(input);
        self
    }
    /// <p>An array of PPE types that you want to summarize.</p>
    pub fn summarization_attributes(
        mut self,
        input: crate::types::ProtectiveEquipmentSummarizationAttributes,
    ) -> Self {
        self.inner = self.inner.summarization_attributes(input);
        self
    }
    /// <p>An array of PPE types that you want to summarize.</p>
    pub fn set_summarization_attributes(
        mut self,
        input: std::option::Option<crate::types::ProtectiveEquipmentSummarizationAttributes>,
    ) -> Self {
        self.inner = self.inner.set_summarization_attributes(input);
        self
    }
}
