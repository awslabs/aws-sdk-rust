// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectProtectiveEquipmentOutput {
    /// <p>The version number of the PPE detection model used to detect PPE in the image.</p>
    #[doc(hidden)]
    pub protective_equipment_model_version: std::option::Option<std::string::String>,
    /// <p>An array of persons detected in the image (including persons not wearing PPE).</p>
    #[doc(hidden)]
    pub persons: std::option::Option<std::vec::Vec<crate::types::ProtectiveEquipmentPerson>>,
    /// <p>Summary information for the types of PPE specified in the <code>SummarizationAttributes</code> input parameter.</p>
    #[doc(hidden)]
    pub summary: std::option::Option<crate::types::ProtectiveEquipmentSummary>,
    _request_id: Option<String>,
}
impl DetectProtectiveEquipmentOutput {
    /// <p>The version number of the PPE detection model used to detect PPE in the image.</p>
    pub fn protective_equipment_model_version(&self) -> std::option::Option<&str> {
        self.protective_equipment_model_version.as_deref()
    }
    /// <p>An array of persons detected in the image (including persons not wearing PPE).</p>
    pub fn persons(&self) -> std::option::Option<&[crate::types::ProtectiveEquipmentPerson]> {
        self.persons.as_deref()
    }
    /// <p>Summary information for the types of PPE specified in the <code>SummarizationAttributes</code> input parameter.</p>
    pub fn summary(&self) -> std::option::Option<&crate::types::ProtectiveEquipmentSummary> {
        self.summary.as_ref()
    }
}
impl aws_http::request_id::RequestId for DetectProtectiveEquipmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DetectProtectiveEquipmentOutput {
    /// Creates a new builder-style object to manufacture [`DetectProtectiveEquipmentOutput`](crate::operation::detect_protective_equipment::DetectProtectiveEquipmentOutput).
    pub fn builder() -> crate::operation::detect_protective_equipment::builders::DetectProtectiveEquipmentOutputBuilder{
        crate::operation::detect_protective_equipment::builders::DetectProtectiveEquipmentOutputBuilder::default()
    }
}

/// A builder for [`DetectProtectiveEquipmentOutput`](crate::operation::detect_protective_equipment::DetectProtectiveEquipmentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectProtectiveEquipmentOutputBuilder {
    pub(crate) protective_equipment_model_version: std::option::Option<std::string::String>,
    pub(crate) persons: std::option::Option<std::vec::Vec<crate::types::ProtectiveEquipmentPerson>>,
    pub(crate) summary: std::option::Option<crate::types::ProtectiveEquipmentSummary>,
    _request_id: Option<String>,
}
impl DetectProtectiveEquipmentOutputBuilder {
    /// <p>The version number of the PPE detection model used to detect PPE in the image.</p>
    pub fn protective_equipment_model_version(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.protective_equipment_model_version = Some(input.into());
        self
    }
    /// <p>The version number of the PPE detection model used to detect PPE in the image.</p>
    pub fn set_protective_equipment_model_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.protective_equipment_model_version = input;
        self
    }
    /// Appends an item to `persons`.
    ///
    /// To override the contents of this collection use [`set_persons`](Self::set_persons).
    ///
    /// <p>An array of persons detected in the image (including persons not wearing PPE).</p>
    pub fn persons(mut self, input: crate::types::ProtectiveEquipmentPerson) -> Self {
        let mut v = self.persons.unwrap_or_default();
        v.push(input);
        self.persons = Some(v);
        self
    }
    /// <p>An array of persons detected in the image (including persons not wearing PPE).</p>
    pub fn set_persons(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProtectiveEquipmentPerson>>,
    ) -> Self {
        self.persons = input;
        self
    }
    /// <p>Summary information for the types of PPE specified in the <code>SummarizationAttributes</code> input parameter.</p>
    pub fn summary(mut self, input: crate::types::ProtectiveEquipmentSummary) -> Self {
        self.summary = Some(input);
        self
    }
    /// <p>Summary information for the types of PPE specified in the <code>SummarizationAttributes</code> input parameter.</p>
    pub fn set_summary(
        mut self,
        input: std::option::Option<crate::types::ProtectiveEquipmentSummary>,
    ) -> Self {
        self.summary = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DetectProtectiveEquipmentOutput`](crate::operation::detect_protective_equipment::DetectProtectiveEquipmentOutput).
    pub fn build(
        self,
    ) -> crate::operation::detect_protective_equipment::DetectProtectiveEquipmentOutput {
        crate::operation::detect_protective_equipment::DetectProtectiveEquipmentOutput {
            protective_equipment_model_version: self.protective_equipment_model_version,
            persons: self.persons,
            summary: self.summary,
            _request_id: self._request_id,
        }
    }
}
