// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDatasetEntriesInput {
    /// <p> The Amazon Resource Name (ARN) for the dataset that you want to use. </p>
    pub dataset_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a label filter for the response. The response includes an entry only if one or more of the labels in <code>ContainsLabels</code> exist in the entry. </p>
    pub contains_labels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> Specify <code>true</code> to get only the JSON Lines where the image is labeled. Specify <code>false</code> to get only the JSON Lines where the image isn't labeled. If you don't specify <code>Labeled</code>, <code>ListDatasetEntries</code> returns JSON Lines for labeled and unlabeled images. </p>
    pub labeled: ::std::option::Option<bool>,
    /// <p>If specified, <code>ListDatasetEntries</code> only returns JSON Lines where the value of <code>SourceRefContains</code> is part of the <code>source-ref</code> field. The <code>source-ref</code> field contains the Amazon S3 location of the image. You can use <code>SouceRefContains</code> for tasks such as getting the JSON Line for a single image, or gettting JSON Lines for all images within a specific folder.</p>
    pub source_ref_contains: ::std::option::Option<::std::string::String>,
    /// <p>Specifies an error filter for the response. Specify <code>True</code> to only include entries that have errors. </p>
    pub has_errors: ::std::option::Option<bool>,
    /// <p>If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. </p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListDatasetEntriesInput {
    /// <p> The Amazon Resource Name (ARN) for the dataset that you want to use. </p>
    pub fn dataset_arn(&self) -> ::std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>Specifies a label filter for the response. The response includes an entry only if one or more of the labels in <code>ContainsLabels</code> exist in the entry. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contains_labels.is_none()`.
    pub fn contains_labels(&self) -> &[::std::string::String] {
        self.contains_labels.as_deref().unwrap_or_default()
    }
    /// <p> Specify <code>true</code> to get only the JSON Lines where the image is labeled. Specify <code>false</code> to get only the JSON Lines where the image isn't labeled. If you don't specify <code>Labeled</code>, <code>ListDatasetEntries</code> returns JSON Lines for labeled and unlabeled images. </p>
    pub fn labeled(&self) -> ::std::option::Option<bool> {
        self.labeled
    }
    /// <p>If specified, <code>ListDatasetEntries</code> only returns JSON Lines where the value of <code>SourceRefContains</code> is part of the <code>source-ref</code> field. The <code>source-ref</code> field contains the Amazon S3 location of the image. You can use <code>SouceRefContains</code> for tasks such as getting the JSON Line for a single image, or gettting JSON Lines for all images within a specific folder.</p>
    pub fn source_ref_contains(&self) -> ::std::option::Option<&str> {
        self.source_ref_contains.as_deref()
    }
    /// <p>Specifies an error filter for the response. Specify <code>True</code> to only include entries that have errors. </p>
    pub fn has_errors(&self) -> ::std::option::Option<bool> {
        self.has_errors
    }
    /// <p>If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListDatasetEntriesInput {
    /// Creates a new builder-style object to manufacture [`ListDatasetEntriesInput`](crate::operation::list_dataset_entries::ListDatasetEntriesInput).
    pub fn builder() -> crate::operation::list_dataset_entries::builders::ListDatasetEntriesInputBuilder {
        crate::operation::list_dataset_entries::builders::ListDatasetEntriesInputBuilder::default()
    }
}

/// A builder for [`ListDatasetEntriesInput`](crate::operation::list_dataset_entries::ListDatasetEntriesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDatasetEntriesInputBuilder {
    pub(crate) dataset_arn: ::std::option::Option<::std::string::String>,
    pub(crate) contains_labels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) labeled: ::std::option::Option<bool>,
    pub(crate) source_ref_contains: ::std::option::Option<::std::string::String>,
    pub(crate) has_errors: ::std::option::Option<bool>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListDatasetEntriesInputBuilder {
    /// <p> The Amazon Resource Name (ARN) for the dataset that you want to use. </p>
    /// This field is required.
    pub fn dataset_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) for the dataset that you want to use. </p>
    pub fn set_dataset_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) for the dataset that you want to use. </p>
    pub fn get_dataset_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_arn
    }
    /// Appends an item to `contains_labels`.
    ///
    /// To override the contents of this collection use [`set_contains_labels`](Self::set_contains_labels).
    ///
    /// <p>Specifies a label filter for the response. The response includes an entry only if one or more of the labels in <code>ContainsLabels</code> exist in the entry. </p>
    pub fn contains_labels(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.contains_labels.unwrap_or_default();
        v.push(input.into());
        self.contains_labels = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies a label filter for the response. The response includes an entry only if one or more of the labels in <code>ContainsLabels</code> exist in the entry. </p>
    pub fn set_contains_labels(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.contains_labels = input;
        self
    }
    /// <p>Specifies a label filter for the response. The response includes an entry only if one or more of the labels in <code>ContainsLabels</code> exist in the entry. </p>
    pub fn get_contains_labels(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.contains_labels
    }
    /// <p> Specify <code>true</code> to get only the JSON Lines where the image is labeled. Specify <code>false</code> to get only the JSON Lines where the image isn't labeled. If you don't specify <code>Labeled</code>, <code>ListDatasetEntries</code> returns JSON Lines for labeled and unlabeled images. </p>
    pub fn labeled(mut self, input: bool) -> Self {
        self.labeled = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specify <code>true</code> to get only the JSON Lines where the image is labeled. Specify <code>false</code> to get only the JSON Lines where the image isn't labeled. If you don't specify <code>Labeled</code>, <code>ListDatasetEntries</code> returns JSON Lines for labeled and unlabeled images. </p>
    pub fn set_labeled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.labeled = input;
        self
    }
    /// <p> Specify <code>true</code> to get only the JSON Lines where the image is labeled. Specify <code>false</code> to get only the JSON Lines where the image isn't labeled. If you don't specify <code>Labeled</code>, <code>ListDatasetEntries</code> returns JSON Lines for labeled and unlabeled images. </p>
    pub fn get_labeled(&self) -> &::std::option::Option<bool> {
        &self.labeled
    }
    /// <p>If specified, <code>ListDatasetEntries</code> only returns JSON Lines where the value of <code>SourceRefContains</code> is part of the <code>source-ref</code> field. The <code>source-ref</code> field contains the Amazon S3 location of the image. You can use <code>SouceRefContains</code> for tasks such as getting the JSON Line for a single image, or gettting JSON Lines for all images within a specific folder.</p>
    pub fn source_ref_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_ref_contains = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If specified, <code>ListDatasetEntries</code> only returns JSON Lines where the value of <code>SourceRefContains</code> is part of the <code>source-ref</code> field. The <code>source-ref</code> field contains the Amazon S3 location of the image. You can use <code>SouceRefContains</code> for tasks such as getting the JSON Line for a single image, or gettting JSON Lines for all images within a specific folder.</p>
    pub fn set_source_ref_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_ref_contains = input;
        self
    }
    /// <p>If specified, <code>ListDatasetEntries</code> only returns JSON Lines where the value of <code>SourceRefContains</code> is part of the <code>source-ref</code> field. The <code>source-ref</code> field contains the Amazon S3 location of the image. You can use <code>SouceRefContains</code> for tasks such as getting the JSON Line for a single image, or gettting JSON Lines for all images within a specific folder.</p>
    pub fn get_source_ref_contains(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_ref_contains
    }
    /// <p>Specifies an error filter for the response. Specify <code>True</code> to only include entries that have errors. </p>
    pub fn has_errors(mut self, input: bool) -> Self {
        self.has_errors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies an error filter for the response. Specify <code>True</code> to only include entries that have errors. </p>
    pub fn set_has_errors(mut self, input: ::std::option::Option<bool>) -> Self {
        self.has_errors = input;
        self
    }
    /// <p>Specifies an error filter for the response. Specify <code>True</code> to only include entries that have errors. </p>
    pub fn get_has_errors(&self) -> &::std::option::Option<bool> {
        &self.has_errors
    }
    /// <p>If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the previous response was incomplete (because there is more results to retrieve), Amazon Rekognition Custom Labels returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListDatasetEntriesInput`](crate::operation::list_dataset_entries::ListDatasetEntriesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_dataset_entries::ListDatasetEntriesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_dataset_entries::ListDatasetEntriesInput {
            dataset_arn: self.dataset_arn,
            contains_labels: self.contains_labels,
            labeled: self.labeled,
            source_ref_contains: self.source_ref_contains,
            has_errors: self.has_errors,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
