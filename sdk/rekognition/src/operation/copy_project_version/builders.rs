// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::copy_project_version::_copy_project_version_output::CopyProjectVersionOutputBuilder;

pub use crate::operation::copy_project_version::_copy_project_version_input::CopyProjectVersionInputBuilder;

/// Fluent builder constructing a request to `CopyProjectVersion`.
///
/// <p>Copies a version of an Amazon Rekognition Custom Labels model from a source project to a destination project. The source and destination projects can be in different AWS accounts but must be in the same AWS Region. You can't copy a model to another AWS service. </p>
/// <p>To copy a model version to a different AWS account, you need to create a resource-based policy known as a <i>project policy</i>. You attach the project policy to the source project by calling <code>PutProjectPolicy</code>. The project policy gives permission to copy the model version from a trusting AWS account to a trusted account.</p>
/// <p>For more information creating and attaching a project policy, see Attaching a project policy (SDK) in the <i>Amazon Rekognition Custom Labels Developer Guide</i>. </p>
/// <p>If you are copying a model version to a project in the same AWS account, you don't need to create a project policy.</p> <note>
/// <p>To copy a model, the destination project, source project, and source model version must already exist.</p>
/// </note>
/// <p>Copying a model version takes a while to complete. To get the current status, call <code>DescribeProjectVersions</code> and check the value of <code>Status</code> in the <code>ProjectVersionDescription</code> object. The copy operation has finished when the value of <code>Status</code> is <code>COPYING_COMPLETED</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CopyProjectVersionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::copy_project_version::builders::CopyProjectVersionInputBuilder,
}
impl CopyProjectVersionFluentBuilder {
    /// Creates a new `CopyProjectVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::copy_project_version::CopyProjectVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::copy_project_version::CopyProjectVersionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::copy_project_version::CopyProjectVersionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::copy_project_version::CopyProjectVersionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the source project in the trusting AWS account.</p>
    pub fn source_project_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_project_arn(input.into());
        self
    }
    /// <p>The ARN of the source project in the trusting AWS account.</p>
    pub fn set_source_project_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_project_arn(input);
        self
    }
    /// <p>The ARN of the model version in the source project that you want to copy to a destination project.</p>
    pub fn source_project_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_project_version_arn(input.into());
        self
    }
    /// <p>The ARN of the model version in the source project that you want to copy to a destination project.</p>
    pub fn set_source_project_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_project_version_arn(input);
        self
    }
    /// <p>The ARN of the project in the trusted AWS account that you want to copy the model version to. </p>
    pub fn destination_project_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_project_arn(input.into());
        self
    }
    /// <p>The ARN of the project in the trusted AWS account that you want to copy the model version to. </p>
    pub fn set_destination_project_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_destination_project_arn(input);
        self
    }
    /// <p>A name for the version of the model that's copied to the destination project.</p>
    pub fn version_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.version_name(input.into());
        self
    }
    /// <p>A name for the version of the model that's copied to the destination project.</p>
    pub fn set_version_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_version_name(input);
        self
    }
    /// <p>The S3 bucket and folder location where the training output for the source model version is placed.</p>
    pub fn output_config(mut self, input: crate::types::OutputConfig) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>The S3 bucket and folder location where the training output for the source model version is placed.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::types::OutputConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key-value tags to assign to the model version. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The key-value tags to assign to the model version. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt training results and manifest files written to the output Amazon S3 bucket (<code>OutputConfig</code>).</p>
    /// <p>If you choose to use your own KMS key, you need the following permissions on the KMS key.</p>
    /// <ul>
    /// <li> <p>kms:CreateGrant</p> </li>
    /// <li> <p>kms:DescribeKey</p> </li>
    /// <li> <p>kms:GenerateDataKey</p> </li>
    /// <li> <p>kms:Decrypt</p> </li>
    /// </ul>
    /// <p>If you don't specify a value for <code>KmsKeyId</code>, images copied into the service are encrypted using a key that AWS owns and manages.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt training results and manifest files written to the output Amazon S3 bucket (<code>OutputConfig</code>).</p>
    /// <p>If you choose to use your own KMS key, you need the following permissions on the KMS key.</p>
    /// <ul>
    /// <li> <p>kms:CreateGrant</p> </li>
    /// <li> <p>kms:DescribeKey</p> </li>
    /// <li> <p>kms:GenerateDataKey</p> </li>
    /// <li> <p>kms:Decrypt</p> </li>
    /// </ul>
    /// <p>If you don't specify a value for <code>KmsKeyId</code>, images copied into the service are encrypted using a key that AWS owns and manages.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
}
