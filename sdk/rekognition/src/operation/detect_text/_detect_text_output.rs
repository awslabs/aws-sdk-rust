// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetectTextOutput {
    /// <p>An array of text that was detected in the input image.</p>
    pub text_detections: ::std::option::Option<::std::vec::Vec<crate::types::TextDetection>>,
    /// <p>The model version used to detect text.</p>
    pub text_model_version: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DetectTextOutput {
    /// <p>An array of text that was detected in the input image.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.text_detections.is_none()`.
    pub fn text_detections(&self) -> &[crate::types::TextDetection] {
        self.text_detections.as_deref().unwrap_or_default()
    }
    /// <p>The model version used to detect text.</p>
    pub fn text_model_version(&self) -> ::std::option::Option<&str> {
        self.text_model_version.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DetectTextOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DetectTextOutput {
    /// Creates a new builder-style object to manufacture [`DetectTextOutput`](crate::operation::detect_text::DetectTextOutput).
    pub fn builder() -> crate::operation::detect_text::builders::DetectTextOutputBuilder {
        crate::operation::detect_text::builders::DetectTextOutputBuilder::default()
    }
}

/// A builder for [`DetectTextOutput`](crate::operation::detect_text::DetectTextOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetectTextOutputBuilder {
    pub(crate) text_detections: ::std::option::Option<::std::vec::Vec<crate::types::TextDetection>>,
    pub(crate) text_model_version: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DetectTextOutputBuilder {
    /// Appends an item to `text_detections`.
    ///
    /// To override the contents of this collection use [`set_text_detections`](Self::set_text_detections).
    ///
    /// <p>An array of text that was detected in the input image.</p>
    pub fn text_detections(mut self, input: crate::types::TextDetection) -> Self {
        let mut v = self.text_detections.unwrap_or_default();
        v.push(input);
        self.text_detections = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of text that was detected in the input image.</p>
    pub fn set_text_detections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TextDetection>>) -> Self {
        self.text_detections = input;
        self
    }
    /// <p>An array of text that was detected in the input image.</p>
    pub fn get_text_detections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TextDetection>> {
        &self.text_detections
    }
    /// <p>The model version used to detect text.</p>
    pub fn text_model_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text_model_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model version used to detect text.</p>
    pub fn set_text_model_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text_model_version = input;
        self
    }
    /// <p>The model version used to detect text.</p>
    pub fn get_text_model_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.text_model_version
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DetectTextOutput`](crate::operation::detect_text::DetectTextOutput).
    pub fn build(self) -> crate::operation::detect_text::DetectTextOutput {
        crate::operation::detect_text::DetectTextOutput {
            text_detections: self.text_detections,
            text_model_version: self.text_model_version,
            _request_id: self._request_id,
        }
    }
}
