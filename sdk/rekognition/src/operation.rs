// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CompareFaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`compare_faces`](crate::client::fluent_builders::CompareFaces).
///
/// `ParseStrictResponse` impl for `CompareFaces`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CompareFaces {
    _private: (),
}
impl CompareFaces {
    /// Creates a new builder-style object to manufacture [`CompareFacesInput`](crate::input::CompareFacesInput).
    pub fn builder() -> crate::input::compare_faces_input::Builder {
        crate::input::compare_faces_input::Builder::default()
    }
    /// Creates a new `CompareFaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CompareFaces {
    type Output =
        std::result::Result<crate::output::CompareFacesOutput, crate::error::CompareFacesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_compare_faces::de_compare_faces_http_error(response)
        } else {
            crate::protocol_serde::shape_compare_faces::de_compare_faces_http_response(response)
        }
    }
}

/// Operation shape for `CopyProjectVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`copy_project_version`](crate::client::fluent_builders::CopyProjectVersion).
///
/// `ParseStrictResponse` impl for `CopyProjectVersion`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CopyProjectVersion {
    _private: (),
}
impl CopyProjectVersion {
    /// Creates a new builder-style object to manufacture [`CopyProjectVersionInput`](crate::input::CopyProjectVersionInput).
    pub fn builder() -> crate::input::copy_project_version_input::Builder {
        crate::input::copy_project_version_input::Builder::default()
    }
    /// Creates a new `CopyProjectVersion` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CopyProjectVersion {
    type Output = std::result::Result<
        crate::output::CopyProjectVersionOutput,
        crate::error::CopyProjectVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_copy_project_version::de_copy_project_version_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_copy_project_version::de_copy_project_version_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateCollection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_collection`](crate::client::fluent_builders::CreateCollection).
///
/// `ParseStrictResponse` impl for `CreateCollection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateCollection {
    _private: (),
}
impl CreateCollection {
    /// Creates a new builder-style object to manufacture [`CreateCollectionInput`](crate::input::CreateCollectionInput).
    pub fn builder() -> crate::input::create_collection_input::Builder {
        crate::input::create_collection_input::Builder::default()
    }
    /// Creates a new `CreateCollection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateCollection {
    type Output = std::result::Result<
        crate::output::CreateCollectionOutput,
        crate::error::CreateCollectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_collection::de_create_collection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_collection::de_create_collection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateDataset`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_dataset`](crate::client::fluent_builders::CreateDataset).
///
/// `ParseStrictResponse` impl for `CreateDataset`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateDataset {
    _private: (),
}
impl CreateDataset {
    /// Creates a new builder-style object to manufacture [`CreateDatasetInput`](crate::input::CreateDatasetInput).
    pub fn builder() -> crate::input::create_dataset_input::Builder {
        crate::input::create_dataset_input::Builder::default()
    }
    /// Creates a new `CreateDataset` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateDataset {
    type Output =
        std::result::Result<crate::output::CreateDatasetOutput, crate::error::CreateDatasetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_dataset::de_create_dataset_http_error(response)
        } else {
            crate::protocol_serde::shape_create_dataset::de_create_dataset_http_response(response)
        }
    }
}

/// Operation shape for `CreateProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_project`](crate::client::fluent_builders::CreateProject).
///
/// `ParseStrictResponse` impl for `CreateProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateProject {
    _private: (),
}
impl CreateProject {
    /// Creates a new builder-style object to manufacture [`CreateProjectInput`](crate::input::CreateProjectInput).
    pub fn builder() -> crate::input::create_project_input::Builder {
        crate::input::create_project_input::Builder::default()
    }
    /// Creates a new `CreateProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateProject {
    type Output =
        std::result::Result<crate::output::CreateProjectOutput, crate::error::CreateProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_project::de_create_project_http_error(response)
        } else {
            crate::protocol_serde::shape_create_project::de_create_project_http_response(response)
        }
    }
}

/// Operation shape for `CreateProjectVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_project_version`](crate::client::fluent_builders::CreateProjectVersion).
///
/// `ParseStrictResponse` impl for `CreateProjectVersion`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateProjectVersion {
    _private: (),
}
impl CreateProjectVersion {
    /// Creates a new builder-style object to manufacture [`CreateProjectVersionInput`](crate::input::CreateProjectVersionInput).
    pub fn builder() -> crate::input::create_project_version_input::Builder {
        crate::input::create_project_version_input::Builder::default()
    }
    /// Creates a new `CreateProjectVersion` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateProjectVersion {
    type Output = std::result::Result<
        crate::output::CreateProjectVersionOutput,
        crate::error::CreateProjectVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_project_version::de_create_project_version_http_error(response)
        } else {
            crate::protocol_serde::shape_create_project_version::de_create_project_version_http_response(response)
        }
    }
}

/// Operation shape for `CreateStreamProcessor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_stream_processor`](crate::client::fluent_builders::CreateStreamProcessor).
///
/// `ParseStrictResponse` impl for `CreateStreamProcessor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateStreamProcessor {
    _private: (),
}
impl CreateStreamProcessor {
    /// Creates a new builder-style object to manufacture [`CreateStreamProcessorInput`](crate::input::CreateStreamProcessorInput).
    pub fn builder() -> crate::input::create_stream_processor_input::Builder {
        crate::input::create_stream_processor_input::Builder::default()
    }
    /// Creates a new `CreateStreamProcessor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateStreamProcessor {
    type Output = std::result::Result<
        crate::output::CreateStreamProcessorOutput,
        crate::error::CreateStreamProcessorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_stream_processor::de_create_stream_processor_http_error(response)
        } else {
            crate::protocol_serde::shape_create_stream_processor::de_create_stream_processor_http_response(response)
        }
    }
}

/// Operation shape for `DeleteCollection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_collection`](crate::client::fluent_builders::DeleteCollection).
///
/// `ParseStrictResponse` impl for `DeleteCollection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteCollection {
    _private: (),
}
impl DeleteCollection {
    /// Creates a new builder-style object to manufacture [`DeleteCollectionInput`](crate::input::DeleteCollectionInput).
    pub fn builder() -> crate::input::delete_collection_input::Builder {
        crate::input::delete_collection_input::Builder::default()
    }
    /// Creates a new `DeleteCollection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteCollection {
    type Output = std::result::Result<
        crate::output::DeleteCollectionOutput,
        crate::error::DeleteCollectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_collection::de_delete_collection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_collection::de_delete_collection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteDataset`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_dataset`](crate::client::fluent_builders::DeleteDataset).
///
/// `ParseStrictResponse` impl for `DeleteDataset`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteDataset {
    _private: (),
}
impl DeleteDataset {
    /// Creates a new builder-style object to manufacture [`DeleteDatasetInput`](crate::input::DeleteDatasetInput).
    pub fn builder() -> crate::input::delete_dataset_input::Builder {
        crate::input::delete_dataset_input::Builder::default()
    }
    /// Creates a new `DeleteDataset` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteDataset {
    type Output =
        std::result::Result<crate::output::DeleteDatasetOutput, crate::error::DeleteDatasetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_dataset::de_delete_dataset_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_dataset::de_delete_dataset_http_response(response)
        }
    }
}

/// Operation shape for `DeleteFaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_faces`](crate::client::fluent_builders::DeleteFaces).
///
/// `ParseStrictResponse` impl for `DeleteFaces`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteFaces {
    _private: (),
}
impl DeleteFaces {
    /// Creates a new builder-style object to manufacture [`DeleteFacesInput`](crate::input::DeleteFacesInput).
    pub fn builder() -> crate::input::delete_faces_input::Builder {
        crate::input::delete_faces_input::Builder::default()
    }
    /// Creates a new `DeleteFaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteFaces {
    type Output =
        std::result::Result<crate::output::DeleteFacesOutput, crate::error::DeleteFacesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_faces::de_delete_faces_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_faces::de_delete_faces_http_response(response)
        }
    }
}

/// Operation shape for `DeleteProject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_project`](crate::client::fluent_builders::DeleteProject).
///
/// `ParseStrictResponse` impl for `DeleteProject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteProject {
    _private: (),
}
impl DeleteProject {
    /// Creates a new builder-style object to manufacture [`DeleteProjectInput`](crate::input::DeleteProjectInput).
    pub fn builder() -> crate::input::delete_project_input::Builder {
        crate::input::delete_project_input::Builder::default()
    }
    /// Creates a new `DeleteProject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteProject {
    type Output =
        std::result::Result<crate::output::DeleteProjectOutput, crate::error::DeleteProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_project::de_delete_project_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_project::de_delete_project_http_response(response)
        }
    }
}

/// Operation shape for `DeleteProjectPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_project_policy`](crate::client::fluent_builders::DeleteProjectPolicy).
///
/// `ParseStrictResponse` impl for `DeleteProjectPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteProjectPolicy {
    _private: (),
}
impl DeleteProjectPolicy {
    /// Creates a new builder-style object to manufacture [`DeleteProjectPolicyInput`](crate::input::DeleteProjectPolicyInput).
    pub fn builder() -> crate::input::delete_project_policy_input::Builder {
        crate::input::delete_project_policy_input::Builder::default()
    }
    /// Creates a new `DeleteProjectPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteProjectPolicy {
    type Output = std::result::Result<
        crate::output::DeleteProjectPolicyOutput,
        crate::error::DeleteProjectPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_project_policy::de_delete_project_policy_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_project_policy::de_delete_project_policy_http_response(response)
        }
    }
}

/// Operation shape for `DeleteProjectVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_project_version`](crate::client::fluent_builders::DeleteProjectVersion).
///
/// `ParseStrictResponse` impl for `DeleteProjectVersion`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteProjectVersion {
    _private: (),
}
impl DeleteProjectVersion {
    /// Creates a new builder-style object to manufacture [`DeleteProjectVersionInput`](crate::input::DeleteProjectVersionInput).
    pub fn builder() -> crate::input::delete_project_version_input::Builder {
        crate::input::delete_project_version_input::Builder::default()
    }
    /// Creates a new `DeleteProjectVersion` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteProjectVersion {
    type Output = std::result::Result<
        crate::output::DeleteProjectVersionOutput,
        crate::error::DeleteProjectVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_project_version::de_delete_project_version_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_project_version::de_delete_project_version_http_response(response)
        }
    }
}

/// Operation shape for `DeleteStreamProcessor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_stream_processor`](crate::client::fluent_builders::DeleteStreamProcessor).
///
/// `ParseStrictResponse` impl for `DeleteStreamProcessor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteStreamProcessor {
    _private: (),
}
impl DeleteStreamProcessor {
    /// Creates a new builder-style object to manufacture [`DeleteStreamProcessorInput`](crate::input::DeleteStreamProcessorInput).
    pub fn builder() -> crate::input::delete_stream_processor_input::Builder {
        crate::input::delete_stream_processor_input::Builder::default()
    }
    /// Creates a new `DeleteStreamProcessor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteStreamProcessor {
    type Output = std::result::Result<
        crate::output::DeleteStreamProcessorOutput,
        crate::error::DeleteStreamProcessorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_stream_processor::de_delete_stream_processor_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_stream_processor::de_delete_stream_processor_http_response(response)
        }
    }
}

/// Operation shape for `DescribeCollection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_collection`](crate::client::fluent_builders::DescribeCollection).
///
/// `ParseStrictResponse` impl for `DescribeCollection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeCollection {
    _private: (),
}
impl DescribeCollection {
    /// Creates a new builder-style object to manufacture [`DescribeCollectionInput`](crate::input::DescribeCollectionInput).
    pub fn builder() -> crate::input::describe_collection_input::Builder {
        crate::input::describe_collection_input::Builder::default()
    }
    /// Creates a new `DescribeCollection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeCollection {
    type Output = std::result::Result<
        crate::output::DescribeCollectionOutput,
        crate::error::DescribeCollectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_collection::de_describe_collection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_collection::de_describe_collection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeDataset`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_dataset`](crate::client::fluent_builders::DescribeDataset).
///
/// `ParseStrictResponse` impl for `DescribeDataset`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeDataset {
    _private: (),
}
impl DescribeDataset {
    /// Creates a new builder-style object to manufacture [`DescribeDatasetInput`](crate::input::DescribeDatasetInput).
    pub fn builder() -> crate::input::describe_dataset_input::Builder {
        crate::input::describe_dataset_input::Builder::default()
    }
    /// Creates a new `DescribeDataset` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeDataset {
    type Output = std::result::Result<
        crate::output::DescribeDatasetOutput,
        crate::error::DescribeDatasetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_dataset::de_describe_dataset_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_dataset::de_describe_dataset_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeProjects`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_projects`](crate::client::fluent_builders::DescribeProjects).
///
/// `ParseStrictResponse` impl for `DescribeProjects`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeProjects {
    _private: (),
}
impl DescribeProjects {
    /// Creates a new builder-style object to manufacture [`DescribeProjectsInput`](crate::input::DescribeProjectsInput).
    pub fn builder() -> crate::input::describe_projects_input::Builder {
        crate::input::describe_projects_input::Builder::default()
    }
    /// Creates a new `DescribeProjects` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeProjects {
    type Output = std::result::Result<
        crate::output::DescribeProjectsOutput,
        crate::error::DescribeProjectsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_projects::de_describe_projects_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_projects::de_describe_projects_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeProjectVersions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_project_versions`](crate::client::fluent_builders::DescribeProjectVersions).
///
/// `ParseStrictResponse` impl for `DescribeProjectVersions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeProjectVersions {
    _private: (),
}
impl DescribeProjectVersions {
    /// Creates a new builder-style object to manufacture [`DescribeProjectVersionsInput`](crate::input::DescribeProjectVersionsInput).
    pub fn builder() -> crate::input::describe_project_versions_input::Builder {
        crate::input::describe_project_versions_input::Builder::default()
    }
    /// Creates a new `DescribeProjectVersions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeProjectVersions {
    type Output = std::result::Result<
        crate::output::DescribeProjectVersionsOutput,
        crate::error::DescribeProjectVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_project_versions::de_describe_project_versions_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_project_versions::de_describe_project_versions_http_response(response)
        }
    }
}

/// Operation shape for `DescribeStreamProcessor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_stream_processor`](crate::client::fluent_builders::DescribeStreamProcessor).
///
/// `ParseStrictResponse` impl for `DescribeStreamProcessor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeStreamProcessor {
    _private: (),
}
impl DescribeStreamProcessor {
    /// Creates a new builder-style object to manufacture [`DescribeStreamProcessorInput`](crate::input::DescribeStreamProcessorInput).
    pub fn builder() -> crate::input::describe_stream_processor_input::Builder {
        crate::input::describe_stream_processor_input::Builder::default()
    }
    /// Creates a new `DescribeStreamProcessor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeStreamProcessor {
    type Output = std::result::Result<
        crate::output::DescribeStreamProcessorOutput,
        crate::error::DescribeStreamProcessorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_stream_processor::de_describe_stream_processor_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_stream_processor::de_describe_stream_processor_http_response(response)
        }
    }
}

/// Operation shape for `DetectCustomLabels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detect_custom_labels`](crate::client::fluent_builders::DetectCustomLabels).
///
/// `ParseStrictResponse` impl for `DetectCustomLabels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetectCustomLabels {
    _private: (),
}
impl DetectCustomLabels {
    /// Creates a new builder-style object to manufacture [`DetectCustomLabelsInput`](crate::input::DetectCustomLabelsInput).
    pub fn builder() -> crate::input::detect_custom_labels_input::Builder {
        crate::input::detect_custom_labels_input::Builder::default()
    }
    /// Creates a new `DetectCustomLabels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetectCustomLabels {
    type Output = std::result::Result<
        crate::output::DetectCustomLabelsOutput,
        crate::error::DetectCustomLabelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detect_custom_labels::de_detect_custom_labels_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_detect_custom_labels::de_detect_custom_labels_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DetectFaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detect_faces`](crate::client::fluent_builders::DetectFaces).
///
/// `ParseStrictResponse` impl for `DetectFaces`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetectFaces {
    _private: (),
}
impl DetectFaces {
    /// Creates a new builder-style object to manufacture [`DetectFacesInput`](crate::input::DetectFacesInput).
    pub fn builder() -> crate::input::detect_faces_input::Builder {
        crate::input::detect_faces_input::Builder::default()
    }
    /// Creates a new `DetectFaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetectFaces {
    type Output =
        std::result::Result<crate::output::DetectFacesOutput, crate::error::DetectFacesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detect_faces::de_detect_faces_http_error(response)
        } else {
            crate::protocol_serde::shape_detect_faces::de_detect_faces_http_response(response)
        }
    }
}

/// Operation shape for `DetectLabels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detect_labels`](crate::client::fluent_builders::DetectLabels).
///
/// `ParseStrictResponse` impl for `DetectLabels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetectLabels {
    _private: (),
}
impl DetectLabels {
    /// Creates a new builder-style object to manufacture [`DetectLabelsInput`](crate::input::DetectLabelsInput).
    pub fn builder() -> crate::input::detect_labels_input::Builder {
        crate::input::detect_labels_input::Builder::default()
    }
    /// Creates a new `DetectLabels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetectLabels {
    type Output =
        std::result::Result<crate::output::DetectLabelsOutput, crate::error::DetectLabelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detect_labels::de_detect_labels_http_error(response)
        } else {
            crate::protocol_serde::shape_detect_labels::de_detect_labels_http_response(response)
        }
    }
}

/// Operation shape for `DetectModerationLabels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detect_moderation_labels`](crate::client::fluent_builders::DetectModerationLabels).
///
/// `ParseStrictResponse` impl for `DetectModerationLabels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetectModerationLabels {
    _private: (),
}
impl DetectModerationLabels {
    /// Creates a new builder-style object to manufacture [`DetectModerationLabelsInput`](crate::input::DetectModerationLabelsInput).
    pub fn builder() -> crate::input::detect_moderation_labels_input::Builder {
        crate::input::detect_moderation_labels_input::Builder::default()
    }
    /// Creates a new `DetectModerationLabels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetectModerationLabels {
    type Output = std::result::Result<
        crate::output::DetectModerationLabelsOutput,
        crate::error::DetectModerationLabelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detect_moderation_labels::de_detect_moderation_labels_http_error(response)
        } else {
            crate::protocol_serde::shape_detect_moderation_labels::de_detect_moderation_labels_http_response(response)
        }
    }
}

/// Operation shape for `DetectProtectiveEquipment`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detect_protective_equipment`](crate::client::fluent_builders::DetectProtectiveEquipment).
///
/// `ParseStrictResponse` impl for `DetectProtectiveEquipment`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetectProtectiveEquipment {
    _private: (),
}
impl DetectProtectiveEquipment {
    /// Creates a new builder-style object to manufacture [`DetectProtectiveEquipmentInput`](crate::input::DetectProtectiveEquipmentInput).
    pub fn builder() -> crate::input::detect_protective_equipment_input::Builder {
        crate::input::detect_protective_equipment_input::Builder::default()
    }
    /// Creates a new `DetectProtectiveEquipment` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetectProtectiveEquipment {
    type Output = std::result::Result<
        crate::output::DetectProtectiveEquipmentOutput,
        crate::error::DetectProtectiveEquipmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detect_protective_equipment::de_detect_protective_equipment_http_error(response)
        } else {
            crate::protocol_serde::shape_detect_protective_equipment::de_detect_protective_equipment_http_response(response)
        }
    }
}

/// Operation shape for `DetectText`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`detect_text`](crate::client::fluent_builders::DetectText).
///
/// `ParseStrictResponse` impl for `DetectText`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DetectText {
    _private: (),
}
impl DetectText {
    /// Creates a new builder-style object to manufacture [`DetectTextInput`](crate::input::DetectTextInput).
    pub fn builder() -> crate::input::detect_text_input::Builder {
        crate::input::detect_text_input::Builder::default()
    }
    /// Creates a new `DetectText` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DetectText {
    type Output =
        std::result::Result<crate::output::DetectTextOutput, crate::error::DetectTextError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_detect_text::de_detect_text_http_error(response)
        } else {
            crate::protocol_serde::shape_detect_text::de_detect_text_http_response(response)
        }
    }
}

/// Operation shape for `DistributeDatasetEntries`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`distribute_dataset_entries`](crate::client::fluent_builders::DistributeDatasetEntries).
///
/// `ParseStrictResponse` impl for `DistributeDatasetEntries`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DistributeDatasetEntries {
    _private: (),
}
impl DistributeDatasetEntries {
    /// Creates a new builder-style object to manufacture [`DistributeDatasetEntriesInput`](crate::input::DistributeDatasetEntriesInput).
    pub fn builder() -> crate::input::distribute_dataset_entries_input::Builder {
        crate::input::distribute_dataset_entries_input::Builder::default()
    }
    /// Creates a new `DistributeDatasetEntries` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DistributeDatasetEntries {
    type Output = std::result::Result<
        crate::output::DistributeDatasetEntriesOutput,
        crate::error::DistributeDatasetEntriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_distribute_dataset_entries::de_distribute_dataset_entries_http_error(response)
        } else {
            crate::protocol_serde::shape_distribute_dataset_entries::de_distribute_dataset_entries_http_response(response)
        }
    }
}

/// Operation shape for `GetCelebrityInfo`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_celebrity_info`](crate::client::fluent_builders::GetCelebrityInfo).
///
/// `ParseStrictResponse` impl for `GetCelebrityInfo`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCelebrityInfo {
    _private: (),
}
impl GetCelebrityInfo {
    /// Creates a new builder-style object to manufacture [`GetCelebrityInfoInput`](crate::input::GetCelebrityInfoInput).
    pub fn builder() -> crate::input::get_celebrity_info_input::Builder {
        crate::input::get_celebrity_info_input::Builder::default()
    }
    /// Creates a new `GetCelebrityInfo` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCelebrityInfo {
    type Output = std::result::Result<
        crate::output::GetCelebrityInfoOutput,
        crate::error::GetCelebrityInfoError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_celebrity_info::de_get_celebrity_info_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_celebrity_info::de_get_celebrity_info_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetCelebrityRecognition`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_celebrity_recognition`](crate::client::fluent_builders::GetCelebrityRecognition).
///
/// `ParseStrictResponse` impl for `GetCelebrityRecognition`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCelebrityRecognition {
    _private: (),
}
impl GetCelebrityRecognition {
    /// Creates a new builder-style object to manufacture [`GetCelebrityRecognitionInput`](crate::input::GetCelebrityRecognitionInput).
    pub fn builder() -> crate::input::get_celebrity_recognition_input::Builder {
        crate::input::get_celebrity_recognition_input::Builder::default()
    }
    /// Creates a new `GetCelebrityRecognition` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCelebrityRecognition {
    type Output = std::result::Result<
        crate::output::GetCelebrityRecognitionOutput,
        crate::error::GetCelebrityRecognitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_celebrity_recognition::de_get_celebrity_recognition_http_error(response)
        } else {
            crate::protocol_serde::shape_get_celebrity_recognition::de_get_celebrity_recognition_http_response(response)
        }
    }
}

/// Operation shape for `GetContentModeration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_content_moderation`](crate::client::fluent_builders::GetContentModeration).
///
/// `ParseStrictResponse` impl for `GetContentModeration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetContentModeration {
    _private: (),
}
impl GetContentModeration {
    /// Creates a new builder-style object to manufacture [`GetContentModerationInput`](crate::input::GetContentModerationInput).
    pub fn builder() -> crate::input::get_content_moderation_input::Builder {
        crate::input::get_content_moderation_input::Builder::default()
    }
    /// Creates a new `GetContentModeration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetContentModeration {
    type Output = std::result::Result<
        crate::output::GetContentModerationOutput,
        crate::error::GetContentModerationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_content_moderation::de_get_content_moderation_http_error(response)
        } else {
            crate::protocol_serde::shape_get_content_moderation::de_get_content_moderation_http_response(response)
        }
    }
}

/// Operation shape for `GetFaceDetection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_face_detection`](crate::client::fluent_builders::GetFaceDetection).
///
/// `ParseStrictResponse` impl for `GetFaceDetection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFaceDetection {
    _private: (),
}
impl GetFaceDetection {
    /// Creates a new builder-style object to manufacture [`GetFaceDetectionInput`](crate::input::GetFaceDetectionInput).
    pub fn builder() -> crate::input::get_face_detection_input::Builder {
        crate::input::get_face_detection_input::Builder::default()
    }
    /// Creates a new `GetFaceDetection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFaceDetection {
    type Output = std::result::Result<
        crate::output::GetFaceDetectionOutput,
        crate::error::GetFaceDetectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_face_detection::de_get_face_detection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_face_detection::de_get_face_detection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetFaceSearch`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_face_search`](crate::client::fluent_builders::GetFaceSearch).
///
/// `ParseStrictResponse` impl for `GetFaceSearch`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFaceSearch {
    _private: (),
}
impl GetFaceSearch {
    /// Creates a new builder-style object to manufacture [`GetFaceSearchInput`](crate::input::GetFaceSearchInput).
    pub fn builder() -> crate::input::get_face_search_input::Builder {
        crate::input::get_face_search_input::Builder::default()
    }
    /// Creates a new `GetFaceSearch` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFaceSearch {
    type Output =
        std::result::Result<crate::output::GetFaceSearchOutput, crate::error::GetFaceSearchError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_face_search::de_get_face_search_http_error(response)
        } else {
            crate::protocol_serde::shape_get_face_search::de_get_face_search_http_response(response)
        }
    }
}

/// Operation shape for `GetLabelDetection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_label_detection`](crate::client::fluent_builders::GetLabelDetection).
///
/// `ParseStrictResponse` impl for `GetLabelDetection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetLabelDetection {
    _private: (),
}
impl GetLabelDetection {
    /// Creates a new builder-style object to manufacture [`GetLabelDetectionInput`](crate::input::GetLabelDetectionInput).
    pub fn builder() -> crate::input::get_label_detection_input::Builder {
        crate::input::get_label_detection_input::Builder::default()
    }
    /// Creates a new `GetLabelDetection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetLabelDetection {
    type Output = std::result::Result<
        crate::output::GetLabelDetectionOutput,
        crate::error::GetLabelDetectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_label_detection::de_get_label_detection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_label_detection::de_get_label_detection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetPersonTracking`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_person_tracking`](crate::client::fluent_builders::GetPersonTracking).
///
/// `ParseStrictResponse` impl for `GetPersonTracking`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetPersonTracking {
    _private: (),
}
impl GetPersonTracking {
    /// Creates a new builder-style object to manufacture [`GetPersonTrackingInput`](crate::input::GetPersonTrackingInput).
    pub fn builder() -> crate::input::get_person_tracking_input::Builder {
        crate::input::get_person_tracking_input::Builder::default()
    }
    /// Creates a new `GetPersonTracking` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetPersonTracking {
    type Output = std::result::Result<
        crate::output::GetPersonTrackingOutput,
        crate::error::GetPersonTrackingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_person_tracking::de_get_person_tracking_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_person_tracking::de_get_person_tracking_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetSegmentDetection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_segment_detection`](crate::client::fluent_builders::GetSegmentDetection).
///
/// `ParseStrictResponse` impl for `GetSegmentDetection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSegmentDetection {
    _private: (),
}
impl GetSegmentDetection {
    /// Creates a new builder-style object to manufacture [`GetSegmentDetectionInput`](crate::input::GetSegmentDetectionInput).
    pub fn builder() -> crate::input::get_segment_detection_input::Builder {
        crate::input::get_segment_detection_input::Builder::default()
    }
    /// Creates a new `GetSegmentDetection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSegmentDetection {
    type Output = std::result::Result<
        crate::output::GetSegmentDetectionOutput,
        crate::error::GetSegmentDetectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_segment_detection::de_get_segment_detection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_segment_detection::de_get_segment_detection_http_response(response)
        }
    }
}

/// Operation shape for `GetTextDetection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_text_detection`](crate::client::fluent_builders::GetTextDetection).
///
/// `ParseStrictResponse` impl for `GetTextDetection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetTextDetection {
    _private: (),
}
impl GetTextDetection {
    /// Creates a new builder-style object to manufacture [`GetTextDetectionInput`](crate::input::GetTextDetectionInput).
    pub fn builder() -> crate::input::get_text_detection_input::Builder {
        crate::input::get_text_detection_input::Builder::default()
    }
    /// Creates a new `GetTextDetection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetTextDetection {
    type Output = std::result::Result<
        crate::output::GetTextDetectionOutput,
        crate::error::GetTextDetectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_text_detection::de_get_text_detection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_text_detection::de_get_text_detection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `IndexFaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`index_faces`](crate::client::fluent_builders::IndexFaces).
///
/// `ParseStrictResponse` impl for `IndexFaces`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct IndexFaces {
    _private: (),
}
impl IndexFaces {
    /// Creates a new builder-style object to manufacture [`IndexFacesInput`](crate::input::IndexFacesInput).
    pub fn builder() -> crate::input::index_faces_input::Builder {
        crate::input::index_faces_input::Builder::default()
    }
    /// Creates a new `IndexFaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for IndexFaces {
    type Output =
        std::result::Result<crate::output::IndexFacesOutput, crate::error::IndexFacesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_index_faces::de_index_faces_http_error(response)
        } else {
            crate::protocol_serde::shape_index_faces::de_index_faces_http_response(response)
        }
    }
}

/// Operation shape for `ListCollections`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_collections`](crate::client::fluent_builders::ListCollections).
///
/// `ParseStrictResponse` impl for `ListCollections`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListCollections {
    _private: (),
}
impl ListCollections {
    /// Creates a new builder-style object to manufacture [`ListCollectionsInput`](crate::input::ListCollectionsInput).
    pub fn builder() -> crate::input::list_collections_input::Builder {
        crate::input::list_collections_input::Builder::default()
    }
    /// Creates a new `ListCollections` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListCollections {
    type Output = std::result::Result<
        crate::output::ListCollectionsOutput,
        crate::error::ListCollectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_collections::de_list_collections_http_error(response)
        } else {
            crate::protocol_serde::shape_list_collections::de_list_collections_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListDatasetEntries`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_dataset_entries`](crate::client::fluent_builders::ListDatasetEntries).
///
/// `ParseStrictResponse` impl for `ListDatasetEntries`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListDatasetEntries {
    _private: (),
}
impl ListDatasetEntries {
    /// Creates a new builder-style object to manufacture [`ListDatasetEntriesInput`](crate::input::ListDatasetEntriesInput).
    pub fn builder() -> crate::input::list_dataset_entries_input::Builder {
        crate::input::list_dataset_entries_input::Builder::default()
    }
    /// Creates a new `ListDatasetEntries` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListDatasetEntries {
    type Output = std::result::Result<
        crate::output::ListDatasetEntriesOutput,
        crate::error::ListDatasetEntriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_dataset_entries::de_list_dataset_entries_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_dataset_entries::de_list_dataset_entries_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListDatasetLabels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_dataset_labels`](crate::client::fluent_builders::ListDatasetLabels).
///
/// `ParseStrictResponse` impl for `ListDatasetLabels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListDatasetLabels {
    _private: (),
}
impl ListDatasetLabels {
    /// Creates a new builder-style object to manufacture [`ListDatasetLabelsInput`](crate::input::ListDatasetLabelsInput).
    pub fn builder() -> crate::input::list_dataset_labels_input::Builder {
        crate::input::list_dataset_labels_input::Builder::default()
    }
    /// Creates a new `ListDatasetLabels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListDatasetLabels {
    type Output = std::result::Result<
        crate::output::ListDatasetLabelsOutput,
        crate::error::ListDatasetLabelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_dataset_labels::de_list_dataset_labels_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_dataset_labels::de_list_dataset_labels_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListFaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_faces`](crate::client::fluent_builders::ListFaces).
///
/// `ParseStrictResponse` impl for `ListFaces`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListFaces {
    _private: (),
}
impl ListFaces {
    /// Creates a new builder-style object to manufacture [`ListFacesInput`](crate::input::ListFacesInput).
    pub fn builder() -> crate::input::list_faces_input::Builder {
        crate::input::list_faces_input::Builder::default()
    }
    /// Creates a new `ListFaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListFaces {
    type Output = std::result::Result<crate::output::ListFacesOutput, crate::error::ListFacesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_faces::de_list_faces_http_error(response)
        } else {
            crate::protocol_serde::shape_list_faces::de_list_faces_http_response(response)
        }
    }
}

/// Operation shape for `ListProjectPolicies`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_project_policies`](crate::client::fluent_builders::ListProjectPolicies).
///
/// `ParseStrictResponse` impl for `ListProjectPolicies`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListProjectPolicies {
    _private: (),
}
impl ListProjectPolicies {
    /// Creates a new builder-style object to manufacture [`ListProjectPoliciesInput`](crate::input::ListProjectPoliciesInput).
    pub fn builder() -> crate::input::list_project_policies_input::Builder {
        crate::input::list_project_policies_input::Builder::default()
    }
    /// Creates a new `ListProjectPolicies` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListProjectPolicies {
    type Output = std::result::Result<
        crate::output::ListProjectPoliciesOutput,
        crate::error::ListProjectPoliciesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_project_policies::de_list_project_policies_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_project_policies::de_list_project_policies_http_response(response)
        }
    }
}

/// Operation shape for `ListStreamProcessors`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_stream_processors`](crate::client::fluent_builders::ListStreamProcessors).
///
/// `ParseStrictResponse` impl for `ListStreamProcessors`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListStreamProcessors {
    _private: (),
}
impl ListStreamProcessors {
    /// Creates a new builder-style object to manufacture [`ListStreamProcessorsInput`](crate::input::ListStreamProcessorsInput).
    pub fn builder() -> crate::input::list_stream_processors_input::Builder {
        crate::input::list_stream_processors_input::Builder::default()
    }
    /// Creates a new `ListStreamProcessors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListStreamProcessors {
    type Output = std::result::Result<
        crate::output::ListStreamProcessorsOutput,
        crate::error::ListStreamProcessorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_stream_processors::de_list_stream_processors_http_error(response)
        } else {
            crate::protocol_serde::shape_list_stream_processors::de_list_stream_processors_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `PutProjectPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_project_policy`](crate::client::fluent_builders::PutProjectPolicy).
///
/// `ParseStrictResponse` impl for `PutProjectPolicy`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutProjectPolicy {
    _private: (),
}
impl PutProjectPolicy {
    /// Creates a new builder-style object to manufacture [`PutProjectPolicyInput`](crate::input::PutProjectPolicyInput).
    pub fn builder() -> crate::input::put_project_policy_input::Builder {
        crate::input::put_project_policy_input::Builder::default()
    }
    /// Creates a new `PutProjectPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutProjectPolicy {
    type Output = std::result::Result<
        crate::output::PutProjectPolicyOutput,
        crate::error::PutProjectPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_project_policy::de_put_project_policy_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_project_policy::de_put_project_policy_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `RecognizeCelebrities`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`recognize_celebrities`](crate::client::fluent_builders::RecognizeCelebrities).
///
/// `ParseStrictResponse` impl for `RecognizeCelebrities`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RecognizeCelebrities {
    _private: (),
}
impl RecognizeCelebrities {
    /// Creates a new builder-style object to manufacture [`RecognizeCelebritiesInput`](crate::input::RecognizeCelebritiesInput).
    pub fn builder() -> crate::input::recognize_celebrities_input::Builder {
        crate::input::recognize_celebrities_input::Builder::default()
    }
    /// Creates a new `RecognizeCelebrities` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RecognizeCelebrities {
    type Output = std::result::Result<
        crate::output::RecognizeCelebritiesOutput,
        crate::error::RecognizeCelebritiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_recognize_celebrities::de_recognize_celebrities_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_recognize_celebrities::de_recognize_celebrities_http_response(response)
        }
    }
}

/// Operation shape for `SearchFaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`search_faces`](crate::client::fluent_builders::SearchFaces).
///
/// `ParseStrictResponse` impl for `SearchFaces`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct SearchFaces {
    _private: (),
}
impl SearchFaces {
    /// Creates a new builder-style object to manufacture [`SearchFacesInput`](crate::input::SearchFacesInput).
    pub fn builder() -> crate::input::search_faces_input::Builder {
        crate::input::search_faces_input::Builder::default()
    }
    /// Creates a new `SearchFaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SearchFaces {
    type Output =
        std::result::Result<crate::output::SearchFacesOutput, crate::error::SearchFacesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_search_faces::de_search_faces_http_error(response)
        } else {
            crate::protocol_serde::shape_search_faces::de_search_faces_http_response(response)
        }
    }
}

/// Operation shape for `SearchFacesByImage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`search_faces_by_image`](crate::client::fluent_builders::SearchFacesByImage).
///
/// `ParseStrictResponse` impl for `SearchFacesByImage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct SearchFacesByImage {
    _private: (),
}
impl SearchFacesByImage {
    /// Creates a new builder-style object to manufacture [`SearchFacesByImageInput`](crate::input::SearchFacesByImageInput).
    pub fn builder() -> crate::input::search_faces_by_image_input::Builder {
        crate::input::search_faces_by_image_input::Builder::default()
    }
    /// Creates a new `SearchFacesByImage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SearchFacesByImage {
    type Output = std::result::Result<
        crate::output::SearchFacesByImageOutput,
        crate::error::SearchFacesByImageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_search_faces_by_image::de_search_faces_by_image_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_search_faces_by_image::de_search_faces_by_image_http_response(response)
        }
    }
}

/// Operation shape for `StartCelebrityRecognition`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_celebrity_recognition`](crate::client::fluent_builders::StartCelebrityRecognition).
///
/// `ParseStrictResponse` impl for `StartCelebrityRecognition`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartCelebrityRecognition {
    _private: (),
}
impl StartCelebrityRecognition {
    /// Creates a new builder-style object to manufacture [`StartCelebrityRecognitionInput`](crate::input::StartCelebrityRecognitionInput).
    pub fn builder() -> crate::input::start_celebrity_recognition_input::Builder {
        crate::input::start_celebrity_recognition_input::Builder::default()
    }
    /// Creates a new `StartCelebrityRecognition` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartCelebrityRecognition {
    type Output = std::result::Result<
        crate::output::StartCelebrityRecognitionOutput,
        crate::error::StartCelebrityRecognitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_celebrity_recognition::de_start_celebrity_recognition_http_error(response)
        } else {
            crate::protocol_serde::shape_start_celebrity_recognition::de_start_celebrity_recognition_http_response(response)
        }
    }
}

/// Operation shape for `StartContentModeration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_content_moderation`](crate::client::fluent_builders::StartContentModeration).
///
/// `ParseStrictResponse` impl for `StartContentModeration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartContentModeration {
    _private: (),
}
impl StartContentModeration {
    /// Creates a new builder-style object to manufacture [`StartContentModerationInput`](crate::input::StartContentModerationInput).
    pub fn builder() -> crate::input::start_content_moderation_input::Builder {
        crate::input::start_content_moderation_input::Builder::default()
    }
    /// Creates a new `StartContentModeration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartContentModeration {
    type Output = std::result::Result<
        crate::output::StartContentModerationOutput,
        crate::error::StartContentModerationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_content_moderation::de_start_content_moderation_http_error(response)
        } else {
            crate::protocol_serde::shape_start_content_moderation::de_start_content_moderation_http_response(response)
        }
    }
}

/// Operation shape for `StartFaceDetection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_face_detection`](crate::client::fluent_builders::StartFaceDetection).
///
/// `ParseStrictResponse` impl for `StartFaceDetection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartFaceDetection {
    _private: (),
}
impl StartFaceDetection {
    /// Creates a new builder-style object to manufacture [`StartFaceDetectionInput`](crate::input::StartFaceDetectionInput).
    pub fn builder() -> crate::input::start_face_detection_input::Builder {
        crate::input::start_face_detection_input::Builder::default()
    }
    /// Creates a new `StartFaceDetection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartFaceDetection {
    type Output = std::result::Result<
        crate::output::StartFaceDetectionOutput,
        crate::error::StartFaceDetectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_face_detection::de_start_face_detection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_face_detection::de_start_face_detection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `StartFaceSearch`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_face_search`](crate::client::fluent_builders::StartFaceSearch).
///
/// `ParseStrictResponse` impl for `StartFaceSearch`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartFaceSearch {
    _private: (),
}
impl StartFaceSearch {
    /// Creates a new builder-style object to manufacture [`StartFaceSearchInput`](crate::input::StartFaceSearchInput).
    pub fn builder() -> crate::input::start_face_search_input::Builder {
        crate::input::start_face_search_input::Builder::default()
    }
    /// Creates a new `StartFaceSearch` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartFaceSearch {
    type Output = std::result::Result<
        crate::output::StartFaceSearchOutput,
        crate::error::StartFaceSearchError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_face_search::de_start_face_search_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_face_search::de_start_face_search_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `StartLabelDetection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_label_detection`](crate::client::fluent_builders::StartLabelDetection).
///
/// `ParseStrictResponse` impl for `StartLabelDetection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartLabelDetection {
    _private: (),
}
impl StartLabelDetection {
    /// Creates a new builder-style object to manufacture [`StartLabelDetectionInput`](crate::input::StartLabelDetectionInput).
    pub fn builder() -> crate::input::start_label_detection_input::Builder {
        crate::input::start_label_detection_input::Builder::default()
    }
    /// Creates a new `StartLabelDetection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartLabelDetection {
    type Output = std::result::Result<
        crate::output::StartLabelDetectionOutput,
        crate::error::StartLabelDetectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_label_detection::de_start_label_detection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_label_detection::de_start_label_detection_http_response(response)
        }
    }
}

/// Operation shape for `StartPersonTracking`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_person_tracking`](crate::client::fluent_builders::StartPersonTracking).
///
/// `ParseStrictResponse` impl for `StartPersonTracking`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartPersonTracking {
    _private: (),
}
impl StartPersonTracking {
    /// Creates a new builder-style object to manufacture [`StartPersonTrackingInput`](crate::input::StartPersonTrackingInput).
    pub fn builder() -> crate::input::start_person_tracking_input::Builder {
        crate::input::start_person_tracking_input::Builder::default()
    }
    /// Creates a new `StartPersonTracking` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartPersonTracking {
    type Output = std::result::Result<
        crate::output::StartPersonTrackingOutput,
        crate::error::StartPersonTrackingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_person_tracking::de_start_person_tracking_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_person_tracking::de_start_person_tracking_http_response(response)
        }
    }
}

/// Operation shape for `StartProjectVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_project_version`](crate::client::fluent_builders::StartProjectVersion).
///
/// `ParseStrictResponse` impl for `StartProjectVersion`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartProjectVersion {
    _private: (),
}
impl StartProjectVersion {
    /// Creates a new builder-style object to manufacture [`StartProjectVersionInput`](crate::input::StartProjectVersionInput).
    pub fn builder() -> crate::input::start_project_version_input::Builder {
        crate::input::start_project_version_input::Builder::default()
    }
    /// Creates a new `StartProjectVersion` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartProjectVersion {
    type Output = std::result::Result<
        crate::output::StartProjectVersionOutput,
        crate::error::StartProjectVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_project_version::de_start_project_version_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_project_version::de_start_project_version_http_response(response)
        }
    }
}

/// Operation shape for `StartSegmentDetection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_segment_detection`](crate::client::fluent_builders::StartSegmentDetection).
///
/// `ParseStrictResponse` impl for `StartSegmentDetection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartSegmentDetection {
    _private: (),
}
impl StartSegmentDetection {
    /// Creates a new builder-style object to manufacture [`StartSegmentDetectionInput`](crate::input::StartSegmentDetectionInput).
    pub fn builder() -> crate::input::start_segment_detection_input::Builder {
        crate::input::start_segment_detection_input::Builder::default()
    }
    /// Creates a new `StartSegmentDetection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartSegmentDetection {
    type Output = std::result::Result<
        crate::output::StartSegmentDetectionOutput,
        crate::error::StartSegmentDetectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_segment_detection::de_start_segment_detection_http_error(response)
        } else {
            crate::protocol_serde::shape_start_segment_detection::de_start_segment_detection_http_response(response)
        }
    }
}

/// Operation shape for `StartStreamProcessor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_stream_processor`](crate::client::fluent_builders::StartStreamProcessor).
///
/// `ParseStrictResponse` impl for `StartStreamProcessor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartStreamProcessor {
    _private: (),
}
impl StartStreamProcessor {
    /// Creates a new builder-style object to manufacture [`StartStreamProcessorInput`](crate::input::StartStreamProcessorInput).
    pub fn builder() -> crate::input::start_stream_processor_input::Builder {
        crate::input::start_stream_processor_input::Builder::default()
    }
    /// Creates a new `StartStreamProcessor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartStreamProcessor {
    type Output = std::result::Result<
        crate::output::StartStreamProcessorOutput,
        crate::error::StartStreamProcessorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_stream_processor::de_start_stream_processor_http_error(response)
        } else {
            crate::protocol_serde::shape_start_stream_processor::de_start_stream_processor_http_response(response)
        }
    }
}

/// Operation shape for `StartTextDetection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_text_detection`](crate::client::fluent_builders::StartTextDetection).
///
/// `ParseStrictResponse` impl for `StartTextDetection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartTextDetection {
    _private: (),
}
impl StartTextDetection {
    /// Creates a new builder-style object to manufacture [`StartTextDetectionInput`](crate::input::StartTextDetectionInput).
    pub fn builder() -> crate::input::start_text_detection_input::Builder {
        crate::input::start_text_detection_input::Builder::default()
    }
    /// Creates a new `StartTextDetection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartTextDetection {
    type Output = std::result::Result<
        crate::output::StartTextDetectionOutput,
        crate::error::StartTextDetectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_text_detection::de_start_text_detection_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_text_detection::de_start_text_detection_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `StopProjectVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_project_version`](crate::client::fluent_builders::StopProjectVersion).
///
/// `ParseStrictResponse` impl for `StopProjectVersion`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopProjectVersion {
    _private: (),
}
impl StopProjectVersion {
    /// Creates a new builder-style object to manufacture [`StopProjectVersionInput`](crate::input::StopProjectVersionInput).
    pub fn builder() -> crate::input::stop_project_version_input::Builder {
        crate::input::stop_project_version_input::Builder::default()
    }
    /// Creates a new `StopProjectVersion` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopProjectVersion {
    type Output = std::result::Result<
        crate::output::StopProjectVersionOutput,
        crate::error::StopProjectVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_stop_project_version::de_stop_project_version_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_stop_project_version::de_stop_project_version_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `StopStreamProcessor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_stream_processor`](crate::client::fluent_builders::StopStreamProcessor).
///
/// `ParseStrictResponse` impl for `StopStreamProcessor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopStreamProcessor {
    _private: (),
}
impl StopStreamProcessor {
    /// Creates a new builder-style object to manufacture [`StopStreamProcessorInput`](crate::input::StopStreamProcessorInput).
    pub fn builder() -> crate::input::stop_stream_processor_input::Builder {
        crate::input::stop_stream_processor_input::Builder::default()
    }
    /// Creates a new `StopStreamProcessor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopStreamProcessor {
    type Output = std::result::Result<
        crate::output::StopStreamProcessorOutput,
        crate::error::StopStreamProcessorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_stop_stream_processor::de_stop_stream_processor_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_stop_stream_processor::de_stop_stream_processor_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateDatasetEntries`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_dataset_entries`](crate::client::fluent_builders::UpdateDatasetEntries).
///
/// `ParseStrictResponse` impl for `UpdateDatasetEntries`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateDatasetEntries {
    _private: (),
}
impl UpdateDatasetEntries {
    /// Creates a new builder-style object to manufacture [`UpdateDatasetEntriesInput`](crate::input::UpdateDatasetEntriesInput).
    pub fn builder() -> crate::input::update_dataset_entries_input::Builder {
        crate::input::update_dataset_entries_input::Builder::default()
    }
    /// Creates a new `UpdateDatasetEntries` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateDatasetEntries {
    type Output = std::result::Result<
        crate::output::UpdateDatasetEntriesOutput,
        crate::error::UpdateDatasetEntriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_dataset_entries::de_update_dataset_entries_http_error(response)
        } else {
            crate::protocol_serde::shape_update_dataset_entries::de_update_dataset_entries_http_response(response)
        }
    }
}

/// Operation shape for `UpdateStreamProcessor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_stream_processor`](crate::client::fluent_builders::UpdateStreamProcessor).
///
/// `ParseStrictResponse` impl for `UpdateStreamProcessor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateStreamProcessor {
    _private: (),
}
impl UpdateStreamProcessor {
    /// Creates a new builder-style object to manufacture [`UpdateStreamProcessorInput`](crate::input::UpdateStreamProcessorInput).
    pub fn builder() -> crate::input::update_stream_processor_input::Builder {
        crate::input::update_stream_processor_input::Builder::default()
    }
    /// Creates a new `UpdateStreamProcessor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateStreamProcessor {
    type Output = std::result::Result<
        crate::output::UpdateStreamProcessorOutput,
        crate::error::UpdateStreamProcessorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_stream_processor::de_update_stream_processor_http_error(response)
        } else {
            crate::protocol_serde::shape_update_stream_processor::de_update_stream_processor_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
