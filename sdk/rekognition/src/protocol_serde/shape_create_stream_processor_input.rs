// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_stream_processor_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_stream_processor::CreateStreamProcessorInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.input {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Input").start_object();
        crate::protocol_serde::shape_stream_processor_input::ser_stream_processor_input(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.output {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Output").start_object();
        crate::protocol_serde::shape_stream_processor_output::ser_stream_processor_output(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.name {
        object.key("Name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.settings {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Settings").start_object();
        crate::protocol_serde::shape_stream_processor_settings::ser_stream_processor_settings(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.role_arn {
        object.key("RoleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.notification_channel {
        #[allow(unused_mut)]
        let mut object_14 = object.key("NotificationChannel").start_object();
        crate::protocol_serde::shape_stream_processor_notification_channel::ser_stream_processor_notification_channel(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.regions_of_interest {
        let mut array_17 = object.key("RegionsOfInterest").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_region_of_interest::ser_region_of_interest(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.data_sharing_preference {
        #[allow(unused_mut)]
        let mut object_21 = object.key("DataSharingPreference").start_object();
        crate::protocol_serde::shape_stream_processor_data_sharing_preference::ser_stream_processor_data_sharing_preference(&mut object_21, var_20)?;
        object_21.finish();
    }
    Ok(())
}
