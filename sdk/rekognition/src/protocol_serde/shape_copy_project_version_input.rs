// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_copy_project_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::copy_project_version::CopyProjectVersionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.source_project_arn {
        object.key("SourceProjectArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source_project_version_arn {
        object.key("SourceProjectVersionArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.destination_project_arn {
        object.key("DestinationProjectArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.version_name {
        object.key("VersionName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("OutputConfig").start_object();
        crate::protocol_serde::shape_output_config::ser_output_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.tags {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Tags").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_11.as_str());
    }
    Ok(())
}
