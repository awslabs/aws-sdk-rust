// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_stream_processor_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_stream_processor::UpdateStreamProcessorInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.settings_for_update {
        #[allow(unused_mut)]
        let mut object_3 = object.key("SettingsForUpdate").start_object();
        crate::protocol_serde::shape_stream_processor_settings_for_update::ser_stream_processor_settings_for_update(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.regions_of_interest_for_update {
        let mut array_5 = object.key("RegionsOfInterestForUpdate").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_region_of_interest::ser_region_of_interest(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.data_sharing_preference_for_update {
        #[allow(unused_mut)]
        let mut object_9 = object.key("DataSharingPreferenceForUpdate").start_object();
        crate::protocol_serde::shape_stream_processor_data_sharing_preference::ser_stream_processor_data_sharing_preference(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.parameters_to_delete {
        let mut array_11 = object.key("ParametersToDelete").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    Ok(())
}
