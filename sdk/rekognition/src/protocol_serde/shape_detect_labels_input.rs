// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_detect_labels_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::detect_labels::DetectLabelsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.image {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Image").start_object();
        crate::protocol_serde::shape_image::ser_image(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.max_labels {
        object.key("MaxLabels").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.min_confidence {
        object.key("MinConfidence").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.features {
        let mut array_6 = object.key("Features").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.settings {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Settings").start_object();
        crate::protocol_serde::shape_detect_labels_settings::ser_detect_labels_settings(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
