// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_face_detail<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::FaceDetail>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::FaceDetailBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "BoundingBox" => {
                                builder = builder.set_bounding_box(
                                    crate::protocol_serde::shape_bounding_box::de_bounding_box(
                                        tokens,
                                    )?,
                                );
                            }
                            "AgeRange" => {
                                builder = builder.set_age_range(
                                    crate::protocol_serde::shape_age_range::de_age_range(tokens)?,
                                );
                            }
                            "Smile" => {
                                builder = builder.set_smile(
                                    crate::protocol_serde::shape_smile::de_smile(tokens)?,
                                );
                            }
                            "Eyeglasses" => {
                                builder = builder.set_eyeglasses(
                                    crate::protocol_serde::shape_eyeglasses::de_eyeglasses(tokens)?,
                                );
                            }
                            "Sunglasses" => {
                                builder = builder.set_sunglasses(
                                    crate::protocol_serde::shape_sunglasses::de_sunglasses(tokens)?,
                                );
                            }
                            "Gender" => {
                                builder = builder.set_gender(
                                    crate::protocol_serde::shape_gender::de_gender(tokens)?,
                                );
                            }
                            "Beard" => {
                                builder = builder.set_beard(
                                    crate::protocol_serde::shape_beard::de_beard(tokens)?,
                                );
                            }
                            "Mustache" => {
                                builder = builder.set_mustache(
                                    crate::protocol_serde::shape_mustache::de_mustache(tokens)?,
                                );
                            }
                            "EyesOpen" => {
                                builder = builder.set_eyes_open(
                                    crate::protocol_serde::shape_eye_open::de_eye_open(tokens)?,
                                );
                            }
                            "MouthOpen" => {
                                builder = builder.set_mouth_open(
                                    crate::protocol_serde::shape_mouth_open::de_mouth_open(tokens)?,
                                );
                            }
                            "Emotions" => {
                                builder = builder.set_emotions(
                                    crate::protocol_serde::shape_emotions::de_emotions(tokens)?,
                                );
                            }
                            "Landmarks" => {
                                builder = builder.set_landmarks(
                                    crate::protocol_serde::shape_landmarks::de_landmarks(tokens)?,
                                );
                            }
                            "Pose" => {
                                builder = builder
                                    .set_pose(crate::protocol_serde::shape_pose::de_pose(tokens)?);
                            }
                            "Quality" => {
                                builder = builder.set_quality(
                                    crate::protocol_serde::shape_image_quality::de_image_quality(
                                        tokens,
                                    )?,
                                );
                            }
                            "Confidence" => {
                                builder = builder.set_confidence(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f32_lossy()),
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
