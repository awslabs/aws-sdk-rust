// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_project_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_project_version::CreateProjectVersionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.project_arn {
        object.key("ProjectArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.version_name {
        object.key("VersionName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("OutputConfig").start_object();
        crate::protocol_serde::shape_output_config::ser_output_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.training_data {
        #[allow(unused_mut)]
        let mut object_6 = object.key("TrainingData").start_object();
        crate::protocol_serde::shape_training_data::ser_training_data(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.testing_data {
        #[allow(unused_mut)]
        let mut object_8 = object.key("TestingData").start_object();
        crate::protocol_serde::shape_testing_data::ser_testing_data(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_13.as_str());
    }
    Ok(())
}
