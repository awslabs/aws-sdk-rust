// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_segment_detection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_segment_detection::StartSegmentDetectionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.video {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Video").start_object();
        crate::protocol_serde::shape_video::ser_video(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.notification_channel {
        #[allow(unused_mut)]
        let mut object_5 = object.key("NotificationChannel").start_object();
        crate::protocol_serde::shape_notification_channel::ser_notification_channel(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.job_tag {
        object.key("JobTag").string(var_6.as_str());
    }
    if let Some(var_7) = &input.filters {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Filters").start_object();
        crate::protocol_serde::shape_start_segment_detection_filters::ser_start_segment_detection_filters(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.segment_types {
        let mut array_10 = object.key("SegmentTypes").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    Ok(())
}
