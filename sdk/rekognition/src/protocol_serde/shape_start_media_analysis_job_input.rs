// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_media_analysis_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_media_analysis_job::StartMediaAnalysisJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.job_name {
        object.key("JobName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.operations_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("OperationsConfig").start_object();
        crate::protocol_serde::shape_media_analysis_operations_config::ser_media_analysis_operations_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.input {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Input").start_object();
        crate::protocol_serde::shape_media_analysis_input::ser_media_analysis_input(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("OutputConfig").start_object();
        crate::protocol_serde::shape_media_analysis_output_config::ser_media_analysis_output_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_9.as_str());
    }
    Ok(())
}
