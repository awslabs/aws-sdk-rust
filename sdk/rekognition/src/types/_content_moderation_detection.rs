// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an inappropriate, unwanted, or offensive content label detection in a stored video.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContentModerationDetection {
    /// <p>Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the moderated content first appears.</p>
    #[doc(hidden)]
    pub timestamp: i64,
    /// <p>The content moderation label detected by in the stored video.</p>
    #[doc(hidden)]
    pub moderation_label: std::option::Option<crate::types::ModerationLabel>,
}
impl ContentModerationDetection {
    /// <p>Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the moderated content first appears.</p>
    pub fn timestamp(&self) -> i64 {
        self.timestamp
    }
    /// <p>The content moderation label detected by in the stored video.</p>
    pub fn moderation_label(&self) -> std::option::Option<&crate::types::ModerationLabel> {
        self.moderation_label.as_ref()
    }
}
impl ContentModerationDetection {
    /// Creates a new builder-style object to manufacture [`ContentModerationDetection`](crate::types::ContentModerationDetection).
    pub fn builder() -> crate::types::builders::ContentModerationDetectionBuilder {
        crate::types::builders::ContentModerationDetectionBuilder::default()
    }
}

/// A builder for [`ContentModerationDetection`](crate::types::ContentModerationDetection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContentModerationDetectionBuilder {
    pub(crate) timestamp: std::option::Option<i64>,
    pub(crate) moderation_label: std::option::Option<crate::types::ModerationLabel>,
}
impl ContentModerationDetectionBuilder {
    /// <p>Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the moderated content first appears.</p>
    pub fn timestamp(mut self, input: i64) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>Time, in milliseconds from the beginning of the video, that the content moderation label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the moderated content first appears.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The content moderation label detected by in the stored video.</p>
    pub fn moderation_label(mut self, input: crate::types::ModerationLabel) -> Self {
        self.moderation_label = Some(input);
        self
    }
    /// <p>The content moderation label detected by in the stored video.</p>
    pub fn set_moderation_label(
        mut self,
        input: std::option::Option<crate::types::ModerationLabel>,
    ) -> Self {
        self.moderation_label = input;
        self
    }
    /// Consumes the builder and constructs a [`ContentModerationDetection`](crate::types::ContentModerationDetection).
    pub fn build(self) -> crate::types::ContentModerationDetection {
        crate::types::ContentModerationDetection {
            timestamp: self.timestamp.unwrap_or_default(),
            moderation_label: self.moderation_label,
        }
    }
}
