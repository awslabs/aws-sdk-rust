// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Allows you to opt in or opt out to share data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamProcessorDataSharingPreference {
    /// <p> If this option is set to true, you choose to share data with Rekognition to improve model performance. </p>
    #[doc(hidden)]
    pub opt_in: bool,
}
impl StreamProcessorDataSharingPreference {
    /// <p> If this option is set to true, you choose to share data with Rekognition to improve model performance. </p>
    pub fn opt_in(&self) -> bool {
        self.opt_in
    }
}
impl StreamProcessorDataSharingPreference {
    /// Creates a new builder-style object to manufacture [`StreamProcessorDataSharingPreference`](crate::types::StreamProcessorDataSharingPreference).
    pub fn builder() -> crate::types::builders::StreamProcessorDataSharingPreferenceBuilder {
        crate::types::builders::StreamProcessorDataSharingPreferenceBuilder::default()
    }
}

/// A builder for [`StreamProcessorDataSharingPreference`](crate::types::StreamProcessorDataSharingPreference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamProcessorDataSharingPreferenceBuilder {
    pub(crate) opt_in: std::option::Option<bool>,
}
impl StreamProcessorDataSharingPreferenceBuilder {
    /// <p> If this option is set to true, you choose to share data with Rekognition to improve model performance. </p>
    pub fn opt_in(mut self, input: bool) -> Self {
        self.opt_in = Some(input);
        self
    }
    /// <p> If this option is set to true, you choose to share data with Rekognition to improve model performance. </p>
    pub fn set_opt_in(mut self, input: std::option::Option<bool>) -> Self {
        self.opt_in = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamProcessorDataSharingPreference`](crate::types::StreamProcessorDataSharingPreference).
    pub fn build(self) -> crate::types::StreamProcessorDataSharingPreference {
        crate::types::StreamProcessorDataSharingPreference {
            opt_in: self.opt_in.unwrap_or_default(),
        }
    }
}
