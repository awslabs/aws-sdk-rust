// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates whether or not the eyes on the face are open, and the confidence level in the determination.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EyeOpen {
    /// <p>Boolean value that indicates whether the eyes on the face are open.</p>
    #[doc(hidden)]
    pub value: bool,
    /// <p>Level of confidence in the determination.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl EyeOpen {
    /// <p>Boolean value that indicates whether the eyes on the face are open.</p>
    pub fn value(&self) -> bool {
        self.value
    }
    /// <p>Level of confidence in the determination.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl EyeOpen {
    /// Creates a new builder-style object to manufacture [`EyeOpen`](crate::types::EyeOpen).
    pub fn builder() -> crate::types::builders::EyeOpenBuilder {
        crate::types::builders::EyeOpenBuilder::default()
    }
}

/// A builder for [`EyeOpen`](crate::types::EyeOpen).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EyeOpenBuilder {
    pub(crate) value: std::option::Option<bool>,
    pub(crate) confidence: std::option::Option<f32>,
}
impl EyeOpenBuilder {
    /// <p>Boolean value that indicates whether the eyes on the face are open.</p>
    pub fn value(mut self, input: bool) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>Boolean value that indicates whether the eyes on the face are open.</p>
    pub fn set_value(mut self, input: std::option::Option<bool>) -> Self {
        self.value = input;
        self
    }
    /// <p>Level of confidence in the determination.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>Level of confidence in the determination.</p>
    pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// Consumes the builder and constructs a [`EyeOpen`](crate::types::EyeOpen).
    pub fn build(self) -> crate::types::EyeOpen {
        crate::types::EyeOpen {
            value: self.value.unwrap_or_default(),
            confidence: self.confidence,
        }
    }
}
