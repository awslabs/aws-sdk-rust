// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `EmotionName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let emotionname = unimplemented!();
/// match emotionname {
///     EmotionName::Angry => { /* ... */ },
///     EmotionName::Calm => { /* ... */ },
///     EmotionName::Confused => { /* ... */ },
///     EmotionName::Disgusted => { /* ... */ },
///     EmotionName::Fear => { /* ... */ },
///     EmotionName::Happy => { /* ... */ },
///     EmotionName::Sad => { /* ... */ },
///     EmotionName::Surprised => { /* ... */ },
///     EmotionName::UnknownValue => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `emotionname` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `EmotionName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `EmotionName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `EmotionName::NewFeature` is defined.
/// Specifically, when `emotionname` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `EmotionName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// _Note: `EmotionName::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum EmotionName {
    #[allow(missing_docs)] // documentation missing in model
    Angry,
    #[allow(missing_docs)] // documentation missing in model
    Calm,
    #[allow(missing_docs)] // documentation missing in model
    Confused,
    #[allow(missing_docs)] // documentation missing in model
    Disgusted,
    #[allow(missing_docs)] // documentation missing in model
    Fear,
    #[allow(missing_docs)] // documentation missing in model
    Happy,
    #[allow(missing_docs)] // documentation missing in model
    Sad,
    #[allow(missing_docs)] // documentation missing in model
    Surprised,
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for EmotionName {
    fn from(s: &str) -> Self {
        match s {
            "ANGRY" => EmotionName::Angry,
            "CALM" => EmotionName::Calm,
            "CONFUSED" => EmotionName::Confused,
            "DISGUSTED" => EmotionName::Disgusted,
            "FEAR" => EmotionName::Fear,
            "HAPPY" => EmotionName::Happy,
            "SAD" => EmotionName::Sad,
            "SURPRISED" => EmotionName::Surprised,
            "UNKNOWN" => EmotionName::UnknownValue,
            other => EmotionName::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for EmotionName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(EmotionName::from(s))
    }
}
impl EmotionName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            EmotionName::Angry => "ANGRY",
            EmotionName::Calm => "CALM",
            EmotionName::Confused => "CONFUSED",
            EmotionName::Disgusted => "DISGUSTED",
            EmotionName::Fear => "FEAR",
            EmotionName::Happy => "HAPPY",
            EmotionName::Sad => "SAD",
            EmotionName::Surprised => "SURPRISED",
            EmotionName::UnknownValue => "UNKNOWN",
            EmotionName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ANGRY",
            "CALM",
            "CONFUSED",
            "DISGUSTED",
            "FEAR",
            "HAPPY",
            "SAD",
            "SURPRISED",
            "UNKNOWN",
        ]
    }
}
impl AsRef<str> for EmotionName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
