// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual l abels or entire label categories.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GeneralLabelsSettings {
    /// <p>The labels that should be included in the return from DetectLabels.</p>
    #[doc(hidden)]
    pub label_inclusion_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The labels that should be excluded from the return from DetectLabels.</p>
    #[doc(hidden)]
    pub label_exclusion_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The label categories that should be included in the return from DetectLabels.</p>
    #[doc(hidden)]
    pub label_category_inclusion_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The label categories that should be excluded from the return from DetectLabels.</p>
    #[doc(hidden)]
    pub label_category_exclusion_filters: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GeneralLabelsSettings {
    /// <p>The labels that should be included in the return from DetectLabels.</p>
    pub fn label_inclusion_filters(&self) -> std::option::Option<&[std::string::String]> {
        self.label_inclusion_filters.as_deref()
    }
    /// <p>The labels that should be excluded from the return from DetectLabels.</p>
    pub fn label_exclusion_filters(&self) -> std::option::Option<&[std::string::String]> {
        self.label_exclusion_filters.as_deref()
    }
    /// <p>The label categories that should be included in the return from DetectLabels.</p>
    pub fn label_category_inclusion_filters(&self) -> std::option::Option<&[std::string::String]> {
        self.label_category_inclusion_filters.as_deref()
    }
    /// <p>The label categories that should be excluded from the return from DetectLabels.</p>
    pub fn label_category_exclusion_filters(&self) -> std::option::Option<&[std::string::String]> {
        self.label_category_exclusion_filters.as_deref()
    }
}
impl GeneralLabelsSettings {
    /// Creates a new builder-style object to manufacture [`GeneralLabelsSettings`](crate::types::GeneralLabelsSettings).
    pub fn builder() -> crate::types::builders::GeneralLabelsSettingsBuilder {
        crate::types::builders::GeneralLabelsSettingsBuilder::default()
    }
}

/// A builder for [`GeneralLabelsSettings`](crate::types::GeneralLabelsSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GeneralLabelsSettingsBuilder {
    pub(crate) label_inclusion_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) label_exclusion_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) label_category_inclusion_filters:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) label_category_exclusion_filters:
        std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GeneralLabelsSettingsBuilder {
    /// Appends an item to `label_inclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_label_inclusion_filters`](Self::set_label_inclusion_filters).
    ///
    /// <p>The labels that should be included in the return from DetectLabels.</p>
    pub fn label_inclusion_filters(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.label_inclusion_filters.unwrap_or_default();
        v.push(input.into());
        self.label_inclusion_filters = Some(v);
        self
    }
    /// <p>The labels that should be included in the return from DetectLabels.</p>
    pub fn set_label_inclusion_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.label_inclusion_filters = input;
        self
    }
    /// Appends an item to `label_exclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_label_exclusion_filters`](Self::set_label_exclusion_filters).
    ///
    /// <p>The labels that should be excluded from the return from DetectLabels.</p>
    pub fn label_exclusion_filters(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.label_exclusion_filters.unwrap_or_default();
        v.push(input.into());
        self.label_exclusion_filters = Some(v);
        self
    }
    /// <p>The labels that should be excluded from the return from DetectLabels.</p>
    pub fn set_label_exclusion_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.label_exclusion_filters = input;
        self
    }
    /// Appends an item to `label_category_inclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_label_category_inclusion_filters`](Self::set_label_category_inclusion_filters).
    ///
    /// <p>The label categories that should be included in the return from DetectLabels.</p>
    pub fn label_category_inclusion_filters(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.label_category_inclusion_filters.unwrap_or_default();
        v.push(input.into());
        self.label_category_inclusion_filters = Some(v);
        self
    }
    /// <p>The label categories that should be included in the return from DetectLabels.</p>
    pub fn set_label_category_inclusion_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.label_category_inclusion_filters = input;
        self
    }
    /// Appends an item to `label_category_exclusion_filters`.
    ///
    /// To override the contents of this collection use [`set_label_category_exclusion_filters`](Self::set_label_category_exclusion_filters).
    ///
    /// <p>The label categories that should be excluded from the return from DetectLabels.</p>
    pub fn label_category_exclusion_filters(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.label_category_exclusion_filters.unwrap_or_default();
        v.push(input.into());
        self.label_category_exclusion_filters = Some(v);
        self
    }
    /// <p>The label categories that should be excluded from the return from DetectLabels.</p>
    pub fn set_label_category_exclusion_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.label_category_exclusion_filters = input;
        self
    }
    /// Consumes the builder and constructs a [`GeneralLabelsSettings`](crate::types::GeneralLabelsSettings).
    pub fn build(self) -> crate::types::GeneralLabelsSettings {
        crate::types::GeneralLabelsSettings {
            label_inclusion_filters: self.label_inclusion_filters,
            label_exclusion_filters: self.label_exclusion_filters,
            label_category_inclusion_filters: self.label_category_inclusion_filters,
            label_category_exclusion_filters: self.label_category_exclusion_filters,
        }
    }
}
