// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about text detected in a video. Incudes the detected text, the time in milliseconds from the start of the video that the text was detected, and where it was detected on the screen.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TextDetectionResult {
    /// <p>The time, in milliseconds from the start of the video, that the text was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the text first appears.</p>
    #[doc(hidden)]
    pub timestamp: i64,
    /// <p>Details about text detected in a video.</p>
    #[doc(hidden)]
    pub text_detection: std::option::Option<crate::types::TextDetection>,
}
impl TextDetectionResult {
    /// <p>The time, in milliseconds from the start of the video, that the text was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the text first appears.</p>
    pub fn timestamp(&self) -> i64 {
        self.timestamp
    }
    /// <p>Details about text detected in a video.</p>
    pub fn text_detection(&self) -> std::option::Option<&crate::types::TextDetection> {
        self.text_detection.as_ref()
    }
}
impl TextDetectionResult {
    /// Creates a new builder-style object to manufacture [`TextDetectionResult`](crate::types::TextDetectionResult).
    pub fn builder() -> crate::types::builders::TextDetectionResultBuilder {
        crate::types::builders::TextDetectionResultBuilder::default()
    }
}

/// A builder for [`TextDetectionResult`](crate::types::TextDetectionResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TextDetectionResultBuilder {
    pub(crate) timestamp: std::option::Option<i64>,
    pub(crate) text_detection: std::option::Option<crate::types::TextDetection>,
}
impl TextDetectionResultBuilder {
    /// <p>The time, in milliseconds from the start of the video, that the text was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the text first appears.</p>
    pub fn timestamp(mut self, input: i64) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The time, in milliseconds from the start of the video, that the text was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the text first appears.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Details about text detected in a video.</p>
    pub fn text_detection(mut self, input: crate::types::TextDetection) -> Self {
        self.text_detection = Some(input);
        self
    }
    /// <p>Details about text detected in a video.</p>
    pub fn set_text_detection(
        mut self,
        input: std::option::Option<crate::types::TextDetection>,
    ) -> Self {
        self.text_detection = input;
        self
    }
    /// Consumes the builder and constructs a [`TextDetectionResult`](crate::types::TextDetectionResult).
    pub fn build(self) -> crate::types::TextDetectionResult {
        crate::types::TextDetectionResult {
            timestamp: self.timestamp.unwrap_or_default(),
            text_detection: self.text_detection,
        }
    }
}
