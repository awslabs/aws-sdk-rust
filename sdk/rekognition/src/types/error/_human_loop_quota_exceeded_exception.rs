// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The number of in-progress human reviews you have has exceeded the number allowed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HumanLoopQuotaExceededException {
    /// <p>The resource type.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The quota code.</p>
    pub quota_code: ::std::option::Option<::std::string::String>,
    /// <p>The service code.</p>
    pub service_code: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub code: ::std::option::Option<::std::string::String>,
    /// <p>A universally unique identifier (UUID) for the request.</p>
    pub logref: ::std::option::Option<::std::string::String>,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl HumanLoopQuotaExceededException {
    /// <p>The resource type.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The quota code.</p>
    pub fn quota_code(&self) -> ::std::option::Option<&str> {
        self.quota_code.as_deref()
    }
    /// <p>The service code.</p>
    pub fn service_code(&self) -> ::std::option::Option<&str> {
        self.service_code.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>A universally unique identifier (UUID) for the request.</p>
    pub fn logref(&self) -> ::std::option::Option<&str> {
        self.logref.as_deref()
    }
}
impl HumanLoopQuotaExceededException {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::std::fmt::Display for HumanLoopQuotaExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "HumanLoopQuotaExceededException")?;
        if let ::std::option::Option::Some(inner_1) = &self.message {
            {
                ::std::write!(f, ": {inner_1}")?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for HumanLoopQuotaExceededException {}
impl ::aws_types::request_id::RequestId for crate::types::error::HumanLoopQuotaExceededException {
    fn request_id(&self) -> Option<&str> {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for HumanLoopQuotaExceededException {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl HumanLoopQuotaExceededException {
    /// Creates a new builder-style object to manufacture [`HumanLoopQuotaExceededException`](crate::types::error::HumanLoopQuotaExceededException).
    pub fn builder() -> crate::types::error::builders::HumanLoopQuotaExceededExceptionBuilder {
        crate::types::error::builders::HumanLoopQuotaExceededExceptionBuilder::default()
    }
}

/// A builder for [`HumanLoopQuotaExceededException`](crate::types::error::HumanLoopQuotaExceededException).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HumanLoopQuotaExceededExceptionBuilder {
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) quota_code: ::std::option::Option<::std::string::String>,
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) logref: ::std::option::Option<::std::string::String>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl HumanLoopQuotaExceededExceptionBuilder {
    /// <p>The resource type.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource type.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The resource type.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The quota code.</p>
    pub fn quota_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.quota_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The quota code.</p>
    pub fn set_quota_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.quota_code = input;
        self
    }
    /// <p>The quota code.</p>
    pub fn get_quota_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.quota_code
    }
    /// <p>The service code.</p>
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service code.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The service code.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>A universally unique identifier (UUID) for the request.</p>
    pub fn logref(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logref = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A universally unique identifier (UUID) for the request.</p>
    pub fn set_logref(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logref = input;
        self
    }
    /// <p>A universally unique identifier (UUID) for the request.</p>
    pub fn get_logref(&self) -> &::std::option::Option<::std::string::String> {
        &self.logref
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`HumanLoopQuotaExceededException`](crate::types::error::HumanLoopQuotaExceededException).
    pub fn build(self) -> crate::types::error::HumanLoopQuotaExceededException {
        crate::types::error::HumanLoopQuotaExceededException {
            resource_type: self.resource_type,
            quota_code: self.quota_code,
            service_code: self.service_code,
            message: self.message,
            code: self.code,
            logref: self.logref,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
