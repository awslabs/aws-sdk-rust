// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a shot detection segment detected in a video. For more information, see <code>SegmentDetection</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ShotSegment {
    /// <p>An Identifier for a shot detection segment detected in a video. </p>
    #[doc(hidden)]
    pub index: std::option::Option<i64>,
    /// <p>The confidence that Amazon Rekognition Video has in the accuracy of the detected segment.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl ShotSegment {
    /// <p>An Identifier for a shot detection segment detected in a video. </p>
    pub fn index(&self) -> std::option::Option<i64> {
        self.index
    }
    /// <p>The confidence that Amazon Rekognition Video has in the accuracy of the detected segment.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl ShotSegment {
    /// Creates a new builder-style object to manufacture [`ShotSegment`](crate::types::ShotSegment).
    pub fn builder() -> crate::types::builders::ShotSegmentBuilder {
        crate::types::builders::ShotSegmentBuilder::default()
    }
}

/// A builder for [`ShotSegment`](crate::types::ShotSegment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ShotSegmentBuilder {
    pub(crate) index: std::option::Option<i64>,
    pub(crate) confidence: std::option::Option<f32>,
}
impl ShotSegmentBuilder {
    /// <p>An Identifier for a shot detection segment detected in a video. </p>
    pub fn index(mut self, input: i64) -> Self {
        self.index = Some(input);
        self
    }
    /// <p>An Identifier for a shot detection segment detected in a video. </p>
    pub fn set_index(mut self, input: std::option::Option<i64>) -> Self {
        self.index = input;
        self
    }
    /// <p>The confidence that Amazon Rekognition Video has in the accuracy of the detected segment.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>The confidence that Amazon Rekognition Video has in the accuracy of the detected segment.</p>
    pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// Consumes the builder and constructs a [`ShotSegment`](crate::types::ShotSegment).
    pub fn build(self) -> crate::types::ShotSegment {
        crate::types::ShotSegment {
            index: self.index,
            confidence: self.confidence,
        }
    }
}
