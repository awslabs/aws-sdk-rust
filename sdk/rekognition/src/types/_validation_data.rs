// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the Amazon S3 bucket location of the validation data for a model training job. </p>
/// <p>The validation data includes error information for individual JSON Lines in the dataset. For more information, see <i>Debugging a Failed Model Training</i> in the Amazon Rekognition Custom Labels Developer Guide. </p>
/// <p>You get the <code>ValidationData</code> object for the training dataset (<code>TrainingDataResult</code>) and the test dataset (<code>TestingDataResult</code>) by calling <code>DescribeProjectVersions</code>. </p>
/// <p>The assets array contains a single <code>Asset</code> object. The <code>GroundTruthManifest</code> field of the Asset object contains the S3 bucket location of the validation data. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidationData {
    /// <p>The assets that comprise the validation data. </p>
    pub assets: ::std::option::Option<::std::vec::Vec<crate::types::Asset>>,
}
impl ValidationData {
    /// <p>The assets that comprise the validation data. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.assets.is_none()`.
    pub fn assets(&self) -> &[crate::types::Asset] {
        self.assets.as_deref().unwrap_or_default()
    }
}
impl ValidationData {
    /// Creates a new builder-style object to manufacture [`ValidationData`](crate::types::ValidationData).
    pub fn builder() -> crate::types::builders::ValidationDataBuilder {
        crate::types::builders::ValidationDataBuilder::default()
    }
}

/// A builder for [`ValidationData`](crate::types::ValidationData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ValidationDataBuilder {
    pub(crate) assets: ::std::option::Option<::std::vec::Vec<crate::types::Asset>>,
}
impl ValidationDataBuilder {
    /// Appends an item to `assets`.
    ///
    /// To override the contents of this collection use [`set_assets`](Self::set_assets).
    ///
    /// <p>The assets that comprise the validation data. </p>
    pub fn assets(mut self, input: crate::types::Asset) -> Self {
        let mut v = self.assets.unwrap_or_default();
        v.push(input);
        self.assets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The assets that comprise the validation data. </p>
    pub fn set_assets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Asset>>) -> Self {
        self.assets = input;
        self
    }
    /// <p>The assets that comprise the validation data. </p>
    pub fn get_assets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Asset>> {
        &self.assets
    }
    /// Consumes the builder and constructs a [`ValidationData`](crate::types::ValidationData).
    pub fn build(self) -> crate::types::ValidationData {
        crate::types::ValidationData { assets: self.assets }
    }
}
