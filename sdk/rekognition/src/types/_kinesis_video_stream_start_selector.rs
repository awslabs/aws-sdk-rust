// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the starting point in a Kinesis stream to start processing. You can use the producer timestamp or the fragment number. One of either producer timestamp or fragment number is required. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html">Fragment</a>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KinesisVideoStreamStartSelector {
    /// <p> The timestamp from the producer corresponding to the fragment, in milliseconds, expressed in unix time format. </p>
    #[doc(hidden)]
    pub producer_timestamp: std::option::Option<i64>,
    /// <p> The unique identifier of the fragment. This value monotonically increases based on the ingestion order. </p>
    #[doc(hidden)]
    pub fragment_number: std::option::Option<std::string::String>,
}
impl KinesisVideoStreamStartSelector {
    /// <p> The timestamp from the producer corresponding to the fragment, in milliseconds, expressed in unix time format. </p>
    pub fn producer_timestamp(&self) -> std::option::Option<i64> {
        self.producer_timestamp
    }
    /// <p> The unique identifier of the fragment. This value monotonically increases based on the ingestion order. </p>
    pub fn fragment_number(&self) -> std::option::Option<&str> {
        self.fragment_number.as_deref()
    }
}
impl KinesisVideoStreamStartSelector {
    /// Creates a new builder-style object to manufacture [`KinesisVideoStreamStartSelector`](crate::types::KinesisVideoStreamStartSelector).
    pub fn builder() -> crate::types::builders::KinesisVideoStreamStartSelectorBuilder {
        crate::types::builders::KinesisVideoStreamStartSelectorBuilder::default()
    }
}

/// A builder for [`KinesisVideoStreamStartSelector`](crate::types::KinesisVideoStreamStartSelector).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KinesisVideoStreamStartSelectorBuilder {
    pub(crate) producer_timestamp: std::option::Option<i64>,
    pub(crate) fragment_number: std::option::Option<std::string::String>,
}
impl KinesisVideoStreamStartSelectorBuilder {
    /// <p> The timestamp from the producer corresponding to the fragment, in milliseconds, expressed in unix time format. </p>
    pub fn producer_timestamp(mut self, input: i64) -> Self {
        self.producer_timestamp = Some(input);
        self
    }
    /// <p> The timestamp from the producer corresponding to the fragment, in milliseconds, expressed in unix time format. </p>
    pub fn set_producer_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.producer_timestamp = input;
        self
    }
    /// <p> The unique identifier of the fragment. This value monotonically increases based on the ingestion order. </p>
    pub fn fragment_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.fragment_number = Some(input.into());
        self
    }
    /// <p> The unique identifier of the fragment. This value monotonically increases based on the ingestion order. </p>
    pub fn set_fragment_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fragment_number = input;
        self
    }
    /// Consumes the builder and constructs a [`KinesisVideoStreamStartSelector`](crate::types::KinesisVideoStreamStartSelector).
    pub fn build(self) -> crate::types::KinesisVideoStreamStartSelector {
        crate::types::KinesisVideoStreamStartSelector {
            producer_timestamp: self.producer_timestamp,
            fragment_number: self.fragment_number,
        }
    }
}
