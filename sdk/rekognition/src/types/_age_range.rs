// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure containing the estimated age range, in years, for a face.</p>
/// <p>Amazon Rekognition estimates an age range for faces detected in the input image. Estimated age ranges can overlap. A face of a 5-year-old might have an estimated range of 4-6, while the face of a 6-year-old might have an estimated range of 4-8.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AgeRange {
    /// <p>The lowest estimated age.</p>
    #[doc(hidden)]
    pub low: std::option::Option<i32>,
    /// <p>The highest estimated age.</p>
    #[doc(hidden)]
    pub high: std::option::Option<i32>,
}
impl AgeRange {
    /// <p>The lowest estimated age.</p>
    pub fn low(&self) -> std::option::Option<i32> {
        self.low
    }
    /// <p>The highest estimated age.</p>
    pub fn high(&self) -> std::option::Option<i32> {
        self.high
    }
}
impl AgeRange {
    /// Creates a new builder-style object to manufacture [`AgeRange`](crate::types::AgeRange).
    pub fn builder() -> crate::types::builders::AgeRangeBuilder {
        crate::types::builders::AgeRangeBuilder::default()
    }
}

/// A builder for [`AgeRange`](crate::types::AgeRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AgeRangeBuilder {
    pub(crate) low: std::option::Option<i32>,
    pub(crate) high: std::option::Option<i32>,
}
impl AgeRangeBuilder {
    /// <p>The lowest estimated age.</p>
    pub fn low(mut self, input: i32) -> Self {
        self.low = Some(input);
        self
    }
    /// <p>The lowest estimated age.</p>
    pub fn set_low(mut self, input: std::option::Option<i32>) -> Self {
        self.low = input;
        self
    }
    /// <p>The highest estimated age.</p>
    pub fn high(mut self, input: i32) -> Self {
        self.high = Some(input);
        self
    }
    /// <p>The highest estimated age.</p>
    pub fn set_high(mut self, input: std::option::Option<i32>) -> Self {
        self.high = input;
        self
    }
    /// Consumes the builder and constructs a [`AgeRange`](crate::types::AgeRange).
    pub fn build(self) -> crate::types::AgeRange {
        crate::types::AgeRange {
            low: self.low,
            high: self.high,
        }
    }
}
