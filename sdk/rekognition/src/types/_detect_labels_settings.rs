// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for the DetectLabels request. Settings can include filters for both GENERAL_LABELS and IMAGE_PROPERTIES. GENERAL_LABELS filters can be inclusive or exclusive and applied to individual labels or label categories. IMAGE_PROPERTIES filters allow specification of a maximum number of dominant colors.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectLabelsSettings {
    /// <p>Contains the specified filters for GENERAL_LABELS.</p>
    #[doc(hidden)]
    pub general_labels: std::option::Option<crate::types::GeneralLabelsSettings>,
    /// <p>Contains the chosen number of maximum dominant colors in an image.</p>
    #[doc(hidden)]
    pub image_properties: std::option::Option<crate::types::DetectLabelsImagePropertiesSettings>,
}
impl DetectLabelsSettings {
    /// <p>Contains the specified filters for GENERAL_LABELS.</p>
    pub fn general_labels(&self) -> std::option::Option<&crate::types::GeneralLabelsSettings> {
        self.general_labels.as_ref()
    }
    /// <p>Contains the chosen number of maximum dominant colors in an image.</p>
    pub fn image_properties(
        &self,
    ) -> std::option::Option<&crate::types::DetectLabelsImagePropertiesSettings> {
        self.image_properties.as_ref()
    }
}
impl DetectLabelsSettings {
    /// Creates a new builder-style object to manufacture [`DetectLabelsSettings`](crate::types::DetectLabelsSettings).
    pub fn builder() -> crate::types::builders::DetectLabelsSettingsBuilder {
        crate::types::builders::DetectLabelsSettingsBuilder::default()
    }
}

/// A builder for [`DetectLabelsSettings`](crate::types::DetectLabelsSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectLabelsSettingsBuilder {
    pub(crate) general_labels: std::option::Option<crate::types::GeneralLabelsSettings>,
    pub(crate) image_properties:
        std::option::Option<crate::types::DetectLabelsImagePropertiesSettings>,
}
impl DetectLabelsSettingsBuilder {
    /// <p>Contains the specified filters for GENERAL_LABELS.</p>
    pub fn general_labels(mut self, input: crate::types::GeneralLabelsSettings) -> Self {
        self.general_labels = Some(input);
        self
    }
    /// <p>Contains the specified filters for GENERAL_LABELS.</p>
    pub fn set_general_labels(
        mut self,
        input: std::option::Option<crate::types::GeneralLabelsSettings>,
    ) -> Self {
        self.general_labels = input;
        self
    }
    /// <p>Contains the chosen number of maximum dominant colors in an image.</p>
    pub fn image_properties(
        mut self,
        input: crate::types::DetectLabelsImagePropertiesSettings,
    ) -> Self {
        self.image_properties = Some(input);
        self
    }
    /// <p>Contains the chosen number of maximum dominant colors in an image.</p>
    pub fn set_image_properties(
        mut self,
        input: std::option::Option<crate::types::DetectLabelsImagePropertiesSettings>,
    ) -> Self {
        self.image_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`DetectLabelsSettings`](crate::types::DetectLabelsSettings).
    pub fn build(self) -> crate::types::DetectLabelsSettings {
        crate::types::DetectLabelsSettings {
            general_labels: self.general_labels,
            image_properties: self.image_properties,
        }
    }
}
