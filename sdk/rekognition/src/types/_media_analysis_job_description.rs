// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Description for a media analysis job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaAnalysisJobDescription {
    /// <p>The identifier for a media analysis job.</p>
    pub job_id: ::std::string::String,
    /// <p>The name of a media analysis job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>Operation configurations that were provided during job creation.</p>
    pub operations_config: ::std::option::Option<crate::types::MediaAnalysisOperationsConfig>,
    /// <p>The status of the media analysis job being retrieved.</p>
    pub status: crate::types::MediaAnalysisJobStatus,
    /// <p>Details about the error that resulted in failure of the job.</p>
    pub failure_details: ::std::option::Option<crate::types::MediaAnalysisJobFailureDetails>,
    /// <p>The Unix date and time when the job was started.</p>
    pub creation_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The Unix date and time when the job finished.</p>
    pub completion_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Reference to the input manifest that was provided in the job creation request.</p>
    pub input: ::std::option::Option<crate::types::MediaAnalysisInput>,
    /// <p>Output configuration that was provided in the creation request.</p>
    pub output_config: ::std::option::Option<crate::types::MediaAnalysisOutputConfig>,
    /// <p>KMS Key that was provided in the creation request.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Output manifest that contains prediction results.</p>
    pub results: ::std::option::Option<crate::types::MediaAnalysisResults>,
    /// <p>Provides statistics on input manifest and errors identified in the input manifest.</p>
    pub manifest_summary: ::std::option::Option<crate::types::MediaAnalysisManifestSummary>,
}
impl MediaAnalysisJobDescription {
    /// <p>The identifier for a media analysis job.</p>
    pub fn job_id(&self) -> &str {
        use std::ops::Deref;
        self.job_id.deref()
    }
    /// <p>The name of a media analysis job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>Operation configurations that were provided during job creation.</p>
    pub fn operations_config(&self) -> ::std::option::Option<&crate::types::MediaAnalysisOperationsConfig> {
        self.operations_config.as_ref()
    }
    /// <p>The status of the media analysis job being retrieved.</p>
    pub fn status(&self) -> &crate::types::MediaAnalysisJobStatus {
        &self.status
    }
    /// <p>Details about the error that resulted in failure of the job.</p>
    pub fn failure_details(&self) -> ::std::option::Option<&crate::types::MediaAnalysisJobFailureDetails> {
        self.failure_details.as_ref()
    }
    /// <p>The Unix date and time when the job was started.</p>
    pub fn creation_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_timestamp
    }
    /// <p>The Unix date and time when the job finished.</p>
    pub fn completion_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_timestamp.as_ref()
    }
    /// <p>Reference to the input manifest that was provided in the job creation request.</p>
    pub fn input(&self) -> ::std::option::Option<&crate::types::MediaAnalysisInput> {
        self.input.as_ref()
    }
    /// <p>Output configuration that was provided in the creation request.</p>
    pub fn output_config(&self) -> ::std::option::Option<&crate::types::MediaAnalysisOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>KMS Key that was provided in the creation request.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Output manifest that contains prediction results.</p>
    pub fn results(&self) -> ::std::option::Option<&crate::types::MediaAnalysisResults> {
        self.results.as_ref()
    }
    /// <p>Provides statistics on input manifest and errors identified in the input manifest.</p>
    pub fn manifest_summary(&self) -> ::std::option::Option<&crate::types::MediaAnalysisManifestSummary> {
        self.manifest_summary.as_ref()
    }
}
impl MediaAnalysisJobDescription {
    /// Creates a new builder-style object to manufacture [`MediaAnalysisJobDescription`](crate::types::MediaAnalysisJobDescription).
    pub fn builder() -> crate::types::builders::MediaAnalysisJobDescriptionBuilder {
        crate::types::builders::MediaAnalysisJobDescriptionBuilder::default()
    }
}

/// A builder for [`MediaAnalysisJobDescription`](crate::types::MediaAnalysisJobDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MediaAnalysisJobDescriptionBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) operations_config: ::std::option::Option<crate::types::MediaAnalysisOperationsConfig>,
    pub(crate) status: ::std::option::Option<crate::types::MediaAnalysisJobStatus>,
    pub(crate) failure_details: ::std::option::Option<crate::types::MediaAnalysisJobFailureDetails>,
    pub(crate) creation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completion_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) input: ::std::option::Option<crate::types::MediaAnalysisInput>,
    pub(crate) output_config: ::std::option::Option<crate::types::MediaAnalysisOutputConfig>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) results: ::std::option::Option<crate::types::MediaAnalysisResults>,
    pub(crate) manifest_summary: ::std::option::Option<crate::types::MediaAnalysisManifestSummary>,
}
impl MediaAnalysisJobDescriptionBuilder {
    /// <p>The identifier for a media analysis job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for a media analysis job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The identifier for a media analysis job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The name of a media analysis job.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a media analysis job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of a media analysis job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>Operation configurations that were provided during job creation.</p>
    /// This field is required.
    pub fn operations_config(mut self, input: crate::types::MediaAnalysisOperationsConfig) -> Self {
        self.operations_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Operation configurations that were provided during job creation.</p>
    pub fn set_operations_config(mut self, input: ::std::option::Option<crate::types::MediaAnalysisOperationsConfig>) -> Self {
        self.operations_config = input;
        self
    }
    /// <p>Operation configurations that were provided during job creation.</p>
    pub fn get_operations_config(&self) -> &::std::option::Option<crate::types::MediaAnalysisOperationsConfig> {
        &self.operations_config
    }
    /// <p>The status of the media analysis job being retrieved.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MediaAnalysisJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the media analysis job being retrieved.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MediaAnalysisJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the media analysis job being retrieved.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MediaAnalysisJobStatus> {
        &self.status
    }
    /// <p>Details about the error that resulted in failure of the job.</p>
    pub fn failure_details(mut self, input: crate::types::MediaAnalysisJobFailureDetails) -> Self {
        self.failure_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the error that resulted in failure of the job.</p>
    pub fn set_failure_details(mut self, input: ::std::option::Option<crate::types::MediaAnalysisJobFailureDetails>) -> Self {
        self.failure_details = input;
        self
    }
    /// <p>Details about the error that resulted in failure of the job.</p>
    pub fn get_failure_details(&self) -> &::std::option::Option<crate::types::MediaAnalysisJobFailureDetails> {
        &self.failure_details
    }
    /// <p>The Unix date and time when the job was started.</p>
    /// This field is required.
    pub fn creation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix date and time when the job was started.</p>
    pub fn set_creation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>The Unix date and time when the job was started.</p>
    pub fn get_creation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_timestamp
    }
    /// <p>The Unix date and time when the job finished.</p>
    pub fn completion_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix date and time when the job finished.</p>
    pub fn set_completion_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_timestamp = input;
        self
    }
    /// <p>The Unix date and time when the job finished.</p>
    pub fn get_completion_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_timestamp
    }
    /// <p>Reference to the input manifest that was provided in the job creation request.</p>
    /// This field is required.
    pub fn input(mut self, input: crate::types::MediaAnalysisInput) -> Self {
        self.input = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reference to the input manifest that was provided in the job creation request.</p>
    pub fn set_input(mut self, input: ::std::option::Option<crate::types::MediaAnalysisInput>) -> Self {
        self.input = input;
        self
    }
    /// <p>Reference to the input manifest that was provided in the job creation request.</p>
    pub fn get_input(&self) -> &::std::option::Option<crate::types::MediaAnalysisInput> {
        &self.input
    }
    /// <p>Output configuration that was provided in the creation request.</p>
    /// This field is required.
    pub fn output_config(mut self, input: crate::types::MediaAnalysisOutputConfig) -> Self {
        self.output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Output configuration that was provided in the creation request.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::MediaAnalysisOutputConfig>) -> Self {
        self.output_config = input;
        self
    }
    /// <p>Output configuration that was provided in the creation request.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::MediaAnalysisOutputConfig> {
        &self.output_config
    }
    /// <p>KMS Key that was provided in the creation request.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>KMS Key that was provided in the creation request.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>KMS Key that was provided in the creation request.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Output manifest that contains prediction results.</p>
    pub fn results(mut self, input: crate::types::MediaAnalysisResults) -> Self {
        self.results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Output manifest that contains prediction results.</p>
    pub fn set_results(mut self, input: ::std::option::Option<crate::types::MediaAnalysisResults>) -> Self {
        self.results = input;
        self
    }
    /// <p>Output manifest that contains prediction results.</p>
    pub fn get_results(&self) -> &::std::option::Option<crate::types::MediaAnalysisResults> {
        &self.results
    }
    /// <p>Provides statistics on input manifest and errors identified in the input manifest.</p>
    pub fn manifest_summary(mut self, input: crate::types::MediaAnalysisManifestSummary) -> Self {
        self.manifest_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides statistics on input manifest and errors identified in the input manifest.</p>
    pub fn set_manifest_summary(mut self, input: ::std::option::Option<crate::types::MediaAnalysisManifestSummary>) -> Self {
        self.manifest_summary = input;
        self
    }
    /// <p>Provides statistics on input manifest and errors identified in the input manifest.</p>
    pub fn get_manifest_summary(&self) -> &::std::option::Option<crate::types::MediaAnalysisManifestSummary> {
        &self.manifest_summary
    }
    /// Consumes the builder and constructs a [`MediaAnalysisJobDescription`](crate::types::MediaAnalysisJobDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_id`](crate::types::builders::MediaAnalysisJobDescriptionBuilder::job_id)
    /// - [`status`](crate::types::builders::MediaAnalysisJobDescriptionBuilder::status)
    /// - [`creation_timestamp`](crate::types::builders::MediaAnalysisJobDescriptionBuilder::creation_timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::MediaAnalysisJobDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MediaAnalysisJobDescription {
            job_id: self.job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_id",
                    "job_id was not specified but it is required when building MediaAnalysisJobDescription",
                )
            })?,
            job_name: self.job_name,
            operations_config: self.operations_config,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building MediaAnalysisJobDescription",
                )
            })?,
            failure_details: self.failure_details,
            creation_timestamp: self.creation_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_timestamp",
                    "creation_timestamp was not specified but it is required when building MediaAnalysisJobDescription",
                )
            })?,
            completion_timestamp: self.completion_timestamp,
            input: self.input,
            output_config: self.output_config,
            kms_key_id: self.kms_key_id,
            results: self.results,
            manifest_summary: self.manifest_summary,
        })
    }
}
