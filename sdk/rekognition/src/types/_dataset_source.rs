// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The source that Amazon Rekognition Custom Labels uses to create a dataset. To use an Amazon Sagemaker format manifest file, specify the S3 bucket location in the <code>GroundTruthManifest</code> field. The S3 bucket must be in your AWS account. To create a copy of an existing dataset, specify the Amazon Resource Name (ARN) of an existing dataset in <code>DatasetArn</code>.</p>
/// <p>You need to specify a value for <code>DatasetArn</code> or <code>GroundTruthManifest</code>, but not both. if you supply both values, or if you don't specify any values, an InvalidParameterException exception occurs. </p>
/// <p>For more information, see <code>CreateDataset</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatasetSource {
    /// <p>The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file. </p>
    #[doc(hidden)]
    pub ground_truth_manifest: std::option::Option<crate::types::GroundTruthManifest>,
    /// <p> The ARN of an Amazon Rekognition Custom Labels dataset that you want to copy. </p>
    #[doc(hidden)]
    pub dataset_arn: std::option::Option<std::string::String>,
}
impl DatasetSource {
    /// <p>The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file. </p>
    pub fn ground_truth_manifest(&self) -> std::option::Option<&crate::types::GroundTruthManifest> {
        self.ground_truth_manifest.as_ref()
    }
    /// <p> The ARN of an Amazon Rekognition Custom Labels dataset that you want to copy. </p>
    pub fn dataset_arn(&self) -> std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
}
impl DatasetSource {
    /// Creates a new builder-style object to manufacture [`DatasetSource`](crate::types::DatasetSource).
    pub fn builder() -> crate::types::builders::DatasetSourceBuilder {
        crate::types::builders::DatasetSourceBuilder::default()
    }
}

/// A builder for [`DatasetSource`](crate::types::DatasetSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatasetSourceBuilder {
    pub(crate) ground_truth_manifest: std::option::Option<crate::types::GroundTruthManifest>,
    pub(crate) dataset_arn: std::option::Option<std::string::String>,
}
impl DatasetSourceBuilder {
    /// <p>The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file. </p>
    pub fn ground_truth_manifest(mut self, input: crate::types::GroundTruthManifest) -> Self {
        self.ground_truth_manifest = Some(input);
        self
    }
    /// <p>The S3 bucket that contains an Amazon Sagemaker Ground Truth format manifest file. </p>
    pub fn set_ground_truth_manifest(
        mut self,
        input: std::option::Option<crate::types::GroundTruthManifest>,
    ) -> Self {
        self.ground_truth_manifest = input;
        self
    }
    /// <p> The ARN of an Amazon Rekognition Custom Labels dataset that you want to copy. </p>
    pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_arn = Some(input.into());
        self
    }
    /// <p> The ARN of an Amazon Rekognition Custom Labels dataset that you want to copy. </p>
    pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DatasetSource`](crate::types::DatasetSource).
    pub fn build(self) -> crate::types::DatasetSource {
        crate::types::DatasetSource {
            ground_truth_manifest: self.ground_truth_manifest,
            dataset_arn: self.dataset_arn,
        }
    }
}
