// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `LandmarkType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let landmarktype = unimplemented!();
/// match landmarktype {
///     LandmarkType::ChinBottom => { /* ... */ },
///     LandmarkType::EyeLeft => { /* ... */ },
///     LandmarkType::EyeRight => { /* ... */ },
///     LandmarkType::LeftEyeBrowLeft => { /* ... */ },
///     LandmarkType::LeftEyeBrowRight => { /* ... */ },
///     LandmarkType::LeftEyeBrowUp => { /* ... */ },
///     LandmarkType::LeftEyeDown => { /* ... */ },
///     LandmarkType::LeftEyeLeft => { /* ... */ },
///     LandmarkType::LeftEyeRight => { /* ... */ },
///     LandmarkType::LeftEyeUp => { /* ... */ },
///     LandmarkType::LeftPupil => { /* ... */ },
///     LandmarkType::MidJawlineLeft => { /* ... */ },
///     LandmarkType::MidJawlineRight => { /* ... */ },
///     LandmarkType::MouthDown => { /* ... */ },
///     LandmarkType::MouthLeft => { /* ... */ },
///     LandmarkType::MouthRight => { /* ... */ },
///     LandmarkType::MouthUp => { /* ... */ },
///     LandmarkType::Nose => { /* ... */ },
///     LandmarkType::NoseLeft => { /* ... */ },
///     LandmarkType::NoseRight => { /* ... */ },
///     LandmarkType::RightEyeBrowLeft => { /* ... */ },
///     LandmarkType::RightEyeBrowRight => { /* ... */ },
///     LandmarkType::RightEyeBrowUp => { /* ... */ },
///     LandmarkType::RightEyeDown => { /* ... */ },
///     LandmarkType::RightEyeLeft => { /* ... */ },
///     LandmarkType::RightEyeRight => { /* ... */ },
///     LandmarkType::RightEyeUp => { /* ... */ },
///     LandmarkType::RightPupil => { /* ... */ },
///     LandmarkType::UpperJawlineLeft => { /* ... */ },
///     LandmarkType::UpperJawlineRight => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `landmarktype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `LandmarkType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `LandmarkType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `LandmarkType::NewFeature` is defined.
/// Specifically, when `landmarktype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `LandmarkType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum LandmarkType {
    #[allow(missing_docs)] // documentation missing in model
    ChinBottom,
    #[allow(missing_docs)] // documentation missing in model
    EyeLeft,
    #[allow(missing_docs)] // documentation missing in model
    EyeRight,
    #[allow(missing_docs)] // documentation missing in model
    LeftEyeBrowLeft,
    #[allow(missing_docs)] // documentation missing in model
    LeftEyeBrowRight,
    #[allow(missing_docs)] // documentation missing in model
    LeftEyeBrowUp,
    #[allow(missing_docs)] // documentation missing in model
    LeftEyeDown,
    #[allow(missing_docs)] // documentation missing in model
    LeftEyeLeft,
    #[allow(missing_docs)] // documentation missing in model
    LeftEyeRight,
    #[allow(missing_docs)] // documentation missing in model
    LeftEyeUp,
    #[allow(missing_docs)] // documentation missing in model
    LeftPupil,
    #[allow(missing_docs)] // documentation missing in model
    MidJawlineLeft,
    #[allow(missing_docs)] // documentation missing in model
    MidJawlineRight,
    #[allow(missing_docs)] // documentation missing in model
    MouthDown,
    #[allow(missing_docs)] // documentation missing in model
    MouthLeft,
    #[allow(missing_docs)] // documentation missing in model
    MouthRight,
    #[allow(missing_docs)] // documentation missing in model
    MouthUp,
    #[allow(missing_docs)] // documentation missing in model
    Nose,
    #[allow(missing_docs)] // documentation missing in model
    NoseLeft,
    #[allow(missing_docs)] // documentation missing in model
    NoseRight,
    #[allow(missing_docs)] // documentation missing in model
    RightEyeBrowLeft,
    #[allow(missing_docs)] // documentation missing in model
    RightEyeBrowRight,
    #[allow(missing_docs)] // documentation missing in model
    RightEyeBrowUp,
    #[allow(missing_docs)] // documentation missing in model
    RightEyeDown,
    #[allow(missing_docs)] // documentation missing in model
    RightEyeLeft,
    #[allow(missing_docs)] // documentation missing in model
    RightEyeRight,
    #[allow(missing_docs)] // documentation missing in model
    RightEyeUp,
    #[allow(missing_docs)] // documentation missing in model
    RightPupil,
    #[allow(missing_docs)] // documentation missing in model
    UpperJawlineLeft,
    #[allow(missing_docs)] // documentation missing in model
    UpperJawlineRight,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for LandmarkType {
    fn from(s: &str) -> Self {
        match s {
            "chinBottom" => LandmarkType::ChinBottom,
            "eyeLeft" => LandmarkType::EyeLeft,
            "eyeRight" => LandmarkType::EyeRight,
            "leftEyeBrowLeft" => LandmarkType::LeftEyeBrowLeft,
            "leftEyeBrowRight" => LandmarkType::LeftEyeBrowRight,
            "leftEyeBrowUp" => LandmarkType::LeftEyeBrowUp,
            "leftEyeDown" => LandmarkType::LeftEyeDown,
            "leftEyeLeft" => LandmarkType::LeftEyeLeft,
            "leftEyeRight" => LandmarkType::LeftEyeRight,
            "leftEyeUp" => LandmarkType::LeftEyeUp,
            "leftPupil" => LandmarkType::LeftPupil,
            "midJawlineLeft" => LandmarkType::MidJawlineLeft,
            "midJawlineRight" => LandmarkType::MidJawlineRight,
            "mouthDown" => LandmarkType::MouthDown,
            "mouthLeft" => LandmarkType::MouthLeft,
            "mouthRight" => LandmarkType::MouthRight,
            "mouthUp" => LandmarkType::MouthUp,
            "nose" => LandmarkType::Nose,
            "noseLeft" => LandmarkType::NoseLeft,
            "noseRight" => LandmarkType::NoseRight,
            "rightEyeBrowLeft" => LandmarkType::RightEyeBrowLeft,
            "rightEyeBrowRight" => LandmarkType::RightEyeBrowRight,
            "rightEyeBrowUp" => LandmarkType::RightEyeBrowUp,
            "rightEyeDown" => LandmarkType::RightEyeDown,
            "rightEyeLeft" => LandmarkType::RightEyeLeft,
            "rightEyeRight" => LandmarkType::RightEyeRight,
            "rightEyeUp" => LandmarkType::RightEyeUp,
            "rightPupil" => LandmarkType::RightPupil,
            "upperJawlineLeft" => LandmarkType::UpperJawlineLeft,
            "upperJawlineRight" => LandmarkType::UpperJawlineRight,
            other => {
                LandmarkType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for LandmarkType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(LandmarkType::from(s))
    }
}
impl LandmarkType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            LandmarkType::ChinBottom => "chinBottom",
            LandmarkType::EyeLeft => "eyeLeft",
            LandmarkType::EyeRight => "eyeRight",
            LandmarkType::LeftEyeBrowLeft => "leftEyeBrowLeft",
            LandmarkType::LeftEyeBrowRight => "leftEyeBrowRight",
            LandmarkType::LeftEyeBrowUp => "leftEyeBrowUp",
            LandmarkType::LeftEyeDown => "leftEyeDown",
            LandmarkType::LeftEyeLeft => "leftEyeLeft",
            LandmarkType::LeftEyeRight => "leftEyeRight",
            LandmarkType::LeftEyeUp => "leftEyeUp",
            LandmarkType::LeftPupil => "leftPupil",
            LandmarkType::MidJawlineLeft => "midJawlineLeft",
            LandmarkType::MidJawlineRight => "midJawlineRight",
            LandmarkType::MouthDown => "mouthDown",
            LandmarkType::MouthLeft => "mouthLeft",
            LandmarkType::MouthRight => "mouthRight",
            LandmarkType::MouthUp => "mouthUp",
            LandmarkType::Nose => "nose",
            LandmarkType::NoseLeft => "noseLeft",
            LandmarkType::NoseRight => "noseRight",
            LandmarkType::RightEyeBrowLeft => "rightEyeBrowLeft",
            LandmarkType::RightEyeBrowRight => "rightEyeBrowRight",
            LandmarkType::RightEyeBrowUp => "rightEyeBrowUp",
            LandmarkType::RightEyeDown => "rightEyeDown",
            LandmarkType::RightEyeLeft => "rightEyeLeft",
            LandmarkType::RightEyeRight => "rightEyeRight",
            LandmarkType::RightEyeUp => "rightEyeUp",
            LandmarkType::RightPupil => "rightPupil",
            LandmarkType::UpperJawlineLeft => "upperJawlineLeft",
            LandmarkType::UpperJawlineRight => "upperJawlineRight",
            LandmarkType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "chinBottom",
            "eyeLeft",
            "eyeRight",
            "leftEyeBrowLeft",
            "leftEyeBrowRight",
            "leftEyeBrowUp",
            "leftEyeDown",
            "leftEyeLeft",
            "leftEyeRight",
            "leftEyeUp",
            "leftPupil",
            "midJawlineLeft",
            "midJawlineRight",
            "mouthDown",
            "mouthLeft",
            "mouthRight",
            "mouthUp",
            "nose",
            "noseLeft",
            "noseRight",
            "rightEyeBrowLeft",
            "rightEyeBrowRight",
            "rightEyeBrowUp",
            "rightEyeDown",
            "rightEyeLeft",
            "rightEyeRight",
            "rightEyeUp",
            "rightPupil",
            "upperJawlineLeft",
            "upperJawlineRight",
        ]
    }
}
impl AsRef<str> for LandmarkType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
