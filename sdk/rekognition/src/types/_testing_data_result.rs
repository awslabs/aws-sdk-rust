// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sagemaker Groundtruth format manifest files for the input, output and validation datasets that are used and created during testing.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestingDataResult {
    /// <p>The testing dataset that was supplied for training.</p>
    #[doc(hidden)]
    pub input: std::option::Option<crate::types::TestingData>,
    /// <p>The subset of the dataset that was actually tested. Some images (assets) might not be tested due to file formatting and other issues. </p>
    #[doc(hidden)]
    pub output: std::option::Option<crate::types::TestingData>,
    /// <p>The location of the data validation manifest. The data validation manifest is created for the test dataset during model training.</p>
    #[doc(hidden)]
    pub validation: std::option::Option<crate::types::ValidationData>,
}
impl TestingDataResult {
    /// <p>The testing dataset that was supplied for training.</p>
    pub fn input(&self) -> std::option::Option<&crate::types::TestingData> {
        self.input.as_ref()
    }
    /// <p>The subset of the dataset that was actually tested. Some images (assets) might not be tested due to file formatting and other issues. </p>
    pub fn output(&self) -> std::option::Option<&crate::types::TestingData> {
        self.output.as_ref()
    }
    /// <p>The location of the data validation manifest. The data validation manifest is created for the test dataset during model training.</p>
    pub fn validation(&self) -> std::option::Option<&crate::types::ValidationData> {
        self.validation.as_ref()
    }
}
impl TestingDataResult {
    /// Creates a new builder-style object to manufacture [`TestingDataResult`](crate::types::TestingDataResult).
    pub fn builder() -> crate::types::builders::TestingDataResultBuilder {
        crate::types::builders::TestingDataResultBuilder::default()
    }
}

/// A builder for [`TestingDataResult`](crate::types::TestingDataResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestingDataResultBuilder {
    pub(crate) input: std::option::Option<crate::types::TestingData>,
    pub(crate) output: std::option::Option<crate::types::TestingData>,
    pub(crate) validation: std::option::Option<crate::types::ValidationData>,
}
impl TestingDataResultBuilder {
    /// <p>The testing dataset that was supplied for training.</p>
    pub fn input(mut self, input: crate::types::TestingData) -> Self {
        self.input = Some(input);
        self
    }
    /// <p>The testing dataset that was supplied for training.</p>
    pub fn set_input(mut self, input: std::option::Option<crate::types::TestingData>) -> Self {
        self.input = input;
        self
    }
    /// <p>The subset of the dataset that was actually tested. Some images (assets) might not be tested due to file formatting and other issues. </p>
    pub fn output(mut self, input: crate::types::TestingData) -> Self {
        self.output = Some(input);
        self
    }
    /// <p>The subset of the dataset that was actually tested. Some images (assets) might not be tested due to file formatting and other issues. </p>
    pub fn set_output(mut self, input: std::option::Option<crate::types::TestingData>) -> Self {
        self.output = input;
        self
    }
    /// <p>The location of the data validation manifest. The data validation manifest is created for the test dataset during model training.</p>
    pub fn validation(mut self, input: crate::types::ValidationData) -> Self {
        self.validation = Some(input);
        self
    }
    /// <p>The location of the data validation manifest. The data validation manifest is created for the test dataset during model training.</p>
    pub fn set_validation(
        mut self,
        input: std::option::Option<crate::types::ValidationData>,
    ) -> Self {
        self.validation = input;
        self
    }
    /// Consumes the builder and constructs a [`TestingDataResult`](crate::types::TestingDataResult).
    pub fn build(self) -> crate::types::TestingDataResult {
        crate::types::TestingDataResult {
            input: self.input,
            output: self.output,
            validation: self.validation,
        }
    }
}
