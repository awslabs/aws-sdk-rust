// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a single type of inappropriate, unwanted, or offensive content found in an image or video. Each type of moderated content has a label within a hierarchical taxonomy. For more information, see Content moderation in the Amazon Rekognition Developer Guide.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModerationLabel {
    /// <p>Specifies the confidence that Amazon Rekognition has that the label has been correctly identified.</p>
    /// <p>If you don't specify the <code>MinConfidence</code> parameter in the call to <code>DetectModerationLabels</code>, the operation returns labels with a confidence value greater than or equal to 50 percent.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
    /// <p>The label name for the type of unsafe content detected in the image.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name for the parent label. Labels at the top level of the hierarchy have the parent label <code>""</code>.</p>
    #[doc(hidden)]
    pub parent_name: std::option::Option<std::string::String>,
}
impl ModerationLabel {
    /// <p>Specifies the confidence that Amazon Rekognition has that the label has been correctly identified.</p>
    /// <p>If you don't specify the <code>MinConfidence</code> parameter in the call to <code>DetectModerationLabels</code>, the operation returns labels with a confidence value greater than or equal to 50 percent.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
    /// <p>The label name for the type of unsafe content detected in the image.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name for the parent label. Labels at the top level of the hierarchy have the parent label <code>""</code>.</p>
    pub fn parent_name(&self) -> std::option::Option<&str> {
        self.parent_name.as_deref()
    }
}
impl ModerationLabel {
    /// Creates a new builder-style object to manufacture [`ModerationLabel`](crate::types::ModerationLabel).
    pub fn builder() -> crate::types::builders::ModerationLabelBuilder {
        crate::types::builders::ModerationLabelBuilder::default()
    }
}

/// A builder for [`ModerationLabel`](crate::types::ModerationLabel).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModerationLabelBuilder {
    pub(crate) confidence: std::option::Option<f32>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) parent_name: std::option::Option<std::string::String>,
}
impl ModerationLabelBuilder {
    /// <p>Specifies the confidence that Amazon Rekognition has that the label has been correctly identified.</p>
    /// <p>If you don't specify the <code>MinConfidence</code> parameter in the call to <code>DetectModerationLabels</code>, the operation returns labels with a confidence value greater than or equal to 50 percent.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>Specifies the confidence that Amazon Rekognition has that the label has been correctly identified.</p>
    /// <p>If you don't specify the <code>MinConfidence</code> parameter in the call to <code>DetectModerationLabels</code>, the operation returns labels with a confidence value greater than or equal to 50 percent.</p>
    pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The label name for the type of unsafe content detected in the image.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The label name for the type of unsafe content detected in the image.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the parent label. Labels at the top level of the hierarchy have the parent label <code>""</code>.</p>
    pub fn parent_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_name = Some(input.into());
        self
    }
    /// <p>The name for the parent label. Labels at the top level of the hierarchy have the parent label <code>""</code>.</p>
    pub fn set_parent_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ModerationLabel`](crate::types::ModerationLabel).
    pub fn build(self) -> crate::types::ModerationLabel {
        crate::types::ModerationLabel {
            confidence: self.confidence,
            name: self.name,
            parent_name: self.parent_name,
        }
    }
}
