// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes updates or additions to a dataset. A Single update or addition is an entry (JSON Line) that provides information about a single image. To update an existing entry, you match the <code>source-ref</code> field of the update entry with the <code>source-ref</code> filed of the entry that you want to update. If the <code>source-ref</code> field doesn't match an existing entry, the entry is added to dataset as a new entry. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatasetChanges {
    /// <p>A Base64-encoded binary data object containing one or JSON lines that either update the dataset or are additions to the dataset. You change a dataset by calling <code>UpdateDatasetEntries</code>. If you are using an AWS SDK to call <code>UpdateDatasetEntries</code>, you don't need to encode <code>Changes</code> as the SDK encodes the data for you. </p>
    /// <p>For example JSON lines, see Image-Level labels in manifest files and and Object localization in manifest files in the <i>Amazon Rekognition Custom Labels Developer Guide</i>. </p>
    #[doc(hidden)]
    pub ground_truth: std::option::Option<aws_smithy_types::Blob>,
}
impl DatasetChanges {
    /// <p>A Base64-encoded binary data object containing one or JSON lines that either update the dataset or are additions to the dataset. You change a dataset by calling <code>UpdateDatasetEntries</code>. If you are using an AWS SDK to call <code>UpdateDatasetEntries</code>, you don't need to encode <code>Changes</code> as the SDK encodes the data for you. </p>
    /// <p>For example JSON lines, see Image-Level labels in manifest files and and Object localization in manifest files in the <i>Amazon Rekognition Custom Labels Developer Guide</i>. </p>
    pub fn ground_truth(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.ground_truth.as_ref()
    }
}
impl DatasetChanges {
    /// Creates a new builder-style object to manufacture [`DatasetChanges`](crate::types::DatasetChanges).
    pub fn builder() -> crate::types::builders::DatasetChangesBuilder {
        crate::types::builders::DatasetChangesBuilder::default()
    }
}

/// A builder for [`DatasetChanges`](crate::types::DatasetChanges).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatasetChangesBuilder {
    pub(crate) ground_truth: std::option::Option<aws_smithy_types::Blob>,
}
impl DatasetChangesBuilder {
    /// <p>A Base64-encoded binary data object containing one or JSON lines that either update the dataset or are additions to the dataset. You change a dataset by calling <code>UpdateDatasetEntries</code>. If you are using an AWS SDK to call <code>UpdateDatasetEntries</code>, you don't need to encode <code>Changes</code> as the SDK encodes the data for you. </p>
    /// <p>For example JSON lines, see Image-Level labels in manifest files and and Object localization in manifest files in the <i>Amazon Rekognition Custom Labels Developer Guide</i>. </p>
    pub fn ground_truth(mut self, input: aws_smithy_types::Blob) -> Self {
        self.ground_truth = Some(input);
        self
    }
    /// <p>A Base64-encoded binary data object containing one or JSON lines that either update the dataset or are additions to the dataset. You change a dataset by calling <code>UpdateDatasetEntries</code>. If you are using an AWS SDK to call <code>UpdateDatasetEntries</code>, you don't need to encode <code>Changes</code> as the SDK encodes the data for you. </p>
    /// <p>For example JSON lines, see Image-Level labels in manifest files and and Object localization in manifest files in the <i>Amazon Rekognition Custom Labels Developer Guide</i>. </p>
    pub fn set_ground_truth(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.ground_truth = input;
        self
    }
    /// Consumes the builder and constructs a [`DatasetChanges`](crate::types::DatasetChanges).
    pub fn build(self) -> crate::types::DatasetChanges {
        crate::types::DatasetChanges {
            ground_truth: self.ground_truth,
        }
    }
}
