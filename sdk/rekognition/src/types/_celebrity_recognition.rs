// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a detected celebrity and the time the celebrity was detected in a stored video. For more information, see GetCelebrityRecognition in the Amazon Rekognition Developer Guide.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CelebrityRecognition {
    /// <p>The time, in milliseconds from the start of the video, that the celebrity was recognized. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the celebrity first appears.</p>
    #[doc(hidden)]
    pub timestamp: i64,
    /// <p>Information about a recognized celebrity.</p>
    #[doc(hidden)]
    pub celebrity: std::option::Option<crate::types::CelebrityDetail>,
}
impl CelebrityRecognition {
    /// <p>The time, in milliseconds from the start of the video, that the celebrity was recognized. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the celebrity first appears.</p>
    pub fn timestamp(&self) -> i64 {
        self.timestamp
    }
    /// <p>Information about a recognized celebrity.</p>
    pub fn celebrity(&self) -> std::option::Option<&crate::types::CelebrityDetail> {
        self.celebrity.as_ref()
    }
}
impl CelebrityRecognition {
    /// Creates a new builder-style object to manufacture [`CelebrityRecognition`](crate::types::CelebrityRecognition).
    pub fn builder() -> crate::types::builders::CelebrityRecognitionBuilder {
        crate::types::builders::CelebrityRecognitionBuilder::default()
    }
}

/// A builder for [`CelebrityRecognition`](crate::types::CelebrityRecognition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CelebrityRecognitionBuilder {
    pub(crate) timestamp: std::option::Option<i64>,
    pub(crate) celebrity: std::option::Option<crate::types::CelebrityDetail>,
}
impl CelebrityRecognitionBuilder {
    /// <p>The time, in milliseconds from the start of the video, that the celebrity was recognized. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the celebrity first appears.</p>
    pub fn timestamp(mut self, input: i64) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The time, in milliseconds from the start of the video, that the celebrity was recognized. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the celebrity first appears.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Information about a recognized celebrity.</p>
    pub fn celebrity(mut self, input: crate::types::CelebrityDetail) -> Self {
        self.celebrity = Some(input);
        self
    }
    /// <p>Information about a recognized celebrity.</p>
    pub fn set_celebrity(
        mut self,
        input: std::option::Option<crate::types::CelebrityDetail>,
    ) -> Self {
        self.celebrity = input;
        self
    }
    /// Consumes the builder and constructs a [`CelebrityRecognition`](crate::types::CelebrityRecognition).
    pub fn build(self) -> crate::types::CelebrityRecognition {
        crate::types::CelebrityRecognition {
            timestamp: self.timestamp.unwrap_or_default(),
            celebrity: self.celebrity,
        }
    }
}
