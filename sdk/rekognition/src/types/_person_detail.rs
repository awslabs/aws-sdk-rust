// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a person detected in a video analysis request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PersonDetail {
    /// <p>Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.</p>
    #[doc(hidden)]
    pub index: i64,
    /// <p>Bounding box around the detected person.</p>
    #[doc(hidden)]
    pub bounding_box: std::option::Option<crate::types::BoundingBox>,
    /// <p>Face details for the detected person.</p>
    #[doc(hidden)]
    pub face: std::option::Option<crate::types::FaceDetail>,
}
impl PersonDetail {
    /// <p>Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.</p>
    pub fn index(&self) -> i64 {
        self.index
    }
    /// <p>Bounding box around the detected person.</p>
    pub fn bounding_box(&self) -> std::option::Option<&crate::types::BoundingBox> {
        self.bounding_box.as_ref()
    }
    /// <p>Face details for the detected person.</p>
    pub fn face(&self) -> std::option::Option<&crate::types::FaceDetail> {
        self.face.as_ref()
    }
}
impl PersonDetail {
    /// Creates a new builder-style object to manufacture [`PersonDetail`](crate::types::PersonDetail).
    pub fn builder() -> crate::types::builders::PersonDetailBuilder {
        crate::types::builders::PersonDetailBuilder::default()
    }
}

/// A builder for [`PersonDetail`](crate::types::PersonDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PersonDetailBuilder {
    pub(crate) index: std::option::Option<i64>,
    pub(crate) bounding_box: std::option::Option<crate::types::BoundingBox>,
    pub(crate) face: std::option::Option<crate::types::FaceDetail>,
}
impl PersonDetailBuilder {
    /// <p>Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.</p>
    pub fn index(mut self, input: i64) -> Self {
        self.index = Some(input);
        self
    }
    /// <p>Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.</p>
    pub fn set_index(mut self, input: std::option::Option<i64>) -> Self {
        self.index = input;
        self
    }
    /// <p>Bounding box around the detected person.</p>
    pub fn bounding_box(mut self, input: crate::types::BoundingBox) -> Self {
        self.bounding_box = Some(input);
        self
    }
    /// <p>Bounding box around the detected person.</p>
    pub fn set_bounding_box(
        mut self,
        input: std::option::Option<crate::types::BoundingBox>,
    ) -> Self {
        self.bounding_box = input;
        self
    }
    /// <p>Face details for the detected person.</p>
    pub fn face(mut self, input: crate::types::FaceDetail) -> Self {
        self.face = Some(input);
        self
    }
    /// <p>Face details for the detected person.</p>
    pub fn set_face(mut self, input: std::option::Option<crate::types::FaceDetail>) -> Self {
        self.face = input;
        self
    }
    /// Consumes the builder and constructs a [`PersonDetail`](crate::types::PersonDetail).
    pub fn build(self) -> crate::types::PersonDetail {
        crate::types::PersonDetail {
            index: self.index.unwrap_or_default(),
            bounding_box: self.bounding_box,
            face: self.face,
        }
    }
}
