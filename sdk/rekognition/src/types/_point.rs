// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The X and Y coordinates of a point on an image or video frame. The X and Y values are ratios of the overall image size or video resolution. For example, if an input image is 700x200 and the values are X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the image.</p>
/// <p>An array of <code>Point</code> objects makes up a <code>Polygon</code>. A <code>Polygon</code> is returned by <code>DetectText</code> and by <code>DetectCustomLabels</code> <code>Polygon</code> represents a fine-grained polygon around a detected item. For more information, see Geometry in the Amazon Rekognition Developer Guide. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Point {
    /// <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>
    #[doc(hidden)]
    pub x: std::option::Option<f32>,
    /// <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>
    #[doc(hidden)]
    pub y: std::option::Option<f32>,
}
impl Point {
    /// <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>
    pub fn x(&self) -> std::option::Option<f32> {
        self.x
    }
    /// <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>
    pub fn y(&self) -> std::option::Option<f32> {
        self.y
    }
}
impl Point {
    /// Creates a new builder-style object to manufacture [`Point`](crate::types::Point).
    pub fn builder() -> crate::types::builders::PointBuilder {
        crate::types::builders::PointBuilder::default()
    }
}

/// A builder for [`Point`](crate::types::Point).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PointBuilder {
    pub(crate) x: std::option::Option<f32>,
    pub(crate) y: std::option::Option<f32>,
}
impl PointBuilder {
    /// <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>
    pub fn x(mut self, input: f32) -> Self {
        self.x = Some(input);
        self
    }
    /// <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>
    pub fn set_x(mut self, input: std::option::Option<f32>) -> Self {
        self.x = input;
        self
    }
    /// <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>
    pub fn y(mut self, input: f32) -> Self {
        self.y = Some(input);
        self
    }
    /// <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>
    pub fn set_y(mut self, input: std::option::Option<f32>) -> Self {
        self.y = input;
        self
    }
    /// Consumes the builder and constructs a [`Point`](crate::types::Point).
    pub fn build(self) -> crate::types::Point {
        crate::types::Point {
            x: self.x,
            y: self.y,
        }
    }
}
