// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a word or line of text detected by <code>DetectText</code>.</p>
/// <p>The <code>DetectedText</code> field contains the text that Amazon Rekognition detected in the image. </p>
/// <p>Every word and line has an identifier (<code>Id</code>). Each word belongs to a line and has a parent identifier (<code>ParentId</code>) that identifies the line of text in which the word appears. The word <code>Id</code> is also an index for the word within a line of words. </p>
/// <p>For more information, see Detecting text in the Amazon Rekognition Developer Guide.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TextDetection {
    /// <p>The word or line of text recognized by Amazon Rekognition. </p>
    #[doc(hidden)]
    pub detected_text: std::option::Option<std::string::String>,
    /// <p>The type of text that was detected.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::TextTypes>,
    /// <p>The identifier for the detected text. The identifier is only unique for a single call to <code>DetectText</code>. </p>
    #[doc(hidden)]
    pub id: std::option::Option<i32>,
    /// <p>The Parent identifier for the detected text identified by the value of <code>ID</code>. If the type of detected text is <code>LINE</code>, the value of <code>ParentId</code> is <code>Null</code>. </p>
    #[doc(hidden)]
    pub parent_id: std::option::Option<i32>,
    /// <p>The confidence that Amazon Rekognition has in the accuracy of the detected text and the accuracy of the geometry points around the detected text.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
    /// <p>The location of the detected text on the image. Includes an axis aligned coarse bounding box surrounding the text and a finer grain polygon for more accurate spatial information.</p>
    #[doc(hidden)]
    pub geometry: std::option::Option<crate::types::Geometry>,
}
impl TextDetection {
    /// <p>The word or line of text recognized by Amazon Rekognition. </p>
    pub fn detected_text(&self) -> std::option::Option<&str> {
        self.detected_text.as_deref()
    }
    /// <p>The type of text that was detected.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::TextTypes> {
        self.r#type.as_ref()
    }
    /// <p>The identifier for the detected text. The identifier is only unique for a single call to <code>DetectText</code>. </p>
    pub fn id(&self) -> std::option::Option<i32> {
        self.id
    }
    /// <p>The Parent identifier for the detected text identified by the value of <code>ID</code>. If the type of detected text is <code>LINE</code>, the value of <code>ParentId</code> is <code>Null</code>. </p>
    pub fn parent_id(&self) -> std::option::Option<i32> {
        self.parent_id
    }
    /// <p>The confidence that Amazon Rekognition has in the accuracy of the detected text and the accuracy of the geometry points around the detected text.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
    /// <p>The location of the detected text on the image. Includes an axis aligned coarse bounding box surrounding the text and a finer grain polygon for more accurate spatial information.</p>
    pub fn geometry(&self) -> std::option::Option<&crate::types::Geometry> {
        self.geometry.as_ref()
    }
}
impl TextDetection {
    /// Creates a new builder-style object to manufacture [`TextDetection`](crate::types::TextDetection).
    pub fn builder() -> crate::types::builders::TextDetectionBuilder {
        crate::types::builders::TextDetectionBuilder::default()
    }
}

/// A builder for [`TextDetection`](crate::types::TextDetection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TextDetectionBuilder {
    pub(crate) detected_text: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::TextTypes>,
    pub(crate) id: std::option::Option<i32>,
    pub(crate) parent_id: std::option::Option<i32>,
    pub(crate) confidence: std::option::Option<f32>,
    pub(crate) geometry: std::option::Option<crate::types::Geometry>,
}
impl TextDetectionBuilder {
    /// <p>The word or line of text recognized by Amazon Rekognition. </p>
    pub fn detected_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.detected_text = Some(input.into());
        self
    }
    /// <p>The word or line of text recognized by Amazon Rekognition. </p>
    pub fn set_detected_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detected_text = input;
        self
    }
    /// <p>The type of text that was detected.</p>
    pub fn r#type(mut self, input: crate::types::TextTypes) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of text that was detected.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::TextTypes>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The identifier for the detected text. The identifier is only unique for a single call to <code>DetectText</code>. </p>
    pub fn id(mut self, input: i32) -> Self {
        self.id = Some(input);
        self
    }
    /// <p>The identifier for the detected text. The identifier is only unique for a single call to <code>DetectText</code>. </p>
    pub fn set_id(mut self, input: std::option::Option<i32>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Parent identifier for the detected text identified by the value of <code>ID</code>. If the type of detected text is <code>LINE</code>, the value of <code>ParentId</code> is <code>Null</code>. </p>
    pub fn parent_id(mut self, input: i32) -> Self {
        self.parent_id = Some(input);
        self
    }
    /// <p>The Parent identifier for the detected text identified by the value of <code>ID</code>. If the type of detected text is <code>LINE</code>, the value of <code>ParentId</code> is <code>Null</code>. </p>
    pub fn set_parent_id(mut self, input: std::option::Option<i32>) -> Self {
        self.parent_id = input;
        self
    }
    /// <p>The confidence that Amazon Rekognition has in the accuracy of the detected text and the accuracy of the geometry points around the detected text.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>The confidence that Amazon Rekognition has in the accuracy of the detected text and the accuracy of the geometry points around the detected text.</p>
    pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The location of the detected text on the image. Includes an axis aligned coarse bounding box surrounding the text and a finer grain polygon for more accurate spatial information.</p>
    pub fn geometry(mut self, input: crate::types::Geometry) -> Self {
        self.geometry = Some(input);
        self
    }
    /// <p>The location of the detected text on the image. Includes an axis aligned coarse bounding box surrounding the text and a finer grain polygon for more accurate spatial information.</p>
    pub fn set_geometry(mut self, input: std::option::Option<crate::types::Geometry>) -> Self {
        self.geometry = input;
        self
    }
    /// Consumes the builder and constructs a [`TextDetection`](crate::types::TextDetection).
    pub fn build(self) -> crate::types::TextDetection {
        crate::types::TextDetection {
            detected_text: self.detected_text,
            r#type: self.r#type,
            id: self.id,
            parent_id: self.parent_id,
            confidence: self.confidence,
            geometry: self.geometry,
        }
    }
}
