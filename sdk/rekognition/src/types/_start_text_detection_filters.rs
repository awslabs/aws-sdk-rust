// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Set of optional parameters that let you set the criteria text must meet to be included in your response. <code>WordFilter</code> looks at a word's height, width and minimum confidence. <code>RegionOfInterest</code> lets you set a specific region of the screen to look for text in.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartTextDetectionFilters {
    /// <p>Filters focusing on qualities of the text, such as confidence or size.</p>
    #[doc(hidden)]
    pub word_filter: std::option::Option<crate::types::DetectionFilter>,
    /// <p>Filter focusing on a certain area of the frame. Uses a <code>BoundingBox</code> object to set the region of the screen.</p>
    #[doc(hidden)]
    pub regions_of_interest: std::option::Option<std::vec::Vec<crate::types::RegionOfInterest>>,
}
impl StartTextDetectionFilters {
    /// <p>Filters focusing on qualities of the text, such as confidence or size.</p>
    pub fn word_filter(&self) -> std::option::Option<&crate::types::DetectionFilter> {
        self.word_filter.as_ref()
    }
    /// <p>Filter focusing on a certain area of the frame. Uses a <code>BoundingBox</code> object to set the region of the screen.</p>
    pub fn regions_of_interest(&self) -> std::option::Option<&[crate::types::RegionOfInterest]> {
        self.regions_of_interest.as_deref()
    }
}
impl StartTextDetectionFilters {
    /// Creates a new builder-style object to manufacture [`StartTextDetectionFilters`](crate::types::StartTextDetectionFilters).
    pub fn builder() -> crate::types::builders::StartTextDetectionFiltersBuilder {
        crate::types::builders::StartTextDetectionFiltersBuilder::default()
    }
}

/// A builder for [`StartTextDetectionFilters`](crate::types::StartTextDetectionFilters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartTextDetectionFiltersBuilder {
    pub(crate) word_filter: std::option::Option<crate::types::DetectionFilter>,
    pub(crate) regions_of_interest:
        std::option::Option<std::vec::Vec<crate::types::RegionOfInterest>>,
}
impl StartTextDetectionFiltersBuilder {
    /// <p>Filters focusing on qualities of the text, such as confidence or size.</p>
    pub fn word_filter(mut self, input: crate::types::DetectionFilter) -> Self {
        self.word_filter = Some(input);
        self
    }
    /// <p>Filters focusing on qualities of the text, such as confidence or size.</p>
    pub fn set_word_filter(
        mut self,
        input: std::option::Option<crate::types::DetectionFilter>,
    ) -> Self {
        self.word_filter = input;
        self
    }
    /// Appends an item to `regions_of_interest`.
    ///
    /// To override the contents of this collection use [`set_regions_of_interest`](Self::set_regions_of_interest).
    ///
    /// <p>Filter focusing on a certain area of the frame. Uses a <code>BoundingBox</code> object to set the region of the screen.</p>
    pub fn regions_of_interest(mut self, input: crate::types::RegionOfInterest) -> Self {
        let mut v = self.regions_of_interest.unwrap_or_default();
        v.push(input);
        self.regions_of_interest = Some(v);
        self
    }
    /// <p>Filter focusing on a certain area of the frame. Uses a <code>BoundingBox</code> object to set the region of the screen.</p>
    pub fn set_regions_of_interest(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RegionOfInterest>>,
    ) -> Self {
        self.regions_of_interest = input;
        self
    }
    /// Consumes the builder and constructs a [`StartTextDetectionFilters`](crate::types::StartTextDetectionFilters).
    pub fn build(self) -> crate::types::StartTextDetectionFilters {
        crate::types::StartTextDetectionFilters {
            word_filter: self.word_filter,
            regions_of_interest: self.regions_of_interest,
        }
    }
}
