// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata information about an audio stream. An array of <code>AudioMetadata</code> objects for the audio streams found in a stored video is returned by <code>GetSegmentDetection</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AudioMetadata {
    /// <p>The audio codec used to encode or decode the audio stream. </p>
    #[doc(hidden)]
    pub codec: std::option::Option<std::string::String>,
    /// <p>The duration of the audio stream in milliseconds.</p>
    #[doc(hidden)]
    pub duration_millis: std::option::Option<i64>,
    /// <p>The sample rate for the audio stream.</p>
    #[doc(hidden)]
    pub sample_rate: std::option::Option<i64>,
    /// <p>The number of audio channels in the segment.</p>
    #[doc(hidden)]
    pub number_of_channels: std::option::Option<i64>,
}
impl AudioMetadata {
    /// <p>The audio codec used to encode or decode the audio stream. </p>
    pub fn codec(&self) -> std::option::Option<&str> {
        self.codec.as_deref()
    }
    /// <p>The duration of the audio stream in milliseconds.</p>
    pub fn duration_millis(&self) -> std::option::Option<i64> {
        self.duration_millis
    }
    /// <p>The sample rate for the audio stream.</p>
    pub fn sample_rate(&self) -> std::option::Option<i64> {
        self.sample_rate
    }
    /// <p>The number of audio channels in the segment.</p>
    pub fn number_of_channels(&self) -> std::option::Option<i64> {
        self.number_of_channels
    }
}
impl AudioMetadata {
    /// Creates a new builder-style object to manufacture [`AudioMetadata`](crate::types::AudioMetadata).
    pub fn builder() -> crate::types::builders::AudioMetadataBuilder {
        crate::types::builders::AudioMetadataBuilder::default()
    }
}

/// A builder for [`AudioMetadata`](crate::types::AudioMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AudioMetadataBuilder {
    pub(crate) codec: std::option::Option<std::string::String>,
    pub(crate) duration_millis: std::option::Option<i64>,
    pub(crate) sample_rate: std::option::Option<i64>,
    pub(crate) number_of_channels: std::option::Option<i64>,
}
impl AudioMetadataBuilder {
    /// <p>The audio codec used to encode or decode the audio stream. </p>
    pub fn codec(mut self, input: impl Into<std::string::String>) -> Self {
        self.codec = Some(input.into());
        self
    }
    /// <p>The audio codec used to encode or decode the audio stream. </p>
    pub fn set_codec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.codec = input;
        self
    }
    /// <p>The duration of the audio stream in milliseconds.</p>
    pub fn duration_millis(mut self, input: i64) -> Self {
        self.duration_millis = Some(input);
        self
    }
    /// <p>The duration of the audio stream in milliseconds.</p>
    pub fn set_duration_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.duration_millis = input;
        self
    }
    /// <p>The sample rate for the audio stream.</p>
    pub fn sample_rate(mut self, input: i64) -> Self {
        self.sample_rate = Some(input);
        self
    }
    /// <p>The sample rate for the audio stream.</p>
    pub fn set_sample_rate(mut self, input: std::option::Option<i64>) -> Self {
        self.sample_rate = input;
        self
    }
    /// <p>The number of audio channels in the segment.</p>
    pub fn number_of_channels(mut self, input: i64) -> Self {
        self.number_of_channels = Some(input);
        self
    }
    /// <p>The number of audio channels in the segment.</p>
    pub fn set_number_of_channels(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_channels = input;
        self
    }
    /// Consumes the builder and constructs a [`AudioMetadata`](crate::types::AudioMetadata).
    pub fn build(self) -> crate::types::AudioMetadata {
        crate::types::AudioMetadata {
            codec: self.codec,
            duration_millis: self.duration_millis,
            sample_rate: self.sample_rate,
            number_of_channels: self.number_of_channels,
        }
    }
}
