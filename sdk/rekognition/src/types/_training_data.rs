// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The dataset used for training.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrainingData {
    /// <p>A manifest file that contains references to the training images and ground-truth annotations.</p>
    pub assets: ::std::option::Option<::std::vec::Vec<crate::types::Asset>>,
}
impl TrainingData {
    /// <p>A manifest file that contains references to the training images and ground-truth annotations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.assets.is_none()`.
    pub fn assets(&self) -> &[crate::types::Asset] {
        self.assets.as_deref().unwrap_or_default()
    }
}
impl TrainingData {
    /// Creates a new builder-style object to manufacture [`TrainingData`](crate::types::TrainingData).
    pub fn builder() -> crate::types::builders::TrainingDataBuilder {
        crate::types::builders::TrainingDataBuilder::default()
    }
}

/// A builder for [`TrainingData`](crate::types::TrainingData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TrainingDataBuilder {
    pub(crate) assets: ::std::option::Option<::std::vec::Vec<crate::types::Asset>>,
}
impl TrainingDataBuilder {
    /// Appends an item to `assets`.
    ///
    /// To override the contents of this collection use [`set_assets`](Self::set_assets).
    ///
    /// <p>A manifest file that contains references to the training images and ground-truth annotations.</p>
    pub fn assets(mut self, input: crate::types::Asset) -> Self {
        let mut v = self.assets.unwrap_or_default();
        v.push(input);
        self.assets = ::std::option::Option::Some(v);
        self
    }
    /// <p>A manifest file that contains references to the training images and ground-truth annotations.</p>
    pub fn set_assets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Asset>>) -> Self {
        self.assets = input;
        self
    }
    /// <p>A manifest file that contains references to the training images and ground-truth annotations.</p>
    pub fn get_assets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Asset>> {
        &self.assets
    }
    /// Consumes the builder and constructs a [`TrainingData`](crate::types::TrainingData).
    pub fn build(self) -> crate::types::TrainingData {
        crate::types::TrainingData { assets: self.assets }
    }
}
