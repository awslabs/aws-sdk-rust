// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a label detected in a video analysis request and the time the label was detected in the video. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LabelDetection {
    /// <p>Time, in milliseconds from the start of the video, that the label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the label first appears.</p>
    #[doc(hidden)]
    pub timestamp: i64,
    /// <p>Details about the detected label.</p>
    #[doc(hidden)]
    pub label: std::option::Option<crate::types::Label>,
    /// <p>The time in milliseconds defining the start of the timeline segment containing a continuously detected label.</p>
    #[doc(hidden)]
    pub start_timestamp_millis: std::option::Option<i64>,
    /// <p>The time in milliseconds defining the end of the timeline segment containing a continuously detected label.</p>
    #[doc(hidden)]
    pub end_timestamp_millis: std::option::Option<i64>,
    /// <p>The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.</p>
    #[doc(hidden)]
    pub duration_millis: std::option::Option<i64>,
}
impl LabelDetection {
    /// <p>Time, in milliseconds from the start of the video, that the label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the label first appears.</p>
    pub fn timestamp(&self) -> i64 {
        self.timestamp
    }
    /// <p>Details about the detected label.</p>
    pub fn label(&self) -> std::option::Option<&crate::types::Label> {
        self.label.as_ref()
    }
    /// <p>The time in milliseconds defining the start of the timeline segment containing a continuously detected label.</p>
    pub fn start_timestamp_millis(&self) -> std::option::Option<i64> {
        self.start_timestamp_millis
    }
    /// <p>The time in milliseconds defining the end of the timeline segment containing a continuously detected label.</p>
    pub fn end_timestamp_millis(&self) -> std::option::Option<i64> {
        self.end_timestamp_millis
    }
    /// <p>The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.</p>
    pub fn duration_millis(&self) -> std::option::Option<i64> {
        self.duration_millis
    }
}
impl LabelDetection {
    /// Creates a new builder-style object to manufacture [`LabelDetection`](crate::types::LabelDetection).
    pub fn builder() -> crate::types::builders::LabelDetectionBuilder {
        crate::types::builders::LabelDetectionBuilder::default()
    }
}

/// A builder for [`LabelDetection`](crate::types::LabelDetection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LabelDetectionBuilder {
    pub(crate) timestamp: std::option::Option<i64>,
    pub(crate) label: std::option::Option<crate::types::Label>,
    pub(crate) start_timestamp_millis: std::option::Option<i64>,
    pub(crate) end_timestamp_millis: std::option::Option<i64>,
    pub(crate) duration_millis: std::option::Option<i64>,
}
impl LabelDetectionBuilder {
    /// <p>Time, in milliseconds from the start of the video, that the label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the label first appears.</p>
    pub fn timestamp(mut self, input: i64) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>Time, in milliseconds from the start of the video, that the label was detected. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the label first appears.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Details about the detected label.</p>
    pub fn label(mut self, input: crate::types::Label) -> Self {
        self.label = Some(input);
        self
    }
    /// <p>Details about the detected label.</p>
    pub fn set_label(mut self, input: std::option::Option<crate::types::Label>) -> Self {
        self.label = input;
        self
    }
    /// <p>The time in milliseconds defining the start of the timeline segment containing a continuously detected label.</p>
    pub fn start_timestamp_millis(mut self, input: i64) -> Self {
        self.start_timestamp_millis = Some(input);
        self
    }
    /// <p>The time in milliseconds defining the start of the timeline segment containing a continuously detected label.</p>
    pub fn set_start_timestamp_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.start_timestamp_millis = input;
        self
    }
    /// <p>The time in milliseconds defining the end of the timeline segment containing a continuously detected label.</p>
    pub fn end_timestamp_millis(mut self, input: i64) -> Self {
        self.end_timestamp_millis = Some(input);
        self
    }
    /// <p>The time in milliseconds defining the end of the timeline segment containing a continuously detected label.</p>
    pub fn set_end_timestamp_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.end_timestamp_millis = input;
        self
    }
    /// <p>The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.</p>
    pub fn duration_millis(mut self, input: i64) -> Self {
        self.duration_millis = Some(input);
        self
    }
    /// <p>The time duration of a segment in milliseconds, I.e. time elapsed from StartTimestampMillis to EndTimestampMillis.</p>
    pub fn set_duration_millis(mut self, input: std::option::Option<i64>) -> Self {
        self.duration_millis = input;
        self
    }
    /// Consumes the builder and constructs a [`LabelDetection`](crate::types::LabelDetection).
    pub fn build(self) -> crate::types::LabelDetection {
        crate::types::LabelDetection {
            timestamp: self.timestamp.unwrap_or_default(),
            label: self.label,
            start_timestamp_millis: self.start_timestamp_millis,
            end_timestamp_millis: self.end_timestamp_millis,
            duration_millis: self.duration_millis,
        }
    }
}
