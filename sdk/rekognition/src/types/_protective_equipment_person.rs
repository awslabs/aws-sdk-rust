// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A person detected by a call to <code>DetectProtectiveEquipment</code>. The API returns all persons detected in the input image in an array of <code>ProtectiveEquipmentPerson</code> objects.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProtectiveEquipmentPerson {
    /// <p>An array of body parts detected on a person's body (including body parts without PPE). </p>
    pub body_parts: ::std::option::Option<::std::vec::Vec<crate::types::ProtectiveEquipmentBodyPart>>,
    /// <p>A bounding box around the detected person.</p>
    pub bounding_box: ::std::option::Option<crate::types::BoundingBox>,
    /// <p>The confidence that Amazon Rekognition has that the bounding box contains a person.</p>
    pub confidence: ::std::option::Option<f32>,
    /// <p>The identifier for the detected person. The identifier is only unique for a single call to <code>DetectProtectiveEquipment</code>.</p>
    pub id: ::std::option::Option<i32>,
}
impl ProtectiveEquipmentPerson {
    /// <p>An array of body parts detected on a person's body (including body parts without PPE). </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.body_parts.is_none()`.
    pub fn body_parts(&self) -> &[crate::types::ProtectiveEquipmentBodyPart] {
        self.body_parts.as_deref().unwrap_or_default()
    }
    /// <p>A bounding box around the detected person.</p>
    pub fn bounding_box(&self) -> ::std::option::Option<&crate::types::BoundingBox> {
        self.bounding_box.as_ref()
    }
    /// <p>The confidence that Amazon Rekognition has that the bounding box contains a person.</p>
    pub fn confidence(&self) -> ::std::option::Option<f32> {
        self.confidence
    }
    /// <p>The identifier for the detected person. The identifier is only unique for a single call to <code>DetectProtectiveEquipment</code>.</p>
    pub fn id(&self) -> ::std::option::Option<i32> {
        self.id
    }
}
impl ProtectiveEquipmentPerson {
    /// Creates a new builder-style object to manufacture [`ProtectiveEquipmentPerson`](crate::types::ProtectiveEquipmentPerson).
    pub fn builder() -> crate::types::builders::ProtectiveEquipmentPersonBuilder {
        crate::types::builders::ProtectiveEquipmentPersonBuilder::default()
    }
}

/// A builder for [`ProtectiveEquipmentPerson`](crate::types::ProtectiveEquipmentPerson).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProtectiveEquipmentPersonBuilder {
    pub(crate) body_parts: ::std::option::Option<::std::vec::Vec<crate::types::ProtectiveEquipmentBodyPart>>,
    pub(crate) bounding_box: ::std::option::Option<crate::types::BoundingBox>,
    pub(crate) confidence: ::std::option::Option<f32>,
    pub(crate) id: ::std::option::Option<i32>,
}
impl ProtectiveEquipmentPersonBuilder {
    /// Appends an item to `body_parts`.
    ///
    /// To override the contents of this collection use [`set_body_parts`](Self::set_body_parts).
    ///
    /// <p>An array of body parts detected on a person's body (including body parts without PPE). </p>
    pub fn body_parts(mut self, input: crate::types::ProtectiveEquipmentBodyPart) -> Self {
        let mut v = self.body_parts.unwrap_or_default();
        v.push(input);
        self.body_parts = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of body parts detected on a person's body (including body parts without PPE). </p>
    pub fn set_body_parts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProtectiveEquipmentBodyPart>>) -> Self {
        self.body_parts = input;
        self
    }
    /// <p>An array of body parts detected on a person's body (including body parts without PPE). </p>
    pub fn get_body_parts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProtectiveEquipmentBodyPart>> {
        &self.body_parts
    }
    /// <p>A bounding box around the detected person.</p>
    pub fn bounding_box(mut self, input: crate::types::BoundingBox) -> Self {
        self.bounding_box = ::std::option::Option::Some(input);
        self
    }
    /// <p>A bounding box around the detected person.</p>
    pub fn set_bounding_box(mut self, input: ::std::option::Option<crate::types::BoundingBox>) -> Self {
        self.bounding_box = input;
        self
    }
    /// <p>A bounding box around the detected person.</p>
    pub fn get_bounding_box(&self) -> &::std::option::Option<crate::types::BoundingBox> {
        &self.bounding_box
    }
    /// <p>The confidence that Amazon Rekognition has that the bounding box contains a person.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence that Amazon Rekognition has that the bounding box contains a person.</p>
    pub fn set_confidence(mut self, input: ::std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The confidence that Amazon Rekognition has that the bounding box contains a person.</p>
    pub fn get_confidence(&self) -> &::std::option::Option<f32> {
        &self.confidence
    }
    /// <p>The identifier for the detected person. The identifier is only unique for a single call to <code>DetectProtectiveEquipment</code>.</p>
    pub fn id(mut self, input: i32) -> Self {
        self.id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The identifier for the detected person. The identifier is only unique for a single call to <code>DetectProtectiveEquipment</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier for the detected person. The identifier is only unique for a single call to <code>DetectProtectiveEquipment</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<i32> {
        &self.id
    }
    /// Consumes the builder and constructs a [`ProtectiveEquipmentPerson`](crate::types::ProtectiveEquipmentPerson).
    pub fn build(self) -> crate::types::ProtectiveEquipmentPerson {
        crate::types::ProtectiveEquipmentPerson {
            body_parts: self.body_parts,
            bounding_box: self.bounding_box,
            confidence: self.confidence,
            id: self.id,
        }
    }
}
