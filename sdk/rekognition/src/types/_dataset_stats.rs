// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides statistics about a dataset. For more information, see <code>DescribeDataset</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatasetStats {
    /// <p> The total number of images in the dataset that have labels. </p>
    #[doc(hidden)]
    pub labeled_entries: std::option::Option<i32>,
    /// <p> The total number of images in the dataset. </p>
    #[doc(hidden)]
    pub total_entries: std::option::Option<i32>,
    /// <p> The total number of labels declared in the dataset. </p>
    #[doc(hidden)]
    pub total_labels: std::option::Option<i32>,
    /// <p> The total number of entries that contain at least one error. </p>
    #[doc(hidden)]
    pub error_entries: std::option::Option<i32>,
}
impl DatasetStats {
    /// <p> The total number of images in the dataset that have labels. </p>
    pub fn labeled_entries(&self) -> std::option::Option<i32> {
        self.labeled_entries
    }
    /// <p> The total number of images in the dataset. </p>
    pub fn total_entries(&self) -> std::option::Option<i32> {
        self.total_entries
    }
    /// <p> The total number of labels declared in the dataset. </p>
    pub fn total_labels(&self) -> std::option::Option<i32> {
        self.total_labels
    }
    /// <p> The total number of entries that contain at least one error. </p>
    pub fn error_entries(&self) -> std::option::Option<i32> {
        self.error_entries
    }
}
impl DatasetStats {
    /// Creates a new builder-style object to manufacture [`DatasetStats`](crate::types::DatasetStats).
    pub fn builder() -> crate::types::builders::DatasetStatsBuilder {
        crate::types::builders::DatasetStatsBuilder::default()
    }
}

/// A builder for [`DatasetStats`](crate::types::DatasetStats).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatasetStatsBuilder {
    pub(crate) labeled_entries: std::option::Option<i32>,
    pub(crate) total_entries: std::option::Option<i32>,
    pub(crate) total_labels: std::option::Option<i32>,
    pub(crate) error_entries: std::option::Option<i32>,
}
impl DatasetStatsBuilder {
    /// <p> The total number of images in the dataset that have labels. </p>
    pub fn labeled_entries(mut self, input: i32) -> Self {
        self.labeled_entries = Some(input);
        self
    }
    /// <p> The total number of images in the dataset that have labels. </p>
    pub fn set_labeled_entries(mut self, input: std::option::Option<i32>) -> Self {
        self.labeled_entries = input;
        self
    }
    /// <p> The total number of images in the dataset. </p>
    pub fn total_entries(mut self, input: i32) -> Self {
        self.total_entries = Some(input);
        self
    }
    /// <p> The total number of images in the dataset. </p>
    pub fn set_total_entries(mut self, input: std::option::Option<i32>) -> Self {
        self.total_entries = input;
        self
    }
    /// <p> The total number of labels declared in the dataset. </p>
    pub fn total_labels(mut self, input: i32) -> Self {
        self.total_labels = Some(input);
        self
    }
    /// <p> The total number of labels declared in the dataset. </p>
    pub fn set_total_labels(mut self, input: std::option::Option<i32>) -> Self {
        self.total_labels = input;
        self
    }
    /// <p> The total number of entries that contain at least one error. </p>
    pub fn error_entries(mut self, input: i32) -> Self {
        self.error_entries = Some(input);
        self
    }
    /// <p> The total number of entries that contain at least one error. </p>
    pub fn set_error_entries(mut self, input: std::option::Option<i32>) -> Self {
        self.error_entries = input;
        self
    }
    /// Consumes the builder and constructs a [`DatasetStats`](crate::types::DatasetStats).
    pub fn build(self) -> crate::types::DatasetStats {
        crate::types::DatasetStats {
            labeled_entries: self.labeled_entries,
            total_entries: self.total_entries,
            total_labels: self.total_labels,
            error_entries: self.error_entries,
        }
    }
}
