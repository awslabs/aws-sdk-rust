// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the type of a segment requested in a call to <code>StartSegmentDetection</code>. An array of <code>SegmentTypeInfo</code> objects is returned by the response from <code>GetSegmentDetection</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SegmentTypeInfo {
    /// <p>The type of a segment (technical cue or shot detection).</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::SegmentType>,
    /// <p>The version of the model used to detect segments.</p>
    #[doc(hidden)]
    pub model_version: std::option::Option<std::string::String>,
}
impl SegmentTypeInfo {
    /// <p>The type of a segment (technical cue or shot detection).</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::SegmentType> {
        self.r#type.as_ref()
    }
    /// <p>The version of the model used to detect segments.</p>
    pub fn model_version(&self) -> std::option::Option<&str> {
        self.model_version.as_deref()
    }
}
impl SegmentTypeInfo {
    /// Creates a new builder-style object to manufacture [`SegmentTypeInfo`](crate::types::SegmentTypeInfo).
    pub fn builder() -> crate::types::builders::SegmentTypeInfoBuilder {
        crate::types::builders::SegmentTypeInfoBuilder::default()
    }
}

/// A builder for [`SegmentTypeInfo`](crate::types::SegmentTypeInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SegmentTypeInfoBuilder {
    pub(crate) r#type: std::option::Option<crate::types::SegmentType>,
    pub(crate) model_version: std::option::Option<std::string::String>,
}
impl SegmentTypeInfoBuilder {
    /// <p>The type of a segment (technical cue or shot detection).</p>
    pub fn r#type(mut self, input: crate::types::SegmentType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of a segment (technical cue or shot detection).</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::SegmentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The version of the model used to detect segments.</p>
    pub fn model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_version = Some(input.into());
        self
    }
    /// <p>The version of the model used to detect segments.</p>
    pub fn set_model_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_version = input;
        self
    }
    /// Consumes the builder and constructs a [`SegmentTypeInfo`](crate::types::SegmentTypeInfo).
    pub fn build(self) -> crate::types::SegmentTypeInfo {
        crate::types::SegmentTypeInfo {
            r#type: self.r#type,
            model_version: self.model_version,
        }
    }
}
