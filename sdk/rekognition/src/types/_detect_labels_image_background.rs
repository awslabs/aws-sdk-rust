// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The background of the image with regard to image quality and dominant colors.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetectLabelsImageBackground {
    /// <p>The quality of the image background as defined by brightness and sharpness.</p>
    pub quality: ::std::option::Option<crate::types::DetectLabelsImageQuality>,
    /// <p>The dominant colors found in the background of an image, defined with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).</p>
    pub dominant_colors: ::std::option::Option<::std::vec::Vec<crate::types::DominantColor>>,
}
impl DetectLabelsImageBackground {
    /// <p>The quality of the image background as defined by brightness and sharpness.</p>
    pub fn quality(&self) -> ::std::option::Option<&crate::types::DetectLabelsImageQuality> {
        self.quality.as_ref()
    }
    /// <p>The dominant colors found in the background of an image, defined with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dominant_colors.is_none()`.
    pub fn dominant_colors(&self) -> &[crate::types::DominantColor] {
        self.dominant_colors.as_deref().unwrap_or_default()
    }
}
impl DetectLabelsImageBackground {
    /// Creates a new builder-style object to manufacture [`DetectLabelsImageBackground`](crate::types::DetectLabelsImageBackground).
    pub fn builder() -> crate::types::builders::DetectLabelsImageBackgroundBuilder {
        crate::types::builders::DetectLabelsImageBackgroundBuilder::default()
    }
}

/// A builder for [`DetectLabelsImageBackground`](crate::types::DetectLabelsImageBackground).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetectLabelsImageBackgroundBuilder {
    pub(crate) quality: ::std::option::Option<crate::types::DetectLabelsImageQuality>,
    pub(crate) dominant_colors: ::std::option::Option<::std::vec::Vec<crate::types::DominantColor>>,
}
impl DetectLabelsImageBackgroundBuilder {
    /// <p>The quality of the image background as defined by brightness and sharpness.</p>
    pub fn quality(mut self, input: crate::types::DetectLabelsImageQuality) -> Self {
        self.quality = ::std::option::Option::Some(input);
        self
    }
    /// <p>The quality of the image background as defined by brightness and sharpness.</p>
    pub fn set_quality(mut self, input: ::std::option::Option<crate::types::DetectLabelsImageQuality>) -> Self {
        self.quality = input;
        self
    }
    /// <p>The quality of the image background as defined by brightness and sharpness.</p>
    pub fn get_quality(&self) -> &::std::option::Option<crate::types::DetectLabelsImageQuality> {
        &self.quality
    }
    /// Appends an item to `dominant_colors`.
    ///
    /// To override the contents of this collection use [`set_dominant_colors`](Self::set_dominant_colors).
    ///
    /// <p>The dominant colors found in the background of an image, defined with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).</p>
    pub fn dominant_colors(mut self, input: crate::types::DominantColor) -> Self {
        let mut v = self.dominant_colors.unwrap_or_default();
        v.push(input);
        self.dominant_colors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The dominant colors found in the background of an image, defined with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).</p>
    pub fn set_dominant_colors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DominantColor>>) -> Self {
        self.dominant_colors = input;
        self
    }
    /// <p>The dominant colors found in the background of an image, defined with RGB values, CSS color name, simplified color name, and PixelPercentage (the percentage of image pixels that have a particular color).</p>
    pub fn get_dominant_colors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DominantColor>> {
        &self.dominant_colors
    }
    /// Consumes the builder and constructs a [`DetectLabelsImageBackground`](crate::types::DetectLabelsImageBackground).
    pub fn build(self) -> crate::types::DetectLabelsImageBackground {
        crate::types::DetectLabelsImageBackground {
            quality: self.quality,
            dominant_colors: self.dominant_colors,
        }
    }
}
