// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifies face image brightness and sharpness. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageQuality {
    /// <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p>
    #[doc(hidden)]
    pub brightness: std::option::Option<f32>,
    /// <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p>
    #[doc(hidden)]
    pub sharpness: std::option::Option<f32>,
}
impl ImageQuality {
    /// <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p>
    pub fn brightness(&self) -> std::option::Option<f32> {
        self.brightness
    }
    /// <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p>
    pub fn sharpness(&self) -> std::option::Option<f32> {
        self.sharpness
    }
}
impl ImageQuality {
    /// Creates a new builder-style object to manufacture [`ImageQuality`](crate::types::ImageQuality).
    pub fn builder() -> crate::types::builders::ImageQualityBuilder {
        crate::types::builders::ImageQualityBuilder::default()
    }
}

/// A builder for [`ImageQuality`](crate::types::ImageQuality).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageQualityBuilder {
    pub(crate) brightness: std::option::Option<f32>,
    pub(crate) sharpness: std::option::Option<f32>,
}
impl ImageQualityBuilder {
    /// <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p>
    pub fn brightness(mut self, input: f32) -> Self {
        self.brightness = Some(input);
        self
    }
    /// <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p>
    pub fn set_brightness(mut self, input: std::option::Option<f32>) -> Self {
        self.brightness = input;
        self
    }
    /// <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p>
    pub fn sharpness(mut self, input: f32) -> Self {
        self.sharpness = Some(input);
        self
    }
    /// <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p>
    pub fn set_sharpness(mut self, input: std::option::Option<f32>) -> Self {
        self.sharpness = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageQuality`](crate::types::ImageQuality).
    pub fn build(self) -> crate::types::ImageQuality {
        crate::types::ImageQuality {
            brightness: self.brightness,
            sharpness: self.sharpness,
        }
    }
}
