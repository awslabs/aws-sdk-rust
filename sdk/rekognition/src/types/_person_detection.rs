// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details and path tracking information for a single time a person's path is tracked in a video. Amazon Rekognition operations that track people's paths return an array of <code>PersonDetection</code> objects with elements for each time a person's path is tracked in a video. </p>
/// <p>For more information, see GetPersonTracking in the Amazon Rekognition Developer Guide. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PersonDetection {
    /// <p>The time, in milliseconds from the start of the video, that the person's path was tracked. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the person's path first appears.</p>
    #[doc(hidden)]
    pub timestamp: i64,
    /// <p>Details about a person whose path was tracked in a video.</p>
    #[doc(hidden)]
    pub person: std::option::Option<crate::types::PersonDetail>,
}
impl PersonDetection {
    /// <p>The time, in milliseconds from the start of the video, that the person's path was tracked. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the person's path first appears.</p>
    pub fn timestamp(&self) -> i64 {
        self.timestamp
    }
    /// <p>Details about a person whose path was tracked in a video.</p>
    pub fn person(&self) -> std::option::Option<&crate::types::PersonDetail> {
        self.person.as_ref()
    }
}
impl PersonDetection {
    /// Creates a new builder-style object to manufacture [`PersonDetection`](crate::types::PersonDetection).
    pub fn builder() -> crate::types::builders::PersonDetectionBuilder {
        crate::types::builders::PersonDetectionBuilder::default()
    }
}

/// A builder for [`PersonDetection`](crate::types::PersonDetection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PersonDetectionBuilder {
    pub(crate) timestamp: std::option::Option<i64>,
    pub(crate) person: std::option::Option<crate::types::PersonDetail>,
}
impl PersonDetectionBuilder {
    /// <p>The time, in milliseconds from the start of the video, that the person's path was tracked. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the person's path first appears.</p>
    pub fn timestamp(mut self, input: i64) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The time, in milliseconds from the start of the video, that the person's path was tracked. Note that <code>Timestamp</code> is not guaranteed to be accurate to the individual frame where the person's path first appears.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Details about a person whose path was tracked in a video.</p>
    pub fn person(mut self, input: crate::types::PersonDetail) -> Self {
        self.person = Some(input);
        self
    }
    /// <p>Details about a person whose path was tracked in a video.</p>
    pub fn set_person(mut self, input: std::option::Option<crate::types::PersonDetail>) -> Self {
        self.person = input;
        self
    }
    /// Consumes the builder and constructs a [`PersonDetection`](crate::types::PersonDetection).
    pub fn build(self) -> crate::types::PersonDetection {
        crate::types::PersonDetection {
            timestamp: self.timestamp.unwrap_or_default(),
            person: self.person,
        }
    }
}
