// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A description of a version of an Amazon Rekognition Custom Labels model.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProjectVersionDescription {
    /// <p>The Amazon Resource Name (ARN) of the model version. </p>
    #[doc(hidden)]
    pub project_version_arn: std::option::Option<std::string::String>,
    /// <p>The Unix datetime for the date and time that training started.</p>
    #[doc(hidden)]
    pub creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The minimum number of inference units used by the model. For more information, see <code>StartProjectVersion</code>.</p>
    #[doc(hidden)]
    pub min_inference_units: std::option::Option<i32>,
    /// <p>The current status of the model version.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ProjectVersionStatus>,
    /// <p>A descriptive message for an error or warning that occurred.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The duration, in seconds, that you were billed for a successful training of the model version. This value is only returned if the model version has been successfully trained.</p>
    #[doc(hidden)]
    pub billable_training_time_in_seconds: std::option::Option<i64>,
    /// <p>The Unix date and time that training of the model ended.</p>
    #[doc(hidden)]
    pub training_end_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The location where training results are saved.</p>
    #[doc(hidden)]
    pub output_config: std::option::Option<crate::types::OutputConfig>,
    /// <p>Contains information about the training results.</p>
    #[doc(hidden)]
    pub training_data_result: std::option::Option<crate::types::TrainingDataResult>,
    /// <p>Contains information about the testing results.</p>
    #[doc(hidden)]
    pub testing_data_result: std::option::Option<crate::types::TestingDataResult>,
    /// <p>The training results. <code>EvaluationResult</code> is only returned if training is successful.</p>
    #[doc(hidden)]
    pub evaluation_result: std::option::Option<crate::types::EvaluationResult>,
    /// <p>The location of the summary manifest. The summary manifest provides aggregate data validation results for the training and test datasets.</p>
    #[doc(hidden)]
    pub manifest_summary: std::option::Option<crate::types::GroundTruthManifest>,
    /// <p>The identifer for the AWS Key Management Service key (AWS KMS key) that was used to encrypt the model during training. </p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The maximum number of inference units Amazon Rekognition Custom Labels uses to auto-scale the model. For more information, see <code>StartProjectVersion</code>.</p>
    #[doc(hidden)]
    pub max_inference_units: std::option::Option<i32>,
    /// <p>If the model version was copied from a different project, <code>SourceProjectVersionArn</code> contains the ARN of the source model version. </p>
    #[doc(hidden)]
    pub source_project_version_arn: std::option::Option<std::string::String>,
}
impl ProjectVersionDescription {
    /// <p>The Amazon Resource Name (ARN) of the model version. </p>
    pub fn project_version_arn(&self) -> std::option::Option<&str> {
        self.project_version_arn.as_deref()
    }
    /// <p>The Unix datetime for the date and time that training started.</p>
    pub fn creation_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_timestamp.as_ref()
    }
    /// <p>The minimum number of inference units used by the model. For more information, see <code>StartProjectVersion</code>.</p>
    pub fn min_inference_units(&self) -> std::option::Option<i32> {
        self.min_inference_units
    }
    /// <p>The current status of the model version.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ProjectVersionStatus> {
        self.status.as_ref()
    }
    /// <p>A descriptive message for an error or warning that occurred.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The duration, in seconds, that you were billed for a successful training of the model version. This value is only returned if the model version has been successfully trained.</p>
    pub fn billable_training_time_in_seconds(&self) -> std::option::Option<i64> {
        self.billable_training_time_in_seconds
    }
    /// <p>The Unix date and time that training of the model ended.</p>
    pub fn training_end_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.training_end_timestamp.as_ref()
    }
    /// <p>The location where training results are saved.</p>
    pub fn output_config(&self) -> std::option::Option<&crate::types::OutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>Contains information about the training results.</p>
    pub fn training_data_result(&self) -> std::option::Option<&crate::types::TrainingDataResult> {
        self.training_data_result.as_ref()
    }
    /// <p>Contains information about the testing results.</p>
    pub fn testing_data_result(&self) -> std::option::Option<&crate::types::TestingDataResult> {
        self.testing_data_result.as_ref()
    }
    /// <p>The training results. <code>EvaluationResult</code> is only returned if training is successful.</p>
    pub fn evaluation_result(&self) -> std::option::Option<&crate::types::EvaluationResult> {
        self.evaluation_result.as_ref()
    }
    /// <p>The location of the summary manifest. The summary manifest provides aggregate data validation results for the training and test datasets.</p>
    pub fn manifest_summary(&self) -> std::option::Option<&crate::types::GroundTruthManifest> {
        self.manifest_summary.as_ref()
    }
    /// <p>The identifer for the AWS Key Management Service key (AWS KMS key) that was used to encrypt the model during training. </p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The maximum number of inference units Amazon Rekognition Custom Labels uses to auto-scale the model. For more information, see <code>StartProjectVersion</code>.</p>
    pub fn max_inference_units(&self) -> std::option::Option<i32> {
        self.max_inference_units
    }
    /// <p>If the model version was copied from a different project, <code>SourceProjectVersionArn</code> contains the ARN of the source model version. </p>
    pub fn source_project_version_arn(&self) -> std::option::Option<&str> {
        self.source_project_version_arn.as_deref()
    }
}
impl ProjectVersionDescription {
    /// Creates a new builder-style object to manufacture [`ProjectVersionDescription`](crate::types::ProjectVersionDescription).
    pub fn builder() -> crate::types::builders::ProjectVersionDescriptionBuilder {
        crate::types::builders::ProjectVersionDescriptionBuilder::default()
    }
}

/// A builder for [`ProjectVersionDescription`](crate::types::ProjectVersionDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProjectVersionDescriptionBuilder {
    pub(crate) project_version_arn: std::option::Option<std::string::String>,
    pub(crate) creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) min_inference_units: std::option::Option<i32>,
    pub(crate) status: std::option::Option<crate::types::ProjectVersionStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) billable_training_time_in_seconds: std::option::Option<i64>,
    pub(crate) training_end_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) output_config: std::option::Option<crate::types::OutputConfig>,
    pub(crate) training_data_result: std::option::Option<crate::types::TrainingDataResult>,
    pub(crate) testing_data_result: std::option::Option<crate::types::TestingDataResult>,
    pub(crate) evaluation_result: std::option::Option<crate::types::EvaluationResult>,
    pub(crate) manifest_summary: std::option::Option<crate::types::GroundTruthManifest>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) max_inference_units: std::option::Option<i32>,
    pub(crate) source_project_version_arn: std::option::Option<std::string::String>,
}
impl ProjectVersionDescriptionBuilder {
    /// <p>The Amazon Resource Name (ARN) of the model version. </p>
    pub fn project_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_version_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model version. </p>
    pub fn set_project_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.project_version_arn = input;
        self
    }
    /// <p>The Unix datetime for the date and time that training started.</p>
    pub fn creation_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_timestamp = Some(input);
        self
    }
    /// <p>The Unix datetime for the date and time that training started.</p>
    pub fn set_creation_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>The minimum number of inference units used by the model. For more information, see <code>StartProjectVersion</code>.</p>
    pub fn min_inference_units(mut self, input: i32) -> Self {
        self.min_inference_units = Some(input);
        self
    }
    /// <p>The minimum number of inference units used by the model. For more information, see <code>StartProjectVersion</code>.</p>
    pub fn set_min_inference_units(mut self, input: std::option::Option<i32>) -> Self {
        self.min_inference_units = input;
        self
    }
    /// <p>The current status of the model version.</p>
    pub fn status(mut self, input: crate::types::ProjectVersionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the model version.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ProjectVersionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>A descriptive message for an error or warning that occurred.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>A descriptive message for an error or warning that occurred.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The duration, in seconds, that you were billed for a successful training of the model version. This value is only returned if the model version has been successfully trained.</p>
    pub fn billable_training_time_in_seconds(mut self, input: i64) -> Self {
        self.billable_training_time_in_seconds = Some(input);
        self
    }
    /// <p>The duration, in seconds, that you were billed for a successful training of the model version. This value is only returned if the model version has been successfully trained.</p>
    pub fn set_billable_training_time_in_seconds(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.billable_training_time_in_seconds = input;
        self
    }
    /// <p>The Unix date and time that training of the model ended.</p>
    pub fn training_end_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.training_end_timestamp = Some(input);
        self
    }
    /// <p>The Unix date and time that training of the model ended.</p>
    pub fn set_training_end_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.training_end_timestamp = input;
        self
    }
    /// <p>The location where training results are saved.</p>
    pub fn output_config(mut self, input: crate::types::OutputConfig) -> Self {
        self.output_config = Some(input);
        self
    }
    /// <p>The location where training results are saved.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::types::OutputConfig>,
    ) -> Self {
        self.output_config = input;
        self
    }
    /// <p>Contains information about the training results.</p>
    pub fn training_data_result(mut self, input: crate::types::TrainingDataResult) -> Self {
        self.training_data_result = Some(input);
        self
    }
    /// <p>Contains information about the training results.</p>
    pub fn set_training_data_result(
        mut self,
        input: std::option::Option<crate::types::TrainingDataResult>,
    ) -> Self {
        self.training_data_result = input;
        self
    }
    /// <p>Contains information about the testing results.</p>
    pub fn testing_data_result(mut self, input: crate::types::TestingDataResult) -> Self {
        self.testing_data_result = Some(input);
        self
    }
    /// <p>Contains information about the testing results.</p>
    pub fn set_testing_data_result(
        mut self,
        input: std::option::Option<crate::types::TestingDataResult>,
    ) -> Self {
        self.testing_data_result = input;
        self
    }
    /// <p>The training results. <code>EvaluationResult</code> is only returned if training is successful.</p>
    pub fn evaluation_result(mut self, input: crate::types::EvaluationResult) -> Self {
        self.evaluation_result = Some(input);
        self
    }
    /// <p>The training results. <code>EvaluationResult</code> is only returned if training is successful.</p>
    pub fn set_evaluation_result(
        mut self,
        input: std::option::Option<crate::types::EvaluationResult>,
    ) -> Self {
        self.evaluation_result = input;
        self
    }
    /// <p>The location of the summary manifest. The summary manifest provides aggregate data validation results for the training and test datasets.</p>
    pub fn manifest_summary(mut self, input: crate::types::GroundTruthManifest) -> Self {
        self.manifest_summary = Some(input);
        self
    }
    /// <p>The location of the summary manifest. The summary manifest provides aggregate data validation results for the training and test datasets.</p>
    pub fn set_manifest_summary(
        mut self,
        input: std::option::Option<crate::types::GroundTruthManifest>,
    ) -> Self {
        self.manifest_summary = input;
        self
    }
    /// <p>The identifer for the AWS Key Management Service key (AWS KMS key) that was used to encrypt the model during training. </p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The identifer for the AWS Key Management Service key (AWS KMS key) that was used to encrypt the model during training. </p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The maximum number of inference units Amazon Rekognition Custom Labels uses to auto-scale the model. For more information, see <code>StartProjectVersion</code>.</p>
    pub fn max_inference_units(mut self, input: i32) -> Self {
        self.max_inference_units = Some(input);
        self
    }
    /// <p>The maximum number of inference units Amazon Rekognition Custom Labels uses to auto-scale the model. For more information, see <code>StartProjectVersion</code>.</p>
    pub fn set_max_inference_units(mut self, input: std::option::Option<i32>) -> Self {
        self.max_inference_units = input;
        self
    }
    /// <p>If the model version was copied from a different project, <code>SourceProjectVersionArn</code> contains the ARN of the source model version. </p>
    pub fn source_project_version_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_project_version_arn = Some(input.into());
        self
    }
    /// <p>If the model version was copied from a different project, <code>SourceProjectVersionArn</code> contains the ARN of the source model version. </p>
    pub fn set_source_project_version_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_project_version_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`ProjectVersionDescription`](crate::types::ProjectVersionDescription).
    pub fn build(self) -> crate::types::ProjectVersionDescription {
        crate::types::ProjectVersionDescription {
            project_version_arn: self.project_version_arn,
            creation_timestamp: self.creation_timestamp,
            min_inference_units: self.min_inference_units,
            status: self.status,
            status_message: self.status_message,
            billable_training_time_in_seconds: self.billable_training_time_in_seconds,
            training_end_timestamp: self.training_end_timestamp,
            output_config: self.output_config,
            training_data_result: self.training_data_result,
            testing_data_result: self.testing_data_result,
            evaluation_result: self.evaluation_result,
            manifest_summary: self.manifest_summary,
            kms_key_id: self.kms_key_id,
            max_inference_units: self.max_inference_units,
            source_project_version_arn: self.source_project_version_arn,
        }
    }
}
