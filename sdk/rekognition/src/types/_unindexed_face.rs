// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A face that <code>IndexFaces</code> detected, but didn't index. Use the <code>Reasons</code> response attribute to determine why a face wasn't indexed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UnindexedFace {
    /// <p>An array of reasons that specify why a face wasn't indexed. </p>
    /// <ul>
    /// <li> <p>EXTREME_POSE - The face is at a pose that can't be detected. For example, the head is turned too far away from the camera.</p> </li>
    /// <li> <p>EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the <code>MaxFaces</code> input parameter for <code>IndexFaces</code>.</p> </li>
    /// <li> <p>LOW_BRIGHTNESS - The image is too dark.</p> </li>
    /// <li> <p>LOW_SHARPNESS - The image is too blurry.</p> </li>
    /// <li> <p>LOW_CONFIDENCE - The face was detected with a low confidence.</p> </li>
    /// <li> <p>SMALL_BOUNDING_BOX - The bounding box around the face is too small.</p> </li>
    /// </ul>
    pub reasons: ::std::option::Option<::std::vec::Vec<crate::types::Reason>>,
    /// <p>The structure that contains attributes of a face that <code>IndexFaces</code>detected, but didn't index. </p>
    pub face_detail: ::std::option::Option<crate::types::FaceDetail>,
}
impl UnindexedFace {
    /// <p>An array of reasons that specify why a face wasn't indexed. </p>
    /// <ul>
    /// <li> <p>EXTREME_POSE - The face is at a pose that can't be detected. For example, the head is turned too far away from the camera.</p> </li>
    /// <li> <p>EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the <code>MaxFaces</code> input parameter for <code>IndexFaces</code>.</p> </li>
    /// <li> <p>LOW_BRIGHTNESS - The image is too dark.</p> </li>
    /// <li> <p>LOW_SHARPNESS - The image is too blurry.</p> </li>
    /// <li> <p>LOW_CONFIDENCE - The face was detected with a low confidence.</p> </li>
    /// <li> <p>SMALL_BOUNDING_BOX - The bounding box around the face is too small.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reasons.is_none()`.
    pub fn reasons(&self) -> &[crate::types::Reason] {
        self.reasons.as_deref().unwrap_or_default()
    }
    /// <p>The structure that contains attributes of a face that <code>IndexFaces</code>detected, but didn't index. </p>
    pub fn face_detail(&self) -> ::std::option::Option<&crate::types::FaceDetail> {
        self.face_detail.as_ref()
    }
}
impl UnindexedFace {
    /// Creates a new builder-style object to manufacture [`UnindexedFace`](crate::types::UnindexedFace).
    pub fn builder() -> crate::types::builders::UnindexedFaceBuilder {
        crate::types::builders::UnindexedFaceBuilder::default()
    }
}

/// A builder for [`UnindexedFace`](crate::types::UnindexedFace).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UnindexedFaceBuilder {
    pub(crate) reasons: ::std::option::Option<::std::vec::Vec<crate::types::Reason>>,
    pub(crate) face_detail: ::std::option::Option<crate::types::FaceDetail>,
}
impl UnindexedFaceBuilder {
    /// Appends an item to `reasons`.
    ///
    /// To override the contents of this collection use [`set_reasons`](Self::set_reasons).
    ///
    /// <p>An array of reasons that specify why a face wasn't indexed. </p>
    /// <ul>
    /// <li> <p>EXTREME_POSE - The face is at a pose that can't be detected. For example, the head is turned too far away from the camera.</p> </li>
    /// <li> <p>EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the <code>MaxFaces</code> input parameter for <code>IndexFaces</code>.</p> </li>
    /// <li> <p>LOW_BRIGHTNESS - The image is too dark.</p> </li>
    /// <li> <p>LOW_SHARPNESS - The image is too blurry.</p> </li>
    /// <li> <p>LOW_CONFIDENCE - The face was detected with a low confidence.</p> </li>
    /// <li> <p>SMALL_BOUNDING_BOX - The bounding box around the face is too small.</p> </li>
    /// </ul>
    pub fn reasons(mut self, input: crate::types::Reason) -> Self {
        let mut v = self.reasons.unwrap_or_default();
        v.push(input);
        self.reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of reasons that specify why a face wasn't indexed. </p>
    /// <ul>
    /// <li> <p>EXTREME_POSE - The face is at a pose that can't be detected. For example, the head is turned too far away from the camera.</p> </li>
    /// <li> <p>EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the <code>MaxFaces</code> input parameter for <code>IndexFaces</code>.</p> </li>
    /// <li> <p>LOW_BRIGHTNESS - The image is too dark.</p> </li>
    /// <li> <p>LOW_SHARPNESS - The image is too blurry.</p> </li>
    /// <li> <p>LOW_CONFIDENCE - The face was detected with a low confidence.</p> </li>
    /// <li> <p>SMALL_BOUNDING_BOX - The bounding box around the face is too small.</p> </li>
    /// </ul>
    pub fn set_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Reason>>) -> Self {
        self.reasons = input;
        self
    }
    /// <p>An array of reasons that specify why a face wasn't indexed. </p>
    /// <ul>
    /// <li> <p>EXTREME_POSE - The face is at a pose that can't be detected. For example, the head is turned too far away from the camera.</p> </li>
    /// <li> <p>EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the <code>MaxFaces</code> input parameter for <code>IndexFaces</code>.</p> </li>
    /// <li> <p>LOW_BRIGHTNESS - The image is too dark.</p> </li>
    /// <li> <p>LOW_SHARPNESS - The image is too blurry.</p> </li>
    /// <li> <p>LOW_CONFIDENCE - The face was detected with a low confidence.</p> </li>
    /// <li> <p>SMALL_BOUNDING_BOX - The bounding box around the face is too small.</p> </li>
    /// </ul>
    pub fn get_reasons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Reason>> {
        &self.reasons
    }
    /// <p>The structure that contains attributes of a face that <code>IndexFaces</code>detected, but didn't index. </p>
    pub fn face_detail(mut self, input: crate::types::FaceDetail) -> Self {
        self.face_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The structure that contains attributes of a face that <code>IndexFaces</code>detected, but didn't index. </p>
    pub fn set_face_detail(mut self, input: ::std::option::Option<crate::types::FaceDetail>) -> Self {
        self.face_detail = input;
        self
    }
    /// <p>The structure that contains attributes of a face that <code>IndexFaces</code>detected, but didn't index. </p>
    pub fn get_face_detail(&self) -> &::std::option::Option<crate::types::FaceDetail> {
        &self.face_detail
    }
    /// Consumes the builder and constructs a [`UnindexedFace`](crate::types::UnindexedFace).
    pub fn build(self) -> crate::types::UnindexedFace {
        crate::types::UnindexedFace {
            reasons: self.reasons,
            face_detail: self.face_detail,
        }
    }
}
