// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an item of Personal Protective Equipment (PPE) detected by <code>DetectProtectiveEquipment</code>. For more information, see <code>DetectProtectiveEquipment</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EquipmentDetection {
    /// <p>A bounding box surrounding the item of detected PPE.</p>
    #[doc(hidden)]
    pub bounding_box: std::option::Option<crate::types::BoundingBox>,
    /// <p>The confidence that Amazon Rekognition has that the bounding box (<code>BoundingBox</code>) contains an item of PPE.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
    /// <p>The type of detected PPE.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ProtectiveEquipmentType>,
    /// <p>Information about the body part covered by the detected PPE.</p>
    #[doc(hidden)]
    pub covers_body_part: std::option::Option<crate::types::CoversBodyPart>,
}
impl EquipmentDetection {
    /// <p>A bounding box surrounding the item of detected PPE.</p>
    pub fn bounding_box(&self) -> std::option::Option<&crate::types::BoundingBox> {
        self.bounding_box.as_ref()
    }
    /// <p>The confidence that Amazon Rekognition has that the bounding box (<code>BoundingBox</code>) contains an item of PPE.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
    /// <p>The type of detected PPE.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ProtectiveEquipmentType> {
        self.r#type.as_ref()
    }
    /// <p>Information about the body part covered by the detected PPE.</p>
    pub fn covers_body_part(&self) -> std::option::Option<&crate::types::CoversBodyPart> {
        self.covers_body_part.as_ref()
    }
}
impl EquipmentDetection {
    /// Creates a new builder-style object to manufacture [`EquipmentDetection`](crate::types::EquipmentDetection).
    pub fn builder() -> crate::types::builders::EquipmentDetectionBuilder {
        crate::types::builders::EquipmentDetectionBuilder::default()
    }
}

/// A builder for [`EquipmentDetection`](crate::types::EquipmentDetection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EquipmentDetectionBuilder {
    pub(crate) bounding_box: std::option::Option<crate::types::BoundingBox>,
    pub(crate) confidence: std::option::Option<f32>,
    pub(crate) r#type: std::option::Option<crate::types::ProtectiveEquipmentType>,
    pub(crate) covers_body_part: std::option::Option<crate::types::CoversBodyPart>,
}
impl EquipmentDetectionBuilder {
    /// <p>A bounding box surrounding the item of detected PPE.</p>
    pub fn bounding_box(mut self, input: crate::types::BoundingBox) -> Self {
        self.bounding_box = Some(input);
        self
    }
    /// <p>A bounding box surrounding the item of detected PPE.</p>
    pub fn set_bounding_box(
        mut self,
        input: std::option::Option<crate::types::BoundingBox>,
    ) -> Self {
        self.bounding_box = input;
        self
    }
    /// <p>The confidence that Amazon Rekognition has that the bounding box (<code>BoundingBox</code>) contains an item of PPE.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>The confidence that Amazon Rekognition has that the bounding box (<code>BoundingBox</code>) contains an item of PPE.</p>
    pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The type of detected PPE.</p>
    pub fn r#type(mut self, input: crate::types::ProtectiveEquipmentType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of detected PPE.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::ProtectiveEquipmentType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Information about the body part covered by the detected PPE.</p>
    pub fn covers_body_part(mut self, input: crate::types::CoversBodyPart) -> Self {
        self.covers_body_part = Some(input);
        self
    }
    /// <p>Information about the body part covered by the detected PPE.</p>
    pub fn set_covers_body_part(
        mut self,
        input: std::option::Option<crate::types::CoversBodyPart>,
    ) -> Self {
        self.covers_body_part = input;
        self
    }
    /// Consumes the builder and constructs a [`EquipmentDetection`](crate::types::EquipmentDetection).
    pub fn build(self) -> crate::types::EquipmentDetection {
        crate::types::EquipmentDetection {
            bounding_box: self.bounding_box,
            confidence: self.confidence,
            r#type: self.r#type,
            covers_body_part: self.covers_body_part,
        }
    }
}
