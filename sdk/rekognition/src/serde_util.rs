// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_face_liveness_session_output_correct_errors(
    mut builder: crate::operation::create_face_liveness_session::builders::CreateFaceLivenessSessionOutputBuilder,
) -> crate::operation::create_face_liveness_session::builders::CreateFaceLivenessSessionOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_face_liveness_session_results_output_correct_errors(
    mut builder: crate::operation::get_face_liveness_session_results::builders::GetFaceLivenessSessionResultsOutputBuilder,
) -> crate::operation::get_face_liveness_session_results::builders::GetFaceLivenessSessionResultsOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LivenessSessionStatus>().ok()
    }
    builder
}

pub(crate) fn get_media_analysis_job_output_correct_errors(
    mut builder: crate::operation::get_media_analysis_job::builders::GetMediaAnalysisJobOutputBuilder,
) -> crate::operation::get_media_analysis_job::builders::GetMediaAnalysisJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.operations_config.is_none() {
        builder.operations_config = {
            let builder = crate::types::builders::MediaAnalysisOperationsConfigBuilder::default();
            Some(builder.build())
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MediaAnalysisJobStatus>().ok()
    }
    if builder.creation_timestamp.is_none() {
        builder.creation_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.input.is_none() {
        builder.input = {
            let builder = crate::types::builders::MediaAnalysisInputBuilder::default();
            Some(crate::serde_util::media_analysis_input_correct_errors(builder).build())
        }
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::MediaAnalysisOutputConfigBuilder::default();
            crate::serde_util::media_analysis_output_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_media_analysis_jobs_output_correct_errors(
    mut builder: crate::operation::list_media_analysis_jobs::builders::ListMediaAnalysisJobsOutputBuilder,
) -> crate::operation::list_media_analysis_jobs::builders::ListMediaAnalysisJobsOutputBuilder {
    if builder.media_analysis_jobs.is_none() {
        builder.media_analysis_jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn start_media_analysis_job_output_correct_errors(
    mut builder: crate::operation::start_media_analysis_job::builders::StartMediaAnalysisJobOutputBuilder,
) -> crate::operation::start_media_analysis_job::builders::StartMediaAnalysisJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn media_analysis_input_correct_errors(
    mut builder: crate::types::builders::MediaAnalysisInputBuilder,
) -> crate::types::builders::MediaAnalysisInputBuilder {
    if builder.s3_object.is_none() {
        builder.s3_object = {
            let builder = crate::types::builders::S3ObjectBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn media_analysis_output_config_correct_errors(
    mut builder: crate::types::builders::MediaAnalysisOutputConfigBuilder,
) -> crate::types::builders::MediaAnalysisOutputConfigBuilder {
    if builder.s3_bucket.is_none() {
        builder.s3_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn stream_processor_data_sharing_preference_correct_errors(
    mut builder: crate::types::builders::StreamProcessorDataSharingPreferenceBuilder,
) -> crate::types::builders::StreamProcessorDataSharingPreferenceBuilder {
    if builder.opt_in.is_none() {
        builder.opt_in = Some(Default::default())
    }
    builder
}

pub(crate) fn stream_processor_notification_channel_correct_errors(
    mut builder: crate::types::builders::StreamProcessorNotificationChannelBuilder,
) -> crate::types::builders::StreamProcessorNotificationChannelBuilder {
    if builder.sns_topic_arn.is_none() {
        builder.sns_topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn connected_home_settings_correct_errors(
    mut builder: crate::types::builders::ConnectedHomeSettingsBuilder,
) -> crate::types::builders::ConnectedHomeSettingsBuilder {
    if builder.labels.is_none() {
        builder.labels = Some(Default::default())
    }
    builder
}

pub(crate) fn media_analysis_job_description_correct_errors(
    mut builder: crate::types::builders::MediaAnalysisJobDescriptionBuilder,
) -> crate::types::builders::MediaAnalysisJobDescriptionBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.operations_config.is_none() {
        builder.operations_config = {
            let builder = crate::types::builders::MediaAnalysisOperationsConfigBuilder::default();
            Some(builder.build())
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MediaAnalysisJobStatus>().ok()
    }
    if builder.creation_timestamp.is_none() {
        builder.creation_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.input.is_none() {
        builder.input = {
            let builder = crate::types::builders::MediaAnalysisInputBuilder::default();
            Some(crate::serde_util::media_analysis_input_correct_errors(builder).build())
        }
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::MediaAnalysisOutputConfigBuilder::default();
            crate::serde_util::media_analysis_output_config_correct_errors(builder).build().ok()
        }
    }
    builder
}
