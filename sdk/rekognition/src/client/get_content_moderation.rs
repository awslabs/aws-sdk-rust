// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetContentModeration`](crate::client::fluent_builders::GetContentModeration) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetContentModeration::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetContentModeration::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetContentModeration::set_job_id): <p>The identifier for the inappropriate, unwanted, or offensive content moderation job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetContentModeration</code>.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetContentModeration::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetContentModeration::set_max_results): <p>Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetContentModeration::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetContentModeration::set_next_token): <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of content moderation labels.</p>
    ///   - [`sort_by(ContentModerationSortBy)`](crate::client::fluent_builders::GetContentModeration::sort_by) / [`set_sort_by(Option<ContentModerationSortBy>)`](crate::client::fluent_builders::GetContentModeration::set_sort_by): <p>Sort to use for elements in the <code>ModerationLabelDetections</code> array. Use <code>TIMESTAMP</code> to sort array elements by the time labels are detected. Use <code>NAME</code> to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by <code>TIMESTAMP</code>.</p>
    /// - On success, responds with [`GetContentModerationOutput`](crate::output::GetContentModerationOutput) with field(s):
    ///   - [`job_status(Option<VideoJobStatus>)`](crate::output::GetContentModerationOutput::job_status): <p>The current status of the content moderation analysis job.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetContentModerationOutput::status_message): <p>If the job fails, <code>StatusMessage</code> provides a descriptive error message.</p>
    ///   - [`video_metadata(Option<VideoMetadata>)`](crate::output::GetContentModerationOutput::video_metadata): <p>Information about a video that Amazon Rekognition analyzed. <code>Videometadata</code> is returned in every page of paginated responses from <code>GetContentModeration</code>. </p>
    ///   - [`moderation_labels(Option<Vec<ContentModerationDetection>>)`](crate::output::GetContentModerationOutput::moderation_labels): <p>The detected inappropriate, unwanted, or offensive content moderation labels and the time(s) they were detected.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetContentModerationOutput::next_token): <p>If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of content moderation labels. </p>
    ///   - [`moderation_model_version(Option<String>)`](crate::output::GetContentModerationOutput::moderation_model_version): <p>Version number of the moderation detection model that was used to detect inappropriate, unwanted, or offensive content.</p>
    /// - On failure, responds with [`SdkError<GetContentModerationError>`](crate::error::GetContentModerationError)
    pub fn get_content_moderation(&self) -> crate::client::fluent_builders::GetContentModeration {
        crate::client::fluent_builders::GetContentModeration::new(self.handle.clone())
    }
}
