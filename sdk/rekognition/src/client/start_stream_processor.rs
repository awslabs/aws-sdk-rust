// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartStreamProcessor`](crate::operation::start_stream_processor::builders::StartStreamProcessorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::start_stream_processor::builders::StartStreamProcessorFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::start_stream_processor::builders::StartStreamProcessorFluentBuilder::set_name): <p>The name of the stream processor to start processing.</p>
    ///   - [`start_selector(StreamProcessingStartSelector)`](crate::operation::start_stream_processor::builders::StartStreamProcessorFluentBuilder::start_selector) / [`set_start_selector(Option<StreamProcessingStartSelector>)`](crate::operation::start_stream_processor::builders::StartStreamProcessorFluentBuilder::set_start_selector): <p> Specifies the starting point in the Kinesis stream to start processing. You can use the producer timestamp or the fragment number. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html">Fragment</a>. </p>  <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    ///   - [`stop_selector(StreamProcessingStopSelector)`](crate::operation::start_stream_processor::builders::StartStreamProcessorFluentBuilder::stop_selector) / [`set_stop_selector(Option<StreamProcessingStopSelector>)`](crate::operation::start_stream_processor::builders::StartStreamProcessorFluentBuilder::set_stop_selector): <p> Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video. </p>  <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>
    /// - On success, responds with [`StartStreamProcessorOutput`](crate::operation::start_stream_processor::StartStreamProcessorOutput) with field(s):
    ///   - [`session_id(Option<String>)`](crate::operation::start_stream_processor::StartStreamProcessorOutput::session_id): <p> A unique identifier for the stream processing session. </p>
    /// - On failure, responds with [`SdkError<StartStreamProcessorError>`](crate::operation::start_stream_processor::StartStreamProcessorError)
    pub fn start_stream_processor(
        &self,
    ) -> crate::operation::start_stream_processor::builders::StartStreamProcessorFluentBuilder {
        crate::operation::start_stream_processor::builders::StartStreamProcessorFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
