// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListFaces`](crate::client::fluent_builders::ListFaces) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFaces::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`collection_id(impl Into<String>)`](crate::client::fluent_builders::ListFaces::collection_id) / [`set_collection_id(Option<String>)`](crate::client::fluent_builders::ListFaces::set_collection_id): <p>ID of the collection from which to list the faces.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFaces::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFaces::set_next_token): <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFaces::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFaces::set_max_results): <p>Maximum number of faces to return.</p>
    /// - On success, responds with [`ListFacesOutput`](crate::output::ListFacesOutput) with field(s):
    ///   - [`faces(Option<Vec<Face>>)`](crate::output::ListFacesOutput::faces): <p>An array of <code>Face</code> objects. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFacesOutput::next_token): <p>If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces.</p>
    ///   - [`face_model_version(Option<String>)`](crate::output::ListFacesOutput::face_model_version): <p>Version number of the face detection model associated with the input collection (<code>CollectionId</code>).</p>
    /// - On failure, responds with [`SdkError<ListFacesError>`](crate::error::ListFacesError)
    pub fn list_faces(&self) -> crate::client::fluent_builders::ListFaces {
        crate::client::fluent_builders::ListFaces::new(self.handle.clone())
    }
}
