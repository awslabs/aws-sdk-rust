// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetectText`](crate::operation::detect_text::builders::DetectTextFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`image(Image)`](crate::operation::detect_text::builders::DetectTextFluentBuilder::image) / [`set_image(Option<Image>)`](crate::operation::detect_text::builders::DetectTextFluentBuilder::set_image): <p>The input image as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Rekognition operations, you can't pass image bytes. </p>  <p>If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the <code>Bytes</code> field. For more information, see Images in the Amazon Rekognition developer guide.</p>
    ///   - [`filters(DetectTextFilters)`](crate::operation::detect_text::builders::DetectTextFluentBuilder::filters) / [`set_filters(Option<DetectTextFilters>)`](crate::operation::detect_text::builders::DetectTextFluentBuilder::set_filters): <p>Optional parameters that let you set the criteria that the text must meet to be included in your response.</p>
    /// - On success, responds with [`DetectTextOutput`](crate::operation::detect_text::DetectTextOutput) with field(s):
    ///   - [`text_detections(Option<Vec<TextDetection>>)`](crate::operation::detect_text::DetectTextOutput::text_detections): <p>An array of text that was detected in the input image.</p>
    ///   - [`text_model_version(Option<String>)`](crate::operation::detect_text::DetectTextOutput::text_model_version): <p>The model version used to detect text.</p>
    /// - On failure, responds with [`SdkError<DetectTextError>`](crate::operation::detect_text::DetectTextError)
    pub fn detect_text(&self) -> crate::operation::detect_text::builders::DetectTextFluentBuilder {
        crate::operation::detect_text::builders::DetectTextFluentBuilder::new(self.handle.clone())
    }
}
