// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetectModerationLabels`](crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`image(Image)`](crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder::image) / [`set_image(Option<Image>)`](crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder::set_image):<br>required: **true**<br><p>The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. </p>  <p>If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the <code>Bytes</code> field. For more information, see Images in the Amazon Rekognition developer guide.</p><br>
    ///   - [`min_confidence(f32)`](crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder::min_confidence) / [`set_min_confidence(Option<f32>)`](crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder::set_min_confidence):<br>required: **false**<br><p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value.</p>  <p>If you don't specify <code>MinConfidence</code>, the operation returns labels with confidence values greater than or equal to 50 percent.</p><br>
    ///   - [`human_loop_config(HumanLoopConfig)`](crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder::human_loop_config) / [`set_human_loop_config(Option<HumanLoopConfig>)`](crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder::set_human_loop_config):<br>required: **false**<br><p>Sets up the configuration for human evaluation, including the FlowDefinition the image will be sent to.</p><br>
    ///   - [`project_version(impl Into<String>)`](crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder::project_version) / [`set_project_version(Option<String>)`](crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder::set_project_version):<br>required: **false**<br><p>Identifier for the custom adapter. Expects the ProjectVersionArn as a value. Use the CreateProject or CreateProjectVersion APIs to create a custom adapter.</p><br>
    /// - On success, responds with [`DetectModerationLabelsOutput`](crate::operation::detect_moderation_labels::DetectModerationLabelsOutput) with field(s):
    ///   - [`moderation_labels(Option<Vec::<ModerationLabel>>)`](crate::operation::detect_moderation_labels::DetectModerationLabelsOutput::moderation_labels): <p>Array of detected Moderation labels and the time, in milliseconds from the start of the video, they were detected.</p>
    ///   - [`moderation_model_version(Option<String>)`](crate::operation::detect_moderation_labels::DetectModerationLabelsOutput::moderation_model_version): <p>Version number of the base moderation detection model that was used to detect unsafe content.</p>
    ///   - [`human_loop_activation_output(Option<HumanLoopActivationOutput>)`](crate::operation::detect_moderation_labels::DetectModerationLabelsOutput::human_loop_activation_output): <p>Shows the results of the human in the loop evaluation.</p>
    ///   - [`project_version(Option<String>)`](crate::operation::detect_moderation_labels::DetectModerationLabelsOutput::project_version): <p>Identifier of the custom adapter that was used during inference. If during inference the adapter was EXPIRED, then the parameter will not be returned, indicating that a base moderation detection project version was used.</p>
    /// - On failure, responds with [`SdkError<DetectModerationLabelsError>`](crate::operation::detect_moderation_labels::DetectModerationLabelsError)
    pub fn detect_moderation_labels(&self) -> crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder {
        crate::operation::detect_moderation_labels::builders::DetectModerationLabelsFluentBuilder::new(self.handle.clone())
    }
}
