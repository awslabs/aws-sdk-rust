// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetFaceLivenessSessionResults`](crate::operation::get_face_liveness_session_results::builders::GetFaceLivenessSessionResultsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`session_id(impl Into<String>)`](crate::operation::get_face_liveness_session_results::builders::GetFaceLivenessSessionResultsFluentBuilder::session_id) / [`set_session_id(Option<String>)`](crate::operation::get_face_liveness_session_results::builders::GetFaceLivenessSessionResultsFluentBuilder::set_session_id):<br>required: **true**<br><p>A unique 128-bit UUID. This is used to uniquely identify the session and also acts as an idempotency token for all operations associated with the session.</p><br>
    /// - On success, responds with [`GetFaceLivenessSessionResultsOutput`](crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsOutput) with field(s):
    ///   - [`session_id(String)`](crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsOutput::session_id): <p>The sessionId for which this request was called.</p>
    ///   - [`status(LivenessSessionStatus)`](crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsOutput::status): <p>Represents a status corresponding to the state of the session. Possible statuses are: CREATED, IN_PROGRESS, SUCCEEDED, FAILED, EXPIRED.</p>
    ///   - [`confidence(Option<f32>)`](crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsOutput::confidence): <p>Probabalistic confidence score for if the person in the given video was live, represented as a float value between 0 to 100.</p>
    ///   - [`reference_image(Option<AuditImage>)`](crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsOutput::reference_image): <p>A high-quality image from the Face Liveness video that can be used for face comparison or search. It includes a bounding box of the face and the Base64-encoded bytes that return an image. If the CreateFaceLivenessSession request included an OutputConfig argument, the image will be uploaded to an S3Object specified in the output configuration. In case the reference image is not returned, it's recommended to retry the Liveness check.</p>
    ///   - [`audit_images(Option<Vec::<AuditImage>>)`](crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsOutput::audit_images): <p>A set of images from the Face Liveness video that can be used for audit purposes. It includes a bounding box of the face and the Base64-encoded bytes that return an image. If the CreateFaceLivenessSession request included an OutputConfig argument, the image will be uploaded to an S3Object specified in the output configuration. If no Amazon S3 bucket is defined, raw bytes are sent instead.</p>
    /// - On failure, responds with [`SdkError<GetFaceLivenessSessionResultsError>`](crate::operation::get_face_liveness_session_results::GetFaceLivenessSessionResultsError)
    pub fn get_face_liveness_session_results(
        &self,
    ) -> crate::operation::get_face_liveness_session_results::builders::GetFaceLivenessSessionResultsFluentBuilder {
        crate::operation::get_face_liveness_session_results::builders::GetFaceLivenessSessionResultsFluentBuilder::new(self.handle.clone())
    }
}
