// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeEventDetailsOutput {
    /// <p>Information about the events that could be retrieved.</p>
    pub successful_set: ::std::option::Option<::std::vec::Vec<crate::types::EventDetails>>,
    /// <p>Error messages for any events that could not be retrieved.</p>
    pub failed_set: ::std::option::Option<::std::vec::Vec<crate::types::EventDetailsErrorItem>>,
    _request_id: Option<String>,
}
impl DescribeEventDetailsOutput {
    /// <p>Information about the events that could be retrieved.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.successful_set.is_none()`.
    pub fn successful_set(&self) -> &[crate::types::EventDetails] {
        self.successful_set.as_deref().unwrap_or_default()
    }
    /// <p>Error messages for any events that could not be retrieved.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failed_set.is_none()`.
    pub fn failed_set(&self) -> &[crate::types::EventDetailsErrorItem] {
        self.failed_set.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeEventDetailsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEventDetailsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventDetailsOutput`](crate::operation::describe_event_details::DescribeEventDetailsOutput).
    pub fn builder() -> crate::operation::describe_event_details::builders::DescribeEventDetailsOutputBuilder {
        crate::operation::describe_event_details::builders::DescribeEventDetailsOutputBuilder::default()
    }
}

/// A builder for [`DescribeEventDetailsOutput`](crate::operation::describe_event_details::DescribeEventDetailsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeEventDetailsOutputBuilder {
    pub(crate) successful_set: ::std::option::Option<::std::vec::Vec<crate::types::EventDetails>>,
    pub(crate) failed_set: ::std::option::Option<::std::vec::Vec<crate::types::EventDetailsErrorItem>>,
    _request_id: Option<String>,
}
impl DescribeEventDetailsOutputBuilder {
    /// Appends an item to `successful_set`.
    ///
    /// To override the contents of this collection use [`set_successful_set`](Self::set_successful_set).
    ///
    /// <p>Information about the events that could be retrieved.</p>
    pub fn successful_set(mut self, input: crate::types::EventDetails) -> Self {
        let mut v = self.successful_set.unwrap_or_default();
        v.push(input);
        self.successful_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the events that could be retrieved.</p>
    pub fn set_successful_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventDetails>>) -> Self {
        self.successful_set = input;
        self
    }
    /// <p>Information about the events that could be retrieved.</p>
    pub fn get_successful_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventDetails>> {
        &self.successful_set
    }
    /// Appends an item to `failed_set`.
    ///
    /// To override the contents of this collection use [`set_failed_set`](Self::set_failed_set).
    ///
    /// <p>Error messages for any events that could not be retrieved.</p>
    pub fn failed_set(mut self, input: crate::types::EventDetailsErrorItem) -> Self {
        let mut v = self.failed_set.unwrap_or_default();
        v.push(input);
        self.failed_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>Error messages for any events that could not be retrieved.</p>
    pub fn set_failed_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventDetailsErrorItem>>) -> Self {
        self.failed_set = input;
        self
    }
    /// <p>Error messages for any events that could not be retrieved.</p>
    pub fn get_failed_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventDetailsErrorItem>> {
        &self.failed_set
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEventDetailsOutput`](crate::operation::describe_event_details::DescribeEventDetailsOutput).
    pub fn build(self) -> crate::operation::describe_event_details::DescribeEventDetailsOutput {
        crate::operation::describe_event_details::DescribeEventDetailsOutput {
            successful_set: self.successful_set,
            failed_set: self.failed_set,
            _request_id: self._request_id,
        }
    }
}
