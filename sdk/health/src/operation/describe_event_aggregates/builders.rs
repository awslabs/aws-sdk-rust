// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_event_aggregates::_describe_event_aggregates_output::DescribeEventAggregatesOutputBuilder;

pub use crate::operation::describe_event_aggregates::_describe_event_aggregates_input::DescribeEventAggregatesInputBuilder;

/// Fluent builder constructing a request to `DescribeEventAggregates`.
///
/// <p>Returns the number of events of each event type (issue, scheduled change, and account notification). If no filter is specified, the counts of all events in each category are returned.</p> <note>
/// <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the next request to return more results.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEventAggregatesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::describe_event_aggregates::builders::DescribeEventAggregatesInputBuilder,
}
impl DescribeEventAggregatesFluentBuilder {
    /// Creates a new `DescribeEventAggregates`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_event_aggregates::DescribeEventAggregates,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_event_aggregates::DescribeEventAggregatesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_event_aggregates::DescribeEventAggregatesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_event_aggregates::DescribeEventAggregatesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_event_aggregates::paginator::DescribeEventAggregatesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::describe_event_aggregates::paginator::DescribeEventAggregatesPaginator
    {
        crate::operation::describe_event_aggregates::paginator::DescribeEventAggregatesPaginator::new(self.handle, self.inner)
    }
    /// <p>Values to narrow the results returned.</p>
    pub fn filter(mut self, input: crate::types::EventFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>Values to narrow the results returned.</p>
    pub fn set_filter(mut self, input: std::option::Option<crate::types::EventFilter>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>The only currently supported value is <code>eventTypeCategory</code>.</p>
    pub fn aggregate_field(mut self, input: crate::types::EventAggregateField) -> Self {
        self.inner = self.inner.aggregate_field(input);
        self
    }
    /// <p>The only currently supported value is <code>eventTypeCategory</code>.</p>
    pub fn set_aggregate_field(
        mut self,
        input: std::option::Option<crate::types::EventAggregateField>,
    ) -> Self {
        self.inner = self.inner.set_aggregate_field(input);
        self
    }
    /// <p>The maximum number of items to return in one batch, between 10 and 100, inclusive.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of items to return in one batch, between 10 and 100, inclusive.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
