// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEventAggregatesInput {
    /// <p>Values to narrow the results returned.</p>
    #[doc(hidden)]
    pub filter: std::option::Option<crate::types::EventFilter>,
    /// <p>The only currently supported value is <code>eventTypeCategory</code>.</p>
    #[doc(hidden)]
    pub aggregate_field: std::option::Option<crate::types::EventAggregateField>,
    /// <p>The maximum number of items to return in one batch, between 10 and 100, inclusive.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeEventAggregatesInput {
    /// <p>Values to narrow the results returned.</p>
    pub fn filter(&self) -> std::option::Option<&crate::types::EventFilter> {
        self.filter.as_ref()
    }
    /// <p>The only currently supported value is <code>eventTypeCategory</code>.</p>
    pub fn aggregate_field(&self) -> std::option::Option<&crate::types::EventAggregateField> {
        self.aggregate_field.as_ref()
    }
    /// <p>The maximum number of items to return in one batch, between 10 and 100, inclusive.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeEventAggregatesInput {
    /// Creates a new builder-style object to manufacture [`DescribeEventAggregatesInput`](crate::operation::describe_event_aggregates::DescribeEventAggregatesInput).
    pub fn builder(
    ) -> crate::operation::describe_event_aggregates::builders::DescribeEventAggregatesInputBuilder
    {
        crate::operation::describe_event_aggregates::builders::DescribeEventAggregatesInputBuilder::default()
    }
}

/// A builder for [`DescribeEventAggregatesInput`](crate::operation::describe_event_aggregates::DescribeEventAggregatesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEventAggregatesInputBuilder {
    pub(crate) filter: std::option::Option<crate::types::EventFilter>,
    pub(crate) aggregate_field: std::option::Option<crate::types::EventAggregateField>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl DescribeEventAggregatesInputBuilder {
    /// <p>Values to narrow the results returned.</p>
    pub fn filter(mut self, input: crate::types::EventFilter) -> Self {
        self.filter = Some(input);
        self
    }
    /// <p>Values to narrow the results returned.</p>
    pub fn set_filter(mut self, input: std::option::Option<crate::types::EventFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The only currently supported value is <code>eventTypeCategory</code>.</p>
    pub fn aggregate_field(mut self, input: crate::types::EventAggregateField) -> Self {
        self.aggregate_field = Some(input);
        self
    }
    /// <p>The only currently supported value is <code>eventTypeCategory</code>.</p>
    pub fn set_aggregate_field(
        mut self,
        input: std::option::Option<crate::types::EventAggregateField>,
    ) -> Self {
        self.aggregate_field = input;
        self
    }
    /// <p>The maximum number of items to return in one batch, between 10 and 100, inclusive.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items to return in one batch, between 10 and 100, inclusive.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEventAggregatesInput`](crate::operation::describe_event_aggregates::DescribeEventAggregatesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_event_aggregates::DescribeEventAggregatesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_event_aggregates::DescribeEventAggregatesInput {
                filter: self.filter,
                aggregate_field: self.aggregate_field,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
