// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeEventAggregatesOutput {
    /// <p>The number of events in each category that meet the optional filter criteria.</p>
    pub event_aggregates: ::std::option::Option<::std::vec::Vec<crate::types::EventAggregate>>,
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeEventAggregatesOutput {
    /// <p>The number of events in each category that meet the optional filter criteria.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_aggregates.is_none()`.
    pub fn event_aggregates(&self) -> &[crate::types::EventAggregate] {
        self.event_aggregates.as_deref().unwrap_or_default()
    }
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeEventAggregatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEventAggregatesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventAggregatesOutput`](crate::operation::describe_event_aggregates::DescribeEventAggregatesOutput).
    pub fn builder() -> crate::operation::describe_event_aggregates::builders::DescribeEventAggregatesOutputBuilder {
        crate::operation::describe_event_aggregates::builders::DescribeEventAggregatesOutputBuilder::default()
    }
}

/// A builder for [`DescribeEventAggregatesOutput`](crate::operation::describe_event_aggregates::DescribeEventAggregatesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeEventAggregatesOutputBuilder {
    pub(crate) event_aggregates: ::std::option::Option<::std::vec::Vec<crate::types::EventAggregate>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeEventAggregatesOutputBuilder {
    /// Appends an item to `event_aggregates`.
    ///
    /// To override the contents of this collection use [`set_event_aggregates`](Self::set_event_aggregates).
    ///
    /// <p>The number of events in each category that meet the optional filter criteria.</p>
    pub fn event_aggregates(mut self, input: crate::types::EventAggregate) -> Self {
        let mut v = self.event_aggregates.unwrap_or_default();
        v.push(input);
        self.event_aggregates = ::std::option::Option::Some(v);
        self
    }
    /// <p>The number of events in each category that meet the optional filter criteria.</p>
    pub fn set_event_aggregates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventAggregate>>) -> Self {
        self.event_aggregates = input;
        self
    }
    /// <p>The number of events in each category that meet the optional filter criteria.</p>
    pub fn get_event_aggregates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventAggregate>> {
        &self.event_aggregates
    }
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEventAggregatesOutput`](crate::operation::describe_event_aggregates::DescribeEventAggregatesOutput).
    pub fn build(self) -> crate::operation::describe_event_aggregates::DescribeEventAggregatesOutput {
        crate::operation::describe_event_aggregates::DescribeEventAggregatesOutput {
            event_aggregates: self.event_aggregates,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
