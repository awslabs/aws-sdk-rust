// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeEntityAggregatesInput {
    /// <p>A list of event ARNs (unique identifiers). For example: <code>"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456", "arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101"</code> </p>
    pub event_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DescribeEntityAggregatesInput {
    /// <p>A list of event ARNs (unique identifiers). For example: <code>"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456", "arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101"</code> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_arns.is_none()`.
    pub fn event_arns(&self) -> &[::std::string::String] {
        self.event_arns.as_deref().unwrap_or_default()
    }
}
impl DescribeEntityAggregatesInput {
    /// Creates a new builder-style object to manufacture [`DescribeEntityAggregatesInput`](crate::operation::describe_entity_aggregates::DescribeEntityAggregatesInput).
    pub fn builder() -> crate::operation::describe_entity_aggregates::builders::DescribeEntityAggregatesInputBuilder {
        crate::operation::describe_entity_aggregates::builders::DescribeEntityAggregatesInputBuilder::default()
    }
}

/// A builder for [`DescribeEntityAggregatesInput`](crate::operation::describe_entity_aggregates::DescribeEntityAggregatesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeEntityAggregatesInputBuilder {
    pub(crate) event_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DescribeEntityAggregatesInputBuilder {
    /// Appends an item to `event_arns`.
    ///
    /// To override the contents of this collection use [`set_event_arns`](Self::set_event_arns).
    ///
    /// <p>A list of event ARNs (unique identifiers). For example: <code>"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456", "arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101"</code> </p>
    pub fn event_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.event_arns.unwrap_or_default();
        v.push(input.into());
        self.event_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of event ARNs (unique identifiers). For example: <code>"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456", "arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101"</code> </p>
    pub fn set_event_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.event_arns = input;
        self
    }
    /// <p>A list of event ARNs (unique identifiers). For example: <code>"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456", "arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101"</code> </p>
    pub fn get_event_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.event_arns
    }
    /// Consumes the builder and constructs a [`DescribeEntityAggregatesInput`](crate::operation::describe_entity_aggregates::DescribeEntityAggregatesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_entity_aggregates::DescribeEntityAggregatesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_entity_aggregates::DescribeEntityAggregatesInput { event_arns: self.event_arns })
    }
}
