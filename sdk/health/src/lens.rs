// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_affected_accounts_for_organization_output_next_token(
    input: &crate::output::DescribeAffectedAccountsForOrganizationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_affected_entities_output_next_token(
    input: &crate::output::DescribeAffectedEntitiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_affected_entities_for_organization_output_next_token(
    input: &crate::output::DescribeAffectedEntitiesForOrganizationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_event_aggregates_output_next_token(
    input: &crate::output::DescribeEventAggregatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_events_output_next_token(
    input: &crate::output::DescribeEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_events_for_organization_output_next_token(
    input: &crate::output::DescribeEventsForOrganizationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_event_types_output_next_token(
    input: &crate::output::DescribeEventTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_affected_accounts_for_organization_output_affected_accounts(
    input: crate::output::DescribeAffectedAccountsForOrganizationOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.affected_accounts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_affected_entities_output_entities(
    input: crate::output::DescribeAffectedEntitiesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AffectedEntity>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_affected_entities_for_organization_output_entities(
    input: crate::output::DescribeAffectedEntitiesForOrganizationOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AffectedEntity>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_event_aggregates_output_event_aggregates(
    input: crate::output::DescribeEventAggregatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EventAggregate>> {
    let input = match input.event_aggregates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_events_output_events(
    input: crate::output::DescribeEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Event>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_events_for_organization_output_events(
    input: crate::output::DescribeEventsForOrganizationOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OrganizationEvent>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_event_types_output_event_types(
    input: crate::output::DescribeEventTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EventType>> {
    let input = match input.event_types {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
