// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_disable_health_service_access_for_organization_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationOutput,
    crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ConcurrentModificationException" => crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError::ConcurrentModificationException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ConcurrentModificationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_concurrent_modification_exception::de_concurrent_modification_exception_json_err(_response_body, output).map_err(crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        _ => crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_disable_health_service_access_for_organization_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationOutput,
    crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::disable_health_service_access_for_organization::builders::DisableHealthServiceAccessForOrganizationOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_disable_health_service_access_for_organization_input(
    _input: &crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    Ok(::aws_smithy_types::body::SdkBody::from("{}"))
}
