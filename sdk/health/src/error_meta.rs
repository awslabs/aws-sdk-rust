// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p> <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_EnableHealthServiceAccessForOrganization.html">EnableHealthServiceAccessForOrganization</a> is already in progress. Wait for the action to complete before trying again. To get the current status, use the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeHealthServiceStatusForOrganization.html">DescribeHealthServiceStatusForOrganization</a> operation.</p>
    ConcurrentModificationException(crate::types::error::ConcurrentModificationException),
    /// <p>The specified pagination token (<code>nextToken</code>) is not valid.</p>
    InvalidPaginationToken(crate::types::error::InvalidPaginationToken),
    /// <p>The specified locale is not supported.</p>
    UnsupportedLocale(crate::types::error::UnsupportedLocale),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::InvalidPaginationToken(inner) => inner.fmt(f),
            Error::UnsupportedLocale(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_affected_accounts_for_organization::DescribeAffectedAccountsForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_affected_accounts_for_organization::DescribeAffectedAccountsForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_affected_accounts_for_organization::DescribeAffectedAccountsForOrganizationError> for Error {
    fn from(err: crate::operation::describe_affected_accounts_for_organization::DescribeAffectedAccountsForOrganizationError) -> Self {
        match err {
            crate::operation::describe_affected_accounts_for_organization::DescribeAffectedAccountsForOrganizationError::InvalidPaginationToken(
                inner,
            ) => Error::InvalidPaginationToken(inner),
            crate::operation::describe_affected_accounts_for_organization::DescribeAffectedAccountsForOrganizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_affected_entities::DescribeAffectedEntitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_affected_entities::DescribeAffectedEntitiesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_affected_entities::DescribeAffectedEntitiesError> for Error {
    fn from(err: crate::operation::describe_affected_entities::DescribeAffectedEntitiesError) -> Self {
        match err {
            crate::operation::describe_affected_entities::DescribeAffectedEntitiesError::InvalidPaginationToken(inner) => {
                Error::InvalidPaginationToken(inner)
            }
            crate::operation::describe_affected_entities::DescribeAffectedEntitiesError::UnsupportedLocale(inner) => Error::UnsupportedLocale(inner),
            crate::operation::describe_affected_entities::DescribeAffectedEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_affected_entities_for_organization::DescribeAffectedEntitiesForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_affected_entities_for_organization::DescribeAffectedEntitiesForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_affected_entities_for_organization::DescribeAffectedEntitiesForOrganizationError> for Error {
    fn from(err: crate::operation::describe_affected_entities_for_organization::DescribeAffectedEntitiesForOrganizationError) -> Self {
        match err {
            crate::operation::describe_affected_entities_for_organization::DescribeAffectedEntitiesForOrganizationError::InvalidPaginationToken(
                inner,
            ) => Error::InvalidPaginationToken(inner),
            crate::operation::describe_affected_entities_for_organization::DescribeAffectedEntitiesForOrganizationError::UnsupportedLocale(inner) => {
                Error::UnsupportedLocale(inner)
            }
            crate::operation::describe_affected_entities_for_organization::DescribeAffectedEntitiesForOrganizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_entity_aggregates::DescribeEntityAggregatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_entity_aggregates::DescribeEntityAggregatesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_entity_aggregates::DescribeEntityAggregatesError> for Error {
    fn from(err: crate::operation::describe_entity_aggregates::DescribeEntityAggregatesError) -> Self {
        match err {
            crate::operation::describe_entity_aggregates::DescribeEntityAggregatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_entity_aggregates_for_organization::DescribeEntityAggregatesForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_entity_aggregates_for_organization::DescribeEntityAggregatesForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_entity_aggregates_for_organization::DescribeEntityAggregatesForOrganizationError> for Error {
    fn from(err: crate::operation::describe_entity_aggregates_for_organization::DescribeEntityAggregatesForOrganizationError) -> Self {
        match err {
            crate::operation::describe_entity_aggregates_for_organization::DescribeEntityAggregatesForOrganizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_aggregates::DescribeEventAggregatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_aggregates::DescribeEventAggregatesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_event_aggregates::DescribeEventAggregatesError> for Error {
    fn from(err: crate::operation::describe_event_aggregates::DescribeEventAggregatesError) -> Self {
        match err {
            crate::operation::describe_event_aggregates::DescribeEventAggregatesError::InvalidPaginationToken(inner) => {
                Error::InvalidPaginationToken(inner)
            }
            crate::operation::describe_event_aggregates::DescribeEventAggregatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_details::DescribeEventDetailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_details::DescribeEventDetailsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_event_details::DescribeEventDetailsError> for Error {
    fn from(err: crate::operation::describe_event_details::DescribeEventDetailsError) -> Self {
        match err {
            crate::operation::describe_event_details::DescribeEventDetailsError::UnsupportedLocale(inner) => Error::UnsupportedLocale(inner),
            crate::operation::describe_event_details::DescribeEventDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_event_details_for_organization::DescribeEventDetailsForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_event_details_for_organization::DescribeEventDetailsForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_event_details_for_organization::DescribeEventDetailsForOrganizationError> for Error {
    fn from(err: crate::operation::describe_event_details_for_organization::DescribeEventDetailsForOrganizationError) -> Self {
        match err {
            crate::operation::describe_event_details_for_organization::DescribeEventDetailsForOrganizationError::UnsupportedLocale(inner) => {
                Error::UnsupportedLocale(inner)
            }
            crate::operation::describe_event_details_for_organization::DescribeEventDetailsForOrganizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_events::DescribeEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_events::DescribeEventsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_events::DescribeEventsError> for Error {
    fn from(err: crate::operation::describe_events::DescribeEventsError) -> Self {
        match err {
            crate::operation::describe_events::DescribeEventsError::InvalidPaginationToken(inner) => Error::InvalidPaginationToken(inner),
            crate::operation::describe_events::DescribeEventsError::UnsupportedLocale(inner) => Error::UnsupportedLocale(inner),
            crate::operation::describe_events::DescribeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_events_for_organization::DescribeEventsForOrganizationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_events_for_organization::DescribeEventsForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_events_for_organization::DescribeEventsForOrganizationError> for Error {
    fn from(err: crate::operation::describe_events_for_organization::DescribeEventsForOrganizationError) -> Self {
        match err {
            crate::operation::describe_events_for_organization::DescribeEventsForOrganizationError::InvalidPaginationToken(inner) => {
                Error::InvalidPaginationToken(inner)
            }
            crate::operation::describe_events_for_organization::DescribeEventsForOrganizationError::UnsupportedLocale(inner) => {
                Error::UnsupportedLocale(inner)
            }
            crate::operation::describe_events_for_organization::DescribeEventsForOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_types::DescribeEventTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_types::DescribeEventTypesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_event_types::DescribeEventTypesError> for Error {
    fn from(err: crate::operation::describe_event_types::DescribeEventTypesError) -> Self {
        match err {
            crate::operation::describe_event_types::DescribeEventTypesError::InvalidPaginationToken(inner) => Error::InvalidPaginationToken(inner),
            crate::operation::describe_event_types::DescribeEventTypesError::UnsupportedLocale(inner) => Error::UnsupportedLocale(inner),
            crate::operation::describe_event_types::DescribeEventTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_health_service_status_for_organization::DescribeHealthServiceStatusForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_health_service_status_for_organization::DescribeHealthServiceStatusForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_health_service_status_for_organization::DescribeHealthServiceStatusForOrganizationError> for Error {
    fn from(err: crate::operation::describe_health_service_status_for_organization::DescribeHealthServiceStatusForOrganizationError) -> Self {
        match err {
            crate::operation::describe_health_service_status_for_organization::DescribeHealthServiceStatusForOrganizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError> for Error {
    fn from(err: crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError) -> Self {
        match err {
            crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::disable_health_service_access_for_organization::DisableHealthServiceAccessForOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_health_service_access_for_organization::EnableHealthServiceAccessForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_health_service_access_for_organization::EnableHealthServiceAccessForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::enable_health_service_access_for_organization::EnableHealthServiceAccessForOrganizationError> for Error {
    fn from(err: crate::operation::enable_health_service_access_for_organization::EnableHealthServiceAccessForOrganizationError) -> Self {
        match err {
            crate::operation::enable_health_service_access_for_organization::EnableHealthServiceAccessForOrganizationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::enable_health_service_access_for_organization::EnableHealthServiceAccessForOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ConcurrentModificationException(inner) => inner.source(),
            Error::InvalidPaginationToken(inner) => inner.source(),
            Error::UnsupportedLocale(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::InvalidPaginationToken(e) => e.request_id(),
            Self::UnsupportedLocale(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
