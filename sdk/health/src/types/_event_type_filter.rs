// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The values to use to filter results from the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEventTypes.html">DescribeEventTypes</a> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventTypeFilter {
    /// <p>A list of event type codes.</p>
    #[doc(hidden)]
    pub event_type_codes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon Web Services services associated with the event. For example, <code>EC2</code>, <code>RDS</code>.</p>
    #[doc(hidden)]
    pub services: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of event type category codes. Possible values are <code>issue</code>, <code>accountNotification</code>, or <code>scheduledChange</code>. Currently, the <code>investigation</code> value isn't supported at this time.</p>
    #[doc(hidden)]
    pub event_type_categories: std::option::Option<std::vec::Vec<crate::types::EventTypeCategory>>,
}
impl EventTypeFilter {
    /// <p>A list of event type codes.</p>
    pub fn event_type_codes(&self) -> std::option::Option<&[std::string::String]> {
        self.event_type_codes.as_deref()
    }
    /// <p>The Amazon Web Services services associated with the event. For example, <code>EC2</code>, <code>RDS</code>.</p>
    pub fn services(&self) -> std::option::Option<&[std::string::String]> {
        self.services.as_deref()
    }
    /// <p>A list of event type category codes. Possible values are <code>issue</code>, <code>accountNotification</code>, or <code>scheduledChange</code>. Currently, the <code>investigation</code> value isn't supported at this time.</p>
    pub fn event_type_categories(&self) -> std::option::Option<&[crate::types::EventTypeCategory]> {
        self.event_type_categories.as_deref()
    }
}
impl EventTypeFilter {
    /// Creates a new builder-style object to manufacture [`EventTypeFilter`](crate::types::EventTypeFilter).
    pub fn builder() -> crate::types::builders::EventTypeFilterBuilder {
        crate::types::builders::EventTypeFilterBuilder::default()
    }
}

/// A builder for [`EventTypeFilter`](crate::types::EventTypeFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventTypeFilterBuilder {
    pub(crate) event_type_codes: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) services: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) event_type_categories:
        std::option::Option<std::vec::Vec<crate::types::EventTypeCategory>>,
}
impl EventTypeFilterBuilder {
    /// Appends an item to `event_type_codes`.
    ///
    /// To override the contents of this collection use [`set_event_type_codes`](Self::set_event_type_codes).
    ///
    /// <p>A list of event type codes.</p>
    pub fn event_type_codes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.event_type_codes.unwrap_or_default();
        v.push(input.into());
        self.event_type_codes = Some(v);
        self
    }
    /// <p>A list of event type codes.</p>
    pub fn set_event_type_codes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.event_type_codes = input;
        self
    }
    /// Appends an item to `services`.
    ///
    /// To override the contents of this collection use [`set_services`](Self::set_services).
    ///
    /// <p>The Amazon Web Services services associated with the event. For example, <code>EC2</code>, <code>RDS</code>.</p>
    pub fn services(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.services.unwrap_or_default();
        v.push(input.into());
        self.services = Some(v);
        self
    }
    /// <p>The Amazon Web Services services associated with the event. For example, <code>EC2</code>, <code>RDS</code>.</p>
    pub fn set_services(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.services = input;
        self
    }
    /// Appends an item to `event_type_categories`.
    ///
    /// To override the contents of this collection use [`set_event_type_categories`](Self::set_event_type_categories).
    ///
    /// <p>A list of event type category codes. Possible values are <code>issue</code>, <code>accountNotification</code>, or <code>scheduledChange</code>. Currently, the <code>investigation</code> value isn't supported at this time.</p>
    pub fn event_type_categories(mut self, input: crate::types::EventTypeCategory) -> Self {
        let mut v = self.event_type_categories.unwrap_or_default();
        v.push(input);
        self.event_type_categories = Some(v);
        self
    }
    /// <p>A list of event type category codes. Possible values are <code>issue</code>, <code>accountNotification</code>, or <code>scheduledChange</code>. Currently, the <code>investigation</code> value isn't supported at this time.</p>
    pub fn set_event_type_categories(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EventTypeCategory>>,
    ) -> Self {
        self.event_type_categories = input;
        self
    }
    /// Consumes the builder and constructs a [`EventTypeFilter`](crate::types::EventTypeFilter).
    pub fn build(self) -> crate::types::EventTypeFilter {
        crate::types::EventTypeFilter {
            event_type_codes: self.event_type_codes,
            services: self.services,
            event_type_categories: self.event_type_categories,
        }
    }
}
