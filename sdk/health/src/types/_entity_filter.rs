// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The values to use to filter results from the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeAffectedEntities.html">DescribeAffectedEntities</a> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EntityFilter {
    /// <p>A list of event ARNs (unique identifiers). For example: <code>"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456", "arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101"</code> </p>
    #[doc(hidden)]
    pub event_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of entity ARNs (unique identifiers).</p>
    #[doc(hidden)]
    pub entity_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of IDs for affected entities.</p>
    #[doc(hidden)]
    pub entity_values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of the most recent dates and times that the entity was updated.</p>
    #[doc(hidden)]
    pub last_updated_times: std::option::Option<std::vec::Vec<crate::types::DateTimeRange>>,
    /// <p>A map of entity tags attached to the affected entity.</p> <note>
    /// <p>Currently, the <code>tags</code> property isn't supported.</p>
    /// </note>
    #[doc(hidden)]
    pub tags: std::option::Option<
        std::vec::Vec<std::collections::HashMap<std::string::String, std::string::String>>,
    >,
    /// <p>A list of entity status codes (<code>IMPAIRED</code>, <code>UNIMPAIRED</code>, or <code>UNKNOWN</code>).</p>
    #[doc(hidden)]
    pub status_codes: std::option::Option<std::vec::Vec<crate::types::EntityStatusCode>>,
}
impl EntityFilter {
    /// <p>A list of event ARNs (unique identifiers). For example: <code>"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456", "arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101"</code> </p>
    pub fn event_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.event_arns.as_deref()
    }
    /// <p>A list of entity ARNs (unique identifiers).</p>
    pub fn entity_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.entity_arns.as_deref()
    }
    /// <p>A list of IDs for affected entities.</p>
    pub fn entity_values(&self) -> std::option::Option<&[std::string::String]> {
        self.entity_values.as_deref()
    }
    /// <p>A list of the most recent dates and times that the entity was updated.</p>
    pub fn last_updated_times(&self) -> std::option::Option<&[crate::types::DateTimeRange]> {
        self.last_updated_times.as_deref()
    }
    /// <p>A map of entity tags attached to the affected entity.</p> <note>
    /// <p>Currently, the <code>tags</code> property isn't supported.</p>
    /// </note>
    pub fn tags(
        &self,
    ) -> std::option::Option<&[std::collections::HashMap<std::string::String, std::string::String>]>
    {
        self.tags.as_deref()
    }
    /// <p>A list of entity status codes (<code>IMPAIRED</code>, <code>UNIMPAIRED</code>, or <code>UNKNOWN</code>).</p>
    pub fn status_codes(&self) -> std::option::Option<&[crate::types::EntityStatusCode]> {
        self.status_codes.as_deref()
    }
}
impl EntityFilter {
    /// Creates a new builder-style object to manufacture [`EntityFilter`](crate::types::EntityFilter).
    pub fn builder() -> crate::types::builders::EntityFilterBuilder {
        crate::types::builders::EntityFilterBuilder::default()
    }
}

/// A builder for [`EntityFilter`](crate::types::EntityFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntityFilterBuilder {
    pub(crate) event_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) entity_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) entity_values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) last_updated_times: std::option::Option<std::vec::Vec<crate::types::DateTimeRange>>,
    pub(crate) tags: std::option::Option<
        std::vec::Vec<std::collections::HashMap<std::string::String, std::string::String>>,
    >,
    pub(crate) status_codes: std::option::Option<std::vec::Vec<crate::types::EntityStatusCode>>,
}
impl EntityFilterBuilder {
    /// Appends an item to `event_arns`.
    ///
    /// To override the contents of this collection use [`set_event_arns`](Self::set_event_arns).
    ///
    /// <p>A list of event ARNs (unique identifiers). For example: <code>"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456", "arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101"</code> </p>
    pub fn event_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.event_arns.unwrap_or_default();
        v.push(input.into());
        self.event_arns = Some(v);
        self
    }
    /// <p>A list of event ARNs (unique identifiers). For example: <code>"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456", "arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101"</code> </p>
    pub fn set_event_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.event_arns = input;
        self
    }
    /// Appends an item to `entity_arns`.
    ///
    /// To override the contents of this collection use [`set_entity_arns`](Self::set_entity_arns).
    ///
    /// <p>A list of entity ARNs (unique identifiers).</p>
    pub fn entity_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.entity_arns.unwrap_or_default();
        v.push(input.into());
        self.entity_arns = Some(v);
        self
    }
    /// <p>A list of entity ARNs (unique identifiers).</p>
    pub fn set_entity_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.entity_arns = input;
        self
    }
    /// Appends an item to `entity_values`.
    ///
    /// To override the contents of this collection use [`set_entity_values`](Self::set_entity_values).
    ///
    /// <p>A list of IDs for affected entities.</p>
    pub fn entity_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.entity_values.unwrap_or_default();
        v.push(input.into());
        self.entity_values = Some(v);
        self
    }
    /// <p>A list of IDs for affected entities.</p>
    pub fn set_entity_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.entity_values = input;
        self
    }
    /// Appends an item to `last_updated_times`.
    ///
    /// To override the contents of this collection use [`set_last_updated_times`](Self::set_last_updated_times).
    ///
    /// <p>A list of the most recent dates and times that the entity was updated.</p>
    pub fn last_updated_times(mut self, input: crate::types::DateTimeRange) -> Self {
        let mut v = self.last_updated_times.unwrap_or_default();
        v.push(input);
        self.last_updated_times = Some(v);
        self
    }
    /// <p>A list of the most recent dates and times that the entity was updated.</p>
    pub fn set_last_updated_times(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DateTimeRange>>,
    ) -> Self {
        self.last_updated_times = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of entity tags attached to the affected entity.</p> <note>
    /// <p>Currently, the <code>tags</code> property isn't supported.</p>
    /// </note>
    pub fn tags(
        mut self,
        input: std::collections::HashMap<std::string::String, std::string::String>,
    ) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A map of entity tags attached to the affected entity.</p> <note>
    /// <p>Currently, the <code>tags</code> property isn't supported.</p>
    /// </note>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::vec::Vec<std::collections::HashMap<std::string::String, std::string::String>>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Appends an item to `status_codes`.
    ///
    /// To override the contents of this collection use [`set_status_codes`](Self::set_status_codes).
    ///
    /// <p>A list of entity status codes (<code>IMPAIRED</code>, <code>UNIMPAIRED</code>, or <code>UNKNOWN</code>).</p>
    pub fn status_codes(mut self, input: crate::types::EntityStatusCode) -> Self {
        let mut v = self.status_codes.unwrap_or_default();
        v.push(input);
        self.status_codes = Some(v);
        self
    }
    /// <p>A list of entity status codes (<code>IMPAIRED</code>, <code>UNIMPAIRED</code>, or <code>UNKNOWN</code>).</p>
    pub fn set_status_codes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EntityStatusCode>>,
    ) -> Self {
        self.status_codes = input;
        self
    }
    /// Consumes the builder and constructs a [`EntityFilter`](crate::types::EntityFilter).
    pub fn build(self) -> crate::types::EntityFilter {
        crate::types::EntityFilter {
            event_arns: self.event_arns,
            entity_arns: self.entity_arns,
            entity_values: self.entity_values,
            last_updated_times: self.last_updated_times,
            tags: self.tags,
            status_codes: self.status_codes,
        }
    }
}
