// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about an event, returned by the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEventsForOrganization.html">DescribeEventsForOrganization</a> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OrganizationEvent {
    /// <p>The unique identifier for the event. The event ARN has the <code>arn:aws:health:<i>event-region</i>::event/<i>SERVICE</i>/<i>EVENT_TYPE_CODE</i>/<i>EVENT_TYPE_PLUS_ID</i> </code> format.</p>
    /// <p>For example, an event ARN might look like the following:</p>
    /// <p> <code>arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-DEF456</code> </p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services service that is affected by the event, such as EC2 and RDS.</p>
    #[doc(hidden)]
    pub service: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the event type. The format is <code>AWS_SERVICE_DESCRIPTION</code>. For example, <code>AWS_EC2_SYSTEM_MAINTENANCE_EVENT</code>.</p>
    #[doc(hidden)]
    pub event_type_code: std::option::Option<std::string::String>,
    /// <p>A list of event type category codes. Possible values are <code>issue</code>, <code>accountNotification</code>, or <code>scheduledChange</code>. Currently, the <code>investigation</code> value isn't supported at this time.</p>
    #[doc(hidden)]
    pub event_type_category: std::option::Option<crate::types::EventTypeCategory>,
    /// <p>This parameter specifies if the Health event is a public Amazon Web Services service event or an account-specific event.</p>
    /// <ul>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>PUBLIC</code>, then the <code>affectedAccounts</code> value is always empty.</p> </li>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>ACCOUNT_SPECIFIC</code>, then the <code>affectedAccounts</code> value lists the affected Amazon Web Services accounts in your organization. For example, if an event affects a service such as Amazon Elastic Compute Cloud and you have Amazon Web Services accounts that use that service, those account IDs appear in the response.</p> </li>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>NONE</code>, then the <code>eventArn</code> that you specified in the request is invalid or doesn't exist.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub event_scope_code: std::option::Option<crate::types::EventScopeCode>,
    /// <p>The Amazon Web Services Region name of the event.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The date and time that the event began.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the event ended.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The most recent date and time that the event was updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The most recent status of the event. Possible values are <code>open</code>, <code>closed</code>, and <code>upcoming</code>.</p>
    #[doc(hidden)]
    pub status_code: std::option::Option<crate::types::EventStatusCode>,
}
impl OrganizationEvent {
    /// <p>The unique identifier for the event. The event ARN has the <code>arn:aws:health:<i>event-region</i>::event/<i>SERVICE</i>/<i>EVENT_TYPE_CODE</i>/<i>EVENT_TYPE_PLUS_ID</i> </code> format.</p>
    /// <p>For example, an event ARN might look like the following:</p>
    /// <p> <code>arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-DEF456</code> </p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Web Services service that is affected by the event, such as EC2 and RDS.</p>
    pub fn service(&self) -> std::option::Option<&str> {
        self.service.as_deref()
    }
    /// <p>The unique identifier for the event type. The format is <code>AWS_SERVICE_DESCRIPTION</code>. For example, <code>AWS_EC2_SYSTEM_MAINTENANCE_EVENT</code>.</p>
    pub fn event_type_code(&self) -> std::option::Option<&str> {
        self.event_type_code.as_deref()
    }
    /// <p>A list of event type category codes. Possible values are <code>issue</code>, <code>accountNotification</code>, or <code>scheduledChange</code>. Currently, the <code>investigation</code> value isn't supported at this time.</p>
    pub fn event_type_category(&self) -> std::option::Option<&crate::types::EventTypeCategory> {
        self.event_type_category.as_ref()
    }
    /// <p>This parameter specifies if the Health event is a public Amazon Web Services service event or an account-specific event.</p>
    /// <ul>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>PUBLIC</code>, then the <code>affectedAccounts</code> value is always empty.</p> </li>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>ACCOUNT_SPECIFIC</code>, then the <code>affectedAccounts</code> value lists the affected Amazon Web Services accounts in your organization. For example, if an event affects a service such as Amazon Elastic Compute Cloud and you have Amazon Web Services accounts that use that service, those account IDs appear in the response.</p> </li>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>NONE</code>, then the <code>eventArn</code> that you specified in the request is invalid or doesn't exist.</p> </li>
    /// </ul>
    pub fn event_scope_code(&self) -> std::option::Option<&crate::types::EventScopeCode> {
        self.event_scope_code.as_ref()
    }
    /// <p>The Amazon Web Services Region name of the event.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The date and time that the event began.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time that the event ended.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The most recent date and time that the event was updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The most recent status of the event. Possible values are <code>open</code>, <code>closed</code>, and <code>upcoming</code>.</p>
    pub fn status_code(&self) -> std::option::Option<&crate::types::EventStatusCode> {
        self.status_code.as_ref()
    }
}
impl OrganizationEvent {
    /// Creates a new builder-style object to manufacture [`OrganizationEvent`](crate::types::OrganizationEvent).
    pub fn builder() -> crate::types::builders::OrganizationEventBuilder {
        crate::types::builders::OrganizationEventBuilder::default()
    }
}

/// A builder for [`OrganizationEvent`](crate::types::OrganizationEvent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OrganizationEventBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) service: std::option::Option<std::string::String>,
    pub(crate) event_type_code: std::option::Option<std::string::String>,
    pub(crate) event_type_category: std::option::Option<crate::types::EventTypeCategory>,
    pub(crate) event_scope_code: std::option::Option<crate::types::EventScopeCode>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status_code: std::option::Option<crate::types::EventStatusCode>,
}
impl OrganizationEventBuilder {
    /// <p>The unique identifier for the event. The event ARN has the <code>arn:aws:health:<i>event-region</i>::event/<i>SERVICE</i>/<i>EVENT_TYPE_CODE</i>/<i>EVENT_TYPE_PLUS_ID</i> </code> format.</p>
    /// <p>For example, an event ARN might look like the following:</p>
    /// <p> <code>arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-DEF456</code> </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The unique identifier for the event. The event ARN has the <code>arn:aws:health:<i>event-region</i>::event/<i>SERVICE</i>/<i>EVENT_TYPE_CODE</i>/<i>EVENT_TYPE_PLUS_ID</i> </code> format.</p>
    /// <p>For example, an event ARN might look like the following:</p>
    /// <p> <code>arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-DEF456</code> </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Web Services service that is affected by the event, such as EC2 and RDS.</p>
    pub fn service(mut self, input: impl Into<std::string::String>) -> Self {
        self.service = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services service that is affected by the event, such as EC2 and RDS.</p>
    pub fn set_service(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service = input;
        self
    }
    /// <p>The unique identifier for the event type. The format is <code>AWS_SERVICE_DESCRIPTION</code>. For example, <code>AWS_EC2_SYSTEM_MAINTENANCE_EVENT</code>.</p>
    pub fn event_type_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_type_code = Some(input.into());
        self
    }
    /// <p>The unique identifier for the event type. The format is <code>AWS_SERVICE_DESCRIPTION</code>. For example, <code>AWS_EC2_SYSTEM_MAINTENANCE_EVENT</code>.</p>
    pub fn set_event_type_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_type_code = input;
        self
    }
    /// <p>A list of event type category codes. Possible values are <code>issue</code>, <code>accountNotification</code>, or <code>scheduledChange</code>. Currently, the <code>investigation</code> value isn't supported at this time.</p>
    pub fn event_type_category(mut self, input: crate::types::EventTypeCategory) -> Self {
        self.event_type_category = Some(input);
        self
    }
    /// <p>A list of event type category codes. Possible values are <code>issue</code>, <code>accountNotification</code>, or <code>scheduledChange</code>. Currently, the <code>investigation</code> value isn't supported at this time.</p>
    pub fn set_event_type_category(
        mut self,
        input: std::option::Option<crate::types::EventTypeCategory>,
    ) -> Self {
        self.event_type_category = input;
        self
    }
    /// <p>This parameter specifies if the Health event is a public Amazon Web Services service event or an account-specific event.</p>
    /// <ul>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>PUBLIC</code>, then the <code>affectedAccounts</code> value is always empty.</p> </li>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>ACCOUNT_SPECIFIC</code>, then the <code>affectedAccounts</code> value lists the affected Amazon Web Services accounts in your organization. For example, if an event affects a service such as Amazon Elastic Compute Cloud and you have Amazon Web Services accounts that use that service, those account IDs appear in the response.</p> </li>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>NONE</code>, then the <code>eventArn</code> that you specified in the request is invalid or doesn't exist.</p> </li>
    /// </ul>
    pub fn event_scope_code(mut self, input: crate::types::EventScopeCode) -> Self {
        self.event_scope_code = Some(input);
        self
    }
    /// <p>This parameter specifies if the Health event is a public Amazon Web Services service event or an account-specific event.</p>
    /// <ul>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>PUBLIC</code>, then the <code>affectedAccounts</code> value is always empty.</p> </li>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>ACCOUNT_SPECIFIC</code>, then the <code>affectedAccounts</code> value lists the affected Amazon Web Services accounts in your organization. For example, if an event affects a service such as Amazon Elastic Compute Cloud and you have Amazon Web Services accounts that use that service, those account IDs appear in the response.</p> </li>
    /// <li> <p>If the <code>eventScopeCode</code> value is <code>NONE</code>, then the <code>eventArn</code> that you specified in the request is invalid or doesn't exist.</p> </li>
    /// </ul>
    pub fn set_event_scope_code(
        mut self,
        input: std::option::Option<crate::types::EventScopeCode>,
    ) -> Self {
        self.event_scope_code = input;
        self
    }
    /// <p>The Amazon Web Services Region name of the event.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region name of the event.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The date and time that the event began.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The date and time that the event began.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time that the event ended.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The date and time that the event ended.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The most recent date and time that the event was updated.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>The most recent date and time that the event was updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The most recent status of the event. Possible values are <code>open</code>, <code>closed</code>, and <code>upcoming</code>.</p>
    pub fn status_code(mut self, input: crate::types::EventStatusCode) -> Self {
        self.status_code = Some(input);
        self
    }
    /// <p>The most recent status of the event. Possible values are <code>open</code>, <code>closed</code>, and <code>upcoming</code>.</p>
    pub fn set_status_code(
        mut self,
        input: std::option::Option<crate::types::EventStatusCode>,
    ) -> Self {
        self.status_code = input;
        self
    }
    /// Consumes the builder and constructs a [`OrganizationEvent`](crate::types::OrganizationEvent).
    pub fn build(self) -> crate::types::OrganizationEvent {
        crate::types::OrganizationEvent {
            arn: self.arn,
            service: self.service,
            event_type_code: self.event_type_code,
            event_type_category: self.event_type_category,
            event_scope_code: self.event_scope_code,
            region: self.region,
            start_time: self.start_time,
            end_time: self.end_time,
            last_updated_time: self.last_updated_time,
            status_code: self.status_code,
        }
    }
}
