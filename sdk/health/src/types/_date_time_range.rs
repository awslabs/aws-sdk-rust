// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A range of dates and times that is used by the <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_EventFilter.html">EventFilter</a> and <a href="https://docs.aws.amazon.com/health/latest/APIReference/API_EntityFilter.html">EntityFilter</a> objects. If <code>from</code> is set and <code>to</code> is set: match items where the timestamp (<code>startTime</code>, <code>endTime</code>, or <code>lastUpdatedTime</code>) is between <code>from</code> and <code>to</code> inclusive. If <code>from</code> is set and <code>to</code> is not set: match items where the timestamp value is equal to or after <code>from</code>. If <code>from</code> is not set and <code>to</code> is set: match items where the timestamp value is equal to or before <code>to</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DateTimeRange {
    /// <p>The starting date and time of a time range.</p>
    #[doc(hidden)]
    pub from: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ending date and time of a time range.</p>
    #[doc(hidden)]
    pub to: std::option::Option<aws_smithy_types::DateTime>,
}
impl DateTimeRange {
    /// <p>The starting date and time of a time range.</p>
    pub fn from(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.from.as_ref()
    }
    /// <p>The ending date and time of a time range.</p>
    pub fn to(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.to.as_ref()
    }
}
impl DateTimeRange {
    /// Creates a new builder-style object to manufacture [`DateTimeRange`](crate::types::DateTimeRange).
    pub fn builder() -> crate::types::builders::DateTimeRangeBuilder {
        crate::types::builders::DateTimeRangeBuilder::default()
    }
}

/// A builder for [`DateTimeRange`](crate::types::DateTimeRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DateTimeRangeBuilder {
    pub(crate) from: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) to: std::option::Option<aws_smithy_types::DateTime>,
}
impl DateTimeRangeBuilder {
    /// <p>The starting date and time of a time range.</p>
    pub fn from(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.from = Some(input);
        self
    }
    /// <p>The starting date and time of a time range.</p>
    pub fn set_from(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.from = input;
        self
    }
    /// <p>The ending date and time of a time range.</p>
    pub fn to(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.to = Some(input);
        self
    }
    /// <p>The ending date and time of a time range.</p>
    pub fn set_to(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.to = input;
        self
    }
    /// Consumes the builder and constructs a [`DateTimeRange`](crate::types::DateTimeRange).
    pub fn build(self) -> crate::types::DateTimeRange {
        crate::types::DateTimeRange {
            from: self.from,
            to: self.to,
        }
    }
}
