// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetEngineStatus`](crate::operation::get_engine_status::builders::GetEngineStatusFluentBuilder) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::operation::get_engine_status::builders::GetEngineStatusFluentBuilder::send) it.
    /// - On success, responds with [`GetEngineStatusOutput`](crate::operation::get_engine_status::GetEngineStatusOutput) with field(s):
    ///   - [`status(Option<String>)`](crate::operation::get_engine_status::GetEngineStatusOutput::status): <p>Set to <code>healthy</code> if the instance is not experiencing problems. If the instance is recovering from a crash or from being rebooted and there are active transactions running from the latest server shutdown, status is set to <code>recovery</code>.</p>
    ///   - [`start_time(Option<String>)`](crate::operation::get_engine_status::GetEngineStatusOutput::start_time): <p>Set to the UTC time at which the current server process started.</p>
    ///   - [`db_engine_version(Option<String>)`](crate::operation::get_engine_status::GetEngineStatusOutput::db_engine_version): <p>Set to the Neptune engine version running on your DB cluster. If this engine version has been manually patched since it was released, the version number is prefixed by <code>Patch-</code>.</p>
    ///   - [`role(Option<String>)`](crate::operation::get_engine_status::GetEngineStatusOutput::role): <p>Set to <code>reader</code> if the instance is a read-replica, or to <code>writer</code> if the instance is the primary instance.</p>
    ///   - [`dfe_query_engine(Option<String>)`](crate::operation::get_engine_status::GetEngineStatusOutput::dfe_query_engine): <p>Set to <code>enabled</code> if the DFE engine is fully enabled, or to <code>viaQueryHint</code> (the default) if the DFE engine is only used with queries that have the <code>useDFE</code> query hint set to <code>true</code>.</p>
    ///   - [`gremlin(Option<QueryLanguageVersion>)`](crate::operation::get_engine_status::GetEngineStatusOutput::gremlin): <p>Contains information about the Gremlin query language available on your cluster. Specifically, it contains a version field that specifies the current TinkerPop version being used by the engine.</p>
    ///   - [`sparql(Option<QueryLanguageVersion>)`](crate::operation::get_engine_status::GetEngineStatusOutput::sparql): <p>Contains information about the SPARQL query language available on your cluster. Specifically, it contains a version field that specifies the current SPARQL version being used by the engine.</p>
    ///   - [`opencypher(Option<QueryLanguageVersion>)`](crate::operation::get_engine_status::GetEngineStatusOutput::opencypher): <p>Contains information about the openCypher query language available on your cluster. Specifically, it contains a version field that specifies the current operCypher version being used by the engine.</p>
    ///   - [`lab_mode(Option<HashMap::<String, String>>)`](crate::operation::get_engine_status::GetEngineStatusOutput::lab_mode): <p>Contains Lab Mode settings being used by the engine.</p>
    ///   - [`rolling_back_trx_count(Option<i32>)`](crate::operation::get_engine_status::GetEngineStatusOutput::rolling_back_trx_count): <p>If there are transactions being rolled back, this field is set to the number of such transactions. If there are none, the field doesn't appear at all.</p>
    ///   - [`rolling_back_trx_earliest_start_time(Option<String>)`](crate::operation::get_engine_status::GetEngineStatusOutput::rolling_back_trx_earliest_start_time): <p>Set to the start time of the earliest transaction being rolled back. If no transactions are being rolled back, the field doesn't appear at all.</p>
    ///   - [`features(Option<HashMap::<String, Document>>)`](crate::operation::get_engine_status::GetEngineStatusOutput::features): <p>Contains status information about the features enabled on your DB cluster.</p>
    ///   - [`settings(Option<HashMap::<String, String>>)`](crate::operation::get_engine_status::GetEngineStatusOutput::settings): <p>Contains information about the current settings on your DB cluster. For example, contains the current cluster query timeout setting (<code>clusterQueryTimeoutInMs</code>).</p>
    /// - On failure, responds with [`SdkError<GetEngineStatusError>`](crate::operation::get_engine_status::GetEngineStatusError)
    pub fn get_engine_status(&self) -> crate::operation::get_engine_status::builders::GetEngineStatusFluentBuilder {
        crate::operation::get_engine_status::builders::GetEngineStatusFluentBuilder::new(self.handle.clone())
    }
}
