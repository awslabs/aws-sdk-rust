// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetPropertygraphStream`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i64)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::limit) / [`set_limit(Option<i64>)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::set_limit):<br>required: **false**<br><p>Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the <code>limit</code> parameter. The response does include a threshold-breaching record if the 10 MB limit was reached.</p>  <p>The range for <code>limit</code> is 1 to 100,000, with a default of 10.</p><br>
    ///   - [`iterator_type(IteratorType)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::iterator_type) / [`set_iterator_type(Option<IteratorType>)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::set_iterator_type):<br>required: **false**<br><p>Can be one of:</p>  <ul>   <li> <p> <code>AT_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start from the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>   <li> <p> <code>AFTER_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start right after the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>   <li> <p> <code>TRIM_HORIZON</code> &nbsp; – &nbsp; Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.</p> </li>   <li> <p> <code>LATEST</code> &nbsp; – &nbsp; Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.</p> </li>  </ul><br>
    ///   - [`commit_num(i64)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::commit_num) / [`set_commit_num(Option<i64>)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::set_commit_num):<br>required: **false**<br><p>The commit number of the starting record to read from the change-log stream. This parameter is required when <code>iteratorType</code> is<code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>, and ignored when <code>iteratorType</code> is <code>TRIM_HORIZON</code> or <code>LATEST</code>.</p><br>
    ///   - [`op_num(i64)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::op_num) / [`set_op_num(Option<i64>)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::set_op_num):<br>required: **false**<br><p>The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is <code>1</code>.</p><br>
    ///   - [`encoding(Encoding)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::encoding) / [`set_encoding(Option<Encoding>)`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::set_encoding):<br>required: **false**<br><p>If set to TRUE, Neptune compresses the response using gzip encoding.</p><br>
    /// - On success, responds with [`GetPropertygraphStreamOutput`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput) with field(s):
    ///   - [`last_event_id(HashMap::<String, String>)`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput::last_event_id): <p>Sequence identifier of the last change in the stream response.</p>  <p>An event ID is composed of two fields: a <code>commitNum</code>, which identifies a transaction that changed the graph, and an <code>opNum</code>, which identifies a specific operation within that transaction:</p>
    ///   - [`last_trx_timestamp_in_millis(i64)`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput::last_trx_timestamp_in_millis): <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    ///   - [`format(String)`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput::format): <p>Serialization format for the change records being returned. Currently, the only supported value is <code>PG_JSON</code>.</p>
    ///   - [`records(Vec::<PropertygraphRecord>)`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput::records): <p>An array of serialized change-log stream records included in the response.</p>
    ///   - [`total_records(i32)`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput::total_records): <p>The total number of records in the response.</p>
    /// - On failure, responds with [`SdkError<GetPropertygraphStreamError>`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamError)
    pub fn get_propertygraph_stream(&self) -> crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder {
        crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamFluentBuilder::new(self.handle.clone())
    }
}
