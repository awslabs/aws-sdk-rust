// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartMLModelTransformJob`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_id):<br>required: **false**<br><p>A unique identifier for the new job. The default is an autogenerated UUID.</p><br>
    ///   - [`data_processing_job_id(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::data_processing_job_id) / [`set_data_processing_job_id(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_data_processing_job_id):<br>required: **false**<br><p>The job ID of a completed data-processing job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p><br>
    ///   - [`ml_model_training_job_id(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::ml_model_training_job_id) / [`set_ml_model_training_job_id(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_ml_model_training_job_id):<br>required: **false**<br><p>The job ID of a completed model-training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p><br>
    ///   - [`training_job_name(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::training_job_name) / [`set_training_job_name(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_training_job_name):<br>required: **false**<br><p>The name of a completed SageMaker training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p><br>
    ///   - [`model_transform_output_s3_location(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::model_transform_output_s3_location) / [`set_model_transform_output_s3_location(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_model_transform_output_s3_location):<br>required: **true**<br><p>The location in Amazon S3 where the model artifacts are to be stored.</p><br>
    ///   - [`sagemaker_iam_role_arn(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::sagemaker_iam_role_arn) / [`set_sagemaker_iam_role_arn(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_sagemaker_iam_role_arn):<br>required: **false**<br><p>The ARN of an IAM role for SageMaker execution. This must be listed in your DB cluster parameter group or an error will occur.</p><br>
    ///   - [`neptune_iam_role_arn(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::neptune_iam_role_arn) / [`set_neptune_iam_role_arn(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_neptune_iam_role_arn):<br>required: **false**<br><p>The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.</p><br>
    ///   - [`custom_model_transform_parameters(CustomModelTransformParameters)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::custom_model_transform_parameters) / [`set_custom_model_transform_parameters(Option<CustomModelTransformParameters>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_custom_model_transform_parameters):<br>required: **false**<br><p>Configuration information for a model transform using a custom model. The <code>customModelTransformParameters</code> object contains the following fields, which must have values compatible with the saved model parameters from the training job:</p><br>
    ///   - [`base_processing_instance_type(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::base_processing_instance_type) / [`set_base_processing_instance_type(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_base_processing_instance_type):<br>required: **false**<br><p>The type of ML instance used in preparing and managing training of ML models. This is an ML compute instance chosen based on memory requirements for processing the training data and model.</p><br>
    ///   - [`base_processing_instance_volume_size_in_gb(i32)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::base_processing_instance_volume_size_in_gb) / [`set_base_processing_instance_volume_size_in_gb(Option<i32>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_base_processing_instance_volume_size_in_gb):<br>required: **false**<br><p>The disk volume size of the training instance in gigabytes. The default is 0. Both input data and the output model are stored on disk, so the volume size must be large enough to hold both data sets. If not specified or 0, Neptune ML selects a disk volume size based on the recommendation generated in the data processing step.</p><br>
    ///   - [`subnets(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::subnets) / [`set_subnets(Option<Vec::<String>>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_subnets):<br>required: **false**<br><p>The IDs of the subnets in the Neptune VPC. The default is None.</p><br>
    ///   - [`security_group_ids(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::security_group_ids) / [`set_security_group_ids(Option<Vec::<String>>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_security_group_ids):<br>required: **false**<br><p>The VPC security group IDs. The default is None.</p><br>
    ///   - [`volume_encryption_kms_key(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::volume_encryption_kms_key) / [`set_volume_encryption_kms_key(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_volume_encryption_kms_key):<br>required: **false**<br><p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.</p><br>
    ///   - [`s3_output_encryption_kms_key(impl Into<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::s3_output_encryption_kms_key) / [`set_s3_output_encryption_kms_key(Option<String>)`](crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::set_s3_output_encryption_kms_key):<br>required: **false**<br><p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt the output of the processing job. The default is none.</p><br>
    /// - On success, responds with [`StartMlModelTransformJobOutput`](crate::operation::start_ml_model_transform_job::StartMlModelTransformJobOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::start_ml_model_transform_job::StartMlModelTransformJobOutput::id): <p>The unique ID of the new model transform job.</p>
    ///   - [`arn(Option<String>)`](crate::operation::start_ml_model_transform_job::StartMlModelTransformJobOutput::arn): <p>The ARN of the model transform job.</p>
    ///   - [`creation_time_in_millis(Option<i64>)`](crate::operation::start_ml_model_transform_job::StartMlModelTransformJobOutput::creation_time_in_millis): <p>The creation time of the model transform job, in milliseconds.</p>
    /// - On failure, responds with [`SdkError<StartMLModelTransformJobError>`](crate::operation::start_ml_model_transform_job::StartMLModelTransformJobError)
    pub fn start_ml_model_transform_job(&self) -> crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder {
        crate::operation::start_ml_model_transform_job::builders::StartMLModelTransformJobFluentBuilder::new(self.handle.clone())
    }
}
