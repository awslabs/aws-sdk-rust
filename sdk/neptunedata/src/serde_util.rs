// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn bad_request_exception_correct_errors(
    mut builder: crate::types::error::builders::BadRequestExceptionBuilder,
) -> crate::types::error::builders::BadRequestExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn client_timeout_exception_correct_errors(
    mut builder: crate::types::error::builders::ClientTimeoutExceptionBuilder,
) -> crate::types::error::builders::ClientTimeoutExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn concurrent_modification_exception_correct_errors(
    mut builder: crate::types::error::builders::ConcurrentModificationExceptionBuilder,
) -> crate::types::error::builders::ConcurrentModificationExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn constraint_violation_exception_correct_errors(
    mut builder: crate::types::error::builders::ConstraintViolationExceptionBuilder,
) -> crate::types::error::builders::ConstraintViolationExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn failure_by_query_exception_correct_errors(
    mut builder: crate::types::error::builders::FailureByQueryExceptionBuilder,
) -> crate::types::error::builders::FailureByQueryExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn illegal_argument_exception_correct_errors(
    mut builder: crate::types::error::builders::IllegalArgumentExceptionBuilder,
) -> crate::types::error::builders::IllegalArgumentExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_argument_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidArgumentExceptionBuilder,
) -> crate::types::error::builders::InvalidArgumentExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_parameter_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidParameterExceptionBuilder,
) -> crate::types::error::builders::InvalidParameterExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn missing_parameter_exception_correct_errors(
    mut builder: crate::types::error::builders::MissingParameterExceptionBuilder,
) -> crate::types::error::builders::MissingParameterExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn parsing_exception_correct_errors(
    mut builder: crate::types::error::builders::ParsingExceptionBuilder,
) -> crate::types::error::builders::ParsingExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn preconditions_failed_exception_correct_errors(
    mut builder: crate::types::error::builders::PreconditionsFailedExceptionBuilder,
) -> crate::types::error::builders::PreconditionsFailedExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn time_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::TimeLimitExceededExceptionBuilder,
) -> crate::types::error::builders::TimeLimitExceededExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_requests_exception_correct_errors(
    mut builder: crate::types::error::builders::TooManyRequestsExceptionBuilder,
) -> crate::types::error::builders::TooManyRequestsExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn unsupported_operation_exception_correct_errors(
    mut builder: crate::types::error::builders::UnsupportedOperationExceptionBuilder,
) -> crate::types::error::builders::UnsupportedOperationExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn bulk_load_id_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::BulkLoadIdNotFoundExceptionBuilder,
) -> crate::types::error::builders::BulkLoadIdNotFoundExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_failure_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalFailureExceptionBuilder,
) -> crate::types::error::builders::InternalFailureExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn load_url_access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::LoadUrlAccessDeniedExceptionBuilder,
) -> crate::types::error::builders::LoadUrlAccessDeniedExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn ml_resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::MlResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::MlResourceNotFoundExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_numeric_data_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidNumericDataExceptionBuilder,
) -> crate::types::error::builders::InvalidNumericDataExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn read_only_violation_exception_correct_errors(
    mut builder: crate::types::error::builders::ReadOnlyViolationExceptionBuilder,
) -> crate::types::error::builders::ReadOnlyViolationExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn statistics_not_available_exception_correct_errors(
    mut builder: crate::types::error::builders::StatisticsNotAvailableExceptionBuilder,
) -> crate::types::error::builders::StatisticsNotAvailableExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn method_not_allowed_exception_correct_errors(
    mut builder: crate::types::error::builders::MethodNotAllowedExceptionBuilder,
) -> crate::types::error::builders::MethodNotAllowedExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn server_shutdown_exception_correct_errors(
    mut builder: crate::types::error::builders::ServerShutdownExceptionBuilder,
) -> crate::types::error::builders::ServerShutdownExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn execute_fast_reset_output_correct_errors(
    mut builder: crate::operation::execute_fast_reset::builders::ExecuteFastResetOutputBuilder,
) -> crate::operation::execute_fast_reset::builders::ExecuteFastResetOutputBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    builder
}

pub(crate) fn cancelled_by_user_exception_correct_errors(
    mut builder: crate::types::error::builders::CancelledByUserExceptionBuilder,
) -> crate::types::error::builders::CancelledByUserExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn malformed_query_exception_correct_errors(
    mut builder: crate::types::error::builders::MalformedQueryExceptionBuilder,
) -> crate::types::error::builders::MalformedQueryExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn memory_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::MemoryLimitExceededExceptionBuilder,
) -> crate::types::error::builders::MemoryLimitExceededExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn query_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::QueryLimitExceededExceptionBuilder,
) -> crate::types::error::builders::QueryLimitExceededExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn query_limit_exception_correct_errors(
    mut builder: crate::types::error::builders::QueryLimitExceptionBuilder,
) -> crate::types::error::builders::QueryLimitExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn query_too_large_exception_correct_errors(
    mut builder: crate::types::error::builders::QueryTooLargeExceptionBuilder,
) -> crate::types::error::builders::QueryTooLargeExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn execute_open_cypher_explain_query_output_correct_errors(
    mut builder: crate::operation::execute_open_cypher_explain_query::builders::ExecuteOpenCypherExplainQueryOutputBuilder,
) -> crate::operation::execute_open_cypher_explain_query::builders::ExecuteOpenCypherExplainQueryOutputBuilder {
    if builder.results.is_none() {
        builder.results = Some(::aws_smithy_types::Blob::new(""))
    }
    builder
}

pub(crate) fn execute_open_cypher_query_output_correct_errors(
    mut builder: crate::operation::execute_open_cypher_query::builders::ExecuteOpenCypherQueryOutputBuilder,
) -> crate::operation::execute_open_cypher_query::builders::ExecuteOpenCypherQueryOutputBuilder {
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn get_loader_job_status_output_correct_errors(
    mut builder: crate::operation::get_loader_job_status::builders::GetLoaderJobStatusOutputBuilder,
) -> crate::operation::get_loader_job_status::builders::GetLoaderJobStatusOutputBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.payload.is_none() {
        builder.payload = Some(Default::default())
    }
    builder
}

pub(crate) fn get_propertygraph_statistics_output_correct_errors(
    mut builder: crate::operation::get_propertygraph_statistics::builders::GetPropertygraphStatisticsOutputBuilder,
) -> crate::operation::get_propertygraph_statistics::builders::GetPropertygraphStatisticsOutputBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.payload.is_none() {
        builder.payload = {
            let builder = crate::types::builders::StatisticsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn expired_stream_exception_correct_errors(
    mut builder: crate::types::error::builders::ExpiredStreamExceptionBuilder,
) -> crate::types::error::builders::ExpiredStreamExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn stream_records_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::StreamRecordsNotFoundExceptionBuilder,
) -> crate::types::error::builders::StreamRecordsNotFoundExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn get_propertygraph_stream_output_correct_errors(
    mut builder: crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamOutputBuilder,
) -> crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamOutputBuilder {
    if builder.last_event_id.is_none() {
        builder.last_event_id = Some(Default::default())
    }
    if builder.last_trx_timestamp_in_millis.is_none() {
        builder.last_trx_timestamp_in_millis = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = Some(Default::default())
    }
    if builder.records.is_none() {
        builder.records = Some(Default::default())
    }
    if builder.total_records.is_none() {
        builder.total_records = Some(Default::default())
    }
    builder
}

pub(crate) fn get_sparql_statistics_output_correct_errors(
    mut builder: crate::operation::get_sparql_statistics::builders::GetSparqlStatisticsOutputBuilder,
) -> crate::operation::get_sparql_statistics::builders::GetSparqlStatisticsOutputBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.payload.is_none() {
        builder.payload = {
            let builder = crate::types::builders::StatisticsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_sparql_stream_output_correct_errors(
    mut builder: crate::operation::get_sparql_stream::builders::GetSparqlStreamOutputBuilder,
) -> crate::operation::get_sparql_stream::builders::GetSparqlStreamOutputBuilder {
    if builder.last_event_id.is_none() {
        builder.last_event_id = Some(Default::default())
    }
    if builder.last_trx_timestamp_in_millis.is_none() {
        builder.last_trx_timestamp_in_millis = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = Some(Default::default())
    }
    if builder.records.is_none() {
        builder.records = Some(Default::default())
    }
    if builder.total_records.is_none() {
        builder.total_records = Some(Default::default())
    }
    builder
}

pub(crate) fn list_loader_jobs_output_correct_errors(
    mut builder: crate::operation::list_loader_jobs::builders::ListLoaderJobsOutputBuilder,
) -> crate::operation::list_loader_jobs::builders::ListLoaderJobsOutputBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.payload.is_none() {
        builder.payload = {
            let builder = crate::types::builders::LoaderIdResultBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn manage_propertygraph_statistics_output_correct_errors(
    mut builder: crate::operation::manage_propertygraph_statistics::builders::ManagePropertygraphStatisticsOutputBuilder,
) -> crate::operation::manage_propertygraph_statistics::builders::ManagePropertygraphStatisticsOutputBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    builder
}

pub(crate) fn manage_sparql_statistics_output_correct_errors(
    mut builder: crate::operation::manage_sparql_statistics::builders::ManageSparqlStatisticsOutputBuilder,
) -> crate::operation::manage_sparql_statistics::builders::ManageSparqlStatisticsOutputBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_exception_correct_errors(
    mut builder: crate::types::error::builders::S3ExceptionBuilder,
) -> crate::types::error::builders::S3ExceptionBuilder {
    if builder.detailed_message.is_none() {
        builder.detailed_message = Some(Default::default())
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn start_loader_job_output_correct_errors(
    mut builder: crate::operation::start_loader_job::builders::StartLoaderJobOutputBuilder,
) -> crate::operation::start_loader_job::builders::StartLoaderJobOutputBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.payload.is_none() {
        builder.payload = Some(Default::default())
    }
    builder
}

pub(crate) fn query_language_version_correct_errors(
    mut builder: crate::types::builders::QueryLanguageVersionBuilder,
) -> crate::types::builders::QueryLanguageVersionBuilder {
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn propertygraph_record_correct_errors(
    mut builder: crate::types::builders::PropertygraphRecordBuilder,
) -> crate::types::builders::PropertygraphRecordBuilder {
    if builder.commit_timestamp_in_millis.is_none() {
        builder.commit_timestamp_in_millis = Some(Default::default())
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    if builder.data.is_none() {
        builder.data = {
            let builder = crate::types::builders::PropertygraphDataBuilder::default();
            crate::serde_util::propertygraph_data_correct_errors(builder).build().ok()
        }
    }
    if builder.op.is_none() {
        builder.op = Some(Default::default())
    }
    builder
}

pub(crate) fn sparql_record_correct_errors(mut builder: crate::types::builders::SparqlRecordBuilder) -> crate::types::builders::SparqlRecordBuilder {
    if builder.commit_timestamp_in_millis.is_none() {
        builder.commit_timestamp_in_millis = Some(Default::default())
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    if builder.data.is_none() {
        builder.data = {
            let builder = crate::types::builders::SparqlDataBuilder::default();
            crate::serde_util::sparql_data_correct_errors(builder).build().ok()
        }
    }
    if builder.op.is_none() {
        builder.op = Some(Default::default())
    }
    builder
}

pub(crate) fn propertygraph_data_correct_errors(
    mut builder: crate::types::builders::PropertygraphDataBuilder,
) -> crate::types::builders::PropertygraphDataBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn sparql_data_correct_errors(mut builder: crate::types::builders::SparqlDataBuilder) -> crate::types::builders::SparqlDataBuilder {
    if builder.stmt.is_none() {
        builder.stmt = Some(Default::default())
    }
    builder
}
