// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains custom model training parameters. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/machine-learning-custom-models.html">Custom models in Neptune ML</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomModelTrainingParameters {
    /// <p>The path to the Amazon S3 location where the Python module implementing your model is located. This must point to a valid existing Amazon S3 location that contains, at a minimum, a training script, a transform script, and a <code>model-hpo-configuration.json</code> file.</p>
    pub source_s3_directory_path: ::std::string::String,
    /// <p>The name of the entry point in your module of a script that performs model training and takes hyperparameters as command-line arguments, including fixed hyperparameters. The default is <code>training.py</code>.</p>
    pub training_entry_point_script: ::std::option::Option<::std::string::String>,
    /// <p>The name of the entry point in your module of a script that should be run after the best model from the hyperparameter search has been identified, to compute the model artifacts necessary for model deployment. It should be able to run with no command-line arguments.The default is <code>transform.py</code>.</p>
    pub transform_entry_point_script: ::std::option::Option<::std::string::String>,
}
impl CustomModelTrainingParameters {
    /// <p>The path to the Amazon S3 location where the Python module implementing your model is located. This must point to a valid existing Amazon S3 location that contains, at a minimum, a training script, a transform script, and a <code>model-hpo-configuration.json</code> file.</p>
    pub fn source_s3_directory_path(&self) -> &str {
        use std::ops::Deref;
        self.source_s3_directory_path.deref()
    }
    /// <p>The name of the entry point in your module of a script that performs model training and takes hyperparameters as command-line arguments, including fixed hyperparameters. The default is <code>training.py</code>.</p>
    pub fn training_entry_point_script(&self) -> ::std::option::Option<&str> {
        self.training_entry_point_script.as_deref()
    }
    /// <p>The name of the entry point in your module of a script that should be run after the best model from the hyperparameter search has been identified, to compute the model artifacts necessary for model deployment. It should be able to run with no command-line arguments.The default is <code>transform.py</code>.</p>
    pub fn transform_entry_point_script(&self) -> ::std::option::Option<&str> {
        self.transform_entry_point_script.as_deref()
    }
}
impl CustomModelTrainingParameters {
    /// Creates a new builder-style object to manufacture [`CustomModelTrainingParameters`](crate::types::CustomModelTrainingParameters).
    pub fn builder() -> crate::types::builders::CustomModelTrainingParametersBuilder {
        crate::types::builders::CustomModelTrainingParametersBuilder::default()
    }
}

/// A builder for [`CustomModelTrainingParameters`](crate::types::CustomModelTrainingParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomModelTrainingParametersBuilder {
    pub(crate) source_s3_directory_path: ::std::option::Option<::std::string::String>,
    pub(crate) training_entry_point_script: ::std::option::Option<::std::string::String>,
    pub(crate) transform_entry_point_script: ::std::option::Option<::std::string::String>,
}
impl CustomModelTrainingParametersBuilder {
    /// <p>The path to the Amazon S3 location where the Python module implementing your model is located. This must point to a valid existing Amazon S3 location that contains, at a minimum, a training script, a transform script, and a <code>model-hpo-configuration.json</code> file.</p>
    /// This field is required.
    pub fn source_s3_directory_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_s3_directory_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the Amazon S3 location where the Python module implementing your model is located. This must point to a valid existing Amazon S3 location that contains, at a minimum, a training script, a transform script, and a <code>model-hpo-configuration.json</code> file.</p>
    pub fn set_source_s3_directory_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_s3_directory_path = input;
        self
    }
    /// <p>The path to the Amazon S3 location where the Python module implementing your model is located. This must point to a valid existing Amazon S3 location that contains, at a minimum, a training script, a transform script, and a <code>model-hpo-configuration.json</code> file.</p>
    pub fn get_source_s3_directory_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_s3_directory_path
    }
    /// <p>The name of the entry point in your module of a script that performs model training and takes hyperparameters as command-line arguments, including fixed hyperparameters. The default is <code>training.py</code>.</p>
    pub fn training_entry_point_script(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_entry_point_script = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the entry point in your module of a script that performs model training and takes hyperparameters as command-line arguments, including fixed hyperparameters. The default is <code>training.py</code>.</p>
    pub fn set_training_entry_point_script(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_entry_point_script = input;
        self
    }
    /// <p>The name of the entry point in your module of a script that performs model training and takes hyperparameters as command-line arguments, including fixed hyperparameters. The default is <code>training.py</code>.</p>
    pub fn get_training_entry_point_script(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_entry_point_script
    }
    /// <p>The name of the entry point in your module of a script that should be run after the best model from the hyperparameter search has been identified, to compute the model artifacts necessary for model deployment. It should be able to run with no command-line arguments.The default is <code>transform.py</code>.</p>
    pub fn transform_entry_point_script(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transform_entry_point_script = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the entry point in your module of a script that should be run after the best model from the hyperparameter search has been identified, to compute the model artifacts necessary for model deployment. It should be able to run with no command-line arguments.The default is <code>transform.py</code>.</p>
    pub fn set_transform_entry_point_script(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transform_entry_point_script = input;
        self
    }
    /// <p>The name of the entry point in your module of a script that should be run after the best model from the hyperparameter search has been identified, to compute the model artifacts necessary for model deployment. It should be able to run with no command-line arguments.The default is <code>transform.py</code>.</p>
    pub fn get_transform_entry_point_script(&self) -> &::std::option::Option<::std::string::String> {
        &self.transform_entry_point_script
    }
    /// Consumes the builder and constructs a [`CustomModelTrainingParameters`](crate::types::CustomModelTrainingParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_s3_directory_path`](crate::types::builders::CustomModelTrainingParametersBuilder::source_s3_directory_path)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomModelTrainingParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomModelTrainingParameters {
            source_s3_directory_path: self.source_s3_directory_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_s3_directory_path",
                    "source_s3_directory_path was not specified but it is required when building CustomModelTrainingParameters",
                )
            })?,
            training_entry_point_script: self.training_entry_point_script,
            transform_entry_point_script: self.transform_entry_point_script,
        })
    }
}
