// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a list of load IDs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoaderIdResult {
    /// <p>A list of load IDs.</p>
    pub load_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LoaderIdResult {
    /// <p>A list of load IDs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.load_ids.is_none()`.
    pub fn load_ids(&self) -> &[::std::string::String] {
        self.load_ids.as_deref().unwrap_or_default()
    }
}
impl LoaderIdResult {
    /// Creates a new builder-style object to manufacture [`LoaderIdResult`](crate::types::LoaderIdResult).
    pub fn builder() -> crate::types::builders::LoaderIdResultBuilder {
        crate::types::builders::LoaderIdResultBuilder::default()
    }
}

/// A builder for [`LoaderIdResult`](crate::types::LoaderIdResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoaderIdResultBuilder {
    pub(crate) load_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LoaderIdResultBuilder {
    /// Appends an item to `load_ids`.
    ///
    /// To override the contents of this collection use [`set_load_ids`](Self::set_load_ids).
    ///
    /// <p>A list of load IDs.</p>
    pub fn load_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.load_ids.unwrap_or_default();
        v.push(input.into());
        self.load_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of load IDs.</p>
    pub fn set_load_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.load_ids = input;
        self
    }
    /// <p>A list of load IDs.</p>
    pub fn get_load_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.load_ids
    }
    /// Consumes the builder and constructs a [`LoaderIdResult`](crate::types::LoaderIdResult).
    pub fn build(self) -> crate::types::LoaderIdResult {
        crate::types::LoaderIdResult { load_ids: self.load_ids }
    }
}
