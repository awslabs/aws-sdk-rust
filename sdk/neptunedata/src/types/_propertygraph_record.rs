// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure of a property graph record.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertygraphRecord {
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    pub commit_timestamp_in_millis: i64,
    /// <p>The sequence identifier of the stream change record.</p>
    pub event_id: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The serialized Gremlin or openCypher change record.</p>
    pub data: ::std::option::Option<crate::types::PropertygraphData>,
    /// <p>The operation that created the change.</p>
    pub op: ::std::string::String,
    /// <p>Only present if this operation is the last one in its transaction. If present, it is set to true. It is useful for ensuring that an entire transaction is consumed.</p>
    pub is_last_op: ::std::option::Option<bool>,
}
impl PropertygraphRecord {
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    pub fn commit_timestamp_in_millis(&self) -> i64 {
        self.commit_timestamp_in_millis
    }
    /// <p>The sequence identifier of the stream change record.</p>
    pub fn event_id(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.event_id
    }
    /// <p>The serialized Gremlin or openCypher change record.</p>
    pub fn data(&self) -> ::std::option::Option<&crate::types::PropertygraphData> {
        self.data.as_ref()
    }
    /// <p>The operation that created the change.</p>
    pub fn op(&self) -> &str {
        use std::ops::Deref;
        self.op.deref()
    }
    /// <p>Only present if this operation is the last one in its transaction. If present, it is set to true. It is useful for ensuring that an entire transaction is consumed.</p>
    pub fn is_last_op(&self) -> ::std::option::Option<bool> {
        self.is_last_op
    }
}
impl PropertygraphRecord {
    /// Creates a new builder-style object to manufacture [`PropertygraphRecord`](crate::types::PropertygraphRecord).
    pub fn builder() -> crate::types::builders::PropertygraphRecordBuilder {
        crate::types::builders::PropertygraphRecordBuilder::default()
    }
}

/// A builder for [`PropertygraphRecord`](crate::types::PropertygraphRecord).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PropertygraphRecordBuilder {
    pub(crate) commit_timestamp_in_millis: ::std::option::Option<i64>,
    pub(crate) event_id: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) data: ::std::option::Option<crate::types::PropertygraphData>,
    pub(crate) op: ::std::option::Option<::std::string::String>,
    pub(crate) is_last_op: ::std::option::Option<bool>,
}
impl PropertygraphRecordBuilder {
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    /// This field is required.
    pub fn commit_timestamp_in_millis(mut self, input: i64) -> Self {
        self.commit_timestamp_in_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    pub fn set_commit_timestamp_in_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.commit_timestamp_in_millis = input;
        self
    }
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    pub fn get_commit_timestamp_in_millis(&self) -> &::std::option::Option<i64> {
        &self.commit_timestamp_in_millis
    }
    /// Adds a key-value pair to `event_id`.
    ///
    /// To override the contents of this collection use [`set_event_id`](Self::set_event_id).
    ///
    /// <p>The sequence identifier of the stream change record.</p>
    pub fn event_id(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.event_id.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.event_id = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The sequence identifier of the stream change record.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The sequence identifier of the stream change record.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.event_id
    }
    /// <p>The serialized Gremlin or openCypher change record.</p>
    /// This field is required.
    pub fn data(mut self, input: crate::types::PropertygraphData) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The serialized Gremlin or openCypher change record.</p>
    pub fn set_data(mut self, input: ::std::option::Option<crate::types::PropertygraphData>) -> Self {
        self.data = input;
        self
    }
    /// <p>The serialized Gremlin or openCypher change record.</p>
    pub fn get_data(&self) -> &::std::option::Option<crate::types::PropertygraphData> {
        &self.data
    }
    /// <p>The operation that created the change.</p>
    /// This field is required.
    pub fn op(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.op = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The operation that created the change.</p>
    pub fn set_op(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.op = input;
        self
    }
    /// <p>The operation that created the change.</p>
    pub fn get_op(&self) -> &::std::option::Option<::std::string::String> {
        &self.op
    }
    /// <p>Only present if this operation is the last one in its transaction. If present, it is set to true. It is useful for ensuring that an entire transaction is consumed.</p>
    pub fn is_last_op(mut self, input: bool) -> Self {
        self.is_last_op = ::std::option::Option::Some(input);
        self
    }
    /// <p>Only present if this operation is the last one in its transaction. If present, it is set to true. It is useful for ensuring that an entire transaction is consumed.</p>
    pub fn set_is_last_op(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_last_op = input;
        self
    }
    /// <p>Only present if this operation is the last one in its transaction. If present, it is set to true. It is useful for ensuring that an entire transaction is consumed.</p>
    pub fn get_is_last_op(&self) -> &::std::option::Option<bool> {
        &self.is_last_op
    }
    /// Consumes the builder and constructs a [`PropertygraphRecord`](crate::types::PropertygraphRecord).
    /// This method will fail if any of the following fields are not set:
    /// - [`commit_timestamp_in_millis`](crate::types::builders::PropertygraphRecordBuilder::commit_timestamp_in_millis)
    /// - [`event_id`](crate::types::builders::PropertygraphRecordBuilder::event_id)
    /// - [`op`](crate::types::builders::PropertygraphRecordBuilder::op)
    pub fn build(self) -> ::std::result::Result<crate::types::PropertygraphRecord, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PropertygraphRecord {
            commit_timestamp_in_millis: self.commit_timestamp_in_millis.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "commit_timestamp_in_millis",
                    "commit_timestamp_in_millis was not specified but it is required when building PropertygraphRecord",
                )
            })?,
            event_id: self.event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_id",
                    "event_id was not specified but it is required when building PropertygraphRecord",
                )
            })?,
            data: self.data,
            op: self.op.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "op",
                    "op was not specified but it is required when building PropertygraphRecord",
                )
            })?,
            is_last_op: self.is_last_op,
        })
    }
}
