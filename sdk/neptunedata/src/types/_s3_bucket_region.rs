// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `S3BucketRegion`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let s3bucketregion = unimplemented!();
/// match s3bucketregion {
///     S3BucketRegion::AfSouth1 => { /* ... */ },
///     S3BucketRegion::ApEast1 => { /* ... */ },
///     S3BucketRegion::ApEast2 => { /* ... */ },
///     S3BucketRegion::ApNortheast1 => { /* ... */ },
///     S3BucketRegion::ApNortheast2 => { /* ... */ },
///     S3BucketRegion::ApNortheast3 => { /* ... */ },
///     S3BucketRegion::ApSouth1 => { /* ... */ },
///     S3BucketRegion::ApSouth2 => { /* ... */ },
///     S3BucketRegion::ApSoutheast1 => { /* ... */ },
///     S3BucketRegion::ApSoutheast2 => { /* ... */ },
///     S3BucketRegion::ApSoutheast3 => { /* ... */ },
///     S3BucketRegion::ApSoutheast4 => { /* ... */ },
///     S3BucketRegion::ApSoutheast5 => { /* ... */ },
///     S3BucketRegion::ApSoutheast7 => { /* ... */ },
///     S3BucketRegion::CaCentral1 => { /* ... */ },
///     S3BucketRegion::CaWest1 => { /* ... */ },
///     S3BucketRegion::CnNorth1 => { /* ... */ },
///     S3BucketRegion::CnNorthwest1 => { /* ... */ },
///     S3BucketRegion::EuCentral1 => { /* ... */ },
///     S3BucketRegion::EuCentral2 => { /* ... */ },
///     S3BucketRegion::EuNorth1 => { /* ... */ },
///     S3BucketRegion::EuSouth2 => { /* ... */ },
///     S3BucketRegion::EuWest1 => { /* ... */ },
///     S3BucketRegion::EuWest2 => { /* ... */ },
///     S3BucketRegion::EuWest3 => { /* ... */ },
///     S3BucketRegion::IlCentral1 => { /* ... */ },
///     S3BucketRegion::MeCentral1 => { /* ... */ },
///     S3BucketRegion::MeSouth1 => { /* ... */ },
///     S3BucketRegion::MxCentral1 => { /* ... */ },
///     S3BucketRegion::SaEast1 => { /* ... */ },
///     S3BucketRegion::UsEast1 => { /* ... */ },
///     S3BucketRegion::UsEast2 => { /* ... */ },
///     S3BucketRegion::UsGovEast1 => { /* ... */ },
///     S3BucketRegion::UsGovWest1 => { /* ... */ },
///     S3BucketRegion::UsWest1 => { /* ... */ },
///     S3BucketRegion::UsWest2 => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `s3bucketregion` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `S3BucketRegion::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `S3BucketRegion::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `S3BucketRegion::NewFeature` is defined.
/// Specifically, when `s3bucketregion` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `S3BucketRegion::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum S3BucketRegion {
    #[allow(missing_docs)] // documentation missing in model
    AfSouth1,
    #[allow(missing_docs)] // documentation missing in model
    ApEast1,
    #[allow(missing_docs)] // documentation missing in model
    ApEast2,
    #[allow(missing_docs)] // documentation missing in model
    ApNortheast1,
    #[allow(missing_docs)] // documentation missing in model
    ApNortheast2,
    #[allow(missing_docs)] // documentation missing in model
    ApNortheast3,
    #[allow(missing_docs)] // documentation missing in model
    ApSouth1,
    #[allow(missing_docs)] // documentation missing in model
    ApSouth2,
    #[allow(missing_docs)] // documentation missing in model
    ApSoutheast1,
    #[allow(missing_docs)] // documentation missing in model
    ApSoutheast2,
    #[allow(missing_docs)] // documentation missing in model
    ApSoutheast3,
    #[allow(missing_docs)] // documentation missing in model
    ApSoutheast4,
    #[allow(missing_docs)] // documentation missing in model
    ApSoutheast5,
    #[allow(missing_docs)] // documentation missing in model
    ApSoutheast7,
    #[allow(missing_docs)] // documentation missing in model
    CaCentral1,
    #[allow(missing_docs)] // documentation missing in model
    CaWest1,
    #[allow(missing_docs)] // documentation missing in model
    CnNorth1,
    #[allow(missing_docs)] // documentation missing in model
    CnNorthwest1,
    #[allow(missing_docs)] // documentation missing in model
    EuCentral1,
    #[allow(missing_docs)] // documentation missing in model
    EuCentral2,
    #[allow(missing_docs)] // documentation missing in model
    EuNorth1,
    #[allow(missing_docs)] // documentation missing in model
    EuSouth2,
    #[allow(missing_docs)] // documentation missing in model
    EuWest1,
    #[allow(missing_docs)] // documentation missing in model
    EuWest2,
    #[allow(missing_docs)] // documentation missing in model
    EuWest3,
    #[allow(missing_docs)] // documentation missing in model
    IlCentral1,
    #[allow(missing_docs)] // documentation missing in model
    MeCentral1,
    #[allow(missing_docs)] // documentation missing in model
    MeSouth1,
    #[allow(missing_docs)] // documentation missing in model
    MxCentral1,
    #[allow(missing_docs)] // documentation missing in model
    SaEast1,
    #[allow(missing_docs)] // documentation missing in model
    UsEast1,
    #[allow(missing_docs)] // documentation missing in model
    UsEast2,
    #[allow(missing_docs)] // documentation missing in model
    UsGovEast1,
    #[allow(missing_docs)] // documentation missing in model
    UsGovWest1,
    #[allow(missing_docs)] // documentation missing in model
    UsWest1,
    #[allow(missing_docs)] // documentation missing in model
    UsWest2,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for S3BucketRegion {
    fn from(s: &str) -> Self {
        match s {
            "af-south-1" => S3BucketRegion::AfSouth1,
            "ap-east-1" => S3BucketRegion::ApEast1,
            "ap-east-2" => S3BucketRegion::ApEast2,
            "ap-northeast-1" => S3BucketRegion::ApNortheast1,
            "ap-northeast-2" => S3BucketRegion::ApNortheast2,
            "ap-northeast-3" => S3BucketRegion::ApNortheast3,
            "ap-south-1" => S3BucketRegion::ApSouth1,
            "ap-south-2" => S3BucketRegion::ApSouth2,
            "ap-southeast-1" => S3BucketRegion::ApSoutheast1,
            "ap-southeast-2" => S3BucketRegion::ApSoutheast2,
            "ap-southeast-3" => S3BucketRegion::ApSoutheast3,
            "ap-southeast-4" => S3BucketRegion::ApSoutheast4,
            "ap-southeast-5" => S3BucketRegion::ApSoutheast5,
            "ap-southeast-7" => S3BucketRegion::ApSoutheast7,
            "ca-central-1" => S3BucketRegion::CaCentral1,
            "ca-west-1" => S3BucketRegion::CaWest1,
            "cn-north-1" => S3BucketRegion::CnNorth1,
            "cn-northwest-1" => S3BucketRegion::CnNorthwest1,
            "eu-central-1" => S3BucketRegion::EuCentral1,
            "eu-central-2" => S3BucketRegion::EuCentral2,
            "eu-north-1" => S3BucketRegion::EuNorth1,
            "eu-south-2" => S3BucketRegion::EuSouth2,
            "eu-west-1" => S3BucketRegion::EuWest1,
            "eu-west-2" => S3BucketRegion::EuWest2,
            "eu-west-3" => S3BucketRegion::EuWest3,
            "il-central-1" => S3BucketRegion::IlCentral1,
            "me-central-1" => S3BucketRegion::MeCentral1,
            "me-south-1" => S3BucketRegion::MeSouth1,
            "mx-central-1" => S3BucketRegion::MxCentral1,
            "sa-east-1" => S3BucketRegion::SaEast1,
            "us-east-1" => S3BucketRegion::UsEast1,
            "us-east-2" => S3BucketRegion::UsEast2,
            "us-gov-east-1" => S3BucketRegion::UsGovEast1,
            "us-gov-west-1" => S3BucketRegion::UsGovWest1,
            "us-west-1" => S3BucketRegion::UsWest1,
            "us-west-2" => S3BucketRegion::UsWest2,
            other => S3BucketRegion::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for S3BucketRegion {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(S3BucketRegion::from(s))
    }
}
impl S3BucketRegion {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            S3BucketRegion::AfSouth1 => "af-south-1",
            S3BucketRegion::ApEast1 => "ap-east-1",
            S3BucketRegion::ApEast2 => "ap-east-2",
            S3BucketRegion::ApNortheast1 => "ap-northeast-1",
            S3BucketRegion::ApNortheast2 => "ap-northeast-2",
            S3BucketRegion::ApNortheast3 => "ap-northeast-3",
            S3BucketRegion::ApSouth1 => "ap-south-1",
            S3BucketRegion::ApSouth2 => "ap-south-2",
            S3BucketRegion::ApSoutheast1 => "ap-southeast-1",
            S3BucketRegion::ApSoutheast2 => "ap-southeast-2",
            S3BucketRegion::ApSoutheast3 => "ap-southeast-3",
            S3BucketRegion::ApSoutheast4 => "ap-southeast-4",
            S3BucketRegion::ApSoutheast5 => "ap-southeast-5",
            S3BucketRegion::ApSoutheast7 => "ap-southeast-7",
            S3BucketRegion::CaCentral1 => "ca-central-1",
            S3BucketRegion::CaWest1 => "ca-west-1",
            S3BucketRegion::CnNorth1 => "cn-north-1",
            S3BucketRegion::CnNorthwest1 => "cn-northwest-1",
            S3BucketRegion::EuCentral1 => "eu-central-1",
            S3BucketRegion::EuCentral2 => "eu-central-2",
            S3BucketRegion::EuNorth1 => "eu-north-1",
            S3BucketRegion::EuSouth2 => "eu-south-2",
            S3BucketRegion::EuWest1 => "eu-west-1",
            S3BucketRegion::EuWest2 => "eu-west-2",
            S3BucketRegion::EuWest3 => "eu-west-3",
            S3BucketRegion::IlCentral1 => "il-central-1",
            S3BucketRegion::MeCentral1 => "me-central-1",
            S3BucketRegion::MeSouth1 => "me-south-1",
            S3BucketRegion::MxCentral1 => "mx-central-1",
            S3BucketRegion::SaEast1 => "sa-east-1",
            S3BucketRegion::UsEast1 => "us-east-1",
            S3BucketRegion::UsEast2 => "us-east-2",
            S3BucketRegion::UsGovEast1 => "us-gov-east-1",
            S3BucketRegion::UsGovWest1 => "us-gov-west-1",
            S3BucketRegion::UsWest1 => "us-west-1",
            S3BucketRegion::UsWest2 => "us-west-2",
            S3BucketRegion::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "af-south-1",
            "ap-east-1",
            "ap-east-2",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "ap-south-2",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-southeast-4",
            "ap-southeast-5",
            "ap-southeast-7",
            "ca-central-1",
            "ca-west-1",
            "cn-north-1",
            "cn-northwest-1",
            "eu-central-1",
            "eu-central-2",
            "eu-north-1",
            "eu-south-2",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "il-central-1",
            "me-central-1",
            "me-south-1",
            "mx-central-1",
            "sa-east-1",
            "us-east-1",
            "us-east-2",
            "us-gov-east-1",
            "us-gov-west-1",
            "us-west-1",
            "us-west-2",
        ]
    }
}
impl ::std::convert::AsRef<str> for S3BucketRegion {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl S3BucketRegion {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for S3BucketRegion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            S3BucketRegion::AfSouth1 => write!(f, "af-south-1"),
            S3BucketRegion::ApEast1 => write!(f, "ap-east-1"),
            S3BucketRegion::ApEast2 => write!(f, "ap-east-2"),
            S3BucketRegion::ApNortheast1 => write!(f, "ap-northeast-1"),
            S3BucketRegion::ApNortheast2 => write!(f, "ap-northeast-2"),
            S3BucketRegion::ApNortheast3 => write!(f, "ap-northeast-3"),
            S3BucketRegion::ApSouth1 => write!(f, "ap-south-1"),
            S3BucketRegion::ApSouth2 => write!(f, "ap-south-2"),
            S3BucketRegion::ApSoutheast1 => write!(f, "ap-southeast-1"),
            S3BucketRegion::ApSoutheast2 => write!(f, "ap-southeast-2"),
            S3BucketRegion::ApSoutheast3 => write!(f, "ap-southeast-3"),
            S3BucketRegion::ApSoutheast4 => write!(f, "ap-southeast-4"),
            S3BucketRegion::ApSoutheast5 => write!(f, "ap-southeast-5"),
            S3BucketRegion::ApSoutheast7 => write!(f, "ap-southeast-7"),
            S3BucketRegion::CaCentral1 => write!(f, "ca-central-1"),
            S3BucketRegion::CaWest1 => write!(f, "ca-west-1"),
            S3BucketRegion::CnNorth1 => write!(f, "cn-north-1"),
            S3BucketRegion::CnNorthwest1 => write!(f, "cn-northwest-1"),
            S3BucketRegion::EuCentral1 => write!(f, "eu-central-1"),
            S3BucketRegion::EuCentral2 => write!(f, "eu-central-2"),
            S3BucketRegion::EuNorth1 => write!(f, "eu-north-1"),
            S3BucketRegion::EuSouth2 => write!(f, "eu-south-2"),
            S3BucketRegion::EuWest1 => write!(f, "eu-west-1"),
            S3BucketRegion::EuWest2 => write!(f, "eu-west-2"),
            S3BucketRegion::EuWest3 => write!(f, "eu-west-3"),
            S3BucketRegion::IlCentral1 => write!(f, "il-central-1"),
            S3BucketRegion::MeCentral1 => write!(f, "me-central-1"),
            S3BucketRegion::MeSouth1 => write!(f, "me-south-1"),
            S3BucketRegion::MxCentral1 => write!(f, "mx-central-1"),
            S3BucketRegion::SaEast1 => write!(f, "sa-east-1"),
            S3BucketRegion::UsEast1 => write!(f, "us-east-1"),
            S3BucketRegion::UsEast2 => write!(f, "us-east-2"),
            S3BucketRegion::UsGovEast1 => write!(f, "us-gov-east-1"),
            S3BucketRegion::UsGovWest1 => write!(f, "us-gov-west-1"),
            S3BucketRegion::UsWest1 => write!(f, "us-west-1"),
            S3BucketRegion::UsWest2 => write!(f, "us-west-2"),
            S3BucketRegion::Unknown(value) => write!(f, "{value}"),
        }
    }
}
