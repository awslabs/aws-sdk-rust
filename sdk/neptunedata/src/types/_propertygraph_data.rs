// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Gremlin or openCypher change record.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertygraphData {
    /// <p>The ID of the Gremlin or openCypher element.</p>
    pub id: ::std::string::String,
    /// <p>The type of this Gremlin or openCypher element. Must be one of:</p>
    /// <ul>
    /// <li> <p> <b> <code>v1</code> </b> &nbsp; - &nbsp; Vertex label for Gremlin, or node label for openCypher.</p> </li>
    /// <li> <p> <b> <code>vp</code> </b> &nbsp; - &nbsp; Vertex properties for Gremlin, or node properties for openCypher.</p> </li>
    /// <li> <p> <b> <code>e</code> </b> &nbsp; - &nbsp; Edge and edge label for Gremlin, or relationship and relationship type for openCypher.</p> </li>
    /// <li> <p> <b> <code>ep</code> </b> &nbsp; - &nbsp; Edge properties for Gremlin, or relationship properties for openCypher.</p> </li>
    /// </ul>
    pub r#type: ::std::string::String,
    /// <p>The property name. For element labels, this is <code>label</code>.</p>
    pub key: ::std::string::String,
    /// <p>This is a JSON object that contains a value field for the value itself, and a datatype field for the JSON data type of that value:</p>
    pub value: ::aws_smithy_types::Document,
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>from</code> vertex or source node.</p>
    pub from: ::std::option::Option<::std::string::String>,
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>to</code> vertex or target node.</p>
    pub to: ::std::option::Option<::std::string::String>,
}
impl PropertygraphData {
    /// <p>The ID of the Gremlin or openCypher element.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The type of this Gremlin or openCypher element. Must be one of:</p>
    /// <ul>
    /// <li> <p> <b> <code>v1</code> </b> &nbsp; - &nbsp; Vertex label for Gremlin, or node label for openCypher.</p> </li>
    /// <li> <p> <b> <code>vp</code> </b> &nbsp; - &nbsp; Vertex properties for Gremlin, or node properties for openCypher.</p> </li>
    /// <li> <p> <b> <code>e</code> </b> &nbsp; - &nbsp; Edge and edge label for Gremlin, or relationship and relationship type for openCypher.</p> </li>
    /// <li> <p> <b> <code>ep</code> </b> &nbsp; - &nbsp; Edge properties for Gremlin, or relationship properties for openCypher.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>The property name. For element labels, this is <code>label</code>.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>This is a JSON object that contains a value field for the value itself, and a datatype field for the JSON data type of that value:</p>
    pub fn value(&self) -> &::aws_smithy_types::Document {
        &self.value
    }
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>from</code> vertex or source node.</p>
    pub fn from(&self) -> ::std::option::Option<&str> {
        self.from.as_deref()
    }
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>to</code> vertex or target node.</p>
    pub fn to(&self) -> ::std::option::Option<&str> {
        self.to.as_deref()
    }
}
impl PropertygraphData {
    /// Creates a new builder-style object to manufacture [`PropertygraphData`](crate::types::PropertygraphData).
    pub fn builder() -> crate::types::builders::PropertygraphDataBuilder {
        crate::types::builders::PropertygraphDataBuilder::default()
    }
}

/// A builder for [`PropertygraphData`](crate::types::PropertygraphData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PropertygraphDataBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) from: ::std::option::Option<::std::string::String>,
    pub(crate) to: ::std::option::Option<::std::string::String>,
}
impl PropertygraphDataBuilder {
    /// <p>The ID of the Gremlin or openCypher element.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Gremlin or openCypher element.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the Gremlin or openCypher element.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of this Gremlin or openCypher element. Must be one of:</p>
    /// <ul>
    /// <li> <p> <b> <code>v1</code> </b> &nbsp; - &nbsp; Vertex label for Gremlin, or node label for openCypher.</p> </li>
    /// <li> <p> <b> <code>vp</code> </b> &nbsp; - &nbsp; Vertex properties for Gremlin, or node properties for openCypher.</p> </li>
    /// <li> <p> <b> <code>e</code> </b> &nbsp; - &nbsp; Edge and edge label for Gremlin, or relationship and relationship type for openCypher.</p> </li>
    /// <li> <p> <b> <code>ep</code> </b> &nbsp; - &nbsp; Edge properties for Gremlin, or relationship properties for openCypher.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of this Gremlin or openCypher element. Must be one of:</p>
    /// <ul>
    /// <li> <p> <b> <code>v1</code> </b> &nbsp; - &nbsp; Vertex label for Gremlin, or node label for openCypher.</p> </li>
    /// <li> <p> <b> <code>vp</code> </b> &nbsp; - &nbsp; Vertex properties for Gremlin, or node properties for openCypher.</p> </li>
    /// <li> <p> <b> <code>e</code> </b> &nbsp; - &nbsp; Edge and edge label for Gremlin, or relationship and relationship type for openCypher.</p> </li>
    /// <li> <p> <b> <code>ep</code> </b> &nbsp; - &nbsp; Edge properties for Gremlin, or relationship properties for openCypher.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of this Gremlin or openCypher element. Must be one of:</p>
    /// <ul>
    /// <li> <p> <b> <code>v1</code> </b> &nbsp; - &nbsp; Vertex label for Gremlin, or node label for openCypher.</p> </li>
    /// <li> <p> <b> <code>vp</code> </b> &nbsp; - &nbsp; Vertex properties for Gremlin, or node properties for openCypher.</p> </li>
    /// <li> <p> <b> <code>e</code> </b> &nbsp; - &nbsp; Edge and edge label for Gremlin, or relationship and relationship type for openCypher.</p> </li>
    /// <li> <p> <b> <code>ep</code> </b> &nbsp; - &nbsp; Edge properties for Gremlin, or relationship properties for openCypher.</p> </li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The property name. For element labels, this is <code>label</code>.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The property name. For element labels, this is <code>label</code>.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The property name. For element labels, this is <code>label</code>.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>This is a JSON object that contains a value field for the value itself, and a datatype field for the JSON data type of that value:</p>
    /// This field is required.
    pub fn value(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>This is a JSON object that contains a value field for the value itself, and a datatype field for the JSON data type of that value:</p>
    pub fn set_value(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.value = input;
        self
    }
    /// <p>This is a JSON object that contains a value field for the value itself, and a datatype field for the JSON data type of that value:</p>
    pub fn get_value(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.value
    }
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>from</code> vertex or source node.</p>
    pub fn from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>from</code> vertex or source node.</p>
    pub fn set_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from = input;
        self
    }
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>from</code> vertex or source node.</p>
    pub fn get_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.from
    }
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>to</code> vertex or target node.</p>
    pub fn to(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.to = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>to</code> vertex or target node.</p>
    pub fn set_to(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.to = input;
        self
    }
    /// <p>If this is an edge (type = <code>e</code>), the ID of the corresponding <code>to</code> vertex or target node.</p>
    pub fn get_to(&self) -> &::std::option::Option<::std::string::String> {
        &self.to
    }
    /// Consumes the builder and constructs a [`PropertygraphData`](crate::types::PropertygraphData).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::PropertygraphDataBuilder::id)
    /// - [`r#type`](crate::types::builders::PropertygraphDataBuilder::r#type)
    /// - [`key`](crate::types::builders::PropertygraphDataBuilder::key)
    /// - [`value`](crate::types::builders::PropertygraphDataBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::PropertygraphData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PropertygraphData {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building PropertygraphData",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building PropertygraphData",
                )
            })?,
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building PropertygraphData",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building PropertygraphData",
                )
            })?,
            from: self.from,
            to: self.to,
        })
    }
}
