// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::execute_open_cypher_query::_execute_open_cypher_query_output::ExecuteOpenCypherQueryOutputBuilder;

pub use crate::operation::execute_open_cypher_query::_execute_open_cypher_query_input::ExecuteOpenCypherQueryInputBuilder;

impl crate::operation::execute_open_cypher_query::builders::ExecuteOpenCypherQueryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.execute_open_cypher_query();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ExecuteOpenCypherQuery`.
///
/// <p>Executes an openCypher query. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/access-graph-opencypher.html">Accessing the Neptune Graph with openCypher</a> for more information.</p>
/// <p>Neptune supports building graph applications using openCypher, which is currently one of the most popular query languages among developers working with graph databases. Developers, business analysts, and data scientists like openCypher's declarative, SQL-inspired syntax because it provides a familiar structure in which to querying property graphs.</p>
/// <p>The openCypher language was originally developed by Neo4j, then open-sourced in 2015 and contributed to the <a href="https://opencypher.org/">openCypher project</a> under an Apache 2 open-source license.</p>
/// <p>Note that when invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#readdataviaquery">neptune-db:ReadDataViaQuery</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#writedataviaquery">neptune-db:WriteDataViaQuery</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#deletedataviaquery">neptune-db:DeleteDataViaQuery</a></p></li>
/// </ul>
/// <p>Note also that the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-data-condition-keys.html#iam-neptune-condition-keys">neptune-db:QueryLanguage:OpenCypher</a> IAM condition key can be used in the policy document to restrict the use of openCypher queries (see <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-data-condition-keys.html">Condition keys available in Neptune IAM data-access policy statements</a>).</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ExecuteOpenCypherQueryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::execute_open_cypher_query::builders::ExecuteOpenCypherQueryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryOutput,
        crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryError,
    > for ExecuteOpenCypherQueryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryOutput,
            crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ExecuteOpenCypherQueryFluentBuilder {
    /// Creates a new `ExecuteOpenCypherQuery`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ExecuteOpenCypherQuery as a reference.
    pub fn as_input(&self) -> &crate::operation::execute_open_cypher_query::builders::ExecuteOpenCypherQueryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::execute_open_cypher_query::ExecuteOpenCypherQuery::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::execute_open_cypher_query::ExecuteOpenCypherQuery::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryOutput,
        crate::operation::execute_open_cypher_query::ExecuteOpenCypherQueryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The openCypher query string to be executed.</p>
    pub fn open_cypher_query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.open_cypher_query(input.into());
        self
    }
    /// <p>The openCypher query string to be executed.</p>
    pub fn set_open_cypher_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_open_cypher_query(input);
        self
    }
    /// <p>The openCypher query string to be executed.</p>
    pub fn get_open_cypher_query(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_open_cypher_query()
    }
    /// <p>The openCypher query parameters for query execution. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/opencypher-parameterized-queries.html">Examples of openCypher parameterized queries</a> for more information.</p>
    pub fn parameters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.parameters(input.into());
        self
    }
    /// <p>The openCypher query parameters for query execution. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/opencypher-parameterized-queries.html">Examples of openCypher parameterized queries</a> for more information.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_parameters(input);
        self
    }
    /// <p>The openCypher query parameters for query execution. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/opencypher-parameterized-queries.html">Examples of openCypher parameterized queries</a> for more information.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_parameters()
    }
}
