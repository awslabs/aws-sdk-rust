// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetLoaderJobStatusInput {
    /// <p>The load ID of the load job to get the status of.</p>
    pub load_id: ::std::option::Option<::std::string::String>,
    /// <p>Flag indicating whether or not to include details beyond the overall status (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    pub details: ::std::option::Option<bool>,
    /// <p>Flag indicating whether or not to include a list of errors encountered (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    /// <p>The list of errors is paged. The <code>page</code> and <code>errorsPerPage</code> parameters allow you to page through all the errors.</p>
    pub errors: ::std::option::Option<bool>,
    /// <p>The error page number (a positive integer; the default is <code>1</code>). Only valid when the <code>errors</code> parameter is set to <code>TRUE</code>.</p>
    pub page: ::std::option::Option<i32>,
    /// <p>The number of errors returned in each page (a positive integer; the default is <code>10</code>). Only valid when the <code>errors</code> parameter set to <code>TRUE</code>.</p>
    pub errors_per_page: ::std::option::Option<i32>,
}
impl GetLoaderJobStatusInput {
    /// <p>The load ID of the load job to get the status of.</p>
    pub fn load_id(&self) -> ::std::option::Option<&str> {
        self.load_id.as_deref()
    }
    /// <p>Flag indicating whether or not to include details beyond the overall status (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    pub fn details(&self) -> ::std::option::Option<bool> {
        self.details
    }
    /// <p>Flag indicating whether or not to include a list of errors encountered (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    /// <p>The list of errors is paged. The <code>page</code> and <code>errorsPerPage</code> parameters allow you to page through all the errors.</p>
    pub fn errors(&self) -> ::std::option::Option<bool> {
        self.errors
    }
    /// <p>The error page number (a positive integer; the default is <code>1</code>). Only valid when the <code>errors</code> parameter is set to <code>TRUE</code>.</p>
    pub fn page(&self) -> ::std::option::Option<i32> {
        self.page
    }
    /// <p>The number of errors returned in each page (a positive integer; the default is <code>10</code>). Only valid when the <code>errors</code> parameter set to <code>TRUE</code>.</p>
    pub fn errors_per_page(&self) -> ::std::option::Option<i32> {
        self.errors_per_page
    }
}
impl GetLoaderJobStatusInput {
    /// Creates a new builder-style object to manufacture [`GetLoaderJobStatusInput`](crate::operation::get_loader_job_status::GetLoaderJobStatusInput).
    pub fn builder() -> crate::operation::get_loader_job_status::builders::GetLoaderJobStatusInputBuilder {
        crate::operation::get_loader_job_status::builders::GetLoaderJobStatusInputBuilder::default()
    }
}

/// A builder for [`GetLoaderJobStatusInput`](crate::operation::get_loader_job_status::GetLoaderJobStatusInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetLoaderJobStatusInputBuilder {
    pub(crate) load_id: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<bool>,
    pub(crate) errors: ::std::option::Option<bool>,
    pub(crate) page: ::std::option::Option<i32>,
    pub(crate) errors_per_page: ::std::option::Option<i32>,
}
impl GetLoaderJobStatusInputBuilder {
    /// <p>The load ID of the load job to get the status of.</p>
    /// This field is required.
    pub fn load_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.load_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The load ID of the load job to get the status of.</p>
    pub fn set_load_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.load_id = input;
        self
    }
    /// <p>The load ID of the load job to get the status of.</p>
    pub fn get_load_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.load_id
    }
    /// <p>Flag indicating whether or not to include details beyond the overall status (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    pub fn details(mut self, input: bool) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Flag indicating whether or not to include details beyond the overall status (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    pub fn set_details(mut self, input: ::std::option::Option<bool>) -> Self {
        self.details = input;
        self
    }
    /// <p>Flag indicating whether or not to include details beyond the overall status (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    pub fn get_details(&self) -> &::std::option::Option<bool> {
        &self.details
    }
    /// <p>Flag indicating whether or not to include a list of errors encountered (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    /// <p>The list of errors is paged. The <code>page</code> and <code>errorsPerPage</code> parameters allow you to page through all the errors.</p>
    pub fn errors(mut self, input: bool) -> Self {
        self.errors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Flag indicating whether or not to include a list of errors encountered (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    /// <p>The list of errors is paged. The <code>page</code> and <code>errorsPerPage</code> parameters allow you to page through all the errors.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<bool>) -> Self {
        self.errors = input;
        self
    }
    /// <p>Flag indicating whether or not to include a list of errors encountered (<code>TRUE</code> or <code>FALSE</code>; the default is <code>FALSE</code>).</p>
    /// <p>The list of errors is paged. The <code>page</code> and <code>errorsPerPage</code> parameters allow you to page through all the errors.</p>
    pub fn get_errors(&self) -> &::std::option::Option<bool> {
        &self.errors
    }
    /// <p>The error page number (a positive integer; the default is <code>1</code>). Only valid when the <code>errors</code> parameter is set to <code>TRUE</code>.</p>
    pub fn page(mut self, input: i32) -> Self {
        self.page = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error page number (a positive integer; the default is <code>1</code>). Only valid when the <code>errors</code> parameter is set to <code>TRUE</code>.</p>
    pub fn set_page(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page = input;
        self
    }
    /// <p>The error page number (a positive integer; the default is <code>1</code>). Only valid when the <code>errors</code> parameter is set to <code>TRUE</code>.</p>
    pub fn get_page(&self) -> &::std::option::Option<i32> {
        &self.page
    }
    /// <p>The number of errors returned in each page (a positive integer; the default is <code>10</code>). Only valid when the <code>errors</code> parameter set to <code>TRUE</code>.</p>
    pub fn errors_per_page(mut self, input: i32) -> Self {
        self.errors_per_page = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of errors returned in each page (a positive integer; the default is <code>10</code>). Only valid when the <code>errors</code> parameter set to <code>TRUE</code>.</p>
    pub fn set_errors_per_page(mut self, input: ::std::option::Option<i32>) -> Self {
        self.errors_per_page = input;
        self
    }
    /// <p>The number of errors returned in each page (a positive integer; the default is <code>10</code>). Only valid when the <code>errors</code> parameter set to <code>TRUE</code>.</p>
    pub fn get_errors_per_page(&self) -> &::std::option::Option<i32> {
        &self.errors_per_page
    }
    /// Consumes the builder and constructs a [`GetLoaderJobStatusInput`](crate::operation::get_loader_job_status::GetLoaderJobStatusInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_loader_job_status::GetLoaderJobStatusInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_loader_job_status::GetLoaderJobStatusInput {
            load_id: self.load_id,
            details: self.details,
            errors: self.errors,
            page: self.page,
            errors_per_page: self.errors_per_page,
        })
    }
}
