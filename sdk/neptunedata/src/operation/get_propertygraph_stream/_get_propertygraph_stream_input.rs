// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPropertygraphStreamInput {
    /// <p>Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the <code>limit</code> parameter. The response does include a threshold-breaching record if the 10 MB limit was reached.</p>
    /// <p>The range for <code>limit</code> is 1 to 100,000, with a default of 10.</p>
    pub limit: ::std::option::Option<i64>,
    /// <p>Can be one of:</p>
    /// <ul>
    /// <li> <p> <code>AT_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start from the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>AFTER_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start right after the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>TRIM_HORIZON</code> &nbsp; – &nbsp; Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// <li> <p> <code>LATEST</code> &nbsp; – &nbsp; Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// </ul>
    pub iterator_type: ::std::option::Option<crate::types::IteratorType>,
    /// <p>The commit number of the starting record to read from the change-log stream. This parameter is required when <code>iteratorType</code> is<code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>, and ignored when <code>iteratorType</code> is <code>TRIM_HORIZON</code> or <code>LATEST</code>.</p>
    pub commit_num: ::std::option::Option<i64>,
    /// <p>The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is <code>1</code>.</p>
    pub op_num: ::std::option::Option<i64>,
    /// <p>If set to TRUE, Neptune compresses the response using gzip encoding.</p>
    pub encoding: ::std::option::Option<crate::types::Encoding>,
}
impl GetPropertygraphStreamInput {
    /// <p>Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the <code>limit</code> parameter. The response does include a threshold-breaching record if the 10 MB limit was reached.</p>
    /// <p>The range for <code>limit</code> is 1 to 100,000, with a default of 10.</p>
    pub fn limit(&self) -> ::std::option::Option<i64> {
        self.limit
    }
    /// <p>Can be one of:</p>
    /// <ul>
    /// <li> <p> <code>AT_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start from the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>AFTER_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start right after the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>TRIM_HORIZON</code> &nbsp; – &nbsp; Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// <li> <p> <code>LATEST</code> &nbsp; – &nbsp; Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// </ul>
    pub fn iterator_type(&self) -> ::std::option::Option<&crate::types::IteratorType> {
        self.iterator_type.as_ref()
    }
    /// <p>The commit number of the starting record to read from the change-log stream. This parameter is required when <code>iteratorType</code> is<code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>, and ignored when <code>iteratorType</code> is <code>TRIM_HORIZON</code> or <code>LATEST</code>.</p>
    pub fn commit_num(&self) -> ::std::option::Option<i64> {
        self.commit_num
    }
    /// <p>The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is <code>1</code>.</p>
    pub fn op_num(&self) -> ::std::option::Option<i64> {
        self.op_num
    }
    /// <p>If set to TRUE, Neptune compresses the response using gzip encoding.</p>
    pub fn encoding(&self) -> ::std::option::Option<&crate::types::Encoding> {
        self.encoding.as_ref()
    }
}
impl GetPropertygraphStreamInput {
    /// Creates a new builder-style object to manufacture [`GetPropertygraphStreamInput`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamInput).
    pub fn builder() -> crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamInputBuilder {
        crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamInputBuilder::default()
    }
}

/// A builder for [`GetPropertygraphStreamInput`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetPropertygraphStreamInputBuilder {
    pub(crate) limit: ::std::option::Option<i64>,
    pub(crate) iterator_type: ::std::option::Option<crate::types::IteratorType>,
    pub(crate) commit_num: ::std::option::Option<i64>,
    pub(crate) op_num: ::std::option::Option<i64>,
    pub(crate) encoding: ::std::option::Option<crate::types::Encoding>,
}
impl GetPropertygraphStreamInputBuilder {
    /// <p>Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the <code>limit</code> parameter. The response does include a threshold-breaching record if the 10 MB limit was reached.</p>
    /// <p>The range for <code>limit</code> is 1 to 100,000, with a default of 10.</p>
    pub fn limit(mut self, input: i64) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the <code>limit</code> parameter. The response does include a threshold-breaching record if the 10 MB limit was reached.</p>
    /// <p>The range for <code>limit</code> is 1 to 100,000, with a default of 10.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i64>) -> Self {
        self.limit = input;
        self
    }
    /// <p>Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the <code>limit</code> parameter. The response does include a threshold-breaching record if the 10 MB limit was reached.</p>
    /// <p>The range for <code>limit</code> is 1 to 100,000, with a default of 10.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i64> {
        &self.limit
    }
    /// <p>Can be one of:</p>
    /// <ul>
    /// <li> <p> <code>AT_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start from the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>AFTER_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start right after the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>TRIM_HORIZON</code> &nbsp; – &nbsp; Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// <li> <p> <code>LATEST</code> &nbsp; – &nbsp; Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// </ul>
    pub fn iterator_type(mut self, input: crate::types::IteratorType) -> Self {
        self.iterator_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Can be one of:</p>
    /// <ul>
    /// <li> <p> <code>AT_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start from the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>AFTER_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start right after the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>TRIM_HORIZON</code> &nbsp; – &nbsp; Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// <li> <p> <code>LATEST</code> &nbsp; – &nbsp; Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// </ul>
    pub fn set_iterator_type(mut self, input: ::std::option::Option<crate::types::IteratorType>) -> Self {
        self.iterator_type = input;
        self
    }
    /// <p>Can be one of:</p>
    /// <ul>
    /// <li> <p> <code>AT_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start from the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>AFTER_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start right after the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p> </li>
    /// <li> <p> <code>TRIM_HORIZON</code> &nbsp; – &nbsp; Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// <li> <p> <code>LATEST</code> &nbsp; – &nbsp; Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.</p> </li>
    /// </ul>
    pub fn get_iterator_type(&self) -> &::std::option::Option<crate::types::IteratorType> {
        &self.iterator_type
    }
    /// <p>The commit number of the starting record to read from the change-log stream. This parameter is required when <code>iteratorType</code> is<code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>, and ignored when <code>iteratorType</code> is <code>TRIM_HORIZON</code> or <code>LATEST</code>.</p>
    pub fn commit_num(mut self, input: i64) -> Self {
        self.commit_num = ::std::option::Option::Some(input);
        self
    }
    /// <p>The commit number of the starting record to read from the change-log stream. This parameter is required when <code>iteratorType</code> is<code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>, and ignored when <code>iteratorType</code> is <code>TRIM_HORIZON</code> or <code>LATEST</code>.</p>
    pub fn set_commit_num(mut self, input: ::std::option::Option<i64>) -> Self {
        self.commit_num = input;
        self
    }
    /// <p>The commit number of the starting record to read from the change-log stream. This parameter is required when <code>iteratorType</code> is<code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>, and ignored when <code>iteratorType</code> is <code>TRIM_HORIZON</code> or <code>LATEST</code>.</p>
    pub fn get_commit_num(&self) -> &::std::option::Option<i64> {
        &self.commit_num
    }
    /// <p>The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is <code>1</code>.</p>
    pub fn op_num(mut self, input: i64) -> Self {
        self.op_num = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is <code>1</code>.</p>
    pub fn set_op_num(mut self, input: ::std::option::Option<i64>) -> Self {
        self.op_num = input;
        self
    }
    /// <p>The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is <code>1</code>.</p>
    pub fn get_op_num(&self) -> &::std::option::Option<i64> {
        &self.op_num
    }
    /// <p>If set to TRUE, Neptune compresses the response using gzip encoding.</p>
    pub fn encoding(mut self, input: crate::types::Encoding) -> Self {
        self.encoding = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to TRUE, Neptune compresses the response using gzip encoding.</p>
    pub fn set_encoding(mut self, input: ::std::option::Option<crate::types::Encoding>) -> Self {
        self.encoding = input;
        self
    }
    /// <p>If set to TRUE, Neptune compresses the response using gzip encoding.</p>
    pub fn get_encoding(&self) -> &::std::option::Option<crate::types::Encoding> {
        &self.encoding
    }
    /// Consumes the builder and constructs a [`GetPropertygraphStreamInput`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_propertygraph_stream::GetPropertygraphStreamInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_propertygraph_stream::GetPropertygraphStreamInput {
            limit: self.limit,
            iterator_type: self.iterator_type,
            commit_num: self.commit_num,
            op_num: self.op_num,
            encoding: self.encoding,
        })
    }
}
