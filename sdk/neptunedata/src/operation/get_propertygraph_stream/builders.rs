// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_propertygraph_stream::_get_propertygraph_stream_output::GetPropertygraphStreamOutputBuilder;

pub use crate::operation::get_propertygraph_stream::_get_propertygraph_stream_input::GetPropertygraphStreamInputBuilder;

impl crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_propertygraph_stream::GetPropertygraphStreamError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_propertygraph_stream();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetPropertygraphStream`.
///
/// <p>Gets a stream for a property graph.</p>
/// <p>With the Neptune Streams feature, you can generate a complete sequence of change-log entries that record every change made to your graph data as it happens. <code>GetPropertygraphStream</code> lets you collect these change-log entries for a property graph.</p>
/// <p>The Neptune streams feature needs to be enabled on your Neptune DBcluster. To enable streams, set the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/parameters.html#parameters-db-cluster-parameters-neptune_streams">neptune_streams</a> DB cluster parameter to <code>1</code>.</p>
/// <p>See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/streams.html">Capturing graph changes in real time using Neptune streams</a>.</p>
/// <p>When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#getstreamrecords">neptune-db:GetStreamRecords</a> IAM action in that cluster.</p>
/// <p>When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that enables one of the following IAM actions, depending on the query:</p>
/// <p>Note that you can restrict property-graph queries using the following IAM context keys:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-data-condition-keys.html#iam-neptune-condition-keys">neptune-db:QueryLanguage:Gremlin</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-data-condition-keys.html#iam-neptune-condition-keys">neptune-db:QueryLanguage:OpenCypher</a></p></li>
/// </ul>
/// <p>See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-data-condition-keys.html">Condition keys available in Neptune IAM data-access policy statements</a>).</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetPropertygraphStreamFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput,
        crate::operation::get_propertygraph_stream::GetPropertygraphStreamError,
    > for GetPropertygraphStreamFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput,
            crate::operation::get_propertygraph_stream::GetPropertygraphStreamError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetPropertygraphStreamFluentBuilder {
    /// Creates a new `GetPropertygraphStream`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetPropertygraphStream as a reference.
    pub fn as_input(&self) -> &crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_propertygraph_stream::GetPropertygraphStreamError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_propertygraph_stream::GetPropertygraphStream::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_propertygraph_stream::GetPropertygraphStream::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput,
        crate::operation::get_propertygraph_stream::GetPropertygraphStreamError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the <code>limit</code> parameter. The response does include a threshold-breaching record if the 10 MB limit was reached.</p>
    /// <p>The range for <code>limit</code> is 1 to 100,000, with a default of 10.</p>
    pub fn limit(mut self, input: i64) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the <code>limit</code> parameter. The response does include a threshold-breaching record if the 10 MB limit was reached.</p>
    /// <p>The range for <code>limit</code> is 1 to 100,000, with a default of 10.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the <code>limit</code> parameter. The response does include a threshold-breaching record if the 10 MB limit was reached.</p>
    /// <p>The range for <code>limit</code> is 1 to 100,000, with a default of 10.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i64> {
        self.inner.get_limit()
    }
    /// <p>Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>AT_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start from the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p></li>
    /// <li>
    /// <p><code>AFTER_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start right after the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p></li>
    /// <li>
    /// <p><code>TRIM_HORIZON</code> &nbsp; – &nbsp; Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.</p></li>
    /// <li>
    /// <p><code>LATEST</code> &nbsp; – &nbsp; Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.</p></li>
    /// </ul>
    pub fn iterator_type(mut self, input: crate::types::IteratorType) -> Self {
        self.inner = self.inner.iterator_type(input);
        self
    }
    /// <p>Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>AT_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start from the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p></li>
    /// <li>
    /// <p><code>AFTER_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start right after the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p></li>
    /// <li>
    /// <p><code>TRIM_HORIZON</code> &nbsp; – &nbsp; Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.</p></li>
    /// <li>
    /// <p><code>LATEST</code> &nbsp; – &nbsp; Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.</p></li>
    /// </ul>
    pub fn set_iterator_type(mut self, input: ::std::option::Option<crate::types::IteratorType>) -> Self {
        self.inner = self.inner.set_iterator_type(input);
        self
    }
    /// <p>Can be one of:</p>
    /// <ul>
    /// <li>
    /// <p><code>AT_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start from the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p></li>
    /// <li>
    /// <p><code>AFTER_SEQUENCE_NUMBER</code> &nbsp; – &nbsp; Indicates that reading should start right after the event sequence number specified jointly by the <code>commitNum</code> and <code>opNum</code> parameters.</p></li>
    /// <li>
    /// <p><code>TRIM_HORIZON</code> &nbsp; – &nbsp; Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.</p></li>
    /// <li>
    /// <p><code>LATEST</code> &nbsp; – &nbsp; Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.</p></li>
    /// </ul>
    pub fn get_iterator_type(&self) -> &::std::option::Option<crate::types::IteratorType> {
        self.inner.get_iterator_type()
    }
    /// <p>The commit number of the starting record to read from the change-log stream. This parameter is required when <code>iteratorType</code> is<code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>, and ignored when <code>iteratorType</code> is <code>TRIM_HORIZON</code> or <code>LATEST</code>.</p>
    pub fn commit_num(mut self, input: i64) -> Self {
        self.inner = self.inner.commit_num(input);
        self
    }
    /// <p>The commit number of the starting record to read from the change-log stream. This parameter is required when <code>iteratorType</code> is<code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>, and ignored when <code>iteratorType</code> is <code>TRIM_HORIZON</code> or <code>LATEST</code>.</p>
    pub fn set_commit_num(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_commit_num(input);
        self
    }
    /// <p>The commit number of the starting record to read from the change-log stream. This parameter is required when <code>iteratorType</code> is<code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>, and ignored when <code>iteratorType</code> is <code>TRIM_HORIZON</code> or <code>LATEST</code>.</p>
    pub fn get_commit_num(&self) -> &::std::option::Option<i64> {
        self.inner.get_commit_num()
    }
    /// <p>The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is <code>1</code>.</p>
    pub fn op_num(mut self, input: i64) -> Self {
        self.inner = self.inner.op_num(input);
        self
    }
    /// <p>The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is <code>1</code>.</p>
    pub fn set_op_num(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_op_num(input);
        self
    }
    /// <p>The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is <code>1</code>.</p>
    pub fn get_op_num(&self) -> &::std::option::Option<i64> {
        self.inner.get_op_num()
    }
    /// <p>If set to TRUE, Neptune compresses the response using gzip encoding.</p>
    pub fn encoding(mut self, input: crate::types::Encoding) -> Self {
        self.inner = self.inner.encoding(input);
        self
    }
    /// <p>If set to TRUE, Neptune compresses the response using gzip encoding.</p>
    pub fn set_encoding(mut self, input: ::std::option::Option<crate::types::Encoding>) -> Self {
        self.inner = self.inner.set_encoding(input);
        self
    }
    /// <p>If set to TRUE, Neptune compresses the response using gzip encoding.</p>
    pub fn get_encoding(&self) -> &::std::option::Option<crate::types::Encoding> {
        self.inner.get_encoding()
    }
}
