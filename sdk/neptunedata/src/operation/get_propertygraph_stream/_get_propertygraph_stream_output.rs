// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPropertygraphStreamOutput {
    /// <p>Sequence identifier of the last change in the stream response.</p>
    /// <p>An event ID is composed of two fields: a <code>commitNum</code>, which identifies a transaction that changed the graph, and an <code>opNum</code>, which identifies a specific operation within that transaction:</p>
    pub last_event_id: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    pub last_trx_timestamp_in_millis: i64,
    /// <p>Serialization format for the change records being returned. Currently, the only supported value is <code>PG_JSON</code>.</p>
    pub format: ::std::string::String,
    /// <p>An array of serialized change-log stream records included in the response.</p>
    pub records: ::std::vec::Vec<crate::types::PropertygraphRecord>,
    /// <p>The total number of records in the response.</p>
    pub total_records: i32,
    _request_id: Option<String>,
}
impl GetPropertygraphStreamOutput {
    /// <p>Sequence identifier of the last change in the stream response.</p>
    /// <p>An event ID is composed of two fields: a <code>commitNum</code>, which identifies a transaction that changed the graph, and an <code>opNum</code>, which identifies a specific operation within that transaction:</p>
    pub fn last_event_id(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.last_event_id
    }
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    pub fn last_trx_timestamp_in_millis(&self) -> i64 {
        self.last_trx_timestamp_in_millis
    }
    /// <p>Serialization format for the change records being returned. Currently, the only supported value is <code>PG_JSON</code>.</p>
    pub fn format(&self) -> &str {
        use std::ops::Deref;
        self.format.deref()
    }
    /// <p>An array of serialized change-log stream records included in the response.</p>
    pub fn records(&self) -> &[crate::types::PropertygraphRecord] {
        use std::ops::Deref;
        self.records.deref()
    }
    /// <p>The total number of records in the response.</p>
    pub fn total_records(&self) -> i32 {
        self.total_records
    }
}
impl ::aws_http::request_id::RequestId for GetPropertygraphStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPropertygraphStreamOutput {
    /// Creates a new builder-style object to manufacture [`GetPropertygraphStreamOutput`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput).
    pub fn builder() -> crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamOutputBuilder {
        crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamOutputBuilder::default()
    }
}

/// A builder for [`GetPropertygraphStreamOutput`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetPropertygraphStreamOutputBuilder {
    pub(crate) last_event_id: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) last_trx_timestamp_in_millis: ::std::option::Option<i64>,
    pub(crate) format: ::std::option::Option<::std::string::String>,
    pub(crate) records: ::std::option::Option<::std::vec::Vec<crate::types::PropertygraphRecord>>,
    pub(crate) total_records: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetPropertygraphStreamOutputBuilder {
    /// Adds a key-value pair to `last_event_id`.
    ///
    /// To override the contents of this collection use [`set_last_event_id`](Self::set_last_event_id).
    ///
    /// <p>Sequence identifier of the last change in the stream response.</p>
    /// <p>An event ID is composed of two fields: a <code>commitNum</code>, which identifies a transaction that changed the graph, and an <code>opNum</code>, which identifies a specific operation within that transaction:</p>
    pub fn last_event_id(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.last_event_id.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.last_event_id = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Sequence identifier of the last change in the stream response.</p>
    /// <p>An event ID is composed of two fields: a <code>commitNum</code>, which identifies a transaction that changed the graph, and an <code>opNum</code>, which identifies a specific operation within that transaction:</p>
    pub fn set_last_event_id(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.last_event_id = input;
        self
    }
    /// <p>Sequence identifier of the last change in the stream response.</p>
    /// <p>An event ID is composed of two fields: a <code>commitNum</code>, which identifies a transaction that changed the graph, and an <code>opNum</code>, which identifies a specific operation within that transaction:</p>
    pub fn get_last_event_id(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.last_event_id
    }
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    /// This field is required.
    pub fn last_trx_timestamp_in_millis(mut self, input: i64) -> Self {
        self.last_trx_timestamp_in_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    pub fn set_last_trx_timestamp_in_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_trx_timestamp_in_millis = input;
        self
    }
    /// <p>The time at which the commit for the transaction was requested, in milliseconds from the Unix epoch.</p>
    pub fn get_last_trx_timestamp_in_millis(&self) -> &::std::option::Option<i64> {
        &self.last_trx_timestamp_in_millis
    }
    /// <p>Serialization format for the change records being returned. Currently, the only supported value is <code>PG_JSON</code>.</p>
    /// This field is required.
    pub fn format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Serialization format for the change records being returned. Currently, the only supported value is <code>PG_JSON</code>.</p>
    pub fn set_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>Serialization format for the change records being returned. Currently, the only supported value is <code>PG_JSON</code>.</p>
    pub fn get_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.format
    }
    /// Appends an item to `records`.
    ///
    /// To override the contents of this collection use [`set_records`](Self::set_records).
    ///
    /// <p>An array of serialized change-log stream records included in the response.</p>
    pub fn records(mut self, input: crate::types::PropertygraphRecord) -> Self {
        let mut v = self.records.unwrap_or_default();
        v.push(input);
        self.records = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of serialized change-log stream records included in the response.</p>
    pub fn set_records(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PropertygraphRecord>>) -> Self {
        self.records = input;
        self
    }
    /// <p>An array of serialized change-log stream records included in the response.</p>
    pub fn get_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PropertygraphRecord>> {
        &self.records
    }
    /// <p>The total number of records in the response.</p>
    /// This field is required.
    pub fn total_records(mut self, input: i32) -> Self {
        self.total_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of records in the response.</p>
    pub fn set_total_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_records = input;
        self
    }
    /// <p>The total number of records in the response.</p>
    pub fn get_total_records(&self) -> &::std::option::Option<i32> {
        &self.total_records
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPropertygraphStreamOutput`](crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`last_event_id`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamOutputBuilder::last_event_id)
    /// - [`last_trx_timestamp_in_millis`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamOutputBuilder::last_trx_timestamp_in_millis)
    /// - [`format`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamOutputBuilder::format)
    /// - [`records`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamOutputBuilder::records)
    /// - [`total_records`](crate::operation::get_propertygraph_stream::builders::GetPropertygraphStreamOutputBuilder::total_records)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_propertygraph_stream::GetPropertygraphStreamOutput {
            last_event_id: self.last_event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_event_id",
                    "last_event_id was not specified but it is required when building GetPropertygraphStreamOutput",
                )
            })?,
            last_trx_timestamp_in_millis: self.last_trx_timestamp_in_millis.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_trx_timestamp_in_millis",
                    "last_trx_timestamp_in_millis was not specified but it is required when building GetPropertygraphStreamOutput",
                )
            })?,
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building GetPropertygraphStreamOutput",
                )
            })?,
            records: self.records.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "records",
                    "records was not specified but it is required when building GetPropertygraphStreamOutput",
                )
            })?,
            total_records: self.total_records.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "total_records",
                    "total_records was not specified but it is required when building GetPropertygraphStreamOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
