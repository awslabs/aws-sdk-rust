// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::execute_gremlin_profile_query::_execute_gremlin_profile_query_output::ExecuteGremlinProfileQueryOutputBuilder;

pub use crate::operation::execute_gremlin_profile_query::_execute_gremlin_profile_query_input::ExecuteGremlinProfileQueryInputBuilder;

impl ExecuteGremlinProfileQueryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.execute_gremlin_profile_query();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ExecuteGremlinProfileQuery`.
///
/// <p>Executes a Gremlin Profile query, which runs a specified traversal, collects various metrics about the run, and produces a profile report as output. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/gremlin-profile-api.html">Gremlin profile API in Neptune</a> for details.</p>
/// <p>When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#readdataviaquery">neptune-db:ReadDataViaQuery</a> IAM action in that cluster.</p>
/// <p>Note that the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-data-condition-keys.html#iam-neptune-condition-keys">neptune-db:QueryLanguage:Gremlin</a> IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-data-condition-keys.html">Condition keys available in Neptune IAM data-access policy statements</a>).</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ExecuteGremlinProfileQueryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::execute_gremlin_profile_query::builders::ExecuteGremlinProfileQueryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryOutput,
        crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryError,
    > for ExecuteGremlinProfileQueryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryOutput,
            crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ExecuteGremlinProfileQueryFluentBuilder {
    /// Creates a new `ExecuteGremlinProfileQuery`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ExecuteGremlinProfileQuery as a reference.
    pub fn as_input(&self) -> &crate::operation::execute_gremlin_profile_query::builders::ExecuteGremlinProfileQueryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQuery::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQuery::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryOutput,
        crate::operation::execute_gremlin_profile_query::ExecuteGremlinProfileQueryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Gremlin query string to profile.</p>
    pub fn gremlin_query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.gremlin_query(input.into());
        self
    }
    /// <p>The Gremlin query string to profile.</p>
    pub fn set_gremlin_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_gremlin_query(input);
        self
    }
    /// <p>The Gremlin query string to profile.</p>
    pub fn get_gremlin_query(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_gremlin_query()
    }
    /// <p>If this flag is set to <code>TRUE</code>, the query results are gathered and displayed as part of the profile report. If <code>FALSE</code>, only the result count is displayed.</p>
    pub fn results(mut self, input: bool) -> Self {
        self.inner = self.inner.results(input);
        self
    }
    /// <p>If this flag is set to <code>TRUE</code>, the query results are gathered and displayed as part of the profile report. If <code>FALSE</code>, only the result count is displayed.</p>
    pub fn set_results(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_results(input);
        self
    }
    /// <p>If this flag is set to <code>TRUE</code>, the query results are gathered and displayed as part of the profile report. If <code>FALSE</code>, only the result count is displayed.</p>
    pub fn get_results(&self) -> &::std::option::Option<bool> {
        self.inner.get_results()
    }
    /// <p>If non-zero, causes the results string to be truncated at that number of characters. If set to zero, the string contains all the results.</p>
    pub fn chop(mut self, input: i32) -> Self {
        self.inner = self.inner.chop(input);
        self
    }
    /// <p>If non-zero, causes the results string to be truncated at that number of characters. If set to zero, the string contains all the results.</p>
    pub fn set_chop(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_chop(input);
        self
    }
    /// <p>If non-zero, causes the results string to be truncated at that number of characters. If set to zero, the string contains all the results.</p>
    pub fn get_chop(&self) -> &::std::option::Option<i32> {
        self.inner.get_chop()
    }
    /// <p>If non-null, the gathered results are returned in a serialized response message in the format specified by this parameter. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/gremlin-profile-api.html">Gremlin profile API in Neptune</a> for more information.</p>
    pub fn serializer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.serializer(input.into());
        self
    }
    /// <p>If non-null, the gathered results are returned in a serialized response message in the format specified by this parameter. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/gremlin-profile-api.html">Gremlin profile API in Neptune</a> for more information.</p>
    pub fn set_serializer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_serializer(input);
        self
    }
    /// <p>If non-null, the gathered results are returned in a serialized response message in the format specified by this parameter. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/gremlin-profile-api.html">Gremlin profile API in Neptune</a> for more information.</p>
    pub fn get_serializer(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_serializer()
    }
    /// <p>If this flag is set to <code>TRUE</code>, the results include a detailed report of all index operations that took place during query execution and serialization.</p>
    pub fn index_ops(mut self, input: bool) -> Self {
        self.inner = self.inner.index_ops(input);
        self
    }
    /// <p>If this flag is set to <code>TRUE</code>, the results include a detailed report of all index operations that took place during query execution and serialization.</p>
    pub fn set_index_ops(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_index_ops(input);
        self
    }
    /// <p>If this flag is set to <code>TRUE</code>, the results include a detailed report of all index operations that took place during query execution and serialization.</p>
    pub fn get_index_ops(&self) -> &::std::option::Option<bool> {
        self.inner.get_index_ops()
    }
}
