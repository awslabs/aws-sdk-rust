// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecuteFastResetInput {
    /// <p>The fast reset action. One of the following values:</p>
    /// <ul>
    /// <li> <p> <b> <code>initiateDatabaseReset</code> </b> &nbsp; – &nbsp; This action generates a unique token needed to actually perform the fast reset.</p> </li>
    /// <li> <p> <b> <code>performDatabaseReset</code> </b> &nbsp; – &nbsp; This action uses the token generated by the <code>initiateDatabaseReset</code> action to actually perform the fast reset.</p> <p></p> </li>
    /// </ul>
    pub action: ::std::option::Option<crate::types::Action>,
    /// <p>The fast-reset token to initiate the reset.</p>
    pub token: ::std::option::Option<::std::string::String>,
}
impl ExecuteFastResetInput {
    /// <p>The fast reset action. One of the following values:</p>
    /// <ul>
    /// <li> <p> <b> <code>initiateDatabaseReset</code> </b> &nbsp; – &nbsp; This action generates a unique token needed to actually perform the fast reset.</p> </li>
    /// <li> <p> <b> <code>performDatabaseReset</code> </b> &nbsp; – &nbsp; This action uses the token generated by the <code>initiateDatabaseReset</code> action to actually perform the fast reset.</p> <p></p> </li>
    /// </ul>
    pub fn action(&self) -> ::std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }
    /// <p>The fast-reset token to initiate the reset.</p>
    pub fn token(&self) -> ::std::option::Option<&str> {
        self.token.as_deref()
    }
}
impl ExecuteFastResetInput {
    /// Creates a new builder-style object to manufacture [`ExecuteFastResetInput`](crate::operation::execute_fast_reset::ExecuteFastResetInput).
    pub fn builder() -> crate::operation::execute_fast_reset::builders::ExecuteFastResetInputBuilder {
        crate::operation::execute_fast_reset::builders::ExecuteFastResetInputBuilder::default()
    }
}

/// A builder for [`ExecuteFastResetInput`](crate::operation::execute_fast_reset::ExecuteFastResetInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecuteFastResetInputBuilder {
    pub(crate) action: ::std::option::Option<crate::types::Action>,
    pub(crate) token: ::std::option::Option<::std::string::String>,
}
impl ExecuteFastResetInputBuilder {
    /// <p>The fast reset action. One of the following values:</p>
    /// <ul>
    /// <li> <p> <b> <code>initiateDatabaseReset</code> </b> &nbsp; – &nbsp; This action generates a unique token needed to actually perform the fast reset.</p> </li>
    /// <li> <p> <b> <code>performDatabaseReset</code> </b> &nbsp; – &nbsp; This action uses the token generated by the <code>initiateDatabaseReset</code> action to actually perform the fast reset.</p> <p></p> </li>
    /// </ul>
    /// This field is required.
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The fast reset action. One of the following values:</p>
    /// <ul>
    /// <li> <p> <b> <code>initiateDatabaseReset</code> </b> &nbsp; – &nbsp; This action generates a unique token needed to actually perform the fast reset.</p> </li>
    /// <li> <p> <b> <code>performDatabaseReset</code> </b> &nbsp; – &nbsp; This action uses the token generated by the <code>initiateDatabaseReset</code> action to actually perform the fast reset.</p> <p></p> </li>
    /// </ul>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>The fast reset action. One of the following values:</p>
    /// <ul>
    /// <li> <p> <b> <code>initiateDatabaseReset</code> </b> &nbsp; – &nbsp; This action generates a unique token needed to actually perform the fast reset.</p> </li>
    /// <li> <p> <b> <code>performDatabaseReset</code> </b> &nbsp; – &nbsp; This action uses the token generated by the <code>initiateDatabaseReset</code> action to actually perform the fast reset.</p> <p></p> </li>
    /// </ul>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        &self.action
    }
    /// <p>The fast-reset token to initiate the reset.</p>
    pub fn token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fast-reset token to initiate the reset.</p>
    pub fn set_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.token = input;
        self
    }
    /// <p>The fast-reset token to initiate the reset.</p>
    pub fn get_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.token
    }
    /// Consumes the builder and constructs a [`ExecuteFastResetInput`](crate::operation::execute_fast_reset::ExecuteFastResetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::execute_fast_reset::ExecuteFastResetInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::execute_fast_reset::ExecuteFastResetInput {
            action: self.action,
            token: self.token,
        })
    }
}
