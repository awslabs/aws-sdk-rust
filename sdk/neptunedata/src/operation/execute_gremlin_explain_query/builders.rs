// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::execute_gremlin_explain_query::_execute_gremlin_explain_query_output::ExecuteGremlinExplainQueryOutputBuilder;

pub use crate::operation::execute_gremlin_explain_query::_execute_gremlin_explain_query_input::ExecuteGremlinExplainQueryInputBuilder;

impl ExecuteGremlinExplainQueryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.execute_gremlin_explain_query();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ExecuteGremlinExplainQuery`.
///
/// <p>Executes a Gremlin Explain query.</p>
/// <p>Amazon Neptune has added a Gremlin feature named <code>explain</code> that provides is a self-service tool for understanding the execution approach being taken by the Neptune engine for the query. You invoke it by adding an <code>explain</code> parameter to an HTTP call that submits a Gremlin query.</p>
/// <p>The explain feature provides information about the logical structure of query execution plans. You can use this information to identify potential evaluation and execution bottlenecks and to tune your query, as explained in <a href="https://docs.aws.amazon.com/neptune/latest/userguide/gremlin-traversal-tuning.html">Tuning Gremlin queries</a>. You can also use query hints to improve query execution plans.</p>
/// <p>When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:</p>
/// <ul>
/// <li> <p> <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#readdataviaquery">neptune-db:ReadDataViaQuery</a> </p> </li>
/// <li> <p> <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#writedataviaquery">neptune-db:WriteDataViaQuery</a> </p> </li>
/// <li> <p> <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#deletedataviaquery">neptune-db:DeleteDataViaQuery</a> </p> </li>
/// </ul>
/// <p>Note that the <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-data-condition-keys.html#iam-neptune-condition-keys">neptune-db:QueryLanguage:Gremlin</a> IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-data-condition-keys.html">Condition keys available in Neptune IAM data-access policy statements</a>).</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ExecuteGremlinExplainQueryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::execute_gremlin_explain_query::builders::ExecuteGremlinExplainQueryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryOutput,
        crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryError,
    > for ExecuteGremlinExplainQueryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryOutput,
            crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ExecuteGremlinExplainQueryFluentBuilder {
    /// Creates a new `ExecuteGremlinExplainQuery`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ExecuteGremlinExplainQuery as a reference.
    pub fn as_input(&self) -> &crate::operation::execute_gremlin_explain_query::builders::ExecuteGremlinExplainQueryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQuery::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQuery::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryOutput,
        crate::operation::execute_gremlin_explain_query::ExecuteGremlinExplainQueryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Gremlin explain query string.</p>
    pub fn gremlin_query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.gremlin_query(input.into());
        self
    }
    /// <p>The Gremlin explain query string.</p>
    pub fn set_gremlin_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_gremlin_query(input);
        self
    }
    /// <p>The Gremlin explain query string.</p>
    pub fn get_gremlin_query(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_gremlin_query()
    }
}
