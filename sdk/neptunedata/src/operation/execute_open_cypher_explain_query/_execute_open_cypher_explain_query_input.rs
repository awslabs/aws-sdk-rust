// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecuteOpenCypherExplainQueryInput {
    /// <p>The openCypher query string.</p>
    pub open_cypher_query: ::std::option::Option<::std::string::String>,
    /// <p>The openCypher query parameters.</p>
    pub parameters: ::std::option::Option<::std::string::String>,
    /// <p>The openCypher <code>explain</code> mode. Can be one of: <code>static</code>, <code>dynamic</code>, or <code>details</code>.</p>
    pub explain_mode: ::std::option::Option<crate::types::OpenCypherExplainMode>,
}
impl ExecuteOpenCypherExplainQueryInput {
    /// <p>The openCypher query string.</p>
    pub fn open_cypher_query(&self) -> ::std::option::Option<&str> {
        self.open_cypher_query.as_deref()
    }
    /// <p>The openCypher query parameters.</p>
    pub fn parameters(&self) -> ::std::option::Option<&str> {
        self.parameters.as_deref()
    }
    /// <p>The openCypher <code>explain</code> mode. Can be one of: <code>static</code>, <code>dynamic</code>, or <code>details</code>.</p>
    pub fn explain_mode(&self) -> ::std::option::Option<&crate::types::OpenCypherExplainMode> {
        self.explain_mode.as_ref()
    }
}
impl ExecuteOpenCypherExplainQueryInput {
    /// Creates a new builder-style object to manufacture [`ExecuteOpenCypherExplainQueryInput`](crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryInput).
    pub fn builder() -> crate::operation::execute_open_cypher_explain_query::builders::ExecuteOpenCypherExplainQueryInputBuilder {
        crate::operation::execute_open_cypher_explain_query::builders::ExecuteOpenCypherExplainQueryInputBuilder::default()
    }
}

/// A builder for [`ExecuteOpenCypherExplainQueryInput`](crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecuteOpenCypherExplainQueryInputBuilder {
    pub(crate) open_cypher_query: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::string::String>,
    pub(crate) explain_mode: ::std::option::Option<crate::types::OpenCypherExplainMode>,
}
impl ExecuteOpenCypherExplainQueryInputBuilder {
    /// <p>The openCypher query string.</p>
    /// This field is required.
    pub fn open_cypher_query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.open_cypher_query = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The openCypher query string.</p>
    pub fn set_open_cypher_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.open_cypher_query = input;
        self
    }
    /// <p>The openCypher query string.</p>
    pub fn get_open_cypher_query(&self) -> &::std::option::Option<::std::string::String> {
        &self.open_cypher_query
    }
    /// <p>The openCypher query parameters.</p>
    pub fn parameters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameters = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The openCypher query parameters.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The openCypher query parameters.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameters
    }
    /// <p>The openCypher <code>explain</code> mode. Can be one of: <code>static</code>, <code>dynamic</code>, or <code>details</code>.</p>
    /// This field is required.
    pub fn explain_mode(mut self, input: crate::types::OpenCypherExplainMode) -> Self {
        self.explain_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The openCypher <code>explain</code> mode. Can be one of: <code>static</code>, <code>dynamic</code>, or <code>details</code>.</p>
    pub fn set_explain_mode(mut self, input: ::std::option::Option<crate::types::OpenCypherExplainMode>) -> Self {
        self.explain_mode = input;
        self
    }
    /// <p>The openCypher <code>explain</code> mode. Can be one of: <code>static</code>, <code>dynamic</code>, or <code>details</code>.</p>
    pub fn get_explain_mode(&self) -> &::std::option::Option<crate::types::OpenCypherExplainMode> {
        &self.explain_mode
    }
    /// Consumes the builder and constructs a [`ExecuteOpenCypherExplainQueryInput`](crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryInput {
            open_cypher_query: self.open_cypher_query,
            parameters: self.parameters,
            explain_mode: self.explain_mode,
        })
    }
}
