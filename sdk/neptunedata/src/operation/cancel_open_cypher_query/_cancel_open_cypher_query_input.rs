// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CancelOpenCypherQueryInput {
    /// <p>The unique ID of the openCypher query to cancel.</p>
    pub query_id: ::std::option::Option<::std::string::String>,
    /// <p>If set to <code>TRUE</code>, causes the cancelation of the openCypher query to happen silently.</p>
    pub silent: ::std::option::Option<bool>,
}
impl CancelOpenCypherQueryInput {
    /// <p>The unique ID of the openCypher query to cancel.</p>
    pub fn query_id(&self) -> ::std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>If set to <code>TRUE</code>, causes the cancelation of the openCypher query to happen silently.</p>
    pub fn silent(&self) -> ::std::option::Option<bool> {
        self.silent
    }
}
impl CancelOpenCypherQueryInput {
    /// Creates a new builder-style object to manufacture [`CancelOpenCypherQueryInput`](crate::operation::cancel_open_cypher_query::CancelOpenCypherQueryInput).
    pub fn builder() -> crate::operation::cancel_open_cypher_query::builders::CancelOpenCypherQueryInputBuilder {
        crate::operation::cancel_open_cypher_query::builders::CancelOpenCypherQueryInputBuilder::default()
    }
}

/// A builder for [`CancelOpenCypherQueryInput`](crate::operation::cancel_open_cypher_query::CancelOpenCypherQueryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CancelOpenCypherQueryInputBuilder {
    pub(crate) query_id: ::std::option::Option<::std::string::String>,
    pub(crate) silent: ::std::option::Option<bool>,
}
impl CancelOpenCypherQueryInputBuilder {
    /// <p>The unique ID of the openCypher query to cancel.</p>
    /// This field is required.
    pub fn query_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the openCypher query to cancel.</p>
    pub fn set_query_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>The unique ID of the openCypher query to cancel.</p>
    pub fn get_query_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_id
    }
    /// <p>If set to <code>TRUE</code>, causes the cancelation of the openCypher query to happen silently.</p>
    pub fn silent(mut self, input: bool) -> Self {
        self.silent = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to <code>TRUE</code>, causes the cancelation of the openCypher query to happen silently.</p>
    pub fn set_silent(mut self, input: ::std::option::Option<bool>) -> Self {
        self.silent = input;
        self
    }
    /// <p>If set to <code>TRUE</code>, causes the cancelation of the openCypher query to happen silently.</p>
    pub fn get_silent(&self) -> &::std::option::Option<bool> {
        &self.silent
    }
    /// Consumes the builder and constructs a [`CancelOpenCypherQueryInput`](crate::operation::cancel_open_cypher_query::CancelOpenCypherQueryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::cancel_open_cypher_query::CancelOpenCypherQueryInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::cancel_open_cypher_query::CancelOpenCypherQueryInput {
            query_id: self.query_id,
            silent: self.silent,
        })
    }
}
