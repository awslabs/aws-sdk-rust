// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartMlModelTransformJobInput {
    /// <p>A unique identifier for the new job. The default is an autogenerated UUID.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The job ID of a completed data-processing job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub data_processing_job_id: ::std::option::Option<::std::string::String>,
    /// <p>The job ID of a completed model-training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub ml_model_training_job_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of a completed SageMaker training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub training_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The location in Amazon S3 where the model artifacts are to be stored.</p>
    pub model_transform_output_s3_location: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of an IAM role for SageMaker execution. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub sagemaker_iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub neptune_iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Configuration information for a model transform using a custom model. The <code>customModelTransformParameters</code> object contains the following fields, which must have values compatible with the saved model parameters from the training job:</p>
    pub custom_model_transform_parameters: ::std::option::Option<crate::types::CustomModelTransformParameters>,
    /// <p>The type of ML instance used in preparing and managing training of ML models. This is an ML compute instance chosen based on memory requirements for processing the training data and model.</p>
    pub base_processing_instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The disk volume size of the training instance in gigabytes. The default is 0. Both input data and the output model are stored on disk, so the volume size must be large enough to hold both data sets. If not specified or 0, Neptune ML selects a disk volume size based on the recommendation generated in the data processing step.</p>
    pub base_processing_instance_volume_size_in_gb: ::std::option::Option<i32>,
    /// <p>The IDs of the subnets in the Neptune VPC. The default is None.</p>
    pub subnets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The VPC security group IDs. The default is None.</p>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.</p>
    pub volume_encryption_kms_key: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt the output of the processing job. The default is none.</p>
    pub s3_output_encryption_kms_key: ::std::option::Option<::std::string::String>,
}
impl StartMlModelTransformJobInput {
    /// <p>A unique identifier for the new job. The default is an autogenerated UUID.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job ID of a completed data-processing job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn data_processing_job_id(&self) -> ::std::option::Option<&str> {
        self.data_processing_job_id.as_deref()
    }
    /// <p>The job ID of a completed model-training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn ml_model_training_job_id(&self) -> ::std::option::Option<&str> {
        self.ml_model_training_job_id.as_deref()
    }
    /// <p>The name of a completed SageMaker training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn training_job_name(&self) -> ::std::option::Option<&str> {
        self.training_job_name.as_deref()
    }
    /// <p>The location in Amazon S3 where the model artifacts are to be stored.</p>
    pub fn model_transform_output_s3_location(&self) -> ::std::option::Option<&str> {
        self.model_transform_output_s3_location.as_deref()
    }
    /// <p>The ARN of an IAM role for SageMaker execution. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub fn sagemaker_iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.sagemaker_iam_role_arn.as_deref()
    }
    /// <p>The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub fn neptune_iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.neptune_iam_role_arn.as_deref()
    }
    /// <p>Configuration information for a model transform using a custom model. The <code>customModelTransformParameters</code> object contains the following fields, which must have values compatible with the saved model parameters from the training job:</p>
    pub fn custom_model_transform_parameters(&self) -> ::std::option::Option<&crate::types::CustomModelTransformParameters> {
        self.custom_model_transform_parameters.as_ref()
    }
    /// <p>The type of ML instance used in preparing and managing training of ML models. This is an ML compute instance chosen based on memory requirements for processing the training data and model.</p>
    pub fn base_processing_instance_type(&self) -> ::std::option::Option<&str> {
        self.base_processing_instance_type.as_deref()
    }
    /// <p>The disk volume size of the training instance in gigabytes. The default is 0. Both input data and the output model are stored on disk, so the volume size must be large enough to hold both data sets. If not specified or 0, Neptune ML selects a disk volume size based on the recommendation generated in the data processing step.</p>
    pub fn base_processing_instance_volume_size_in_gb(&self) -> ::std::option::Option<i32> {
        self.base_processing_instance_volume_size_in_gb
    }
    /// <p>The IDs of the subnets in the Neptune VPC. The default is None.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnets.is_none()`.
    pub fn subnets(&self) -> &[::std::string::String] {
        self.subnets.as_deref().unwrap_or_default()
    }
    /// <p>The VPC security group IDs. The default is None.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.</p>
    pub fn volume_encryption_kms_key(&self) -> ::std::option::Option<&str> {
        self.volume_encryption_kms_key.as_deref()
    }
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt the output of the processing job. The default is none.</p>
    pub fn s3_output_encryption_kms_key(&self) -> ::std::option::Option<&str> {
        self.s3_output_encryption_kms_key.as_deref()
    }
}
impl StartMlModelTransformJobInput {
    /// Creates a new builder-style object to manufacture [`StartMlModelTransformJobInput`](crate::operation::start_ml_model_transform_job::StartMlModelTransformJobInput).
    pub fn builder() -> crate::operation::start_ml_model_transform_job::builders::StartMlModelTransformJobInputBuilder {
        crate::operation::start_ml_model_transform_job::builders::StartMlModelTransformJobInputBuilder::default()
    }
}

/// A builder for [`StartMlModelTransformJobInput`](crate::operation::start_ml_model_transform_job::StartMlModelTransformJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartMlModelTransformJobInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) data_processing_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) ml_model_training_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) training_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_transform_output_s3_location: ::std::option::Option<::std::string::String>,
    pub(crate) sagemaker_iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) neptune_iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) custom_model_transform_parameters: ::std::option::Option<crate::types::CustomModelTransformParameters>,
    pub(crate) base_processing_instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) base_processing_instance_volume_size_in_gb: ::std::option::Option<i32>,
    pub(crate) subnets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) volume_encryption_kms_key: ::std::option::Option<::std::string::String>,
    pub(crate) s3_output_encryption_kms_key: ::std::option::Option<::std::string::String>,
}
impl StartMlModelTransformJobInputBuilder {
    /// <p>A unique identifier for the new job. The default is an autogenerated UUID.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the new job. The default is an autogenerated UUID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A unique identifier for the new job. The default is an autogenerated UUID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The job ID of a completed data-processing job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn data_processing_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_processing_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID of a completed data-processing job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn set_data_processing_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_processing_job_id = input;
        self
    }
    /// <p>The job ID of a completed data-processing job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn get_data_processing_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_processing_job_id
    }
    /// <p>The job ID of a completed model-training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn ml_model_training_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ml_model_training_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID of a completed model-training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn set_ml_model_training_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ml_model_training_job_id = input;
        self
    }
    /// <p>The job ID of a completed model-training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn get_ml_model_training_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ml_model_training_job_id
    }
    /// <p>The name of a completed SageMaker training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn training_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.training_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a completed SageMaker training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn set_training_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.training_job_name = input;
        self
    }
    /// <p>The name of a completed SageMaker training job. You must include either <code>dataProcessingJobId</code> and a <code>mlModelTrainingJobId</code>, or a <code>trainingJobName</code>.</p>
    pub fn get_training_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.training_job_name
    }
    /// <p>The location in Amazon S3 where the model artifacts are to be stored.</p>
    /// This field is required.
    pub fn model_transform_output_s3_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_transform_output_s3_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location in Amazon S3 where the model artifacts are to be stored.</p>
    pub fn set_model_transform_output_s3_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_transform_output_s3_location = input;
        self
    }
    /// <p>The location in Amazon S3 where the model artifacts are to be stored.</p>
    pub fn get_model_transform_output_s3_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_transform_output_s3_location
    }
    /// <p>The ARN of an IAM role for SageMaker execution. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub fn sagemaker_iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sagemaker_iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an IAM role for SageMaker execution. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub fn set_sagemaker_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sagemaker_iam_role_arn = input;
        self
    }
    /// <p>The ARN of an IAM role for SageMaker execution. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub fn get_sagemaker_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.sagemaker_iam_role_arn
    }
    /// <p>The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub fn neptune_iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.neptune_iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub fn set_neptune_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.neptune_iam_role_arn = input;
        self
    }
    /// <p>The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.</p>
    pub fn get_neptune_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.neptune_iam_role_arn
    }
    /// <p>Configuration information for a model transform using a custom model. The <code>customModelTransformParameters</code> object contains the following fields, which must have values compatible with the saved model parameters from the training job:</p>
    pub fn custom_model_transform_parameters(mut self, input: crate::types::CustomModelTransformParameters) -> Self {
        self.custom_model_transform_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information for a model transform using a custom model. The <code>customModelTransformParameters</code> object contains the following fields, which must have values compatible with the saved model parameters from the training job:</p>
    pub fn set_custom_model_transform_parameters(mut self, input: ::std::option::Option<crate::types::CustomModelTransformParameters>) -> Self {
        self.custom_model_transform_parameters = input;
        self
    }
    /// <p>Configuration information for a model transform using a custom model. The <code>customModelTransformParameters</code> object contains the following fields, which must have values compatible with the saved model parameters from the training job:</p>
    pub fn get_custom_model_transform_parameters(&self) -> &::std::option::Option<crate::types::CustomModelTransformParameters> {
        &self.custom_model_transform_parameters
    }
    /// <p>The type of ML instance used in preparing and managing training of ML models. This is an ML compute instance chosen based on memory requirements for processing the training data and model.</p>
    pub fn base_processing_instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_processing_instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of ML instance used in preparing and managing training of ML models. This is an ML compute instance chosen based on memory requirements for processing the training data and model.</p>
    pub fn set_base_processing_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_processing_instance_type = input;
        self
    }
    /// <p>The type of ML instance used in preparing and managing training of ML models. This is an ML compute instance chosen based on memory requirements for processing the training data and model.</p>
    pub fn get_base_processing_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_processing_instance_type
    }
    /// <p>The disk volume size of the training instance in gigabytes. The default is 0. Both input data and the output model are stored on disk, so the volume size must be large enough to hold both data sets. If not specified or 0, Neptune ML selects a disk volume size based on the recommendation generated in the data processing step.</p>
    pub fn base_processing_instance_volume_size_in_gb(mut self, input: i32) -> Self {
        self.base_processing_instance_volume_size_in_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The disk volume size of the training instance in gigabytes. The default is 0. Both input data and the output model are stored on disk, so the volume size must be large enough to hold both data sets. If not specified or 0, Neptune ML selects a disk volume size based on the recommendation generated in the data processing step.</p>
    pub fn set_base_processing_instance_volume_size_in_gb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.base_processing_instance_volume_size_in_gb = input;
        self
    }
    /// <p>The disk volume size of the training instance in gigabytes. The default is 0. Both input data and the output model are stored on disk, so the volume size must be large enough to hold both data sets. If not specified or 0, Neptune ML selects a disk volume size based on the recommendation generated in the data processing step.</p>
    pub fn get_base_processing_instance_volume_size_in_gb(&self) -> &::std::option::Option<i32> {
        &self.base_processing_instance_volume_size_in_gb
    }
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>The IDs of the subnets in the Neptune VPC. The default is None.</p>
    pub fn subnets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input.into());
        self.subnets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the subnets in the Neptune VPC. The default is None.</p>
    pub fn set_subnets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnets = input;
        self
    }
    /// <p>The IDs of the subnets in the Neptune VPC. The default is None.</p>
    pub fn get_subnets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnets
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The VPC security group IDs. The default is None.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The VPC security group IDs. The default is None.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The VPC security group IDs. The default is None.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.</p>
    pub fn volume_encryption_kms_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_encryption_kms_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.</p>
    pub fn set_volume_encryption_kms_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_encryption_kms_key = input;
        self
    }
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.</p>
    pub fn get_volume_encryption_kms_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_encryption_kms_key
    }
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt the output of the processing job. The default is none.</p>
    pub fn s3_output_encryption_kms_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_output_encryption_kms_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt the output of the processing job. The default is none.</p>
    pub fn set_s3_output_encryption_kms_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_output_encryption_kms_key = input;
        self
    }
    /// <p>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt the output of the processing job. The default is none.</p>
    pub fn get_s3_output_encryption_kms_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_output_encryption_kms_key
    }
    /// Consumes the builder and constructs a [`StartMlModelTransformJobInput`](crate::operation::start_ml_model_transform_job::StartMlModelTransformJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_ml_model_transform_job::StartMlModelTransformJobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_ml_model_transform_job::StartMlModelTransformJobInput {
            id: self.id,
            data_processing_job_id: self.data_processing_job_id,
            ml_model_training_job_id: self.ml_model_training_job_id,
            training_job_name: self.training_job_name,
            model_transform_output_s3_location: self.model_transform_output_s3_location,
            sagemaker_iam_role_arn: self.sagemaker_iam_role_arn,
            neptune_iam_role_arn: self.neptune_iam_role_arn,
            custom_model_transform_parameters: self.custom_model_transform_parameters,
            base_processing_instance_type: self.base_processing_instance_type,
            base_processing_instance_volume_size_in_gb: self.base_processing_instance_volume_size_in_gb,
            subnets: self.subnets,
            security_group_ids: self.security_group_ids,
            volume_encryption_kms_key: self.volume_encryption_kms_key,
            s3_output_encryption_kms_key: self.s3_output_encryption_kms_key,
        })
    }
}
