// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_execute_open_cypher_explain_query_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryOutput,
    crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BadRequestException" => crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::BadRequestException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::BadRequestExceptionBuilder::default();
                output = crate::protocol_serde::shape_bad_request_exception::de_bad_request_exception_json_err(_response_body, output)
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::bad_request_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "CancelledByUserException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::CancelledByUserException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CancelledByUserExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_cancelled_by_user_exception::de_cancelled_by_user_exception_json_err(_response_body, output)
                            .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::cancelled_by_user_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ClientTimeoutException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::ClientTimeoutException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ClientTimeoutExceptionBuilder::default();
                    output = crate::protocol_serde::shape_client_timeout_exception::de_client_timeout_exception_json_err(_response_body, output)
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::client_timeout_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ConcurrentModificationException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::ConcurrentModificationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ConcurrentModificationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_concurrent_modification_exception::de_concurrent_modification_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::concurrent_modification_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ConstraintViolationException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::ConstraintViolationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ConstraintViolationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_constraint_violation_exception::de_constraint_violation_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::constraint_violation_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "FailureByQueryException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::FailureByQueryException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FailureByQueryExceptionBuilder::default();
                    output = crate::protocol_serde::shape_failure_by_query_exception::de_failure_by_query_exception_json_err(_response_body, output)
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::failure_by_query_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "IllegalArgumentException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::IllegalArgumentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::IllegalArgumentExceptionBuilder::default();
                    output = crate::protocol_serde::shape_illegal_argument_exception::de_illegal_argument_exception_json_err(_response_body, output)
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::illegal_argument_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidArgumentException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::InvalidArgumentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidArgumentExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_argument_exception::de_invalid_argument_exception_json_err(_response_body, output)
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::invalid_argument_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidNumericDataException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::InvalidNumericDataException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidNumericDataExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_numeric_data_exception::de_invalid_numeric_data_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::invalid_numeric_data_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::InvalidParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                            .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::invalid_parameter_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MalformedQueryException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::MalformedQueryException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MalformedQueryExceptionBuilder::default();
                    output = crate::protocol_serde::shape_malformed_query_exception::de_malformed_query_exception_json_err(_response_body, output)
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::malformed_query_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MemoryLimitExceededException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::MemoryLimitExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MemoryLimitExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_memory_limit_exceeded_exception::de_memory_limit_exceeded_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::memory_limit_exceeded_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MissingParameterException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::MissingParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MissingParameterExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_missing_parameter_exception::de_missing_parameter_exception_json_err(_response_body, output)
                            .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::missing_parameter_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ParsingException" => crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::ParsingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ParsingExceptionBuilder::default();
                output = crate::protocol_serde::shape_parsing_exception::de_parsing_exception_json_err(_response_body, output)
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::parsing_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "PreconditionsFailedException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::PreconditionsFailedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PreconditionsFailedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_preconditions_failed_exception::de_preconditions_failed_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::preconditions_failed_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "QueryLimitExceededException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::QueryLimitExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::QueryLimitExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_query_limit_exceeded_exception::de_query_limit_exceeded_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::query_limit_exceeded_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "QueryLimitException" => crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::QueryLimitException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::QueryLimitExceptionBuilder::default();
                output = crate::protocol_serde::shape_query_limit_exception::de_query_limit_exception_json_err(_response_body, output)
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::query_limit_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "QueryTooLargeException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::QueryTooLargeException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::QueryTooLargeExceptionBuilder::default();
                    output = crate::protocol_serde::shape_query_too_large_exception::de_query_too_large_exception_json_err(_response_body, output)
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::query_too_large_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TimeLimitExceededException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::TimeLimitExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TimeLimitExceededExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_time_limit_exceeded_exception::de_time_limit_exceeded_exception_json_err(_response_body, output)
                            .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::time_limit_exceeded_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TooManyRequestsException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::TooManyRequestsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyRequestsExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_too_many_requests_exception::de_too_many_requests_exception_json_err(_response_body, output)
                            .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::too_many_requests_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnsupportedOperationException" => {
            crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::UnsupportedOperationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnsupportedOperationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_unsupported_operation_exception::de_unsupported_operation_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::unsupported_operation_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_execute_open_cypher_explain_query_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryOutput,
    crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::execute_open_cypher_explain_query::builders::ExecuteOpenCypherExplainQueryOutputBuilder::default();
        output = output.set_results(crate::protocol_serde::shape_execute_open_cypher_explain_query_output::de_results_payload(
            _response_body,
        )?);
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::execute_open_cypher_explain_query_output_correct_errors(output)
            .build()
            .map_err(crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryError::unhandled)?
    })
}

pub fn ser_execute_open_cypher_explain_query_input(
    input: &crate::operation::execute_open_cypher_explain_query::ExecuteOpenCypherExplainQueryInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_execute_open_cypher_explain_query_input::ser_execute_open_cypher_explain_query_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
