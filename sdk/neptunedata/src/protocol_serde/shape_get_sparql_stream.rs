// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_sparql_stream_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::get_sparql_stream::GetSparqlStreamOutput, crate::operation::get_sparql_stream::GetSparqlStreamError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientTimeoutException" => crate::operation::get_sparql_stream::GetSparqlStreamError::ClientTimeoutException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ClientTimeoutExceptionBuilder::default();
                output = crate::protocol_serde::shape_client_timeout_exception::de_client_timeout_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::client_timeout_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConstraintViolationException" => crate::operation::get_sparql_stream::GetSparqlStreamError::ConstraintViolationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConstraintViolationExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_constraint_violation_exception::de_constraint_violation_exception_json_err(_response_body, output)
                        .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::constraint_violation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ExpiredStreamException" => crate::operation::get_sparql_stream::GetSparqlStreamError::ExpiredStreamException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ExpiredStreamExceptionBuilder::default();
                output = crate::protocol_serde::shape_expired_stream_exception::de_expired_stream_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::expired_stream_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "IllegalArgumentException" => crate::operation::get_sparql_stream::GetSparqlStreamError::IllegalArgumentException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::IllegalArgumentExceptionBuilder::default();
                output = crate::protocol_serde::shape_illegal_argument_exception::de_illegal_argument_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::illegal_argument_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidArgumentException" => crate::operation::get_sparql_stream::GetSparqlStreamError::InvalidArgumentException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidArgumentExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_argument_exception::de_invalid_argument_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::invalid_argument_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidParameterException" => crate::operation::get_sparql_stream::GetSparqlStreamError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::invalid_parameter_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MemoryLimitExceededException" => crate::operation::get_sparql_stream::GetSparqlStreamError::MemoryLimitExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::MemoryLimitExceededExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_memory_limit_exceeded_exception::de_memory_limit_exceeded_exception_json_err(_response_body, output)
                        .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::memory_limit_exceeded_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "PreconditionsFailedException" => crate::operation::get_sparql_stream::GetSparqlStreamError::PreconditionsFailedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::PreconditionsFailedExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_preconditions_failed_exception::de_preconditions_failed_exception_json_err(_response_body, output)
                        .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::preconditions_failed_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "StreamRecordsNotFoundException" => crate::operation::get_sparql_stream::GetSparqlStreamError::StreamRecordsNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::StreamRecordsNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_stream_records_not_found_exception::de_stream_records_not_found_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::stream_records_not_found_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ThrottlingException" => crate::operation::get_sparql_stream::GetSparqlStreamError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::throttling_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TooManyRequestsException" => crate::operation::get_sparql_stream::GetSparqlStreamError::TooManyRequestsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TooManyRequestsExceptionBuilder::default();
                output = crate::protocol_serde::shape_too_many_requests_exception::de_too_many_requests_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::too_many_requests_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedOperationException" => crate::operation::get_sparql_stream::GetSparqlStreamError::UnsupportedOperationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::UnsupportedOperationExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_unsupported_operation_exception::de_unsupported_operation_exception_json_err(_response_body, output)
                        .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::unsupported_operation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::get_sparql_stream::GetSparqlStreamError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_sparql_stream_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::get_sparql_stream::GetSparqlStreamOutput, crate::operation::get_sparql_stream::GetSparqlStreamError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_sparql_stream::builders::GetSparqlStreamOutputBuilder::default();
        output = crate::protocol_serde::shape_get_sparql_stream::de_get_sparql_stream(_response_body, output)
            .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::get_sparql_stream_output_correct_errors(output)
            .build()
            .map_err(crate::operation::get_sparql_stream::GetSparqlStreamError::unhandled)?
    })
}

pub fn ser_get_sparql_stream_headers(
    input: &crate::operation::get_sparql_stream::GetSparqlStreamInput,
    mut builder: ::http::request::Builder,
) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.encoding {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                ::aws_smithy_types::error::operation::BuildError::invalid_field(
                    "encoding",
                    format!("`{}` cannot be used as a header value: {}", &header_value, err),
                )
            })?;
            builder = builder.header("Accept-Encoding", header_value);
        }
    }
    Ok(builder)
}

pub(crate) fn de_get_sparql_stream(
    value: &[u8],
    mut builder: crate::operation::get_sparql_stream::builders::GetSparqlStreamOutputBuilder,
) -> Result<crate::operation::get_sparql_stream::builders::GetSparqlStreamOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "format" => {
                    builder = builder.set_format(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "lastEventId" => {
                    builder = builder.set_last_event_id(crate::protocol_serde::shape_string_valued_map::de_string_valued_map(tokens)?);
                }
                "lastTrxTimestamp" => {
                    builder = builder.set_last_trx_timestamp_in_millis(
                        ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                            .map(i64::try_from)
                            .transpose()?,
                    );
                }
                "records" => {
                    builder = builder.set_records(crate::protocol_serde::shape_sparql_records_list::de_sparql_records_list(tokens)?);
                }
                "totalRecords" => {
                    builder = builder.set_total_records(
                        ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                            .map(i32::try_from)
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
