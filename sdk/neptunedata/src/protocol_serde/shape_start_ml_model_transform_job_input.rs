// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_ml_model_transform_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_ml_model_transform_job::StartMlModelTransformJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.base_processing_instance_type {
        object.key("baseProcessingInstanceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.base_processing_instance_volume_size_in_gb {
        object.key("baseProcessingInstanceVolumeSizeInGB").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.custom_model_transform_parameters {
        #[allow(unused_mut)]
        let mut object_4 = object.key("customModelTransformParameters").start_object();
        crate::protocol_serde::shape_custom_model_transform_parameters::ser_custom_model_transform_parameters(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.data_processing_job_id {
        object.key("dataProcessingJobId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.id {
        object.key("id").string(var_6.as_str());
    }
    if let Some(var_7) = &input.ml_model_training_job_id {
        object.key("mlModelTrainingJobId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.model_transform_output_s3_location {
        object.key("modelTransformOutputS3Location").string(var_8.as_str());
    }
    if let Some(var_9) = &input.neptune_iam_role_arn {
        object.key("neptuneIamRoleArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.s3_output_encryption_kms_key {
        object.key("s3OutputEncryptionKMSKey").string(var_10.as_str());
    }
    if let Some(var_11) = &input.sagemaker_iam_role_arn {
        object.key("sagemakerIamRoleArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.security_group_ids {
        let mut array_13 = object.key("securityGroupIds").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.subnets {
        let mut array_16 = object.key("subnets").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.training_job_name {
        object.key("trainingJobName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.volume_encryption_kms_key {
        object.key("volumeEncryptionKMSKey").string(var_19.as_str());
    }
    Ok(())
}
