// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_start_loader_job_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::start_loader_job::StartLoaderJobOutput, crate::operation::start_loader_job::StartLoaderJobError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::start_loader_job::StartLoaderJobError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BadRequestException" => crate::operation::start_loader_job::StartLoaderJobError::BadRequestException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::BadRequestExceptionBuilder::default();
                output = crate::protocol_serde::shape_bad_request_exception::de_bad_request_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::bad_request_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "BulkLoadIdNotFoundException" => crate::operation::start_loader_job::StartLoaderJobError::BulkLoadIdNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::BulkLoadIdNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_bulk_load_id_not_found_exception::de_bulk_load_id_not_found_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::bulk_load_id_not_found_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ClientTimeoutException" => crate::operation::start_loader_job::StartLoaderJobError::ClientTimeoutException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ClientTimeoutExceptionBuilder::default();
                output = crate::protocol_serde::shape_client_timeout_exception::de_client_timeout_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::client_timeout_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConstraintViolationException" => crate::operation::start_loader_job::StartLoaderJobError::ConstraintViolationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConstraintViolationExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_constraint_violation_exception::de_constraint_violation_exception_json_err(_response_body, output)
                        .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::constraint_violation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "IllegalArgumentException" => crate::operation::start_loader_job::StartLoaderJobError::IllegalArgumentException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::IllegalArgumentExceptionBuilder::default();
                output = crate::protocol_serde::shape_illegal_argument_exception::de_illegal_argument_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::illegal_argument_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalFailureException" => crate::operation::start_loader_job::StartLoaderJobError::InternalFailureException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalFailureExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_failure_exception::de_internal_failure_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_failure_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidArgumentException" => crate::operation::start_loader_job::StartLoaderJobError::InvalidArgumentException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidArgumentExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_argument_exception::de_invalid_argument_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::invalid_argument_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidParameterException" => crate::operation::start_loader_job::StartLoaderJobError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::invalid_parameter_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "LoadUrlAccessDeniedException" => crate::operation::start_loader_job::StartLoaderJobError::LoadUrlAccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::LoadUrlAccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_load_url_access_denied_exception::de_load_url_access_denied_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::load_url_access_denied_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MissingParameterException" => crate::operation::start_loader_job::StartLoaderJobError::MissingParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::MissingParameterExceptionBuilder::default();
                output = crate::protocol_serde::shape_missing_parameter_exception::de_missing_parameter_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::missing_parameter_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "PreconditionsFailedException" => crate::operation::start_loader_job::StartLoaderJobError::PreconditionsFailedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::PreconditionsFailedExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_preconditions_failed_exception::de_preconditions_failed_exception_json_err(_response_body, output)
                        .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::preconditions_failed_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "S3Exception" => crate::operation::start_loader_job::StartLoaderJobError::S3Exception({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::S3ExceptionBuilder::default();
                output = crate::protocol_serde::shape_s3_exception::de_s3_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::s3_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TooManyRequestsException" => crate::operation::start_loader_job::StartLoaderJobError::TooManyRequestsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TooManyRequestsExceptionBuilder::default();
                output = crate::protocol_serde::shape_too_many_requests_exception::de_too_many_requests_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::too_many_requests_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedOperationException" => crate::operation::start_loader_job::StartLoaderJobError::UnsupportedOperationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::UnsupportedOperationExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_unsupported_operation_exception::de_unsupported_operation_exception_json_err(_response_body, output)
                        .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::unsupported_operation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::start_loader_job::StartLoaderJobError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_start_loader_job_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::start_loader_job::StartLoaderJobOutput, crate::operation::start_loader_job::StartLoaderJobError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::start_loader_job::builders::StartLoaderJobOutputBuilder::default();
        output = crate::protocol_serde::shape_start_loader_job::de_start_loader_job(_response_body, output)
            .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::start_loader_job_output_correct_errors(output)
            .build()
            .map_err(crate::operation::start_loader_job::StartLoaderJobError::unhandled)?
    })
}

pub fn ser_start_loader_job_input(
    input: &crate::operation::start_loader_job::StartLoaderJobInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_start_loader_job_input::ser_start_loader_job_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_start_loader_job(
    value: &[u8],
    mut builder: crate::operation::start_loader_job::builders::StartLoaderJobOutputBuilder,
) -> Result<crate::operation::start_loader_job::builders::StartLoaderJobOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "payload" => {
                    builder = builder.set_payload(crate::protocol_serde::shape_string_valued_map::de_string_valued_map(tokens)?);
                }
                "status" => {
                    builder = builder.set_status(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
