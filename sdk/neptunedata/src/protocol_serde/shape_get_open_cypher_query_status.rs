// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_open_cypher_query_status_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusOutput,
    crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::access_denied_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "BadRequestException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::BadRequestException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::BadRequestExceptionBuilder::default();
                output = crate::protocol_serde::shape_bad_request_exception::de_bad_request_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::bad_request_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ClientTimeoutException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::ClientTimeoutException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ClientTimeoutExceptionBuilder::default();
                output = crate::protocol_serde::shape_client_timeout_exception::de_client_timeout_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::client_timeout_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConcurrentModificationException" => {
            crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::ConcurrentModificationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ConcurrentModificationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_concurrent_modification_exception::de_concurrent_modification_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::concurrent_modification_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ConstraintViolationException" => {
            crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::ConstraintViolationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ConstraintViolationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_constraint_violation_exception::de_constraint_violation_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::constraint_violation_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "FailureByQueryException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::FailureByQueryException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::FailureByQueryExceptionBuilder::default();
                output = crate::protocol_serde::shape_failure_by_query_exception::de_failure_by_query_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::failure_by_query_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "IllegalArgumentException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::IllegalArgumentException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::IllegalArgumentExceptionBuilder::default();
                output = crate::protocol_serde::shape_illegal_argument_exception::de_illegal_argument_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::illegal_argument_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidArgumentException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::InvalidArgumentException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidArgumentExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_argument_exception::de_invalid_argument_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::invalid_argument_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidNumericDataException" => {
            crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::InvalidNumericDataException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidNumericDataExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_numeric_data_exception::de_invalid_numeric_data_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::invalid_numeric_data_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::invalid_parameter_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MissingParameterException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::MissingParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::MissingParameterExceptionBuilder::default();
                output = crate::protocol_serde::shape_missing_parameter_exception::de_missing_parameter_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::missing_parameter_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ParsingException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::ParsingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ParsingExceptionBuilder::default();
                output = crate::protocol_serde::shape_parsing_exception::de_parsing_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::parsing_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "PreconditionsFailedException" => {
            crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::PreconditionsFailedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PreconditionsFailedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_preconditions_failed_exception::de_preconditions_failed_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::preconditions_failed_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ReadOnlyViolationException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::ReadOnlyViolationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ReadOnlyViolationExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_read_only_violation_exception::de_read_only_violation_exception_json_err(_response_body, output)
                        .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::read_only_violation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TimeLimitExceededException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::TimeLimitExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TimeLimitExceededExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_time_limit_exceeded_exception::de_time_limit_exceeded_exception_json_err(_response_body, output)
                        .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::time_limit_exceeded_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TooManyRequestsException" => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::TooManyRequestsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TooManyRequestsExceptionBuilder::default();
                output = crate::protocol_serde::shape_too_many_requests_exception::de_too_many_requests_exception_json_err(_response_body, output)
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::too_many_requests_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedOperationException" => {
            crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::UnsupportedOperationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnsupportedOperationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_unsupported_operation_exception::de_unsupported_operation_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::unsupported_operation_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_open_cypher_query_status_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusOutput,
    crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_open_cypher_query_status::builders::GetOpenCypherQueryStatusOutputBuilder::default();
        output = crate::protocol_serde::shape_get_open_cypher_query_status::de_get_open_cypher_query_status(_response_body, output)
            .map_err(crate::operation::get_open_cypher_query_status::GetOpenCypherQueryStatusError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub(crate) fn de_get_open_cypher_query_status(
    value: &[u8],
    mut builder: crate::operation::get_open_cypher_query_status::builders::GetOpenCypherQueryStatusOutputBuilder,
) -> Result<
    crate::operation::get_open_cypher_query_status::builders::GetOpenCypherQueryStatusOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "queryEvalStats" => {
                    builder = builder.set_query_eval_stats(crate::protocol_serde::shape_query_eval_stats::de_query_eval_stats(tokens)?);
                }
                "queryId" => {
                    builder = builder.set_query_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "queryString" => {
                    builder = builder.set_query_string(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
