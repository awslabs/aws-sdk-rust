// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ErrorCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let errorcode = unimplemented!();
/// match errorcode {
///     ErrorCode::InvalidResourceState => { /* ... */ },
///     ErrorCode::NotAuthorized => { /* ... */ },
///     ErrorCode::RequestLimitExceeded => { /* ... */ },
///     ErrorCode::ResourceCreationFailure => { /* ... */ },
///     ErrorCode::ResourceDeletionFailure => { /* ... */ },
///     ErrorCode::ResourceInUse => { /* ... */ },
///     ErrorCode::ResourceLimitExceeded => { /* ... */ },
///     ErrorCode::ResourceNotFound => { /* ... */ },
///     ErrorCode::ResourceRetrievalFailure => { /* ... */ },
///     ErrorCode::ResourceUpdateFailure => { /* ... */ },
///     ErrorCode::ServiceEndpointHealthCheckFailure => { /* ... */ },
///     ErrorCode::StateTransitionFailure => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `errorcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ErrorCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ErrorCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ErrorCode::NewFeature` is defined.
/// Specifically, when `errorcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ErrorCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ErrorCode {
    #[allow(missing_docs)] // documentation missing in model
    InvalidResourceState,
    #[allow(missing_docs)] // documentation missing in model
    NotAuthorized,
    #[allow(missing_docs)] // documentation missing in model
    RequestLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    ResourceCreationFailure,
    #[allow(missing_docs)] // documentation missing in model
    ResourceDeletionFailure,
    #[allow(missing_docs)] // documentation missing in model
    ResourceInUse,
    #[allow(missing_docs)] // documentation missing in model
    ResourceLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    ResourceRetrievalFailure,
    #[allow(missing_docs)] // documentation missing in model
    ResourceUpdateFailure,
    #[allow(missing_docs)] // documentation missing in model
    ServiceEndpointHealthCheckFailure,
    #[allow(missing_docs)] // documentation missing in model
    StateTransitionFailure,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ErrorCode {
    fn from(s: &str) -> Self {
        match s {
            "INVALID_RESOURCE_STATE" => ErrorCode::InvalidResourceState,
            "NOT_AUTHORIZED" => ErrorCode::NotAuthorized,
            "REQUEST_LIMIT_EXCEEDED" => ErrorCode::RequestLimitExceeded,
            "RESOURCE_CREATION_FAILURE" => ErrorCode::ResourceCreationFailure,
            "RESOURCE_DELETION_FAILURE" => ErrorCode::ResourceDeletionFailure,
            "RESOURCE_IN_USE" => ErrorCode::ResourceInUse,
            "RESOURCE_LIMIT_EXCEEDED" => ErrorCode::ResourceLimitExceeded,
            "RESOURCE_NOT_FOUND" => ErrorCode::ResourceNotFound,
            "RESOURCE_RETRIEVAL_FAILURE" => ErrorCode::ResourceRetrievalFailure,
            "RESOURCE_UPDATE_FAILURE" => ErrorCode::ResourceUpdateFailure,
            "SERVICE_ENDPOINT_HEALTH_CHECK_FAILURE" => ErrorCode::ServiceEndpointHealthCheckFailure,
            "STATE_TRANSITION_FAILURE" => ErrorCode::StateTransitionFailure,
            other => ErrorCode::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ErrorCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ErrorCode::from(s))
    }
}
impl ErrorCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ErrorCode::InvalidResourceState => "INVALID_RESOURCE_STATE",
            ErrorCode::NotAuthorized => "NOT_AUTHORIZED",
            ErrorCode::RequestLimitExceeded => "REQUEST_LIMIT_EXCEEDED",
            ErrorCode::ResourceCreationFailure => "RESOURCE_CREATION_FAILURE",
            ErrorCode::ResourceDeletionFailure => "RESOURCE_DELETION_FAILURE",
            ErrorCode::ResourceInUse => "RESOURCE_IN_USE",
            ErrorCode::ResourceLimitExceeded => "RESOURCE_LIMIT_EXCEEDED",
            ErrorCode::ResourceNotFound => "RESOURCE_NOT_FOUND",
            ErrorCode::ResourceRetrievalFailure => "RESOURCE_RETRIEVAL_FAILURE",
            ErrorCode::ResourceUpdateFailure => "RESOURCE_UPDATE_FAILURE",
            ErrorCode::ServiceEndpointHealthCheckFailure => "SERVICE_ENDPOINT_HEALTH_CHECK_FAILURE",
            ErrorCode::StateTransitionFailure => "STATE_TRANSITION_FAILURE",
            ErrorCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "INVALID_RESOURCE_STATE",
            "NOT_AUTHORIZED",
            "REQUEST_LIMIT_EXCEEDED",
            "RESOURCE_CREATION_FAILURE",
            "RESOURCE_DELETION_FAILURE",
            "RESOURCE_IN_USE",
            "RESOURCE_LIMIT_EXCEEDED",
            "RESOURCE_NOT_FOUND",
            "RESOURCE_RETRIEVAL_FAILURE",
            "RESOURCE_UPDATE_FAILURE",
            "SERVICE_ENDPOINT_HEALTH_CHECK_FAILURE",
            "STATE_TRANSITION_FAILURE",
        ]
    }
}
impl AsRef<str> for ErrorCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
