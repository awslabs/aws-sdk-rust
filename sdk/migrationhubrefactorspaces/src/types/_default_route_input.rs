// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The configuration for the default route type. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DefaultRouteInput {
    /// <p>If set to <code>ACTIVE</code>, traffic is forwarded to this route’s service after the route is created. </p>
    #[doc(hidden)]
    pub activation_state: std::option::Option<crate::types::RouteActivationState>,
}
impl DefaultRouteInput {
    /// <p>If set to <code>ACTIVE</code>, traffic is forwarded to this route’s service after the route is created. </p>
    pub fn activation_state(&self) -> std::option::Option<&crate::types::RouteActivationState> {
        self.activation_state.as_ref()
    }
}
impl DefaultRouteInput {
    /// Creates a new builder-style object to manufacture [`DefaultRouteInput`](crate::types::DefaultRouteInput).
    pub fn builder() -> crate::types::builders::DefaultRouteInputBuilder {
        crate::types::builders::DefaultRouteInputBuilder::default()
    }
}

/// A builder for [`DefaultRouteInput`](crate::types::DefaultRouteInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DefaultRouteInputBuilder {
    pub(crate) activation_state: std::option::Option<crate::types::RouteActivationState>,
}
impl DefaultRouteInputBuilder {
    /// <p>If set to <code>ACTIVE</code>, traffic is forwarded to this route’s service after the route is created. </p>
    pub fn activation_state(mut self, input: crate::types::RouteActivationState) -> Self {
        self.activation_state = Some(input);
        self
    }
    /// <p>If set to <code>ACTIVE</code>, traffic is forwarded to this route’s service after the route is created. </p>
    pub fn set_activation_state(
        mut self,
        input: std::option::Option<crate::types::RouteActivationState>,
    ) -> Self {
        self.activation_state = input;
        self
    }
    /// Consumes the builder and constructs a [`DefaultRouteInput`](crate::types::DefaultRouteInput).
    pub fn build(self) -> crate::types::DefaultRouteInput {
        crate::types::DefaultRouteInput {
            activation_state: self.activation_state,
        }
    }
}
