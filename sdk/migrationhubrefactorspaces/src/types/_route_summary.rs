// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary information for the routes as a response to <code>ListRoutes</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RouteSummary {
    /// <p>The unique identifier of the route. </p>
    pub route_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the route. </p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the route owner.</p>
    pub owner_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the route creator. </p>
    pub created_by_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The route type of the route. </p>
    pub route_type: ::std::option::Option<crate::types::RouteType>,
    /// <p>The unique identifier of the service. </p>
    pub service_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the application. </p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the environment. </p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>This is the path that Refactor Spaces uses to match traffic. Paths must start with <code>/</code> and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.</p>
    pub source_path: ::std::option::Option<::std::string::String>,
    /// <p>A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service. </p>
    pub methods: ::std::option::Option<::std::vec::Vec<crate::types::HttpMethod>>,
    /// <p>Indicates whether to match all subpaths of the given source path. If this value is <code>false</code>, requests must match the source path exactly before they are forwarded to this route's service.</p>
    pub include_child_paths: ::std::option::Option<bool>,
    /// <p>A mapping of Amazon API Gateway path resources to resource IDs. </p>
    pub path_resource_to_id: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The current state of the route. </p>
    pub state: ::std::option::Option<crate::types::RouteState>,
    /// <p>The tags assigned to the route. </p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Any error associated with the route resource. </p>
    pub error: ::std::option::Option<crate::types::ErrorResponse>,
    /// <p>A timestamp that indicates when the route was last updated. </p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp that indicates when the route is created. </p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If set to <code>true</code>, this option appends the source path to the service URL endpoint.</p>
    pub append_source_path: ::std::option::Option<bool>,
}
impl RouteSummary {
    /// <p>The unique identifier of the route. </p>
    pub fn route_id(&self) -> ::std::option::Option<&str> {
        self.route_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the route. </p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the route owner.</p>
    pub fn owner_account_id(&self) -> ::std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the route creator. </p>
    pub fn created_by_account_id(&self) -> ::std::option::Option<&str> {
        self.created_by_account_id.as_deref()
    }
    /// <p>The route type of the route. </p>
    pub fn route_type(&self) -> ::std::option::Option<&crate::types::RouteType> {
        self.route_type.as_ref()
    }
    /// <p>The unique identifier of the service. </p>
    pub fn service_id(&self) -> ::std::option::Option<&str> {
        self.service_id.as_deref()
    }
    /// <p>The unique identifier of the application. </p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The unique identifier of the environment. </p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>This is the path that Refactor Spaces uses to match traffic. Paths must start with <code>/</code> and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.</p>
    pub fn source_path(&self) -> ::std::option::Option<&str> {
        self.source_path.as_deref()
    }
    /// <p>A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.methods.is_none()`.
    pub fn methods(&self) -> &[crate::types::HttpMethod] {
        self.methods.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether to match all subpaths of the given source path. If this value is <code>false</code>, requests must match the source path exactly before they are forwarded to this route's service.</p>
    pub fn include_child_paths(&self) -> ::std::option::Option<bool> {
        self.include_child_paths
    }
    /// <p>A mapping of Amazon API Gateway path resources to resource IDs. </p>
    pub fn path_resource_to_id(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.path_resource_to_id.as_ref()
    }
    /// <p>The current state of the route. </p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::RouteState> {
        self.state.as_ref()
    }
    /// <p>The tags assigned to the route. </p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Any error associated with the route resource. </p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorResponse> {
        self.error.as_ref()
    }
    /// <p>A timestamp that indicates when the route was last updated. </p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>A timestamp that indicates when the route is created. </p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>If set to <code>true</code>, this option appends the source path to the service URL endpoint.</p>
    pub fn append_source_path(&self) -> ::std::option::Option<bool> {
        self.append_source_path
    }
}
impl ::std::fmt::Debug for RouteSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteSummary");
        formatter.field("route_id", &self.route_id);
        formatter.field("arn", &self.arn);
        formatter.field("owner_account_id", &self.owner_account_id);
        formatter.field("created_by_account_id", &self.created_by_account_id);
        formatter.field("route_type", &self.route_type);
        formatter.field("service_id", &self.service_id);
        formatter.field("application_id", &self.application_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("source_path", &self.source_path);
        formatter.field("methods", &self.methods);
        formatter.field("include_child_paths", &self.include_child_paths);
        formatter.field("path_resource_to_id", &self.path_resource_to_id);
        formatter.field("state", &self.state);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("error", &self.error);
        formatter.field("last_updated_time", &self.last_updated_time);
        formatter.field("created_time", &self.created_time);
        formatter.field("append_source_path", &self.append_source_path);
        formatter.finish()
    }
}
impl RouteSummary {
    /// Creates a new builder-style object to manufacture [`RouteSummary`](crate::types::RouteSummary).
    pub fn builder() -> crate::types::builders::RouteSummaryBuilder {
        crate::types::builders::RouteSummaryBuilder::default()
    }
}

/// A builder for [`RouteSummary`](crate::types::RouteSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RouteSummaryBuilder {
    pub(crate) route_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_by_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) route_type: ::std::option::Option<crate::types::RouteType>,
    pub(crate) service_id: ::std::option::Option<::std::string::String>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_path: ::std::option::Option<::std::string::String>,
    pub(crate) methods: ::std::option::Option<::std::vec::Vec<crate::types::HttpMethod>>,
    pub(crate) include_child_paths: ::std::option::Option<bool>,
    pub(crate) path_resource_to_id: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) state: ::std::option::Option<crate::types::RouteState>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorResponse>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) append_source_path: ::std::option::Option<bool>,
}
impl RouteSummaryBuilder {
    /// <p>The unique identifier of the route. </p>
    pub fn route_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.route_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the route. </p>
    pub fn set_route_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.route_id = input;
        self
    }
    /// <p>The unique identifier of the route. </p>
    pub fn get_route_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.route_id
    }
    /// <p>The Amazon Resource Name (ARN) of the route. </p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the route. </p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the route. </p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Amazon Web Services account ID of the route owner.</p>
    pub fn owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the route owner.</p>
    pub fn set_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the route owner.</p>
    pub fn get_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_account_id
    }
    /// <p>The Amazon Web Services account ID of the route creator. </p>
    pub fn created_by_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the route creator. </p>
    pub fn set_created_by_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the route creator. </p>
    pub fn get_created_by_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by_account_id
    }
    /// <p>The route type of the route. </p>
    pub fn route_type(mut self, input: crate::types::RouteType) -> Self {
        self.route_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The route type of the route. </p>
    pub fn set_route_type(mut self, input: ::std::option::Option<crate::types::RouteType>) -> Self {
        self.route_type = input;
        self
    }
    /// <p>The route type of the route. </p>
    pub fn get_route_type(&self) -> &::std::option::Option<crate::types::RouteType> {
        &self.route_type
    }
    /// <p>The unique identifier of the service. </p>
    pub fn service_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the service. </p>
    pub fn set_service_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_id = input;
        self
    }
    /// <p>The unique identifier of the service. </p>
    pub fn get_service_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_id
    }
    /// <p>The unique identifier of the application. </p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the application. </p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The unique identifier of the application. </p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The unique identifier of the environment. </p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the environment. </p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The unique identifier of the environment. </p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>This is the path that Refactor Spaces uses to match traffic. Paths must start with <code>/</code> and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.</p>
    pub fn source_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This is the path that Refactor Spaces uses to match traffic. Paths must start with <code>/</code> and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.</p>
    pub fn set_source_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_path = input;
        self
    }
    /// <p>This is the path that Refactor Spaces uses to match traffic. Paths must start with <code>/</code> and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.</p>
    pub fn get_source_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_path
    }
    /// Appends an item to `methods`.
    ///
    /// To override the contents of this collection use [`set_methods`](Self::set_methods).
    ///
    /// <p>A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service. </p>
    pub fn methods(mut self, input: crate::types::HttpMethod) -> Self {
        let mut v = self.methods.unwrap_or_default();
        v.push(input);
        self.methods = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service. </p>
    pub fn set_methods(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HttpMethod>>) -> Self {
        self.methods = input;
        self
    }
    /// <p>A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service. </p>
    pub fn get_methods(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HttpMethod>> {
        &self.methods
    }
    /// <p>Indicates whether to match all subpaths of the given source path. If this value is <code>false</code>, requests must match the source path exactly before they are forwarded to this route's service.</p>
    pub fn include_child_paths(mut self, input: bool) -> Self {
        self.include_child_paths = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to match all subpaths of the given source path. If this value is <code>false</code>, requests must match the source path exactly before they are forwarded to this route's service.</p>
    pub fn set_include_child_paths(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_child_paths = input;
        self
    }
    /// <p>Indicates whether to match all subpaths of the given source path. If this value is <code>false</code>, requests must match the source path exactly before they are forwarded to this route's service.</p>
    pub fn get_include_child_paths(&self) -> &::std::option::Option<bool> {
        &self.include_child_paths
    }
    /// Adds a key-value pair to `path_resource_to_id`.
    ///
    /// To override the contents of this collection use [`set_path_resource_to_id`](Self::set_path_resource_to_id).
    ///
    /// <p>A mapping of Amazon API Gateway path resources to resource IDs. </p>
    pub fn path_resource_to_id(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.path_resource_to_id.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.path_resource_to_id = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A mapping of Amazon API Gateway path resources to resource IDs. </p>
    pub fn set_path_resource_to_id(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.path_resource_to_id = input;
        self
    }
    /// <p>A mapping of Amazon API Gateway path resources to resource IDs. </p>
    pub fn get_path_resource_to_id(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.path_resource_to_id
    }
    /// <p>The current state of the route. </p>
    pub fn state(mut self, input: crate::types::RouteState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the route. </p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::RouteState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the route. </p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::RouteState> {
        &self.state
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the route. </p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags assigned to the route. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the route. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Any error associated with the route resource. </p>
    pub fn error(mut self, input: crate::types::ErrorResponse) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Any error associated with the route resource. </p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorResponse>) -> Self {
        self.error = input;
        self
    }
    /// <p>Any error associated with the route resource. </p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorResponse> {
        &self.error
    }
    /// <p>A timestamp that indicates when the route was last updated. </p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when the route was last updated. </p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>A timestamp that indicates when the route was last updated. </p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>A timestamp that indicates when the route is created. </p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when the route is created. </p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>A timestamp that indicates when the route is created. </p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>If set to <code>true</code>, this option appends the source path to the service URL endpoint.</p>
    pub fn append_source_path(mut self, input: bool) -> Self {
        self.append_source_path = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to <code>true</code>, this option appends the source path to the service URL endpoint.</p>
    pub fn set_append_source_path(mut self, input: ::std::option::Option<bool>) -> Self {
        self.append_source_path = input;
        self
    }
    /// <p>If set to <code>true</code>, this option appends the source path to the service URL endpoint.</p>
    pub fn get_append_source_path(&self) -> &::std::option::Option<bool> {
        &self.append_source_path
    }
    /// Consumes the builder and constructs a [`RouteSummary`](crate::types::RouteSummary).
    pub fn build(self) -> crate::types::RouteSummary {
        crate::types::RouteSummary {
            route_id: self.route_id,
            arn: self.arn,
            owner_account_id: self.owner_account_id,
            created_by_account_id: self.created_by_account_id,
            route_type: self.route_type,
            service_id: self.service_id,
            application_id: self.application_id,
            environment_id: self.environment_id,
            source_path: self.source_path,
            methods: self.methods,
            include_child_paths: self.include_child_paths,
            path_resource_to_id: self.path_resource_to_id,
            state: self.state,
            tags: self.tags,
            error: self.error,
            last_updated_time: self.last_updated_time,
            created_time: self.created_time,
            append_source_path: self.append_source_path,
        }
    }
}
impl ::std::fmt::Debug for RouteSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RouteSummaryBuilder");
        formatter.field("route_id", &self.route_id);
        formatter.field("arn", &self.arn);
        formatter.field("owner_account_id", &self.owner_account_id);
        formatter.field("created_by_account_id", &self.created_by_account_id);
        formatter.field("route_type", &self.route_type);
        formatter.field("service_id", &self.service_id);
        formatter.field("application_id", &self.application_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("source_path", &self.source_path);
        formatter.field("methods", &self.methods);
        formatter.field("include_child_paths", &self.include_child_paths);
        formatter.field("path_resource_to_id", &self.path_resource_to_id);
        formatter.field("state", &self.state);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("error", &self.error);
        formatter.field("last_updated_time", &self.last_updated_time);
        formatter.field("created_time", &self.created_time);
        formatter.field("append_source_path", &self.append_source_path);
        formatter.finish()
    }
}
