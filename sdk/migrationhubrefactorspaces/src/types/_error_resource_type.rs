// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ErrorResourceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let errorresourcetype = unimplemented!();
/// match errorresourcetype {
///     ErrorResourceType::ApiGateway => { /* ... */ },
///     ErrorResourceType::Application => { /* ... */ },
///     ErrorResourceType::Environment => { /* ... */ },
///     ErrorResourceType::IamRole => { /* ... */ },
///     ErrorResourceType::Lambda => { /* ... */ },
///     ErrorResourceType::LoadBalancerListener => { /* ... */ },
///     ErrorResourceType::Nlb => { /* ... */ },
///     ErrorResourceType::ResourceShare => { /* ... */ },
///     ErrorResourceType::Route => { /* ... */ },
///     ErrorResourceType::RouteTable => { /* ... */ },
///     ErrorResourceType::SecurityGroup => { /* ... */ },
///     ErrorResourceType::Service => { /* ... */ },
///     ErrorResourceType::Subnet => { /* ... */ },
///     ErrorResourceType::TargetGroup => { /* ... */ },
///     ErrorResourceType::TransitGateway => { /* ... */ },
///     ErrorResourceType::TransitGatewayAttachment => { /* ... */ },
///     ErrorResourceType::Vpc => { /* ... */ },
///     ErrorResourceType::VpcEndpointServiceConfiguration => { /* ... */ },
///     ErrorResourceType::VpcLink => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `errorresourcetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ErrorResourceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ErrorResourceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ErrorResourceType::NewFeature` is defined.
/// Specifically, when `errorresourcetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ErrorResourceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ErrorResourceType {
    #[allow(missing_docs)] // documentation missing in model
    ApiGateway,
    #[allow(missing_docs)] // documentation missing in model
    Application,
    #[allow(missing_docs)] // documentation missing in model
    Environment,
    #[allow(missing_docs)] // documentation missing in model
    IamRole,
    #[allow(missing_docs)] // documentation missing in model
    Lambda,
    #[allow(missing_docs)] // documentation missing in model
    LoadBalancerListener,
    #[allow(missing_docs)] // documentation missing in model
    Nlb,
    #[allow(missing_docs)] // documentation missing in model
    ResourceShare,
    #[allow(missing_docs)] // documentation missing in model
    Route,
    #[allow(missing_docs)] // documentation missing in model
    RouteTable,
    #[allow(missing_docs)] // documentation missing in model
    SecurityGroup,
    #[allow(missing_docs)] // documentation missing in model
    Service,
    #[allow(missing_docs)] // documentation missing in model
    Subnet,
    #[allow(missing_docs)] // documentation missing in model
    TargetGroup,
    #[allow(missing_docs)] // documentation missing in model
    TransitGateway,
    #[allow(missing_docs)] // documentation missing in model
    TransitGatewayAttachment,
    #[allow(missing_docs)] // documentation missing in model
    Vpc,
    #[allow(missing_docs)] // documentation missing in model
    VpcEndpointServiceConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    VpcLink,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ErrorResourceType {
    fn from(s: &str) -> Self {
        match s {
            "API_GATEWAY" => ErrorResourceType::ApiGateway,
            "APPLICATION" => ErrorResourceType::Application,
            "ENVIRONMENT" => ErrorResourceType::Environment,
            "IAM_ROLE" => ErrorResourceType::IamRole,
            "LAMBDA" => ErrorResourceType::Lambda,
            "LOAD_BALANCER_LISTENER" => ErrorResourceType::LoadBalancerListener,
            "NLB" => ErrorResourceType::Nlb,
            "RESOURCE_SHARE" => ErrorResourceType::ResourceShare,
            "ROUTE" => ErrorResourceType::Route,
            "ROUTE_TABLE" => ErrorResourceType::RouteTable,
            "SECURITY_GROUP" => ErrorResourceType::SecurityGroup,
            "SERVICE" => ErrorResourceType::Service,
            "SUBNET" => ErrorResourceType::Subnet,
            "TARGET_GROUP" => ErrorResourceType::TargetGroup,
            "TRANSIT_GATEWAY" => ErrorResourceType::TransitGateway,
            "TRANSIT_GATEWAY_ATTACHMENT" => ErrorResourceType::TransitGatewayAttachment,
            "VPC" => ErrorResourceType::Vpc,
            "VPC_ENDPOINT_SERVICE_CONFIGURATION" => {
                ErrorResourceType::VpcEndpointServiceConfiguration
            }
            "VPC_LINK" => ErrorResourceType::VpcLink,
            other => {
                ErrorResourceType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ErrorResourceType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ErrorResourceType::from(s))
    }
}
impl ErrorResourceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ErrorResourceType::ApiGateway => "API_GATEWAY",
            ErrorResourceType::Application => "APPLICATION",
            ErrorResourceType::Environment => "ENVIRONMENT",
            ErrorResourceType::IamRole => "IAM_ROLE",
            ErrorResourceType::Lambda => "LAMBDA",
            ErrorResourceType::LoadBalancerListener => "LOAD_BALANCER_LISTENER",
            ErrorResourceType::Nlb => "NLB",
            ErrorResourceType::ResourceShare => "RESOURCE_SHARE",
            ErrorResourceType::Route => "ROUTE",
            ErrorResourceType::RouteTable => "ROUTE_TABLE",
            ErrorResourceType::SecurityGroup => "SECURITY_GROUP",
            ErrorResourceType::Service => "SERVICE",
            ErrorResourceType::Subnet => "SUBNET",
            ErrorResourceType::TargetGroup => "TARGET_GROUP",
            ErrorResourceType::TransitGateway => "TRANSIT_GATEWAY",
            ErrorResourceType::TransitGatewayAttachment => "TRANSIT_GATEWAY_ATTACHMENT",
            ErrorResourceType::Vpc => "VPC",
            ErrorResourceType::VpcEndpointServiceConfiguration => {
                "VPC_ENDPOINT_SERVICE_CONFIGURATION"
            }
            ErrorResourceType::VpcLink => "VPC_LINK",
            ErrorResourceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "API_GATEWAY",
            "APPLICATION",
            "ENVIRONMENT",
            "IAM_ROLE",
            "LAMBDA",
            "LOAD_BALANCER_LISTENER",
            "NLB",
            "RESOURCE_SHARE",
            "ROUTE",
            "ROUTE_TABLE",
            "SECURITY_GROUP",
            "SERVICE",
            "SUBNET",
            "TARGET_GROUP",
            "TRANSIT_GATEWAY",
            "TRANSIT_GATEWAY_ATTACHMENT",
            "VPC",
            "VPC_ENDPOINT_SERVICE_CONFIGURATION",
            "VPC_LINK",
        ]
    }
}
impl AsRef<str> for ErrorResourceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
