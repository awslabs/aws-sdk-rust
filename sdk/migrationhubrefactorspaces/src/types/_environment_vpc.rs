// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides summary information for the <code>EnvironmentVpc</code> resource as a response to <code>ListEnvironmentVpc</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnvironmentVpc {
    /// <p>The unique identifier of the environment. </p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC. </p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the virtual private cloud (VPC) owner. </p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of Amazon Virtual Private Cloud (Amazon VPC) CIDR blocks. </p>
    pub cidr_blocks: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name of the VPC at the time it is added to the environment. </p>
    pub vpc_name: ::std::option::Option<::std::string::String>,
    /// <p>A timestamp that indicates when the VPC was last updated by the environment. </p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp that indicates when the VPC is first added to the environment. </p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl EnvironmentVpc {
    /// <p>The unique identifier of the environment. </p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The ID of the VPC. </p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the virtual private cloud (VPC) owner. </p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The list of Amazon Virtual Private Cloud (Amazon VPC) CIDR blocks. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cidr_blocks.is_none()`.
    pub fn cidr_blocks(&self) -> &[::std::string::String] {
        self.cidr_blocks.as_deref().unwrap_or_default()
    }
    /// <p>The name of the VPC at the time it is added to the environment. </p>
    pub fn vpc_name(&self) -> ::std::option::Option<&str> {
        self.vpc_name.as_deref()
    }
    /// <p>A timestamp that indicates when the VPC was last updated by the environment. </p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>A timestamp that indicates when the VPC is first added to the environment. </p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
}
impl EnvironmentVpc {
    /// Creates a new builder-style object to manufacture [`EnvironmentVpc`](crate::types::EnvironmentVpc).
    pub fn builder() -> crate::types::builders::EnvironmentVpcBuilder {
        crate::types::builders::EnvironmentVpcBuilder::default()
    }
}

/// A builder for [`EnvironmentVpc`](crate::types::EnvironmentVpc).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnvironmentVpcBuilder {
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) cidr_blocks: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) vpc_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl EnvironmentVpcBuilder {
    /// <p>The unique identifier of the environment. </p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the environment. </p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The unique identifier of the environment. </p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The ID of the VPC. </p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC. </p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC. </p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The Amazon Web Services account ID of the virtual private cloud (VPC) owner. </p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the virtual private cloud (VPC) owner. </p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the virtual private cloud (VPC) owner. </p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Appends an item to `cidr_blocks`.
    ///
    /// To override the contents of this collection use [`set_cidr_blocks`](Self::set_cidr_blocks).
    ///
    /// <p>The list of Amazon Virtual Private Cloud (Amazon VPC) CIDR blocks. </p>
    pub fn cidr_blocks(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cidr_blocks.unwrap_or_default();
        v.push(input.into());
        self.cidr_blocks = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Amazon Virtual Private Cloud (Amazon VPC) CIDR blocks. </p>
    pub fn set_cidr_blocks(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cidr_blocks = input;
        self
    }
    /// <p>The list of Amazon Virtual Private Cloud (Amazon VPC) CIDR blocks. </p>
    pub fn get_cidr_blocks(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cidr_blocks
    }
    /// <p>The name of the VPC at the time it is added to the environment. </p>
    pub fn vpc_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the VPC at the time it is added to the environment. </p>
    pub fn set_vpc_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_name = input;
        self
    }
    /// <p>The name of the VPC at the time it is added to the environment. </p>
    pub fn get_vpc_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_name
    }
    /// <p>A timestamp that indicates when the VPC was last updated by the environment. </p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when the VPC was last updated by the environment. </p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>A timestamp that indicates when the VPC was last updated by the environment. </p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>A timestamp that indicates when the VPC is first added to the environment. </p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp that indicates when the VPC is first added to the environment. </p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>A timestamp that indicates when the VPC is first added to the environment. </p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// Consumes the builder and constructs a [`EnvironmentVpc`](crate::types::EnvironmentVpc).
    pub fn build(self) -> crate::types::EnvironmentVpc {
        crate::types::EnvironmentVpc {
            environment_id: self.environment_id,
            vpc_id: self.vpc_id,
            account_id: self.account_id,
            cidr_blocks: self.cidr_blocks,
            vpc_name: self.vpc_name,
            last_updated_time: self.last_updated_time,
            created_time: self.created_time,
        }
    }
}
