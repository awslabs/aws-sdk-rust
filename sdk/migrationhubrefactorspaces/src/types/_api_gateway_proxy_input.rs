// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A wrapper object holding the Amazon API Gateway endpoint input. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApiGatewayProxyInput {
    /// <p>The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to <code>REGIONAL</code> by default.</p>
    /// <p>If the value is set to <code>PRIVATE</code> in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud (Amazon VPC) endpoints for Amazon API Gateway that have been granted access. </p>
    #[doc(hidden)]
    pub endpoint_type: std::option::Option<crate::types::ApiGatewayEndpointType>,
    /// <p>The name of the API Gateway stage. The name defaults to <code>prod</code>. </p>
    #[doc(hidden)]
    pub stage_name: std::option::Option<std::string::String>,
}
impl ApiGatewayProxyInput {
    /// <p>The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to <code>REGIONAL</code> by default.</p>
    /// <p>If the value is set to <code>PRIVATE</code> in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud (Amazon VPC) endpoints for Amazon API Gateway that have been granted access. </p>
    pub fn endpoint_type(&self) -> std::option::Option<&crate::types::ApiGatewayEndpointType> {
        self.endpoint_type.as_ref()
    }
    /// <p>The name of the API Gateway stage. The name defaults to <code>prod</code>. </p>
    pub fn stage_name(&self) -> std::option::Option<&str> {
        self.stage_name.as_deref()
    }
}
impl ApiGatewayProxyInput {
    /// Creates a new builder-style object to manufacture [`ApiGatewayProxyInput`](crate::types::ApiGatewayProxyInput).
    pub fn builder() -> crate::types::builders::ApiGatewayProxyInputBuilder {
        crate::types::builders::ApiGatewayProxyInputBuilder::default()
    }
}

/// A builder for [`ApiGatewayProxyInput`](crate::types::ApiGatewayProxyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApiGatewayProxyInputBuilder {
    pub(crate) endpoint_type: std::option::Option<crate::types::ApiGatewayEndpointType>,
    pub(crate) stage_name: std::option::Option<std::string::String>,
}
impl ApiGatewayProxyInputBuilder {
    /// <p>The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to <code>REGIONAL</code> by default.</p>
    /// <p>If the value is set to <code>PRIVATE</code> in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud (Amazon VPC) endpoints for Amazon API Gateway that have been granted access. </p>
    pub fn endpoint_type(mut self, input: crate::types::ApiGatewayEndpointType) -> Self {
        self.endpoint_type = Some(input);
        self
    }
    /// <p>The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to <code>REGIONAL</code> by default.</p>
    /// <p>If the value is set to <code>PRIVATE</code> in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud (Amazon VPC) endpoints for Amazon API Gateway that have been granted access. </p>
    pub fn set_endpoint_type(
        mut self,
        input: std::option::Option<crate::types::ApiGatewayEndpointType>,
    ) -> Self {
        self.endpoint_type = input;
        self
    }
    /// <p>The name of the API Gateway stage. The name defaults to <code>prod</code>. </p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage_name = Some(input.into());
        self
    }
    /// <p>The name of the API Gateway stage. The name defaults to <code>prod</code>. </p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ApiGatewayProxyInput`](crate::types::ApiGatewayProxyInput).
    pub fn build(self) -> crate::types::ApiGatewayProxyInput {
        crate::types::ApiGatewayProxyInput {
            endpoint_type: self.endpoint_type,
            stage_name: self.stage_name,
        }
    }
}
