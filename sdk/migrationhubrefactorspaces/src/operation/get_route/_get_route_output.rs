// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRouteOutput {
    /// <p>The unique identifier of the route.</p>
    /// <p> <b>DEFAULT</b>: All traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created.</p>
    /// <p> <b>URI_PATH</b>: A route that is based on a URI path.</p>
    #[doc(hidden)]
    pub route_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the route.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID of the route owner.</p>
    #[doc(hidden)]
    pub owner_account_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID of the route creator.</p>
    #[doc(hidden)]
    pub created_by_account_id: std::option::Option<std::string::String>,
    /// <p>The type of route.</p>
    #[doc(hidden)]
    pub route_type: std::option::Option<crate::types::RouteType>,
    /// <p>The unique identifier of the service.</p>
    #[doc(hidden)]
    pub service_id: std::option::Option<std::string::String>,
    /// <p>The ID of the application that the route belongs to. </p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>Unique identifier of the environment.</p>
    #[doc(hidden)]
    pub environment_id: std::option::Option<std::string::String>,
    /// <p>The path to use to match traffic. Paths must start with <code>/</code> and are relative to the base of the application. </p>
    #[doc(hidden)]
    pub source_path: std::option::Option<std::string::String>,
    /// <p>A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service. </p>
    #[doc(hidden)]
    pub methods: std::option::Option<std::vec::Vec<crate::types::HttpMethod>>,
    /// <p>Indicates whether to match all subpaths of the given source path. If this value is <code>false</code>, requests must match the source path exactly before they are forwarded to this route's service. </p>
    #[doc(hidden)]
    pub include_child_paths: std::option::Option<bool>,
    /// <p>A mapping of Amazon API Gateway path resources to resource IDs. </p>
    #[doc(hidden)]
    pub path_resource_to_id:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The current state of the route. </p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::RouteState>,
    /// <p>The tags assigned to the route. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Any error associated with the route resource. </p>
    #[doc(hidden)]
    pub error: std::option::Option<crate::types::ErrorResponse>,
    /// <p>A timestamp that indicates when the route was last updated. </p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the route is created. </p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetRouteOutput {
    /// <p>The unique identifier of the route.</p>
    /// <p> <b>DEFAULT</b>: All traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created.</p>
    /// <p> <b>URI_PATH</b>: A route that is based on a URI path.</p>
    pub fn route_id(&self) -> std::option::Option<&str> {
        self.route_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the route.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the route owner.</p>
    pub fn owner_account_id(&self) -> std::option::Option<&str> {
        self.owner_account_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the route creator.</p>
    pub fn created_by_account_id(&self) -> std::option::Option<&str> {
        self.created_by_account_id.as_deref()
    }
    /// <p>The type of route.</p>
    pub fn route_type(&self) -> std::option::Option<&crate::types::RouteType> {
        self.route_type.as_ref()
    }
    /// <p>The unique identifier of the service.</p>
    pub fn service_id(&self) -> std::option::Option<&str> {
        self.service_id.as_deref()
    }
    /// <p>The ID of the application that the route belongs to. </p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>Unique identifier of the environment.</p>
    pub fn environment_id(&self) -> std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The path to use to match traffic. Paths must start with <code>/</code> and are relative to the base of the application. </p>
    pub fn source_path(&self) -> std::option::Option<&str> {
        self.source_path.as_deref()
    }
    /// <p>A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service. </p>
    pub fn methods(&self) -> std::option::Option<&[crate::types::HttpMethod]> {
        self.methods.as_deref()
    }
    /// <p>Indicates whether to match all subpaths of the given source path. If this value is <code>false</code>, requests must match the source path exactly before they are forwarded to this route's service. </p>
    pub fn include_child_paths(&self) -> std::option::Option<bool> {
        self.include_child_paths
    }
    /// <p>A mapping of Amazon API Gateway path resources to resource IDs. </p>
    pub fn path_resource_to_id(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.path_resource_to_id.as_ref()
    }
    /// <p>The current state of the route. </p>
    pub fn state(&self) -> std::option::Option<&crate::types::RouteState> {
        self.state.as_ref()
    }
    /// <p>The tags assigned to the route. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>Any error associated with the route resource. </p>
    pub fn error(&self) -> std::option::Option<&crate::types::ErrorResponse> {
        self.error.as_ref()
    }
    /// <p>A timestamp that indicates when the route was last updated. </p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The timestamp of when the route is created. </p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
}
impl std::fmt::Debug for GetRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRouteOutput");
        formatter.field("route_id", &self.route_id);
        formatter.field("arn", &self.arn);
        formatter.field("owner_account_id", &self.owner_account_id);
        formatter.field("created_by_account_id", &self.created_by_account_id);
        formatter.field("route_type", &self.route_type);
        formatter.field("service_id", &self.service_id);
        formatter.field("application_id", &self.application_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("source_path", &self.source_path);
        formatter.field("methods", &self.methods);
        formatter.field("include_child_paths", &self.include_child_paths);
        formatter.field("path_resource_to_id", &self.path_resource_to_id);
        formatter.field("state", &self.state);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("error", &self.error);
        formatter.field("last_updated_time", &self.last_updated_time);
        formatter.field("created_time", &self.created_time);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRouteOutput {
    /// Creates a new builder-style object to manufacture [`GetRouteOutput`](crate::operation::get_route::GetRouteOutput).
    pub fn builder() -> crate::operation::get_route::builders::GetRouteOutputBuilder {
        crate::operation::get_route::builders::GetRouteOutputBuilder::default()
    }
}

/// A builder for [`GetRouteOutput`](crate::operation::get_route::GetRouteOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetRouteOutputBuilder {
    pub(crate) route_id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) owner_account_id: std::option::Option<std::string::String>,
    pub(crate) created_by_account_id: std::option::Option<std::string::String>,
    pub(crate) route_type: std::option::Option<crate::types::RouteType>,
    pub(crate) service_id: std::option::Option<std::string::String>,
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) environment_id: std::option::Option<std::string::String>,
    pub(crate) source_path: std::option::Option<std::string::String>,
    pub(crate) methods: std::option::Option<std::vec::Vec<crate::types::HttpMethod>>,
    pub(crate) include_child_paths: std::option::Option<bool>,
    pub(crate) path_resource_to_id:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) state: std::option::Option<crate::types::RouteState>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) error: std::option::Option<crate::types::ErrorResponse>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetRouteOutputBuilder {
    /// <p>The unique identifier of the route.</p>
    /// <p> <b>DEFAULT</b>: All traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created.</p>
    /// <p> <b>URI_PATH</b>: A route that is based on a URI path.</p>
    pub fn route_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.route_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the route.</p>
    /// <p> <b>DEFAULT</b>: All traffic that does not match another route is forwarded to the default route. Applications must have a default route before any other routes can be created.</p>
    /// <p> <b>URI_PATH</b>: A route that is based on a URI path.</p>
    pub fn set_route_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.route_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the route.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the route.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the route owner.</p>
    pub fn owner_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the route owner.</p>
    pub fn set_owner_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the route creator.</p>
    pub fn created_by_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_by_account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the route creator.</p>
    pub fn set_created_by_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.created_by_account_id = input;
        self
    }
    /// <p>The type of route.</p>
    pub fn route_type(mut self, input: crate::types::RouteType) -> Self {
        self.route_type = Some(input);
        self
    }
    /// <p>The type of route.</p>
    pub fn set_route_type(mut self, input: std::option::Option<crate::types::RouteType>) -> Self {
        self.route_type = input;
        self
    }
    /// <p>The unique identifier of the service.</p>
    pub fn service_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the service.</p>
    pub fn set_service_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_id = input;
        self
    }
    /// <p>The ID of the application that the route belongs to. </p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The ID of the application that the route belongs to. </p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>Unique identifier of the environment.</p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_id = Some(input.into());
        self
    }
    /// <p>Unique identifier of the environment.</p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The path to use to match traffic. Paths must start with <code>/</code> and are relative to the base of the application. </p>
    pub fn source_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_path = Some(input.into());
        self
    }
    /// <p>The path to use to match traffic. Paths must start with <code>/</code> and are relative to the base of the application. </p>
    pub fn set_source_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_path = input;
        self
    }
    /// Appends an item to `methods`.
    ///
    /// To override the contents of this collection use [`set_methods`](Self::set_methods).
    ///
    /// <p>A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service. </p>
    pub fn methods(mut self, input: crate::types::HttpMethod) -> Self {
        let mut v = self.methods.unwrap_or_default();
        v.push(input);
        self.methods = Some(v);
        self
    }
    /// <p>A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service. </p>
    pub fn set_methods(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HttpMethod>>,
    ) -> Self {
        self.methods = input;
        self
    }
    /// <p>Indicates whether to match all subpaths of the given source path. If this value is <code>false</code>, requests must match the source path exactly before they are forwarded to this route's service. </p>
    pub fn include_child_paths(mut self, input: bool) -> Self {
        self.include_child_paths = Some(input);
        self
    }
    /// <p>Indicates whether to match all subpaths of the given source path. If this value is <code>false</code>, requests must match the source path exactly before they are forwarded to this route's service. </p>
    pub fn set_include_child_paths(mut self, input: std::option::Option<bool>) -> Self {
        self.include_child_paths = input;
        self
    }
    /// Adds a key-value pair to `path_resource_to_id`.
    ///
    /// To override the contents of this collection use [`set_path_resource_to_id`](Self::set_path_resource_to_id).
    ///
    /// <p>A mapping of Amazon API Gateway path resources to resource IDs. </p>
    pub fn path_resource_to_id(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.path_resource_to_id.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.path_resource_to_id = Some(hash_map);
        self
    }
    /// <p>A mapping of Amazon API Gateway path resources to resource IDs. </p>
    pub fn set_path_resource_to_id(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.path_resource_to_id = input;
        self
    }
    /// <p>The current state of the route. </p>
    pub fn state(mut self, input: crate::types::RouteState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of the route. </p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::RouteState>) -> Self {
        self.state = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the route. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags assigned to the route. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any error associated with the route resource. </p>
    pub fn error(mut self, input: crate::types::ErrorResponse) -> Self {
        self.error = Some(input);
        self
    }
    /// <p>Any error associated with the route resource. </p>
    pub fn set_error(mut self, input: std::option::Option<crate::types::ErrorResponse>) -> Self {
        self.error = input;
        self
    }
    /// <p>A timestamp that indicates when the route was last updated. </p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>A timestamp that indicates when the route was last updated. </p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The timestamp of when the route is created. </p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The timestamp of when the route is created. </p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRouteOutput`](crate::operation::get_route::GetRouteOutput).
    pub fn build(self) -> crate::operation::get_route::GetRouteOutput {
        crate::operation::get_route::GetRouteOutput {
            route_id: self.route_id,
            arn: self.arn,
            owner_account_id: self.owner_account_id,
            created_by_account_id: self.created_by_account_id,
            route_type: self.route_type,
            service_id: self.service_id,
            application_id: self.application_id,
            environment_id: self.environment_id,
            source_path: self.source_path,
            methods: self.methods,
            include_child_paths: self.include_child_paths,
            path_resource_to_id: self.path_resource_to_id,
            state: self.state,
            tags: self.tags,
            error: self.error,
            last_updated_time: self.last_updated_time,
            created_time: self.created_time,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for GetRouteOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetRouteOutputBuilder");
        formatter.field("route_id", &self.route_id);
        formatter.field("arn", &self.arn);
        formatter.field("owner_account_id", &self.owner_account_id);
        formatter.field("created_by_account_id", &self.created_by_account_id);
        formatter.field("route_type", &self.route_type);
        formatter.field("service_id", &self.service_id);
        formatter.field("application_id", &self.application_id);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("source_path", &self.source_path);
        formatter.field("methods", &self.methods);
        formatter.field("include_child_paths", &self.include_child_paths);
        formatter.field("path_resource_to_id", &self.path_resource_to_id);
        formatter.field("state", &self.state);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("error", &self.error);
        formatter.field("last_updated_time", &self.last_updated_time);
        formatter.field("created_time", &self.created_time);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
