// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRouteInput {
    /// <p>The ID of the environment.</p>
    #[doc(hidden)]
    pub environment_identifier: std::option::Option<std::string::String>,
    /// <p>The ID of the application. </p>
    #[doc(hidden)]
    pub application_identifier: std::option::Option<std::string::String>,
    /// <p>The ID of the route.</p>
    #[doc(hidden)]
    pub route_identifier: std::option::Option<std::string::String>,
}
impl GetRouteInput {
    /// <p>The ID of the environment.</p>
    pub fn environment_identifier(&self) -> std::option::Option<&str> {
        self.environment_identifier.as_deref()
    }
    /// <p>The ID of the application. </p>
    pub fn application_identifier(&self) -> std::option::Option<&str> {
        self.application_identifier.as_deref()
    }
    /// <p>The ID of the route.</p>
    pub fn route_identifier(&self) -> std::option::Option<&str> {
        self.route_identifier.as_deref()
    }
}
impl GetRouteInput {
    /// Creates a new builder-style object to manufacture [`GetRouteInput`](crate::operation::get_route::GetRouteInput).
    pub fn builder() -> crate::operation::get_route::builders::GetRouteInputBuilder {
        crate::operation::get_route::builders::GetRouteInputBuilder::default()
    }
}

/// A builder for [`GetRouteInput`](crate::operation::get_route::GetRouteInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRouteInputBuilder {
    pub(crate) environment_identifier: std::option::Option<std::string::String>,
    pub(crate) application_identifier: std::option::Option<std::string::String>,
    pub(crate) route_identifier: std::option::Option<std::string::String>,
}
impl GetRouteInputBuilder {
    /// <p>The ID of the environment.</p>
    pub fn environment_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_identifier = Some(input.into());
        self
    }
    /// <p>The ID of the environment.</p>
    pub fn set_environment_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.environment_identifier = input;
        self
    }
    /// <p>The ID of the application. </p>
    pub fn application_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_identifier = Some(input.into());
        self
    }
    /// <p>The ID of the application. </p>
    pub fn set_application_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.application_identifier = input;
        self
    }
    /// <p>The ID of the route.</p>
    pub fn route_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.route_identifier = Some(input.into());
        self
    }
    /// <p>The ID of the route.</p>
    pub fn set_route_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.route_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`GetRouteInput`](crate::operation::get_route::GetRouteInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_route::GetRouteInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_route::GetRouteInput {
            environment_identifier: self.environment_identifier,
            application_identifier: self.application_identifier,
            route_identifier: self.route_identifier,
        })
    }
}
