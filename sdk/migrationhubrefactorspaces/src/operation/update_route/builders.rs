// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_route::_update_route_output::UpdateRouteOutputBuilder;

pub use crate::operation::update_route::_update_route_input::UpdateRouteInputBuilder;

impl crate::operation::update_route::builders::UpdateRouteInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_route::UpdateRouteOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_route::UpdateRouteError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_route();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateRoute`.
///
/// <p>Updates an Amazon Web Services Migration Hub Refactor Spaces route.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateRouteFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_route::builders::UpdateRouteInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_route::UpdateRouteOutput,
        crate::operation::update_route::UpdateRouteError,
    > for UpdateRouteFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_route::UpdateRouteOutput,
            crate::operation::update_route::UpdateRouteError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateRouteFluentBuilder {
    /// Creates a new `UpdateRoute`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateRoute as a reference.
    pub fn as_input(&self) -> &crate::operation::update_route::builders::UpdateRouteInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_route::UpdateRouteOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_route::UpdateRouteError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_route::UpdateRoute::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_route::UpdateRoute::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_route::UpdateRouteOutput,
        crate::operation::update_route::UpdateRouteError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the environment in which the route is being updated.</p>
    pub fn environment_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.environment_identifier(input.into());
        self
    }
    /// <p>The ID of the environment in which the route is being updated.</p>
    pub fn set_environment_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_environment_identifier(input);
        self
    }
    /// <p>The ID of the environment in which the route is being updated.</p>
    pub fn get_environment_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_environment_identifier()
    }
    /// <p>The ID of the application within which the route is being updated.</p>
    pub fn application_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.application_identifier(input.into());
        self
    }
    /// <p>The ID of the application within which the route is being updated.</p>
    pub fn set_application_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_application_identifier(input);
        self
    }
    /// <p>The ID of the application within which the route is being updated.</p>
    pub fn get_application_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_application_identifier()
    }
    /// <p>The unique identifier of the route to update.</p>
    pub fn route_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.route_identifier(input.into());
        self
    }
    /// <p>The unique identifier of the route to update.</p>
    pub fn set_route_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_route_identifier(input);
        self
    }
    /// <p>The unique identifier of the route to update.</p>
    pub fn get_route_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_route_identifier()
    }
    /// <p>If set to <code>ACTIVE</code>, traffic is forwarded to this route’s service after the route is updated.</p>
    pub fn activation_state(mut self, input: crate::types::RouteActivationState) -> Self {
        self.inner = self.inner.activation_state(input);
        self
    }
    /// <p>If set to <code>ACTIVE</code>, traffic is forwarded to this route’s service after the route is updated.</p>
    pub fn set_activation_state(mut self, input: ::std::option::Option<crate::types::RouteActivationState>) -> Self {
        self.inner = self.inner.set_activation_state(input);
        self
    }
    /// <p>If set to <code>ACTIVE</code>, traffic is forwarded to this route’s service after the route is updated.</p>
    pub fn get_activation_state(&self) -> &::std::option::Option<crate::types::RouteActivationState> {
        self.inner.get_activation_state()
    }
}
