// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_applications_output_next_token(
    input: &crate::operation::list_applications::ListApplicationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_environment_vpcs_output_next_token(
    input: &crate::operation::list_environment_vpcs::ListEnvironmentVpcsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_environments_output_next_token(
    input: &crate::operation::list_environments::ListEnvironmentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_routes_output_next_token(
    input: &crate::operation::list_routes::ListRoutesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_services_output_next_token(
    input: &crate::operation::list_services::ListServicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_applications_output_application_summary_list(
    input: crate::operation::list_applications::ListApplicationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ApplicationSummary>> {
    let input = match input.application_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_environment_vpcs_output_environment_vpc_list(
    input: crate::operation::list_environment_vpcs::ListEnvironmentVpcsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EnvironmentVpc>> {
    let input = match input.environment_vpc_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_environments_output_environment_summary_list(
    input: crate::operation::list_environments::ListEnvironmentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EnvironmentSummary>> {
    let input = match input.environment_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_routes_output_route_summary_list(
    input: crate::operation::list_routes::ListRoutesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RouteSummary>> {
    let input = match input.route_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_services_output_service_summary_list(
    input: crate::operation::list_services::ListServicesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ServiceSummary>> {
    let input = match input.service_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
