// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_service::CreateServiceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.endpoint_type {
        object.key("EndpointType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.lambda_endpoint {
        #[allow(unused_mut)]
        let mut object_5 = object.key("LambdaEndpoint").start_object();
        crate::protocol_serde::shape_lambda_endpoint_input::ser_lambda_endpoint_input(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.name {
        object.key("Name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.tags {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Tags").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.url_endpoint {
        #[allow(unused_mut)]
        let mut object_12 = object.key("UrlEndpoint").start_object();
        crate::protocol_serde::shape_url_endpoint_input::ser_url_endpoint_input(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.vpc_id {
        object.key("VpcId").string(var_13.as_str());
    }
    Ok(())
}
