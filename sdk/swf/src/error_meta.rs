// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    DefaultUndefinedFault(crate::error::DefaultUndefinedFault),
    DomainAlreadyExistsFault(crate::error::DomainAlreadyExistsFault),
    DomainDeprecatedFault(crate::error::DomainDeprecatedFault),
    LimitExceededFault(crate::error::LimitExceededFault),
    OperationNotPermittedFault(crate::error::OperationNotPermittedFault),
    TooManyTagsFault(crate::error::TooManyTagsFault),
    TypeAlreadyExistsFault(crate::error::TypeAlreadyExistsFault),
    TypeDeprecatedFault(crate::error::TypeDeprecatedFault),
    UnknownResourceFault(crate::error::UnknownResourceFault),
    WorkflowExecutionAlreadyStartedFault(crate::error::WorkflowExecutionAlreadyStartedFault),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::DefaultUndefinedFault(inner) => inner.fmt(f),
            Error::DomainAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DomainDeprecatedFault(inner) => inner.fmt(f),
            Error::LimitExceededFault(inner) => inner.fmt(f),
            Error::OperationNotPermittedFault(inner) => inner.fmt(f),
            Error::TooManyTagsFault(inner) => inner.fmt(f),
            Error::TypeAlreadyExistsFault(inner) => inner.fmt(f),
            Error::TypeDeprecatedFault(inner) => inner.fmt(f),
            Error::UnknownResourceFault(inner) => inner.fmt(f),
            Error::WorkflowExecutionAlreadyStartedFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CountClosedWorkflowExecutionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CountClosedWorkflowExecutionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CountClosedWorkflowExecutionsErrorKind::OperationNotPermittedFault(inner) => Error::OperationNotPermittedFault(inner),
                crate::error::CountClosedWorkflowExecutionsErrorKind::UnknownResourceFault(inner) => Error::UnknownResourceFault(inner),
                crate::error::CountClosedWorkflowExecutionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CountOpenWorkflowExecutionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CountOpenWorkflowExecutionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CountOpenWorkflowExecutionsErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::CountOpenWorkflowExecutionsErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::CountOpenWorkflowExecutionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CountPendingActivityTasksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CountPendingActivityTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CountPendingActivityTasksErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::CountPendingActivityTasksErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::CountPendingActivityTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CountPendingDecisionTasksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CountPendingDecisionTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CountPendingDecisionTasksErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::CountPendingDecisionTasksErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::CountPendingDecisionTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeprecateActivityTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeprecateActivityTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeprecateActivityTypeErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::DeprecateActivityTypeErrorKind::TypeDeprecatedFault(inner) => {
                    Error::TypeDeprecatedFault(inner)
                }
                crate::error::DeprecateActivityTypeErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::DeprecateActivityTypeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeprecateDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeprecateDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeprecateDomainErrorKind::DomainDeprecatedFault(inner) => {
                    Error::DomainDeprecatedFault(inner)
                }
                crate::error::DeprecateDomainErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::DeprecateDomainErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::DeprecateDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeprecateWorkflowTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeprecateWorkflowTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeprecateWorkflowTypeErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::DeprecateWorkflowTypeErrorKind::TypeDeprecatedFault(inner) => {
                    Error::TypeDeprecatedFault(inner)
                }
                crate::error::DeprecateWorkflowTypeErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::DeprecateWorkflowTypeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeActivityTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeActivityTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeActivityTypeErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::DescribeActivityTypeErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::DescribeActivityTypeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDomainErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::DescribeDomainErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::DescribeDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeWorkflowExecutionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeWorkflowExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeWorkflowExecutionErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::DescribeWorkflowExecutionErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::DescribeWorkflowExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeWorkflowTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeWorkflowTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeWorkflowTypeErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::DescribeWorkflowTypeErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::DescribeWorkflowTypeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetWorkflowExecutionHistoryError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetWorkflowExecutionHistoryError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetWorkflowExecutionHistoryErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::GetWorkflowExecutionHistoryErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::GetWorkflowExecutionHistoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListActivityTypesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListActivityTypesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListActivityTypesErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::ListActivityTypesErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::ListActivityTypesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListClosedWorkflowExecutionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListClosedWorkflowExecutionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListClosedWorkflowExecutionsErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::ListClosedWorkflowExecutionsErrorKind::UnknownResourceFault(
                    inner,
                ) => Error::UnknownResourceFault(inner),
                crate::error::ListClosedWorkflowExecutionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDomainsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDomainsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDomainsErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::ListDomainsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListOpenWorkflowExecutionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListOpenWorkflowExecutionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListOpenWorkflowExecutionsErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::ListOpenWorkflowExecutionsErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::ListOpenWorkflowExecutionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListWorkflowTypesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListWorkflowTypesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListWorkflowTypesErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::ListWorkflowTypesErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::ListWorkflowTypesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PollForActivityTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PollForActivityTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PollForActivityTaskErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::PollForActivityTaskErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::PollForActivityTaskErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::PollForActivityTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PollForDecisionTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PollForDecisionTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PollForDecisionTaskErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::PollForDecisionTaskErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::PollForDecisionTaskErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::PollForDecisionTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RecordActivityTaskHeartbeatError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RecordActivityTaskHeartbeatError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RecordActivityTaskHeartbeatErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::RecordActivityTaskHeartbeatErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::RecordActivityTaskHeartbeatErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterActivityTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterActivityTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterActivityTypeErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::RegisterActivityTypeErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::RegisterActivityTypeErrorKind::TypeAlreadyExistsFault(inner) => {
                    Error::TypeAlreadyExistsFault(inner)
                }
                crate::error::RegisterActivityTypeErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::RegisterActivityTypeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterDomainErrorKind::DomainAlreadyExistsFault(inner) => {
                    Error::DomainAlreadyExistsFault(inner)
                }
                crate::error::RegisterDomainErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::RegisterDomainErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::RegisterDomainErrorKind::TooManyTagsFault(inner) => {
                    Error::TooManyTagsFault(inner)
                }
                crate::error::RegisterDomainErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterWorkflowTypeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterWorkflowTypeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterWorkflowTypeErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::RegisterWorkflowTypeErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::RegisterWorkflowTypeErrorKind::TypeAlreadyExistsFault(inner) => {
                    Error::TypeAlreadyExistsFault(inner)
                }
                crate::error::RegisterWorkflowTypeErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::RegisterWorkflowTypeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RequestCancelWorkflowExecutionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RequestCancelWorkflowExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RequestCancelWorkflowExecutionErrorKind::OperationNotPermittedFault(inner) => Error::OperationNotPermittedFault(inner),
                crate::error::RequestCancelWorkflowExecutionErrorKind::UnknownResourceFault(inner) => Error::UnknownResourceFault(inner),
                crate::error::RequestCancelWorkflowExecutionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RespondActivityTaskCanceledError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RespondActivityTaskCanceledError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RespondActivityTaskCanceledErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::RespondActivityTaskCanceledErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::RespondActivityTaskCanceledErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RespondActivityTaskCompletedError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RespondActivityTaskCompletedError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RespondActivityTaskCompletedErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::RespondActivityTaskCompletedErrorKind::UnknownResourceFault(
                    inner,
                ) => Error::UnknownResourceFault(inner),
                crate::error::RespondActivityTaskCompletedErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RespondActivityTaskFailedError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RespondActivityTaskFailedError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RespondActivityTaskFailedErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::RespondActivityTaskFailedErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::RespondActivityTaskFailedErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RespondDecisionTaskCompletedError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RespondDecisionTaskCompletedError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RespondDecisionTaskCompletedErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::RespondDecisionTaskCompletedErrorKind::UnknownResourceFault(
                    inner,
                ) => Error::UnknownResourceFault(inner),
                crate::error::RespondDecisionTaskCompletedErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SignalWorkflowExecutionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SignalWorkflowExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SignalWorkflowExecutionErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::SignalWorkflowExecutionErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::SignalWorkflowExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartWorkflowExecutionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartWorkflowExecutionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StartWorkflowExecutionErrorKind::DefaultUndefinedFault(inner) => Error::DefaultUndefinedFault(inner),
                crate::error::StartWorkflowExecutionErrorKind::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
                crate::error::StartWorkflowExecutionErrorKind::OperationNotPermittedFault(inner) => Error::OperationNotPermittedFault(inner),
                crate::error::StartWorkflowExecutionErrorKind::TypeDeprecatedFault(inner) => Error::TypeDeprecatedFault(inner),
                crate::error::StartWorkflowExecutionErrorKind::UnknownResourceFault(inner) => Error::UnknownResourceFault(inner),
                crate::error::StartWorkflowExecutionErrorKind::WorkflowExecutionAlreadyStartedFault(inner) => Error::WorkflowExecutionAlreadyStartedFault(inner),
                crate::error::StartWorkflowExecutionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::TagResourceErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::TagResourceErrorKind::TooManyTagsFault(inner) => {
                    Error::TooManyTagsFault(inner)
                }
                crate::error::TagResourceErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TerminateWorkflowExecutionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::TerminateWorkflowExecutionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TerminateWorkflowExecutionErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::TerminateWorkflowExecutionErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::TerminateWorkflowExecutionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UndeprecateActivityTypeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UndeprecateActivityTypeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UndeprecateActivityTypeErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::UndeprecateActivityTypeErrorKind::TypeAlreadyExistsFault(inner) => {
                    Error::TypeAlreadyExistsFault(inner)
                }
                crate::error::UndeprecateActivityTypeErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::UndeprecateActivityTypeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UndeprecateDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UndeprecateDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UndeprecateDomainErrorKind::DomainAlreadyExistsFault(inner) => {
                    Error::DomainAlreadyExistsFault(inner)
                }
                crate::error::UndeprecateDomainErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::UndeprecateDomainErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::UndeprecateDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UndeprecateWorkflowTypeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UndeprecateWorkflowTypeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UndeprecateWorkflowTypeErrorKind::OperationNotPermittedFault(
                    inner,
                ) => Error::OperationNotPermittedFault(inner),
                crate::error::UndeprecateWorkflowTypeErrorKind::TypeAlreadyExistsFault(inner) => {
                    Error::TypeAlreadyExistsFault(inner)
                }
                crate::error::UndeprecateWorkflowTypeErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::UndeprecateWorkflowTypeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::UntagResourceErrorKind::OperationNotPermittedFault(inner) => {
                    Error::OperationNotPermittedFault(inner)
                }
                crate::error::UntagResourceErrorKind::UnknownResourceFault(inner) => {
                    Error::UnknownResourceFault(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
