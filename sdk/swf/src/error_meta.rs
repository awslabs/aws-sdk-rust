// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The <code>StartWorkflowExecution</code> API action was called without the required parameters set.</p>
    /// <p>Some workflow execution parameters, such as the decision <code>taskList</code>, must be set to start the execution. However, these parameters might have been set as defaults when the workflow type was registered. In this case, you can omit these parameters from the <code>StartWorkflowExecution</code> call and Amazon SWF uses the values defined in the workflow type.</p> <note>
    /// <p>If these parameters aren't set and no default parameters were defined in the workflow type, this error is displayed.</p>
    /// </note>
    DefaultUndefinedFault(crate::error::DefaultUndefinedFault),
    /// <p>Returned if the domain already exists. You may get this fault if you are registering a domain that is either already registered or deprecated, or if you undeprecate a domain that is currently registered.</p>
    DomainAlreadyExistsFault(crate::error::DomainAlreadyExistsFault),
    /// <p>Returned when the specified domain has been deprecated.</p>
    DomainDeprecatedFault(crate::error::DomainDeprecatedFault),
    /// <p>Returned by any operation if a system imposed limitation has been reached. To address this fault you should either clean up unused resources or increase the limit by contacting AWS.</p>
    LimitExceededFault(crate::error::LimitExceededFault),
    /// <p>Returned when the caller doesn't have sufficient permissions to invoke the action.</p>
    OperationNotPermittedFault(crate::error::OperationNotPermittedFault),
    /// <p>You've exceeded the number of tags allowed for a domain.</p>
    TooManyTagsFault(crate::error::TooManyTagsFault),
    /// <p>Returned if the type already exists in the specified domain. You may get this fault if you are registering a type that is either already registered or deprecated, or if you undeprecate a type that is currently registered.</p>
    TypeAlreadyExistsFault(crate::error::TypeAlreadyExistsFault),
    /// <p>Returned when the specified activity or workflow type was already deprecated.</p>
    TypeDeprecatedFault(crate::error::TypeDeprecatedFault),
    /// <p>Returned when the named resource cannot be found with in the scope of this operation (region or domain). This could happen if the named resource was never created or is no longer available for this operation.</p>
    UnknownResourceFault(crate::error::UnknownResourceFault),
    /// <p>Returned by <code>StartWorkflowExecution</code> when an open execution with the same workflowId is already running in the specified domain.</p>
    WorkflowExecutionAlreadyStartedFault(crate::error::WorkflowExecutionAlreadyStartedFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::DefaultUndefinedFault(inner) => inner.fmt(f),
            Error::DomainAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DomainDeprecatedFault(inner) => inner.fmt(f),
            Error::LimitExceededFault(inner) => inner.fmt(f),
            Error::OperationNotPermittedFault(inner) => inner.fmt(f),
            Error::TooManyTagsFault(inner) => inner.fmt(f),
            Error::TypeAlreadyExistsFault(inner) => inner.fmt(f),
            Error::TypeDeprecatedFault(inner) => inner.fmt(f),
            Error::UnknownResourceFault(inner) => inner.fmt(f),
            Error::WorkflowExecutionAlreadyStartedFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CountClosedWorkflowExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CountClosedWorkflowExecutionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CountClosedWorkflowExecutionsError> for Error {
    fn from(err: crate::error::CountClosedWorkflowExecutionsError) -> Self {
        match err {
            crate::error::CountClosedWorkflowExecutionsError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::CountClosedWorkflowExecutionsError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::CountClosedWorkflowExecutionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CountOpenWorkflowExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CountOpenWorkflowExecutionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CountOpenWorkflowExecutionsError> for Error {
    fn from(err: crate::error::CountOpenWorkflowExecutionsError) -> Self {
        match err {
            crate::error::CountOpenWorkflowExecutionsError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::CountOpenWorkflowExecutionsError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::CountOpenWorkflowExecutionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CountPendingActivityTasksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CountPendingActivityTasksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CountPendingActivityTasksError> for Error {
    fn from(err: crate::error::CountPendingActivityTasksError) -> Self {
        match err {
            crate::error::CountPendingActivityTasksError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::CountPendingActivityTasksError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::CountPendingActivityTasksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CountPendingDecisionTasksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CountPendingDecisionTasksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CountPendingDecisionTasksError> for Error {
    fn from(err: crate::error::CountPendingDecisionTasksError) -> Self {
        match err {
            crate::error::CountPendingDecisionTasksError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::CountPendingDecisionTasksError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::CountPendingDecisionTasksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeprecateActivityTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeprecateActivityTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeprecateActivityTypeError> for Error {
    fn from(err: crate::error::DeprecateActivityTypeError) -> Self {
        match err {
            crate::error::DeprecateActivityTypeError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::DeprecateActivityTypeError::TypeDeprecatedFault(inner) => {
                Error::TypeDeprecatedFault(inner)
            }
            crate::error::DeprecateActivityTypeError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::DeprecateActivityTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeprecateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeprecateDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeprecateDomainError> for Error {
    fn from(err: crate::error::DeprecateDomainError) -> Self {
        match err {
            crate::error::DeprecateDomainError::DomainDeprecatedFault(inner) => {
                Error::DomainDeprecatedFault(inner)
            }
            crate::error::DeprecateDomainError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::DeprecateDomainError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::DeprecateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeprecateWorkflowTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeprecateWorkflowTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeprecateWorkflowTypeError> for Error {
    fn from(err: crate::error::DeprecateWorkflowTypeError) -> Self {
        match err {
            crate::error::DeprecateWorkflowTypeError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::DeprecateWorkflowTypeError::TypeDeprecatedFault(inner) => {
                Error::TypeDeprecatedFault(inner)
            }
            crate::error::DeprecateWorkflowTypeError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::DeprecateWorkflowTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeActivityTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeActivityTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeActivityTypeError> for Error {
    fn from(err: crate::error::DescribeActivityTypeError) -> Self {
        match err {
            crate::error::DescribeActivityTypeError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::DescribeActivityTypeError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::DescribeActivityTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainError> for Error {
    fn from(err: crate::error::DescribeDomainError) -> Self {
        match err {
            crate::error::DescribeDomainError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::DescribeDomainError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::DescribeDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWorkflowExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeWorkflowExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeWorkflowExecutionError> for Error {
    fn from(err: crate::error::DescribeWorkflowExecutionError) -> Self {
        match err {
            crate::error::DescribeWorkflowExecutionError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::DescribeWorkflowExecutionError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::DescribeWorkflowExecutionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWorkflowTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeWorkflowTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeWorkflowTypeError> for Error {
    fn from(err: crate::error::DescribeWorkflowTypeError) -> Self {
        match err {
            crate::error::DescribeWorkflowTypeError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::DescribeWorkflowTypeError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::DescribeWorkflowTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorkflowExecutionHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetWorkflowExecutionHistoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetWorkflowExecutionHistoryError> for Error {
    fn from(err: crate::error::GetWorkflowExecutionHistoryError) -> Self {
        match err {
            crate::error::GetWorkflowExecutionHistoryError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::GetWorkflowExecutionHistoryError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::GetWorkflowExecutionHistoryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListActivityTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListActivityTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListActivityTypesError> for Error {
    fn from(err: crate::error::ListActivityTypesError) -> Self {
        match err {
            crate::error::ListActivityTypesError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::ListActivityTypesError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::ListActivityTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListClosedWorkflowExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListClosedWorkflowExecutionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListClosedWorkflowExecutionsError> for Error {
    fn from(err: crate::error::ListClosedWorkflowExecutionsError) -> Self {
        match err {
            crate::error::ListClosedWorkflowExecutionsError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::ListClosedWorkflowExecutionsError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::ListClosedWorkflowExecutionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDomainsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainsError> for Error {
    fn from(err: crate::error::ListDomainsError) -> Self {
        match err {
            crate::error::ListDomainsError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::ListDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOpenWorkflowExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOpenWorkflowExecutionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOpenWorkflowExecutionsError> for Error {
    fn from(err: crate::error::ListOpenWorkflowExecutionsError) -> Self {
        match err {
            crate::error::ListOpenWorkflowExecutionsError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::ListOpenWorkflowExecutionsError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::ListOpenWorkflowExecutionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::ListTagsForResourceError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::ListTagsForResourceError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorkflowTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListWorkflowTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWorkflowTypesError> for Error {
    fn from(err: crate::error::ListWorkflowTypesError) -> Self {
        match err {
            crate::error::ListWorkflowTypesError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::ListWorkflowTypesError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::ListWorkflowTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PollForActivityTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PollForActivityTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PollForActivityTaskError> for Error {
    fn from(err: crate::error::PollForActivityTaskError) -> Self {
        match err {
            crate::error::PollForActivityTaskError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::PollForActivityTaskError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::PollForActivityTaskError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::PollForActivityTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PollForDecisionTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PollForDecisionTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PollForDecisionTaskError> for Error {
    fn from(err: crate::error::PollForDecisionTaskError) -> Self {
        match err {
            crate::error::PollForDecisionTaskError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::PollForDecisionTaskError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::PollForDecisionTaskError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::PollForDecisionTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RecordActivityTaskHeartbeatError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RecordActivityTaskHeartbeatError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RecordActivityTaskHeartbeatError> for Error {
    fn from(err: crate::error::RecordActivityTaskHeartbeatError) -> Self {
        match err {
            crate::error::RecordActivityTaskHeartbeatError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::RecordActivityTaskHeartbeatError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::RecordActivityTaskHeartbeatError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterActivityTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterActivityTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterActivityTypeError> for Error {
    fn from(err: crate::error::RegisterActivityTypeError) -> Self {
        match err {
            crate::error::RegisterActivityTypeError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::RegisterActivityTypeError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::RegisterActivityTypeError::TypeAlreadyExistsFault(inner) => {
                Error::TypeAlreadyExistsFault(inner)
            }
            crate::error::RegisterActivityTypeError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::RegisterActivityTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RegisterDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterDomainError> for Error {
    fn from(err: crate::error::RegisterDomainError) -> Self {
        match err {
            crate::error::RegisterDomainError::DomainAlreadyExistsFault(inner) => {
                Error::DomainAlreadyExistsFault(inner)
            }
            crate::error::RegisterDomainError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::RegisterDomainError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::RegisterDomainError::TooManyTagsFault(inner) => {
                Error::TooManyTagsFault(inner)
            }
            crate::error::RegisterDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterWorkflowTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterWorkflowTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterWorkflowTypeError> for Error {
    fn from(err: crate::error::RegisterWorkflowTypeError) -> Self {
        match err {
            crate::error::RegisterWorkflowTypeError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::RegisterWorkflowTypeError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::RegisterWorkflowTypeError::TypeAlreadyExistsFault(inner) => {
                Error::TypeAlreadyExistsFault(inner)
            }
            crate::error::RegisterWorkflowTypeError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::RegisterWorkflowTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RequestCancelWorkflowExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RequestCancelWorkflowExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RequestCancelWorkflowExecutionError> for Error {
    fn from(err: crate::error::RequestCancelWorkflowExecutionError) -> Self {
        match err {
            crate::error::RequestCancelWorkflowExecutionError::OperationNotPermittedFault(
                inner,
            ) => Error::OperationNotPermittedFault(inner),
            crate::error::RequestCancelWorkflowExecutionError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::RequestCancelWorkflowExecutionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RespondActivityTaskCanceledError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RespondActivityTaskCanceledError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RespondActivityTaskCanceledError> for Error {
    fn from(err: crate::error::RespondActivityTaskCanceledError) -> Self {
        match err {
            crate::error::RespondActivityTaskCanceledError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::RespondActivityTaskCanceledError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::RespondActivityTaskCanceledError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RespondActivityTaskCompletedError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RespondActivityTaskCompletedError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RespondActivityTaskCompletedError> for Error {
    fn from(err: crate::error::RespondActivityTaskCompletedError) -> Self {
        match err {
            crate::error::RespondActivityTaskCompletedError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::RespondActivityTaskCompletedError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::RespondActivityTaskCompletedError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RespondActivityTaskFailedError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RespondActivityTaskFailedError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RespondActivityTaskFailedError> for Error {
    fn from(err: crate::error::RespondActivityTaskFailedError) -> Self {
        match err {
            crate::error::RespondActivityTaskFailedError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::RespondActivityTaskFailedError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::RespondActivityTaskFailedError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RespondDecisionTaskCompletedError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RespondDecisionTaskCompletedError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RespondDecisionTaskCompletedError> for Error {
    fn from(err: crate::error::RespondDecisionTaskCompletedError) -> Self {
        match err {
            crate::error::RespondDecisionTaskCompletedError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::RespondDecisionTaskCompletedError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::RespondDecisionTaskCompletedError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SignalWorkflowExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SignalWorkflowExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SignalWorkflowExecutionError> for Error {
    fn from(err: crate::error::SignalWorkflowExecutionError) -> Self {
        match err {
            crate::error::SignalWorkflowExecutionError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::SignalWorkflowExecutionError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::SignalWorkflowExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartWorkflowExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartWorkflowExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartWorkflowExecutionError> for Error {
    fn from(err: crate::error::StartWorkflowExecutionError) -> Self {
        match err {
            crate::error::StartWorkflowExecutionError::DefaultUndefinedFault(inner) => {
                Error::DefaultUndefinedFault(inner)
            }
            crate::error::StartWorkflowExecutionError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::StartWorkflowExecutionError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::StartWorkflowExecutionError::TypeDeprecatedFault(inner) => {
                Error::TypeDeprecatedFault(inner)
            }
            crate::error::StartWorkflowExecutionError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::StartWorkflowExecutionError::WorkflowExecutionAlreadyStartedFault(
                inner,
            ) => Error::WorkflowExecutionAlreadyStartedFault(inner),
            crate::error::StartWorkflowExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::TagResourceError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::TagResourceError::TooManyTagsFault(inner) => {
                Error::TooManyTagsFault(inner)
            }
            crate::error::TagResourceError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TerminateWorkflowExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TerminateWorkflowExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TerminateWorkflowExecutionError> for Error {
    fn from(err: crate::error::TerminateWorkflowExecutionError) -> Self {
        match err {
            crate::error::TerminateWorkflowExecutionError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::TerminateWorkflowExecutionError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::TerminateWorkflowExecutionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UndeprecateActivityTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UndeprecateActivityTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UndeprecateActivityTypeError> for Error {
    fn from(err: crate::error::UndeprecateActivityTypeError) -> Self {
        match err {
            crate::error::UndeprecateActivityTypeError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::UndeprecateActivityTypeError::TypeAlreadyExistsFault(inner) => {
                Error::TypeAlreadyExistsFault(inner)
            }
            crate::error::UndeprecateActivityTypeError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::UndeprecateActivityTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UndeprecateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UndeprecateDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UndeprecateDomainError> for Error {
    fn from(err: crate::error::UndeprecateDomainError) -> Self {
        match err {
            crate::error::UndeprecateDomainError::DomainAlreadyExistsFault(inner) => {
                Error::DomainAlreadyExistsFault(inner)
            }
            crate::error::UndeprecateDomainError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::UndeprecateDomainError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::UndeprecateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UndeprecateWorkflowTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UndeprecateWorkflowTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UndeprecateWorkflowTypeError> for Error {
    fn from(err: crate::error::UndeprecateWorkflowTypeError) -> Self {
        match err {
            crate::error::UndeprecateWorkflowTypeError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::UndeprecateWorkflowTypeError::TypeAlreadyExistsFault(inner) => {
                Error::TypeAlreadyExistsFault(inner)
            }
            crate::error::UndeprecateWorkflowTypeError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::UndeprecateWorkflowTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::UntagResourceError::OperationNotPermittedFault(inner) => {
                Error::OperationNotPermittedFault(inner)
            }
            crate::error::UntagResourceError::UnknownResourceFault(inner) => {
                Error::UnknownResourceFault(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::DefaultUndefinedFault(e) => e.request_id(),
            Self::DomainAlreadyExistsFault(e) => e.request_id(),
            Self::DomainDeprecatedFault(e) => e.request_id(),
            Self::LimitExceededFault(e) => e.request_id(),
            Self::OperationNotPermittedFault(e) => e.request_id(),
            Self::TooManyTagsFault(e) => e.request_id(),
            Self::TypeAlreadyExistsFault(e) => e.request_id(),
            Self::TypeDeprecatedFault(e) => e.request_id(),
            Self::UnknownResourceFault(e) => e.request_id(),
            Self::WorkflowExecutionAlreadyStartedFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
