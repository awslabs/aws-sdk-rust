// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListClosedWorkflowExecutionsInput {
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub start_time_filter: ::std::option::Option<crate::types::ExecutionTimeFilter>,
    /// <p>If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub close_time_filter: ::std::option::Option<crate::types::ExecutionTimeFilter>,
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub execution_filter: ::std::option::Option<crate::types::WorkflowExecutionFilter>,
    /// <p>If specified, only workflow executions that match this <i>close status</i> are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub close_status_filter: ::std::option::Option<crate::types::CloseStatusFilter>,
    /// <p>If specified, only executions of the type specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub type_filter: ::std::option::Option<crate::types::WorkflowTypeFilter>,
    /// <p>If specified, only executions that have the matching tag are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub tag_filter: ::std::option::Option<crate::types::TagFilter>,
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub next_page_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub maximum_page_size: ::std::option::Option<i32>,
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.</p>
    pub reverse_order: ::std::option::Option<bool>,
}
impl ListClosedWorkflowExecutionsInput {
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub fn start_time_filter(&self) -> ::std::option::Option<&crate::types::ExecutionTimeFilter> {
        self.start_time_filter.as_ref()
    }
    /// <p>If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub fn close_time_filter(&self) -> ::std::option::Option<&crate::types::ExecutionTimeFilter> {
        self.close_time_filter.as_ref()
    }
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn execution_filter(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionFilter> {
        self.execution_filter.as_ref()
    }
    /// <p>If specified, only workflow executions that match this <i>close status</i> are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn close_status_filter(&self) -> ::std::option::Option<&crate::types::CloseStatusFilter> {
        self.close_status_filter.as_ref()
    }
    /// <p>If specified, only executions of the type specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn type_filter(&self) -> ::std::option::Option<&crate::types::WorkflowTypeFilter> {
        self.type_filter.as_ref()
    }
    /// <p>If specified, only executions that have the matching tag are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn tag_filter(&self) -> ::std::option::Option<&crate::types::TagFilter> {
        self.tag_filter.as_ref()
    }
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub fn next_page_token(&self) -> ::std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub fn maximum_page_size(&self) -> ::std::option::Option<i32> {
        self.maximum_page_size
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.</p>
    pub fn reverse_order(&self) -> ::std::option::Option<bool> {
        self.reverse_order
    }
}
impl ListClosedWorkflowExecutionsInput {
    /// Creates a new builder-style object to manufacture [`ListClosedWorkflowExecutionsInput`](crate::operation::list_closed_workflow_executions::ListClosedWorkflowExecutionsInput).
    pub fn builder() -> crate::operation::list_closed_workflow_executions::builders::ListClosedWorkflowExecutionsInputBuilder {
        crate::operation::list_closed_workflow_executions::builders::ListClosedWorkflowExecutionsInputBuilder::default()
    }
}

/// A builder for [`ListClosedWorkflowExecutionsInput`](crate::operation::list_closed_workflow_executions::ListClosedWorkflowExecutionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListClosedWorkflowExecutionsInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) start_time_filter: ::std::option::Option<crate::types::ExecutionTimeFilter>,
    pub(crate) close_time_filter: ::std::option::Option<crate::types::ExecutionTimeFilter>,
    pub(crate) execution_filter: ::std::option::Option<crate::types::WorkflowExecutionFilter>,
    pub(crate) close_status_filter: ::std::option::Option<crate::types::CloseStatusFilter>,
    pub(crate) type_filter: ::std::option::Option<crate::types::WorkflowTypeFilter>,
    pub(crate) tag_filter: ::std::option::Option<crate::types::TagFilter>,
    pub(crate) next_page_token: ::std::option::Option<::std::string::String>,
    pub(crate) maximum_page_size: ::std::option::Option<i32>,
    pub(crate) reverse_order: ::std::option::Option<bool>,
}
impl ListClosedWorkflowExecutionsInputBuilder {
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub fn start_time_filter(mut self, input: crate::types::ExecutionTimeFilter) -> Self {
        self.start_time_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub fn set_start_time_filter(mut self, input: ::std::option::Option<crate::types::ExecutionTimeFilter>) -> Self {
        self.start_time_filter = input;
        self
    }
    /// <p>If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub fn get_start_time_filter(&self) -> &::std::option::Option<crate::types::ExecutionTimeFilter> {
        &self.start_time_filter
    }
    /// <p>If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub fn close_time_filter(mut self, input: crate::types::ExecutionTimeFilter) -> Self {
        self.close_time_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub fn set_close_time_filter(mut self, input: ::std::option::Option<crate::types::ExecutionTimeFilter>) -> Self {
        self.close_time_filter = input;
        self
    }
    /// <p>If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times.</p> <note>
    /// <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>
    /// </note>
    pub fn get_close_time_filter(&self) -> &::std::option::Option<crate::types::ExecutionTimeFilter> {
        &self.close_time_filter
    }
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn execution_filter(mut self, input: crate::types::WorkflowExecutionFilter) -> Self {
        self.execution_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_execution_filter(mut self, input: ::std::option::Option<crate::types::WorkflowExecutionFilter>) -> Self {
        self.execution_filter = input;
        self
    }
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_execution_filter(&self) -> &::std::option::Option<crate::types::WorkflowExecutionFilter> {
        &self.execution_filter
    }
    /// <p>If specified, only workflow executions that match this <i>close status</i> are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn close_status_filter(mut self, input: crate::types::CloseStatusFilter) -> Self {
        self.close_status_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>If specified, only workflow executions that match this <i>close status</i> are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_close_status_filter(mut self, input: ::std::option::Option<crate::types::CloseStatusFilter>) -> Self {
        self.close_status_filter = input;
        self
    }
    /// <p>If specified, only workflow executions that match this <i>close status</i> are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_close_status_filter(&self) -> &::std::option::Option<crate::types::CloseStatusFilter> {
        &self.close_status_filter
    }
    /// <p>If specified, only executions of the type specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn type_filter(mut self, input: crate::types::WorkflowTypeFilter) -> Self {
        self.type_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>If specified, only executions of the type specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_type_filter(mut self, input: ::std::option::Option<crate::types::WorkflowTypeFilter>) -> Self {
        self.type_filter = input;
        self
    }
    /// <p>If specified, only executions of the type specified in the filter are returned.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_type_filter(&self) -> &::std::option::Option<crate::types::WorkflowTypeFilter> {
        &self.type_filter
    }
    /// <p>If specified, only executions that have the matching tag are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn tag_filter(mut self, input: crate::types::TagFilter) -> Self {
        self.tag_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>If specified, only executions that have the matching tag are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_tag_filter(mut self, input: ::std::option::Option<crate::types::TagFilter>) -> Self {
        self.tag_filter = input;
        self
    }
    /// <p>If specified, only executions that have the matching tag are listed.</p> <note>
    /// <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_tag_filter(&self) -> &::std::option::Option<crate::types::TagFilter> {
        &self.tag_filter
    }
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub fn next_page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_page_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub fn set_next_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub fn get_next_page_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_page_token
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub fn maximum_page_size(mut self, input: i32) -> Self {
        self.maximum_page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub fn set_maximum_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_page_size = input;
        self
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub fn get_maximum_page_size(&self) -> &::std::option::Option<i32> {
        &self.maximum_page_size
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.</p>
    pub fn reverse_order(mut self, input: bool) -> Self {
        self.reverse_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.</p>
    pub fn set_reverse_order(mut self, input: ::std::option::Option<bool>) -> Self {
        self.reverse_order = input;
        self
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.</p>
    pub fn get_reverse_order(&self) -> &::std::option::Option<bool> {
        &self.reverse_order
    }
    /// Consumes the builder and constructs a [`ListClosedWorkflowExecutionsInput`](crate::operation::list_closed_workflow_executions::ListClosedWorkflowExecutionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_closed_workflow_executions::ListClosedWorkflowExecutionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_closed_workflow_executions::ListClosedWorkflowExecutionsInput {
            domain: self.domain,
            start_time_filter: self.start_time_filter,
            close_time_filter: self.close_time_filter,
            execution_filter: self.execution_filter,
            close_status_filter: self.close_status_filter,
            type_filter: self.type_filter,
            tag_filter: self.tag_filter,
            next_page_token: self.next_page_token,
            maximum_page_size: self.maximum_page_size,
            reverse_order: self.reverse_order,
        })
    }
}
