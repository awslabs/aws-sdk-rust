// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecordActivityTaskHeartbeatInput {
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results. </p>
    /// </important>
    #[doc(hidden)]
    pub task_token: std::option::Option<std::string::String>,
    /// <p>If specified, contains details about the progress of the task.</p>
    #[doc(hidden)]
    pub details: std::option::Option<std::string::String>,
}
impl RecordActivityTaskHeartbeatInput {
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results. </p>
    /// </important>
    pub fn task_token(&self) -> std::option::Option<&str> {
        self.task_token.as_deref()
    }
    /// <p>If specified, contains details about the progress of the task.</p>
    pub fn details(&self) -> std::option::Option<&str> {
        self.details.as_deref()
    }
}
impl RecordActivityTaskHeartbeatInput {
    /// Creates a new builder-style object to manufacture [`RecordActivityTaskHeartbeatInput`](crate::operation::record_activity_task_heartbeat::RecordActivityTaskHeartbeatInput).
    pub fn builder() -> crate::operation::record_activity_task_heartbeat::builders::RecordActivityTaskHeartbeatInputBuilder{
        crate::operation::record_activity_task_heartbeat::builders::RecordActivityTaskHeartbeatInputBuilder::default()
    }
}

/// A builder for [`RecordActivityTaskHeartbeatInput`](crate::operation::record_activity_task_heartbeat::RecordActivityTaskHeartbeatInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecordActivityTaskHeartbeatInputBuilder {
    pub(crate) task_token: std::option::Option<std::string::String>,
    pub(crate) details: std::option::Option<std::string::String>,
}
impl RecordActivityTaskHeartbeatInputBuilder {
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results. </p>
    /// </important>
    pub fn task_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_token = Some(input.into());
        self
    }
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results. </p>
    /// </important>
    pub fn set_task_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_token = input;
        self
    }
    /// <p>If specified, contains details about the progress of the task.</p>
    pub fn details(mut self, input: impl Into<std::string::String>) -> Self {
        self.details = Some(input.into());
        self
    }
    /// <p>If specified, contains details about the progress of the task.</p>
    pub fn set_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.details = input;
        self
    }
    /// Consumes the builder and constructs a [`RecordActivityTaskHeartbeatInput`](crate::operation::record_activity_task_heartbeat::RecordActivityTaskHeartbeatInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::record_activity_task_heartbeat::RecordActivityTaskHeartbeatInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::record_activity_task_heartbeat::RecordActivityTaskHeartbeatInput {
                task_token: self.task_token,
                details: self.details,
            },
        )
    }
}
