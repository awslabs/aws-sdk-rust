// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input data for a TaskCompleted response to a decision task.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RespondDecisionTaskCompletedInput {
    /// <p>The <code>taskToken</code> from the <code>DecisionTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    #[doc(hidden)]
    pub task_token: std::option::Option<std::string::String>,
    /// <p>The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the <code>Decision</code> structure for details.</p>
    #[doc(hidden)]
    pub decisions: std::option::Option<std::vec::Vec<crate::types::Decision>>,
    /// <p>User defined context to add to workflow execution.</p>
    #[doc(hidden)]
    pub execution_context: std::option::Option<std::string::String>,
}
impl RespondDecisionTaskCompletedInput {
    /// <p>The <code>taskToken</code> from the <code>DecisionTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    pub fn task_token(&self) -> std::option::Option<&str> {
        self.task_token.as_deref()
    }
    /// <p>The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the <code>Decision</code> structure for details.</p>
    pub fn decisions(&self) -> std::option::Option<&[crate::types::Decision]> {
        self.decisions.as_deref()
    }
    /// <p>User defined context to add to workflow execution.</p>
    pub fn execution_context(&self) -> std::option::Option<&str> {
        self.execution_context.as_deref()
    }
}
impl RespondDecisionTaskCompletedInput {
    /// Creates a new builder-style object to manufacture [`RespondDecisionTaskCompletedInput`](crate::operation::respond_decision_task_completed::RespondDecisionTaskCompletedInput).
    pub fn builder() -> crate::operation::respond_decision_task_completed::builders::RespondDecisionTaskCompletedInputBuilder{
        crate::operation::respond_decision_task_completed::builders::RespondDecisionTaskCompletedInputBuilder::default()
    }
}

/// A builder for [`RespondDecisionTaskCompletedInput`](crate::operation::respond_decision_task_completed::RespondDecisionTaskCompletedInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RespondDecisionTaskCompletedInputBuilder {
    pub(crate) task_token: std::option::Option<std::string::String>,
    pub(crate) decisions: std::option::Option<std::vec::Vec<crate::types::Decision>>,
    pub(crate) execution_context: std::option::Option<std::string::String>,
}
impl RespondDecisionTaskCompletedInputBuilder {
    /// <p>The <code>taskToken</code> from the <code>DecisionTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    pub fn task_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_token = Some(input.into());
        self
    }
    /// <p>The <code>taskToken</code> from the <code>DecisionTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    pub fn set_task_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_token = input;
        self
    }
    /// Appends an item to `decisions`.
    ///
    /// To override the contents of this collection use [`set_decisions`](Self::set_decisions).
    ///
    /// <p>The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the <code>Decision</code> structure for details.</p>
    pub fn decisions(mut self, input: crate::types::Decision) -> Self {
        let mut v = self.decisions.unwrap_or_default();
        v.push(input);
        self.decisions = Some(v);
        self
    }
    /// <p>The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the <code>Decision</code> structure for details.</p>
    pub fn set_decisions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Decision>>,
    ) -> Self {
        self.decisions = input;
        self
    }
    /// <p>User defined context to add to workflow execution.</p>
    pub fn execution_context(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_context = Some(input.into());
        self
    }
    /// <p>User defined context to add to workflow execution.</p>
    pub fn set_execution_context(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_context = input;
        self
    }
    /// Consumes the builder and constructs a [`RespondDecisionTaskCompletedInput`](crate::operation::respond_decision_task_completed::RespondDecisionTaskCompletedInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::respond_decision_task_completed::RespondDecisionTaskCompletedInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::respond_decision_task_completed::RespondDecisionTaskCompletedInput {
                task_token: self.task_token,
                decisions: self.decisions,
                execution_context: self.execution_context,
            },
        )
    }
}
