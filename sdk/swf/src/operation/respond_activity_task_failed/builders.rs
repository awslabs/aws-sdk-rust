// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::respond_activity_task_failed::_respond_activity_task_failed_output::RespondActivityTaskFailedOutputBuilder;

pub use crate::operation::respond_activity_task_failed::_respond_activity_task_failed_input::RespondActivityTaskFailedInputBuilder;

/// Fluent builder constructing a request to `RespondActivityTaskFailed`.
///
/// <p>Used by workers to tell the service that the <code>ActivityTask</code> identified by the <code>taskToken</code> has failed with <code>reason</code> (if specified). The <code>reason</code> and <code>details</code> appear in the <code>ActivityTaskFailed</code> event added to the workflow history.</p>
/// <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to <code>RespondActivityTaskCompleted</code>, <code>RespondActivityTaskCanceled</code>, RespondActivityTaskFailed, or the task has <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p>
/// <p> <b>Access Control</b> </p>
/// <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p>
/// <ul>
/// <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li>
/// <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li>
/// <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li>
/// </ul>
/// <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RespondActivityTaskFailedFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::respond_activity_task_failed::builders::RespondActivityTaskFailedInputBuilder
            }
impl RespondActivityTaskFailedFluentBuilder {
    /// Creates a new `RespondActivityTaskFailed`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::respond_activity_task_failed::RespondActivityTaskFailed,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::respond_activity_task_failed::RespondActivityTaskFailedError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::respond_activity_task_failed::RespondActivityTaskFailedOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::respond_activity_task_failed::RespondActivityTaskFailedError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    pub fn task_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.task_token(input.into());
        self
    }
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    pub fn set_task_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_task_token(input);
        self
    }
    /// <p>Description of the error that may assist in diagnostics.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reason(input.into());
        self
    }
    /// <p>Description of the error that may assist in diagnostics.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
    /// <p> Detailed information about the failure.</p>
    pub fn details(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.details(input.into());
        self
    }
    /// <p> Detailed information about the failure.</p>
    pub fn set_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_details(input);
        self
    }
}
