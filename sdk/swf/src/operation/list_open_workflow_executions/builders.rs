// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_open_workflow_executions::_list_open_workflow_executions_output::ListOpenWorkflowExecutionsOutputBuilder;

pub use crate::operation::list_open_workflow_executions::_list_open_workflow_executions_input::ListOpenWorkflowExecutionsInputBuilder;

impl crate::operation::list_open_workflow_executions::builders::ListOpenWorkflowExecutionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_open_workflow_executions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListOpenWorkflowExecutions`.
///
/// <p>Returns a list of open workflow executions in the specified domain that meet the filtering criteria. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p><note>
/// <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p>
/// </note>
/// <p><b>Access Control</b></p>
/// <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p>
/// <ul>
/// <li>
/// <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p></li>
/// <li>
/// <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p></li>
/// <li>
/// <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p>
/// <ul>
/// <li>
/// <p><code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p></li>
/// <li>
/// <p><code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p></li>
/// <li>
/// <p><code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p></li>
/// </ul></li>
/// </ul>
/// <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListOpenWorkflowExecutionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_open_workflow_executions::builders::ListOpenWorkflowExecutionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsOutput,
        crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsError,
    > for ListOpenWorkflowExecutionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsOutput,
            crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListOpenWorkflowExecutionsFluentBuilder {
    /// Creates a new `ListOpenWorkflowExecutions`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListOpenWorkflowExecutions as a reference.
    pub fn as_input(&self) -> &crate::operation::list_open_workflow_executions::builders::ListOpenWorkflowExecutionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsOutput,
        crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_open_workflow_executions::paginator::ListOpenWorkflowExecutionsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_open_workflow_executions::paginator::ListOpenWorkflowExecutionsPaginator {
        crate::operation::list_open_workflow_executions::paginator::ListOpenWorkflowExecutionsPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>The name of the domain that contains the workflow executions to list.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain()
    }
    /// <p>Workflow executions are included in the returned results based on whether their start times are within the range specified by this filter.</p>
    pub fn start_time_filter(mut self, input: crate::types::ExecutionTimeFilter) -> Self {
        self.inner = self.inner.start_time_filter(input);
        self
    }
    /// <p>Workflow executions are included in the returned results based on whether their start times are within the range specified by this filter.</p>
    pub fn set_start_time_filter(mut self, input: ::std::option::Option<crate::types::ExecutionTimeFilter>) -> Self {
        self.inner = self.inner.set_start_time_filter(input);
        self
    }
    /// <p>Workflow executions are included in the returned results based on whether their start times are within the range specified by this filter.</p>
    pub fn get_start_time_filter(&self) -> &::std::option::Option<crate::types::ExecutionTimeFilter> {
        self.inner.get_start_time_filter()
    }
    /// <p>If specified, only executions of the type specified in the filter are returned.</p><note>
    /// <p><code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn type_filter(mut self, input: crate::types::WorkflowTypeFilter) -> Self {
        self.inner = self.inner.type_filter(input);
        self
    }
    /// <p>If specified, only executions of the type specified in the filter are returned.</p><note>
    /// <p><code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_type_filter(mut self, input: ::std::option::Option<crate::types::WorkflowTypeFilter>) -> Self {
        self.inner = self.inner.set_type_filter(input);
        self
    }
    /// <p>If specified, only executions of the type specified in the filter are returned.</p><note>
    /// <p><code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_type_filter(&self) -> &::std::option::Option<crate::types::WorkflowTypeFilter> {
        self.inner.get_type_filter()
    }
    /// <p>If specified, only executions that have the matching tag are listed.</p><note>
    /// <p><code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn tag_filter(mut self, input: crate::types::TagFilter) -> Self {
        self.inner = self.inner.tag_filter(input);
        self
    }
    /// <p>If specified, only executions that have the matching tag are listed.</p><note>
    /// <p><code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_tag_filter(mut self, input: ::std::option::Option<crate::types::TagFilter>) -> Self {
        self.inner = self.inner.set_tag_filter(input);
        self
    }
    /// <p>If specified, only executions that have the matching tag are listed.</p><note>
    /// <p><code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_tag_filter(&self) -> &::std::option::Option<crate::types::TagFilter> {
        self.inner.get_tag_filter()
    }
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>".</p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    pub fn next_page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_page_token(input.into());
        self
    }
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>".</p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    pub fn set_next_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_page_token(input);
        self
    }
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>".</p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    pub fn get_next_page_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_page_token()
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results.</p>
    pub fn maximum_page_size(mut self, input: i32) -> Self {
        self.inner = self.inner.maximum_page_size(input);
        self
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results.</p>
    pub fn set_maximum_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_maximum_page_size(input);
        self
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results.</p>
    pub fn get_maximum_page_size(&self) -> &::std::option::Option<i32> {
        self.inner.get_maximum_page_size()
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start time of the executions.</p>
    pub fn reverse_order(mut self, input: bool) -> Self {
        self.inner = self.inner.reverse_order(input);
        self
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start time of the executions.</p>
    pub fn set_reverse_order(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_reverse_order(input);
        self
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start time of the executions.</p>
    pub fn get_reverse_order(&self) -> &::std::option::Option<bool> {
        self.inner.get_reverse_order()
    }
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p><note>
    /// <p><code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn execution_filter(mut self, input: crate::types::WorkflowExecutionFilter) -> Self {
        self.inner = self.inner.execution_filter(input);
        self
    }
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p><note>
    /// <p><code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_execution_filter(mut self, input: ::std::option::Option<crate::types::WorkflowExecutionFilter>) -> Self {
        self.inner = self.inner.set_execution_filter(input);
        self
    }
    /// <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p><note>
    /// <p><code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_execution_filter(&self) -> &::std::option::Option<crate::types::WorkflowExecutionFilter> {
        self.inner.get_execution_filter()
    }
}
