// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RespondActivityTaskCompletedInput {
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    pub task_token: ::std::option::Option<::std::string::String>,
    /// <p>The result of the activity task. It is a free form string that is implementation specific.</p>
    pub result: ::std::option::Option<::std::string::String>,
}
impl RespondActivityTaskCompletedInput {
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    pub fn task_token(&self) -> ::std::option::Option<&str> {
        self.task_token.as_deref()
    }
    /// <p>The result of the activity task. It is a free form string that is implementation specific.</p>
    pub fn result(&self) -> ::std::option::Option<&str> {
        self.result.as_deref()
    }
}
impl RespondActivityTaskCompletedInput {
    /// Creates a new builder-style object to manufacture [`RespondActivityTaskCompletedInput`](crate::operation::respond_activity_task_completed::RespondActivityTaskCompletedInput).
    pub fn builder() -> crate::operation::respond_activity_task_completed::builders::RespondActivityTaskCompletedInputBuilder {
        crate::operation::respond_activity_task_completed::builders::RespondActivityTaskCompletedInputBuilder::default()
    }
}

/// A builder for [`RespondActivityTaskCompletedInput`](crate::operation::respond_activity_task_completed::RespondActivityTaskCompletedInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RespondActivityTaskCompletedInputBuilder {
    pub(crate) task_token: ::std::option::Option<::std::string::String>,
    pub(crate) result: ::std::option::Option<::std::string::String>,
}
impl RespondActivityTaskCompletedInputBuilder {
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    /// This field is required.
    pub fn task_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    pub fn set_task_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_token = input;
        self
    }
    /// <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>
    /// <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>
    /// </important>
    pub fn get_task_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_token
    }
    /// <p>The result of the activity task. It is a free form string that is implementation specific.</p>
    pub fn result(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.result = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The result of the activity task. It is a free form string that is implementation specific.</p>
    pub fn set_result(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.result = input;
        self
    }
    /// <p>The result of the activity task. It is a free form string that is implementation specific.</p>
    pub fn get_result(&self) -> &::std::option::Option<::std::string::String> {
        &self.result
    }
    /// Consumes the builder and constructs a [`RespondActivityTaskCompletedInput`](crate::operation::respond_activity_task_completed::RespondActivityTaskCompletedInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::respond_activity_task_completed::RespondActivityTaskCompletedInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::respond_activity_task_completed::RespondActivityTaskCompletedInput {
            task_token: self.task_token,
            result: self.result,
        })
    }
}
