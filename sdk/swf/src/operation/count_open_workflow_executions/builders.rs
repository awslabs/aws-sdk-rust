// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::count_open_workflow_executions::_count_open_workflow_executions_output::CountOpenWorkflowExecutionsOutputBuilder;

pub use crate::operation::count_open_workflow_executions::_count_open_workflow_executions_input::CountOpenWorkflowExecutionsInputBuilder;

/// Fluent builder constructing a request to `CountOpenWorkflowExecutions`.
///
/// <p>Returns the number of open workflow executions within the given domain that meet the specified filtering criteria.</p> <note>
/// <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p>
/// </note>
/// <p> <b>Access Control</b> </p>
/// <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p>
/// <ul>
/// <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li>
/// <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li>
/// <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p>
/// <ul>
/// <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li>
/// <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li>
/// <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li>
/// </ul> </li>
/// </ul>
/// <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CountOpenWorkflowExecutionsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::count_open_workflow_executions::builders::CountOpenWorkflowExecutionsInputBuilder
            }
impl CountOpenWorkflowExecutionsFluentBuilder {
    /// Creates a new `CountOpenWorkflowExecutions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::count_open_workflow_executions::CountOpenWorkflowExecutions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::count_open_workflow_executions::CountOpenWorkflowExecutionsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::count_open_workflow_executions::CountOpenWorkflowExecutionsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::count_open_workflow_executions::CountOpenWorkflowExecutionsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the domain containing the workflow executions to count.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>The name of the domain containing the workflow executions to count.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>Specifies the start time criteria that workflow executions must meet in order to be counted.</p>
    pub fn start_time_filter(mut self, input: crate::types::ExecutionTimeFilter) -> Self {
        self.inner = self.inner.start_time_filter(input);
        self
    }
    /// <p>Specifies the start time criteria that workflow executions must meet in order to be counted.</p>
    pub fn set_start_time_filter(
        mut self,
        input: std::option::Option<crate::types::ExecutionTimeFilter>,
    ) -> Self {
        self.inner = self.inner.set_start_time_filter(input);
        self
    }
    /// <p>Specifies the type of the workflow executions to be counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn type_filter(mut self, input: crate::types::WorkflowTypeFilter) -> Self {
        self.inner = self.inner.type_filter(input);
        self
    }
    /// <p>Specifies the type of the workflow executions to be counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_type_filter(
        mut self,
        input: std::option::Option<crate::types::WorkflowTypeFilter>,
    ) -> Self {
        self.inner = self.inner.set_type_filter(input);
        self
    }
    /// <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn tag_filter(mut self, input: crate::types::TagFilter) -> Self {
        self.inner = self.inner.tag_filter(input);
        self
    }
    /// <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_tag_filter(mut self, input: std::option::Option<crate::types::TagFilter>) -> Self {
        self.inner = self.inner.set_tag_filter(input);
        self
    }
    /// <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn execution_filter(mut self, input: crate::types::WorkflowExecutionFilter) -> Self {
        self.inner = self.inner.execution_filter(input);
        self
    }
    /// <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_execution_filter(
        mut self,
        input: std::option::Option<crate::types::WorkflowExecutionFilter>,
    ) -> Self {
        self.inner = self.inner.set_execution_filter(input);
        self
    }
}
