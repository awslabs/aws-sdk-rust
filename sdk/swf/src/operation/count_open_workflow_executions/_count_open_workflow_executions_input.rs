// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CountOpenWorkflowExecutionsInput {
    /// <p>The name of the domain containing the workflow executions to count.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the start time criteria that workflow executions must meet in order to be counted.</p>
    pub start_time_filter: ::std::option::Option<crate::types::ExecutionTimeFilter>,
    /// <p>Specifies the type of the workflow executions to be counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub type_filter: ::std::option::Option<crate::types::WorkflowTypeFilter>,
    /// <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub tag_filter: ::std::option::Option<crate::types::TagFilter>,
    /// <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub execution_filter: ::std::option::Option<crate::types::WorkflowExecutionFilter>,
}
impl CountOpenWorkflowExecutionsInput {
    /// <p>The name of the domain containing the workflow executions to count.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>Specifies the start time criteria that workflow executions must meet in order to be counted.</p>
    pub fn start_time_filter(&self) -> ::std::option::Option<&crate::types::ExecutionTimeFilter> {
        self.start_time_filter.as_ref()
    }
    /// <p>Specifies the type of the workflow executions to be counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn type_filter(&self) -> ::std::option::Option<&crate::types::WorkflowTypeFilter> {
        self.type_filter.as_ref()
    }
    /// <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn tag_filter(&self) -> ::std::option::Option<&crate::types::TagFilter> {
        self.tag_filter.as_ref()
    }
    /// <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn execution_filter(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionFilter> {
        self.execution_filter.as_ref()
    }
}
impl CountOpenWorkflowExecutionsInput {
    /// Creates a new builder-style object to manufacture [`CountOpenWorkflowExecutionsInput`](crate::operation::count_open_workflow_executions::CountOpenWorkflowExecutionsInput).
    pub fn builder() -> crate::operation::count_open_workflow_executions::builders::CountOpenWorkflowExecutionsInputBuilder {
        crate::operation::count_open_workflow_executions::builders::CountOpenWorkflowExecutionsInputBuilder::default()
    }
}

/// A builder for [`CountOpenWorkflowExecutionsInput`](crate::operation::count_open_workflow_executions::CountOpenWorkflowExecutionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CountOpenWorkflowExecutionsInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) start_time_filter: ::std::option::Option<crate::types::ExecutionTimeFilter>,
    pub(crate) type_filter: ::std::option::Option<crate::types::WorkflowTypeFilter>,
    pub(crate) tag_filter: ::std::option::Option<crate::types::TagFilter>,
    pub(crate) execution_filter: ::std::option::Option<crate::types::WorkflowExecutionFilter>,
}
impl CountOpenWorkflowExecutionsInputBuilder {
    /// <p>The name of the domain containing the workflow executions to count.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain containing the workflow executions to count.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain containing the workflow executions to count.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>Specifies the start time criteria that workflow executions must meet in order to be counted.</p>
    /// This field is required.
    pub fn start_time_filter(mut self, input: crate::types::ExecutionTimeFilter) -> Self {
        self.start_time_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the start time criteria that workflow executions must meet in order to be counted.</p>
    pub fn set_start_time_filter(mut self, input: ::std::option::Option<crate::types::ExecutionTimeFilter>) -> Self {
        self.start_time_filter = input;
        self
    }
    /// <p>Specifies the start time criteria that workflow executions must meet in order to be counted.</p>
    pub fn get_start_time_filter(&self) -> &::std::option::Option<crate::types::ExecutionTimeFilter> {
        &self.start_time_filter
    }
    /// <p>Specifies the type of the workflow executions to be counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn type_filter(mut self, input: crate::types::WorkflowTypeFilter) -> Self {
        self.type_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of the workflow executions to be counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_type_filter(mut self, input: ::std::option::Option<crate::types::WorkflowTypeFilter>) -> Self {
        self.type_filter = input;
        self
    }
    /// <p>Specifies the type of the workflow executions to be counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_type_filter(&self) -> &::std::option::Option<crate::types::WorkflowTypeFilter> {
        &self.type_filter
    }
    /// <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn tag_filter(mut self, input: crate::types::TagFilter) -> Self {
        self.tag_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_tag_filter(mut self, input: ::std::option::Option<crate::types::TagFilter>) -> Self {
        self.tag_filter = input;
        self
    }
    /// <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_tag_filter(&self) -> &::std::option::Option<crate::types::TagFilter> {
        &self.tag_filter
    }
    /// <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn execution_filter(mut self, input: crate::types::WorkflowExecutionFilter) -> Self {
        self.execution_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn set_execution_filter(mut self, input: ::std::option::Option<crate::types::WorkflowExecutionFilter>) -> Self {
        self.execution_filter = input;
        self
    }
    /// <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>
    /// <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>
    /// </note>
    pub fn get_execution_filter(&self) -> &::std::option::Option<crate::types::WorkflowExecutionFilter> {
        &self.execution_filter
    }
    /// Consumes the builder and constructs a [`CountOpenWorkflowExecutionsInput`](crate::operation::count_open_workflow_executions::CountOpenWorkflowExecutionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::count_open_workflow_executions::CountOpenWorkflowExecutionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::count_open_workflow_executions::CountOpenWorkflowExecutionsInput {
            domain: self.domain,
            start_time_filter: self.start_time_filter,
            type_filter: self.type_filter,
            tag_filter: self.tag_filter,
            execution_filter: self.execution_filter,
        })
    }
}
