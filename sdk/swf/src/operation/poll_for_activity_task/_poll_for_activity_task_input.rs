// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PollForActivityTaskInput {
    /// <p>The name of the domain that contains the task lists being polled.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the task list to poll for activity tasks.</p>
    /// <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>
    pub task_list: ::std::option::Option<crate::types::TaskList>,
    /// <p>Identity of the worker making the request, recorded in the <code>ActivityTaskStarted</code> event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.</p>
    pub identity: ::std::option::Option<::std::string::String>,
}
impl PollForActivityTaskInput {
    /// <p>The name of the domain that contains the task lists being polled.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>Specifies the task list to poll for activity tasks.</p>
    /// <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>
    pub fn task_list(&self) -> ::std::option::Option<&crate::types::TaskList> {
        self.task_list.as_ref()
    }
    /// <p>Identity of the worker making the request, recorded in the <code>ActivityTaskStarted</code> event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.</p>
    pub fn identity(&self) -> ::std::option::Option<&str> {
        self.identity.as_deref()
    }
}
impl PollForActivityTaskInput {
    /// Creates a new builder-style object to manufacture [`PollForActivityTaskInput`](crate::operation::poll_for_activity_task::PollForActivityTaskInput).
    pub fn builder() -> crate::operation::poll_for_activity_task::builders::PollForActivityTaskInputBuilder {
        crate::operation::poll_for_activity_task::builders::PollForActivityTaskInputBuilder::default()
    }
}

/// A builder for [`PollForActivityTaskInput`](crate::operation::poll_for_activity_task::PollForActivityTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PollForActivityTaskInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) task_list: ::std::option::Option<crate::types::TaskList>,
    pub(crate) identity: ::std::option::Option<::std::string::String>,
}
impl PollForActivityTaskInputBuilder {
    /// <p>The name of the domain that contains the task lists being polled.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain that contains the task lists being polled.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain that contains the task lists being polled.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>Specifies the task list to poll for activity tasks.</p>
    /// <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>
    /// This field is required.
    pub fn task_list(mut self, input: crate::types::TaskList) -> Self {
        self.task_list = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the task list to poll for activity tasks.</p>
    /// <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>
    pub fn set_task_list(mut self, input: ::std::option::Option<crate::types::TaskList>) -> Self {
        self.task_list = input;
        self
    }
    /// <p>Specifies the task list to poll for activity tasks.</p>
    /// <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>
    pub fn get_task_list(&self) -> &::std::option::Option<crate::types::TaskList> {
        &self.task_list
    }
    /// <p>Identity of the worker making the request, recorded in the <code>ActivityTaskStarted</code> event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.</p>
    pub fn identity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identity of the worker making the request, recorded in the <code>ActivityTaskStarted</code> event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.</p>
    pub fn set_identity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity = input;
        self
    }
    /// <p>Identity of the worker making the request, recorded in the <code>ActivityTaskStarted</code> event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.</p>
    pub fn get_identity(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity
    }
    /// Consumes the builder and constructs a [`PollForActivityTaskInput`](crate::operation::poll_for_activity_task::PollForActivityTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::poll_for_activity_task::PollForActivityTaskInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::poll_for_activity_task::PollForActivityTaskInput {
            domain: self.domain,
            task_list: self.task_list,
            identity: self.identity,
        })
    }
}
