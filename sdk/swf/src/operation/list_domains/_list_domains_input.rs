// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDomainsInput {
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub next_page_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the registration status of the domains to list.</p>
    pub registration_status: ::std::option::Option<crate::types::RegistrationStatus>,
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub maximum_page_size: ::std::option::Option<i32>,
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by <code>name</code> of the domains.</p>
    pub reverse_order: ::std::option::Option<bool>,
}
impl ListDomainsInput {
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub fn next_page_token(&self) -> ::std::option::Option<&str> {
        self.next_page_token.as_deref()
    }
    /// <p>Specifies the registration status of the domains to list.</p>
    pub fn registration_status(&self) -> ::std::option::Option<&crate::types::RegistrationStatus> {
        self.registration_status.as_ref()
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub fn maximum_page_size(&self) -> ::std::option::Option<i32> {
        self.maximum_page_size
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by <code>name</code> of the domains.</p>
    pub fn reverse_order(&self) -> ::std::option::Option<bool> {
        self.reverse_order
    }
}
impl ListDomainsInput {
    /// Creates a new builder-style object to manufacture [`ListDomainsInput`](crate::operation::list_domains::ListDomainsInput).
    pub fn builder() -> crate::operation::list_domains::builders::ListDomainsInputBuilder {
        crate::operation::list_domains::builders::ListDomainsInputBuilder::default()
    }
}

/// A builder for [`ListDomainsInput`](crate::operation::list_domains::ListDomainsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDomainsInputBuilder {
    pub(crate) next_page_token: ::std::option::Option<::std::string::String>,
    pub(crate) registration_status: ::std::option::Option<crate::types::RegistrationStatus>,
    pub(crate) maximum_page_size: ::std::option::Option<i32>,
    pub(crate) reverse_order: ::std::option::Option<bool>,
}
impl ListDomainsInputBuilder {
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub fn next_page_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_page_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub fn set_next_page_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_page_token = input;
        self
    }
    /// <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>
    /// <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    pub fn get_next_page_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_page_token
    }
    /// <p>Specifies the registration status of the domains to list.</p>
    /// This field is required.
    pub fn registration_status(mut self, input: crate::types::RegistrationStatus) -> Self {
        self.registration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the registration status of the domains to list.</p>
    pub fn set_registration_status(mut self, input: ::std::option::Option<crate::types::RegistrationStatus>) -> Self {
        self.registration_status = input;
        self
    }
    /// <p>Specifies the registration status of the domains to list.</p>
    pub fn get_registration_status(&self) -> &::std::option::Option<crate::types::RegistrationStatus> {
        &self.registration_status
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub fn maximum_page_size(mut self, input: i32) -> Self {
        self.maximum_page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub fn set_maximum_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_page_size = input;
        self
    }
    /// <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    pub fn get_maximum_page_size(&self) -> &::std::option::Option<i32> {
        &self.maximum_page_size
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by <code>name</code> of the domains.</p>
    pub fn reverse_order(mut self, input: bool) -> Self {
        self.reverse_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by <code>name</code> of the domains.</p>
    pub fn set_reverse_order(mut self, input: ::std::option::Option<bool>) -> Self {
        self.reverse_order = input;
        self
    }
    /// <p>When set to <code>true</code>, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by <code>name</code> of the domains.</p>
    pub fn get_reverse_order(&self) -> &::std::option::Option<bool> {
        &self.reverse_order
    }
    /// Consumes the builder and constructs a [`ListDomainsInput`](crate::operation::list_domains::ListDomainsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_domains::ListDomainsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_domains::ListDomainsInput {
            next_page_token: self.next_page_token,
            registration_status: self.registration_status,
            maximum_page_size: self.maximum_page_size,
            reverse_order: self.reverse_order,
        })
    }
}
