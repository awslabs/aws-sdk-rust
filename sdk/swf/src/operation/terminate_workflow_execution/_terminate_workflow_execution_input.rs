// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TerminateWorkflowExecutionInput {
    /// <p>The domain of the workflow execution to terminate.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The workflowId of the workflow execution to terminate.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    /// <p>The runId of the workflow execution to terminate.</p>
    #[doc(hidden)]
    pub run_id: std::option::Option<std::string::String>,
    /// <p> A descriptive reason for terminating the workflow execution.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
    /// <p> Details for terminating the workflow execution.</p>
    #[doc(hidden)]
    pub details: std::option::Option<std::string::String>,
    /// <p>If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul> <note>
    /// <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p>
    /// </note>
    #[doc(hidden)]
    pub child_policy: std::option::Option<crate::types::ChildPolicy>,
}
impl TerminateWorkflowExecutionInput {
    /// <p>The domain of the workflow execution to terminate.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The workflowId of the workflow execution to terminate.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The runId of the workflow execution to terminate.</p>
    pub fn run_id(&self) -> std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p> A descriptive reason for terminating the workflow execution.</p>
    pub fn reason(&self) -> std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p> Details for terminating the workflow execution.</p>
    pub fn details(&self) -> std::option::Option<&str> {
        self.details.as_deref()
    }
    /// <p>If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul> <note>
    /// <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p>
    /// </note>
    pub fn child_policy(&self) -> std::option::Option<&crate::types::ChildPolicy> {
        self.child_policy.as_ref()
    }
}
impl TerminateWorkflowExecutionInput {
    /// Creates a new builder-style object to manufacture [`TerminateWorkflowExecutionInput`](crate::operation::terminate_workflow_execution::TerminateWorkflowExecutionInput).
    pub fn builder() -> crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionInputBuilder{
        crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionInputBuilder::default()
    }
}

/// A builder for [`TerminateWorkflowExecutionInput`](crate::operation::terminate_workflow_execution::TerminateWorkflowExecutionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TerminateWorkflowExecutionInputBuilder {
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) workflow_id: std::option::Option<std::string::String>,
    pub(crate) run_id: std::option::Option<std::string::String>,
    pub(crate) reason: std::option::Option<std::string::String>,
    pub(crate) details: std::option::Option<std::string::String>,
    pub(crate) child_policy: std::option::Option<crate::types::ChildPolicy>,
}
impl TerminateWorkflowExecutionInputBuilder {
    /// <p>The domain of the workflow execution to terminate.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The domain of the workflow execution to terminate.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The workflowId of the workflow execution to terminate.</p>
    pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workflow_id = Some(input.into());
        self
    }
    /// <p>The workflowId of the workflow execution to terminate.</p>
    pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The runId of the workflow execution to terminate.</p>
    pub fn run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.run_id = Some(input.into());
        self
    }
    /// <p>The runId of the workflow execution to terminate.</p>
    pub fn set_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p> A descriptive reason for terminating the workflow execution.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p> A descriptive reason for terminating the workflow execution.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p> Details for terminating the workflow execution.</p>
    pub fn details(mut self, input: impl Into<std::string::String>) -> Self {
        self.details = Some(input.into());
        self
    }
    /// <p> Details for terminating the workflow execution.</p>
    pub fn set_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.details = input;
        self
    }
    /// <p>If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul> <note>
    /// <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p>
    /// </note>
    pub fn child_policy(mut self, input: crate::types::ChildPolicy) -> Self {
        self.child_policy = Some(input);
        self
    }
    /// <p>If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul> <note>
    /// <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p>
    /// </note>
    pub fn set_child_policy(
        mut self,
        input: std::option::Option<crate::types::ChildPolicy>,
    ) -> Self {
        self.child_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`TerminateWorkflowExecutionInput`](crate::operation::terminate_workflow_execution::TerminateWorkflowExecutionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::terminate_workflow_execution::TerminateWorkflowExecutionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::terminate_workflow_execution::TerminateWorkflowExecutionInput {
                domain: self.domain,
                workflow_id: self.workflow_id,
                run_id: self.run_id,
                reason: self.reason,
                details: self.details,
                child_policy: self.child_policy,
            },
        )
    }
}
