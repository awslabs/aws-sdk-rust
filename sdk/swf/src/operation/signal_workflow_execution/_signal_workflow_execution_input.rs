// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SignalWorkflowExecutionInput {
    /// <p>The name of the domain containing the workflow execution to signal.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The workflowId of the workflow execution to signal.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    /// <p>The runId of the workflow execution to signal.</p>
    #[doc(hidden)]
    pub run_id: std::option::Option<std::string::String>,
    /// <p>The name of the signal. This name must be meaningful to the target workflow.</p>
    #[doc(hidden)]
    pub signal_name: std::option::Option<std::string::String>,
    /// <p>Data to attach to the <code>WorkflowExecutionSignaled</code> event in the target workflow execution's history.</p>
    #[doc(hidden)]
    pub input: std::option::Option<std::string::String>,
}
impl SignalWorkflowExecutionInput {
    /// <p>The name of the domain containing the workflow execution to signal.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The workflowId of the workflow execution to signal.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The runId of the workflow execution to signal.</p>
    pub fn run_id(&self) -> std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>The name of the signal. This name must be meaningful to the target workflow.</p>
    pub fn signal_name(&self) -> std::option::Option<&str> {
        self.signal_name.as_deref()
    }
    /// <p>Data to attach to the <code>WorkflowExecutionSignaled</code> event in the target workflow execution's history.</p>
    pub fn input(&self) -> std::option::Option<&str> {
        self.input.as_deref()
    }
}
impl SignalWorkflowExecutionInput {
    /// Creates a new builder-style object to manufacture [`SignalWorkflowExecutionInput`](crate::operation::signal_workflow_execution::SignalWorkflowExecutionInput).
    pub fn builder(
    ) -> crate::operation::signal_workflow_execution::builders::SignalWorkflowExecutionInputBuilder
    {
        crate::operation::signal_workflow_execution::builders::SignalWorkflowExecutionInputBuilder::default()
    }
}

/// A builder for [`SignalWorkflowExecutionInput`](crate::operation::signal_workflow_execution::SignalWorkflowExecutionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SignalWorkflowExecutionInputBuilder {
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) workflow_id: std::option::Option<std::string::String>,
    pub(crate) run_id: std::option::Option<std::string::String>,
    pub(crate) signal_name: std::option::Option<std::string::String>,
    pub(crate) input: std::option::Option<std::string::String>,
}
impl SignalWorkflowExecutionInputBuilder {
    /// <p>The name of the domain containing the workflow execution to signal.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The name of the domain containing the workflow execution to signal.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The workflowId of the workflow execution to signal.</p>
    pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workflow_id = Some(input.into());
        self
    }
    /// <p>The workflowId of the workflow execution to signal.</p>
    pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The runId of the workflow execution to signal.</p>
    pub fn run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.run_id = Some(input.into());
        self
    }
    /// <p>The runId of the workflow execution to signal.</p>
    pub fn set_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The name of the signal. This name must be meaningful to the target workflow.</p>
    pub fn signal_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.signal_name = Some(input.into());
        self
    }
    /// <p>The name of the signal. This name must be meaningful to the target workflow.</p>
    pub fn set_signal_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.signal_name = input;
        self
    }
    /// <p>Data to attach to the <code>WorkflowExecutionSignaled</code> event in the target workflow execution's history.</p>
    pub fn input(mut self, input: impl Into<std::string::String>) -> Self {
        self.input = Some(input.into());
        self
    }
    /// <p>Data to attach to the <code>WorkflowExecutionSignaled</code> event in the target workflow execution's history.</p>
    pub fn set_input(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// Consumes the builder and constructs a [`SignalWorkflowExecutionInput`](crate::operation::signal_workflow_execution::SignalWorkflowExecutionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::signal_workflow_execution::SignalWorkflowExecutionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::signal_workflow_execution::SignalWorkflowExecutionInput {
                domain: self.domain,
                workflow_id: self.workflow_id,
                run_id: self.run_id,
                signal_name: self.signal_name,
                input: self.input,
            },
        )
    }
}
