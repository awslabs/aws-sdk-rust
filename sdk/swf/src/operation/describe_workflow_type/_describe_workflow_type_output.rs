// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a workflow type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeWorkflowTypeOutput {
    /// <p>General information about the workflow type.</p>
    /// <p>The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running.</p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateWorkflowType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type.</p> </li>
    /// </ul>
    pub type_info: ::std::option::Option<crate::types::WorkflowTypeInfo>,
    /// <p>Configuration settings of the workflow type registered through <code>RegisterWorkflowType</code> </p>
    pub configuration: ::std::option::Option<crate::types::WorkflowTypeConfiguration>,
    _request_id: Option<String>,
}
impl DescribeWorkflowTypeOutput {
    /// <p>General information about the workflow type.</p>
    /// <p>The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running.</p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateWorkflowType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type.</p> </li>
    /// </ul>
    pub fn type_info(&self) -> ::std::option::Option<&crate::types::WorkflowTypeInfo> {
        self.type_info.as_ref()
    }
    /// <p>Configuration settings of the workflow type registered through <code>RegisterWorkflowType</code> </p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::WorkflowTypeConfiguration> {
        self.configuration.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeWorkflowTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeWorkflowTypeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWorkflowTypeOutput`](crate::operation::describe_workflow_type::DescribeWorkflowTypeOutput).
    pub fn builder() -> crate::operation::describe_workflow_type::builders::DescribeWorkflowTypeOutputBuilder {
        crate::operation::describe_workflow_type::builders::DescribeWorkflowTypeOutputBuilder::default()
    }
}

/// A builder for [`DescribeWorkflowTypeOutput`](crate::operation::describe_workflow_type::DescribeWorkflowTypeOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeWorkflowTypeOutputBuilder {
    pub(crate) type_info: ::std::option::Option<crate::types::WorkflowTypeInfo>,
    pub(crate) configuration: ::std::option::Option<crate::types::WorkflowTypeConfiguration>,
    _request_id: Option<String>,
}
impl DescribeWorkflowTypeOutputBuilder {
    /// <p>General information about the workflow type.</p>
    /// <p>The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running.</p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateWorkflowType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn type_info(mut self, input: crate::types::WorkflowTypeInfo) -> Self {
        self.type_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>General information about the workflow type.</p>
    /// <p>The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running.</p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateWorkflowType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type.</p> </li>
    /// </ul>
    pub fn set_type_info(mut self, input: ::std::option::Option<crate::types::WorkflowTypeInfo>) -> Self {
        self.type_info = input;
        self
    }
    /// <p>General information about the workflow type.</p>
    /// <p>The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running.</p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateWorkflowType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type.</p> </li>
    /// </ul>
    pub fn get_type_info(&self) -> &::std::option::Option<crate::types::WorkflowTypeInfo> {
        &self.type_info
    }
    /// <p>Configuration settings of the workflow type registered through <code>RegisterWorkflowType</code> </p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::WorkflowTypeConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration settings of the workflow type registered through <code>RegisterWorkflowType</code> </p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::WorkflowTypeConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Configuration settings of the workflow type registered through <code>RegisterWorkflowType</code> </p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::WorkflowTypeConfiguration> {
        &self.configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeWorkflowTypeOutput`](crate::operation::describe_workflow_type::DescribeWorkflowTypeOutput).
    pub fn build(self) -> crate::operation::describe_workflow_type::DescribeWorkflowTypeOutput {
        crate::operation::describe_workflow_type::DescribeWorkflowTypeOutput {
            type_info: self.type_info,
            configuration: self.configuration,
            _request_id: self._request_id,
        }
    }
}
