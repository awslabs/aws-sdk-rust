// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeWorkflowTypeInput {
    /// <p>The name of the domain in which this workflow type is registered.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The workflow type to describe.</p>
    pub workflow_type: ::std::option::Option<crate::types::WorkflowType>,
}
impl DescribeWorkflowTypeInput {
    /// <p>The name of the domain in which this workflow type is registered.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The workflow type to describe.</p>
    pub fn workflow_type(&self) -> ::std::option::Option<&crate::types::WorkflowType> {
        self.workflow_type.as_ref()
    }
}
impl DescribeWorkflowTypeInput {
    /// Creates a new builder-style object to manufacture [`DescribeWorkflowTypeInput`](crate::operation::describe_workflow_type::DescribeWorkflowTypeInput).
    pub fn builder() -> crate::operation::describe_workflow_type::builders::DescribeWorkflowTypeInputBuilder {
        crate::operation::describe_workflow_type::builders::DescribeWorkflowTypeInputBuilder::default()
    }
}

/// A builder for [`DescribeWorkflowTypeInput`](crate::operation::describe_workflow_type::DescribeWorkflowTypeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeWorkflowTypeInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_type: ::std::option::Option<crate::types::WorkflowType>,
}
impl DescribeWorkflowTypeInputBuilder {
    /// <p>The name of the domain in which this workflow type is registered.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain in which this workflow type is registered.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain in which this workflow type is registered.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The workflow type to describe.</p>
    /// This field is required.
    pub fn workflow_type(mut self, input: crate::types::WorkflowType) -> Self {
        self.workflow_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The workflow type to describe.</p>
    pub fn set_workflow_type(mut self, input: ::std::option::Option<crate::types::WorkflowType>) -> Self {
        self.workflow_type = input;
        self
    }
    /// <p>The workflow type to describe.</p>
    pub fn get_workflow_type(&self) -> &::std::option::Option<crate::types::WorkflowType> {
        &self.workflow_type
    }
    /// Consumes the builder and constructs a [`DescribeWorkflowTypeInput`](crate::operation::describe_workflow_type::DescribeWorkflowTypeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_workflow_type::DescribeWorkflowTypeInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_workflow_type::DescribeWorkflowTypeInput {
            domain: self.domain,
            workflow_type: self.workflow_type,
        })
    }
}
