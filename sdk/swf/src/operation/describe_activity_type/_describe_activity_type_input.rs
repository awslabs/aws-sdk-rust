// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeActivityTypeInput {
    /// <p>The name of the domain in which the activity type is registered.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The activity type to get information about. Activity types are identified by the <code>name</code> and <code>version</code> that were supplied when the activity was registered.</p>
    pub activity_type: ::std::option::Option<crate::types::ActivityType>,
}
impl DescribeActivityTypeInput {
    /// <p>The name of the domain in which the activity type is registered.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The activity type to get information about. Activity types are identified by the <code>name</code> and <code>version</code> that were supplied when the activity was registered.</p>
    pub fn activity_type(&self) -> ::std::option::Option<&crate::types::ActivityType> {
        self.activity_type.as_ref()
    }
}
impl DescribeActivityTypeInput {
    /// Creates a new builder-style object to manufacture [`DescribeActivityTypeInput`](crate::operation::describe_activity_type::DescribeActivityTypeInput).
    pub fn builder() -> crate::operation::describe_activity_type::builders::DescribeActivityTypeInputBuilder {
        crate::operation::describe_activity_type::builders::DescribeActivityTypeInputBuilder::default()
    }
}

/// A builder for [`DescribeActivityTypeInput`](crate::operation::describe_activity_type::DescribeActivityTypeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeActivityTypeInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) activity_type: ::std::option::Option<crate::types::ActivityType>,
}
impl DescribeActivityTypeInputBuilder {
    /// <p>The name of the domain in which the activity type is registered.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain in which the activity type is registered.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain in which the activity type is registered.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The activity type to get information about. Activity types are identified by the <code>name</code> and <code>version</code> that were supplied when the activity was registered.</p>
    /// This field is required.
    pub fn activity_type(mut self, input: crate::types::ActivityType) -> Self {
        self.activity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The activity type to get information about. Activity types are identified by the <code>name</code> and <code>version</code> that were supplied when the activity was registered.</p>
    pub fn set_activity_type(mut self, input: ::std::option::Option<crate::types::ActivityType>) -> Self {
        self.activity_type = input;
        self
    }
    /// <p>The activity type to get information about. Activity types are identified by the <code>name</code> and <code>version</code> that were supplied when the activity was registered.</p>
    pub fn get_activity_type(&self) -> &::std::option::Option<crate::types::ActivityType> {
        &self.activity_type
    }
    /// Consumes the builder and constructs a [`DescribeActivityTypeInput`](crate::operation::describe_activity_type::DescribeActivityTypeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_activity_type::DescribeActivityTypeInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_activity_type::DescribeActivityTypeInput {
            domain: self.domain,
            activity_type: self.activity_type,
        })
    }
}
