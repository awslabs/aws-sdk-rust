// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about an activity type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeActivityTypeOutput {
    /// <p>General information about the activity type.</p>
    /// <p>The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateActivityType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type. </p> </li>
    /// </ul>
    pub type_info: ::std::option::Option<crate::types::ActivityTypeInfo>,
    /// <p>The configuration settings registered with the activity type.</p>
    pub configuration: ::std::option::Option<crate::types::ActivityTypeConfiguration>,
    _request_id: Option<String>,
}
impl DescribeActivityTypeOutput {
    /// <p>General information about the activity type.</p>
    /// <p>The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateActivityType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type. </p> </li>
    /// </ul>
    pub fn type_info(&self) -> ::std::option::Option<&crate::types::ActivityTypeInfo> {
        self.type_info.as_ref()
    }
    /// <p>The configuration settings registered with the activity type.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::ActivityTypeConfiguration> {
        self.configuration.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeActivityTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeActivityTypeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeActivityTypeOutput`](crate::operation::describe_activity_type::DescribeActivityTypeOutput).
    pub fn builder() -> crate::operation::describe_activity_type::builders::DescribeActivityTypeOutputBuilder {
        crate::operation::describe_activity_type::builders::DescribeActivityTypeOutputBuilder::default()
    }
}

/// A builder for [`DescribeActivityTypeOutput`](crate::operation::describe_activity_type::DescribeActivityTypeOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeActivityTypeOutputBuilder {
    pub(crate) type_info: ::std::option::Option<crate::types::ActivityTypeInfo>,
    pub(crate) configuration: ::std::option::Option<crate::types::ActivityTypeConfiguration>,
    _request_id: Option<String>,
}
impl DescribeActivityTypeOutputBuilder {
    /// <p>General information about the activity type.</p>
    /// <p>The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateActivityType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type. </p> </li>
    /// </ul>
    /// This field is required.
    pub fn type_info(mut self, input: crate::types::ActivityTypeInfo) -> Self {
        self.type_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>General information about the activity type.</p>
    /// <p>The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateActivityType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type. </p> </li>
    /// </ul>
    pub fn set_type_info(mut self, input: ::std::option::Option<crate::types::ActivityTypeInfo>) -> Self {
        self.type_info = input;
        self
    }
    /// <p>General information about the activity type.</p>
    /// <p>The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateActivityType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type. </p> </li>
    /// </ul>
    pub fn get_type_info(&self) -> &::std::option::Option<crate::types::ActivityTypeInfo> {
        &self.type_info
    }
    /// <p>The configuration settings registered with the activity type.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::ActivityTypeConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings registered with the activity type.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::ActivityTypeConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration settings registered with the activity type.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::ActivityTypeConfiguration> {
        &self.configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeActivityTypeOutput`](crate::operation::describe_activity_type::DescribeActivityTypeOutput).
    pub fn build(self) -> crate::operation::describe_activity_type::DescribeActivityTypeOutput {
        crate::operation::describe_activity_type::DescribeActivityTypeOutput {
            type_info: self.type_info,
            configuration: self.configuration,
            _request_id: self._request_id,
        }
    }
}
