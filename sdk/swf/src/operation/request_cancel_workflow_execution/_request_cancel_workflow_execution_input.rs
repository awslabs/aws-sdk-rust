// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestCancelWorkflowExecutionInput {
    /// <p>The name of the domain containing the workflow execution to cancel.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The workflowId of the workflow execution to cancel.</p>
    pub workflow_id: ::std::option::Option<::std::string::String>,
    /// <p>The runId of the workflow execution to cancel.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
}
impl RequestCancelWorkflowExecutionInput {
    /// <p>The name of the domain containing the workflow execution to cancel.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The workflowId of the workflow execution to cancel.</p>
    pub fn workflow_id(&self) -> ::std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The runId of the workflow execution to cancel.</p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
}
impl RequestCancelWorkflowExecutionInput {
    /// Creates a new builder-style object to manufacture [`RequestCancelWorkflowExecutionInput`](crate::operation::request_cancel_workflow_execution::RequestCancelWorkflowExecutionInput).
    pub fn builder() -> crate::operation::request_cancel_workflow_execution::builders::RequestCancelWorkflowExecutionInputBuilder {
        crate::operation::request_cancel_workflow_execution::builders::RequestCancelWorkflowExecutionInputBuilder::default()
    }
}

/// A builder for [`RequestCancelWorkflowExecutionInput`](crate::operation::request_cancel_workflow_execution::RequestCancelWorkflowExecutionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RequestCancelWorkflowExecutionInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
}
impl RequestCancelWorkflowExecutionInputBuilder {
    /// <p>The name of the domain containing the workflow execution to cancel.</p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain containing the workflow execution to cancel.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The name of the domain containing the workflow execution to cancel.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The workflowId of the workflow execution to cancel.</p>
    /// This field is required.
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The workflowId of the workflow execution to cancel.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The workflowId of the workflow execution to cancel.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>The runId of the workflow execution to cancel.</p>
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The runId of the workflow execution to cancel.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The runId of the workflow execution to cancel.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// Consumes the builder and constructs a [`RequestCancelWorkflowExecutionInput`](crate::operation::request_cancel_workflow_execution::RequestCancelWorkflowExecutionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::request_cancel_workflow_execution::RequestCancelWorkflowExecutionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::request_cancel_workflow_execution::RequestCancelWorkflowExecutionInput {
            domain: self.domain,
            workflow_id: self.workflow_id,
            run_id: self.run_id,
        })
    }
}
