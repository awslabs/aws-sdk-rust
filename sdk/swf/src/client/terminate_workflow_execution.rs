// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`TerminateWorkflowExecution`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::domain) / [`set_domain(Option<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::set_domain): <p>The domain of the workflow execution to terminate.</p>
    ///   - [`workflow_id(impl Into<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::workflow_id) / [`set_workflow_id(Option<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::set_workflow_id): <p>The workflowId of the workflow execution to terminate.</p>
    ///   - [`run_id(impl Into<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::run_id) / [`set_run_id(Option<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::set_run_id): <p>The runId of the workflow execution to terminate.</p>
    ///   - [`reason(impl Into<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::reason) / [`set_reason(Option<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::set_reason): <p> A descriptive reason for terminating the workflow execution.</p>
    ///   - [`details(impl Into<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::details) / [`set_details(Option<String>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::set_details): <p> Details for terminating the workflow execution.</p>
    ///   - [`child_policy(ChildPolicy)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::child_policy) / [`set_child_policy(Option<ChildPolicy>)`](crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::set_child_policy): <p>If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution.</p>  <p>The supported child policies are:</p>  <ul>   <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>   <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>   <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>  </ul> <note>   <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p>  </note>
    /// - On success, responds with [`TerminateWorkflowExecutionOutput`](crate::operation::terminate_workflow_execution::TerminateWorkflowExecutionOutput)
    /// - On failure, responds with [`SdkError<TerminateWorkflowExecutionError>`](crate::operation::terminate_workflow_execution::TerminateWorkflowExecutionError)
    pub fn terminate_workflow_execution(&self) -> crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder{
        crate::operation::terminate_workflow_execution::builders::TerminateWorkflowExecutionFluentBuilder::new(self.handle.clone())
    }
}
