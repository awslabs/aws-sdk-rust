// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PollForDecisionTask`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::domain) / [`set_domain(Option<String>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::set_domain):<br>required: **true**<br><p>The name of the domain containing the task lists to poll.</p><br>
    ///   - [`task_list(TaskList)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::task_list) / [`set_task_list(Option<TaskList>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::set_task_list):<br>required: **true**<br><p>Specifies the task list to poll for decision tasks.</p>  <p>The specified string must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p><br>
    ///   - [`identity(impl Into<String>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::identity) / [`set_identity(Option<String>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::set_identity):<br>required: **false**<br><p>Identity of the decider making the request, which is recorded in the DecisionTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.</p><br>
    ///   - [`next_page_token(impl Into<String>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::next_page_token) / [`set_next_page_token(Option<String>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::set_next_page_token):<br>required: **false**<br><p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p> <note>   <p>The <code>nextPageToken</code> returned by this action cannot be used with <code>GetWorkflowExecutionHistory</code> to get the next page. You must call <code>PollForDecisionTask</code> again (with the <code>nextPageToken</code>) to retrieve the next page of history records. Calling <code>PollForDecisionTask</code> with a <code>nextPageToken</code> doesn't return a new decision task.</p>  </note><br>
    ///   - [`maximum_page_size(i32)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::maximum_page_size) / [`set_maximum_page_size(Option<i32>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::set_maximum_page_size):<br>required: **false**<br><p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>  <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p><br>
    ///   - [`reverse_order(bool)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::reverse_order) / [`set_reverse_order(Option<bool>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::set_reverse_order):<br>required: **false**<br><p>When set to <code>true</code>, returns the events in reverse order. By default the results are returned in ascending order of the <code>eventTimestamp</code> of the events.</p><br>
    ///   - [`start_at_previous_started_event(bool)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::start_at_previous_started_event) / [`set_start_at_previous_started_event(Option<bool>)`](crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::set_start_at_previous_started_event):<br>required: **false**<br><p>When set to <code>true</code>, returns the events with <code>eventTimestamp</code> greater than or equal to <code>eventTimestamp</code> of the most recent <code>DecisionTaskStarted</code> event. By default, this parameter is set to <code>false</code>.</p><br>
    /// - On success, responds with [`PollForDecisionTaskOutput`](crate::operation::poll_for_decision_task::PollForDecisionTaskOutput) with field(s):
    ///   - [`task_token(String)`](crate::operation::poll_for_decision_task::PollForDecisionTaskOutput::task_token): <p>The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.</p>
    ///   - [`started_event_id(i64)`](crate::operation::poll_for_decision_task::PollForDecisionTaskOutput::started_event_id): <p>The ID of the <code>DecisionTaskStarted</code> event recorded in the history.</p>
    ///   - [`workflow_execution(Option<WorkflowExecution>)`](crate::operation::poll_for_decision_task::PollForDecisionTaskOutput::workflow_execution): <p>The workflow execution for which this decision task was created.</p>
    ///   - [`workflow_type(Option<WorkflowType>)`](crate::operation::poll_for_decision_task::PollForDecisionTaskOutput::workflow_type): <p>The type of the workflow execution for which this decision task was created.</p>
    ///   - [`events(Vec::<HistoryEvent>)`](crate::operation::poll_for_decision_task::PollForDecisionTaskOutput::events): <p>A paginated list of history events of the workflow execution. The decider uses this during the processing of the decision task.</p>
    ///   - [`next_page_token(Option<String>)`](crate::operation::poll_for_decision_task::PollForDecisionTaskOutput::next_page_token): <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    ///   - [`previous_started_event_id(i64)`](crate::operation::poll_for_decision_task::PollForDecisionTaskOutput::previous_started_event_id): <p>The ID of the DecisionTaskStarted event of the previous decision task of this workflow execution that was processed by the decider. This can be used to determine the events in the history new since the last decision task received by the decider.</p>
    /// - On failure, responds with [`SdkError<PollForDecisionTaskError>`](crate::operation::poll_for_decision_task::PollForDecisionTaskError)
    pub fn poll_for_decision_task(&self) -> crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder {
        crate::operation::poll_for_decision_task::builders::PollForDecisionTaskFluentBuilder::new(self.handle.clone())
    }
}
