// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RespondDecisionTaskCompleted`](crate::client::fluent_builders::RespondDecisionTaskCompleted) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_token(impl Into<String>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::task_token) / [`set_task_token(Option<String>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::set_task_token): <p>The <code>taskToken</code> from the <code>DecisionTask</code>.</p> <important>   <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>  </important>
    ///   - [`decisions(Vec<Decision>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::decisions) / [`set_decisions(Option<Vec<Decision>>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::set_decisions): <p>The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the <code>Decision</code> structure for details.</p>
    ///   - [`execution_context(impl Into<String>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::execution_context) / [`set_execution_context(Option<String>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::set_execution_context): <p>User defined context to add to workflow execution.</p>
    /// - On success, responds with [`RespondDecisionTaskCompletedOutput`](crate::output::RespondDecisionTaskCompletedOutput)
    /// - On failure, responds with [`SdkError<RespondDecisionTaskCompletedError>`](crate::error::RespondDecisionTaskCompletedError)
    pub fn respond_decision_task_completed(
        &self,
    ) -> crate::client::fluent_builders::RespondDecisionTaskCompleted {
        crate::client::fluent_builders::RespondDecisionTaskCompleted::new(self.handle.clone())
    }
}
