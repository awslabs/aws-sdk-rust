// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CountClosedWorkflowExecutions`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::domain) / [`set_domain(Option<String>)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::set_domain): <p>The name of the domain containing the workflow executions to count.</p>
    ///   - [`start_time_filter(ExecutionTimeFilter)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::start_time_filter) / [`set_start_time_filter(Option<ExecutionTimeFilter>)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::set_start_time_filter): <p>If specified, only workflow executions that meet the start time criteria of the filter are counted.</p> <note>   <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>  </note>
    ///   - [`close_time_filter(ExecutionTimeFilter)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::close_time_filter) / [`set_close_time_filter(Option<ExecutionTimeFilter>)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::set_close_time_filter): <p>If specified, only workflow executions that meet the close time criteria of the filter are counted.</p> <note>   <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>  </note>
    ///   - [`execution_filter(WorkflowExecutionFilter)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::execution_filter) / [`set_execution_filter(Option<WorkflowExecutionFilter>)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::set_execution_filter): <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`type_filter(WorkflowTypeFilter)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::type_filter) / [`set_type_filter(Option<WorkflowTypeFilter>)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::set_type_filter): <p>If specified, indicates the type of the workflow executions to be counted.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`tag_filter(TagFilter)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::tag_filter) / [`set_tag_filter(Option<TagFilter>)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::set_tag_filter): <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`close_status_filter(CloseStatusFilter)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::close_status_filter) / [`set_close_status_filter(Option<CloseStatusFilter>)`](crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::set_close_status_filter): <p>If specified, only workflow executions that match this close status are counted. This filter has an affect only if <code>executionStatus</code> is specified as <code>CLOSED</code>.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    /// - On success, responds with [`CountClosedWorkflowExecutionsOutput`](crate::operation::count_closed_workflow_executions::CountClosedWorkflowExecutionsOutput) with field(s):
    ///   - [`count(i32)`](crate::operation::count_closed_workflow_executions::CountClosedWorkflowExecutionsOutput::count): <p>The number of workflow executions.</p>
    ///   - [`truncated(bool)`](crate::operation::count_closed_workflow_executions::CountClosedWorkflowExecutionsOutput::truncated): <p>If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.</p>
    /// - On failure, responds with [`SdkError<CountClosedWorkflowExecutionsError>`](crate::operation::count_closed_workflow_executions::CountClosedWorkflowExecutionsError)
    pub fn count_closed_workflow_executions(&self) -> crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder{
        crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsFluentBuilder::new(self.handle.clone())
    }
}
