// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_workflow_execution_history_output_next_page_token(
    input: &crate::output::GetWorkflowExecutionHistoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_activity_types_output_next_page_token(
    input: &crate::output::ListActivityTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_closed_workflow_executions_output_next_page_token(
    input: &crate::output::ListClosedWorkflowExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_domains_output_next_page_token(
    input: &crate::output::ListDomainsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_open_workflow_executions_output_next_page_token(
    input: &crate::output::ListOpenWorkflowExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_workflow_types_output_next_page_token(
    input: &crate::output::ListWorkflowTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_poll_for_decision_task_output_next_page_token(
    input: &crate::output::PollForDecisionTaskOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_workflow_execution_history_output_events(
    input: crate::output::GetWorkflowExecutionHistoryOutput,
) -> std::option::Option<std::vec::Vec<crate::model::HistoryEvent>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_activity_types_output_type_infos(
    input: crate::output::ListActivityTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ActivityTypeInfo>> {
    let input = match input.type_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_closed_workflow_executions_output_execution_infos(
    input: crate::output::ListClosedWorkflowExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::WorkflowExecutionInfo>> {
    let input = match input.execution_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_domains_output_domain_infos(
    input: crate::output::ListDomainsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DomainInfo>> {
    let input = match input.domain_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_open_workflow_executions_output_execution_infos(
    input: crate::output::ListOpenWorkflowExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::WorkflowExecutionInfo>> {
    let input = match input.execution_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_workflow_types_output_type_infos(
    input: crate::output::ListWorkflowTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::WorkflowTypeInfo>> {
    let input = match input.type_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_poll_for_decision_task_output_events(
    input: crate::output::PollForDecisionTaskOutput,
) -> std::option::Option<std::vec::Vec<crate::model::HistoryEvent>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
