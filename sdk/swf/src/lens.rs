// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_workflow_execution_history_output_next_page_token(
    input: &crate::operation::get_workflow_execution_history::GetWorkflowExecutionHistoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_activity_types_output_next_page_token(
    input: &crate::operation::list_activity_types::ListActivityTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_closed_workflow_executions_output_next_page_token(
    input: &crate::operation::list_closed_workflow_executions::ListClosedWorkflowExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_domains_output_next_page_token(
    input: &crate::operation::list_domains::ListDomainsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_open_workflow_executions_output_next_page_token(
    input: &crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_workflow_types_output_next_page_token(
    input: &crate::operation::list_workflow_types::ListWorkflowTypesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_poll_for_decision_task_output_next_page_token(
    input: &crate::operation::poll_for_decision_task::PollForDecisionTaskOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_page_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_workflow_execution_history_output_events(
    input: crate::operation::get_workflow_execution_history::GetWorkflowExecutionHistoryOutput,
) -> std::option::Option<std::vec::Vec<crate::types::HistoryEvent>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_activity_types_output_type_infos(
    input: crate::operation::list_activity_types::ListActivityTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ActivityTypeInfo>> {
    let input = match input.type_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_closed_workflow_executions_output_execution_infos(
    input: crate::operation::list_closed_workflow_executions::ListClosedWorkflowExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::WorkflowExecutionInfo>> {
    let input = match input.execution_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_domains_output_domain_infos(
    input: crate::operation::list_domains::ListDomainsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DomainInfo>> {
    let input = match input.domain_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_open_workflow_executions_output_execution_infos(
    input: crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::WorkflowExecutionInfo>> {
    let input = match input.execution_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_workflow_types_output_type_infos(
    input: crate::operation::list_workflow_types::ListWorkflowTypesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::WorkflowTypeInfo>> {
    let input = match input.type_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_poll_for_decision_task_output_events(
    input: crate::operation::poll_for_decision_task::PollForDecisionTaskOutput,
) -> std::option::Option<std::vec::Vec<crate::types::HistoryEvent>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
