// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Simple Workflow Service
///
/// Client for invoking operations on Amazon Simple Workflow Service. Each operation on Amazon Simple Workflow Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_swf::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_swf::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_swf::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CountClosedWorkflowExecutions`](crate::client::fluent_builders::CountClosedWorkflowExecutions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::set_domain): <p>The name of the domain containing the workflow executions to count.</p>
    ///   - [`start_time_filter(ExecutionTimeFilter)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::start_time_filter) / [`set_start_time_filter(Option<ExecutionTimeFilter>)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::set_start_time_filter): <p>If specified, only workflow executions that meet the start time criteria of the filter are counted.</p> <note>   <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>  </note>
    ///   - [`close_time_filter(ExecutionTimeFilter)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::close_time_filter) / [`set_close_time_filter(Option<ExecutionTimeFilter>)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::set_close_time_filter): <p>If specified, only workflow executions that meet the close time criteria of the filter are counted.</p> <note>   <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>  </note>
    ///   - [`execution_filter(WorkflowExecutionFilter)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::execution_filter) / [`set_execution_filter(Option<WorkflowExecutionFilter>)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::set_execution_filter): <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`type_filter(WorkflowTypeFilter)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::type_filter) / [`set_type_filter(Option<WorkflowTypeFilter>)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::set_type_filter): <p>If specified, indicates the type of the workflow executions to be counted.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`tag_filter(TagFilter)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::tag_filter) / [`set_tag_filter(Option<TagFilter>)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::set_tag_filter): <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`close_status_filter(CloseStatusFilter)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::close_status_filter) / [`set_close_status_filter(Option<CloseStatusFilter>)`](crate::client::fluent_builders::CountClosedWorkflowExecutions::set_close_status_filter): <p>If specified, only workflow executions that match this close status are counted. This filter has an affect only if <code>executionStatus</code> is specified as <code>CLOSED</code>.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    /// - On success, responds with [`CountClosedWorkflowExecutionsOutput`](crate::output::CountClosedWorkflowExecutionsOutput) with field(s):
    ///   - [`count(i32)`](crate::output::CountClosedWorkflowExecutionsOutput::count): <p>The number of workflow executions.</p>
    ///   - [`truncated(bool)`](crate::output::CountClosedWorkflowExecutionsOutput::truncated): <p>If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.</p>
    /// - On failure, responds with [`SdkError<CountClosedWorkflowExecutionsError>`](crate::error::CountClosedWorkflowExecutionsError)
    pub fn count_closed_workflow_executions(
        &self,
    ) -> crate::client::fluent_builders::CountClosedWorkflowExecutions {
        crate::client::fluent_builders::CountClosedWorkflowExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CountOpenWorkflowExecutions`](crate::client::fluent_builders::CountOpenWorkflowExecutions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::set_domain): <p>The name of the domain containing the workflow executions to count.</p>
    ///   - [`start_time_filter(ExecutionTimeFilter)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::start_time_filter) / [`set_start_time_filter(Option<ExecutionTimeFilter>)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::set_start_time_filter): <p>Specifies the start time criteria that workflow executions must meet in order to be counted.</p>
    ///   - [`type_filter(WorkflowTypeFilter)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::type_filter) / [`set_type_filter(Option<WorkflowTypeFilter>)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::set_type_filter): <p>Specifies the type of the workflow executions to be counted.</p> <note>   <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`tag_filter(TagFilter)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::tag_filter) / [`set_tag_filter(Option<TagFilter>)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::set_tag_filter): <p>If specified, only executions that have a tag that matches the filter are counted.</p> <note>   <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`execution_filter(WorkflowExecutionFilter)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::execution_filter) / [`set_execution_filter(Option<WorkflowExecutionFilter>)`](crate::client::fluent_builders::CountOpenWorkflowExecutions::set_execution_filter): <p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note>   <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    /// - On success, responds with [`CountOpenWorkflowExecutionsOutput`](crate::output::CountOpenWorkflowExecutionsOutput) with field(s):
    ///   - [`count(i32)`](crate::output::CountOpenWorkflowExecutionsOutput::count): <p>The number of workflow executions.</p>
    ///   - [`truncated(bool)`](crate::output::CountOpenWorkflowExecutionsOutput::truncated): <p>If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.</p>
    /// - On failure, responds with [`SdkError<CountOpenWorkflowExecutionsError>`](crate::error::CountOpenWorkflowExecutionsError)
    pub fn count_open_workflow_executions(
        &self,
    ) -> crate::client::fluent_builders::CountOpenWorkflowExecutions {
        crate::client::fluent_builders::CountOpenWorkflowExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CountPendingActivityTasks`](crate::client::fluent_builders::CountPendingActivityTasks) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::CountPendingActivityTasks::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::CountPendingActivityTasks::set_domain): <p>The name of the domain that contains the task list.</p>
    ///   - [`task_list(TaskList)`](crate::client::fluent_builders::CountPendingActivityTasks::task_list) / [`set_task_list(Option<TaskList>)`](crate::client::fluent_builders::CountPendingActivityTasks::set_task_list): <p>The name of the task list.</p>
    /// - On success, responds with [`CountPendingActivityTasksOutput`](crate::output::CountPendingActivityTasksOutput) with field(s):
    ///   - [`count(i32)`](crate::output::CountPendingActivityTasksOutput::count): <p>The number of tasks in the task list.</p>
    ///   - [`truncated(bool)`](crate::output::CountPendingActivityTasksOutput::truncated): <p>If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.</p>
    /// - On failure, responds with [`SdkError<CountPendingActivityTasksError>`](crate::error::CountPendingActivityTasksError)
    pub fn count_pending_activity_tasks(
        &self,
    ) -> crate::client::fluent_builders::CountPendingActivityTasks {
        crate::client::fluent_builders::CountPendingActivityTasks::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CountPendingDecisionTasks`](crate::client::fluent_builders::CountPendingDecisionTasks) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::CountPendingDecisionTasks::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::CountPendingDecisionTasks::set_domain): <p>The name of the domain that contains the task list.</p>
    ///   - [`task_list(TaskList)`](crate::client::fluent_builders::CountPendingDecisionTasks::task_list) / [`set_task_list(Option<TaskList>)`](crate::client::fluent_builders::CountPendingDecisionTasks::set_task_list): <p>The name of the task list.</p>
    /// - On success, responds with [`CountPendingDecisionTasksOutput`](crate::output::CountPendingDecisionTasksOutput) with field(s):
    ///   - [`count(i32)`](crate::output::CountPendingDecisionTasksOutput::count): <p>The number of tasks in the task list.</p>
    ///   - [`truncated(bool)`](crate::output::CountPendingDecisionTasksOutput::truncated): <p>If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.</p>
    /// - On failure, responds with [`SdkError<CountPendingDecisionTasksError>`](crate::error::CountPendingDecisionTasksError)
    pub fn count_pending_decision_tasks(
        &self,
    ) -> crate::client::fluent_builders::CountPendingDecisionTasks {
        crate::client::fluent_builders::CountPendingDecisionTasks::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeprecateActivityType`](crate::client::fluent_builders::DeprecateActivityType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DeprecateActivityType::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DeprecateActivityType::set_domain): <p>The name of the domain in which the activity type is registered.</p>
    ///   - [`activity_type(ActivityType)`](crate::client::fluent_builders::DeprecateActivityType::activity_type) / [`set_activity_type(Option<ActivityType>)`](crate::client::fluent_builders::DeprecateActivityType::set_activity_type): <p>The activity type to deprecate.</p>
    /// - On success, responds with [`DeprecateActivityTypeOutput`](crate::output::DeprecateActivityTypeOutput)

    /// - On failure, responds with [`SdkError<DeprecateActivityTypeError>`](crate::error::DeprecateActivityTypeError)
    pub fn deprecate_activity_type(&self) -> crate::client::fluent_builders::DeprecateActivityType {
        crate::client::fluent_builders::DeprecateActivityType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeprecateDomain`](crate::client::fluent_builders::DeprecateDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeprecateDomain::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeprecateDomain::set_name): <p>The name of the domain to deprecate.</p>
    /// - On success, responds with [`DeprecateDomainOutput`](crate::output::DeprecateDomainOutput)

    /// - On failure, responds with [`SdkError<DeprecateDomainError>`](crate::error::DeprecateDomainError)
    pub fn deprecate_domain(&self) -> crate::client::fluent_builders::DeprecateDomain {
        crate::client::fluent_builders::DeprecateDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeprecateWorkflowType`](crate::client::fluent_builders::DeprecateWorkflowType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DeprecateWorkflowType::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DeprecateWorkflowType::set_domain): <p>The name of the domain in which the workflow type is registered.</p>
    ///   - [`workflow_type(WorkflowType)`](crate::client::fluent_builders::DeprecateWorkflowType::workflow_type) / [`set_workflow_type(Option<WorkflowType>)`](crate::client::fluent_builders::DeprecateWorkflowType::set_workflow_type): <p>The workflow type to deprecate.</p>
    /// - On success, responds with [`DeprecateWorkflowTypeOutput`](crate::output::DeprecateWorkflowTypeOutput)

    /// - On failure, responds with [`SdkError<DeprecateWorkflowTypeError>`](crate::error::DeprecateWorkflowTypeError)
    pub fn deprecate_workflow_type(&self) -> crate::client::fluent_builders::DeprecateWorkflowType {
        crate::client::fluent_builders::DeprecateWorkflowType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeActivityType`](crate::client::fluent_builders::DescribeActivityType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DescribeActivityType::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DescribeActivityType::set_domain): <p>The name of the domain in which the activity type is registered.</p>
    ///   - [`activity_type(ActivityType)`](crate::client::fluent_builders::DescribeActivityType::activity_type) / [`set_activity_type(Option<ActivityType>)`](crate::client::fluent_builders::DescribeActivityType::set_activity_type): <p>The activity type to get information about. Activity types are identified by the <code>name</code> and <code>version</code> that were supplied when the activity was registered.</p>
    /// - On success, responds with [`DescribeActivityTypeOutput`](crate::output::DescribeActivityTypeOutput) with field(s):
    ///   - [`type_info(Option<ActivityTypeInfo>)`](crate::output::DescribeActivityTypeOutput::type_info): <p>General information about the activity type.</p>  <p>The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.</p>  <ul>   <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running. </p> </li>   <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateActivityType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type. </p> </li>  </ul>
    ///   - [`configuration(Option<ActivityTypeConfiguration>)`](crate::output::DescribeActivityTypeOutput::configuration): <p>The configuration settings registered with the activity type.</p>
    /// - On failure, responds with [`SdkError<DescribeActivityTypeError>`](crate::error::DescribeActivityTypeError)
    pub fn describe_activity_type(&self) -> crate::client::fluent_builders::DescribeActivityType {
        crate::client::fluent_builders::DescribeActivityType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDomain`](crate::client::fluent_builders::DescribeDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DescribeDomain::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DescribeDomain::set_name): <p>The name of the domain to describe.</p>
    /// - On success, responds with [`DescribeDomainOutput`](crate::output::DescribeDomainOutput) with field(s):
    ///   - [`domain_info(Option<DomainInfo>)`](crate::output::DescribeDomainOutput::domain_info): <p>The basic information about a domain, such as its name, status, and description.</p>
    ///   - [`configuration(Option<DomainConfiguration>)`](crate::output::DescribeDomainOutput::configuration): <p>The domain configuration. Currently, this includes only the domain's retention period.</p>
    /// - On failure, responds with [`SdkError<DescribeDomainError>`](crate::error::DescribeDomainError)
    pub fn describe_domain(&self) -> crate::client::fluent_builders::DescribeDomain {
        crate::client::fluent_builders::DescribeDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeWorkflowExecution`](crate::client::fluent_builders::DescribeWorkflowExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DescribeWorkflowExecution::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DescribeWorkflowExecution::set_domain): <p>The name of the domain containing the workflow execution.</p>
    ///   - [`execution(WorkflowExecution)`](crate::client::fluent_builders::DescribeWorkflowExecution::execution) / [`set_execution(Option<WorkflowExecution>)`](crate::client::fluent_builders::DescribeWorkflowExecution::set_execution): <p>The workflow execution to describe.</p>
    /// - On success, responds with [`DescribeWorkflowExecutionOutput`](crate::output::DescribeWorkflowExecutionOutput) with field(s):
    ///   - [`execution_info(Option<WorkflowExecutionInfo>)`](crate::output::DescribeWorkflowExecutionOutput::execution_info): <p>Information about the workflow execution.</p>
    ///   - [`execution_configuration(Option<WorkflowExecutionConfiguration>)`](crate::output::DescribeWorkflowExecutionOutput::execution_configuration): <p>The configuration settings for this workflow execution including timeout values, tasklist etc.</p>
    ///   - [`open_counts(Option<WorkflowExecutionOpenCounts>)`](crate::output::DescribeWorkflowExecutionOutput::open_counts): <p>The number of tasks for this workflow execution. This includes open and closed tasks of all types.</p>
    ///   - [`latest_activity_task_timestamp(Option<DateTime>)`](crate::output::DescribeWorkflowExecutionOutput::latest_activity_task_timestamp): <p>The time when the last activity task was scheduled for this workflow execution. You can use this information to determine if the workflow has not made progress for an unusually long period of time and might require a corrective action.</p>
    ///   - [`latest_execution_context(Option<String>)`](crate::output::DescribeWorkflowExecutionOutput::latest_execution_context): <p>The latest executionContext provided by the decider for this workflow execution. A decider can provide an executionContext (a free-form string) when closing a decision task using <code>RespondDecisionTaskCompleted</code>.</p>
    /// - On failure, responds with [`SdkError<DescribeWorkflowExecutionError>`](crate::error::DescribeWorkflowExecutionError)
    pub fn describe_workflow_execution(
        &self,
    ) -> crate::client::fluent_builders::DescribeWorkflowExecution {
        crate::client::fluent_builders::DescribeWorkflowExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeWorkflowType`](crate::client::fluent_builders::DescribeWorkflowType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DescribeWorkflowType::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DescribeWorkflowType::set_domain): <p>The name of the domain in which this workflow type is registered.</p>
    ///   - [`workflow_type(WorkflowType)`](crate::client::fluent_builders::DescribeWorkflowType::workflow_type) / [`set_workflow_type(Option<WorkflowType>)`](crate::client::fluent_builders::DescribeWorkflowType::set_workflow_type): <p>The workflow type to describe.</p>
    /// - On success, responds with [`DescribeWorkflowTypeOutput`](crate::output::DescribeWorkflowTypeOutput) with field(s):
    ///   - [`type_info(Option<WorkflowTypeInfo>)`](crate::output::DescribeWorkflowTypeOutput::type_info): <p>General information about the workflow type.</p>  <p>The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.</p>  <ul>   <li> <p> <code>REGISTERED</code> – The type is registered and available. Workers supporting this type should be running.</p> </li>   <li> <p> <code>DEPRECATED</code> – The type was deprecated using <code>DeprecateWorkflowType</code>, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type.</p> </li>  </ul>
    ///   - [`configuration(Option<WorkflowTypeConfiguration>)`](crate::output::DescribeWorkflowTypeOutput::configuration): <p>Configuration settings of the workflow type registered through <code>RegisterWorkflowType</code> </p>
    /// - On failure, responds with [`SdkError<DescribeWorkflowTypeError>`](crate::error::DescribeWorkflowTypeError)
    pub fn describe_workflow_type(&self) -> crate::client::fluent_builders::DescribeWorkflowType {
        crate::client::fluent_builders::DescribeWorkflowType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetWorkflowExecutionHistory`](crate::client::fluent_builders::GetWorkflowExecutionHistory) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetWorkflowExecutionHistory::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::set_domain): <p>The name of the domain containing the workflow execution.</p>
    ///   - [`execution(WorkflowExecution)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::execution) / [`set_execution(Option<WorkflowExecution>)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::set_execution): <p>Specifies the workflow execution for which to return the history.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::set_next_page_token): <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    ///   - [`maximum_page_size(i32)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::maximum_page_size) / [`set_maximum_page_size(i32)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::set_maximum_page_size): <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    ///   - [`reverse_order(bool)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::reverse_order) / [`set_reverse_order(bool)`](crate::client::fluent_builders::GetWorkflowExecutionHistory::set_reverse_order): <p>When set to <code>true</code>, returns the events in reverse order. By default the results are returned in ascending order of the <code>eventTimeStamp</code> of the events.</p>
    /// - On success, responds with [`GetWorkflowExecutionHistoryOutput`](crate::output::GetWorkflowExecutionHistoryOutput) with field(s):
    ///   - [`events(Option<Vec<HistoryEvent>>)`](crate::output::GetWorkflowExecutionHistoryOutput::events): <p>The list of history events.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::GetWorkflowExecutionHistoryOutput::next_page_token): <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    /// - On failure, responds with [`SdkError<GetWorkflowExecutionHistoryError>`](crate::error::GetWorkflowExecutionHistoryError)
    pub fn get_workflow_execution_history(
        &self,
    ) -> crate::client::fluent_builders::GetWorkflowExecutionHistory {
        crate::client::fluent_builders::GetWorkflowExecutionHistory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListActivityTypes`](crate::client::fluent_builders::ListActivityTypes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListActivityTypes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListActivityTypes::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListActivityTypes::set_domain): <p>The name of the domain in which the activity types have been registered.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListActivityTypes::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListActivityTypes::set_name): <p>If specified, only lists the activity types that have this name.</p>
    ///   - [`registration_status(RegistrationStatus)`](crate::client::fluent_builders::ListActivityTypes::registration_status) / [`set_registration_status(Option<RegistrationStatus>)`](crate::client::fluent_builders::ListActivityTypes::set_registration_status): <p>Specifies the registration status of the activity types to list.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::ListActivityTypes::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::ListActivityTypes::set_next_page_token): <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    ///   - [`maximum_page_size(i32)`](crate::client::fluent_builders::ListActivityTypes::maximum_page_size) / [`set_maximum_page_size(i32)`](crate::client::fluent_builders::ListActivityTypes::set_maximum_page_size): <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    ///   - [`reverse_order(bool)`](crate::client::fluent_builders::ListActivityTypes::reverse_order) / [`set_reverse_order(bool)`](crate::client::fluent_builders::ListActivityTypes::set_reverse_order): <p>When set to <code>true</code>, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by <code>name</code> of the activity types.</p>
    /// - On success, responds with [`ListActivityTypesOutput`](crate::output::ListActivityTypesOutput) with field(s):
    ///   - [`type_infos(Option<Vec<ActivityTypeInfo>>)`](crate::output::ListActivityTypesOutput::type_infos): <p>List of activity type information.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::ListActivityTypesOutput::next_page_token): <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    /// - On failure, responds with [`SdkError<ListActivityTypesError>`](crate::error::ListActivityTypesError)
    pub fn list_activity_types(&self) -> crate::client::fluent_builders::ListActivityTypes {
        crate::client::fluent_builders::ListActivityTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListClosedWorkflowExecutions`](crate::client::fluent_builders::ListClosedWorkflowExecutions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListClosedWorkflowExecutions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_domain): <p>The name of the domain that contains the workflow executions to list.</p>
    ///   - [`start_time_filter(ExecutionTimeFilter)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::start_time_filter) / [`set_start_time_filter(Option<ExecutionTimeFilter>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_start_time_filter): <p>If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times.</p> <note>   <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>  </note>
    ///   - [`close_time_filter(ExecutionTimeFilter)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::close_time_filter) / [`set_close_time_filter(Option<ExecutionTimeFilter>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_close_time_filter): <p>If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times.</p> <note>   <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p>  </note>
    ///   - [`execution_filter(WorkflowExecutionFilter)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::execution_filter) / [`set_execution_filter(Option<WorkflowExecutionFilter>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_execution_filter): <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`close_status_filter(CloseStatusFilter)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::close_status_filter) / [`set_close_status_filter(Option<CloseStatusFilter>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_close_status_filter): <p>If specified, only workflow executions that match this <i>close status</i> are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`type_filter(WorkflowTypeFilter)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::type_filter) / [`set_type_filter(Option<WorkflowTypeFilter>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_type_filter): <p>If specified, only executions of the type specified in the filter are returned.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`tag_filter(TagFilter)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::tag_filter) / [`set_tag_filter(Option<TagFilter>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_tag_filter): <p>If specified, only executions that have the matching tag are listed.</p> <note>   <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_next_page_token): <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    ///   - [`maximum_page_size(i32)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::maximum_page_size) / [`set_maximum_page_size(i32)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_maximum_page_size): <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    ///   - [`reverse_order(bool)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::reverse_order) / [`set_reverse_order(bool)`](crate::client::fluent_builders::ListClosedWorkflowExecutions::set_reverse_order): <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.</p>
    /// - On success, responds with [`ListClosedWorkflowExecutionsOutput`](crate::output::ListClosedWorkflowExecutionsOutput) with field(s):
    ///   - [`execution_infos(Option<Vec<WorkflowExecutionInfo>>)`](crate::output::ListClosedWorkflowExecutionsOutput::execution_infos): <p>The list of workflow information structures.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::ListClosedWorkflowExecutionsOutput::next_page_token): <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    /// - On failure, responds with [`SdkError<ListClosedWorkflowExecutionsError>`](crate::error::ListClosedWorkflowExecutionsError)
    pub fn list_closed_workflow_executions(
        &self,
    ) -> crate::client::fluent_builders::ListClosedWorkflowExecutions {
        crate::client::fluent_builders::ListClosedWorkflowExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDomains`](crate::client::fluent_builders::ListDomains) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDomains::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::ListDomains::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::ListDomains::set_next_page_token): <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    ///   - [`registration_status(RegistrationStatus)`](crate::client::fluent_builders::ListDomains::registration_status) / [`set_registration_status(Option<RegistrationStatus>)`](crate::client::fluent_builders::ListDomains::set_registration_status): <p>Specifies the registration status of the domains to list.</p>
    ///   - [`maximum_page_size(i32)`](crate::client::fluent_builders::ListDomains::maximum_page_size) / [`set_maximum_page_size(i32)`](crate::client::fluent_builders::ListDomains::set_maximum_page_size): <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    ///   - [`reverse_order(bool)`](crate::client::fluent_builders::ListDomains::reverse_order) / [`set_reverse_order(bool)`](crate::client::fluent_builders::ListDomains::set_reverse_order): <p>When set to <code>true</code>, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by <code>name</code> of the domains.</p>
    /// - On success, responds with [`ListDomainsOutput`](crate::output::ListDomainsOutput) with field(s):
    ///   - [`domain_infos(Option<Vec<DomainInfo>>)`](crate::output::ListDomainsOutput::domain_infos): <p>A list of DomainInfo structures.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::ListDomainsOutput::next_page_token): <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    /// - On failure, responds with [`SdkError<ListDomainsError>`](crate::error::ListDomainsError)
    pub fn list_domains(&self) -> crate::client::fluent_builders::ListDomains {
        crate::client::fluent_builders::ListDomains::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListOpenWorkflowExecutions`](crate::client::fluent_builders::ListOpenWorkflowExecutions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListOpenWorkflowExecutions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::set_domain): <p>The name of the domain that contains the workflow executions to list.</p>
    ///   - [`start_time_filter(ExecutionTimeFilter)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::start_time_filter) / [`set_start_time_filter(Option<ExecutionTimeFilter>)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::set_start_time_filter): <p>Workflow executions are included in the returned results based on whether their start times are within the range specified by this filter.</p>
    ///   - [`type_filter(WorkflowTypeFilter)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::type_filter) / [`set_type_filter(Option<WorkflowTypeFilter>)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::set_type_filter): <p>If specified, only executions of the type specified in the filter are returned.</p> <note>   <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`tag_filter(TagFilter)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::tag_filter) / [`set_tag_filter(Option<TagFilter>)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::set_tag_filter): <p>If specified, only executions that have the matching tag are listed.</p> <note>   <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::set_next_page_token): <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    ///   - [`maximum_page_size(i32)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::maximum_page_size) / [`set_maximum_page_size(i32)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::set_maximum_page_size): <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    ///   - [`reverse_order(bool)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::reverse_order) / [`set_reverse_order(bool)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::set_reverse_order): <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in descending order of the start time of the executions.</p>
    ///   - [`execution_filter(WorkflowExecutionFilter)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::execution_filter) / [`set_execution_filter(Option<WorkflowExecutionFilter>)`](crate::client::fluent_builders::ListOpenWorkflowExecutions::set_execution_filter): <p>If specified, only workflow executions matching the workflow ID specified in the filter are returned.</p> <note>   <p> <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p>  </note>
    /// - On success, responds with [`ListOpenWorkflowExecutionsOutput`](crate::output::ListOpenWorkflowExecutionsOutput) with field(s):
    ///   - [`execution_infos(Option<Vec<WorkflowExecutionInfo>>)`](crate::output::ListOpenWorkflowExecutionsOutput::execution_infos): <p>The list of workflow information structures.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::ListOpenWorkflowExecutionsOutput::next_page_token): <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    /// - On failure, responds with [`SdkError<ListOpenWorkflowExecutionsError>`](crate::error::ListOpenWorkflowExecutionsError)
    pub fn list_open_workflow_executions(
        &self,
    ) -> crate::client::fluent_builders::ListOpenWorkflowExecutions {
        crate::client::fluent_builders::ListOpenWorkflowExecutions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) for the Amazon SWF domain.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<ResourceTag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>An array of tags associated with the domain.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListWorkflowTypes`](crate::client::fluent_builders::ListWorkflowTypes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListWorkflowTypes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListWorkflowTypes::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListWorkflowTypes::set_domain): <p>The name of the domain in which the workflow types have been registered.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListWorkflowTypes::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListWorkflowTypes::set_name): <p>If specified, lists the workflow type with this name.</p>
    ///   - [`registration_status(RegistrationStatus)`](crate::client::fluent_builders::ListWorkflowTypes::registration_status) / [`set_registration_status(Option<RegistrationStatus>)`](crate::client::fluent_builders::ListWorkflowTypes::set_registration_status): <p>Specifies the registration status of the workflow types to list.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::ListWorkflowTypes::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::ListWorkflowTypes::set_next_page_token): <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p>
    ///   - [`maximum_page_size(i32)`](crate::client::fluent_builders::ListWorkflowTypes::maximum_page_size) / [`set_maximum_page_size(i32)`](crate::client::fluent_builders::ListWorkflowTypes::set_maximum_page_size): <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>
    ///   - [`reverse_order(bool)`](crate::client::fluent_builders::ListWorkflowTypes::reverse_order) / [`set_reverse_order(bool)`](crate::client::fluent_builders::ListWorkflowTypes::set_reverse_order): <p>When set to <code>true</code>, returns the results in reverse order. By default the results are returned in ascending alphabetical order of the <code>name</code> of the workflow types.</p>
    /// - On success, responds with [`ListWorkflowTypesOutput`](crate::output::ListWorkflowTypesOutput) with field(s):
    ///   - [`type_infos(Option<Vec<WorkflowTypeInfo>>)`](crate::output::ListWorkflowTypesOutput::type_infos): <p>The list of workflow type information.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::ListWorkflowTypesOutput::next_page_token): <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    /// - On failure, responds with [`SdkError<ListWorkflowTypesError>`](crate::error::ListWorkflowTypesError)
    pub fn list_workflow_types(&self) -> crate::client::fluent_builders::ListWorkflowTypes {
        crate::client::fluent_builders::ListWorkflowTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PollForActivityTask`](crate::client::fluent_builders::PollForActivityTask) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::PollForActivityTask::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::PollForActivityTask::set_domain): <p>The name of the domain that contains the task lists being polled.</p>
    ///   - [`task_list(TaskList)`](crate::client::fluent_builders::PollForActivityTask::task_list) / [`set_task_list(Option<TaskList>)`](crate::client::fluent_builders::PollForActivityTask::set_task_list): <p>Specifies the task list to poll for activity tasks.</p>  <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not <i>be</i> the literal string <code>arn</code>.</p>
    ///   - [`identity(impl Into<String>)`](crate::client::fluent_builders::PollForActivityTask::identity) / [`set_identity(Option<String>)`](crate::client::fluent_builders::PollForActivityTask::set_identity): <p>Identity of the worker making the request, recorded in the <code>ActivityTaskStarted</code> event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.</p>
    /// - On success, responds with [`PollForActivityTaskOutput`](crate::output::PollForActivityTaskOutput) with field(s):
    ///   - [`task_token(Option<String>)`](crate::output::PollForActivityTaskOutput::task_token): <p>The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.</p>
    ///   - [`activity_id(Option<String>)`](crate::output::PollForActivityTaskOutput::activity_id): <p>The unique ID of the task.</p>
    ///   - [`started_event_id(i64)`](crate::output::PollForActivityTaskOutput::started_event_id): <p>The ID of the <code>ActivityTaskStarted</code> event recorded in the history.</p>
    ///   - [`workflow_execution(Option<WorkflowExecution>)`](crate::output::PollForActivityTaskOutput::workflow_execution): <p>The workflow execution that started this activity task.</p>
    ///   - [`activity_type(Option<ActivityType>)`](crate::output::PollForActivityTaskOutput::activity_type): <p>The type of this activity task.</p>
    ///   - [`input(Option<String>)`](crate::output::PollForActivityTaskOutput::input): <p>The inputs provided when the activity task was scheduled. The form of the input is user defined and should be meaningful to the activity implementation.</p>
    /// - On failure, responds with [`SdkError<PollForActivityTaskError>`](crate::error::PollForActivityTaskError)
    pub fn poll_for_activity_task(&self) -> crate::client::fluent_builders::PollForActivityTask {
        crate::client::fluent_builders::PollForActivityTask::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PollForDecisionTask`](crate::client::fluent_builders::PollForDecisionTask) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::PollForDecisionTask::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::PollForDecisionTask::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::PollForDecisionTask::set_domain): <p>The name of the domain containing the task lists to poll.</p>
    ///   - [`task_list(TaskList)`](crate::client::fluent_builders::PollForDecisionTask::task_list) / [`set_task_list(Option<TaskList>)`](crate::client::fluent_builders::PollForDecisionTask::set_task_list): <p>Specifies the task list to poll for decision tasks.</p>  <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not <i>be</i> the literal string <code>arn</code>.</p>
    ///   - [`identity(impl Into<String>)`](crate::client::fluent_builders::PollForDecisionTask::identity) / [`set_identity(Option<String>)`](crate::client::fluent_builders::PollForDecisionTask::set_identity): <p>Identity of the decider making the request, which is recorded in the DecisionTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.</p>
    ///   - [`next_page_token(impl Into<String>)`](crate::client::fluent_builders::PollForDecisionTask::next_page_token) / [`set_next_page_token(Option<String>)`](crate::client::fluent_builders::PollForDecisionTask::set_next_page_token): <p>If <code>NextPageToken</code> is returned there are more results available. The value of <code>NextPageToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 60 seconds. Using an expired pagination token will return a <code>400</code> error: "<code>Specified token has exceeded its maximum lifetime</code>". </p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call. </p> <note>   <p>The <code>nextPageToken</code> returned by this action cannot be used with <code>GetWorkflowExecutionHistory</code> to get the next page. You must call <code>PollForDecisionTask</code> again (with the <code>nextPageToken</code>) to retrieve the next page of history records. Calling <code>PollForDecisionTask</code> with a <code>nextPageToken</code> doesn't return a new decision task.</p>  </note>
    ///   - [`maximum_page_size(i32)`](crate::client::fluent_builders::PollForDecisionTask::maximum_page_size) / [`set_maximum_page_size(i32)`](crate::client::fluent_builders::PollForDecisionTask::set_maximum_page_size): <p>The maximum number of results that are returned per call. Use <code>nextPageToken</code> to obtain further pages of results. </p>  <p>This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.</p>
    ///   - [`reverse_order(bool)`](crate::client::fluent_builders::PollForDecisionTask::reverse_order) / [`set_reverse_order(bool)`](crate::client::fluent_builders::PollForDecisionTask::set_reverse_order): <p>When set to <code>true</code>, returns the events in reverse order. By default the results are returned in ascending order of the <code>eventTimestamp</code> of the events.</p>
    /// - On success, responds with [`PollForDecisionTaskOutput`](crate::output::PollForDecisionTaskOutput) with field(s):
    ///   - [`task_token(Option<String>)`](crate::output::PollForDecisionTaskOutput::task_token): <p>The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.</p>
    ///   - [`started_event_id(i64)`](crate::output::PollForDecisionTaskOutput::started_event_id): <p>The ID of the <code>DecisionTaskStarted</code> event recorded in the history.</p>
    ///   - [`workflow_execution(Option<WorkflowExecution>)`](crate::output::PollForDecisionTaskOutput::workflow_execution): <p>The workflow execution for which this decision task was created.</p>
    ///   - [`workflow_type(Option<WorkflowType>)`](crate::output::PollForDecisionTaskOutput::workflow_type): <p>The type of the workflow execution for which this decision task was created.</p>
    ///   - [`events(Option<Vec<HistoryEvent>>)`](crate::output::PollForDecisionTaskOutput::events): <p>A paginated list of history events of the workflow execution. The decider uses this during the processing of the decision task.</p>
    ///   - [`next_page_token(Option<String>)`](crate::output::PollForDecisionTaskOutput::next_page_token): <p>If a <code>NextPageToken</code> was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in <code>nextPageToken</code>. Keep all other arguments unchanged.</p>  <p>The configured <code>maximumPageSize</code> determines how many results can be returned in a single call.</p>
    ///   - [`previous_started_event_id(i64)`](crate::output::PollForDecisionTaskOutput::previous_started_event_id): <p>The ID of the DecisionTaskStarted event of the previous decision task of this workflow execution that was processed by the decider. This can be used to determine the events in the history new since the last decision task received by the decider.</p>
    /// - On failure, responds with [`SdkError<PollForDecisionTaskError>`](crate::error::PollForDecisionTaskError)
    pub fn poll_for_decision_task(&self) -> crate::client::fluent_builders::PollForDecisionTask {
        crate::client::fluent_builders::PollForDecisionTask::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RecordActivityTaskHeartbeat`](crate::client::fluent_builders::RecordActivityTaskHeartbeat) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_token(impl Into<String>)`](crate::client::fluent_builders::RecordActivityTaskHeartbeat::task_token) / [`set_task_token(Option<String>)`](crate::client::fluent_builders::RecordActivityTaskHeartbeat::set_task_token): <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>   <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results. </p>  </important>
    ///   - [`details(impl Into<String>)`](crate::client::fluent_builders::RecordActivityTaskHeartbeat::details) / [`set_details(Option<String>)`](crate::client::fluent_builders::RecordActivityTaskHeartbeat::set_details): <p>If specified, contains details about the progress of the task.</p>
    /// - On success, responds with [`RecordActivityTaskHeartbeatOutput`](crate::output::RecordActivityTaskHeartbeatOutput) with field(s):
    ///   - [`cancel_requested(bool)`](crate::output::RecordActivityTaskHeartbeatOutput::cancel_requested): <p>Set to <code>true</code> if cancellation of the task is requested.</p>
    /// - On failure, responds with [`SdkError<RecordActivityTaskHeartbeatError>`](crate::error::RecordActivityTaskHeartbeatError)
    pub fn record_activity_task_heartbeat(
        &self,
    ) -> crate::client::fluent_builders::RecordActivityTaskHeartbeat {
        crate::client::fluent_builders::RecordActivityTaskHeartbeat::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterActivityType`](crate::client::fluent_builders::RegisterActivityType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::RegisterActivityType::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::RegisterActivityType::set_domain): <p>The name of the domain in which this activity is to be registered.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::RegisterActivityType::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::RegisterActivityType::set_name): <p>The name of the activity type within the domain.</p>  <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not <i>be</i> the literal string <code>arn</code>.</p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::RegisterActivityType::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::RegisterActivityType::set_version): <p>The version of the activity type.</p> <note>   <p>The activity type consists of the name and version, the combination of which must be unique within the domain.</p>  </note>  <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not <i>be</i> the literal string <code>arn</code>.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::RegisterActivityType::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::RegisterActivityType::set_description): <p>A textual description of the activity type.</p>
    ///   - [`default_task_start_to_close_timeout(impl Into<String>)`](crate::client::fluent_builders::RegisterActivityType::default_task_start_to_close_timeout) / [`set_default_task_start_to_close_timeout(Option<String>)`](crate::client::fluent_builders::RegisterActivityType::set_default_task_start_to_close_timeout): <p>If set, specifies the default maximum duration that a worker can take to process tasks of this activity type. This default can be overridden when scheduling an activity task using the <code>ScheduleActivityTask</code> <code>Decision</code>.</p>  <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///   - [`default_task_heartbeat_timeout(impl Into<String>)`](crate::client::fluent_builders::RegisterActivityType::default_task_heartbeat_timeout) / [`set_default_task_heartbeat_timeout(Option<String>)`](crate::client::fluent_builders::RegisterActivityType::set_default_task_heartbeat_timeout): <p>If set, specifies the default maximum time before which a worker processing a task of this type must report progress by calling <code>RecordActivityTaskHeartbeat</code>. If the timeout is exceeded, the activity task is automatically timed out. This default can be overridden when scheduling an activity task using the <code>ScheduleActivityTask</code> <code>Decision</code>. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an <code>UnknownResource</code> fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task.</p>  <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///   - [`default_task_list(TaskList)`](crate::client::fluent_builders::RegisterActivityType::default_task_list) / [`set_default_task_list(Option<TaskList>)`](crate::client::fluent_builders::RegisterActivityType::set_default_task_list): <p>If set, specifies the default task list to use for scheduling tasks of this activity type. This default task list is used if a task list isn't provided when a task is scheduled through the <code>ScheduleActivityTask</code> <code>Decision</code>.</p>
    ///   - [`default_task_priority(impl Into<String>)`](crate::client::fluent_builders::RegisterActivityType::default_task_priority) / [`set_default_task_priority(Option<String>)`](crate::client::fluent_builders::RegisterActivityType::set_default_task_priority): <p>The default task priority to assign to the activity type. If not assigned, then <code>0</code> is used. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>  <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>in the <i>Amazon SWF Developer Guide</i>.</i>.</p>
    ///   - [`default_task_schedule_to_start_timeout(impl Into<String>)`](crate::client::fluent_builders::RegisterActivityType::default_task_schedule_to_start_timeout) / [`set_default_task_schedule_to_start_timeout(Option<String>)`](crate::client::fluent_builders::RegisterActivityType::set_default_task_schedule_to_start_timeout): <p>If set, specifies the default maximum duration that a task of this activity type can wait before being assigned to a worker. This default can be overridden when scheduling an activity task using the <code>ScheduleActivityTask</code> <code>Decision</code>.</p>  <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///   - [`default_task_schedule_to_close_timeout(impl Into<String>)`](crate::client::fluent_builders::RegisterActivityType::default_task_schedule_to_close_timeout) / [`set_default_task_schedule_to_close_timeout(Option<String>)`](crate::client::fluent_builders::RegisterActivityType::set_default_task_schedule_to_close_timeout): <p>If set, specifies the default maximum duration for a task of this activity type. This default can be overridden when scheduling an activity task using the <code>ScheduleActivityTask</code> <code>Decision</code>.</p>  <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    /// - On success, responds with [`RegisterActivityTypeOutput`](crate::output::RegisterActivityTypeOutput)

    /// - On failure, responds with [`SdkError<RegisterActivityTypeError>`](crate::error::RegisterActivityTypeError)
    pub fn register_activity_type(&self) -> crate::client::fluent_builders::RegisterActivityType {
        crate::client::fluent_builders::RegisterActivityType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterDomain`](crate::client::fluent_builders::RegisterDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::RegisterDomain::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::RegisterDomain::set_name): <p>Name of the domain to register. The name must be unique in the region that the domain is registered in.</p>  <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not <i>be</i> the literal string <code>arn</code>.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::RegisterDomain::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::RegisterDomain::set_description): <p>A text description of the domain.</p>
    ///   - [`workflow_execution_retention_period_in_days(impl Into<String>)`](crate::client::fluent_builders::RegisterDomain::workflow_execution_retention_period_in_days) / [`set_workflow_execution_retention_period_in_days(Option<String>)`](crate::client::fluent_builders::RegisterDomain::set_workflow_execution_retention_period_in_days): <p>The duration (in days) that records and histories of workflow executions on the domain should be kept by the service. After the retention period, the workflow execution isn't available in the results of visibility calls.</p>  <p>If you pass the value <code>NONE</code> or <code>0</code> (zero), then the workflow execution history isn't retained. As soon as the workflow execution completes, the execution record and its history are deleted.</p>  <p>The maximum workflow execution retention period is 90 days. For more information about Amazon SWF service limits, see: <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-limits.html">Amazon SWF Service Limits</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    ///   - [`tags(Vec<ResourceTag>)`](crate::client::fluent_builders::RegisterDomain::tags) / [`set_tags(Option<Vec<ResourceTag>>)`](crate::client::fluent_builders::RegisterDomain::set_tags): <p>Tags to be added when registering a domain.</p>  <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    /// - On success, responds with [`RegisterDomainOutput`](crate::output::RegisterDomainOutput)

    /// - On failure, responds with [`SdkError<RegisterDomainError>`](crate::error::RegisterDomainError)
    pub fn register_domain(&self) -> crate::client::fluent_builders::RegisterDomain {
        crate::client::fluent_builders::RegisterDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RegisterWorkflowType`](crate::client::fluent_builders::RegisterWorkflowType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::RegisterWorkflowType::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::RegisterWorkflowType::set_domain): <p>The name of the domain in which to register the workflow type.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::RegisterWorkflowType::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::RegisterWorkflowType::set_name): <p>The name of the workflow type.</p>  <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not <i>be</i> the literal string <code>arn</code>.</p>
    ///   - [`version(impl Into<String>)`](crate::client::fluent_builders::RegisterWorkflowType::version) / [`set_version(Option<String>)`](crate::client::fluent_builders::RegisterWorkflowType::set_version): <p>The version of the workflow type.</p> <note>   <p>The workflow type consists of the name and version, the combination of which must be unique within the domain. To get a list of all currently registered workflow types, use the <code>ListWorkflowTypes</code> action.</p>  </note>  <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not <i>be</i> the literal string <code>arn</code>.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::RegisterWorkflowType::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::RegisterWorkflowType::set_description): <p>Textual description of the workflow type.</p>
    ///   - [`default_task_start_to_close_timeout(impl Into<String>)`](crate::client::fluent_builders::RegisterWorkflowType::default_task_start_to_close_timeout) / [`set_default_task_start_to_close_timeout(Option<String>)`](crate::client::fluent_builders::RegisterWorkflowType::set_default_task_start_to_close_timeout): <p>If set, specifies the default maximum duration of decision tasks for this workflow type. This default can be overridden when starting a workflow execution using the <code>StartWorkflowExecution</code> action or the <code>StartChildWorkflowExecution</code> <code>Decision</code>.</p>  <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    ///   - [`default_execution_start_to_close_timeout(impl Into<String>)`](crate::client::fluent_builders::RegisterWorkflowType::default_execution_start_to_close_timeout) / [`set_default_execution_start_to_close_timeout(Option<String>)`](crate::client::fluent_builders::RegisterWorkflowType::set_default_execution_start_to_close_timeout): <p>If set, specifies the default maximum duration for executions of this workflow type. You can override this default when starting an execution through the <code>StartWorkflowExecution</code> Action or <code>StartChildWorkflowExecution</code> <code>Decision</code>.</p>  <p>The duration is specified in seconds; an integer greater than or equal to 0. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for <code>defaultExecutionStartToCloseTimeout</code>; there is a one-year max limit on the time that a workflow execution can run. Exceeding this limit always causes the workflow execution to time out.</p>
    ///   - [`default_task_list(TaskList)`](crate::client::fluent_builders::RegisterWorkflowType::default_task_list) / [`set_default_task_list(Option<TaskList>)`](crate::client::fluent_builders::RegisterWorkflowType::set_default_task_list): <p>If set, specifies the default task list to use for scheduling decision tasks for executions of this workflow type. This default is used only if a task list isn't provided when starting the execution through the <code>StartWorkflowExecution</code> Action or <code>StartChildWorkflowExecution</code> <code>Decision</code>.</p>
    ///   - [`default_task_priority(impl Into<String>)`](crate::client::fluent_builders::RegisterWorkflowType::default_task_priority) / [`set_default_task_priority(Option<String>)`](crate::client::fluent_builders::RegisterWorkflowType::set_default_task_priority): <p>The default task priority to assign to the workflow type. If not assigned, then <code>0</code> is used. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>  <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    ///   - [`default_child_policy(ChildPolicy)`](crate::client::fluent_builders::RegisterWorkflowType::default_child_policy) / [`set_default_child_policy(Option<ChildPolicy>)`](crate::client::fluent_builders::RegisterWorkflowType::set_default_child_policy): <p>If set, specifies the default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the <code>TerminateWorkflowExecution</code> action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the <code>StartWorkflowExecution</code> action or the <code>StartChildWorkflowExecution</code> <code>Decision</code>.</p>  <p>The supported child policies are:</p>  <ul>   <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>   <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>   <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>  </ul>
    ///   - [`default_lambda_role(impl Into<String>)`](crate::client::fluent_builders::RegisterWorkflowType::default_lambda_role) / [`set_default_lambda_role(Option<String>)`](crate::client::fluent_builders::RegisterWorkflowType::set_default_lambda_role): <p>The default IAM role attached to this workflow type.</p> <note>   <p>Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't specify an IAM role when you start this workflow type, the default Lambda role is attached to the execution. For more information, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html</a> in the <i>Amazon SWF Developer Guide</i>.</p>  </note>
    /// - On success, responds with [`RegisterWorkflowTypeOutput`](crate::output::RegisterWorkflowTypeOutput)

    /// - On failure, responds with [`SdkError<RegisterWorkflowTypeError>`](crate::error::RegisterWorkflowTypeError)
    pub fn register_workflow_type(&self) -> crate::client::fluent_builders::RegisterWorkflowType {
        crate::client::fluent_builders::RegisterWorkflowType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RequestCancelWorkflowExecution`](crate::client::fluent_builders::RequestCancelWorkflowExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::RequestCancelWorkflowExecution::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::RequestCancelWorkflowExecution::set_domain): <p>The name of the domain containing the workflow execution to cancel.</p>
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::RequestCancelWorkflowExecution::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::RequestCancelWorkflowExecution::set_workflow_id): <p>The workflowId of the workflow execution to cancel.</p>
    ///   - [`run_id(impl Into<String>)`](crate::client::fluent_builders::RequestCancelWorkflowExecution::run_id) / [`set_run_id(Option<String>)`](crate::client::fluent_builders::RequestCancelWorkflowExecution::set_run_id): <p>The runId of the workflow execution to cancel.</p>
    /// - On success, responds with [`RequestCancelWorkflowExecutionOutput`](crate::output::RequestCancelWorkflowExecutionOutput)

    /// - On failure, responds with [`SdkError<RequestCancelWorkflowExecutionError>`](crate::error::RequestCancelWorkflowExecutionError)
    pub fn request_cancel_workflow_execution(
        &self,
    ) -> crate::client::fluent_builders::RequestCancelWorkflowExecution {
        crate::client::fluent_builders::RequestCancelWorkflowExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RespondActivityTaskCanceled`](crate::client::fluent_builders::RespondActivityTaskCanceled) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_token(impl Into<String>)`](crate::client::fluent_builders::RespondActivityTaskCanceled::task_token) / [`set_task_token(Option<String>)`](crate::client::fluent_builders::RespondActivityTaskCanceled::set_task_token): <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>   <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>  </important>
    ///   - [`details(impl Into<String>)`](crate::client::fluent_builders::RespondActivityTaskCanceled::details) / [`set_details(Option<String>)`](crate::client::fluent_builders::RespondActivityTaskCanceled::set_details): <p> Information about the cancellation.</p>
    /// - On success, responds with [`RespondActivityTaskCanceledOutput`](crate::output::RespondActivityTaskCanceledOutput)

    /// - On failure, responds with [`SdkError<RespondActivityTaskCanceledError>`](crate::error::RespondActivityTaskCanceledError)
    pub fn respond_activity_task_canceled(
        &self,
    ) -> crate::client::fluent_builders::RespondActivityTaskCanceled {
        crate::client::fluent_builders::RespondActivityTaskCanceled::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RespondActivityTaskCompleted`](crate::client::fluent_builders::RespondActivityTaskCompleted) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_token(impl Into<String>)`](crate::client::fluent_builders::RespondActivityTaskCompleted::task_token) / [`set_task_token(Option<String>)`](crate::client::fluent_builders::RespondActivityTaskCompleted::set_task_token): <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>   <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>  </important>
    ///   - [`result(impl Into<String>)`](crate::client::fluent_builders::RespondActivityTaskCompleted::result) / [`set_result(Option<String>)`](crate::client::fluent_builders::RespondActivityTaskCompleted::set_result): <p>The result of the activity task. It is a free form string that is implementation specific.</p>
    /// - On success, responds with [`RespondActivityTaskCompletedOutput`](crate::output::RespondActivityTaskCompletedOutput)

    /// - On failure, responds with [`SdkError<RespondActivityTaskCompletedError>`](crate::error::RespondActivityTaskCompletedError)
    pub fn respond_activity_task_completed(
        &self,
    ) -> crate::client::fluent_builders::RespondActivityTaskCompleted {
        crate::client::fluent_builders::RespondActivityTaskCompleted::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RespondActivityTaskFailed`](crate::client::fluent_builders::RespondActivityTaskFailed) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_token(impl Into<String>)`](crate::client::fluent_builders::RespondActivityTaskFailed::task_token) / [`set_task_token(Option<String>)`](crate::client::fluent_builders::RespondActivityTaskFailed::set_task_token): <p>The <code>taskToken</code> of the <code>ActivityTask</code>.</p> <important>   <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>  </important>
    ///   - [`reason(impl Into<String>)`](crate::client::fluent_builders::RespondActivityTaskFailed::reason) / [`set_reason(Option<String>)`](crate::client::fluent_builders::RespondActivityTaskFailed::set_reason): <p>Description of the error that may assist in diagnostics.</p>
    ///   - [`details(impl Into<String>)`](crate::client::fluent_builders::RespondActivityTaskFailed::details) / [`set_details(Option<String>)`](crate::client::fluent_builders::RespondActivityTaskFailed::set_details): <p> Detailed information about the failure.</p>
    /// - On success, responds with [`RespondActivityTaskFailedOutput`](crate::output::RespondActivityTaskFailedOutput)

    /// - On failure, responds with [`SdkError<RespondActivityTaskFailedError>`](crate::error::RespondActivityTaskFailedError)
    pub fn respond_activity_task_failed(
        &self,
    ) -> crate::client::fluent_builders::RespondActivityTaskFailed {
        crate::client::fluent_builders::RespondActivityTaskFailed::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RespondDecisionTaskCompleted`](crate::client::fluent_builders::RespondDecisionTaskCompleted) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_token(impl Into<String>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::task_token) / [`set_task_token(Option<String>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::set_task_token): <p>The <code>taskToken</code> from the <code>DecisionTask</code>.</p> <important>   <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p>  </important>
    ///   - [`decisions(Vec<Decision>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::decisions) / [`set_decisions(Option<Vec<Decision>>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::set_decisions): <p>The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the <code>Decision</code> structure for details.</p>
    ///   - [`execution_context(impl Into<String>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::execution_context) / [`set_execution_context(Option<String>)`](crate::client::fluent_builders::RespondDecisionTaskCompleted::set_execution_context): <p>User defined context to add to workflow execution.</p>
    /// - On success, responds with [`RespondDecisionTaskCompletedOutput`](crate::output::RespondDecisionTaskCompletedOutput)

    /// - On failure, responds with [`SdkError<RespondDecisionTaskCompletedError>`](crate::error::RespondDecisionTaskCompletedError)
    pub fn respond_decision_task_completed(
        &self,
    ) -> crate::client::fluent_builders::RespondDecisionTaskCompleted {
        crate::client::fluent_builders::RespondDecisionTaskCompleted::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SignalWorkflowExecution`](crate::client::fluent_builders::SignalWorkflowExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::set_domain): <p>The name of the domain containing the workflow execution to signal.</p>
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::set_workflow_id): <p>The workflowId of the workflow execution to signal.</p>
    ///   - [`run_id(impl Into<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::run_id) / [`set_run_id(Option<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::set_run_id): <p>The runId of the workflow execution to signal.</p>
    ///   - [`signal_name(impl Into<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::signal_name) / [`set_signal_name(Option<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::set_signal_name): <p>The name of the signal. This name must be meaningful to the target workflow.</p>
    ///   - [`input(impl Into<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::input) / [`set_input(Option<String>)`](crate::client::fluent_builders::SignalWorkflowExecution::set_input): <p>Data to attach to the <code>WorkflowExecutionSignaled</code> event in the target workflow execution's history.</p>
    /// - On success, responds with [`SignalWorkflowExecutionOutput`](crate::output::SignalWorkflowExecutionOutput)

    /// - On failure, responds with [`SdkError<SignalWorkflowExecutionError>`](crate::error::SignalWorkflowExecutionError)
    pub fn signal_workflow_execution(
        &self,
    ) -> crate::client::fluent_builders::SignalWorkflowExecution {
        crate::client::fluent_builders::SignalWorkflowExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartWorkflowExecution`](crate::client::fluent_builders::StartWorkflowExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::StartWorkflowExecution::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::StartWorkflowExecution::set_domain): <p>The name of the domain in which the workflow execution is created.</p>
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::StartWorkflowExecution::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::StartWorkflowExecution::set_workflow_id): <p>The user defined identifier associated with the workflow execution. You can use this to associate a custom identifier with the workflow execution. You may specify the same identifier if a workflow execution is logically a <i>restart</i> of a previous execution. You cannot have two open workflow executions with the same <code>workflowId</code> at the same time within the same domain.</p>  <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not <i>be</i> the literal string <code>arn</code>.</p>
    ///   - [`workflow_type(WorkflowType)`](crate::client::fluent_builders::StartWorkflowExecution::workflow_type) / [`set_workflow_type(Option<WorkflowType>)`](crate::client::fluent_builders::StartWorkflowExecution::set_workflow_type): <p>The type of the workflow to start.</p>
    ///   - [`task_list(TaskList)`](crate::client::fluent_builders::StartWorkflowExecution::task_list) / [`set_task_list(Option<TaskList>)`](crate::client::fluent_builders::StartWorkflowExecution::set_task_list): <p>The task list to use for the decision tasks generated for this workflow execution. This overrides the <code>defaultTaskList</code> specified when registering the workflow type.</p> <note>   <p>A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault is returned.</p>  </note>  <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\u0000-\u001f</code> | <code>\u007f-\u009f</code>). Also, it must not <i>be</i> the literal string <code>arn</code>.</p>
    ///   - [`task_priority(impl Into<String>)`](crate::client::fluent_builders::StartWorkflowExecution::task_priority) / [`set_task_priority(Option<String>)`](crate::client::fluent_builders::StartWorkflowExecution::set_task_priority): <p>The task priority to use for this workflow execution. This overrides any default priority that was assigned when the workflow type was registered. If not set, then the default task priority for the workflow type is used. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>  <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    ///   - [`input(impl Into<String>)`](crate::client::fluent_builders::StartWorkflowExecution::input) / [`set_input(Option<String>)`](crate::client::fluent_builders::StartWorkflowExecution::set_input): <p>The input for the workflow execution. This is a free form string which should be meaningful to the workflow you are starting. This <code>input</code> is made available to the new workflow execution in the <code>WorkflowExecutionStarted</code> history event.</p>
    ///   - [`execution_start_to_close_timeout(impl Into<String>)`](crate::client::fluent_builders::StartWorkflowExecution::execution_start_to_close_timeout) / [`set_execution_start_to_close_timeout(Option<String>)`](crate::client::fluent_builders::StartWorkflowExecution::set_execution_start_to_close_timeout): <p>The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type.</p>  <p>The duration is specified in seconds; an integer greater than or equal to <code>0</code>. Exceeding this limit causes the workflow execution to time out. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for this timeout; there is a one-year max limit on the time that a workflow execution can run.</p> <note>   <p>An execution start-to-close timeout must be specified either through this parameter or as a default when the workflow type is registered. If neither this parameter nor a default execution start-to-close timeout is specified, a fault is returned.</p>  </note>
    ///   - [`tag_list(Vec<String>)`](crate::client::fluent_builders::StartWorkflowExecution::tag_list) / [`set_tag_list(Option<Vec<String>>)`](crate::client::fluent_builders::StartWorkflowExecution::set_tag_list): <p>The list of tags to associate with the workflow execution. You can specify a maximum of 5 tags. You can list workflow executions with a specific tag by calling <code>ListOpenWorkflowExecutions</code> or <code>ListClosedWorkflowExecutions</code> and specifying a <code>TagFilter</code>.</p>
    ///   - [`task_start_to_close_timeout(impl Into<String>)`](crate::client::fluent_builders::StartWorkflowExecution::task_start_to_close_timeout) / [`set_task_start_to_close_timeout(Option<String>)`](crate::client::fluent_builders::StartWorkflowExecution::set_task_start_to_close_timeout): <p>Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the <code>defaultTaskStartToCloseTimout</code> specified when registering the workflow type using <code>RegisterWorkflowType</code>.</p>  <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note>   <p>A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.</p>  </note>
    ///   - [`child_policy(ChildPolicy)`](crate::client::fluent_builders::StartWorkflowExecution::child_policy) / [`set_child_policy(Option<ChildPolicy>)`](crate::client::fluent_builders::StartWorkflowExecution::set_child_policy): <p>If set, specifies the policy to use for the child workflow executions of this workflow execution if it is terminated, by calling the <code>TerminateWorkflowExecution</code> action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using <code>RegisterWorkflowType</code>.</p>  <p>The supported child policies are:</p>  <ul>   <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>   <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>   <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>  </ul> <note>   <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p>  </note>
    ///   - [`lambda_role(impl Into<String>)`](crate::client::fluent_builders::StartWorkflowExecution::lambda_role) / [`set_lambda_role(Option<String>)`](crate::client::fluent_builders::StartWorkflowExecution::set_lambda_role): <p>The IAM role to attach to this workflow execution.</p> <note>   <p>Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't attach an IAM role, any attempt to schedule a Lambda task fails. This results in a <code>ScheduleLambdaFunctionFailed</code> history event. For more information, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html">https://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html</a> in the <i>Amazon SWF Developer Guide</i>.</p>  </note>
    /// - On success, responds with [`StartWorkflowExecutionOutput`](crate::output::StartWorkflowExecutionOutput) with field(s):
    ///   - [`run_id(Option<String>)`](crate::output::StartWorkflowExecutionOutput::run_id): <p>The <code>runId</code> of a workflow execution. This ID is generated by the service and can be used to uniquely identify the workflow execution within a domain.</p>
    /// - On failure, responds with [`SdkError<StartWorkflowExecutionError>`](crate::error::StartWorkflowExecutionError)
    pub fn start_workflow_execution(
        &self,
    ) -> crate::client::fluent_builders::StartWorkflowExecution {
        crate::client::fluent_builders::StartWorkflowExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) for the Amazon SWF domain.</p>
    ///   - [`tags(Vec<ResourceTag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<ResourceTag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The list of tags to add to a domain. </p>  <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TerminateWorkflowExecution`](crate::client::fluent_builders::TerminateWorkflowExecution) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::set_domain): <p>The domain of the workflow execution to terminate.</p>
    ///   - [`workflow_id(impl Into<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::workflow_id) / [`set_workflow_id(Option<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::set_workflow_id): <p>The workflowId of the workflow execution to terminate.</p>
    ///   - [`run_id(impl Into<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::run_id) / [`set_run_id(Option<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::set_run_id): <p>The runId of the workflow execution to terminate.</p>
    ///   - [`reason(impl Into<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::reason) / [`set_reason(Option<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::set_reason): <p> A descriptive reason for terminating the workflow execution.</p>
    ///   - [`details(impl Into<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::details) / [`set_details(Option<String>)`](crate::client::fluent_builders::TerminateWorkflowExecution::set_details): <p> Details for terminating the workflow execution.</p>
    ///   - [`child_policy(ChildPolicy)`](crate::client::fluent_builders::TerminateWorkflowExecution::child_policy) / [`set_child_policy(Option<ChildPolicy>)`](crate::client::fluent_builders::TerminateWorkflowExecution::set_child_policy): <p>If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution.</p>  <p>The supported child policies are:</p>  <ul>   <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>   <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>   <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>  </ul> <note>   <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p>  </note>
    /// - On success, responds with [`TerminateWorkflowExecutionOutput`](crate::output::TerminateWorkflowExecutionOutput)

    /// - On failure, responds with [`SdkError<TerminateWorkflowExecutionError>`](crate::error::TerminateWorkflowExecutionError)
    pub fn terminate_workflow_execution(
        &self,
    ) -> crate::client::fluent_builders::TerminateWorkflowExecution {
        crate::client::fluent_builders::TerminateWorkflowExecution::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UndeprecateActivityType`](crate::client::fluent_builders::UndeprecateActivityType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::UndeprecateActivityType::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::UndeprecateActivityType::set_domain): <p>The name of the domain of the deprecated activity type.</p>
    ///   - [`activity_type(ActivityType)`](crate::client::fluent_builders::UndeprecateActivityType::activity_type) / [`set_activity_type(Option<ActivityType>)`](crate::client::fluent_builders::UndeprecateActivityType::set_activity_type): <p>The activity type to undeprecate.</p>
    /// - On success, responds with [`UndeprecateActivityTypeOutput`](crate::output::UndeprecateActivityTypeOutput)

    /// - On failure, responds with [`SdkError<UndeprecateActivityTypeError>`](crate::error::UndeprecateActivityTypeError)
    pub fn undeprecate_activity_type(
        &self,
    ) -> crate::client::fluent_builders::UndeprecateActivityType {
        crate::client::fluent_builders::UndeprecateActivityType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UndeprecateDomain`](crate::client::fluent_builders::UndeprecateDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UndeprecateDomain::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UndeprecateDomain::set_name): <p>The name of the domain of the deprecated workflow type.</p>
    /// - On success, responds with [`UndeprecateDomainOutput`](crate::output::UndeprecateDomainOutput)

    /// - On failure, responds with [`SdkError<UndeprecateDomainError>`](crate::error::UndeprecateDomainError)
    pub fn undeprecate_domain(&self) -> crate::client::fluent_builders::UndeprecateDomain {
        crate::client::fluent_builders::UndeprecateDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UndeprecateWorkflowType`](crate::client::fluent_builders::UndeprecateWorkflowType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::UndeprecateWorkflowType::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::UndeprecateWorkflowType::set_domain): <p>The name of the domain of the deprecated workflow type.</p>
    ///   - [`workflow_type(WorkflowType)`](crate::client::fluent_builders::UndeprecateWorkflowType::workflow_type) / [`set_workflow_type(Option<WorkflowType>)`](crate::client::fluent_builders::UndeprecateWorkflowType::set_workflow_type): <p>The name of the domain of the deprecated workflow type.</p>
    /// - On success, responds with [`UndeprecateWorkflowTypeOutput`](crate::output::UndeprecateWorkflowTypeOutput)

    /// - On failure, responds with [`SdkError<UndeprecateWorkflowTypeError>`](crate::error::UndeprecateWorkflowTypeError)
    pub fn undeprecate_workflow_type(
        &self,
    ) -> crate::client::fluent_builders::UndeprecateWorkflowType {
        crate::client::fluent_builders::UndeprecateWorkflowType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) for the Amazon SWF domain.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The list of tags to remove from the Amazon SWF domain.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
