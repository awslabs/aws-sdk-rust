// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_closed_workflow_executions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountClosedWorkflowExecutionsOutput,
    crate::error::CountClosedWorkflowExecutionsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CountClosedWorkflowExecutionsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CountClosedWorkflowExecutionsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::CountClosedWorkflowExecutionsError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CountClosedWorkflowExecutionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::CountClosedWorkflowExecutionsError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CountClosedWorkflowExecutionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::CountClosedWorkflowExecutionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_closed_workflow_executions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountClosedWorkflowExecutionsOutput,
    crate::error::CountClosedWorkflowExecutionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::count_closed_workflow_executions_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_count_closed_workflow_executions(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::CountClosedWorkflowExecutionsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_open_workflow_executions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountOpenWorkflowExecutionsOutput,
    crate::error::CountOpenWorkflowExecutionsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CountOpenWorkflowExecutionsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CountOpenWorkflowExecutionsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::CountOpenWorkflowExecutionsError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CountOpenWorkflowExecutionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::CountOpenWorkflowExecutionsError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CountOpenWorkflowExecutionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::CountOpenWorkflowExecutionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_open_workflow_executions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountOpenWorkflowExecutionsOutput,
    crate::error::CountOpenWorkflowExecutionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::count_open_workflow_executions_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_count_open_workflow_executions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CountOpenWorkflowExecutionsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_pending_activity_tasks_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountPendingActivityTasksOutput,
    crate::error::CountPendingActivityTasksError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CountPendingActivityTasksError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CountPendingActivityTasksError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::CountPendingActivityTasksError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CountPendingActivityTasksError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::CountPendingActivityTasksError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CountPendingActivityTasksError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::CountPendingActivityTasksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_pending_activity_tasks_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountPendingActivityTasksOutput,
    crate::error::CountPendingActivityTasksError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::count_pending_activity_tasks_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_count_pending_activity_tasks(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CountPendingActivityTasksError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_pending_decision_tasks_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountPendingDecisionTasksOutput,
    crate::error::CountPendingDecisionTasksError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::CountPendingDecisionTasksError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CountPendingDecisionTasksError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::CountPendingDecisionTasksError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CountPendingDecisionTasksError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::CountPendingDecisionTasksError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::CountPendingDecisionTasksError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::CountPendingDecisionTasksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_pending_decision_tasks_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountPendingDecisionTasksOutput,
    crate::error::CountPendingDecisionTasksError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::count_pending_decision_tasks_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_count_pending_decision_tasks(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CountPendingDecisionTasksError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_activity_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeprecateActivityTypeOutput,
    crate::error::DeprecateActivityTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeprecateActivityTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeprecateActivityTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DeprecateActivityTypeError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeprecateActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TypeDeprecatedFault" => {
            crate::error::DeprecateActivityTypeError::TypeDeprecatedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_deprecated_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_type_deprecated_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeprecateActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::DeprecateActivityTypeError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeprecateActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DeprecateActivityTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_activity_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeprecateActivityTypeOutput,
    crate::error::DeprecateActivityTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::deprecate_activity_type_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeprecateDomainOutput, crate::error::DeprecateDomainError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeprecateDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeprecateDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainDeprecatedFault" => crate::error::DeprecateDomainError::DomainDeprecatedFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::domain_deprecated_fault::Builder::default();
                let _ = response;
                output = crate::json_deser::deser_structure_crate_error_domain_deprecated_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeprecateDomainError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OperationNotPermittedFault" => {
            crate::error::DeprecateDomainError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeprecateDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::DeprecateDomainError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeprecateDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DeprecateDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeprecateDomainOutput, crate::error::DeprecateDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::deprecate_domain_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_workflow_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeprecateWorkflowTypeOutput,
    crate::error::DeprecateWorkflowTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DeprecateWorkflowTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeprecateWorkflowTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DeprecateWorkflowTypeError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeprecateWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TypeDeprecatedFault" => {
            crate::error::DeprecateWorkflowTypeError::TypeDeprecatedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_deprecated_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_type_deprecated_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeprecateWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::DeprecateWorkflowTypeError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DeprecateWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DeprecateWorkflowTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_workflow_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeprecateWorkflowTypeOutput,
    crate::error::DeprecateWorkflowTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::deprecate_workflow_type_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_activity_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeActivityTypeOutput,
    crate::error::DescribeActivityTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DescribeActivityTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeActivityTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DescribeActivityTypeError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::DescribeActivityTypeError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DescribeActivityTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_activity_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeActivityTypeOutput,
    crate::error::DescribeActivityTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_activity_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_activity_type(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeActivityTypeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeDomainOutput, crate::error::DescribeDomainError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DescribeDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DescribeDomainError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::DescribeDomainError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DescribeDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeDomainOutput, crate::error::DescribeDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_domain_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_domain(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeDomainError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeWorkflowExecutionOutput,
    crate::error::DescribeWorkflowExecutionError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DescribeWorkflowExecutionError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeWorkflowExecutionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DescribeWorkflowExecutionError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::DescribeWorkflowExecutionError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DescribeWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeWorkflowExecutionOutput,
    crate::error::DescribeWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_workflow_execution_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_workflow_execution(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeWorkflowExecutionError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_workflow_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeWorkflowTypeOutput,
    crate::error::DescribeWorkflowTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::DescribeWorkflowTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeWorkflowTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DescribeWorkflowTypeError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::DescribeWorkflowTypeError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::DescribeWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DescribeWorkflowTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_workflow_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeWorkflowTypeOutput,
    crate::error::DescribeWorkflowTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_workflow_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_workflow_type(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeWorkflowTypeError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_workflow_execution_history_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetWorkflowExecutionHistoryOutput,
    crate::error::GetWorkflowExecutionHistoryError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::GetWorkflowExecutionHistoryError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetWorkflowExecutionHistoryError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::GetWorkflowExecutionHistoryError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::GetWorkflowExecutionHistoryError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::GetWorkflowExecutionHistoryError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::GetWorkflowExecutionHistoryError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::GetWorkflowExecutionHistoryError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_workflow_execution_history_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetWorkflowExecutionHistoryOutput,
    crate::error::GetWorkflowExecutionHistoryError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_workflow_execution_history_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_get_workflow_execution_history(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetWorkflowExecutionHistoryError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_activity_types_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListActivityTypesOutput, crate::error::ListActivityTypesError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListActivityTypesError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListActivityTypesError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::ListActivityTypesError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListActivityTypesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::ListActivityTypesError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListActivityTypesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListActivityTypesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_activity_types_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListActivityTypesOutput, crate::error::ListActivityTypesError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_activity_types_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_activity_types(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListActivityTypesError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_closed_workflow_executions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListClosedWorkflowExecutionsOutput,
    crate::error::ListClosedWorkflowExecutionsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListClosedWorkflowExecutionsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListClosedWorkflowExecutionsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::ListClosedWorkflowExecutionsError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListClosedWorkflowExecutionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::ListClosedWorkflowExecutionsError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListClosedWorkflowExecutionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListClosedWorkflowExecutionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_closed_workflow_executions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListClosedWorkflowExecutionsOutput,
    crate::error::ListClosedWorkflowExecutionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_closed_workflow_executions_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_list_closed_workflow_executions(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::ListClosedWorkflowExecutionsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_domains_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListDomainsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListDomainsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::ListDomainsError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListDomainsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListDomainsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_domains_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_domains_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_domains(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListDomainsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_open_workflow_executions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListOpenWorkflowExecutionsOutput,
    crate::error::ListOpenWorkflowExecutionsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListOpenWorkflowExecutionsError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListOpenWorkflowExecutionsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::ListOpenWorkflowExecutionsError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListOpenWorkflowExecutionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::ListOpenWorkflowExecutionsError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListOpenWorkflowExecutionsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListOpenWorkflowExecutionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_open_workflow_executions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListOpenWorkflowExecutionsOutput,
    crate::error::ListOpenWorkflowExecutionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_open_workflow_executions_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_open_workflow_executions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListOpenWorkflowExecutionsError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => {
            crate::error::ListTagsForResourceError::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_limit_exceeded_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::ListTagsForResourceError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::ListTagsForResourceError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_tags_for_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_workflow_types_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListWorkflowTypesOutput, crate::error::ListWorkflowTypesError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::ListWorkflowTypesError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListWorkflowTypesError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::ListWorkflowTypesError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListWorkflowTypesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::ListWorkflowTypesError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::ListWorkflowTypesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::ListWorkflowTypesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_workflow_types_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListWorkflowTypesOutput, crate::error::ListWorkflowTypesError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_workflow_types_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_list_workflow_types(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListWorkflowTypesError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_poll_for_activity_task_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PollForActivityTaskOutput,
    crate::error::PollForActivityTaskError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::PollForActivityTaskError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PollForActivityTaskError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => {
            crate::error::PollForActivityTaskError::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_limit_exceeded_fault_json_err(response.body().as_ref(), output).map_err(crate::error::PollForActivityTaskError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::PollForActivityTaskError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::PollForActivityTaskError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::PollForActivityTaskError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::PollForActivityTaskError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::PollForActivityTaskError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_poll_for_activity_task_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PollForActivityTaskOutput,
    crate::error::PollForActivityTaskError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::poll_for_activity_task_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_poll_for_activity_task(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::PollForActivityTaskError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_poll_for_decision_task_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PollForDecisionTaskOutput,
    crate::error::PollForDecisionTaskError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::PollForDecisionTaskError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PollForDecisionTaskError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => {
            crate::error::PollForDecisionTaskError::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_limit_exceeded_fault_json_err(response.body().as_ref(), output).map_err(crate::error::PollForDecisionTaskError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::PollForDecisionTaskError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::PollForDecisionTaskError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::PollForDecisionTaskError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::PollForDecisionTaskError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::PollForDecisionTaskError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_poll_for_decision_task_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PollForDecisionTaskOutput,
    crate::error::PollForDecisionTaskError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::poll_for_decision_task_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_poll_for_decision_task(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::PollForDecisionTaskError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_record_activity_task_heartbeat_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RecordActivityTaskHeartbeatOutput,
    crate::error::RecordActivityTaskHeartbeatError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RecordActivityTaskHeartbeatError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RecordActivityTaskHeartbeatError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::RecordActivityTaskHeartbeatError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RecordActivityTaskHeartbeatError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::RecordActivityTaskHeartbeatError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RecordActivityTaskHeartbeatError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RecordActivityTaskHeartbeatError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_record_activity_task_heartbeat_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RecordActivityTaskHeartbeatOutput,
    crate::error::RecordActivityTaskHeartbeatError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::record_activity_task_heartbeat_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_record_activity_task_heartbeat(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RecordActivityTaskHeartbeatError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_activity_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RegisterActivityTypeOutput,
    crate::error::RegisterActivityTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RegisterActivityTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RegisterActivityTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => {
            crate::error::RegisterActivityTypeError::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_limit_exceeded_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::RegisterActivityTypeError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TypeAlreadyExistsFault" => {
            crate::error::RegisterActivityTypeError::TypeAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_type_already_exists_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::RegisterActivityTypeError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RegisterActivityTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_activity_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RegisterActivityTypeOutput,
    crate::error::RegisterActivityTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::register_activity_type_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterDomainOutput, crate::error::RegisterDomainError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RegisterDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RegisterDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainAlreadyExistsFault" => {
            crate::error::RegisterDomainError::DomainAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_domain_already_exists_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "LimitExceededFault" => {
            crate::error::RegisterDomainError::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_limit_exceeded_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::RegisterDomainError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TooManyTagsFault" => {
            crate::error::RegisterDomainError::TooManyTagsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_tags_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_too_many_tags_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RegisterDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterDomainOutput, crate::error::RegisterDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::register_domain_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_workflow_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RegisterWorkflowTypeOutput,
    crate::error::RegisterWorkflowTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RegisterWorkflowTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => {
            crate::error::RegisterWorkflowTypeError::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_limit_exceeded_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::RegisterWorkflowTypeError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TypeAlreadyExistsFault" => {
            crate::error::RegisterWorkflowTypeError::TypeAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_type_already_exists_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::RegisterWorkflowTypeError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RegisterWorkflowTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_workflow_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RegisterWorkflowTypeOutput,
    crate::error::RegisterWorkflowTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::register_workflow_type_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_request_cancel_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RequestCancelWorkflowExecutionOutput,
    crate::error::RequestCancelWorkflowExecutionError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RequestCancelWorkflowExecutionError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RequestCancelWorkflowExecutionError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::RequestCancelWorkflowExecutionError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RequestCancelWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::RequestCancelWorkflowExecutionError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RequestCancelWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RequestCancelWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_request_cancel_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RequestCancelWorkflowExecutionOutput,
    crate::error::RequestCancelWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::request_cancel_workflow_execution_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_canceled_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskCanceledOutput,
    crate::error::RespondActivityTaskCanceledError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RespondActivityTaskCanceledError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RespondActivityTaskCanceledError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::RespondActivityTaskCanceledError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RespondActivityTaskCanceledError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::RespondActivityTaskCanceledError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RespondActivityTaskCanceledError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RespondActivityTaskCanceledError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_canceled_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskCanceledOutput,
    crate::error::RespondActivityTaskCanceledError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::respond_activity_task_canceled_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_completed_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskCompletedOutput,
    crate::error::RespondActivityTaskCompletedError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RespondActivityTaskCompletedError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RespondActivityTaskCompletedError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::RespondActivityTaskCompletedError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RespondActivityTaskCompletedError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::RespondActivityTaskCompletedError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RespondActivityTaskCompletedError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RespondActivityTaskCompletedError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_completed_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskCompletedOutput,
    crate::error::RespondActivityTaskCompletedError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::respond_activity_task_completed_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_failed_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskFailedOutput,
    crate::error::RespondActivityTaskFailedError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RespondActivityTaskFailedError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RespondActivityTaskFailedError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::RespondActivityTaskFailedError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RespondActivityTaskFailedError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::RespondActivityTaskFailedError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RespondActivityTaskFailedError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RespondActivityTaskFailedError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_failed_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskFailedOutput,
    crate::error::RespondActivityTaskFailedError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::respond_activity_task_failed_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_decision_task_completed_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondDecisionTaskCompletedOutput,
    crate::error::RespondDecisionTaskCompletedError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::RespondDecisionTaskCompletedError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RespondDecisionTaskCompletedError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::RespondDecisionTaskCompletedError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RespondDecisionTaskCompletedError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::RespondDecisionTaskCompletedError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::RespondDecisionTaskCompletedError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::RespondDecisionTaskCompletedError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_decision_task_completed_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondDecisionTaskCompletedOutput,
    crate::error::RespondDecisionTaskCompletedError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::respond_decision_task_completed_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_signal_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SignalWorkflowExecutionOutput,
    crate::error::SignalWorkflowExecutionError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::SignalWorkflowExecutionError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::SignalWorkflowExecutionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::SignalWorkflowExecutionError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::SignalWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::SignalWorkflowExecutionError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::SignalWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::SignalWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_signal_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SignalWorkflowExecutionOutput,
    crate::error::SignalWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::signal_workflow_execution_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartWorkflowExecutionOutput,
    crate::error::StartWorkflowExecutionError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::StartWorkflowExecutionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DefaultUndefinedFault" => {
            crate::error::StartWorkflowExecutionError::DefaultUndefinedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::default_undefined_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_default_undefined_fault_json_err(response.body().as_ref(), output).map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "LimitExceededFault" => {
            crate::error::StartWorkflowExecutionError::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_limit_exceeded_fault_json_err(response.body().as_ref(), output).map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::StartWorkflowExecutionError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TypeDeprecatedFault" => {
            crate::error::StartWorkflowExecutionError::TypeDeprecatedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_deprecated_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_type_deprecated_fault_json_err(response.body().as_ref(), output).map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::StartWorkflowExecutionError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "WorkflowExecutionAlreadyStartedFault" => {
            crate::error::StartWorkflowExecutionError::WorkflowExecutionAlreadyStartedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::workflow_execution_already_started_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_workflow_execution_already_started_fault_json_err(response.body().as_ref(), output).map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::StartWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartWorkflowExecutionOutput,
    crate::error::StartWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_workflow_execution_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_start_workflow_execution(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::TagResourceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => {
            crate::error::TagResourceError::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_limit_exceeded_fault_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::TagResourceError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TooManyTagsFault" => {
            crate::error::TagResourceError::TooManyTagsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_tags_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_too_many_tags_fault_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::TagResourceError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::TagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::tag_resource_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_terminate_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TerminateWorkflowExecutionOutput,
    crate::error::TerminateWorkflowExecutionError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::TerminateWorkflowExecutionError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::TerminateWorkflowExecutionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::TerminateWorkflowExecutionError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::TerminateWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::TerminateWorkflowExecutionError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::TerminateWorkflowExecutionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::TerminateWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_terminate_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TerminateWorkflowExecutionOutput,
    crate::error::TerminateWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::terminate_workflow_execution_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_activity_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UndeprecateActivityTypeOutput,
    crate::error::UndeprecateActivityTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UndeprecateActivityTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UndeprecateActivityTypeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::UndeprecateActivityTypeError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TypeAlreadyExistsFault" => {
            crate::error::UndeprecateActivityTypeError::TypeAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_type_already_exists_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::UndeprecateActivityTypeError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateActivityTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::UndeprecateActivityTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_activity_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UndeprecateActivityTypeOutput,
    crate::error::UndeprecateActivityTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::undeprecate_activity_type_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UndeprecateDomainOutput, crate::error::UndeprecateDomainError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UndeprecateDomainError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UndeprecateDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainAlreadyExistsFault" => {
            crate::error::UndeprecateDomainError::DomainAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_domain_already_exists_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::UndeprecateDomainError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::UndeprecateDomainError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateDomainError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::UndeprecateDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UndeprecateDomainOutput, crate::error::UndeprecateDomainError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::undeprecate_domain_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_workflow_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UndeprecateWorkflowTypeOutput,
    crate::error::UndeprecateWorkflowTypeError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UndeprecateWorkflowTypeError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UndeprecateWorkflowTypeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::UndeprecateWorkflowTypeError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TypeAlreadyExistsFault" => {
            crate::error::UndeprecateWorkflowTypeError::TypeAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_type_already_exists_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::UndeprecateWorkflowTypeError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateWorkflowTypeError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::UndeprecateWorkflowTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_workflow_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UndeprecateWorkflowTypeOutput,
    crate::error::UndeprecateWorkflowTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::undeprecate_workflow_type_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::json_deser::parse_http_error_metadata(response)
        .map_err(crate::error::UntagResourceError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UntagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => {
            crate::error::UntagResourceError::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_limit_exceeded_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedFault" => {
            crate::error::UntagResourceError::OperationNotPermittedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::operation_not_permitted_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_operation_not_permitted_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceFault" => {
            crate::error::UntagResourceError::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_unknown_resource_fault_json_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::UntagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::untag_resource_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
