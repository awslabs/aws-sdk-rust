// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_closed_workflow_executions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountClosedWorkflowExecutionsOutput,
    crate::error::CountClosedWorkflowExecutionsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CountClosedWorkflowExecutionsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CountClosedWorkflowExecutionsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => crate::error::CountClosedWorkflowExecutionsError {
            meta: generic,
            kind: crate::error::CountClosedWorkflowExecutionsErrorKind::OperationNotPermittedFault(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::CountClosedWorkflowExecutionsError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "UnknownResourceFault" => crate::error::CountClosedWorkflowExecutionsError {
            meta: generic,
            kind: crate::error::CountClosedWorkflowExecutionsErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CountClosedWorkflowExecutionsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CountClosedWorkflowExecutionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_closed_workflow_executions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountClosedWorkflowExecutionsOutput,
    crate::error::CountClosedWorkflowExecutionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::count_closed_workflow_executions_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_count_closed_workflow_executions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CountClosedWorkflowExecutionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_open_workflow_executions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountOpenWorkflowExecutionsOutput,
    crate::error::CountOpenWorkflowExecutionsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CountOpenWorkflowExecutionsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CountOpenWorkflowExecutionsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::CountOpenWorkflowExecutionsError {
                meta: generic,
                kind:
                    crate::error::CountOpenWorkflowExecutionsErrorKind::OperationNotPermittedFault(
                        {
                            #[allow(unused_mut)]
                            let mut tmp = {
                                #[allow(unused_mut)]
                                let mut output =
                                    crate::error::operation_not_permitted_fault::Builder::default();
                                let _ = response;
                                output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::CountOpenWorkflowExecutionsError::unhandled)?;
                                output.build()
                            };
                            if (&tmp.message).is_none() {
                                tmp.message = _error_message;
                            }
                            tmp
                        },
                    ),
            }
        }
        "UnknownResourceFault" => crate::error::CountOpenWorkflowExecutionsError {
            meta: generic,
            kind: crate::error::CountOpenWorkflowExecutionsErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CountOpenWorkflowExecutionsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CountOpenWorkflowExecutionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_open_workflow_executions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountOpenWorkflowExecutionsOutput,
    crate::error::CountOpenWorkflowExecutionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::count_open_workflow_executions_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_count_open_workflow_executions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CountOpenWorkflowExecutionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_pending_activity_tasks_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountPendingActivityTasksOutput,
    crate::error::CountPendingActivityTasksError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CountPendingActivityTasksError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CountPendingActivityTasksError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::CountPendingActivityTasksError {
                meta: generic,
                kind: crate::error::CountPendingActivityTasksErrorKind::OperationNotPermittedFault(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::operation_not_permitted_fault::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::CountPendingActivityTasksError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
            }
        }
        "UnknownResourceFault" => crate::error::CountPendingActivityTasksError {
            meta: generic,
            kind: crate::error::CountPendingActivityTasksErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CountPendingActivityTasksError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CountPendingActivityTasksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_pending_activity_tasks_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountPendingActivityTasksOutput,
    crate::error::CountPendingActivityTasksError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::count_pending_activity_tasks_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_count_pending_activity_tasks(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CountPendingActivityTasksError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_pending_decision_tasks_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountPendingDecisionTasksOutput,
    crate::error::CountPendingDecisionTasksError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CountPendingDecisionTasksError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CountPendingDecisionTasksError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::CountPendingDecisionTasksError {
                meta: generic,
                kind: crate::error::CountPendingDecisionTasksErrorKind::OperationNotPermittedFault(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::operation_not_permitted_fault::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::CountPendingDecisionTasksError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
            }
        }
        "UnknownResourceFault" => crate::error::CountPendingDecisionTasksError {
            meta: generic,
            kind: crate::error::CountPendingDecisionTasksErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CountPendingDecisionTasksError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CountPendingDecisionTasksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_count_pending_decision_tasks_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CountPendingDecisionTasksOutput,
    crate::error::CountPendingDecisionTasksError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::count_pending_decision_tasks_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_count_pending_decision_tasks(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CountPendingDecisionTasksError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_activity_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeprecateActivityTypeOutput,
    crate::error::DeprecateActivityTypeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeprecateActivityTypeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeprecateActivityTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DeprecateActivityTypeError {
                meta: generic,
                kind: crate::error::DeprecateActivityTypeErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::DeprecateActivityTypeError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "TypeDeprecatedFault" => crate::error::DeprecateActivityTypeError {
            meta: generic,
            kind: crate::error::DeprecateActivityTypeErrorKind::TypeDeprecatedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_deprecated_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_type_deprecated_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeprecateActivityTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnknownResourceFault" => crate::error::DeprecateActivityTypeError {
            meta: generic,
            kind: crate::error::DeprecateActivityTypeErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeprecateActivityTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeprecateActivityTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_activity_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeprecateActivityTypeOutput,
    crate::error::DeprecateActivityTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::deprecate_activity_type_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeprecateDomainOutput, crate::error::DeprecateDomainError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeprecateDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeprecateDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainDeprecatedFault" => crate::error::DeprecateDomainError {
            meta: generic,
            kind: crate::error::DeprecateDomainErrorKind::DomainDeprecatedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_deprecated_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_domain_deprecated_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeprecateDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::DeprecateDomainError {
                meta: generic,
                kind: crate::error::DeprecateDomainErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::DeprecateDomainError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::DeprecateDomainError {
            meta: generic,
            kind: crate::error::DeprecateDomainErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeprecateDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeprecateDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeprecateDomainOutput, crate::error::DeprecateDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::deprecate_domain_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_workflow_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeprecateWorkflowTypeOutput,
    crate::error::DeprecateWorkflowTypeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeprecateWorkflowTypeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeprecateWorkflowTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DeprecateWorkflowTypeError {
                meta: generic,
                kind: crate::error::DeprecateWorkflowTypeErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::DeprecateWorkflowTypeError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "TypeDeprecatedFault" => crate::error::DeprecateWorkflowTypeError {
            meta: generic,
            kind: crate::error::DeprecateWorkflowTypeErrorKind::TypeDeprecatedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_deprecated_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_type_deprecated_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeprecateWorkflowTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnknownResourceFault" => crate::error::DeprecateWorkflowTypeError {
            meta: generic,
            kind: crate::error::DeprecateWorkflowTypeErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeprecateWorkflowTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeprecateWorkflowTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_deprecate_workflow_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeprecateWorkflowTypeOutput,
    crate::error::DeprecateWorkflowTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::deprecate_workflow_type_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_activity_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeActivityTypeOutput,
    crate::error::DescribeActivityTypeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeActivityTypeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeActivityTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DescribeActivityTypeError {
                meta: generic,
                kind: crate::error::DescribeActivityTypeErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeActivityTypeError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::DescribeActivityTypeError {
            meta: generic,
            kind: crate::error::DescribeActivityTypeErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DescribeActivityTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeActivityTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_activity_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeActivityTypeOutput,
    crate::error::DescribeActivityTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_activity_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_describe_activity_type(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeActivityTypeError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeDomainOutput, crate::error::DescribeDomainError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DescribeDomainError {
                meta: generic,
                kind: crate::error::DescribeDomainErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeDomainError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::DescribeDomainError {
            meta: generic,
            kind: crate::error::DescribeDomainErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DescribeDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeDomainOutput, crate::error::DescribeDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_domain_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_describe_domain(response.body().as_ref(), output)
                .map_err(crate::error::DescribeDomainError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeWorkflowExecutionOutput,
    crate::error::DescribeWorkflowExecutionError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeWorkflowExecutionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeWorkflowExecutionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DescribeWorkflowExecutionError {
                meta: generic,
                kind: crate::error::DescribeWorkflowExecutionErrorKind::OperationNotPermittedFault(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::operation_not_permitted_fault::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeWorkflowExecutionError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
            }
        }
        "UnknownResourceFault" => crate::error::DescribeWorkflowExecutionError {
            meta: generic,
            kind: crate::error::DescribeWorkflowExecutionErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DescribeWorkflowExecutionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeWorkflowExecutionOutput,
    crate::error::DescribeWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_workflow_execution_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_describe_workflow_execution(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeWorkflowExecutionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_workflow_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeWorkflowTypeOutput,
    crate::error::DescribeWorkflowTypeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeWorkflowTypeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeWorkflowTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::DescribeWorkflowTypeError {
                meta: generic,
                kind: crate::error::DescribeWorkflowTypeErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeWorkflowTypeError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::DescribeWorkflowTypeError {
            meta: generic,
            kind: crate::error::DescribeWorkflowTypeErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DescribeWorkflowTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeWorkflowTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_workflow_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeWorkflowTypeOutput,
    crate::error::DescribeWorkflowTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_workflow_type_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_describe_workflow_type(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeWorkflowTypeError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_workflow_execution_history_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetWorkflowExecutionHistoryOutput,
    crate::error::GetWorkflowExecutionHistoryError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetWorkflowExecutionHistoryError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::GetWorkflowExecutionHistoryError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::GetWorkflowExecutionHistoryError {
                meta: generic,
                kind:
                    crate::error::GetWorkflowExecutionHistoryErrorKind::OperationNotPermittedFault(
                        {
                            #[allow(unused_mut)]
                            let mut tmp = {
                                #[allow(unused_mut)]
                                let mut output =
                                    crate::error::operation_not_permitted_fault::Builder::default();
                                let _ = response;
                                output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::GetWorkflowExecutionHistoryError::unhandled)?;
                                output.build()
                            };
                            if (&tmp.message).is_none() {
                                tmp.message = _error_message;
                            }
                            tmp
                        },
                    ),
            }
        }
        "UnknownResourceFault" => crate::error::GetWorkflowExecutionHistoryError {
            meta: generic,
            kind: crate::error::GetWorkflowExecutionHistoryErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetWorkflowExecutionHistoryError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetWorkflowExecutionHistoryError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_workflow_execution_history_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetWorkflowExecutionHistoryOutput,
    crate::error::GetWorkflowExecutionHistoryError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_workflow_execution_history_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_get_workflow_execution_history(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetWorkflowExecutionHistoryError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_activity_types_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListActivityTypesOutput, crate::error::ListActivityTypesError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListActivityTypesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListActivityTypesError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::ListActivityTypesError {
                meta: generic,
                kind: crate::error::ListActivityTypesErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::ListActivityTypesError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::ListActivityTypesError {
            meta: generic,
            kind: crate::error::ListActivityTypesErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListActivityTypesError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListActivityTypesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_activity_types_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListActivityTypesOutput, crate::error::ListActivityTypesError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_activity_types_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_activity_types(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListActivityTypesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_closed_workflow_executions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListClosedWorkflowExecutionsOutput,
    crate::error::ListClosedWorkflowExecutionsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListClosedWorkflowExecutionsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListClosedWorkflowExecutionsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => crate::error::ListClosedWorkflowExecutionsError {
            meta: generic,
            kind: crate::error::ListClosedWorkflowExecutionsErrorKind::OperationNotPermittedFault(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::ListClosedWorkflowExecutionsError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "UnknownResourceFault" => crate::error::ListClosedWorkflowExecutionsError {
            meta: generic,
            kind: crate::error::ListClosedWorkflowExecutionsErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListClosedWorkflowExecutionsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListClosedWorkflowExecutionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_closed_workflow_executions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListClosedWorkflowExecutionsOutput,
    crate::error::ListClosedWorkflowExecutionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_closed_workflow_executions_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_closed_workflow_executions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListClosedWorkflowExecutionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_domains_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListDomainsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListDomainsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::ListDomainsError {
                meta: generic,
                kind: crate::error::ListDomainsErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::ListDomainsError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        _ => crate::error::ListDomainsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_domains_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListDomainsOutput, crate::error::ListDomainsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_domains_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_domains(response.body().as_ref(), output)
            .map_err(crate::error::ListDomainsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_open_workflow_executions_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListOpenWorkflowExecutionsOutput,
    crate::error::ListOpenWorkflowExecutionsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListOpenWorkflowExecutionsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListOpenWorkflowExecutionsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::ListOpenWorkflowExecutionsError {
                meta: generic,
                kind: crate::error::ListOpenWorkflowExecutionsErrorKind::OperationNotPermittedFault(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::operation_not_permitted_fault::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::ListOpenWorkflowExecutionsError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
            }
        }
        "UnknownResourceFault" => crate::error::ListOpenWorkflowExecutionsError {
            meta: generic,
            kind: crate::error::ListOpenWorkflowExecutionsErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListOpenWorkflowExecutionsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListOpenWorkflowExecutionsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_open_workflow_executions_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListOpenWorkflowExecutionsOutput,
    crate::error::ListOpenWorkflowExecutionsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_open_workflow_executions_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_open_workflow_executions(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListOpenWorkflowExecutionsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_limit_exceeded_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::ListTagsForResourceError {
                meta: generic,
                kind: crate::error::ListTagsForResourceErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_tags_for_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_workflow_types_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListWorkflowTypesOutput, crate::error::ListWorkflowTypesError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListWorkflowTypesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListWorkflowTypesError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::ListWorkflowTypesError {
                meta: generic,
                kind: crate::error::ListWorkflowTypesErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::ListWorkflowTypesError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::ListWorkflowTypesError {
            meta: generic,
            kind: crate::error::ListWorkflowTypesErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListWorkflowTypesError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListWorkflowTypesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_workflow_types_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListWorkflowTypesOutput, crate::error::ListWorkflowTypesError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_workflow_types_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_workflow_types(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListWorkflowTypesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_poll_for_activity_task_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PollForActivityTaskOutput,
    crate::error::PollForActivityTaskError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::PollForActivityTaskError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PollForActivityTaskError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => crate::error::PollForActivityTaskError {
            meta: generic,
            kind: crate::error::PollForActivityTaskErrorKind::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_limit_exceeded_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::PollForActivityTaskError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::PollForActivityTaskError {
                meta: generic,
                kind: crate::error::PollForActivityTaskErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::PollForActivityTaskError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::PollForActivityTaskError {
            meta: generic,
            kind: crate::error::PollForActivityTaskErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::PollForActivityTaskError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::PollForActivityTaskError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_poll_for_activity_task_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PollForActivityTaskOutput,
    crate::error::PollForActivityTaskError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::poll_for_activity_task_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_poll_for_activity_task(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::PollForActivityTaskError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_poll_for_decision_task_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PollForDecisionTaskOutput,
    crate::error::PollForDecisionTaskError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::PollForDecisionTaskError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PollForDecisionTaskError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => crate::error::PollForDecisionTaskError {
            meta: generic,
            kind: crate::error::PollForDecisionTaskErrorKind::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_limit_exceeded_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::PollForDecisionTaskError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::PollForDecisionTaskError {
                meta: generic,
                kind: crate::error::PollForDecisionTaskErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::PollForDecisionTaskError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::PollForDecisionTaskError {
            meta: generic,
            kind: crate::error::PollForDecisionTaskErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::PollForDecisionTaskError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::PollForDecisionTaskError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_poll_for_decision_task_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PollForDecisionTaskOutput,
    crate::error::PollForDecisionTaskError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::poll_for_decision_task_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_poll_for_decision_task(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::PollForDecisionTaskError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_record_activity_task_heartbeat_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RecordActivityTaskHeartbeatOutput,
    crate::error::RecordActivityTaskHeartbeatError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RecordActivityTaskHeartbeatError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RecordActivityTaskHeartbeatError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::RecordActivityTaskHeartbeatError {
                meta: generic,
                kind:
                    crate::error::RecordActivityTaskHeartbeatErrorKind::OperationNotPermittedFault(
                        {
                            #[allow(unused_mut)]
                            let mut tmp = {
                                #[allow(unused_mut)]
                                let mut output =
                                    crate::error::operation_not_permitted_fault::Builder::default();
                                let _ = response;
                                output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::RecordActivityTaskHeartbeatError::unhandled)?;
                                output.build()
                            };
                            if (&tmp.message).is_none() {
                                tmp.message = _error_message;
                            }
                            tmp
                        },
                    ),
            }
        }
        "UnknownResourceFault" => crate::error::RecordActivityTaskHeartbeatError {
            meta: generic,
            kind: crate::error::RecordActivityTaskHeartbeatErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RecordActivityTaskHeartbeatError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RecordActivityTaskHeartbeatError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_record_activity_task_heartbeat_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RecordActivityTaskHeartbeatOutput,
    crate::error::RecordActivityTaskHeartbeatError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::record_activity_task_heartbeat_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_record_activity_task_heartbeat(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RecordActivityTaskHeartbeatError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_activity_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RegisterActivityTypeOutput,
    crate::error::RegisterActivityTypeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RegisterActivityTypeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RegisterActivityTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => crate::error::RegisterActivityTypeError {
            meta: generic,
            kind: crate::error::RegisterActivityTypeErrorKind::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_limit_exceeded_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterActivityTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::RegisterActivityTypeError {
                meta: generic,
                kind: crate::error::RegisterActivityTypeErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::RegisterActivityTypeError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "TypeAlreadyExistsFault" => crate::error::RegisterActivityTypeError {
            meta: generic,
            kind: crate::error::RegisterActivityTypeErrorKind::TypeAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_type_already_exists_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterActivityTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnknownResourceFault" => crate::error::RegisterActivityTypeError {
            meta: generic,
            kind: crate::error::RegisterActivityTypeErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterActivityTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RegisterActivityTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_activity_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RegisterActivityTypeOutput,
    crate::error::RegisterActivityTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::register_activity_type_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterDomainOutput, crate::error::RegisterDomainError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RegisterDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RegisterDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainAlreadyExistsFault" => crate::error::RegisterDomainError {
            meta: generic,
            kind: crate::error::RegisterDomainErrorKind::DomainAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_already_exists_fault::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_domain_already_exists_faultjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::RegisterDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "LimitExceededFault" => crate::error::RegisterDomainError {
            meta: generic,
            kind: crate::error::RegisterDomainErrorKind::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_limit_exceeded_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::RegisterDomainError {
                meta: generic,
                kind: crate::error::RegisterDomainErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::RegisterDomainError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "TooManyTagsFault" => crate::error::RegisterDomainError {
            meta: generic,
            kind: crate::error::RegisterDomainErrorKind::TooManyTagsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_tags_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_too_many_tags_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RegisterDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::RegisterDomainOutput, crate::error::RegisterDomainError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::register_domain_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_workflow_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RegisterWorkflowTypeOutput,
    crate::error::RegisterWorkflowTypeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RegisterWorkflowTypeError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => crate::error::RegisterWorkflowTypeError {
            meta: generic,
            kind: crate::error::RegisterWorkflowTypeErrorKind::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_limit_exceeded_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::RegisterWorkflowTypeError {
                meta: generic,
                kind: crate::error::RegisterWorkflowTypeErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "TypeAlreadyExistsFault" => crate::error::RegisterWorkflowTypeError {
            meta: generic,
            kind: crate::error::RegisterWorkflowTypeErrorKind::TypeAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_type_already_exists_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnknownResourceFault" => crate::error::RegisterWorkflowTypeError {
            meta: generic,
            kind: crate::error::RegisterWorkflowTypeErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RegisterWorkflowTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RegisterWorkflowTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_register_workflow_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RegisterWorkflowTypeOutput,
    crate::error::RegisterWorkflowTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::register_workflow_type_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_request_cancel_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RequestCancelWorkflowExecutionOutput,
    crate::error::RequestCancelWorkflowExecutionError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RequestCancelWorkflowExecutionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RequestCancelWorkflowExecutionError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => crate::error::RequestCancelWorkflowExecutionError {
            meta: generic,
            kind: crate::error::RequestCancelWorkflowExecutionErrorKind::OperationNotPermittedFault(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::RequestCancelWorkflowExecutionError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "UnknownResourceFault" => crate::error::RequestCancelWorkflowExecutionError {
            meta: generic,
            kind: crate::error::RequestCancelWorkflowExecutionErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RequestCancelWorkflowExecutionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RequestCancelWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_request_cancel_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RequestCancelWorkflowExecutionOutput,
    crate::error::RequestCancelWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::request_cancel_workflow_execution_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_canceled_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskCanceledOutput,
    crate::error::RespondActivityTaskCanceledError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RespondActivityTaskCanceledError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RespondActivityTaskCanceledError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::RespondActivityTaskCanceledError {
                meta: generic,
                kind:
                    crate::error::RespondActivityTaskCanceledErrorKind::OperationNotPermittedFault(
                        {
                            #[allow(unused_mut)]
                            let mut tmp = {
                                #[allow(unused_mut)]
                                let mut output =
                                    crate::error::operation_not_permitted_fault::Builder::default();
                                let _ = response;
                                output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::RespondActivityTaskCanceledError::unhandled)?;
                                output.build()
                            };
                            if (&tmp.message).is_none() {
                                tmp.message = _error_message;
                            }
                            tmp
                        },
                    ),
            }
        }
        "UnknownResourceFault" => crate::error::RespondActivityTaskCanceledError {
            meta: generic,
            kind: crate::error::RespondActivityTaskCanceledErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RespondActivityTaskCanceledError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RespondActivityTaskCanceledError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_canceled_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskCanceledOutput,
    crate::error::RespondActivityTaskCanceledError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::respond_activity_task_canceled_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_completed_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskCompletedOutput,
    crate::error::RespondActivityTaskCompletedError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RespondActivityTaskCompletedError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RespondActivityTaskCompletedError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => crate::error::RespondActivityTaskCompletedError {
            meta: generic,
            kind: crate::error::RespondActivityTaskCompletedErrorKind::OperationNotPermittedFault(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::RespondActivityTaskCompletedError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "UnknownResourceFault" => crate::error::RespondActivityTaskCompletedError {
            meta: generic,
            kind: crate::error::RespondActivityTaskCompletedErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RespondActivityTaskCompletedError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RespondActivityTaskCompletedError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_completed_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskCompletedOutput,
    crate::error::RespondActivityTaskCompletedError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::respond_activity_task_completed_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_failed_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskFailedOutput,
    crate::error::RespondActivityTaskFailedError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RespondActivityTaskFailedError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RespondActivityTaskFailedError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::RespondActivityTaskFailedError {
                meta: generic,
                kind: crate::error::RespondActivityTaskFailedErrorKind::OperationNotPermittedFault(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::operation_not_permitted_fault::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::RespondActivityTaskFailedError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
            }
        }
        "UnknownResourceFault" => crate::error::RespondActivityTaskFailedError {
            meta: generic,
            kind: crate::error::RespondActivityTaskFailedErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RespondActivityTaskFailedError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RespondActivityTaskFailedError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_activity_task_failed_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondActivityTaskFailedOutput,
    crate::error::RespondActivityTaskFailedError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::respond_activity_task_failed_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_decision_task_completed_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondDecisionTaskCompletedOutput,
    crate::error::RespondDecisionTaskCompletedError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RespondDecisionTaskCompletedError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RespondDecisionTaskCompletedError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => crate::error::RespondDecisionTaskCompletedError {
            meta: generic,
            kind: crate::error::RespondDecisionTaskCompletedErrorKind::OperationNotPermittedFault(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::RespondDecisionTaskCompletedError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        "UnknownResourceFault" => crate::error::RespondDecisionTaskCompletedError {
            meta: generic,
            kind: crate::error::RespondDecisionTaskCompletedErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RespondDecisionTaskCompletedError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RespondDecisionTaskCompletedError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_respond_decision_task_completed_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RespondDecisionTaskCompletedOutput,
    crate::error::RespondDecisionTaskCompletedError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::respond_decision_task_completed_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_signal_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SignalWorkflowExecutionOutput,
    crate::error::SignalWorkflowExecutionError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::SignalWorkflowExecutionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::SignalWorkflowExecutionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::SignalWorkflowExecutionError {
                meta: generic,
                kind: crate::error::SignalWorkflowExecutionErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::SignalWorkflowExecutionError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::SignalWorkflowExecutionError {
            meta: generic,
            kind: crate::error::SignalWorkflowExecutionErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::SignalWorkflowExecutionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::SignalWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_signal_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SignalWorkflowExecutionOutput,
    crate::error::SignalWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::signal_workflow_execution_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartWorkflowExecutionOutput,
    crate::error::StartWorkflowExecutionError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::StartWorkflowExecutionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DefaultUndefinedFault" => crate::error::StartWorkflowExecutionError {
            meta: generic,
            kind: crate::error::StartWorkflowExecutionErrorKind::DefaultUndefinedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::default_undefined_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_default_undefined_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "LimitExceededFault" => crate::error::StartWorkflowExecutionError {
            meta: generic,
            kind: crate::error::StartWorkflowExecutionErrorKind::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_limit_exceeded_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::StartWorkflowExecutionError {
                meta: generic,
                kind: crate::error::StartWorkflowExecutionErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "TypeDeprecatedFault" => crate::error::StartWorkflowExecutionError {
            meta: generic,
            kind: crate::error::StartWorkflowExecutionErrorKind::TypeDeprecatedFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_deprecated_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_type_deprecated_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnknownResourceFault" => crate::error::StartWorkflowExecutionError {
            meta: generic,
            kind: crate::error::StartWorkflowExecutionErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "WorkflowExecutionAlreadyStartedFault" => crate::error::StartWorkflowExecutionError {
            meta: generic,
            kind:
                crate::error::StartWorkflowExecutionErrorKind::WorkflowExecutionAlreadyStartedFault(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]let mut output = crate::error::workflow_execution_already_started_fault::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_workflow_execution_already_started_faultjson_err(response.body().as_ref(), output).map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
        },
        _ => crate::error::StartWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartWorkflowExecutionOutput,
    crate::error::StartWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_workflow_execution_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_start_workflow_execution(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::StartWorkflowExecutionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::TagResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_limit_exceeded_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TagResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::TagResourceError {
                meta: generic,
                kind: crate::error::TagResourceErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::TagResourceError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "TooManyTagsFault" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::TooManyTagsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::too_many_tags_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_too_many_tags_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TagResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnknownResourceFault" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TagResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::TagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::tag_resource_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_terminate_workflow_execution_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TerminateWorkflowExecutionOutput,
    crate::error::TerminateWorkflowExecutionError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::TerminateWorkflowExecutionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::TerminateWorkflowExecutionError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::TerminateWorkflowExecutionError {
                meta: generic,
                kind: crate::error::TerminateWorkflowExecutionErrorKind::OperationNotPermittedFault(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::operation_not_permitted_fault::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::TerminateWorkflowExecutionError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
            }
        }
        "UnknownResourceFault" => crate::error::TerminateWorkflowExecutionError {
            meta: generic,
            kind: crate::error::TerminateWorkflowExecutionErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::TerminateWorkflowExecutionError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::TerminateWorkflowExecutionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_terminate_workflow_execution_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::TerminateWorkflowExecutionOutput,
    crate::error::TerminateWorkflowExecutionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::terminate_workflow_execution_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_activity_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UndeprecateActivityTypeOutput,
    crate::error::UndeprecateActivityTypeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UndeprecateActivityTypeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UndeprecateActivityTypeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::UndeprecateActivityTypeError {
                meta: generic,
                kind: crate::error::UndeprecateActivityTypeErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateActivityTypeError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "TypeAlreadyExistsFault" => crate::error::UndeprecateActivityTypeError {
            meta: generic,
            kind: crate::error::UndeprecateActivityTypeErrorKind::TypeAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_type_already_exists_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UndeprecateActivityTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnknownResourceFault" => crate::error::UndeprecateActivityTypeError {
            meta: generic,
            kind: crate::error::UndeprecateActivityTypeErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UndeprecateActivityTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UndeprecateActivityTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_activity_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UndeprecateActivityTypeOutput,
    crate::error::UndeprecateActivityTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::undeprecate_activity_type_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_domain_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UndeprecateDomainOutput, crate::error::UndeprecateDomainError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UndeprecateDomainError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UndeprecateDomainError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DomainAlreadyExistsFault" => crate::error::UndeprecateDomainError {
            meta: generic,
            kind: crate::error::UndeprecateDomainErrorKind::DomainAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::domain_already_exists_fault::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_domain_already_exists_faultjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::UndeprecateDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::UndeprecateDomainError {
                meta: generic,
                kind: crate::error::UndeprecateDomainErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateDomainError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::UndeprecateDomainError {
            meta: generic,
            kind: crate::error::UndeprecateDomainErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UndeprecateDomainError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UndeprecateDomainError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_domain_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UndeprecateDomainOutput, crate::error::UndeprecateDomainError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::undeprecate_domain_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_workflow_type_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UndeprecateWorkflowTypeOutput,
    crate::error::UndeprecateWorkflowTypeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UndeprecateWorkflowTypeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UndeprecateWorkflowTypeError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "OperationNotPermittedFault" => {
            crate::error::UndeprecateWorkflowTypeError {
                meta: generic,
                kind: crate::error::UndeprecateWorkflowTypeErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::UndeprecateWorkflowTypeError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "TypeAlreadyExistsFault" => crate::error::UndeprecateWorkflowTypeError {
            meta: generic,
            kind: crate::error::UndeprecateWorkflowTypeErrorKind::TypeAlreadyExistsFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::type_already_exists_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_type_already_exists_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UndeprecateWorkflowTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "UnknownResourceFault" => crate::error::UndeprecateWorkflowTypeError {
            meta: generic,
            kind: crate::error::UndeprecateWorkflowTypeErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UndeprecateWorkflowTypeError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UndeprecateWorkflowTypeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_undeprecate_workflow_type_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UndeprecateWorkflowTypeOutput,
    crate::error::UndeprecateWorkflowTypeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::undeprecate_workflow_type_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UntagResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UntagResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "LimitExceededFault" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::LimitExceededFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::limit_exceeded_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_limit_exceeded_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UntagResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "OperationNotPermittedFault" => {
            crate::error::UntagResourceError {
                meta: generic,
                kind: crate::error::UntagResourceErrorKind::OperationNotPermittedFault({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::operation_not_permitted_fault::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_operation_not_permitted_faultjson_err(response.body().as_ref(), output).map_err(crate::error::UntagResourceError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "UnknownResourceFault" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::UnknownResourceFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unknown_resource_fault::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_unknown_resource_faultjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::UntagResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::UntagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::untag_resource_output::Builder::default();
        let _ = response;
        output.build()
    })
}
