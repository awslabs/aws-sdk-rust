// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn count_closed_workflow_executions_output_correct_errors(
    mut builder: crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsOutputBuilder,
) -> crate::operation::count_closed_workflow_executions::builders::CountClosedWorkflowExecutionsOutputBuilder {
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}

pub(crate) fn count_open_workflow_executions_output_correct_errors(
    mut builder: crate::operation::count_open_workflow_executions::builders::CountOpenWorkflowExecutionsOutputBuilder,
) -> crate::operation::count_open_workflow_executions::builders::CountOpenWorkflowExecutionsOutputBuilder {
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}

pub(crate) fn count_pending_activity_tasks_output_correct_errors(
    mut builder: crate::operation::count_pending_activity_tasks::builders::CountPendingActivityTasksOutputBuilder,
) -> crate::operation::count_pending_activity_tasks::builders::CountPendingActivityTasksOutputBuilder {
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}

pub(crate) fn count_pending_decision_tasks_output_correct_errors(
    mut builder: crate::operation::count_pending_decision_tasks::builders::CountPendingDecisionTasksOutputBuilder,
) -> crate::operation::count_pending_decision_tasks::builders::CountPendingDecisionTasksOutputBuilder {
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_activity_type_output_correct_errors(
    mut builder: crate::operation::describe_activity_type::builders::DescribeActivityTypeOutputBuilder,
) -> crate::operation::describe_activity_type::builders::DescribeActivityTypeOutputBuilder {
    if builder.type_info.is_none() {
        builder.type_info = {
            let builder = crate::types::builders::ActivityTypeInfoBuilder::default();
            crate::serde_util::activity_type_info_correct_errors(builder).build().ok()
        }
    }
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::ActivityTypeConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_domain_output_correct_errors(
    mut builder: crate::operation::describe_domain::builders::DescribeDomainOutputBuilder,
) -> crate::operation::describe_domain::builders::DescribeDomainOutputBuilder {
    if builder.domain_info.is_none() {
        builder.domain_info = {
            let builder = crate::types::builders::DomainInfoBuilder::default();
            crate::serde_util::domain_info_correct_errors(builder).build().ok()
        }
    }
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::DomainConfigurationBuilder::default();
            crate::serde_util::domain_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_workflow_execution_output_correct_errors(
    mut builder: crate::operation::describe_workflow_execution::builders::DescribeWorkflowExecutionOutputBuilder,
) -> crate::operation::describe_workflow_execution::builders::DescribeWorkflowExecutionOutputBuilder {
    if builder.execution_info.is_none() {
        builder.execution_info = {
            let builder = crate::types::builders::WorkflowExecutionInfoBuilder::default();
            crate::serde_util::workflow_execution_info_correct_errors(builder).build().ok()
        }
    }
    if builder.execution_configuration.is_none() {
        builder.execution_configuration = {
            let builder = crate::types::builders::WorkflowExecutionConfigurationBuilder::default();
            crate::serde_util::workflow_execution_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.open_counts.is_none() {
        builder.open_counts = {
            let builder = crate::types::builders::WorkflowExecutionOpenCountsBuilder::default();
            Some(crate::serde_util::workflow_execution_open_counts_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn describe_workflow_type_output_correct_errors(
    mut builder: crate::operation::describe_workflow_type::builders::DescribeWorkflowTypeOutputBuilder,
) -> crate::operation::describe_workflow_type::builders::DescribeWorkflowTypeOutputBuilder {
    if builder.type_info.is_none() {
        builder.type_info = {
            let builder = crate::types::builders::WorkflowTypeInfoBuilder::default();
            crate::serde_util::workflow_type_info_correct_errors(builder).build().ok()
        }
    }
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::WorkflowTypeConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_workflow_execution_history_output_correct_errors(
    mut builder: crate::operation::get_workflow_execution_history::builders::GetWorkflowExecutionHistoryOutputBuilder,
) -> crate::operation::get_workflow_execution_history::builders::GetWorkflowExecutionHistoryOutputBuilder {
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_activity_types_output_correct_errors(
    mut builder: crate::operation::list_activity_types::builders::ListActivityTypesOutputBuilder,
) -> crate::operation::list_activity_types::builders::ListActivityTypesOutputBuilder {
    if builder.type_infos.is_none() {
        builder.type_infos = Some(Default::default())
    }
    builder
}

pub(crate) fn list_closed_workflow_executions_output_correct_errors(
    mut builder: crate::operation::list_closed_workflow_executions::builders::ListClosedWorkflowExecutionsOutputBuilder,
) -> crate::operation::list_closed_workflow_executions::builders::ListClosedWorkflowExecutionsOutputBuilder {
    if builder.execution_infos.is_none() {
        builder.execution_infos = Some(Default::default())
    }
    builder
}

pub(crate) fn list_domains_output_correct_errors(
    mut builder: crate::operation::list_domains::builders::ListDomainsOutputBuilder,
) -> crate::operation::list_domains::builders::ListDomainsOutputBuilder {
    if builder.domain_infos.is_none() {
        builder.domain_infos = Some(Default::default())
    }
    builder
}

pub(crate) fn list_open_workflow_executions_output_correct_errors(
    mut builder: crate::operation::list_open_workflow_executions::builders::ListOpenWorkflowExecutionsOutputBuilder,
) -> crate::operation::list_open_workflow_executions::builders::ListOpenWorkflowExecutionsOutputBuilder {
    if builder.execution_infos.is_none() {
        builder.execution_infos = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workflow_types_output_correct_errors(
    mut builder: crate::operation::list_workflow_types::builders::ListWorkflowTypesOutputBuilder,
) -> crate::operation::list_workflow_types::builders::ListWorkflowTypesOutputBuilder {
    if builder.type_infos.is_none() {
        builder.type_infos = Some(Default::default())
    }
    builder
}

pub(crate) fn poll_for_activity_task_output_correct_errors(
    mut builder: crate::operation::poll_for_activity_task::builders::PollForActivityTaskOutputBuilder,
) -> crate::operation::poll_for_activity_task::builders::PollForActivityTaskOutputBuilder {
    if builder.task_token.is_none() {
        builder.task_token = Some(Default::default())
    }
    if builder.activity_id.is_none() {
        builder.activity_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.activity_type.is_none() {
        builder.activity_type = {
            let builder = crate::types::builders::ActivityTypeBuilder::default();
            crate::serde_util::activity_type_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn poll_for_decision_task_output_correct_errors(
    mut builder: crate::operation::poll_for_decision_task::builders::PollForDecisionTaskOutputBuilder,
) -> crate::operation::poll_for_decision_task::builders::PollForDecisionTaskOutputBuilder {
    if builder.task_token.is_none() {
        builder.task_token = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn record_activity_task_heartbeat_output_correct_errors(
    mut builder: crate::operation::record_activity_task_heartbeat::builders::RecordActivityTaskHeartbeatOutputBuilder,
) -> crate::operation::record_activity_task_heartbeat::builders::RecordActivityTaskHeartbeatOutputBuilder {
    if builder.cancel_requested.is_none() {
        builder.cancel_requested = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_type_info_correct_errors(
    mut builder: crate::types::builders::ActivityTypeInfoBuilder,
) -> crate::types::builders::ActivityTypeInfoBuilder {
    if builder.activity_type.is_none() {
        builder.activity_type = {
            let builder = crate::types::builders::ActivityTypeBuilder::default();
            crate::serde_util::activity_type_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn domain_info_correct_errors(mut builder: crate::types::builders::DomainInfoBuilder) -> crate::types::builders::DomainInfoBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    builder
}

pub(crate) fn domain_configuration_correct_errors(
    mut builder: crate::types::builders::DomainConfigurationBuilder,
) -> crate::types::builders::DomainConfigurationBuilder {
    if builder.workflow_execution_retention_period_in_days.is_none() {
        builder.workflow_execution_retention_period_in_days = Some(Default::default())
    }
    builder
}

pub(crate) fn workflow_execution_info_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionInfoBuilder,
) -> crate::types::builders::WorkflowExecutionInfoBuilder {
    if builder.execution.is_none() {
        builder.execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.start_timestamp.is_none() {
        builder.start_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.execution_status.is_none() {
        builder.execution_status = "no value was set".parse::<crate::types::ExecutionStatus>().ok()
    }
    builder
}

pub(crate) fn workflow_execution_configuration_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionConfigurationBuilder,
) -> crate::types::builders::WorkflowExecutionConfigurationBuilder {
    if builder.task_start_to_close_timeout.is_none() {
        builder.task_start_to_close_timeout = Some(Default::default())
    }
    if builder.execution_start_to_close_timeout.is_none() {
        builder.execution_start_to_close_timeout = Some(Default::default())
    }
    if builder.task_list.is_none() {
        builder.task_list = {
            let builder = crate::types::builders::TaskListBuilder::default();
            crate::serde_util::task_list_correct_errors(builder).build().ok()
        }
    }
    if builder.child_policy.is_none() {
        builder.child_policy = "no value was set".parse::<crate::types::ChildPolicy>().ok()
    }
    builder
}

pub(crate) fn workflow_execution_open_counts_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionOpenCountsBuilder,
) -> crate::types::builders::WorkflowExecutionOpenCountsBuilder {
    if builder.open_activity_tasks.is_none() {
        builder.open_activity_tasks = Some(Default::default())
    }
    if builder.open_decision_tasks.is_none() {
        builder.open_decision_tasks = Some(Default::default())
    }
    if builder.open_timers.is_none() {
        builder.open_timers = Some(Default::default())
    }
    if builder.open_child_workflow_executions.is_none() {
        builder.open_child_workflow_executions = Some(Default::default())
    }
    builder
}

pub(crate) fn workflow_type_info_correct_errors(
    mut builder: crate::types::builders::WorkflowTypeInfoBuilder,
) -> crate::types::builders::WorkflowTypeInfoBuilder {
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RegistrationStatus>().ok()
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn workflow_execution_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionBuilder,
) -> crate::types::builders::WorkflowExecutionBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.run_id.is_none() {
        builder.run_id = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_type_correct_errors(mut builder: crate::types::builders::ActivityTypeBuilder) -> crate::types::builders::ActivityTypeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn workflow_type_correct_errors(mut builder: crate::types::builders::WorkflowTypeBuilder) -> crate::types::builders::WorkflowTypeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn task_list_correct_errors(mut builder: crate::types::builders::TaskListBuilder) -> crate::types::builders::TaskListBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn history_event_correct_errors(mut builder: crate::types::builders::HistoryEventBuilder) -> crate::types::builders::HistoryEventBuilder {
    if builder.event_timestamp.is_none() {
        builder.event_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.event_type.is_none() {
        builder.event_type = "no value was set".parse::<crate::types::EventType>().ok()
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_tag_correct_errors(mut builder: crate::types::builders::ResourceTagBuilder) -> crate::types::builders::ResourceTagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_task_cancel_requested_event_attributes_correct_errors(
    mut builder: crate::types::builders::ActivityTaskCancelRequestedEventAttributesBuilder,
) -> crate::types::builders::ActivityTaskCancelRequestedEventAttributesBuilder {
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    if builder.activity_id.is_none() {
        builder.activity_id = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_task_canceled_event_attributes_correct_errors(
    mut builder: crate::types::builders::ActivityTaskCanceledEventAttributesBuilder,
) -> crate::types::builders::ActivityTaskCanceledEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_task_completed_event_attributes_correct_errors(
    mut builder: crate::types::builders::ActivityTaskCompletedEventAttributesBuilder,
) -> crate::types::builders::ActivityTaskCompletedEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_task_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::ActivityTaskFailedEventAttributesBuilder,
) -> crate::types::builders::ActivityTaskFailedEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_task_scheduled_event_attributes_correct_errors(
    mut builder: crate::types::builders::ActivityTaskScheduledEventAttributesBuilder,
) -> crate::types::builders::ActivityTaskScheduledEventAttributesBuilder {
    if builder.activity_type.is_none() {
        builder.activity_type = {
            let builder = crate::types::builders::ActivityTypeBuilder::default();
            crate::serde_util::activity_type_correct_errors(builder).build().ok()
        }
    }
    if builder.activity_id.is_none() {
        builder.activity_id = Some(Default::default())
    }
    if builder.task_list.is_none() {
        builder.task_list = {
            let builder = crate::types::builders::TaskListBuilder::default();
            crate::serde_util::task_list_correct_errors(builder).build().ok()
        }
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_task_started_event_attributes_correct_errors(
    mut builder: crate::types::builders::ActivityTaskStartedEventAttributesBuilder,
) -> crate::types::builders::ActivityTaskStartedEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_task_timed_out_event_attributes_correct_errors(
    mut builder: crate::types::builders::ActivityTaskTimedOutEventAttributesBuilder,
) -> crate::types::builders::ActivityTaskTimedOutEventAttributesBuilder {
    if builder.timeout_type.is_none() {
        builder.timeout_type = "no value was set".parse::<crate::types::ActivityTaskTimeoutType>().ok()
    }
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cancel_timer_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::CancelTimerFailedEventAttributesBuilder,
) -> crate::types::builders::CancelTimerFailedEventAttributesBuilder {
    if builder.timer_id.is_none() {
        builder.timer_id = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::CancelTimerFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cancel_workflow_execution_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::CancelWorkflowExecutionFailedEventAttributesBuilder,
) -> crate::types::builders::CancelWorkflowExecutionFailedEventAttributesBuilder {
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::CancelWorkflowExecutionFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn child_workflow_execution_canceled_event_attributes_correct_errors(
    mut builder: crate::types::builders::ChildWorkflowExecutionCanceledEventAttributesBuilder,
) -> crate::types::builders::ChildWorkflowExecutionCanceledEventAttributesBuilder {
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn child_workflow_execution_completed_event_attributes_correct_errors(
    mut builder: crate::types::builders::ChildWorkflowExecutionCompletedEventAttributesBuilder,
) -> crate::types::builders::ChildWorkflowExecutionCompletedEventAttributesBuilder {
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn child_workflow_execution_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::ChildWorkflowExecutionFailedEventAttributesBuilder,
) -> crate::types::builders::ChildWorkflowExecutionFailedEventAttributesBuilder {
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn child_workflow_execution_started_event_attributes_correct_errors(
    mut builder: crate::types::builders::ChildWorkflowExecutionStartedEventAttributesBuilder,
) -> crate::types::builders::ChildWorkflowExecutionStartedEventAttributesBuilder {
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn child_workflow_execution_terminated_event_attributes_correct_errors(
    mut builder: crate::types::builders::ChildWorkflowExecutionTerminatedEventAttributesBuilder,
) -> crate::types::builders::ChildWorkflowExecutionTerminatedEventAttributesBuilder {
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn child_workflow_execution_timed_out_event_attributes_correct_errors(
    mut builder: crate::types::builders::ChildWorkflowExecutionTimedOutEventAttributesBuilder,
) -> crate::types::builders::ChildWorkflowExecutionTimedOutEventAttributesBuilder {
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.timeout_type.is_none() {
        builder.timeout_type = "no value was set".parse::<crate::types::WorkflowExecutionTimeoutType>().ok()
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn complete_workflow_execution_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::CompleteWorkflowExecutionFailedEventAttributesBuilder,
) -> crate::types::builders::CompleteWorkflowExecutionFailedEventAttributesBuilder {
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::CompleteWorkflowExecutionFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn continue_as_new_workflow_execution_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::ContinueAsNewWorkflowExecutionFailedEventAttributesBuilder,
) -> crate::types::builders::ContinueAsNewWorkflowExecutionFailedEventAttributesBuilder {
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::ContinueAsNewWorkflowExecutionFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn decision_task_completed_event_attributes_correct_errors(
    mut builder: crate::types::builders::DecisionTaskCompletedEventAttributesBuilder,
) -> crate::types::builders::DecisionTaskCompletedEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn decision_task_scheduled_event_attributes_correct_errors(
    mut builder: crate::types::builders::DecisionTaskScheduledEventAttributesBuilder,
) -> crate::types::builders::DecisionTaskScheduledEventAttributesBuilder {
    if builder.task_list.is_none() {
        builder.task_list = {
            let builder = crate::types::builders::TaskListBuilder::default();
            crate::serde_util::task_list_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn decision_task_started_event_attributes_correct_errors(
    mut builder: crate::types::builders::DecisionTaskStartedEventAttributesBuilder,
) -> crate::types::builders::DecisionTaskStartedEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn decision_task_timed_out_event_attributes_correct_errors(
    mut builder: crate::types::builders::DecisionTaskTimedOutEventAttributesBuilder,
) -> crate::types::builders::DecisionTaskTimedOutEventAttributesBuilder {
    if builder.timeout_type.is_none() {
        builder.timeout_type = "no value was set".parse::<crate::types::DecisionTaskTimeoutType>().ok()
    }
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn external_workflow_execution_cancel_requested_event_attributes_correct_errors(
    mut builder: crate::types::builders::ExternalWorkflowExecutionCancelRequestedEventAttributesBuilder,
) -> crate::types::builders::ExternalWorkflowExecutionCancelRequestedEventAttributesBuilder {
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn external_workflow_execution_signaled_event_attributes_correct_errors(
    mut builder: crate::types::builders::ExternalWorkflowExecutionSignaledEventAttributesBuilder,
) -> crate::types::builders::ExternalWorkflowExecutionSignaledEventAttributesBuilder {
    if builder.workflow_execution.is_none() {
        builder.workflow_execution = {
            let builder = crate::types::builders::WorkflowExecutionBuilder::default();
            crate::serde_util::workflow_execution_correct_errors(builder).build().ok()
        }
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn fail_workflow_execution_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::FailWorkflowExecutionFailedEventAttributesBuilder,
) -> crate::types::builders::FailWorkflowExecutionFailedEventAttributesBuilder {
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::FailWorkflowExecutionFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_completed_event_attributes_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionCompletedEventAttributesBuilder,
) -> crate::types::builders::LambdaFunctionCompletedEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionFailedEventAttributesBuilder,
) -> crate::types::builders::LambdaFunctionFailedEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_scheduled_event_attributes_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionScheduledEventAttributesBuilder,
) -> crate::types::builders::LambdaFunctionScheduledEventAttributesBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_started_event_attributes_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionStartedEventAttributesBuilder,
) -> crate::types::builders::LambdaFunctionStartedEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_timed_out_event_attributes_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionTimedOutEventAttributesBuilder,
) -> crate::types::builders::LambdaFunctionTimedOutEventAttributesBuilder {
    if builder.scheduled_event_id.is_none() {
        builder.scheduled_event_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn marker_recorded_event_attributes_correct_errors(
    mut builder: crate::types::builders::MarkerRecordedEventAttributesBuilder,
) -> crate::types::builders::MarkerRecordedEventAttributesBuilder {
    if builder.marker_name.is_none() {
        builder.marker_name = Some(Default::default())
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn record_marker_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::RecordMarkerFailedEventAttributesBuilder,
) -> crate::types::builders::RecordMarkerFailedEventAttributesBuilder {
    if builder.marker_name.is_none() {
        builder.marker_name = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::RecordMarkerFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn request_cancel_activity_task_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::RequestCancelActivityTaskFailedEventAttributesBuilder,
) -> crate::types::builders::RequestCancelActivityTaskFailedEventAttributesBuilder {
    if builder.activity_id.is_none() {
        builder.activity_id = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::RequestCancelActivityTaskFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn request_cancel_external_workflow_execution_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::RequestCancelExternalWorkflowExecutionFailedEventAttributesBuilder,
) -> crate::types::builders::RequestCancelExternalWorkflowExecutionFailedEventAttributesBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = "no value was set"
            .parse::<crate::types::RequestCancelExternalWorkflowExecutionFailedCause>()
            .ok()
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn request_cancel_external_workflow_execution_initiated_event_attributes_correct_errors(
    mut builder: crate::types::builders::RequestCancelExternalWorkflowExecutionInitiatedEventAttributesBuilder,
) -> crate::types::builders::RequestCancelExternalWorkflowExecutionInitiatedEventAttributesBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn schedule_activity_task_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::ScheduleActivityTaskFailedEventAttributesBuilder,
) -> crate::types::builders::ScheduleActivityTaskFailedEventAttributesBuilder {
    if builder.activity_type.is_none() {
        builder.activity_type = {
            let builder = crate::types::builders::ActivityTypeBuilder::default();
            crate::serde_util::activity_type_correct_errors(builder).build().ok()
        }
    }
    if builder.activity_id.is_none() {
        builder.activity_id = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::ScheduleActivityTaskFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn schedule_lambda_function_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::ScheduleLambdaFunctionFailedEventAttributesBuilder,
) -> crate::types::builders::ScheduleLambdaFunctionFailedEventAttributesBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::ScheduleLambdaFunctionFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn signal_external_workflow_execution_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::SignalExternalWorkflowExecutionFailedEventAttributesBuilder,
) -> crate::types::builders::SignalExternalWorkflowExecutionFailedEventAttributesBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = "no value was set"
            .parse::<crate::types::SignalExternalWorkflowExecutionFailedCause>()
            .ok()
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn signal_external_workflow_execution_initiated_event_attributes_correct_errors(
    mut builder: crate::types::builders::SignalExternalWorkflowExecutionInitiatedEventAttributesBuilder,
) -> crate::types::builders::SignalExternalWorkflowExecutionInitiatedEventAttributesBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.signal_name.is_none() {
        builder.signal_name = Some(Default::default())
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn start_child_workflow_execution_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::StartChildWorkflowExecutionFailedEventAttributesBuilder,
) -> crate::types::builders::StartChildWorkflowExecutionFailedEventAttributesBuilder {
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::StartChildWorkflowExecutionFailedCause>().ok()
    }
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.initiated_event_id.is_none() {
        builder.initiated_event_id = Some(Default::default())
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn start_child_workflow_execution_initiated_event_attributes_correct_errors(
    mut builder: crate::types::builders::StartChildWorkflowExecutionInitiatedEventAttributesBuilder,
) -> crate::types::builders::StartChildWorkflowExecutionInitiatedEventAttributesBuilder {
    if builder.workflow_id.is_none() {
        builder.workflow_id = Some(Default::default())
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    if builder.task_list.is_none() {
        builder.task_list = {
            let builder = crate::types::builders::TaskListBuilder::default();
            crate::serde_util::task_list_correct_errors(builder).build().ok()
        }
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    if builder.child_policy.is_none() {
        builder.child_policy = "no value was set".parse::<crate::types::ChildPolicy>().ok()
    }
    builder
}

pub(crate) fn start_timer_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::StartTimerFailedEventAttributesBuilder,
) -> crate::types::builders::StartTimerFailedEventAttributesBuilder {
    if builder.timer_id.is_none() {
        builder.timer_id = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = "no value was set".parse::<crate::types::StartTimerFailedCause>().ok()
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn timer_canceled_event_attributes_correct_errors(
    mut builder: crate::types::builders::TimerCanceledEventAttributesBuilder,
) -> crate::types::builders::TimerCanceledEventAttributesBuilder {
    if builder.timer_id.is_none() {
        builder.timer_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn timer_fired_event_attributes_correct_errors(
    mut builder: crate::types::builders::TimerFiredEventAttributesBuilder,
) -> crate::types::builders::TimerFiredEventAttributesBuilder {
    if builder.timer_id.is_none() {
        builder.timer_id = Some(Default::default())
    }
    if builder.started_event_id.is_none() {
        builder.started_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn timer_started_event_attributes_correct_errors(
    mut builder: crate::types::builders::TimerStartedEventAttributesBuilder,
) -> crate::types::builders::TimerStartedEventAttributesBuilder {
    if builder.timer_id.is_none() {
        builder.timer_id = Some(Default::default())
    }
    if builder.start_to_fire_timeout.is_none() {
        builder.start_to_fire_timeout = Some(Default::default())
    }
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn workflow_execution_canceled_event_attributes_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionCanceledEventAttributesBuilder,
) -> crate::types::builders::WorkflowExecutionCanceledEventAttributesBuilder {
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn workflow_execution_completed_event_attributes_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionCompletedEventAttributesBuilder,
) -> crate::types::builders::WorkflowExecutionCompletedEventAttributesBuilder {
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn workflow_execution_continued_as_new_event_attributes_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionContinuedAsNewEventAttributesBuilder,
) -> crate::types::builders::WorkflowExecutionContinuedAsNewEventAttributesBuilder {
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    if builder.new_execution_run_id.is_none() {
        builder.new_execution_run_id = Some(Default::default())
    }
    if builder.task_list.is_none() {
        builder.task_list = {
            let builder = crate::types::builders::TaskListBuilder::default();
            crate::serde_util::task_list_correct_errors(builder).build().ok()
        }
    }
    if builder.child_policy.is_none() {
        builder.child_policy = "no value was set".parse::<crate::types::ChildPolicy>().ok()
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn workflow_execution_failed_event_attributes_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionFailedEventAttributesBuilder,
) -> crate::types::builders::WorkflowExecutionFailedEventAttributesBuilder {
    if builder.decision_task_completed_event_id.is_none() {
        builder.decision_task_completed_event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn workflow_execution_signaled_event_attributes_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionSignaledEventAttributesBuilder,
) -> crate::types::builders::WorkflowExecutionSignaledEventAttributesBuilder {
    if builder.signal_name.is_none() {
        builder.signal_name = Some(Default::default())
    }
    builder
}

pub(crate) fn workflow_execution_started_event_attributes_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionStartedEventAttributesBuilder,
) -> crate::types::builders::WorkflowExecutionStartedEventAttributesBuilder {
    if builder.child_policy.is_none() {
        builder.child_policy = "no value was set".parse::<crate::types::ChildPolicy>().ok()
    }
    if builder.task_list.is_none() {
        builder.task_list = {
            let builder = crate::types::builders::TaskListBuilder::default();
            crate::serde_util::task_list_correct_errors(builder).build().ok()
        }
    }
    if builder.workflow_type.is_none() {
        builder.workflow_type = {
            let builder = crate::types::builders::WorkflowTypeBuilder::default();
            crate::serde_util::workflow_type_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn workflow_execution_terminated_event_attributes_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionTerminatedEventAttributesBuilder,
) -> crate::types::builders::WorkflowExecutionTerminatedEventAttributesBuilder {
    if builder.child_policy.is_none() {
        builder.child_policy = "no value was set".parse::<crate::types::ChildPolicy>().ok()
    }
    builder
}

pub(crate) fn workflow_execution_timed_out_event_attributes_correct_errors(
    mut builder: crate::types::builders::WorkflowExecutionTimedOutEventAttributesBuilder,
) -> crate::types::builders::WorkflowExecutionTimedOutEventAttributesBuilder {
    if builder.timeout_type.is_none() {
        builder.timeout_type = "no value was set".parse::<crate::types::WorkflowExecutionTimeoutType>().ok()
    }
    if builder.child_policy.is_none() {
        builder.child_policy = "no value was set".parse::<crate::types::ChildPolicy>().ok()
    }
    builder
}
