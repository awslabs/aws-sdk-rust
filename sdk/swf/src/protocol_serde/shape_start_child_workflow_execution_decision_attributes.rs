// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_child_workflow_execution_decision_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::StartChildWorkflowExecutionDecisionAttributes,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.workflow_type {
        #[allow(unused_mut)]
        let mut object_2 = object.key("workflowType").start_object();
        crate::protocol_serde::shape_workflow_type::ser_workflow_type(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.workflow_id {
        object.key("workflowId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.control {
        object.key("control").string(var_4.as_str());
    }
    if let Some(var_5) = &input.input {
        object.key("input").string(var_5.as_str());
    }
    if let Some(var_6) = &input.execution_start_to_close_timeout {
        object
            .key("executionStartToCloseTimeout")
            .string(var_6.as_str());
    }
    if let Some(var_7) = &input.task_list {
        #[allow(unused_mut)]
        let mut object_8 = object.key("taskList").start_object();
        crate::protocol_serde::shape_task_list::ser_task_list(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.task_priority {
        object.key("taskPriority").string(var_9.as_str());
    }
    if let Some(var_10) = &input.task_start_to_close_timeout {
        object
            .key("taskStartToCloseTimeout")
            .string(var_10.as_str());
    }
    if let Some(var_11) = &input.child_policy {
        object.key("childPolicy").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tag_list {
        let mut array_13 = object.key("tagList").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.lambda_role {
        object.key("lambdaRole").string(var_15.as_str());
    }
    Ok(())
}
