// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_decision(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Decision,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("decisionType").string(input.decision_type.as_str());
    }
    if let Some(var_1) = &input.schedule_activity_task_decision_attributes {
        #[allow(unused_mut)]
        let mut object_2 = object.key("scheduleActivityTaskDecisionAttributes").start_object();
        crate::protocol_serde::shape_schedule_activity_task_decision_attributes::ser_schedule_activity_task_decision_attributes(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.request_cancel_activity_task_decision_attributes {
        #[allow(unused_mut)]
        let mut object_4 = object.key("requestCancelActivityTaskDecisionAttributes").start_object();
        crate::protocol_serde::shape_request_cancel_activity_task_decision_attributes::ser_request_cancel_activity_task_decision_attributes(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.complete_workflow_execution_decision_attributes {
        #[allow(unused_mut)]
        let mut object_6 = object.key("completeWorkflowExecutionDecisionAttributes").start_object();
        crate::protocol_serde::shape_complete_workflow_execution_decision_attributes::ser_complete_workflow_execution_decision_attributes(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.fail_workflow_execution_decision_attributes {
        #[allow(unused_mut)]
        let mut object_8 = object.key("failWorkflowExecutionDecisionAttributes").start_object();
        crate::protocol_serde::shape_fail_workflow_execution_decision_attributes::ser_fail_workflow_execution_decision_attributes(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.cancel_workflow_execution_decision_attributes {
        #[allow(unused_mut)]
        let mut object_10 = object.key("cancelWorkflowExecutionDecisionAttributes").start_object();
        crate::protocol_serde::shape_cancel_workflow_execution_decision_attributes::ser_cancel_workflow_execution_decision_attributes(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.continue_as_new_workflow_execution_decision_attributes {
        #[allow(unused_mut)]
        let mut object_12 = object.key("continueAsNewWorkflowExecutionDecisionAttributes").start_object();
        crate::protocol_serde::shape_continue_as_new_workflow_execution_decision_attributes::ser_continue_as_new_workflow_execution_decision_attributes(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.record_marker_decision_attributes {
        #[allow(unused_mut)]
        let mut object_14 = object.key("recordMarkerDecisionAttributes").start_object();
        crate::protocol_serde::shape_record_marker_decision_attributes::ser_record_marker_decision_attributes(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.start_timer_decision_attributes {
        #[allow(unused_mut)]
        let mut object_16 = object.key("startTimerDecisionAttributes").start_object();
        crate::protocol_serde::shape_start_timer_decision_attributes::ser_start_timer_decision_attributes(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.cancel_timer_decision_attributes {
        #[allow(unused_mut)]
        let mut object_18 = object.key("cancelTimerDecisionAttributes").start_object();
        crate::protocol_serde::shape_cancel_timer_decision_attributes::ser_cancel_timer_decision_attributes(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.signal_external_workflow_execution_decision_attributes {
        #[allow(unused_mut)]
        let mut object_20 = object.key("signalExternalWorkflowExecutionDecisionAttributes").start_object();
        crate::protocol_serde::shape_signal_external_workflow_execution_decision_attributes::ser_signal_external_workflow_execution_decision_attributes(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.request_cancel_external_workflow_execution_decision_attributes {
        #[allow(unused_mut)]
        let mut object_22 = object.key("requestCancelExternalWorkflowExecutionDecisionAttributes").start_object();
        crate::protocol_serde::shape_request_cancel_external_workflow_execution_decision_attributes::ser_request_cancel_external_workflow_execution_decision_attributes(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.start_child_workflow_execution_decision_attributes {
        #[allow(unused_mut)]
        let mut object_24 = object.key("startChildWorkflowExecutionDecisionAttributes").start_object();
        crate::protocol_serde::shape_start_child_workflow_execution_decision_attributes::ser_start_child_workflow_execution_decision_attributes(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    if let Some(var_25) = &input.schedule_lambda_function_decision_attributes {
        #[allow(unused_mut)]
        let mut object_26 = object.key("scheduleLambdaFunctionDecisionAttributes").start_object();
        crate::protocol_serde::shape_schedule_lambda_function_decision_attributes::ser_schedule_lambda_function_decision_attributes(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    Ok(())
}
