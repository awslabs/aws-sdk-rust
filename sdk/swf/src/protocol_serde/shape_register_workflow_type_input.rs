// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_register_workflow_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::register_workflow_type::RegisterWorkflowTypeInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.domain {
        object.key("domain").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.version {
        object.key("version").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.default_task_start_to_close_timeout {
        object
            .key("defaultTaskStartToCloseTimeout")
            .string(var_5.as_str());
    }
    if let Some(var_6) = &input.default_execution_start_to_close_timeout {
        object
            .key("defaultExecutionStartToCloseTimeout")
            .string(var_6.as_str());
    }
    if let Some(var_7) = &input.default_task_list {
        #[allow(unused_mut)]
        let mut object_8 = object.key("defaultTaskList").start_object();
        crate::protocol_serde::shape_task_list::ser_task_list(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.default_task_priority {
        object.key("defaultTaskPriority").string(var_9.as_str());
    }
    if let Some(var_10) = &input.default_child_policy {
        object.key("defaultChildPolicy").string(var_10.as_str());
    }
    if let Some(var_11) = &input.default_lambda_role {
        object.key("defaultLambdaRole").string(var_11.as_str());
    }
    Ok(())
}
