// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_respond_decision_task_completed_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::respond_decision_task_completed::RespondDecisionTaskCompletedInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.task_token {
        object.key("taskToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.decisions {
        let mut array_3 = object.key("decisions").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_decision::ser_decision(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.execution_context {
        object.key("executionContext").string(var_6.as_str());
    }
    if let Some(var_7) = &input.task_list {
        #[allow(unused_mut)]
        let mut object_8 = object.key("taskList").start_object();
        crate::protocol_serde::shape_task_list::ser_task_list(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.task_list_schedule_to_start_timeout {
        object.key("taskListScheduleToStartTimeout").string(var_9.as_str());
    }
    Ok(())
}
