// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_continue_as_new_workflow_execution_decision_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ContinueAsNewWorkflowExecutionDecisionAttributes,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.input {
        object.key("input").string(var_1.as_str());
    }
    if let Some(var_2) = &input.execution_start_to_close_timeout {
        object
            .key("executionStartToCloseTimeout")
            .string(var_2.as_str());
    }
    if let Some(var_3) = &input.task_list {
        #[allow(unused_mut)]
        let mut object_4 = object.key("taskList").start_object();
        crate::protocol_serde::shape_task_list::ser_task_list(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.task_priority {
        object.key("taskPriority").string(var_5.as_str());
    }
    if let Some(var_6) = &input.task_start_to_close_timeout {
        object.key("taskStartToCloseTimeout").string(var_6.as_str());
    }
    if let Some(var_7) = &input.child_policy {
        object.key("childPolicy").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tag_list {
        let mut array_9 = object.key("tagList").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.workflow_type_version {
        object.key("workflowTypeVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.lambda_role {
        object.key("lambdaRole").string(var_12.as_str());
    }
    Ok(())
}
