// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_open_workflow_executions_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_open_workflow_executions::ListOpenWorkflowExecutionsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.domain {
        object.key("domain").string(var_1.as_str());
    }
    if let Some(var_2) = &input.start_time_filter {
        #[allow(unused_mut)]
        let mut object_3 = object.key("startTimeFilter").start_object();
        crate::protocol_serde::shape_execution_time_filter::ser_execution_time_filter(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.type_filter {
        #[allow(unused_mut)]
        let mut object_5 = object.key("typeFilter").start_object();
        crate::protocol_serde::shape_workflow_type_filter::ser_workflow_type_filter(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.tag_filter {
        #[allow(unused_mut)]
        let mut object_7 = object.key("tagFilter").start_object();
        crate::protocol_serde::shape_tag_filter::ser_tag_filter(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.next_page_token {
        object.key("nextPageToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.maximum_page_size {
        object.key("maximumPageSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.reverse_order {
        object.key("reverseOrder").boolean(*var_10);
    }
    if let Some(var_11) = &input.execution_filter {
        #[allow(unused_mut)]
        let mut object_12 = object.key("executionFilter").start_object();
        crate::protocol_serde::shape_workflow_execution_filter::ser_workflow_execution_filter(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
