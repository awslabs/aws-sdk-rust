// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>SignalExternalWorkflowExecutionInitiated</code> event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SignalExternalWorkflowExecutionInitiatedEventAttributes {
    /// <p>The <code>workflowId</code> of the external workflow execution.</p>
    pub workflow_id: ::std::string::String,
    /// <p>The <code>runId</code> of the external workflow execution to send the signal to.</p>
    pub run_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the signal.</p>
    pub signal_name: ::std::string::String,
    /// <p>The input provided to the signal.</p>
    pub input: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>SignalExternalWorkflowExecution</code> decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub decision_task_completed_event_id: i64,
    /// <p>Data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    pub control: ::std::option::Option<::std::string::String>,
}
impl SignalExternalWorkflowExecutionInitiatedEventAttributes {
    /// <p>The <code>workflowId</code> of the external workflow execution.</p>
    pub fn workflow_id(&self) -> &str {
        use std::ops::Deref;
        self.workflow_id.deref()
    }
    /// <p>The <code>runId</code> of the external workflow execution to send the signal to.</p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>The name of the signal.</p>
    pub fn signal_name(&self) -> &str {
        use std::ops::Deref;
        self.signal_name.deref()
    }
    /// <p>The input provided to the signal.</p>
    pub fn input(&self) -> ::std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>SignalExternalWorkflowExecution</code> decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn decision_task_completed_event_id(&self) -> i64 {
        self.decision_task_completed_event_id
    }
    /// <p>Data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    pub fn control(&self) -> ::std::option::Option<&str> {
        self.control.as_deref()
    }
}
impl SignalExternalWorkflowExecutionInitiatedEventAttributes {
    /// Creates a new builder-style object to manufacture [`SignalExternalWorkflowExecutionInitiatedEventAttributes`](crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes).
    pub fn builder() -> crate::types::builders::SignalExternalWorkflowExecutionInitiatedEventAttributesBuilder {
        crate::types::builders::SignalExternalWorkflowExecutionInitiatedEventAttributesBuilder::default()
    }
}

/// A builder for [`SignalExternalWorkflowExecutionInitiatedEventAttributes`](crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SignalExternalWorkflowExecutionInitiatedEventAttributesBuilder {
    pub(crate) workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
    pub(crate) signal_name: ::std::option::Option<::std::string::String>,
    pub(crate) input: ::std::option::Option<::std::string::String>,
    pub(crate) decision_task_completed_event_id: ::std::option::Option<i64>,
    pub(crate) control: ::std::option::Option<::std::string::String>,
}
impl SignalExternalWorkflowExecutionInitiatedEventAttributesBuilder {
    /// <p>The <code>workflowId</code> of the external workflow execution.</p>
    /// This field is required.
    pub fn workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>workflowId</code> of the external workflow execution.</p>
    pub fn set_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The <code>workflowId</code> of the external workflow execution.</p>
    pub fn get_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_id
    }
    /// <p>The <code>runId</code> of the external workflow execution to send the signal to.</p>
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>runId</code> of the external workflow execution to send the signal to.</p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The <code>runId</code> of the external workflow execution to send the signal to.</p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// <p>The name of the signal.</p>
    /// This field is required.
    pub fn signal_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signal_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the signal.</p>
    pub fn set_signal_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signal_name = input;
        self
    }
    /// <p>The name of the signal.</p>
    pub fn get_signal_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.signal_name
    }
    /// <p>The input provided to the signal.</p>
    pub fn input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The input provided to the signal.</p>
    pub fn set_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>The input provided to the signal.</p>
    pub fn get_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.input
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>SignalExternalWorkflowExecution</code> decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    /// This field is required.
    pub fn decision_task_completed_event_id(mut self, input: i64) -> Self {
        self.decision_task_completed_event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>SignalExternalWorkflowExecution</code> decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_decision_task_completed_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.decision_task_completed_event_id = input;
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>SignalExternalWorkflowExecution</code> decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn get_decision_task_completed_event_id(&self) -> &::std::option::Option<i64> {
        &self.decision_task_completed_event_id
    }
    /// <p>Data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    pub fn control(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    pub fn set_control(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control = input;
        self
    }
    /// <p>Data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    pub fn get_control(&self) -> &::std::option::Option<::std::string::String> {
        &self.control
    }
    /// Consumes the builder and constructs a [`SignalExternalWorkflowExecutionInitiatedEventAttributes`](crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`workflow_id`](crate::types::builders::SignalExternalWorkflowExecutionInitiatedEventAttributesBuilder::workflow_id)
    /// - [`signal_name`](crate::types::builders::SignalExternalWorkflowExecutionInitiatedEventAttributesBuilder::signal_name)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes {
            workflow_id: self.workflow_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workflow_id",
                    "workflow_id was not specified but it is required when building SignalExternalWorkflowExecutionInitiatedEventAttributes",
                )
            })?,
            run_id: self.run_id,
            signal_name: self.signal_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "signal_name",
                    "signal_name was not specified but it is required when building SignalExternalWorkflowExecutionInitiatedEventAttributes",
                )
            })?,
            input: self.input,
            decision_task_completed_event_id: self.decision_task_completed_event_id.unwrap_or_default(),
            control: self.control,
        })
    }
}
