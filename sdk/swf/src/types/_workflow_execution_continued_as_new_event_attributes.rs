// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>WorkflowExecutionContinuedAsNew</code> event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkflowExecutionContinuedAsNewEventAttributes {
    /// <p>The input provided to the new workflow execution.</p>
    #[doc(hidden)]
    pub input: std::option::Option<std::string::String>,
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>ContinueAsNewWorkflowExecution</code> decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    #[doc(hidden)]
    pub decision_task_completed_event_id: i64,
    /// <p>The <code>runId</code> of the new workflow execution.</p>
    #[doc(hidden)]
    pub new_execution_run_id: std::option::Option<std::string::String>,
    /// <p>The total duration allowed for the new workflow execution.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    #[doc(hidden)]
    pub execution_start_to_close_timeout: std::option::Option<std::string::String>,
    /// <p>The task list to use for the decisions of the new (continued) workflow execution.</p>
    #[doc(hidden)]
    pub task_list: std::option::Option<crate::types::TaskList>,
    /// <p>The priority of the task to use for the decisions of the new (continued) workflow execution.</p>
    #[doc(hidden)]
    pub task_priority: std::option::Option<std::string::String>,
    /// <p>The maximum duration of decision tasks for the new workflow execution.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    #[doc(hidden)]
    pub task_start_to_close_timeout: std::option::Option<std::string::String>,
    /// <p>The policy to use for the child workflow executions of the new execution if it is terminated by calling the <code>TerminateWorkflowExecution</code> action explicitly or due to an expired timeout.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub child_policy: std::option::Option<crate::types::ChildPolicy>,
    /// <p>The list of tags associated with the new workflow execution.</p>
    #[doc(hidden)]
    pub tag_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The workflow type of this execution.</p>
    #[doc(hidden)]
    pub workflow_type: std::option::Option<crate::types::WorkflowType>,
    /// <p>The IAM role to attach to the new (continued) workflow execution.</p>
    #[doc(hidden)]
    pub lambda_role: std::option::Option<std::string::String>,
}
impl WorkflowExecutionContinuedAsNewEventAttributes {
    /// <p>The input provided to the new workflow execution.</p>
    pub fn input(&self) -> std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>ContinueAsNewWorkflowExecution</code> decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn decision_task_completed_event_id(&self) -> i64 {
        self.decision_task_completed_event_id
    }
    /// <p>The <code>runId</code> of the new workflow execution.</p>
    pub fn new_execution_run_id(&self) -> std::option::Option<&str> {
        self.new_execution_run_id.as_deref()
    }
    /// <p>The total duration allowed for the new workflow execution.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn execution_start_to_close_timeout(&self) -> std::option::Option<&str> {
        self.execution_start_to_close_timeout.as_deref()
    }
    /// <p>The task list to use for the decisions of the new (continued) workflow execution.</p>
    pub fn task_list(&self) -> std::option::Option<&crate::types::TaskList> {
        self.task_list.as_ref()
    }
    /// <p>The priority of the task to use for the decisions of the new (continued) workflow execution.</p>
    pub fn task_priority(&self) -> std::option::Option<&str> {
        self.task_priority.as_deref()
    }
    /// <p>The maximum duration of decision tasks for the new workflow execution.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn task_start_to_close_timeout(&self) -> std::option::Option<&str> {
        self.task_start_to_close_timeout.as_deref()
    }
    /// <p>The policy to use for the child workflow executions of the new execution if it is terminated by calling the <code>TerminateWorkflowExecution</code> action explicitly or due to an expired timeout.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul>
    pub fn child_policy(&self) -> std::option::Option<&crate::types::ChildPolicy> {
        self.child_policy.as_ref()
    }
    /// <p>The list of tags associated with the new workflow execution.</p>
    pub fn tag_list(&self) -> std::option::Option<&[std::string::String]> {
        self.tag_list.as_deref()
    }
    /// <p>The workflow type of this execution.</p>
    pub fn workflow_type(&self) -> std::option::Option<&crate::types::WorkflowType> {
        self.workflow_type.as_ref()
    }
    /// <p>The IAM role to attach to the new (continued) workflow execution.</p>
    pub fn lambda_role(&self) -> std::option::Option<&str> {
        self.lambda_role.as_deref()
    }
}
impl WorkflowExecutionContinuedAsNewEventAttributes {
    /// Creates a new builder-style object to manufacture [`WorkflowExecutionContinuedAsNewEventAttributes`](crate::types::WorkflowExecutionContinuedAsNewEventAttributes).
    pub fn builder() -> crate::types::builders::WorkflowExecutionContinuedAsNewEventAttributesBuilder
    {
        crate::types::builders::WorkflowExecutionContinuedAsNewEventAttributesBuilder::default()
    }
}

/// A builder for [`WorkflowExecutionContinuedAsNewEventAttributes`](crate::types::WorkflowExecutionContinuedAsNewEventAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkflowExecutionContinuedAsNewEventAttributesBuilder {
    pub(crate) input: std::option::Option<std::string::String>,
    pub(crate) decision_task_completed_event_id: std::option::Option<i64>,
    pub(crate) new_execution_run_id: std::option::Option<std::string::String>,
    pub(crate) execution_start_to_close_timeout: std::option::Option<std::string::String>,
    pub(crate) task_list: std::option::Option<crate::types::TaskList>,
    pub(crate) task_priority: std::option::Option<std::string::String>,
    pub(crate) task_start_to_close_timeout: std::option::Option<std::string::String>,
    pub(crate) child_policy: std::option::Option<crate::types::ChildPolicy>,
    pub(crate) tag_list: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) workflow_type: std::option::Option<crate::types::WorkflowType>,
    pub(crate) lambda_role: std::option::Option<std::string::String>,
}
impl WorkflowExecutionContinuedAsNewEventAttributesBuilder {
    /// <p>The input provided to the new workflow execution.</p>
    pub fn input(mut self, input: impl Into<std::string::String>) -> Self {
        self.input = Some(input.into());
        self
    }
    /// <p>The input provided to the new workflow execution.</p>
    pub fn set_input(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>ContinueAsNewWorkflowExecution</code> decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn decision_task_completed_event_id(mut self, input: i64) -> Self {
        self.decision_task_completed_event_id = Some(input);
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>ContinueAsNewWorkflowExecution</code> decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_decision_task_completed_event_id(mut self, input: std::option::Option<i64>) -> Self {
        self.decision_task_completed_event_id = input;
        self
    }
    /// <p>The <code>runId</code> of the new workflow execution.</p>
    pub fn new_execution_run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.new_execution_run_id = Some(input.into());
        self
    }
    /// <p>The <code>runId</code> of the new workflow execution.</p>
    pub fn set_new_execution_run_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.new_execution_run_id = input;
        self
    }
    /// <p>The total duration allowed for the new workflow execution.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn execution_start_to_close_timeout(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.execution_start_to_close_timeout = Some(input.into());
        self
    }
    /// <p>The total duration allowed for the new workflow execution.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn set_execution_start_to_close_timeout(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_start_to_close_timeout = input;
        self
    }
    /// <p>The task list to use for the decisions of the new (continued) workflow execution.</p>
    pub fn task_list(mut self, input: crate::types::TaskList) -> Self {
        self.task_list = Some(input);
        self
    }
    /// <p>The task list to use for the decisions of the new (continued) workflow execution.</p>
    pub fn set_task_list(mut self, input: std::option::Option<crate::types::TaskList>) -> Self {
        self.task_list = input;
        self
    }
    /// <p>The priority of the task to use for the decisions of the new (continued) workflow execution.</p>
    pub fn task_priority(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_priority = Some(input.into());
        self
    }
    /// <p>The priority of the task to use for the decisions of the new (continued) workflow execution.</p>
    pub fn set_task_priority(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_priority = input;
        self
    }
    /// <p>The maximum duration of decision tasks for the new workflow execution.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn task_start_to_close_timeout(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_start_to_close_timeout = Some(input.into());
        self
    }
    /// <p>The maximum duration of decision tasks for the new workflow execution.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn set_task_start_to_close_timeout(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.task_start_to_close_timeout = input;
        self
    }
    /// <p>The policy to use for the child workflow executions of the new execution if it is terminated by calling the <code>TerminateWorkflowExecution</code> action explicitly or due to an expired timeout.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul>
    pub fn child_policy(mut self, input: crate::types::ChildPolicy) -> Self {
        self.child_policy = Some(input);
        self
    }
    /// <p>The policy to use for the child workflow executions of the new execution if it is terminated by calling the <code>TerminateWorkflowExecution</code> action explicitly or due to an expired timeout.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul>
    pub fn set_child_policy(
        mut self,
        input: std::option::Option<crate::types::ChildPolicy>,
    ) -> Self {
        self.child_policy = input;
        self
    }
    /// Appends an item to `tag_list`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>The list of tags associated with the new workflow execution.</p>
    pub fn tag_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.tag_list.unwrap_or_default();
        v.push(input.into());
        self.tag_list = Some(v);
        self
    }
    /// <p>The list of tags associated with the new workflow execution.</p>
    pub fn set_tag_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.tag_list = input;
        self
    }
    /// <p>The workflow type of this execution.</p>
    pub fn workflow_type(mut self, input: crate::types::WorkflowType) -> Self {
        self.workflow_type = Some(input);
        self
    }
    /// <p>The workflow type of this execution.</p>
    pub fn set_workflow_type(
        mut self,
        input: std::option::Option<crate::types::WorkflowType>,
    ) -> Self {
        self.workflow_type = input;
        self
    }
    /// <p>The IAM role to attach to the new (continued) workflow execution.</p>
    pub fn lambda_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.lambda_role = Some(input.into());
        self
    }
    /// <p>The IAM role to attach to the new (continued) workflow execution.</p>
    pub fn set_lambda_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lambda_role = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkflowExecutionContinuedAsNewEventAttributes`](crate::types::WorkflowExecutionContinuedAsNewEventAttributes).
    pub fn build(self) -> crate::types::WorkflowExecutionContinuedAsNewEventAttributes {
        crate::types::WorkflowExecutionContinuedAsNewEventAttributes {
            input: self.input,
            decision_task_completed_event_id: self
                .decision_task_completed_event_id
                .unwrap_or_default(),
            new_execution_run_id: self.new_execution_run_id,
            execution_start_to_close_timeout: self.execution_start_to_close_timeout,
            task_list: self.task_list,
            task_priority: self.task_priority,
            task_start_to_close_timeout: self.task_start_to_close_timeout,
            child_policy: self.child_policy,
            tag_list: self.tag_list,
            workflow_type: self.workflow_type,
            lambda_role: self.lambda_role,
        }
    }
}
