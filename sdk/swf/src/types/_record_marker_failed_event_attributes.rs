// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>RecordMarkerFailed</code> event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecordMarkerFailedEventAttributes {
    /// <p>The marker's name.</p>
    pub marker_name: ::std::string::String,
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub cause: crate::types::RecordMarkerFailedCause,
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RecordMarkerFailed</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub decision_task_completed_event_id: i64,
}
impl RecordMarkerFailedEventAttributes {
    /// <p>The marker's name.</p>
    pub fn marker_name(&self) -> &str {
        use std::ops::Deref;
        self.marker_name.deref()
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn cause(&self) -> &crate::types::RecordMarkerFailedCause {
        &self.cause
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RecordMarkerFailed</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn decision_task_completed_event_id(&self) -> i64 {
        self.decision_task_completed_event_id
    }
}
impl RecordMarkerFailedEventAttributes {
    /// Creates a new builder-style object to manufacture [`RecordMarkerFailedEventAttributes`](crate::types::RecordMarkerFailedEventAttributes).
    pub fn builder() -> crate::types::builders::RecordMarkerFailedEventAttributesBuilder {
        crate::types::builders::RecordMarkerFailedEventAttributesBuilder::default()
    }
}

/// A builder for [`RecordMarkerFailedEventAttributes`](crate::types::RecordMarkerFailedEventAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecordMarkerFailedEventAttributesBuilder {
    pub(crate) marker_name: ::std::option::Option<::std::string::String>,
    pub(crate) cause: ::std::option::Option<crate::types::RecordMarkerFailedCause>,
    pub(crate) decision_task_completed_event_id: ::std::option::Option<i64>,
}
impl RecordMarkerFailedEventAttributesBuilder {
    /// <p>The marker's name.</p>
    /// This field is required.
    pub fn marker_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The marker's name.</p>
    pub fn set_marker_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker_name = input;
        self
    }
    /// <p>The marker's name.</p>
    pub fn get_marker_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker_name
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    /// This field is required.
    pub fn cause(mut self, input: crate::types::RecordMarkerFailedCause) -> Self {
        self.cause = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn set_cause(mut self, input: ::std::option::Option<crate::types::RecordMarkerFailedCause>) -> Self {
        self.cause = input;
        self
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn get_cause(&self) -> &::std::option::Option<crate::types::RecordMarkerFailedCause> {
        &self.cause
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RecordMarkerFailed</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    /// This field is required.
    pub fn decision_task_completed_event_id(mut self, input: i64) -> Self {
        self.decision_task_completed_event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RecordMarkerFailed</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_decision_task_completed_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.decision_task_completed_event_id = input;
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>RecordMarkerFailed</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn get_decision_task_completed_event_id(&self) -> &::std::option::Option<i64> {
        &self.decision_task_completed_event_id
    }
    /// Consumes the builder and constructs a [`RecordMarkerFailedEventAttributes`](crate::types::RecordMarkerFailedEventAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`marker_name`](crate::types::builders::RecordMarkerFailedEventAttributesBuilder::marker_name)
    /// - [`cause`](crate::types::builders::RecordMarkerFailedEventAttributesBuilder::cause)
    pub fn build(self) -> ::std::result::Result<crate::types::RecordMarkerFailedEventAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RecordMarkerFailedEventAttributes {
            marker_name: self.marker_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "marker_name",
                    "marker_name was not specified but it is required when building RecordMarkerFailedEventAttributes",
                )
            })?,
            cause: self.cause.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cause",
                    "cause was not specified but it is required when building RecordMarkerFailedEventAttributes",
                )
            })?,
            decision_task_completed_event_id: self.decision_task_completed_event_id.unwrap_or_default(),
        })
    }
}
