// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>CancelTimer</code> decision.</p>
/// <p> <b>Access Control</b> </p>
/// <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
/// <ul>
/// <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li>
/// <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li>
/// <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li>
/// </ul>
/// <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelTimerDecisionAttributes {
    /// <p> The unique ID of the timer to cancel.</p>
    #[doc(hidden)]
    pub timer_id: std::option::Option<std::string::String>,
}
impl CancelTimerDecisionAttributes {
    /// <p> The unique ID of the timer to cancel.</p>
    pub fn timer_id(&self) -> std::option::Option<&str> {
        self.timer_id.as_deref()
    }
}
impl CancelTimerDecisionAttributes {
    /// Creates a new builder-style object to manufacture [`CancelTimerDecisionAttributes`](crate::types::CancelTimerDecisionAttributes).
    pub fn builder() -> crate::types::builders::CancelTimerDecisionAttributesBuilder {
        crate::types::builders::CancelTimerDecisionAttributesBuilder::default()
    }
}

/// A builder for [`CancelTimerDecisionAttributes`](crate::types::CancelTimerDecisionAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CancelTimerDecisionAttributesBuilder {
    pub(crate) timer_id: std::option::Option<std::string::String>,
}
impl CancelTimerDecisionAttributesBuilder {
    /// <p> The unique ID of the timer to cancel.</p>
    pub fn timer_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.timer_id = Some(input.into());
        self
    }
    /// <p> The unique ID of the timer to cancel.</p>
    pub fn set_timer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.timer_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CancelTimerDecisionAttributes`](crate::types::CancelTimerDecisionAttributes).
    pub fn build(self) -> crate::types::CancelTimerDecisionAttributes {
        crate::types::CancelTimerDecisionAttributes {
            timer_id: self.timer_id,
        }
    }
}
