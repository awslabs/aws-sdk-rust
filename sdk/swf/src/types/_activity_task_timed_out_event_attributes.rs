// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>ActivityTaskTimedOut</code> event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActivityTaskTimedOutEventAttributes {
    /// <p>The type of the timeout that caused this event.</p>
    pub timeout_type: crate::types::ActivityTaskTimeoutType,
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub scheduled_event_id: i64,
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub started_event_id: i64,
    /// <p>Contains the content of the <code>details</code> parameter for the last call made by the activity to <code>RecordActivityTaskHeartbeat</code>.</p>
    pub details: ::std::option::Option<::std::string::String>,
}
impl ActivityTaskTimedOutEventAttributes {
    /// <p>The type of the timeout that caused this event.</p>
    pub fn timeout_type(&self) -> &crate::types::ActivityTaskTimeoutType {
        &self.timeout_type
    }
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn scheduled_event_id(&self) -> i64 {
        self.scheduled_event_id
    }
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn started_event_id(&self) -> i64 {
        self.started_event_id
    }
    /// <p>Contains the content of the <code>details</code> parameter for the last call made by the activity to <code>RecordActivityTaskHeartbeat</code>.</p>
    pub fn details(&self) -> ::std::option::Option<&str> {
        self.details.as_deref()
    }
}
impl ActivityTaskTimedOutEventAttributes {
    /// Creates a new builder-style object to manufacture [`ActivityTaskTimedOutEventAttributes`](crate::types::ActivityTaskTimedOutEventAttributes).
    pub fn builder() -> crate::types::builders::ActivityTaskTimedOutEventAttributesBuilder {
        crate::types::builders::ActivityTaskTimedOutEventAttributesBuilder::default()
    }
}

/// A builder for [`ActivityTaskTimedOutEventAttributes`](crate::types::ActivityTaskTimedOutEventAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ActivityTaskTimedOutEventAttributesBuilder {
    pub(crate) timeout_type: ::std::option::Option<crate::types::ActivityTaskTimeoutType>,
    pub(crate) scheduled_event_id: ::std::option::Option<i64>,
    pub(crate) started_event_id: ::std::option::Option<i64>,
    pub(crate) details: ::std::option::Option<::std::string::String>,
}
impl ActivityTaskTimedOutEventAttributesBuilder {
    /// <p>The type of the timeout that caused this event.</p>
    /// This field is required.
    pub fn timeout_type(mut self, input: crate::types::ActivityTaskTimeoutType) -> Self {
        self.timeout_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the timeout that caused this event.</p>
    pub fn set_timeout_type(mut self, input: ::std::option::Option<crate::types::ActivityTaskTimeoutType>) -> Self {
        self.timeout_type = input;
        self
    }
    /// <p>The type of the timeout that caused this event.</p>
    pub fn get_timeout_type(&self) -> &::std::option::Option<crate::types::ActivityTaskTimeoutType> {
        &self.timeout_type
    }
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    /// This field is required.
    pub fn scheduled_event_id(mut self, input: i64) -> Self {
        self.scheduled_event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_scheduled_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.scheduled_event_id = input;
        self
    }
    /// <p>The ID of the <code>ActivityTaskScheduled</code> event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn get_scheduled_event_id(&self) -> &::std::option::Option<i64> {
        &self.scheduled_event_id
    }
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    /// This field is required.
    pub fn started_event_id(mut self, input: i64) -> Self {
        self.started_event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_started_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_event_id = input;
        self
    }
    /// <p>The ID of the <code>ActivityTaskStarted</code> event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn get_started_event_id(&self) -> &::std::option::Option<i64> {
        &self.started_event_id
    }
    /// <p>Contains the content of the <code>details</code> parameter for the last call made by the activity to <code>RecordActivityTaskHeartbeat</code>.</p>
    pub fn details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the content of the <code>details</code> parameter for the last call made by the activity to <code>RecordActivityTaskHeartbeat</code>.</p>
    pub fn set_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.details = input;
        self
    }
    /// <p>Contains the content of the <code>details</code> parameter for the last call made by the activity to <code>RecordActivityTaskHeartbeat</code>.</p>
    pub fn get_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.details
    }
    /// Consumes the builder and constructs a [`ActivityTaskTimedOutEventAttributes`](crate::types::ActivityTaskTimedOutEventAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`timeout_type`](crate::types::builders::ActivityTaskTimedOutEventAttributesBuilder::timeout_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ActivityTaskTimedOutEventAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActivityTaskTimedOutEventAttributes {
            timeout_type: self.timeout_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timeout_type",
                    "timeout_type was not specified but it is required when building ActivityTaskTimedOutEventAttributes",
                )
            })?,
            scheduled_event_id: self.scheduled_event_id.unwrap_or_default(),
            started_event_id: self.started_event_id.unwrap_or_default(),
            details: self.details,
        })
    }
}
