// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>ExternalWorkflowExecutionSignaled</code> event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExternalWorkflowExecutionSignaledEventAttributes {
    /// <p>The external workflow execution that the signal was delivered to.</p>
    #[doc(hidden)]
    pub workflow_execution: std::option::Option<crate::types::WorkflowExecution>,
    /// <p>The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the <code>SignalExternalWorkflowExecution</code> decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    #[doc(hidden)]
    pub initiated_event_id: i64,
}
impl ExternalWorkflowExecutionSignaledEventAttributes {
    /// <p>The external workflow execution that the signal was delivered to.</p>
    pub fn workflow_execution(&self) -> std::option::Option<&crate::types::WorkflowExecution> {
        self.workflow_execution.as_ref()
    }
    /// <p>The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the <code>SignalExternalWorkflowExecution</code> decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn initiated_event_id(&self) -> i64 {
        self.initiated_event_id
    }
}
impl ExternalWorkflowExecutionSignaledEventAttributes {
    /// Creates a new builder-style object to manufacture [`ExternalWorkflowExecutionSignaledEventAttributes`](crate::types::ExternalWorkflowExecutionSignaledEventAttributes).
    pub fn builder(
    ) -> crate::types::builders::ExternalWorkflowExecutionSignaledEventAttributesBuilder {
        crate::types::builders::ExternalWorkflowExecutionSignaledEventAttributesBuilder::default()
    }
}

/// A builder for [`ExternalWorkflowExecutionSignaledEventAttributes`](crate::types::ExternalWorkflowExecutionSignaledEventAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExternalWorkflowExecutionSignaledEventAttributesBuilder {
    pub(crate) workflow_execution: std::option::Option<crate::types::WorkflowExecution>,
    pub(crate) initiated_event_id: std::option::Option<i64>,
}
impl ExternalWorkflowExecutionSignaledEventAttributesBuilder {
    /// <p>The external workflow execution that the signal was delivered to.</p>
    pub fn workflow_execution(mut self, input: crate::types::WorkflowExecution) -> Self {
        self.workflow_execution = Some(input);
        self
    }
    /// <p>The external workflow execution that the signal was delivered to.</p>
    pub fn set_workflow_execution(
        mut self,
        input: std::option::Option<crate::types::WorkflowExecution>,
    ) -> Self {
        self.workflow_execution = input;
        self
    }
    /// <p>The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the <code>SignalExternalWorkflowExecution</code> decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn initiated_event_id(mut self, input: i64) -> Self {
        self.initiated_event_id = Some(input);
        self
    }
    /// <p>The ID of the <code>SignalExternalWorkflowExecutionInitiated</code> event corresponding to the <code>SignalExternalWorkflowExecution</code> decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_initiated_event_id(mut self, input: std::option::Option<i64>) -> Self {
        self.initiated_event_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ExternalWorkflowExecutionSignaledEventAttributes`](crate::types::ExternalWorkflowExecutionSignaledEventAttributes).
    pub fn build(self) -> crate::types::ExternalWorkflowExecutionSignaledEventAttributes {
        crate::types::ExternalWorkflowExecutionSignaledEventAttributes {
            workflow_execution: self.workflow_execution,
            initiated_event_id: self.initiated_event_id.unwrap_or_default(),
        }
    }
}
