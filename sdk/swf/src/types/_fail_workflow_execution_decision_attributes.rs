// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>FailWorkflowExecution</code> decision.</p>
/// <p> <b>Access Control</b> </p>
/// <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
/// <ul>
/// <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li>
/// <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li>
/// <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li>
/// </ul>
/// <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FailWorkflowExecutionDecisionAttributes {
    /// <p>A descriptive reason for the failure that may help in diagnostics.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
    /// <p> Details of the failure.</p>
    #[doc(hidden)]
    pub details: std::option::Option<std::string::String>,
}
impl FailWorkflowExecutionDecisionAttributes {
    /// <p>A descriptive reason for the failure that may help in diagnostics.</p>
    pub fn reason(&self) -> std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p> Details of the failure.</p>
    pub fn details(&self) -> std::option::Option<&str> {
        self.details.as_deref()
    }
}
impl FailWorkflowExecutionDecisionAttributes {
    /// Creates a new builder-style object to manufacture [`FailWorkflowExecutionDecisionAttributes`](crate::types::FailWorkflowExecutionDecisionAttributes).
    pub fn builder() -> crate::types::builders::FailWorkflowExecutionDecisionAttributesBuilder {
        crate::types::builders::FailWorkflowExecutionDecisionAttributesBuilder::default()
    }
}

/// A builder for [`FailWorkflowExecutionDecisionAttributes`](crate::types::FailWorkflowExecutionDecisionAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FailWorkflowExecutionDecisionAttributesBuilder {
    pub(crate) reason: std::option::Option<std::string::String>,
    pub(crate) details: std::option::Option<std::string::String>,
}
impl FailWorkflowExecutionDecisionAttributesBuilder {
    /// <p>A descriptive reason for the failure that may help in diagnostics.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p>A descriptive reason for the failure that may help in diagnostics.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p> Details of the failure.</p>
    pub fn details(mut self, input: impl Into<std::string::String>) -> Self {
        self.details = Some(input.into());
        self
    }
    /// <p> Details of the failure.</p>
    pub fn set_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.details = input;
        self
    }
    /// Consumes the builder and constructs a [`FailWorkflowExecutionDecisionAttributes`](crate::types::FailWorkflowExecutionDecisionAttributes).
    pub fn build(self) -> crate::types::FailWorkflowExecutionDecisionAttributes {
        crate::types::FailWorkflowExecutionDecisionAttributes {
            reason: self.reason,
            details: self.details,
        }
    }
}
