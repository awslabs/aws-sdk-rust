// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>WorkflowExecutionTerminated</code> event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowExecutionTerminatedEventAttributes {
    /// <p>The reason provided for the termination.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>The details provided for the termination.</p>
    pub details: ::std::option::Option<::std::string::String>,
    /// <p>The policy used for the child workflow executions of this workflow execution.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul>
    pub child_policy: crate::types::ChildPolicy,
    /// <p>If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.</p>
    pub cause: ::std::option::Option<crate::types::WorkflowExecutionTerminatedCause>,
}
impl WorkflowExecutionTerminatedEventAttributes {
    /// <p>The reason provided for the termination.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The details provided for the termination.</p>
    pub fn details(&self) -> ::std::option::Option<&str> {
        self.details.as_deref()
    }
    /// <p>The policy used for the child workflow executions of this workflow execution.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul>
    pub fn child_policy(&self) -> &crate::types::ChildPolicy {
        &self.child_policy
    }
    /// <p>If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.</p>
    pub fn cause(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionTerminatedCause> {
        self.cause.as_ref()
    }
}
impl WorkflowExecutionTerminatedEventAttributes {
    /// Creates a new builder-style object to manufacture [`WorkflowExecutionTerminatedEventAttributes`](crate::types::WorkflowExecutionTerminatedEventAttributes).
    pub fn builder() -> crate::types::builders::WorkflowExecutionTerminatedEventAttributesBuilder {
        crate::types::builders::WorkflowExecutionTerminatedEventAttributesBuilder::default()
    }
}

/// A builder for [`WorkflowExecutionTerminatedEventAttributes`](crate::types::WorkflowExecutionTerminatedEventAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowExecutionTerminatedEventAttributesBuilder {
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<::std::string::String>,
    pub(crate) child_policy: ::std::option::Option<crate::types::ChildPolicy>,
    pub(crate) cause: ::std::option::Option<crate::types::WorkflowExecutionTerminatedCause>,
}
impl WorkflowExecutionTerminatedEventAttributesBuilder {
    /// <p>The reason provided for the termination.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason provided for the termination.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason provided for the termination.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>The details provided for the termination.</p>
    pub fn details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The details provided for the termination.</p>
    pub fn set_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.details = input;
        self
    }
    /// <p>The details provided for the termination.</p>
    pub fn get_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.details
    }
    /// <p>The policy used for the child workflow executions of this workflow execution.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn child_policy(mut self, input: crate::types::ChildPolicy) -> Self {
        self.child_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The policy used for the child workflow executions of this workflow execution.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul>
    pub fn set_child_policy(mut self, input: ::std::option::Option<crate::types::ChildPolicy>) -> Self {
        self.child_policy = input;
        self
    }
    /// <p>The policy used for the child workflow executions of this workflow execution.</p>
    /// <p>The supported child policies are:</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li>
    /// <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li>
    /// <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li>
    /// </ul>
    pub fn get_child_policy(&self) -> &::std::option::Option<crate::types::ChildPolicy> {
        &self.child_policy
    }
    /// <p>If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.</p>
    pub fn cause(mut self, input: crate::types::WorkflowExecutionTerminatedCause) -> Self {
        self.cause = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.</p>
    pub fn set_cause(mut self, input: ::std::option::Option<crate::types::WorkflowExecutionTerminatedCause>) -> Self {
        self.cause = input;
        self
    }
    /// <p>If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.</p>
    pub fn get_cause(&self) -> &::std::option::Option<crate::types::WorkflowExecutionTerminatedCause> {
        &self.cause
    }
    /// Consumes the builder and constructs a [`WorkflowExecutionTerminatedEventAttributes`](crate::types::WorkflowExecutionTerminatedEventAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`child_policy`](crate::types::builders::WorkflowExecutionTerminatedEventAttributesBuilder::child_policy)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::WorkflowExecutionTerminatedEventAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkflowExecutionTerminatedEventAttributes {
            reason: self.reason,
            details: self.details,
            child_policy: self.child_policy.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "child_policy",
                    "child_policy was not specified but it is required when building WorkflowExecutionTerminatedEventAttributes",
                )
            })?,
            cause: self.cause,
        })
    }
}
