// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>SignalExternalWorkflowExecution</code> decision.</p>
/// <p> <b>Access Control</b> </p>
/// <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p>
/// <ul>
/// <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li>
/// <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li>
/// <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li>
/// </ul>
/// <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SignalExternalWorkflowExecutionDecisionAttributes {
    /// <p> The <code>workflowId</code> of the workflow execution to be signaled.</p>
    #[doc(hidden)]
    pub workflow_id: std::option::Option<std::string::String>,
    /// <p>The <code>runId</code> of the workflow execution to be signaled.</p>
    #[doc(hidden)]
    pub run_id: std::option::Option<std::string::String>,
    /// <p> The name of the signal.The target workflow execution uses the signal name and input to process the signal.</p>
    #[doc(hidden)]
    pub signal_name: std::option::Option<std::string::String>,
    /// <p> The input data to be provided with the signal. The target workflow execution uses the signal name and input data to process the signal.</p>
    #[doc(hidden)]
    pub input: std::option::Option<std::string::String>,
    /// <p>The data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    #[doc(hidden)]
    pub control: std::option::Option<std::string::String>,
}
impl SignalExternalWorkflowExecutionDecisionAttributes {
    /// <p> The <code>workflowId</code> of the workflow execution to be signaled.</p>
    pub fn workflow_id(&self) -> std::option::Option<&str> {
        self.workflow_id.as_deref()
    }
    /// <p>The <code>runId</code> of the workflow execution to be signaled.</p>
    pub fn run_id(&self) -> std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p> The name of the signal.The target workflow execution uses the signal name and input to process the signal.</p>
    pub fn signal_name(&self) -> std::option::Option<&str> {
        self.signal_name.as_deref()
    }
    /// <p> The input data to be provided with the signal. The target workflow execution uses the signal name and input data to process the signal.</p>
    pub fn input(&self) -> std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>The data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    pub fn control(&self) -> std::option::Option<&str> {
        self.control.as_deref()
    }
}
impl SignalExternalWorkflowExecutionDecisionAttributes {
    /// Creates a new builder-style object to manufacture [`SignalExternalWorkflowExecutionDecisionAttributes`](crate::types::SignalExternalWorkflowExecutionDecisionAttributes).
    pub fn builder(
    ) -> crate::types::builders::SignalExternalWorkflowExecutionDecisionAttributesBuilder {
        crate::types::builders::SignalExternalWorkflowExecutionDecisionAttributesBuilder::default()
    }
}

/// A builder for [`SignalExternalWorkflowExecutionDecisionAttributes`](crate::types::SignalExternalWorkflowExecutionDecisionAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SignalExternalWorkflowExecutionDecisionAttributesBuilder {
    pub(crate) workflow_id: std::option::Option<std::string::String>,
    pub(crate) run_id: std::option::Option<std::string::String>,
    pub(crate) signal_name: std::option::Option<std::string::String>,
    pub(crate) input: std::option::Option<std::string::String>,
    pub(crate) control: std::option::Option<std::string::String>,
}
impl SignalExternalWorkflowExecutionDecisionAttributesBuilder {
    /// <p> The <code>workflowId</code> of the workflow execution to be signaled.</p>
    pub fn workflow_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workflow_id = Some(input.into());
        self
    }
    /// <p> The <code>workflowId</code> of the workflow execution to be signaled.</p>
    pub fn set_workflow_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workflow_id = input;
        self
    }
    /// <p>The <code>runId</code> of the workflow execution to be signaled.</p>
    pub fn run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.run_id = Some(input.into());
        self
    }
    /// <p>The <code>runId</code> of the workflow execution to be signaled.</p>
    pub fn set_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p> The name of the signal.The target workflow execution uses the signal name and input to process the signal.</p>
    pub fn signal_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.signal_name = Some(input.into());
        self
    }
    /// <p> The name of the signal.The target workflow execution uses the signal name and input to process the signal.</p>
    pub fn set_signal_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.signal_name = input;
        self
    }
    /// <p> The input data to be provided with the signal. The target workflow execution uses the signal name and input data to process the signal.</p>
    pub fn input(mut self, input: impl Into<std::string::String>) -> Self {
        self.input = Some(input.into());
        self
    }
    /// <p> The input data to be provided with the signal. The target workflow execution uses the signal name and input data to process the signal.</p>
    pub fn set_input(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>The data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    pub fn control(mut self, input: impl Into<std::string::String>) -> Self {
        self.control = Some(input.into());
        self
    }
    /// <p>The data attached to the event that can be used by the decider in subsequent decision tasks.</p>
    pub fn set_control(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.control = input;
        self
    }
    /// Consumes the builder and constructs a [`SignalExternalWorkflowExecutionDecisionAttributes`](crate::types::SignalExternalWorkflowExecutionDecisionAttributes).
    pub fn build(self) -> crate::types::SignalExternalWorkflowExecutionDecisionAttributes {
        crate::types::SignalExternalWorkflowExecutionDecisionAttributes {
            workflow_id: self.workflow_id,
            run_id: self.run_id,
            signal_name: self.signal_name,
            input: self.input,
            control: self.control,
        }
    }
}
