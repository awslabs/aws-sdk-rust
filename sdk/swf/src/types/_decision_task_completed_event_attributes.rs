// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>DecisionTaskCompleted</code> event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DecisionTaskCompletedEventAttributes {
    /// <p>User defined context for the workflow execution.</p>
    pub execution_context: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub scheduled_event_id: i64,
    /// <p>The ID of the <code>DecisionTaskStarted</code> event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub started_event_id: i64,
    /// <p>Represents a task list.</p>
    pub task_list: ::std::option::Option<crate::types::TaskList>,
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub task_list_schedule_to_start_timeout: ::std::option::Option<::std::string::String>,
}
impl DecisionTaskCompletedEventAttributes {
    /// <p>User defined context for the workflow execution.</p>
    pub fn execution_context(&self) -> ::std::option::Option<&str> {
        self.execution_context.as_deref()
    }
    /// <p>The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn scheduled_event_id(&self) -> i64 {
        self.scheduled_event_id
    }
    /// <p>The ID of the <code>DecisionTaskStarted</code> event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn started_event_id(&self) -> i64 {
        self.started_event_id
    }
    /// <p>Represents a task list.</p>
    pub fn task_list(&self) -> ::std::option::Option<&crate::types::TaskList> {
        self.task_list.as_ref()
    }
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub fn task_list_schedule_to_start_timeout(&self) -> ::std::option::Option<&str> {
        self.task_list_schedule_to_start_timeout.as_deref()
    }
}
impl DecisionTaskCompletedEventAttributes {
    /// Creates a new builder-style object to manufacture [`DecisionTaskCompletedEventAttributes`](crate::types::DecisionTaskCompletedEventAttributes).
    pub fn builder() -> crate::types::builders::DecisionTaskCompletedEventAttributesBuilder {
        crate::types::builders::DecisionTaskCompletedEventAttributesBuilder::default()
    }
}

/// A builder for [`DecisionTaskCompletedEventAttributes`](crate::types::DecisionTaskCompletedEventAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DecisionTaskCompletedEventAttributesBuilder {
    pub(crate) execution_context: ::std::option::Option<::std::string::String>,
    pub(crate) scheduled_event_id: ::std::option::Option<i64>,
    pub(crate) started_event_id: ::std::option::Option<i64>,
    pub(crate) task_list: ::std::option::Option<crate::types::TaskList>,
    pub(crate) task_list_schedule_to_start_timeout: ::std::option::Option<::std::string::String>,
}
impl DecisionTaskCompletedEventAttributesBuilder {
    /// <p>User defined context for the workflow execution.</p>
    pub fn execution_context(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_context = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>User defined context for the workflow execution.</p>
    pub fn set_execution_context(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_context = input;
        self
    }
    /// <p>User defined context for the workflow execution.</p>
    pub fn get_execution_context(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_context
    }
    /// <p>The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    /// This field is required.
    pub fn scheduled_event_id(mut self, input: i64) -> Self {
        self.scheduled_event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_scheduled_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.scheduled_event_id = input;
        self
    }
    /// <p>The ID of the <code>DecisionTaskScheduled</code> event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn get_scheduled_event_id(&self) -> &::std::option::Option<i64> {
        &self.scheduled_event_id
    }
    /// <p>The ID of the <code>DecisionTaskStarted</code> event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    /// This field is required.
    pub fn started_event_id(mut self, input: i64) -> Self {
        self.started_event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the <code>DecisionTaskStarted</code> event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_started_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_event_id = input;
        self
    }
    /// <p>The ID of the <code>DecisionTaskStarted</code> event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn get_started_event_id(&self) -> &::std::option::Option<i64> {
        &self.started_event_id
    }
    /// <p>Represents a task list.</p>
    pub fn task_list(mut self, input: crate::types::TaskList) -> Self {
        self.task_list = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents a task list.</p>
    pub fn set_task_list(mut self, input: ::std::option::Option<crate::types::TaskList>) -> Self {
        self.task_list = input;
        self
    }
    /// <p>Represents a task list.</p>
    pub fn get_task_list(&self) -> &::std::option::Option<crate::types::TaskList> {
        &self.task_list
    }
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub fn task_list_schedule_to_start_timeout(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_list_schedule_to_start_timeout = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub fn set_task_list_schedule_to_start_timeout(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_list_schedule_to_start_timeout = input;
        self
    }
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub fn get_task_list_schedule_to_start_timeout(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_list_schedule_to_start_timeout
    }
    /// Consumes the builder and constructs a [`DecisionTaskCompletedEventAttributes`](crate::types::DecisionTaskCompletedEventAttributes).
    pub fn build(self) -> crate::types::DecisionTaskCompletedEventAttributes {
        crate::types::DecisionTaskCompletedEventAttributes {
            execution_context: self.execution_context,
            scheduled_event_id: self.scheduled_event_id.unwrap_or_default(),
            started_event_id: self.started_event_id.unwrap_or_default(),
            task_list: self.task_list,
            task_list_schedule_to_start_timeout: self.task_list_schedule_to_start_timeout,
        }
    }
}
