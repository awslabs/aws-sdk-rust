// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkflowTypeFilter {
    /// <p> Name of the workflow type.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Version of the workflow type.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl WorkflowTypeFilter {
    /// <p> Name of the workflow type.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Version of the workflow type.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl WorkflowTypeFilter {
    /// Creates a new builder-style object to manufacture [`WorkflowTypeFilter`](crate::types::WorkflowTypeFilter).
    pub fn builder() -> crate::types::builders::WorkflowTypeFilterBuilder {
        crate::types::builders::WorkflowTypeFilterBuilder::default()
    }
}

/// A builder for [`WorkflowTypeFilter`](crate::types::WorkflowTypeFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkflowTypeFilterBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl WorkflowTypeFilterBuilder {
    /// <p> Name of the workflow type.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> Name of the workflow type.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Version of the workflow type.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>Version of the workflow type.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkflowTypeFilter`](crate::types::WorkflowTypeFilter).
    pub fn build(self) -> crate::types::WorkflowTypeFilter {
        crate::types::WorkflowTypeFilter {
            name: self.name,
            version: self.version,
        }
    }
}
