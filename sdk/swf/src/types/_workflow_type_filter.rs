// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowTypeFilter {
    /// <p> Name of the workflow type.</p>
    pub name: ::std::string::String,
    /// <p>Version of the workflow type.</p>
    pub version: ::std::option::Option<::std::string::String>,
}
impl WorkflowTypeFilter {
    /// <p> Name of the workflow type.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Version of the workflow type.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl WorkflowTypeFilter {
    /// Creates a new builder-style object to manufacture [`WorkflowTypeFilter`](crate::types::WorkflowTypeFilter).
    pub fn builder() -> crate::types::builders::WorkflowTypeFilterBuilder {
        crate::types::builders::WorkflowTypeFilterBuilder::default()
    }
}

/// A builder for [`WorkflowTypeFilter`](crate::types::WorkflowTypeFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowTypeFilterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl WorkflowTypeFilterBuilder {
    /// <p> Name of the workflow type.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Name of the workflow type.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> Name of the workflow type.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Version of the workflow type.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version of the workflow type.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>Version of the workflow type.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`WorkflowTypeFilter`](crate::types::WorkflowTypeFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::WorkflowTypeFilterBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkflowTypeFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkflowTypeFilter {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building WorkflowTypeFilter",
                )
            })?,
            version: self.version,
        })
    }
}
