// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details about the <code>DecisionTaskScheduled</code> event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DecisionTaskScheduledEventAttributes {
    /// <p>The name of the task list in which the decision task was scheduled.</p>
    pub task_list: ::std::option::Option<crate::types::TaskList>,
    /// <p> A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    /// <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    pub task_priority: ::std::option::Option<::std::string::String>,
    /// <p>The maximum duration for this decision task. The task is considered timed out if it doesn't completed within this duration.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub start_to_close_timeout: ::std::option::Option<::std::string::String>,
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub schedule_to_start_timeout: ::std::option::Option<::std::string::String>,
}
impl DecisionTaskScheduledEventAttributes {
    /// <p>The name of the task list in which the decision task was scheduled.</p>
    pub fn task_list(&self) -> ::std::option::Option<&crate::types::TaskList> {
        self.task_list.as_ref()
    }
    /// <p> A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    /// <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    pub fn task_priority(&self) -> ::std::option::Option<&str> {
        self.task_priority.as_deref()
    }
    /// <p>The maximum duration for this decision task. The task is considered timed out if it doesn't completed within this duration.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn start_to_close_timeout(&self) -> ::std::option::Option<&str> {
        self.start_to_close_timeout.as_deref()
    }
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub fn schedule_to_start_timeout(&self) -> ::std::option::Option<&str> {
        self.schedule_to_start_timeout.as_deref()
    }
}
impl DecisionTaskScheduledEventAttributes {
    /// Creates a new builder-style object to manufacture [`DecisionTaskScheduledEventAttributes`](crate::types::DecisionTaskScheduledEventAttributes).
    pub fn builder() -> crate::types::builders::DecisionTaskScheduledEventAttributesBuilder {
        crate::types::builders::DecisionTaskScheduledEventAttributesBuilder::default()
    }
}

/// A builder for [`DecisionTaskScheduledEventAttributes`](crate::types::DecisionTaskScheduledEventAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DecisionTaskScheduledEventAttributesBuilder {
    pub(crate) task_list: ::std::option::Option<crate::types::TaskList>,
    pub(crate) task_priority: ::std::option::Option<::std::string::String>,
    pub(crate) start_to_close_timeout: ::std::option::Option<::std::string::String>,
    pub(crate) schedule_to_start_timeout: ::std::option::Option<::std::string::String>,
}
impl DecisionTaskScheduledEventAttributesBuilder {
    /// <p>The name of the task list in which the decision task was scheduled.</p>
    /// This field is required.
    pub fn task_list(mut self, input: crate::types::TaskList) -> Self {
        self.task_list = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the task list in which the decision task was scheduled.</p>
    pub fn set_task_list(mut self, input: ::std::option::Option<crate::types::TaskList>) -> Self {
        self.task_list = input;
        self
    }
    /// <p>The name of the task list in which the decision task was scheduled.</p>
    pub fn get_task_list(&self) -> &::std::option::Option<crate::types::TaskList> {
        &self.task_list
    }
    /// <p> A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    /// <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    pub fn task_priority(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_priority = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    /// <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    pub fn set_task_priority(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_priority = input;
        self
    }
    /// <p> A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p>
    /// <p>For more information about setting task priority, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    pub fn get_task_priority(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_priority
    }
    /// <p>The maximum duration for this decision task. The task is considered timed out if it doesn't completed within this duration.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn start_to_close_timeout(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_to_close_timeout = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum duration for this decision task. The task is considered timed out if it doesn't completed within this duration.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn set_start_to_close_timeout(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_to_close_timeout = input;
        self
    }
    /// <p>The maximum duration for this decision task. The task is considered timed out if it doesn't completed within this duration.</p>
    /// <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>
    pub fn get_start_to_close_timeout(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_to_close_timeout
    }
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub fn schedule_to_start_timeout(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schedule_to_start_timeout = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub fn set_schedule_to_start_timeout(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schedule_to_start_timeout = input;
        self
    }
    /// <p>The maximum amount of time the decision task can wait to be assigned to a worker.</p>
    pub fn get_schedule_to_start_timeout(&self) -> &::std::option::Option<::std::string::String> {
        &self.schedule_to_start_timeout
    }
    /// Consumes the builder and constructs a [`DecisionTaskScheduledEventAttributes`](crate::types::DecisionTaskScheduledEventAttributes).
    pub fn build(self) -> crate::types::DecisionTaskScheduledEventAttributes {
        crate::types::DecisionTaskScheduledEventAttributes {
            task_list: self.task_list,
            task_priority: self.task_priority,
            start_to_close_timeout: self.start_to_close_timeout,
            schedule_to_start_timeout: self.schedule_to_start_timeout,
        }
    }
}
