// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Event within a workflow execution. A history event can be one of these types:</p>
/// <ul>
/// <li> <p> <code>ActivityTaskCancelRequested</code> – A <code>RequestCancelActivityTask</code> decision was received by the system.</p> </li>
/// <li> <p> <code>ActivityTaskCanceled</code> – The activity task was successfully canceled.</p> </li>
/// <li> <p> <code>ActivityTaskCompleted</code> – An activity worker successfully completed an activity task by calling <code>RespondActivityTaskCompleted</code>.</p> </li>
/// <li> <p> <code>ActivityTaskFailed</code> – An activity worker failed an activity task by calling <code>RespondActivityTaskFailed</code>.</p> </li>
/// <li> <p> <code>ActivityTaskScheduled</code> – An activity task was scheduled for execution.</p> </li>
/// <li> <p> <code>ActivityTaskStarted</code> – The scheduled activity task was dispatched to a worker.</p> </li>
/// <li> <p> <code>ActivityTaskTimedOut</code> – The activity task timed out.</p> </li>
/// <li> <p> <code>CancelTimerFailed</code> – Failed to process CancelTimer decision. This happens when the decision isn't configured properly, for example no timer exists with the specified timer Id.</p> </li>
/// <li> <p> <code>CancelWorkflowExecutionFailed</code> – A request to cancel a workflow execution failed.</p> </li>
/// <li> <p> <code>ChildWorkflowExecutionCanceled</code> – A child workflow execution, started by this workflow execution, was canceled and closed.</p> </li>
/// <li> <p> <code>ChildWorkflowExecutionCompleted</code> – A child workflow execution, started by this workflow execution, completed successfully and was closed.</p> </li>
/// <li> <p> <code>ChildWorkflowExecutionFailed</code> – A child workflow execution, started by this workflow execution, failed to complete successfully and was closed.</p> </li>
/// <li> <p> <code>ChildWorkflowExecutionStarted</code> – A child workflow execution was successfully started.</p> </li>
/// <li> <p> <code>ChildWorkflowExecutionTerminated</code> – A child workflow execution, started by this workflow execution, was terminated.</p> </li>
/// <li> <p> <code>ChildWorkflowExecutionTimedOut</code> – A child workflow execution, started by this workflow execution, timed out and was closed.</p> </li>
/// <li> <p> <code>CompleteWorkflowExecutionFailed</code> – The workflow execution failed to complete.</p> </li>
/// <li> <p> <code>ContinueAsNewWorkflowExecutionFailed</code> – The workflow execution failed to complete after being continued as a new workflow execution.</p> </li>
/// <li> <p> <code>DecisionTaskCompleted</code> – The decider successfully completed a decision task by calling <code>RespondDecisionTaskCompleted</code>.</p> </li>
/// <li> <p> <code>DecisionTaskScheduled</code> – A decision task was scheduled for the workflow execution.</p> </li>
/// <li> <p> <code>DecisionTaskStarted</code> – The decision task was dispatched to a decider.</p> </li>
/// <li> <p> <code>DecisionTaskTimedOut</code> – The decision task timed out.</p> </li>
/// <li> <p> <code>ExternalWorkflowExecutionCancelRequested</code> – Request to cancel an external workflow execution was successfully delivered to the target execution.</p> </li>
/// <li> <p> <code>ExternalWorkflowExecutionSignaled</code> – A signal, requested by this workflow execution, was successfully delivered to the target external workflow execution.</p> </li>
/// <li> <p> <code>FailWorkflowExecutionFailed</code> – A request to mark a workflow execution as failed, itself failed.</p> </li>
/// <li> <p> <code>MarkerRecorded</code> – A marker was recorded in the workflow history as the result of a <code>RecordMarker</code> decision.</p> </li>
/// <li> <p> <code>RecordMarkerFailed</code> – A <code>RecordMarker</code> decision was returned as failed.</p> </li>
/// <li> <p> <code>RequestCancelActivityTaskFailed</code> – Failed to process RequestCancelActivityTask decision. This happens when the decision isn't configured properly.</p> </li>
/// <li> <p> <code>RequestCancelExternalWorkflowExecutionFailed</code> – Request to cancel an external workflow execution failed.</p> </li>
/// <li> <p> <code>RequestCancelExternalWorkflowExecutionInitiated</code> – A request was made to request the cancellation of an external workflow execution.</p> </li>
/// <li> <p> <code>ScheduleActivityTaskFailed</code> – Failed to process ScheduleActivityTask decision. This happens when the decision isn't configured properly, for example the activity type specified isn't registered.</p> </li>
/// <li> <p> <code>SignalExternalWorkflowExecutionFailed</code> – The request to signal an external workflow execution failed.</p> </li>
/// <li> <p> <code>SignalExternalWorkflowExecutionInitiated</code> – A request to signal an external workflow was made.</p> </li>
/// <li> <p> <code>StartActivityTaskFailed</code> – A scheduled activity task failed to start.</p> </li>
/// <li> <p> <code>StartChildWorkflowExecutionFailed</code> – Failed to process StartChildWorkflowExecution decision. This happens when the decision isn't configured properly, for example the workflow type specified isn't registered.</p> </li>
/// <li> <p> <code>StartChildWorkflowExecutionInitiated</code> – A request was made to start a child workflow execution.</p> </li>
/// <li> <p> <code>StartTimerFailed</code> – Failed to process StartTimer decision. This happens when the decision isn't configured properly, for example a timer already exists with the specified timer Id.</p> </li>
/// <li> <p> <code>TimerCanceled</code> – A timer, previously started for this workflow execution, was successfully canceled.</p> </li>
/// <li> <p> <code>TimerFired</code> – A timer, previously started for this workflow execution, fired.</p> </li>
/// <li> <p> <code>TimerStarted</code> – A timer was started for the workflow execution due to a <code>StartTimer</code> decision.</p> </li>
/// <li> <p> <code>WorkflowExecutionCancelRequested</code> – A request to cancel this workflow execution was made.</p> </li>
/// <li> <p> <code>WorkflowExecutionCanceled</code> – The workflow execution was successfully canceled and closed.</p> </li>
/// <li> <p> <code>WorkflowExecutionCompleted</code> – The workflow execution was closed due to successful completion.</p> </li>
/// <li> <p> <code>WorkflowExecutionContinuedAsNew</code> – The workflow execution was closed and a new execution of the same type was created with the same workflowId.</p> </li>
/// <li> <p> <code>WorkflowExecutionFailed</code> – The workflow execution closed due to a failure.</p> </li>
/// <li> <p> <code>WorkflowExecutionSignaled</code> – An external signal was received for the workflow execution.</p> </li>
/// <li> <p> <code>WorkflowExecutionStarted</code> – The workflow execution was started.</p> </li>
/// <li> <p> <code>WorkflowExecutionTerminated</code> – The workflow execution was terminated.</p> </li>
/// <li> <p> <code>WorkflowExecutionTimedOut</code> – The workflow execution was closed because a time out was exceeded.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HistoryEvent {
    /// <p>The date and time when the event occurred.</p>
    pub event_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The type of the history event.</p>
    pub event_type: crate::types::EventType,
    /// <p>The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.</p>
    pub event_id: i64,
    /// <p>If the event is of type <code>WorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub workflow_execution_started_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionStartedEventAttributes>,
    /// <p>If the event is of type <code>WorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub workflow_execution_completed_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionCompletedEventAttributes>,
    /// <p>If the event is of type <code>CompleteWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub complete_workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::CompleteWorkflowExecutionFailedEventAttributes>,
    /// <p>If the event is of type <code>WorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionFailedEventAttributes>,
    /// <p>If the event is of type <code>FailWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fail_workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::FailWorkflowExecutionFailedEventAttributes>,
    /// <p>If the event is of type <code>WorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub workflow_execution_timed_out_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionTimedOutEventAttributes>,
    /// <p>If the event is of type <code>WorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub workflow_execution_canceled_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionCanceledEventAttributes>,
    /// <p>If the event is of type <code>CancelWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub cancel_workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::CancelWorkflowExecutionFailedEventAttributes>,
    /// <p>If the event is of type <code>WorkflowExecutionContinuedAsNew</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub workflow_execution_continued_as_new_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionContinuedAsNewEventAttributes>,
    /// <p>If the event is of type <code>ContinueAsNewWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub continue_as_new_workflow_execution_failed_event_attributes:
        ::std::option::Option<crate::types::ContinueAsNewWorkflowExecutionFailedEventAttributes>,
    /// <p>If the event is of type <code>WorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub workflow_execution_terminated_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionTerminatedEventAttributes>,
    /// <p>If the event is of type <code>WorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub workflow_execution_cancel_requested_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionCancelRequestedEventAttributes>,
    /// <p>If the event is of type <code>DecisionTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub decision_task_scheduled_event_attributes: ::std::option::Option<crate::types::DecisionTaskScheduledEventAttributes>,
    /// <p>If the event is of type <code>DecisionTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub decision_task_started_event_attributes: ::std::option::Option<crate::types::DecisionTaskStartedEventAttributes>,
    /// <p>If the event is of type <code>DecisionTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub decision_task_completed_event_attributes: ::std::option::Option<crate::types::DecisionTaskCompletedEventAttributes>,
    /// <p>If the event is of type <code>DecisionTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub decision_task_timed_out_event_attributes: ::std::option::Option<crate::types::DecisionTaskTimedOutEventAttributes>,
    /// <p>If the event is of type <code>ActivityTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub activity_task_scheduled_event_attributes: ::std::option::Option<crate::types::ActivityTaskScheduledEventAttributes>,
    /// <p>If the event is of type <code>ActivityTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub activity_task_started_event_attributes: ::std::option::Option<crate::types::ActivityTaskStartedEventAttributes>,
    /// <p>If the event is of type <code>ActivityTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub activity_task_completed_event_attributes: ::std::option::Option<crate::types::ActivityTaskCompletedEventAttributes>,
    /// <p>If the event is of type <code>ActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub activity_task_failed_event_attributes: ::std::option::Option<crate::types::ActivityTaskFailedEventAttributes>,
    /// <p>If the event is of type <code>ActivityTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub activity_task_timed_out_event_attributes: ::std::option::Option<crate::types::ActivityTaskTimedOutEventAttributes>,
    /// <p>If the event is of type <code>ActivityTaskCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub activity_task_canceled_event_attributes: ::std::option::Option<crate::types::ActivityTaskCanceledEventAttributes>,
    /// <p>If the event is of type <code>ActivityTaskcancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub activity_task_cancel_requested_event_attributes: ::std::option::Option<crate::types::ActivityTaskCancelRequestedEventAttributes>,
    /// <p>If the event is of type <code>WorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub workflow_execution_signaled_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionSignaledEventAttributes>,
    /// <p>If the event is of type <code>MarkerRecorded</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub marker_recorded_event_attributes: ::std::option::Option<crate::types::MarkerRecordedEventAttributes>,
    /// <p>If the event is of type <code>DecisionTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub record_marker_failed_event_attributes: ::std::option::Option<crate::types::RecordMarkerFailedEventAttributes>,
    /// <p>If the event is of type <code>TimerStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub timer_started_event_attributes: ::std::option::Option<crate::types::TimerStartedEventAttributes>,
    /// <p>If the event is of type <code>TimerFired</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub timer_fired_event_attributes: ::std::option::Option<crate::types::TimerFiredEventAttributes>,
    /// <p>If the event is of type <code>TimerCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub timer_canceled_event_attributes: ::std::option::Option<crate::types::TimerCanceledEventAttributes>,
    /// <p>If the event is of type <code>StartChildWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub start_child_workflow_execution_initiated_event_attributes:
        ::std::option::Option<crate::types::StartChildWorkflowExecutionInitiatedEventAttributes>,
    /// <p>If the event is of type <code>ChildWorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub child_workflow_execution_started_event_attributes: ::std::option::Option<crate::types::ChildWorkflowExecutionStartedEventAttributes>,
    /// <p>If the event is of type <code>ChildWorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub child_workflow_execution_completed_event_attributes: ::std::option::Option<crate::types::ChildWorkflowExecutionCompletedEventAttributes>,
    /// <p>If the event is of type <code>ChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub child_workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::ChildWorkflowExecutionFailedEventAttributes>,
    /// <p>If the event is of type <code>ChildWorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub child_workflow_execution_timed_out_event_attributes: ::std::option::Option<crate::types::ChildWorkflowExecutionTimedOutEventAttributes>,
    /// <p>If the event is of type <code>ChildWorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub child_workflow_execution_canceled_event_attributes: ::std::option::Option<crate::types::ChildWorkflowExecutionCanceledEventAttributes>,
    /// <p>If the event is of type <code>ChildWorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub child_workflow_execution_terminated_event_attributes: ::std::option::Option<crate::types::ChildWorkflowExecutionTerminatedEventAttributes>,
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub signal_external_workflow_execution_initiated_event_attributes:
        ::std::option::Option<crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes>,
    /// <p>If the event is of type <code>ExternalWorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub external_workflow_execution_signaled_event_attributes: ::std::option::Option<crate::types::ExternalWorkflowExecutionSignaledEventAttributes>,
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub signal_external_workflow_execution_failed_event_attributes:
        ::std::option::Option<crate::types::SignalExternalWorkflowExecutionFailedEventAttributes>,
    /// <p>If the event is of type <code>ExternalWorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types. </p>
    pub external_workflow_execution_cancel_requested_event_attributes:
        ::std::option::Option<crate::types::ExternalWorkflowExecutionCancelRequestedEventAttributes>,
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub request_cancel_external_workflow_execution_initiated_event_attributes:
        ::std::option::Option<crate::types::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes>,
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub request_cancel_external_workflow_execution_failed_event_attributes:
        ::std::option::Option<crate::types::RequestCancelExternalWorkflowExecutionFailedEventAttributes>,
    /// <p>If the event is of type <code>ScheduleActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub schedule_activity_task_failed_event_attributes: ::std::option::Option<crate::types::ScheduleActivityTaskFailedEventAttributes>,
    /// <p>If the event is of type <code>RequestCancelActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub request_cancel_activity_task_failed_event_attributes: ::std::option::Option<crate::types::RequestCancelActivityTaskFailedEventAttributes>,
    /// <p>If the event is of type <code>StartTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub start_timer_failed_event_attributes: ::std::option::Option<crate::types::StartTimerFailedEventAttributes>,
    /// <p>If the event is of type <code>CancelTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub cancel_timer_failed_event_attributes: ::std::option::Option<crate::types::CancelTimerFailedEventAttributes>,
    /// <p>If the event is of type <code>StartChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub start_child_workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::StartChildWorkflowExecutionFailedEventAttributes>,
    /// <p>Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.</p>
    pub lambda_function_scheduled_event_attributes: ::std::option::Option<crate::types::LambdaFunctionScheduledEventAttributes>,
    /// <p>Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.</p>
    pub lambda_function_started_event_attributes: ::std::option::Option<crate::types::LambdaFunctionStartedEventAttributes>,
    /// <p>Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.</p>
    pub lambda_function_completed_event_attributes: ::std::option::Option<crate::types::LambdaFunctionCompletedEventAttributes>,
    /// <p>Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub lambda_function_failed_event_attributes: ::std::option::Option<crate::types::LambdaFunctionFailedEventAttributes>,
    /// <p>Provides the details of the <code>LambdaFunctionTimedOut</code> event. It isn't set for other event types.</p>
    pub lambda_function_timed_out_event_attributes: ::std::option::Option<crate::types::LambdaFunctionTimedOutEventAttributes>,
    /// <p>Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub schedule_lambda_function_failed_event_attributes: ::std::option::Option<crate::types::ScheduleLambdaFunctionFailedEventAttributes>,
    /// <p>Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub start_lambda_function_failed_event_attributes: ::std::option::Option<crate::types::StartLambdaFunctionFailedEventAttributes>,
}
impl HistoryEvent {
    /// <p>The date and time when the event occurred.</p>
    pub fn event_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.event_timestamp
    }
    /// <p>The type of the history event.</p>
    pub fn event_type(&self) -> &crate::types::EventType {
        &self.event_type
    }
    /// <p>The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.</p>
    pub fn event_id(&self) -> i64 {
        self.event_id
    }
    /// <p>If the event is of type <code>WorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_started_event_attributes(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionStartedEventAttributes> {
        self.workflow_execution_started_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>WorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_completed_event_attributes(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionCompletedEventAttributes> {
        self.workflow_execution_completed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>CompleteWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn complete_workflow_execution_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::CompleteWorkflowExecutionFailedEventAttributes> {
        self.complete_workflow_execution_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>WorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_failed_event_attributes(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionFailedEventAttributes> {
        self.workflow_execution_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>FailWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn fail_workflow_execution_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::FailWorkflowExecutionFailedEventAttributes> {
        self.fail_workflow_execution_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>WorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_timed_out_event_attributes(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionTimedOutEventAttributes> {
        self.workflow_execution_timed_out_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>WorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_canceled_event_attributes(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionCanceledEventAttributes> {
        self.workflow_execution_canceled_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>CancelWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn cancel_workflow_execution_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::CancelWorkflowExecutionFailedEventAttributes> {
        self.cancel_workflow_execution_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>WorkflowExecutionContinuedAsNew</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_continued_as_new_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::WorkflowExecutionContinuedAsNewEventAttributes> {
        self.workflow_execution_continued_as_new_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ContinueAsNewWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn continue_as_new_workflow_execution_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ContinueAsNewWorkflowExecutionFailedEventAttributes> {
        self.continue_as_new_workflow_execution_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>WorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_terminated_event_attributes(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionTerminatedEventAttributes> {
        self.workflow_execution_terminated_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>WorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_cancel_requested_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::WorkflowExecutionCancelRequestedEventAttributes> {
        self.workflow_execution_cancel_requested_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>DecisionTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn decision_task_scheduled_event_attributes(&self) -> ::std::option::Option<&crate::types::DecisionTaskScheduledEventAttributes> {
        self.decision_task_scheduled_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>DecisionTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn decision_task_started_event_attributes(&self) -> ::std::option::Option<&crate::types::DecisionTaskStartedEventAttributes> {
        self.decision_task_started_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>DecisionTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn decision_task_completed_event_attributes(&self) -> ::std::option::Option<&crate::types::DecisionTaskCompletedEventAttributes> {
        self.decision_task_completed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>DecisionTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn decision_task_timed_out_event_attributes(&self) -> ::std::option::Option<&crate::types::DecisionTaskTimedOutEventAttributes> {
        self.decision_task_timed_out_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ActivityTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_scheduled_event_attributes(&self) -> ::std::option::Option<&crate::types::ActivityTaskScheduledEventAttributes> {
        self.activity_task_scheduled_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ActivityTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_started_event_attributes(&self) -> ::std::option::Option<&crate::types::ActivityTaskStartedEventAttributes> {
        self.activity_task_started_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ActivityTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_completed_event_attributes(&self) -> ::std::option::Option<&crate::types::ActivityTaskCompletedEventAttributes> {
        self.activity_task_completed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_failed_event_attributes(&self) -> ::std::option::Option<&crate::types::ActivityTaskFailedEventAttributes> {
        self.activity_task_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ActivityTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_timed_out_event_attributes(&self) -> ::std::option::Option<&crate::types::ActivityTaskTimedOutEventAttributes> {
        self.activity_task_timed_out_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ActivityTaskCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_canceled_event_attributes(&self) -> ::std::option::Option<&crate::types::ActivityTaskCanceledEventAttributes> {
        self.activity_task_canceled_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ActivityTaskcancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_cancel_requested_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ActivityTaskCancelRequestedEventAttributes> {
        self.activity_task_cancel_requested_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>WorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_signaled_event_attributes(&self) -> ::std::option::Option<&crate::types::WorkflowExecutionSignaledEventAttributes> {
        self.workflow_execution_signaled_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>MarkerRecorded</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn marker_recorded_event_attributes(&self) -> ::std::option::Option<&crate::types::MarkerRecordedEventAttributes> {
        self.marker_recorded_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>DecisionTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn record_marker_failed_event_attributes(&self) -> ::std::option::Option<&crate::types::RecordMarkerFailedEventAttributes> {
        self.record_marker_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>TimerStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn timer_started_event_attributes(&self) -> ::std::option::Option<&crate::types::TimerStartedEventAttributes> {
        self.timer_started_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>TimerFired</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn timer_fired_event_attributes(&self) -> ::std::option::Option<&crate::types::TimerFiredEventAttributes> {
        self.timer_fired_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>TimerCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn timer_canceled_event_attributes(&self) -> ::std::option::Option<&crate::types::TimerCanceledEventAttributes> {
        self.timer_canceled_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>StartChildWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn start_child_workflow_execution_initiated_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::StartChildWorkflowExecutionInitiatedEventAttributes> {
        self.start_child_workflow_execution_initiated_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_started_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ChildWorkflowExecutionStartedEventAttributes> {
        self.child_workflow_execution_started_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_completed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ChildWorkflowExecutionCompletedEventAttributes> {
        self.child_workflow_execution_completed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ChildWorkflowExecutionFailedEventAttributes> {
        self.child_workflow_execution_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_timed_out_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ChildWorkflowExecutionTimedOutEventAttributes> {
        self.child_workflow_execution_timed_out_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_canceled_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ChildWorkflowExecutionCanceledEventAttributes> {
        self.child_workflow_execution_canceled_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_terminated_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ChildWorkflowExecutionTerminatedEventAttributes> {
        self.child_workflow_execution_terminated_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn signal_external_workflow_execution_initiated_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes> {
        self.signal_external_workflow_execution_initiated_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ExternalWorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn external_workflow_execution_signaled_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ExternalWorkflowExecutionSignaledEventAttributes> {
        self.external_workflow_execution_signaled_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn signal_external_workflow_execution_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::SignalExternalWorkflowExecutionFailedEventAttributes> {
        self.signal_external_workflow_execution_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ExternalWorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types. </p>
    pub fn external_workflow_execution_cancel_requested_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ExternalWorkflowExecutionCancelRequestedEventAttributes> {
        self.external_workflow_execution_cancel_requested_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn request_cancel_external_workflow_execution_initiated_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes> {
        self.request_cancel_external_workflow_execution_initiated_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn request_cancel_external_workflow_execution_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::RequestCancelExternalWorkflowExecutionFailedEventAttributes> {
        self.request_cancel_external_workflow_execution_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>ScheduleActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn schedule_activity_task_failed_event_attributes(&self) -> ::std::option::Option<&crate::types::ScheduleActivityTaskFailedEventAttributes> {
        self.schedule_activity_task_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>RequestCancelActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn request_cancel_activity_task_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::RequestCancelActivityTaskFailedEventAttributes> {
        self.request_cancel_activity_task_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>StartTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn start_timer_failed_event_attributes(&self) -> ::std::option::Option<&crate::types::StartTimerFailedEventAttributes> {
        self.start_timer_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>CancelTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn cancel_timer_failed_event_attributes(&self) -> ::std::option::Option<&crate::types::CancelTimerFailedEventAttributes> {
        self.cancel_timer_failed_event_attributes.as_ref()
    }
    /// <p>If the event is of type <code>StartChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn start_child_workflow_execution_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::StartChildWorkflowExecutionFailedEventAttributes> {
        self.start_child_workflow_execution_failed_event_attributes.as_ref()
    }
    /// <p>Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_scheduled_event_attributes(&self) -> ::std::option::Option<&crate::types::LambdaFunctionScheduledEventAttributes> {
        self.lambda_function_scheduled_event_attributes.as_ref()
    }
    /// <p>Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_started_event_attributes(&self) -> ::std::option::Option<&crate::types::LambdaFunctionStartedEventAttributes> {
        self.lambda_function_started_event_attributes.as_ref()
    }
    /// <p>Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_completed_event_attributes(&self) -> ::std::option::Option<&crate::types::LambdaFunctionCompletedEventAttributes> {
        self.lambda_function_completed_event_attributes.as_ref()
    }
    /// <p>Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_failed_event_attributes(&self) -> ::std::option::Option<&crate::types::LambdaFunctionFailedEventAttributes> {
        self.lambda_function_failed_event_attributes.as_ref()
    }
    /// <p>Provides the details of the <code>LambdaFunctionTimedOut</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_timed_out_event_attributes(&self) -> ::std::option::Option<&crate::types::LambdaFunctionTimedOutEventAttributes> {
        self.lambda_function_timed_out_event_attributes.as_ref()
    }
    /// <p>Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn schedule_lambda_function_failed_event_attributes(
        &self,
    ) -> ::std::option::Option<&crate::types::ScheduleLambdaFunctionFailedEventAttributes> {
        self.schedule_lambda_function_failed_event_attributes.as_ref()
    }
    /// <p>Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn start_lambda_function_failed_event_attributes(&self) -> ::std::option::Option<&crate::types::StartLambdaFunctionFailedEventAttributes> {
        self.start_lambda_function_failed_event_attributes.as_ref()
    }
}
impl HistoryEvent {
    /// Creates a new builder-style object to manufacture [`HistoryEvent`](crate::types::HistoryEvent).
    pub fn builder() -> crate::types::builders::HistoryEventBuilder {
        crate::types::builders::HistoryEventBuilder::default()
    }
}

/// A builder for [`HistoryEvent`](crate::types::HistoryEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HistoryEventBuilder {
    pub(crate) event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) event_type: ::std::option::Option<crate::types::EventType>,
    pub(crate) event_id: ::std::option::Option<i64>,
    pub(crate) workflow_execution_started_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionStartedEventAttributes>,
    pub(crate) workflow_execution_completed_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionCompletedEventAttributes>,
    pub(crate) complete_workflow_execution_failed_event_attributes:
        ::std::option::Option<crate::types::CompleteWorkflowExecutionFailedEventAttributes>,
    pub(crate) workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionFailedEventAttributes>,
    pub(crate) fail_workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::FailWorkflowExecutionFailedEventAttributes>,
    pub(crate) workflow_execution_timed_out_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionTimedOutEventAttributes>,
    pub(crate) workflow_execution_canceled_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionCanceledEventAttributes>,
    pub(crate) cancel_workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::CancelWorkflowExecutionFailedEventAttributes>,
    pub(crate) workflow_execution_continued_as_new_event_attributes:
        ::std::option::Option<crate::types::WorkflowExecutionContinuedAsNewEventAttributes>,
    pub(crate) continue_as_new_workflow_execution_failed_event_attributes:
        ::std::option::Option<crate::types::ContinueAsNewWorkflowExecutionFailedEventAttributes>,
    pub(crate) workflow_execution_terminated_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionTerminatedEventAttributes>,
    pub(crate) workflow_execution_cancel_requested_event_attributes:
        ::std::option::Option<crate::types::WorkflowExecutionCancelRequestedEventAttributes>,
    pub(crate) decision_task_scheduled_event_attributes: ::std::option::Option<crate::types::DecisionTaskScheduledEventAttributes>,
    pub(crate) decision_task_started_event_attributes: ::std::option::Option<crate::types::DecisionTaskStartedEventAttributes>,
    pub(crate) decision_task_completed_event_attributes: ::std::option::Option<crate::types::DecisionTaskCompletedEventAttributes>,
    pub(crate) decision_task_timed_out_event_attributes: ::std::option::Option<crate::types::DecisionTaskTimedOutEventAttributes>,
    pub(crate) activity_task_scheduled_event_attributes: ::std::option::Option<crate::types::ActivityTaskScheduledEventAttributes>,
    pub(crate) activity_task_started_event_attributes: ::std::option::Option<crate::types::ActivityTaskStartedEventAttributes>,
    pub(crate) activity_task_completed_event_attributes: ::std::option::Option<crate::types::ActivityTaskCompletedEventAttributes>,
    pub(crate) activity_task_failed_event_attributes: ::std::option::Option<crate::types::ActivityTaskFailedEventAttributes>,
    pub(crate) activity_task_timed_out_event_attributes: ::std::option::Option<crate::types::ActivityTaskTimedOutEventAttributes>,
    pub(crate) activity_task_canceled_event_attributes: ::std::option::Option<crate::types::ActivityTaskCanceledEventAttributes>,
    pub(crate) activity_task_cancel_requested_event_attributes: ::std::option::Option<crate::types::ActivityTaskCancelRequestedEventAttributes>,
    pub(crate) workflow_execution_signaled_event_attributes: ::std::option::Option<crate::types::WorkflowExecutionSignaledEventAttributes>,
    pub(crate) marker_recorded_event_attributes: ::std::option::Option<crate::types::MarkerRecordedEventAttributes>,
    pub(crate) record_marker_failed_event_attributes: ::std::option::Option<crate::types::RecordMarkerFailedEventAttributes>,
    pub(crate) timer_started_event_attributes: ::std::option::Option<crate::types::TimerStartedEventAttributes>,
    pub(crate) timer_fired_event_attributes: ::std::option::Option<crate::types::TimerFiredEventAttributes>,
    pub(crate) timer_canceled_event_attributes: ::std::option::Option<crate::types::TimerCanceledEventAttributes>,
    pub(crate) start_child_workflow_execution_initiated_event_attributes:
        ::std::option::Option<crate::types::StartChildWorkflowExecutionInitiatedEventAttributes>,
    pub(crate) child_workflow_execution_started_event_attributes: ::std::option::Option<crate::types::ChildWorkflowExecutionStartedEventAttributes>,
    pub(crate) child_workflow_execution_completed_event_attributes:
        ::std::option::Option<crate::types::ChildWorkflowExecutionCompletedEventAttributes>,
    pub(crate) child_workflow_execution_failed_event_attributes: ::std::option::Option<crate::types::ChildWorkflowExecutionFailedEventAttributes>,
    pub(crate) child_workflow_execution_timed_out_event_attributes:
        ::std::option::Option<crate::types::ChildWorkflowExecutionTimedOutEventAttributes>,
    pub(crate) child_workflow_execution_canceled_event_attributes: ::std::option::Option<crate::types::ChildWorkflowExecutionCanceledEventAttributes>,
    pub(crate) child_workflow_execution_terminated_event_attributes:
        ::std::option::Option<crate::types::ChildWorkflowExecutionTerminatedEventAttributes>,
    pub(crate) signal_external_workflow_execution_initiated_event_attributes:
        ::std::option::Option<crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes>,
    pub(crate) external_workflow_execution_signaled_event_attributes:
        ::std::option::Option<crate::types::ExternalWorkflowExecutionSignaledEventAttributes>,
    pub(crate) signal_external_workflow_execution_failed_event_attributes:
        ::std::option::Option<crate::types::SignalExternalWorkflowExecutionFailedEventAttributes>,
    pub(crate) external_workflow_execution_cancel_requested_event_attributes:
        ::std::option::Option<crate::types::ExternalWorkflowExecutionCancelRequestedEventAttributes>,
    pub(crate) request_cancel_external_workflow_execution_initiated_event_attributes:
        ::std::option::Option<crate::types::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes>,
    pub(crate) request_cancel_external_workflow_execution_failed_event_attributes:
        ::std::option::Option<crate::types::RequestCancelExternalWorkflowExecutionFailedEventAttributes>,
    pub(crate) schedule_activity_task_failed_event_attributes: ::std::option::Option<crate::types::ScheduleActivityTaskFailedEventAttributes>,
    pub(crate) request_cancel_activity_task_failed_event_attributes:
        ::std::option::Option<crate::types::RequestCancelActivityTaskFailedEventAttributes>,
    pub(crate) start_timer_failed_event_attributes: ::std::option::Option<crate::types::StartTimerFailedEventAttributes>,
    pub(crate) cancel_timer_failed_event_attributes: ::std::option::Option<crate::types::CancelTimerFailedEventAttributes>,
    pub(crate) start_child_workflow_execution_failed_event_attributes:
        ::std::option::Option<crate::types::StartChildWorkflowExecutionFailedEventAttributes>,
    pub(crate) lambda_function_scheduled_event_attributes: ::std::option::Option<crate::types::LambdaFunctionScheduledEventAttributes>,
    pub(crate) lambda_function_started_event_attributes: ::std::option::Option<crate::types::LambdaFunctionStartedEventAttributes>,
    pub(crate) lambda_function_completed_event_attributes: ::std::option::Option<crate::types::LambdaFunctionCompletedEventAttributes>,
    pub(crate) lambda_function_failed_event_attributes: ::std::option::Option<crate::types::LambdaFunctionFailedEventAttributes>,
    pub(crate) lambda_function_timed_out_event_attributes: ::std::option::Option<crate::types::LambdaFunctionTimedOutEventAttributes>,
    pub(crate) schedule_lambda_function_failed_event_attributes: ::std::option::Option<crate::types::ScheduleLambdaFunctionFailedEventAttributes>,
    pub(crate) start_lambda_function_failed_event_attributes: ::std::option::Option<crate::types::StartLambdaFunctionFailedEventAttributes>,
}
impl HistoryEventBuilder {
    /// <p>The date and time when the event occurred.</p>
    /// This field is required.
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the event occurred.</p>
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// <p>The date and time when the event occurred.</p>
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_timestamp
    }
    /// <p>The type of the history event.</p>
    /// This field is required.
    pub fn event_type(mut self, input: crate::types::EventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the history event.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::EventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The type of the history event.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::EventType> {
        &self.event_type
    }
    /// <p>The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.</p>
    /// This field is required.
    pub fn event_id(mut self, input: i64) -> Self {
        self.event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<i64> {
        &self.event_id
    }
    /// <p>If the event is of type <code>WorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_started_event_attributes(mut self, input: crate::types::WorkflowExecutionStartedEventAttributes) -> Self {
        self.workflow_execution_started_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_workflow_execution_started_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowExecutionStartedEventAttributes>,
    ) -> Self {
        self.workflow_execution_started_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_workflow_execution_started_event_attributes(&self) -> &::std::option::Option<crate::types::WorkflowExecutionStartedEventAttributes> {
        &self.workflow_execution_started_event_attributes
    }
    /// <p>If the event is of type <code>WorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_completed_event_attributes(mut self, input: crate::types::WorkflowExecutionCompletedEventAttributes) -> Self {
        self.workflow_execution_completed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_workflow_execution_completed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowExecutionCompletedEventAttributes>,
    ) -> Self {
        self.workflow_execution_completed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_workflow_execution_completed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::WorkflowExecutionCompletedEventAttributes> {
        &self.workflow_execution_completed_event_attributes
    }
    /// <p>If the event is of type <code>CompleteWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn complete_workflow_execution_failed_event_attributes(
        mut self,
        input: crate::types::CompleteWorkflowExecutionFailedEventAttributes,
    ) -> Self {
        self.complete_workflow_execution_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>CompleteWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_complete_workflow_execution_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::CompleteWorkflowExecutionFailedEventAttributes>,
    ) -> Self {
        self.complete_workflow_execution_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>CompleteWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_complete_workflow_execution_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::CompleteWorkflowExecutionFailedEventAttributes> {
        &self.complete_workflow_execution_failed_event_attributes
    }
    /// <p>If the event is of type <code>WorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_failed_event_attributes(mut self, input: crate::types::WorkflowExecutionFailedEventAttributes) -> Self {
        self.workflow_execution_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_workflow_execution_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowExecutionFailedEventAttributes>,
    ) -> Self {
        self.workflow_execution_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_workflow_execution_failed_event_attributes(&self) -> &::std::option::Option<crate::types::WorkflowExecutionFailedEventAttributes> {
        &self.workflow_execution_failed_event_attributes
    }
    /// <p>If the event is of type <code>FailWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn fail_workflow_execution_failed_event_attributes(mut self, input: crate::types::FailWorkflowExecutionFailedEventAttributes) -> Self {
        self.fail_workflow_execution_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>FailWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_fail_workflow_execution_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::FailWorkflowExecutionFailedEventAttributes>,
    ) -> Self {
        self.fail_workflow_execution_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>FailWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_fail_workflow_execution_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::FailWorkflowExecutionFailedEventAttributes> {
        &self.fail_workflow_execution_failed_event_attributes
    }
    /// <p>If the event is of type <code>WorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_timed_out_event_attributes(mut self, input: crate::types::WorkflowExecutionTimedOutEventAttributes) -> Self {
        self.workflow_execution_timed_out_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_workflow_execution_timed_out_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowExecutionTimedOutEventAttributes>,
    ) -> Self {
        self.workflow_execution_timed_out_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_workflow_execution_timed_out_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::WorkflowExecutionTimedOutEventAttributes> {
        &self.workflow_execution_timed_out_event_attributes
    }
    /// <p>If the event is of type <code>WorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_canceled_event_attributes(mut self, input: crate::types::WorkflowExecutionCanceledEventAttributes) -> Self {
        self.workflow_execution_canceled_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_workflow_execution_canceled_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowExecutionCanceledEventAttributes>,
    ) -> Self {
        self.workflow_execution_canceled_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_workflow_execution_canceled_event_attributes(&self) -> &::std::option::Option<crate::types::WorkflowExecutionCanceledEventAttributes> {
        &self.workflow_execution_canceled_event_attributes
    }
    /// <p>If the event is of type <code>CancelWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn cancel_workflow_execution_failed_event_attributes(mut self, input: crate::types::CancelWorkflowExecutionFailedEventAttributes) -> Self {
        self.cancel_workflow_execution_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>CancelWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_cancel_workflow_execution_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::CancelWorkflowExecutionFailedEventAttributes>,
    ) -> Self {
        self.cancel_workflow_execution_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>CancelWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_cancel_workflow_execution_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::CancelWorkflowExecutionFailedEventAttributes> {
        &self.cancel_workflow_execution_failed_event_attributes
    }
    /// <p>If the event is of type <code>WorkflowExecutionContinuedAsNew</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_continued_as_new_event_attributes(
        mut self,
        input: crate::types::WorkflowExecutionContinuedAsNewEventAttributes,
    ) -> Self {
        self.workflow_execution_continued_as_new_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionContinuedAsNew</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_workflow_execution_continued_as_new_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowExecutionContinuedAsNewEventAttributes>,
    ) -> Self {
        self.workflow_execution_continued_as_new_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionContinuedAsNew</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_workflow_execution_continued_as_new_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::WorkflowExecutionContinuedAsNewEventAttributes> {
        &self.workflow_execution_continued_as_new_event_attributes
    }
    /// <p>If the event is of type <code>ContinueAsNewWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn continue_as_new_workflow_execution_failed_event_attributes(
        mut self,
        input: crate::types::ContinueAsNewWorkflowExecutionFailedEventAttributes,
    ) -> Self {
        self.continue_as_new_workflow_execution_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ContinueAsNewWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_continue_as_new_workflow_execution_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ContinueAsNewWorkflowExecutionFailedEventAttributes>,
    ) -> Self {
        self.continue_as_new_workflow_execution_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ContinueAsNewWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_continue_as_new_workflow_execution_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ContinueAsNewWorkflowExecutionFailedEventAttributes> {
        &self.continue_as_new_workflow_execution_failed_event_attributes
    }
    /// <p>If the event is of type <code>WorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_terminated_event_attributes(mut self, input: crate::types::WorkflowExecutionTerminatedEventAttributes) -> Self {
        self.workflow_execution_terminated_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_workflow_execution_terminated_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowExecutionTerminatedEventAttributes>,
    ) -> Self {
        self.workflow_execution_terminated_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_workflow_execution_terminated_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::WorkflowExecutionTerminatedEventAttributes> {
        &self.workflow_execution_terminated_event_attributes
    }
    /// <p>If the event is of type <code>WorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_cancel_requested_event_attributes(
        mut self,
        input: crate::types::WorkflowExecutionCancelRequestedEventAttributes,
    ) -> Self {
        self.workflow_execution_cancel_requested_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_workflow_execution_cancel_requested_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowExecutionCancelRequestedEventAttributes>,
    ) -> Self {
        self.workflow_execution_cancel_requested_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_workflow_execution_cancel_requested_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::WorkflowExecutionCancelRequestedEventAttributes> {
        &self.workflow_execution_cancel_requested_event_attributes
    }
    /// <p>If the event is of type <code>DecisionTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn decision_task_scheduled_event_attributes(mut self, input: crate::types::DecisionTaskScheduledEventAttributes) -> Self {
        self.decision_task_scheduled_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>DecisionTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_decision_task_scheduled_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::DecisionTaskScheduledEventAttributes>,
    ) -> Self {
        self.decision_task_scheduled_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>DecisionTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_decision_task_scheduled_event_attributes(&self) -> &::std::option::Option<crate::types::DecisionTaskScheduledEventAttributes> {
        &self.decision_task_scheduled_event_attributes
    }
    /// <p>If the event is of type <code>DecisionTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn decision_task_started_event_attributes(mut self, input: crate::types::DecisionTaskStartedEventAttributes) -> Self {
        self.decision_task_started_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>DecisionTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_decision_task_started_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::DecisionTaskStartedEventAttributes>,
    ) -> Self {
        self.decision_task_started_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>DecisionTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_decision_task_started_event_attributes(&self) -> &::std::option::Option<crate::types::DecisionTaskStartedEventAttributes> {
        &self.decision_task_started_event_attributes
    }
    /// <p>If the event is of type <code>DecisionTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn decision_task_completed_event_attributes(mut self, input: crate::types::DecisionTaskCompletedEventAttributes) -> Self {
        self.decision_task_completed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>DecisionTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_decision_task_completed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::DecisionTaskCompletedEventAttributes>,
    ) -> Self {
        self.decision_task_completed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>DecisionTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_decision_task_completed_event_attributes(&self) -> &::std::option::Option<crate::types::DecisionTaskCompletedEventAttributes> {
        &self.decision_task_completed_event_attributes
    }
    /// <p>If the event is of type <code>DecisionTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn decision_task_timed_out_event_attributes(mut self, input: crate::types::DecisionTaskTimedOutEventAttributes) -> Self {
        self.decision_task_timed_out_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>DecisionTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_decision_task_timed_out_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::DecisionTaskTimedOutEventAttributes>,
    ) -> Self {
        self.decision_task_timed_out_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>DecisionTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_decision_task_timed_out_event_attributes(&self) -> &::std::option::Option<crate::types::DecisionTaskTimedOutEventAttributes> {
        &self.decision_task_timed_out_event_attributes
    }
    /// <p>If the event is of type <code>ActivityTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_scheduled_event_attributes(mut self, input: crate::types::ActivityTaskScheduledEventAttributes) -> Self {
        self.activity_task_scheduled_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ActivityTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_activity_task_scheduled_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ActivityTaskScheduledEventAttributes>,
    ) -> Self {
        self.activity_task_scheduled_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ActivityTaskScheduled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_activity_task_scheduled_event_attributes(&self) -> &::std::option::Option<crate::types::ActivityTaskScheduledEventAttributes> {
        &self.activity_task_scheduled_event_attributes
    }
    /// <p>If the event is of type <code>ActivityTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_started_event_attributes(mut self, input: crate::types::ActivityTaskStartedEventAttributes) -> Self {
        self.activity_task_started_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ActivityTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_activity_task_started_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ActivityTaskStartedEventAttributes>,
    ) -> Self {
        self.activity_task_started_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ActivityTaskStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_activity_task_started_event_attributes(&self) -> &::std::option::Option<crate::types::ActivityTaskStartedEventAttributes> {
        &self.activity_task_started_event_attributes
    }
    /// <p>If the event is of type <code>ActivityTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_completed_event_attributes(mut self, input: crate::types::ActivityTaskCompletedEventAttributes) -> Self {
        self.activity_task_completed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ActivityTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_activity_task_completed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ActivityTaskCompletedEventAttributes>,
    ) -> Self {
        self.activity_task_completed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ActivityTaskCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_activity_task_completed_event_attributes(&self) -> &::std::option::Option<crate::types::ActivityTaskCompletedEventAttributes> {
        &self.activity_task_completed_event_attributes
    }
    /// <p>If the event is of type <code>ActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_failed_event_attributes(mut self, input: crate::types::ActivityTaskFailedEventAttributes) -> Self {
        self.activity_task_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_activity_task_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ActivityTaskFailedEventAttributes>,
    ) -> Self {
        self.activity_task_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_activity_task_failed_event_attributes(&self) -> &::std::option::Option<crate::types::ActivityTaskFailedEventAttributes> {
        &self.activity_task_failed_event_attributes
    }
    /// <p>If the event is of type <code>ActivityTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_timed_out_event_attributes(mut self, input: crate::types::ActivityTaskTimedOutEventAttributes) -> Self {
        self.activity_task_timed_out_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ActivityTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_activity_task_timed_out_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ActivityTaskTimedOutEventAttributes>,
    ) -> Self {
        self.activity_task_timed_out_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ActivityTaskTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_activity_task_timed_out_event_attributes(&self) -> &::std::option::Option<crate::types::ActivityTaskTimedOutEventAttributes> {
        &self.activity_task_timed_out_event_attributes
    }
    /// <p>If the event is of type <code>ActivityTaskCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_canceled_event_attributes(mut self, input: crate::types::ActivityTaskCanceledEventAttributes) -> Self {
        self.activity_task_canceled_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ActivityTaskCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_activity_task_canceled_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ActivityTaskCanceledEventAttributes>,
    ) -> Self {
        self.activity_task_canceled_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ActivityTaskCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_activity_task_canceled_event_attributes(&self) -> &::std::option::Option<crate::types::ActivityTaskCanceledEventAttributes> {
        &self.activity_task_canceled_event_attributes
    }
    /// <p>If the event is of type <code>ActivityTaskcancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn activity_task_cancel_requested_event_attributes(mut self, input: crate::types::ActivityTaskCancelRequestedEventAttributes) -> Self {
        self.activity_task_cancel_requested_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ActivityTaskcancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_activity_task_cancel_requested_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ActivityTaskCancelRequestedEventAttributes>,
    ) -> Self {
        self.activity_task_cancel_requested_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ActivityTaskcancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_activity_task_cancel_requested_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ActivityTaskCancelRequestedEventAttributes> {
        &self.activity_task_cancel_requested_event_attributes
    }
    /// <p>If the event is of type <code>WorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn workflow_execution_signaled_event_attributes(mut self, input: crate::types::WorkflowExecutionSignaledEventAttributes) -> Self {
        self.workflow_execution_signaled_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_workflow_execution_signaled_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::WorkflowExecutionSignaledEventAttributes>,
    ) -> Self {
        self.workflow_execution_signaled_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>WorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_workflow_execution_signaled_event_attributes(&self) -> &::std::option::Option<crate::types::WorkflowExecutionSignaledEventAttributes> {
        &self.workflow_execution_signaled_event_attributes
    }
    /// <p>If the event is of type <code>MarkerRecorded</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn marker_recorded_event_attributes(mut self, input: crate::types::MarkerRecordedEventAttributes) -> Self {
        self.marker_recorded_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>MarkerRecorded</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_marker_recorded_event_attributes(mut self, input: ::std::option::Option<crate::types::MarkerRecordedEventAttributes>) -> Self {
        self.marker_recorded_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>MarkerRecorded</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_marker_recorded_event_attributes(&self) -> &::std::option::Option<crate::types::MarkerRecordedEventAttributes> {
        &self.marker_recorded_event_attributes
    }
    /// <p>If the event is of type <code>DecisionTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn record_marker_failed_event_attributes(mut self, input: crate::types::RecordMarkerFailedEventAttributes) -> Self {
        self.record_marker_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>DecisionTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_record_marker_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::RecordMarkerFailedEventAttributes>,
    ) -> Self {
        self.record_marker_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>DecisionTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_record_marker_failed_event_attributes(&self) -> &::std::option::Option<crate::types::RecordMarkerFailedEventAttributes> {
        &self.record_marker_failed_event_attributes
    }
    /// <p>If the event is of type <code>TimerStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn timer_started_event_attributes(mut self, input: crate::types::TimerStartedEventAttributes) -> Self {
        self.timer_started_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>TimerStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_timer_started_event_attributes(mut self, input: ::std::option::Option<crate::types::TimerStartedEventAttributes>) -> Self {
        self.timer_started_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>TimerStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_timer_started_event_attributes(&self) -> &::std::option::Option<crate::types::TimerStartedEventAttributes> {
        &self.timer_started_event_attributes
    }
    /// <p>If the event is of type <code>TimerFired</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn timer_fired_event_attributes(mut self, input: crate::types::TimerFiredEventAttributes) -> Self {
        self.timer_fired_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>TimerFired</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_timer_fired_event_attributes(mut self, input: ::std::option::Option<crate::types::TimerFiredEventAttributes>) -> Self {
        self.timer_fired_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>TimerFired</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_timer_fired_event_attributes(&self) -> &::std::option::Option<crate::types::TimerFiredEventAttributes> {
        &self.timer_fired_event_attributes
    }
    /// <p>If the event is of type <code>TimerCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn timer_canceled_event_attributes(mut self, input: crate::types::TimerCanceledEventAttributes) -> Self {
        self.timer_canceled_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>TimerCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_timer_canceled_event_attributes(mut self, input: ::std::option::Option<crate::types::TimerCanceledEventAttributes>) -> Self {
        self.timer_canceled_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>TimerCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_timer_canceled_event_attributes(&self) -> &::std::option::Option<crate::types::TimerCanceledEventAttributes> {
        &self.timer_canceled_event_attributes
    }
    /// <p>If the event is of type <code>StartChildWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn start_child_workflow_execution_initiated_event_attributes(
        mut self,
        input: crate::types::StartChildWorkflowExecutionInitiatedEventAttributes,
    ) -> Self {
        self.start_child_workflow_execution_initiated_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>StartChildWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_start_child_workflow_execution_initiated_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::StartChildWorkflowExecutionInitiatedEventAttributes>,
    ) -> Self {
        self.start_child_workflow_execution_initiated_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>StartChildWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_start_child_workflow_execution_initiated_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::StartChildWorkflowExecutionInitiatedEventAttributes> {
        &self.start_child_workflow_execution_initiated_event_attributes
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_started_event_attributes(mut self, input: crate::types::ChildWorkflowExecutionStartedEventAttributes) -> Self {
        self.child_workflow_execution_started_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_child_workflow_execution_started_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ChildWorkflowExecutionStartedEventAttributes>,
    ) -> Self {
        self.child_workflow_execution_started_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionStarted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_child_workflow_execution_started_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ChildWorkflowExecutionStartedEventAttributes> {
        &self.child_workflow_execution_started_event_attributes
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_completed_event_attributes(
        mut self,
        input: crate::types::ChildWorkflowExecutionCompletedEventAttributes,
    ) -> Self {
        self.child_workflow_execution_completed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_child_workflow_execution_completed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ChildWorkflowExecutionCompletedEventAttributes>,
    ) -> Self {
        self.child_workflow_execution_completed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionCompleted</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_child_workflow_execution_completed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ChildWorkflowExecutionCompletedEventAttributes> {
        &self.child_workflow_execution_completed_event_attributes
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_failed_event_attributes(mut self, input: crate::types::ChildWorkflowExecutionFailedEventAttributes) -> Self {
        self.child_workflow_execution_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_child_workflow_execution_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ChildWorkflowExecutionFailedEventAttributes>,
    ) -> Self {
        self.child_workflow_execution_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_child_workflow_execution_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ChildWorkflowExecutionFailedEventAttributes> {
        &self.child_workflow_execution_failed_event_attributes
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_timed_out_event_attributes(mut self, input: crate::types::ChildWorkflowExecutionTimedOutEventAttributes) -> Self {
        self.child_workflow_execution_timed_out_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_child_workflow_execution_timed_out_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ChildWorkflowExecutionTimedOutEventAttributes>,
    ) -> Self {
        self.child_workflow_execution_timed_out_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionTimedOut</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_child_workflow_execution_timed_out_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ChildWorkflowExecutionTimedOutEventAttributes> {
        &self.child_workflow_execution_timed_out_event_attributes
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_canceled_event_attributes(mut self, input: crate::types::ChildWorkflowExecutionCanceledEventAttributes) -> Self {
        self.child_workflow_execution_canceled_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_child_workflow_execution_canceled_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ChildWorkflowExecutionCanceledEventAttributes>,
    ) -> Self {
        self.child_workflow_execution_canceled_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionCanceled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_child_workflow_execution_canceled_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ChildWorkflowExecutionCanceledEventAttributes> {
        &self.child_workflow_execution_canceled_event_attributes
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn child_workflow_execution_terminated_event_attributes(
        mut self,
        input: crate::types::ChildWorkflowExecutionTerminatedEventAttributes,
    ) -> Self {
        self.child_workflow_execution_terminated_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_child_workflow_execution_terminated_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ChildWorkflowExecutionTerminatedEventAttributes>,
    ) -> Self {
        self.child_workflow_execution_terminated_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ChildWorkflowExecutionTerminated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_child_workflow_execution_terminated_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ChildWorkflowExecutionTerminatedEventAttributes> {
        &self.child_workflow_execution_terminated_event_attributes
    }
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn signal_external_workflow_execution_initiated_event_attributes(
        mut self,
        input: crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes,
    ) -> Self {
        self.signal_external_workflow_execution_initiated_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_signal_external_workflow_execution_initiated_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes>,
    ) -> Self {
        self.signal_external_workflow_execution_initiated_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_signal_external_workflow_execution_initiated_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::SignalExternalWorkflowExecutionInitiatedEventAttributes> {
        &self.signal_external_workflow_execution_initiated_event_attributes
    }
    /// <p>If the event is of type <code>ExternalWorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn external_workflow_execution_signaled_event_attributes(
        mut self,
        input: crate::types::ExternalWorkflowExecutionSignaledEventAttributes,
    ) -> Self {
        self.external_workflow_execution_signaled_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ExternalWorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_external_workflow_execution_signaled_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ExternalWorkflowExecutionSignaledEventAttributes>,
    ) -> Self {
        self.external_workflow_execution_signaled_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ExternalWorkflowExecutionSignaled</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_external_workflow_execution_signaled_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ExternalWorkflowExecutionSignaledEventAttributes> {
        &self.external_workflow_execution_signaled_event_attributes
    }
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn signal_external_workflow_execution_failed_event_attributes(
        mut self,
        input: crate::types::SignalExternalWorkflowExecutionFailedEventAttributes,
    ) -> Self {
        self.signal_external_workflow_execution_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_signal_external_workflow_execution_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::SignalExternalWorkflowExecutionFailedEventAttributes>,
    ) -> Self {
        self.signal_external_workflow_execution_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>SignalExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_signal_external_workflow_execution_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::SignalExternalWorkflowExecutionFailedEventAttributes> {
        &self.signal_external_workflow_execution_failed_event_attributes
    }
    /// <p>If the event is of type <code>ExternalWorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types. </p>
    pub fn external_workflow_execution_cancel_requested_event_attributes(
        mut self,
        input: crate::types::ExternalWorkflowExecutionCancelRequestedEventAttributes,
    ) -> Self {
        self.external_workflow_execution_cancel_requested_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ExternalWorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types. </p>
    pub fn set_external_workflow_execution_cancel_requested_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ExternalWorkflowExecutionCancelRequestedEventAttributes>,
    ) -> Self {
        self.external_workflow_execution_cancel_requested_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ExternalWorkflowExecutionCancelRequested</code> then this member is set and provides detailed information about the event. It isn't set for other event types. </p>
    pub fn get_external_workflow_execution_cancel_requested_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ExternalWorkflowExecutionCancelRequestedEventAttributes> {
        &self.external_workflow_execution_cancel_requested_event_attributes
    }
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn request_cancel_external_workflow_execution_initiated_event_attributes(
        mut self,
        input: crate::types::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes,
    ) -> Self {
        self.request_cancel_external_workflow_execution_initiated_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_request_cancel_external_workflow_execution_initiated_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes>,
    ) -> Self {
        self.request_cancel_external_workflow_execution_initiated_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionInitiated</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_request_cancel_external_workflow_execution_initiated_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::RequestCancelExternalWorkflowExecutionInitiatedEventAttributes> {
        &self.request_cancel_external_workflow_execution_initiated_event_attributes
    }
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn request_cancel_external_workflow_execution_failed_event_attributes(
        mut self,
        input: crate::types::RequestCancelExternalWorkflowExecutionFailedEventAttributes,
    ) -> Self {
        self.request_cancel_external_workflow_execution_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_request_cancel_external_workflow_execution_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::RequestCancelExternalWorkflowExecutionFailedEventAttributes>,
    ) -> Self {
        self.request_cancel_external_workflow_execution_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>RequestCancelExternalWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_request_cancel_external_workflow_execution_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::RequestCancelExternalWorkflowExecutionFailedEventAttributes> {
        &self.request_cancel_external_workflow_execution_failed_event_attributes
    }
    /// <p>If the event is of type <code>ScheduleActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn schedule_activity_task_failed_event_attributes(mut self, input: crate::types::ScheduleActivityTaskFailedEventAttributes) -> Self {
        self.schedule_activity_task_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>ScheduleActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_schedule_activity_task_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ScheduleActivityTaskFailedEventAttributes>,
    ) -> Self {
        self.schedule_activity_task_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>ScheduleActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_schedule_activity_task_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ScheduleActivityTaskFailedEventAttributes> {
        &self.schedule_activity_task_failed_event_attributes
    }
    /// <p>If the event is of type <code>RequestCancelActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn request_cancel_activity_task_failed_event_attributes(
        mut self,
        input: crate::types::RequestCancelActivityTaskFailedEventAttributes,
    ) -> Self {
        self.request_cancel_activity_task_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>RequestCancelActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_request_cancel_activity_task_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::RequestCancelActivityTaskFailedEventAttributes>,
    ) -> Self {
        self.request_cancel_activity_task_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>RequestCancelActivityTaskFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_request_cancel_activity_task_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::RequestCancelActivityTaskFailedEventAttributes> {
        &self.request_cancel_activity_task_failed_event_attributes
    }
    /// <p>If the event is of type <code>StartTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn start_timer_failed_event_attributes(mut self, input: crate::types::StartTimerFailedEventAttributes) -> Self {
        self.start_timer_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>StartTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_start_timer_failed_event_attributes(mut self, input: ::std::option::Option<crate::types::StartTimerFailedEventAttributes>) -> Self {
        self.start_timer_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>StartTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_start_timer_failed_event_attributes(&self) -> &::std::option::Option<crate::types::StartTimerFailedEventAttributes> {
        &self.start_timer_failed_event_attributes
    }
    /// <p>If the event is of type <code>CancelTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn cancel_timer_failed_event_attributes(mut self, input: crate::types::CancelTimerFailedEventAttributes) -> Self {
        self.cancel_timer_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>CancelTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_cancel_timer_failed_event_attributes(mut self, input: ::std::option::Option<crate::types::CancelTimerFailedEventAttributes>) -> Self {
        self.cancel_timer_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>CancelTimerFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_cancel_timer_failed_event_attributes(&self) -> &::std::option::Option<crate::types::CancelTimerFailedEventAttributes> {
        &self.cancel_timer_failed_event_attributes
    }
    /// <p>If the event is of type <code>StartChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn start_child_workflow_execution_failed_event_attributes(
        mut self,
        input: crate::types::StartChildWorkflowExecutionFailedEventAttributes,
    ) -> Self {
        self.start_child_workflow_execution_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is of type <code>StartChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn set_start_child_workflow_execution_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::StartChildWorkflowExecutionFailedEventAttributes>,
    ) -> Self {
        self.start_child_workflow_execution_failed_event_attributes = input;
        self
    }
    /// <p>If the event is of type <code>StartChildWorkflowExecutionFailed</code> then this member is set and provides detailed information about the event. It isn't set for other event types.</p>
    pub fn get_start_child_workflow_execution_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::StartChildWorkflowExecutionFailedEventAttributes> {
        &self.start_child_workflow_execution_failed_event_attributes
    }
    /// <p>Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_scheduled_event_attributes(mut self, input: crate::types::LambdaFunctionScheduledEventAttributes) -> Self {
        self.lambda_function_scheduled_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.</p>
    pub fn set_lambda_function_scheduled_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionScheduledEventAttributes>,
    ) -> Self {
        self.lambda_function_scheduled_event_attributes = input;
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.</p>
    pub fn get_lambda_function_scheduled_event_attributes(&self) -> &::std::option::Option<crate::types::LambdaFunctionScheduledEventAttributes> {
        &self.lambda_function_scheduled_event_attributes
    }
    /// <p>Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_started_event_attributes(mut self, input: crate::types::LambdaFunctionStartedEventAttributes) -> Self {
        self.lambda_function_started_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.</p>
    pub fn set_lambda_function_started_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionStartedEventAttributes>,
    ) -> Self {
        self.lambda_function_started_event_attributes = input;
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.</p>
    pub fn get_lambda_function_started_event_attributes(&self) -> &::std::option::Option<crate::types::LambdaFunctionStartedEventAttributes> {
        &self.lambda_function_started_event_attributes
    }
    /// <p>Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_completed_event_attributes(mut self, input: crate::types::LambdaFunctionCompletedEventAttributes) -> Self {
        self.lambda_function_completed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.</p>
    pub fn set_lambda_function_completed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionCompletedEventAttributes>,
    ) -> Self {
        self.lambda_function_completed_event_attributes = input;
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.</p>
    pub fn get_lambda_function_completed_event_attributes(&self) -> &::std::option::Option<crate::types::LambdaFunctionCompletedEventAttributes> {
        &self.lambda_function_completed_event_attributes
    }
    /// <p>Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_failed_event_attributes(mut self, input: crate::types::LambdaFunctionFailedEventAttributes) -> Self {
        self.lambda_function_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn set_lambda_function_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionFailedEventAttributes>,
    ) -> Self {
        self.lambda_function_failed_event_attributes = input;
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn get_lambda_function_failed_event_attributes(&self) -> &::std::option::Option<crate::types::LambdaFunctionFailedEventAttributes> {
        &self.lambda_function_failed_event_attributes
    }
    /// <p>Provides the details of the <code>LambdaFunctionTimedOut</code> event. It isn't set for other event types.</p>
    pub fn lambda_function_timed_out_event_attributes(mut self, input: crate::types::LambdaFunctionTimedOutEventAttributes) -> Self {
        self.lambda_function_timed_out_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionTimedOut</code> event. It isn't set for other event types.</p>
    pub fn set_lambda_function_timed_out_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::LambdaFunctionTimedOutEventAttributes>,
    ) -> Self {
        self.lambda_function_timed_out_event_attributes = input;
        self
    }
    /// <p>Provides the details of the <code>LambdaFunctionTimedOut</code> event. It isn't set for other event types.</p>
    pub fn get_lambda_function_timed_out_event_attributes(&self) -> &::std::option::Option<crate::types::LambdaFunctionTimedOutEventAttributes> {
        &self.lambda_function_timed_out_event_attributes
    }
    /// <p>Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn schedule_lambda_function_failed_event_attributes(mut self, input: crate::types::ScheduleLambdaFunctionFailedEventAttributes) -> Self {
        self.schedule_lambda_function_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn set_schedule_lambda_function_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::ScheduleLambdaFunctionFailedEventAttributes>,
    ) -> Self {
        self.schedule_lambda_function_failed_event_attributes = input;
        self
    }
    /// <p>Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn get_schedule_lambda_function_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::ScheduleLambdaFunctionFailedEventAttributes> {
        &self.schedule_lambda_function_failed_event_attributes
    }
    /// <p>Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn start_lambda_function_failed_event_attributes(mut self, input: crate::types::StartLambdaFunctionFailedEventAttributes) -> Self {
        self.start_lambda_function_failed_event_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn set_start_lambda_function_failed_event_attributes(
        mut self,
        input: ::std::option::Option<crate::types::StartLambdaFunctionFailedEventAttributes>,
    ) -> Self {
        self.start_lambda_function_failed_event_attributes = input;
        self
    }
    /// <p>Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.</p>
    pub fn get_start_lambda_function_failed_event_attributes(
        &self,
    ) -> &::std::option::Option<crate::types::StartLambdaFunctionFailedEventAttributes> {
        &self.start_lambda_function_failed_event_attributes
    }
    /// Consumes the builder and constructs a [`HistoryEvent`](crate::types::HistoryEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_timestamp`](crate::types::builders::HistoryEventBuilder::event_timestamp)
    /// - [`event_type`](crate::types::builders::HistoryEventBuilder::event_type)
    pub fn build(self) -> ::std::result::Result<crate::types::HistoryEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HistoryEvent {
            event_timestamp: self.event_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_timestamp",
                    "event_timestamp was not specified but it is required when building HistoryEvent",
                )
            })?,
            event_type: self.event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type",
                    "event_type was not specified but it is required when building HistoryEvent",
                )
            })?,
            event_id: self.event_id.unwrap_or_default(),
            workflow_execution_started_event_attributes: self.workflow_execution_started_event_attributes,
            workflow_execution_completed_event_attributes: self.workflow_execution_completed_event_attributes,
            complete_workflow_execution_failed_event_attributes: self.complete_workflow_execution_failed_event_attributes,
            workflow_execution_failed_event_attributes: self.workflow_execution_failed_event_attributes,
            fail_workflow_execution_failed_event_attributes: self.fail_workflow_execution_failed_event_attributes,
            workflow_execution_timed_out_event_attributes: self.workflow_execution_timed_out_event_attributes,
            workflow_execution_canceled_event_attributes: self.workflow_execution_canceled_event_attributes,
            cancel_workflow_execution_failed_event_attributes: self.cancel_workflow_execution_failed_event_attributes,
            workflow_execution_continued_as_new_event_attributes: self.workflow_execution_continued_as_new_event_attributes,
            continue_as_new_workflow_execution_failed_event_attributes: self.continue_as_new_workflow_execution_failed_event_attributes,
            workflow_execution_terminated_event_attributes: self.workflow_execution_terminated_event_attributes,
            workflow_execution_cancel_requested_event_attributes: self.workflow_execution_cancel_requested_event_attributes,
            decision_task_scheduled_event_attributes: self.decision_task_scheduled_event_attributes,
            decision_task_started_event_attributes: self.decision_task_started_event_attributes,
            decision_task_completed_event_attributes: self.decision_task_completed_event_attributes,
            decision_task_timed_out_event_attributes: self.decision_task_timed_out_event_attributes,
            activity_task_scheduled_event_attributes: self.activity_task_scheduled_event_attributes,
            activity_task_started_event_attributes: self.activity_task_started_event_attributes,
            activity_task_completed_event_attributes: self.activity_task_completed_event_attributes,
            activity_task_failed_event_attributes: self.activity_task_failed_event_attributes,
            activity_task_timed_out_event_attributes: self.activity_task_timed_out_event_attributes,
            activity_task_canceled_event_attributes: self.activity_task_canceled_event_attributes,
            activity_task_cancel_requested_event_attributes: self.activity_task_cancel_requested_event_attributes,
            workflow_execution_signaled_event_attributes: self.workflow_execution_signaled_event_attributes,
            marker_recorded_event_attributes: self.marker_recorded_event_attributes,
            record_marker_failed_event_attributes: self.record_marker_failed_event_attributes,
            timer_started_event_attributes: self.timer_started_event_attributes,
            timer_fired_event_attributes: self.timer_fired_event_attributes,
            timer_canceled_event_attributes: self.timer_canceled_event_attributes,
            start_child_workflow_execution_initiated_event_attributes: self.start_child_workflow_execution_initiated_event_attributes,
            child_workflow_execution_started_event_attributes: self.child_workflow_execution_started_event_attributes,
            child_workflow_execution_completed_event_attributes: self.child_workflow_execution_completed_event_attributes,
            child_workflow_execution_failed_event_attributes: self.child_workflow_execution_failed_event_attributes,
            child_workflow_execution_timed_out_event_attributes: self.child_workflow_execution_timed_out_event_attributes,
            child_workflow_execution_canceled_event_attributes: self.child_workflow_execution_canceled_event_attributes,
            child_workflow_execution_terminated_event_attributes: self.child_workflow_execution_terminated_event_attributes,
            signal_external_workflow_execution_initiated_event_attributes: self.signal_external_workflow_execution_initiated_event_attributes,
            external_workflow_execution_signaled_event_attributes: self.external_workflow_execution_signaled_event_attributes,
            signal_external_workflow_execution_failed_event_attributes: self.signal_external_workflow_execution_failed_event_attributes,
            external_workflow_execution_cancel_requested_event_attributes: self.external_workflow_execution_cancel_requested_event_attributes,
            request_cancel_external_workflow_execution_initiated_event_attributes: self
                .request_cancel_external_workflow_execution_initiated_event_attributes,
            request_cancel_external_workflow_execution_failed_event_attributes: self
                .request_cancel_external_workflow_execution_failed_event_attributes,
            schedule_activity_task_failed_event_attributes: self.schedule_activity_task_failed_event_attributes,
            request_cancel_activity_task_failed_event_attributes: self.request_cancel_activity_task_failed_event_attributes,
            start_timer_failed_event_attributes: self.start_timer_failed_event_attributes,
            cancel_timer_failed_event_attributes: self.cancel_timer_failed_event_attributes,
            start_child_workflow_execution_failed_event_attributes: self.start_child_workflow_execution_failed_event_attributes,
            lambda_function_scheduled_event_attributes: self.lambda_function_scheduled_event_attributes,
            lambda_function_started_event_attributes: self.lambda_function_started_event_attributes,
            lambda_function_completed_event_attributes: self.lambda_function_completed_event_attributes,
            lambda_function_failed_event_attributes: self.lambda_function_failed_event_attributes,
            lambda_function_timed_out_event_attributes: self.lambda_function_timed_out_event_attributes,
            schedule_lambda_function_failed_event_attributes: self.schedule_lambda_function_failed_event_attributes,
            start_lambda_function_failed_event_attributes: self.start_lambda_function_failed_event_attributes,
        })
    }
}
