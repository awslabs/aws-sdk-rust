// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Decision attributes specified in <code>scheduleLambdaFunctionDecisionAttributes</code> within the list of decisions <code>decisions</code> passed to <code>RespondDecisionTaskCompleted</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduleLambdaFunctionDecisionAttributes {
    /// <p>A string that identifies the Lambda function execution in the event history.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name, or ARN, of the Lambda function to schedule.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.</p>
    #[doc(hidden)]
    pub control: std::option::Option<std::string::String>,
    /// <p>The optional input data to be supplied to the Lambda function.</p>
    #[doc(hidden)]
    pub input: std::option::Option<std::string::String>,
    /// <p>The timeout value, in seconds, after which the Lambda function is considered to be failed once it has started. This can be any integer from 1-300 (1s-5m). If no value is supplied, than a default value of 300s is assumed.</p>
    #[doc(hidden)]
    pub start_to_close_timeout: std::option::Option<std::string::String>,
}
impl ScheduleLambdaFunctionDecisionAttributes {
    /// <p>A string that identifies the Lambda function execution in the event history.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name, or ARN, of the Lambda function to schedule.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.</p>
    pub fn control(&self) -> std::option::Option<&str> {
        self.control.as_deref()
    }
    /// <p>The optional input data to be supplied to the Lambda function.</p>
    pub fn input(&self) -> std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>The timeout value, in seconds, after which the Lambda function is considered to be failed once it has started. This can be any integer from 1-300 (1s-5m). If no value is supplied, than a default value of 300s is assumed.</p>
    pub fn start_to_close_timeout(&self) -> std::option::Option<&str> {
        self.start_to_close_timeout.as_deref()
    }
}
impl ScheduleLambdaFunctionDecisionAttributes {
    /// Creates a new builder-style object to manufacture [`ScheduleLambdaFunctionDecisionAttributes`](crate::types::ScheduleLambdaFunctionDecisionAttributes).
    pub fn builder() -> crate::types::builders::ScheduleLambdaFunctionDecisionAttributesBuilder {
        crate::types::builders::ScheduleLambdaFunctionDecisionAttributesBuilder::default()
    }
}

/// A builder for [`ScheduleLambdaFunctionDecisionAttributes`](crate::types::ScheduleLambdaFunctionDecisionAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduleLambdaFunctionDecisionAttributesBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) control: std::option::Option<std::string::String>,
    pub(crate) input: std::option::Option<std::string::String>,
    pub(crate) start_to_close_timeout: std::option::Option<std::string::String>,
}
impl ScheduleLambdaFunctionDecisionAttributesBuilder {
    /// <p>A string that identifies the Lambda function execution in the event history.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>A string that identifies the Lambda function execution in the event history.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name, or ARN, of the Lambda function to schedule.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name, or ARN, of the Lambda function to schedule.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.</p>
    pub fn control(mut self, input: impl Into<std::string::String>) -> Self {
        self.control = Some(input.into());
        self
    }
    /// <p>The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.</p>
    pub fn set_control(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.control = input;
        self
    }
    /// <p>The optional input data to be supplied to the Lambda function.</p>
    pub fn input(mut self, input: impl Into<std::string::String>) -> Self {
        self.input = Some(input.into());
        self
    }
    /// <p>The optional input data to be supplied to the Lambda function.</p>
    pub fn set_input(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>The timeout value, in seconds, after which the Lambda function is considered to be failed once it has started. This can be any integer from 1-300 (1s-5m). If no value is supplied, than a default value of 300s is assumed.</p>
    pub fn start_to_close_timeout(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_to_close_timeout = Some(input.into());
        self
    }
    /// <p>The timeout value, in seconds, after which the Lambda function is considered to be failed once it has started. This can be any integer from 1-300 (1s-5m). If no value is supplied, than a default value of 300s is assumed.</p>
    pub fn set_start_to_close_timeout(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.start_to_close_timeout = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduleLambdaFunctionDecisionAttributes`](crate::types::ScheduleLambdaFunctionDecisionAttributes).
    pub fn build(self) -> crate::types::ScheduleLambdaFunctionDecisionAttributes {
        crate::types::ScheduleLambdaFunctionDecisionAttributes {
            id: self.id,
            name: self.name,
            control: self.control,
            input: self.input,
            start_to_close_timeout: self.start_to_close_timeout,
        }
    }
}
