// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>CancelTimerFailed</code> event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelTimerFailedEventAttributes {
    /// <p>The timerId provided in the <code>CancelTimer</code> decision that failed.</p>
    #[doc(hidden)]
    pub timer_id: std::option::Option<std::string::String>,
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    #[doc(hidden)]
    pub cause: std::option::Option<crate::types::CancelTimerFailedCause>,
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelTimer</code> decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    #[doc(hidden)]
    pub decision_task_completed_event_id: i64,
}
impl CancelTimerFailedEventAttributes {
    /// <p>The timerId provided in the <code>CancelTimer</code> decision that failed.</p>
    pub fn timer_id(&self) -> std::option::Option<&str> {
        self.timer_id.as_deref()
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn cause(&self) -> std::option::Option<&crate::types::CancelTimerFailedCause> {
        self.cause.as_ref()
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelTimer</code> decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn decision_task_completed_event_id(&self) -> i64 {
        self.decision_task_completed_event_id
    }
}
impl CancelTimerFailedEventAttributes {
    /// Creates a new builder-style object to manufacture [`CancelTimerFailedEventAttributes`](crate::types::CancelTimerFailedEventAttributes).
    pub fn builder() -> crate::types::builders::CancelTimerFailedEventAttributesBuilder {
        crate::types::builders::CancelTimerFailedEventAttributesBuilder::default()
    }
}

/// A builder for [`CancelTimerFailedEventAttributes`](crate::types::CancelTimerFailedEventAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CancelTimerFailedEventAttributesBuilder {
    pub(crate) timer_id: std::option::Option<std::string::String>,
    pub(crate) cause: std::option::Option<crate::types::CancelTimerFailedCause>,
    pub(crate) decision_task_completed_event_id: std::option::Option<i64>,
}
impl CancelTimerFailedEventAttributesBuilder {
    /// <p>The timerId provided in the <code>CancelTimer</code> decision that failed.</p>
    pub fn timer_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.timer_id = Some(input.into());
        self
    }
    /// <p>The timerId provided in the <code>CancelTimer</code> decision that failed.</p>
    pub fn set_timer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.timer_id = input;
        self
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn cause(mut self, input: crate::types::CancelTimerFailedCause) -> Self {
        self.cause = Some(input);
        self
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn set_cause(
        mut self,
        input: std::option::Option<crate::types::CancelTimerFailedCause>,
    ) -> Self {
        self.cause = input;
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelTimer</code> decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn decision_task_completed_event_id(mut self, input: i64) -> Self {
        self.decision_task_completed_event_id = Some(input);
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelTimer</code> decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_decision_task_completed_event_id(mut self, input: std::option::Option<i64>) -> Self {
        self.decision_task_completed_event_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CancelTimerFailedEventAttributes`](crate::types::CancelTimerFailedEventAttributes).
    pub fn build(self) -> crate::types::CancelTimerFailedEventAttributes {
        crate::types::CancelTimerFailedEventAttributes {
            timer_id: self.timer_id,
            cause: self.cause,
            decision_task_completed_event_id: self
                .decision_task_completed_event_id
                .unwrap_or_default(),
        }
    }
}
