// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a workflow execution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorkflowExecutionInfo {
    /// <p>The workflow execution this information is about.</p>
    #[doc(hidden)]
    pub execution: std::option::Option<crate::types::WorkflowExecution>,
    /// <p>The type of the workflow execution.</p>
    #[doc(hidden)]
    pub workflow_type: std::option::Option<crate::types::WorkflowType>,
    /// <p>The time when the execution was started.</p>
    #[doc(hidden)]
    pub start_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the workflow execution was closed. Set only if the execution status is CLOSED.</p>
    #[doc(hidden)]
    pub close_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current status of the execution.</p>
    #[doc(hidden)]
    pub execution_status: std::option::Option<crate::types::ExecutionStatus>,
    /// <p>If the execution status is closed then this specifies how the execution was closed:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code> – the execution was successfully completed.</p> </li>
    /// <li> <p> <code>CANCELED</code> – the execution was canceled.Cancellation allows the implementation to gracefully clean up before the execution is closed.</p> </li>
    /// <li> <p> <code>TERMINATED</code> – the execution was force terminated.</p> </li>
    /// <li> <p> <code>FAILED</code> – the execution failed to complete.</p> </li>
    /// <li> <p> <code>TIMED_OUT</code> – the execution did not complete in the alloted time and was automatically timed out.</p> </li>
    /// <li> <p> <code>CONTINUED_AS_NEW</code> – the execution is logically continued. This means the current execution was completed and a new execution was started to carry on the workflow.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub close_status: std::option::Option<crate::types::CloseStatus>,
    /// <p>If this workflow execution is a child of another execution then contains the workflow execution that started this execution.</p>
    #[doc(hidden)]
    pub parent: std::option::Option<crate::types::WorkflowExecution>,
    /// <p>The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.</p>
    #[doc(hidden)]
    pub tag_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Set to true if a cancellation is requested for this workflow execution.</p>
    #[doc(hidden)]
    pub cancel_requested: bool,
}
impl WorkflowExecutionInfo {
    /// <p>The workflow execution this information is about.</p>
    pub fn execution(&self) -> std::option::Option<&crate::types::WorkflowExecution> {
        self.execution.as_ref()
    }
    /// <p>The type of the workflow execution.</p>
    pub fn workflow_type(&self) -> std::option::Option<&crate::types::WorkflowType> {
        self.workflow_type.as_ref()
    }
    /// <p>The time when the execution was started.</p>
    pub fn start_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_timestamp.as_ref()
    }
    /// <p>The time when the workflow execution was closed. Set only if the execution status is CLOSED.</p>
    pub fn close_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.close_timestamp.as_ref()
    }
    /// <p>The current status of the execution.</p>
    pub fn execution_status(&self) -> std::option::Option<&crate::types::ExecutionStatus> {
        self.execution_status.as_ref()
    }
    /// <p>If the execution status is closed then this specifies how the execution was closed:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code> – the execution was successfully completed.</p> </li>
    /// <li> <p> <code>CANCELED</code> – the execution was canceled.Cancellation allows the implementation to gracefully clean up before the execution is closed.</p> </li>
    /// <li> <p> <code>TERMINATED</code> – the execution was force terminated.</p> </li>
    /// <li> <p> <code>FAILED</code> – the execution failed to complete.</p> </li>
    /// <li> <p> <code>TIMED_OUT</code> – the execution did not complete in the alloted time and was automatically timed out.</p> </li>
    /// <li> <p> <code>CONTINUED_AS_NEW</code> – the execution is logically continued. This means the current execution was completed and a new execution was started to carry on the workflow.</p> </li>
    /// </ul>
    pub fn close_status(&self) -> std::option::Option<&crate::types::CloseStatus> {
        self.close_status.as_ref()
    }
    /// <p>If this workflow execution is a child of another execution then contains the workflow execution that started this execution.</p>
    pub fn parent(&self) -> std::option::Option<&crate::types::WorkflowExecution> {
        self.parent.as_ref()
    }
    /// <p>The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.</p>
    pub fn tag_list(&self) -> std::option::Option<&[std::string::String]> {
        self.tag_list.as_deref()
    }
    /// <p>Set to true if a cancellation is requested for this workflow execution.</p>
    pub fn cancel_requested(&self) -> bool {
        self.cancel_requested
    }
}
impl WorkflowExecutionInfo {
    /// Creates a new builder-style object to manufacture [`WorkflowExecutionInfo`](crate::types::WorkflowExecutionInfo).
    pub fn builder() -> crate::types::builders::WorkflowExecutionInfoBuilder {
        crate::types::builders::WorkflowExecutionInfoBuilder::default()
    }
}

/// A builder for [`WorkflowExecutionInfo`](crate::types::WorkflowExecutionInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorkflowExecutionInfoBuilder {
    pub(crate) execution: std::option::Option<crate::types::WorkflowExecution>,
    pub(crate) workflow_type: std::option::Option<crate::types::WorkflowType>,
    pub(crate) start_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) close_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) execution_status: std::option::Option<crate::types::ExecutionStatus>,
    pub(crate) close_status: std::option::Option<crate::types::CloseStatus>,
    pub(crate) parent: std::option::Option<crate::types::WorkflowExecution>,
    pub(crate) tag_list: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) cancel_requested: std::option::Option<bool>,
}
impl WorkflowExecutionInfoBuilder {
    /// <p>The workflow execution this information is about.</p>
    pub fn execution(mut self, input: crate::types::WorkflowExecution) -> Self {
        self.execution = Some(input);
        self
    }
    /// <p>The workflow execution this information is about.</p>
    pub fn set_execution(
        mut self,
        input: std::option::Option<crate::types::WorkflowExecution>,
    ) -> Self {
        self.execution = input;
        self
    }
    /// <p>The type of the workflow execution.</p>
    pub fn workflow_type(mut self, input: crate::types::WorkflowType) -> Self {
        self.workflow_type = Some(input);
        self
    }
    /// <p>The type of the workflow execution.</p>
    pub fn set_workflow_type(
        mut self,
        input: std::option::Option<crate::types::WorkflowType>,
    ) -> Self {
        self.workflow_type = input;
        self
    }
    /// <p>The time when the execution was started.</p>
    pub fn start_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_timestamp = Some(input);
        self
    }
    /// <p>The time when the execution was started.</p>
    pub fn set_start_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_timestamp = input;
        self
    }
    /// <p>The time when the workflow execution was closed. Set only if the execution status is CLOSED.</p>
    pub fn close_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.close_timestamp = Some(input);
        self
    }
    /// <p>The time when the workflow execution was closed. Set only if the execution status is CLOSED.</p>
    pub fn set_close_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.close_timestamp = input;
        self
    }
    /// <p>The current status of the execution.</p>
    pub fn execution_status(mut self, input: crate::types::ExecutionStatus) -> Self {
        self.execution_status = Some(input);
        self
    }
    /// <p>The current status of the execution.</p>
    pub fn set_execution_status(
        mut self,
        input: std::option::Option<crate::types::ExecutionStatus>,
    ) -> Self {
        self.execution_status = input;
        self
    }
    /// <p>If the execution status is closed then this specifies how the execution was closed:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code> – the execution was successfully completed.</p> </li>
    /// <li> <p> <code>CANCELED</code> – the execution was canceled.Cancellation allows the implementation to gracefully clean up before the execution is closed.</p> </li>
    /// <li> <p> <code>TERMINATED</code> – the execution was force terminated.</p> </li>
    /// <li> <p> <code>FAILED</code> – the execution failed to complete.</p> </li>
    /// <li> <p> <code>TIMED_OUT</code> – the execution did not complete in the alloted time and was automatically timed out.</p> </li>
    /// <li> <p> <code>CONTINUED_AS_NEW</code> – the execution is logically continued. This means the current execution was completed and a new execution was started to carry on the workflow.</p> </li>
    /// </ul>
    pub fn close_status(mut self, input: crate::types::CloseStatus) -> Self {
        self.close_status = Some(input);
        self
    }
    /// <p>If the execution status is closed then this specifies how the execution was closed:</p>
    /// <ul>
    /// <li> <p> <code>COMPLETED</code> – the execution was successfully completed.</p> </li>
    /// <li> <p> <code>CANCELED</code> – the execution was canceled.Cancellation allows the implementation to gracefully clean up before the execution is closed.</p> </li>
    /// <li> <p> <code>TERMINATED</code> – the execution was force terminated.</p> </li>
    /// <li> <p> <code>FAILED</code> – the execution failed to complete.</p> </li>
    /// <li> <p> <code>TIMED_OUT</code> – the execution did not complete in the alloted time and was automatically timed out.</p> </li>
    /// <li> <p> <code>CONTINUED_AS_NEW</code> – the execution is logically continued. This means the current execution was completed and a new execution was started to carry on the workflow.</p> </li>
    /// </ul>
    pub fn set_close_status(
        mut self,
        input: std::option::Option<crate::types::CloseStatus>,
    ) -> Self {
        self.close_status = input;
        self
    }
    /// <p>If this workflow execution is a child of another execution then contains the workflow execution that started this execution.</p>
    pub fn parent(mut self, input: crate::types::WorkflowExecution) -> Self {
        self.parent = Some(input);
        self
    }
    /// <p>If this workflow execution is a child of another execution then contains the workflow execution that started this execution.</p>
    pub fn set_parent(
        mut self,
        input: std::option::Option<crate::types::WorkflowExecution>,
    ) -> Self {
        self.parent = input;
        self
    }
    /// Appends an item to `tag_list`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.</p>
    pub fn tag_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.tag_list.unwrap_or_default();
        v.push(input.into());
        self.tag_list = Some(v);
        self
    }
    /// <p>The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.</p>
    pub fn set_tag_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.tag_list = input;
        self
    }
    /// <p>Set to true if a cancellation is requested for this workflow execution.</p>
    pub fn cancel_requested(mut self, input: bool) -> Self {
        self.cancel_requested = Some(input);
        self
    }
    /// <p>Set to true if a cancellation is requested for this workflow execution.</p>
    pub fn set_cancel_requested(mut self, input: std::option::Option<bool>) -> Self {
        self.cancel_requested = input;
        self
    }
    /// Consumes the builder and constructs a [`WorkflowExecutionInfo`](crate::types::WorkflowExecutionInfo).
    pub fn build(self) -> crate::types::WorkflowExecutionInfo {
        crate::types::WorkflowExecutionInfo {
            execution: self.execution,
            workflow_type: self.workflow_type,
            start_timestamp: self.start_timestamp,
            close_timestamp: self.close_timestamp,
            execution_status: self.execution_status,
            close_status: self.close_status,
            parent: self.parent,
            tag_list: self.tag_list,
            cancel_requested: self.cancel_requested.unwrap_or_default(),
        }
    }
}
