// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about an activity type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActivityTypeInfo {
    /// <p>The <code>ActivityType</code> type structure representing the activity type.</p>
    #[doc(hidden)]
    pub activity_type: std::option::Option<crate::types::ActivityType>,
    /// <p>The current status of the activity type.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::RegistrationStatus>,
    /// <p>The description of the activity type provided in <code>RegisterActivityType</code>.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The date and time this activity type was created through <code>RegisterActivityType</code>.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>If DEPRECATED, the date and time <code>DeprecateActivityType</code> was called.</p>
    #[doc(hidden)]
    pub deprecation_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl ActivityTypeInfo {
    /// <p>The <code>ActivityType</code> type structure representing the activity type.</p>
    pub fn activity_type(&self) -> std::option::Option<&crate::types::ActivityType> {
        self.activity_type.as_ref()
    }
    /// <p>The current status of the activity type.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::RegistrationStatus> {
        self.status.as_ref()
    }
    /// <p>The description of the activity type provided in <code>RegisterActivityType</code>.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time this activity type was created through <code>RegisterActivityType</code>.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>If DEPRECATED, the date and time <code>DeprecateActivityType</code> was called.</p>
    pub fn deprecation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.deprecation_date.as_ref()
    }
}
impl ActivityTypeInfo {
    /// Creates a new builder-style object to manufacture [`ActivityTypeInfo`](crate::types::ActivityTypeInfo).
    pub fn builder() -> crate::types::builders::ActivityTypeInfoBuilder {
        crate::types::builders::ActivityTypeInfoBuilder::default()
    }
}

/// A builder for [`ActivityTypeInfo`](crate::types::ActivityTypeInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActivityTypeInfoBuilder {
    pub(crate) activity_type: std::option::Option<crate::types::ActivityType>,
    pub(crate) status: std::option::Option<crate::types::RegistrationStatus>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) deprecation_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl ActivityTypeInfoBuilder {
    /// <p>The <code>ActivityType</code> type structure representing the activity type.</p>
    pub fn activity_type(mut self, input: crate::types::ActivityType) -> Self {
        self.activity_type = Some(input);
        self
    }
    /// <p>The <code>ActivityType</code> type structure representing the activity type.</p>
    pub fn set_activity_type(
        mut self,
        input: std::option::Option<crate::types::ActivityType>,
    ) -> Self {
        self.activity_type = input;
        self
    }
    /// <p>The current status of the activity type.</p>
    pub fn status(mut self, input: crate::types::RegistrationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the activity type.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::RegistrationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The description of the activity type provided in <code>RegisterActivityType</code>.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the activity type provided in <code>RegisterActivityType</code>.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The date and time this activity type was created through <code>RegisterActivityType</code>.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The date and time this activity type was created through <code>RegisterActivityType</code>.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>If DEPRECATED, the date and time <code>DeprecateActivityType</code> was called.</p>
    pub fn deprecation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.deprecation_date = Some(input);
        self
    }
    /// <p>If DEPRECATED, the date and time <code>DeprecateActivityType</code> was called.</p>
    pub fn set_deprecation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.deprecation_date = input;
        self
    }
    /// Consumes the builder and constructs a [`ActivityTypeInfo`](crate::types::ActivityTypeInfo).
    pub fn build(self) -> crate::types::ActivityTypeInfo {
        crate::types::ActivityTypeInfo {
            activity_type: self.activity_type,
            status: self.status,
            description: self.description,
            creation_date: self.creation_date,
            deprecation_date: self.deprecation_date,
        }
    }
}
