// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `EventType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let eventtype = unimplemented!();
/// match eventtype {
///     EventType::ActivityTaskCancelRequested => { /* ... */ },
///     EventType::ActivityTaskCanceled => { /* ... */ },
///     EventType::ActivityTaskCompleted => { /* ... */ },
///     EventType::ActivityTaskFailed => { /* ... */ },
///     EventType::ActivityTaskScheduled => { /* ... */ },
///     EventType::ActivityTaskStarted => { /* ... */ },
///     EventType::ActivityTaskTimedOut => { /* ... */ },
///     EventType::CancelTimerFailed => { /* ... */ },
///     EventType::CancelWorkflowExecutionFailed => { /* ... */ },
///     EventType::ChildWorkflowExecutionCanceled => { /* ... */ },
///     EventType::ChildWorkflowExecutionCompleted => { /* ... */ },
///     EventType::ChildWorkflowExecutionFailed => { /* ... */ },
///     EventType::ChildWorkflowExecutionStarted => { /* ... */ },
///     EventType::ChildWorkflowExecutionTerminated => { /* ... */ },
///     EventType::ChildWorkflowExecutionTimedOut => { /* ... */ },
///     EventType::CompleteWorkflowExecutionFailed => { /* ... */ },
///     EventType::ContinueAsNewWorkflowExecutionFailed => { /* ... */ },
///     EventType::DecisionTaskCompleted => { /* ... */ },
///     EventType::DecisionTaskScheduled => { /* ... */ },
///     EventType::DecisionTaskStarted => { /* ... */ },
///     EventType::DecisionTaskTimedOut => { /* ... */ },
///     EventType::ExternalWorkflowExecutionCancelRequested => { /* ... */ },
///     EventType::ExternalWorkflowExecutionSignaled => { /* ... */ },
///     EventType::FailWorkflowExecutionFailed => { /* ... */ },
///     EventType::LambdaFunctionCompleted => { /* ... */ },
///     EventType::LambdaFunctionFailed => { /* ... */ },
///     EventType::LambdaFunctionScheduled => { /* ... */ },
///     EventType::LambdaFunctionStarted => { /* ... */ },
///     EventType::LambdaFunctionTimedOut => { /* ... */ },
///     EventType::MarkerRecorded => { /* ... */ },
///     EventType::RecordMarkerFailed => { /* ... */ },
///     EventType::RequestCancelActivityTaskFailed => { /* ... */ },
///     EventType::RequestCancelExternalWorkflowExecutionFailed => { /* ... */ },
///     EventType::RequestCancelExternalWorkflowExecutionInitiated => { /* ... */ },
///     EventType::ScheduleActivityTaskFailed => { /* ... */ },
///     EventType::ScheduleLambdaFunctionFailed => { /* ... */ },
///     EventType::SignalExternalWorkflowExecutionFailed => { /* ... */ },
///     EventType::SignalExternalWorkflowExecutionInitiated => { /* ... */ },
///     EventType::StartChildWorkflowExecutionFailed => { /* ... */ },
///     EventType::StartChildWorkflowExecutionInitiated => { /* ... */ },
///     EventType::StartLambdaFunctionFailed => { /* ... */ },
///     EventType::StartTimerFailed => { /* ... */ },
///     EventType::TimerCanceled => { /* ... */ },
///     EventType::TimerFired => { /* ... */ },
///     EventType::TimerStarted => { /* ... */ },
///     EventType::WorkflowExecutionCancelRequested => { /* ... */ },
///     EventType::WorkflowExecutionCanceled => { /* ... */ },
///     EventType::WorkflowExecutionCompleted => { /* ... */ },
///     EventType::WorkflowExecutionContinuedAsNew => { /* ... */ },
///     EventType::WorkflowExecutionFailed => { /* ... */ },
///     EventType::WorkflowExecutionSignaled => { /* ... */ },
///     EventType::WorkflowExecutionStarted => { /* ... */ },
///     EventType::WorkflowExecutionTerminated => { /* ... */ },
///     EventType::WorkflowExecutionTimedOut => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `eventtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `EventType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `EventType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `EventType::NewFeature` is defined.
/// Specifically, when `eventtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `EventType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum EventType {
    #[allow(missing_docs)] // documentation missing in model
    ActivityTaskCancelRequested,
    #[allow(missing_docs)] // documentation missing in model
    ActivityTaskCanceled,
    #[allow(missing_docs)] // documentation missing in model
    ActivityTaskCompleted,
    #[allow(missing_docs)] // documentation missing in model
    ActivityTaskFailed,
    #[allow(missing_docs)] // documentation missing in model
    ActivityTaskScheduled,
    #[allow(missing_docs)] // documentation missing in model
    ActivityTaskStarted,
    #[allow(missing_docs)] // documentation missing in model
    ActivityTaskTimedOut,
    #[allow(missing_docs)] // documentation missing in model
    CancelTimerFailed,
    #[allow(missing_docs)] // documentation missing in model
    CancelWorkflowExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    ChildWorkflowExecutionCanceled,
    #[allow(missing_docs)] // documentation missing in model
    ChildWorkflowExecutionCompleted,
    #[allow(missing_docs)] // documentation missing in model
    ChildWorkflowExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    ChildWorkflowExecutionStarted,
    #[allow(missing_docs)] // documentation missing in model
    ChildWorkflowExecutionTerminated,
    #[allow(missing_docs)] // documentation missing in model
    ChildWorkflowExecutionTimedOut,
    #[allow(missing_docs)] // documentation missing in model
    CompleteWorkflowExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    ContinueAsNewWorkflowExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    DecisionTaskCompleted,
    #[allow(missing_docs)] // documentation missing in model
    DecisionTaskScheduled,
    #[allow(missing_docs)] // documentation missing in model
    DecisionTaskStarted,
    #[allow(missing_docs)] // documentation missing in model
    DecisionTaskTimedOut,
    #[allow(missing_docs)] // documentation missing in model
    ExternalWorkflowExecutionCancelRequested,
    #[allow(missing_docs)] // documentation missing in model
    ExternalWorkflowExecutionSignaled,
    #[allow(missing_docs)] // documentation missing in model
    FailWorkflowExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    LambdaFunctionCompleted,
    #[allow(missing_docs)] // documentation missing in model
    LambdaFunctionFailed,
    #[allow(missing_docs)] // documentation missing in model
    LambdaFunctionScheduled,
    #[allow(missing_docs)] // documentation missing in model
    LambdaFunctionStarted,
    #[allow(missing_docs)] // documentation missing in model
    LambdaFunctionTimedOut,
    #[allow(missing_docs)] // documentation missing in model
    MarkerRecorded,
    #[allow(missing_docs)] // documentation missing in model
    RecordMarkerFailed,
    #[allow(missing_docs)] // documentation missing in model
    RequestCancelActivityTaskFailed,
    #[allow(missing_docs)] // documentation missing in model
    RequestCancelExternalWorkflowExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    RequestCancelExternalWorkflowExecutionInitiated,
    #[allow(missing_docs)] // documentation missing in model
    ScheduleActivityTaskFailed,
    #[allow(missing_docs)] // documentation missing in model
    ScheduleLambdaFunctionFailed,
    #[allow(missing_docs)] // documentation missing in model
    SignalExternalWorkflowExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    SignalExternalWorkflowExecutionInitiated,
    #[allow(missing_docs)] // documentation missing in model
    StartChildWorkflowExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    StartChildWorkflowExecutionInitiated,
    #[allow(missing_docs)] // documentation missing in model
    StartLambdaFunctionFailed,
    #[allow(missing_docs)] // documentation missing in model
    StartTimerFailed,
    #[allow(missing_docs)] // documentation missing in model
    TimerCanceled,
    #[allow(missing_docs)] // documentation missing in model
    TimerFired,
    #[allow(missing_docs)] // documentation missing in model
    TimerStarted,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowExecutionCancelRequested,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowExecutionCanceled,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowExecutionCompleted,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowExecutionContinuedAsNew,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowExecutionFailed,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowExecutionSignaled,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowExecutionStarted,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowExecutionTerminated,
    #[allow(missing_docs)] // documentation missing in model
    WorkflowExecutionTimedOut,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for EventType {
    fn from(s: &str) -> Self {
        match s {
            "ActivityTaskCancelRequested" => EventType::ActivityTaskCancelRequested,
            "ActivityTaskCanceled" => EventType::ActivityTaskCanceled,
            "ActivityTaskCompleted" => EventType::ActivityTaskCompleted,
            "ActivityTaskFailed" => EventType::ActivityTaskFailed,
            "ActivityTaskScheduled" => EventType::ActivityTaskScheduled,
            "ActivityTaskStarted" => EventType::ActivityTaskStarted,
            "ActivityTaskTimedOut" => EventType::ActivityTaskTimedOut,
            "CancelTimerFailed" => EventType::CancelTimerFailed,
            "CancelWorkflowExecutionFailed" => EventType::CancelWorkflowExecutionFailed,
            "ChildWorkflowExecutionCanceled" => EventType::ChildWorkflowExecutionCanceled,
            "ChildWorkflowExecutionCompleted" => EventType::ChildWorkflowExecutionCompleted,
            "ChildWorkflowExecutionFailed" => EventType::ChildWorkflowExecutionFailed,
            "ChildWorkflowExecutionStarted" => EventType::ChildWorkflowExecutionStarted,
            "ChildWorkflowExecutionTerminated" => EventType::ChildWorkflowExecutionTerminated,
            "ChildWorkflowExecutionTimedOut" => EventType::ChildWorkflowExecutionTimedOut,
            "CompleteWorkflowExecutionFailed" => EventType::CompleteWorkflowExecutionFailed,
            "ContinueAsNewWorkflowExecutionFailed" => {
                EventType::ContinueAsNewWorkflowExecutionFailed
            }
            "DecisionTaskCompleted" => EventType::DecisionTaskCompleted,
            "DecisionTaskScheduled" => EventType::DecisionTaskScheduled,
            "DecisionTaskStarted" => EventType::DecisionTaskStarted,
            "DecisionTaskTimedOut" => EventType::DecisionTaskTimedOut,
            "ExternalWorkflowExecutionCancelRequested" => {
                EventType::ExternalWorkflowExecutionCancelRequested
            }
            "ExternalWorkflowExecutionSignaled" => EventType::ExternalWorkflowExecutionSignaled,
            "FailWorkflowExecutionFailed" => EventType::FailWorkflowExecutionFailed,
            "LambdaFunctionCompleted" => EventType::LambdaFunctionCompleted,
            "LambdaFunctionFailed" => EventType::LambdaFunctionFailed,
            "LambdaFunctionScheduled" => EventType::LambdaFunctionScheduled,
            "LambdaFunctionStarted" => EventType::LambdaFunctionStarted,
            "LambdaFunctionTimedOut" => EventType::LambdaFunctionTimedOut,
            "MarkerRecorded" => EventType::MarkerRecorded,
            "RecordMarkerFailed" => EventType::RecordMarkerFailed,
            "RequestCancelActivityTaskFailed" => EventType::RequestCancelActivityTaskFailed,
            "RequestCancelExternalWorkflowExecutionFailed" => {
                EventType::RequestCancelExternalWorkflowExecutionFailed
            }
            "RequestCancelExternalWorkflowExecutionInitiated" => {
                EventType::RequestCancelExternalWorkflowExecutionInitiated
            }
            "ScheduleActivityTaskFailed" => EventType::ScheduleActivityTaskFailed,
            "ScheduleLambdaFunctionFailed" => EventType::ScheduleLambdaFunctionFailed,
            "SignalExternalWorkflowExecutionFailed" => {
                EventType::SignalExternalWorkflowExecutionFailed
            }
            "SignalExternalWorkflowExecutionInitiated" => {
                EventType::SignalExternalWorkflowExecutionInitiated
            }
            "StartChildWorkflowExecutionFailed" => EventType::StartChildWorkflowExecutionFailed,
            "StartChildWorkflowExecutionInitiated" => {
                EventType::StartChildWorkflowExecutionInitiated
            }
            "StartLambdaFunctionFailed" => EventType::StartLambdaFunctionFailed,
            "StartTimerFailed" => EventType::StartTimerFailed,
            "TimerCanceled" => EventType::TimerCanceled,
            "TimerFired" => EventType::TimerFired,
            "TimerStarted" => EventType::TimerStarted,
            "WorkflowExecutionCancelRequested" => EventType::WorkflowExecutionCancelRequested,
            "WorkflowExecutionCanceled" => EventType::WorkflowExecutionCanceled,
            "WorkflowExecutionCompleted" => EventType::WorkflowExecutionCompleted,
            "WorkflowExecutionContinuedAsNew" => EventType::WorkflowExecutionContinuedAsNew,
            "WorkflowExecutionFailed" => EventType::WorkflowExecutionFailed,
            "WorkflowExecutionSignaled" => EventType::WorkflowExecutionSignaled,
            "WorkflowExecutionStarted" => EventType::WorkflowExecutionStarted,
            "WorkflowExecutionTerminated" => EventType::WorkflowExecutionTerminated,
            "WorkflowExecutionTimedOut" => EventType::WorkflowExecutionTimedOut,
            other => EventType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for EventType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(EventType::from(s))
    }
}
impl EventType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            EventType::ActivityTaskCancelRequested => "ActivityTaskCancelRequested",
            EventType::ActivityTaskCanceled => "ActivityTaskCanceled",
            EventType::ActivityTaskCompleted => "ActivityTaskCompleted",
            EventType::ActivityTaskFailed => "ActivityTaskFailed",
            EventType::ActivityTaskScheduled => "ActivityTaskScheduled",
            EventType::ActivityTaskStarted => "ActivityTaskStarted",
            EventType::ActivityTaskTimedOut => "ActivityTaskTimedOut",
            EventType::CancelTimerFailed => "CancelTimerFailed",
            EventType::CancelWorkflowExecutionFailed => "CancelWorkflowExecutionFailed",
            EventType::ChildWorkflowExecutionCanceled => "ChildWorkflowExecutionCanceled",
            EventType::ChildWorkflowExecutionCompleted => "ChildWorkflowExecutionCompleted",
            EventType::ChildWorkflowExecutionFailed => "ChildWorkflowExecutionFailed",
            EventType::ChildWorkflowExecutionStarted => "ChildWorkflowExecutionStarted",
            EventType::ChildWorkflowExecutionTerminated => "ChildWorkflowExecutionTerminated",
            EventType::ChildWorkflowExecutionTimedOut => "ChildWorkflowExecutionTimedOut",
            EventType::CompleteWorkflowExecutionFailed => "CompleteWorkflowExecutionFailed",
            EventType::ContinueAsNewWorkflowExecutionFailed => {
                "ContinueAsNewWorkflowExecutionFailed"
            }
            EventType::DecisionTaskCompleted => "DecisionTaskCompleted",
            EventType::DecisionTaskScheduled => "DecisionTaskScheduled",
            EventType::DecisionTaskStarted => "DecisionTaskStarted",
            EventType::DecisionTaskTimedOut => "DecisionTaskTimedOut",
            EventType::ExternalWorkflowExecutionCancelRequested => {
                "ExternalWorkflowExecutionCancelRequested"
            }
            EventType::ExternalWorkflowExecutionSignaled => "ExternalWorkflowExecutionSignaled",
            EventType::FailWorkflowExecutionFailed => "FailWorkflowExecutionFailed",
            EventType::LambdaFunctionCompleted => "LambdaFunctionCompleted",
            EventType::LambdaFunctionFailed => "LambdaFunctionFailed",
            EventType::LambdaFunctionScheduled => "LambdaFunctionScheduled",
            EventType::LambdaFunctionStarted => "LambdaFunctionStarted",
            EventType::LambdaFunctionTimedOut => "LambdaFunctionTimedOut",
            EventType::MarkerRecorded => "MarkerRecorded",
            EventType::RecordMarkerFailed => "RecordMarkerFailed",
            EventType::RequestCancelActivityTaskFailed => "RequestCancelActivityTaskFailed",
            EventType::RequestCancelExternalWorkflowExecutionFailed => {
                "RequestCancelExternalWorkflowExecutionFailed"
            }
            EventType::RequestCancelExternalWorkflowExecutionInitiated => {
                "RequestCancelExternalWorkflowExecutionInitiated"
            }
            EventType::ScheduleActivityTaskFailed => "ScheduleActivityTaskFailed",
            EventType::ScheduleLambdaFunctionFailed => "ScheduleLambdaFunctionFailed",
            EventType::SignalExternalWorkflowExecutionFailed => {
                "SignalExternalWorkflowExecutionFailed"
            }
            EventType::SignalExternalWorkflowExecutionInitiated => {
                "SignalExternalWorkflowExecutionInitiated"
            }
            EventType::StartChildWorkflowExecutionFailed => "StartChildWorkflowExecutionFailed",
            EventType::StartChildWorkflowExecutionInitiated => {
                "StartChildWorkflowExecutionInitiated"
            }
            EventType::StartLambdaFunctionFailed => "StartLambdaFunctionFailed",
            EventType::StartTimerFailed => "StartTimerFailed",
            EventType::TimerCanceled => "TimerCanceled",
            EventType::TimerFired => "TimerFired",
            EventType::TimerStarted => "TimerStarted",
            EventType::WorkflowExecutionCancelRequested => "WorkflowExecutionCancelRequested",
            EventType::WorkflowExecutionCanceled => "WorkflowExecutionCanceled",
            EventType::WorkflowExecutionCompleted => "WorkflowExecutionCompleted",
            EventType::WorkflowExecutionContinuedAsNew => "WorkflowExecutionContinuedAsNew",
            EventType::WorkflowExecutionFailed => "WorkflowExecutionFailed",
            EventType::WorkflowExecutionSignaled => "WorkflowExecutionSignaled",
            EventType::WorkflowExecutionStarted => "WorkflowExecutionStarted",
            EventType::WorkflowExecutionTerminated => "WorkflowExecutionTerminated",
            EventType::WorkflowExecutionTimedOut => "WorkflowExecutionTimedOut",
            EventType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ActivityTaskCancelRequested",
            "ActivityTaskCanceled",
            "ActivityTaskCompleted",
            "ActivityTaskFailed",
            "ActivityTaskScheduled",
            "ActivityTaskStarted",
            "ActivityTaskTimedOut",
            "CancelTimerFailed",
            "CancelWorkflowExecutionFailed",
            "ChildWorkflowExecutionCanceled",
            "ChildWorkflowExecutionCompleted",
            "ChildWorkflowExecutionFailed",
            "ChildWorkflowExecutionStarted",
            "ChildWorkflowExecutionTerminated",
            "ChildWorkflowExecutionTimedOut",
            "CompleteWorkflowExecutionFailed",
            "ContinueAsNewWorkflowExecutionFailed",
            "DecisionTaskCompleted",
            "DecisionTaskScheduled",
            "DecisionTaskStarted",
            "DecisionTaskTimedOut",
            "ExternalWorkflowExecutionCancelRequested",
            "ExternalWorkflowExecutionSignaled",
            "FailWorkflowExecutionFailed",
            "LambdaFunctionCompleted",
            "LambdaFunctionFailed",
            "LambdaFunctionScheduled",
            "LambdaFunctionStarted",
            "LambdaFunctionTimedOut",
            "MarkerRecorded",
            "RecordMarkerFailed",
            "RequestCancelActivityTaskFailed",
            "RequestCancelExternalWorkflowExecutionFailed",
            "RequestCancelExternalWorkflowExecutionInitiated",
            "ScheduleActivityTaskFailed",
            "ScheduleLambdaFunctionFailed",
            "SignalExternalWorkflowExecutionFailed",
            "SignalExternalWorkflowExecutionInitiated",
            "StartChildWorkflowExecutionFailed",
            "StartChildWorkflowExecutionInitiated",
            "StartLambdaFunctionFailed",
            "StartTimerFailed",
            "TimerCanceled",
            "TimerFired",
            "TimerStarted",
            "WorkflowExecutionCancelRequested",
            "WorkflowExecutionCanceled",
            "WorkflowExecutionCompleted",
            "WorkflowExecutionContinuedAsNew",
            "WorkflowExecutionFailed",
            "WorkflowExecutionSignaled",
            "WorkflowExecutionStarted",
            "WorkflowExecutionTerminated",
            "WorkflowExecutionTimedOut",
        ]
    }
}
impl AsRef<str> for EventType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
