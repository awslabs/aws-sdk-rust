// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>ScheduleActivityTaskFailed</code> event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduleActivityTaskFailedEventAttributes {
    /// <p>The activity type provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    #[doc(hidden)]
    pub activity_type: std::option::Option<crate::types::ActivityType>,
    /// <p>The activityId provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    #[doc(hidden)]
    pub activity_id: std::option::Option<std::string::String>,
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    #[doc(hidden)]
    pub cause: std::option::Option<crate::types::ScheduleActivityTaskFailedCause>,
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    #[doc(hidden)]
    pub decision_task_completed_event_id: i64,
}
impl ScheduleActivityTaskFailedEventAttributes {
    /// <p>The activity type provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    pub fn activity_type(&self) -> std::option::Option<&crate::types::ActivityType> {
        self.activity_type.as_ref()
    }
    /// <p>The activityId provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    pub fn activity_id(&self) -> std::option::Option<&str> {
        self.activity_id.as_deref()
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn cause(&self) -> std::option::Option<&crate::types::ScheduleActivityTaskFailedCause> {
        self.cause.as_ref()
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn decision_task_completed_event_id(&self) -> i64 {
        self.decision_task_completed_event_id
    }
}
impl ScheduleActivityTaskFailedEventAttributes {
    /// Creates a new builder-style object to manufacture [`ScheduleActivityTaskFailedEventAttributes`](crate::types::ScheduleActivityTaskFailedEventAttributes).
    pub fn builder() -> crate::types::builders::ScheduleActivityTaskFailedEventAttributesBuilder {
        crate::types::builders::ScheduleActivityTaskFailedEventAttributesBuilder::default()
    }
}

/// A builder for [`ScheduleActivityTaskFailedEventAttributes`](crate::types::ScheduleActivityTaskFailedEventAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduleActivityTaskFailedEventAttributesBuilder {
    pub(crate) activity_type: std::option::Option<crate::types::ActivityType>,
    pub(crate) activity_id: std::option::Option<std::string::String>,
    pub(crate) cause: std::option::Option<crate::types::ScheduleActivityTaskFailedCause>,
    pub(crate) decision_task_completed_event_id: std::option::Option<i64>,
}
impl ScheduleActivityTaskFailedEventAttributesBuilder {
    /// <p>The activity type provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    pub fn activity_type(mut self, input: crate::types::ActivityType) -> Self {
        self.activity_type = Some(input);
        self
    }
    /// <p>The activity type provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    pub fn set_activity_type(
        mut self,
        input: std::option::Option<crate::types::ActivityType>,
    ) -> Self {
        self.activity_type = input;
        self
    }
    /// <p>The activityId provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    pub fn activity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.activity_id = Some(input.into());
        self
    }
    /// <p>The activityId provided in the <code>ScheduleActivityTask</code> decision that failed.</p>
    pub fn set_activity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.activity_id = input;
        self
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn cause(mut self, input: crate::types::ScheduleActivityTaskFailedCause) -> Self {
        self.cause = Some(input);
        self
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn set_cause(
        mut self,
        input: std::option::Option<crate::types::ScheduleActivityTaskFailedCause>,
    ) -> Self {
        self.cause = input;
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn decision_task_completed_event_id(mut self, input: i64) -> Self {
        self.decision_task_completed_event_id = Some(input);
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_decision_task_completed_event_id(mut self, input: std::option::Option<i64>) -> Self {
        self.decision_task_completed_event_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduleActivityTaskFailedEventAttributes`](crate::types::ScheduleActivityTaskFailedEventAttributes).
    pub fn build(self) -> crate::types::ScheduleActivityTaskFailedEventAttributes {
        crate::types::ScheduleActivityTaskFailedEventAttributes {
            activity_type: self.activity_type,
            activity_id: self.activity_id,
            cause: self.cause,
            decision_task_completed_event_id: self
                .decision_task_completed_event_id
                .unwrap_or_default(),
        }
    }
}
