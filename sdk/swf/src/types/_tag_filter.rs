// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to filter the workflow executions in visibility APIs based on a tag.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TagFilter {
    /// <p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p>
    /// <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    pub tag: ::std::string::String,
}
impl TagFilter {
    /// <p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p>
    /// <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    pub fn tag(&self) -> &str {
        use std::ops::Deref;
        self.tag.deref()
    }
}
impl TagFilter {
    /// Creates a new builder-style object to manufacture [`TagFilter`](crate::types::TagFilter).
    pub fn builder() -> crate::types::builders::TagFilterBuilder {
        crate::types::builders::TagFilterBuilder::default()
    }
}

/// A builder for [`TagFilter`](crate::types::TagFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TagFilterBuilder {
    pub(crate) tag: ::std::option::Option<::std::string::String>,
}
impl TagFilterBuilder {
    /// <p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p>
    /// <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    /// This field is required.
    pub fn tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p>
    /// <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    pub fn set_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag = input;
        self
    }
    /// <p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p>
    /// <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    pub fn get_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag
    }
    /// Consumes the builder and constructs a [`TagFilter`](crate::types::TagFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`tag`](crate::types::builders::TagFilterBuilder::tag)
    pub fn build(self) -> ::std::result::Result<crate::types::TagFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TagFilter {
            tag: self.tag.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tag",
                    "tag was not specified but it is required when building TagFilter",
                )
            })?,
        })
    }
}
