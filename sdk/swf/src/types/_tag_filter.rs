// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to filter the workflow executions in visibility APIs based on a tag.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagFilter {
    /// <p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p>
    /// <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    #[doc(hidden)]
    pub tag: std::option::Option<std::string::String>,
}
impl TagFilter {
    /// <p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p>
    /// <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    pub fn tag(&self) -> std::option::Option<&str> {
        self.tag.as_deref()
    }
}
impl TagFilter {
    /// Creates a new builder-style object to manufacture [`TagFilter`](crate::types::TagFilter).
    pub fn builder() -> crate::types::builders::TagFilterBuilder {
        crate::types::builders::TagFilterBuilder::default()
    }
}

/// A builder for [`TagFilter`](crate::types::TagFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TagFilterBuilder {
    pub(crate) tag: std::option::Option<std::string::String>,
}
impl TagFilterBuilder {
    /// <p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p>
    /// <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    pub fn tag(mut self, input: impl Into<std::string::String>) -> Self {
        self.tag = Some(input.into());
        self
    }
    /// <p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p>
    /// <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
    pub fn set_tag(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tag = input;
        self
    }
    /// Consumes the builder and constructs a [`TagFilter`](crate::types::TagFilter).
    pub fn build(self) -> crate::types::TagFilter {
        crate::types::TagFilter { tag: self.tag }
    }
}
