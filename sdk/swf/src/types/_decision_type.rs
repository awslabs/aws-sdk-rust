// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DecisionType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let decisiontype = unimplemented!();
/// match decisiontype {
///     DecisionType::CancelTimer => { /* ... */ },
///     DecisionType::CancelWorkflowExecution => { /* ... */ },
///     DecisionType::CompleteWorkflowExecution => { /* ... */ },
///     DecisionType::ContinueAsNewWorkflowExecution => { /* ... */ },
///     DecisionType::FailWorkflowExecution => { /* ... */ },
///     DecisionType::RecordMarker => { /* ... */ },
///     DecisionType::RequestCancelActivityTask => { /* ... */ },
///     DecisionType::RequestCancelExternalWorkflowExecution => { /* ... */ },
///     DecisionType::ScheduleActivityTask => { /* ... */ },
///     DecisionType::ScheduleLambdaFunction => { /* ... */ },
///     DecisionType::SignalExternalWorkflowExecution => { /* ... */ },
///     DecisionType::StartChildWorkflowExecution => { /* ... */ },
///     DecisionType::StartTimer => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `decisiontype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DecisionType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DecisionType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DecisionType::NewFeature` is defined.
/// Specifically, when `decisiontype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DecisionType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DecisionType {
    #[allow(missing_docs)] // documentation missing in model
    CancelTimer,
    #[allow(missing_docs)] // documentation missing in model
    CancelWorkflowExecution,
    #[allow(missing_docs)] // documentation missing in model
    CompleteWorkflowExecution,
    #[allow(missing_docs)] // documentation missing in model
    ContinueAsNewWorkflowExecution,
    #[allow(missing_docs)] // documentation missing in model
    FailWorkflowExecution,
    #[allow(missing_docs)] // documentation missing in model
    RecordMarker,
    #[allow(missing_docs)] // documentation missing in model
    RequestCancelActivityTask,
    #[allow(missing_docs)] // documentation missing in model
    RequestCancelExternalWorkflowExecution,
    #[allow(missing_docs)] // documentation missing in model
    ScheduleActivityTask,
    #[allow(missing_docs)] // documentation missing in model
    ScheduleLambdaFunction,
    #[allow(missing_docs)] // documentation missing in model
    SignalExternalWorkflowExecution,
    #[allow(missing_docs)] // documentation missing in model
    StartChildWorkflowExecution,
    #[allow(missing_docs)] // documentation missing in model
    StartTimer,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for DecisionType {
    fn from(s: &str) -> Self {
        match s {
            "CancelTimer" => DecisionType::CancelTimer,
            "CancelWorkflowExecution" => DecisionType::CancelWorkflowExecution,
            "CompleteWorkflowExecution" => DecisionType::CompleteWorkflowExecution,
            "ContinueAsNewWorkflowExecution" => DecisionType::ContinueAsNewWorkflowExecution,
            "FailWorkflowExecution" => DecisionType::FailWorkflowExecution,
            "RecordMarker" => DecisionType::RecordMarker,
            "RequestCancelActivityTask" => DecisionType::RequestCancelActivityTask,
            "RequestCancelExternalWorkflowExecution" => {
                DecisionType::RequestCancelExternalWorkflowExecution
            }
            "ScheduleActivityTask" => DecisionType::ScheduleActivityTask,
            "ScheduleLambdaFunction" => DecisionType::ScheduleLambdaFunction,
            "SignalExternalWorkflowExecution" => DecisionType::SignalExternalWorkflowExecution,
            "StartChildWorkflowExecution" => DecisionType::StartChildWorkflowExecution,
            "StartTimer" => DecisionType::StartTimer,
            other => {
                DecisionType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for DecisionType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DecisionType::from(s))
    }
}
impl DecisionType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DecisionType::CancelTimer => "CancelTimer",
            DecisionType::CancelWorkflowExecution => "CancelWorkflowExecution",
            DecisionType::CompleteWorkflowExecution => "CompleteWorkflowExecution",
            DecisionType::ContinueAsNewWorkflowExecution => "ContinueAsNewWorkflowExecution",
            DecisionType::FailWorkflowExecution => "FailWorkflowExecution",
            DecisionType::RecordMarker => "RecordMarker",
            DecisionType::RequestCancelActivityTask => "RequestCancelActivityTask",
            DecisionType::RequestCancelExternalWorkflowExecution => {
                "RequestCancelExternalWorkflowExecution"
            }
            DecisionType::ScheduleActivityTask => "ScheduleActivityTask",
            DecisionType::ScheduleLambdaFunction => "ScheduleLambdaFunction",
            DecisionType::SignalExternalWorkflowExecution => "SignalExternalWorkflowExecution",
            DecisionType::StartChildWorkflowExecution => "StartChildWorkflowExecution",
            DecisionType::StartTimer => "StartTimer",
            DecisionType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CancelTimer",
            "CancelWorkflowExecution",
            "CompleteWorkflowExecution",
            "ContinueAsNewWorkflowExecution",
            "FailWorkflowExecution",
            "RecordMarker",
            "RequestCancelActivityTask",
            "RequestCancelExternalWorkflowExecution",
            "ScheduleActivityTask",
            "ScheduleLambdaFunction",
            "SignalExternalWorkflowExecution",
            "StartChildWorkflowExecution",
            "StartTimer",
        ]
    }
}
impl AsRef<str> for DecisionType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
