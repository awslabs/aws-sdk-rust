// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains general information about a domain.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainInfo {
    /// <p>The name of the domain. This name is unique within the account.</p>
    pub name: ::std::string::String,
    /// <p>The status of the domain:</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The domain was deprecated using <code>DeprecateDomain</code>, but is still in use. You should not create new workflow executions in this domain. </p> </li>
    /// </ul>
    pub status: crate::types::RegistrationStatus,
    /// <p>The description of the domain provided through <code>RegisterDomain</code>.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the domain.</p>
    pub arn: ::std::option::Option<::std::string::String>,
}
impl DomainInfo {
    /// <p>The name of the domain. This name is unique within the account.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The status of the domain:</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The domain was deprecated using <code>DeprecateDomain</code>, but is still in use. You should not create new workflow executions in this domain. </p> </li>
    /// </ul>
    pub fn status(&self) -> &crate::types::RegistrationStatus {
        &self.status
    }
    /// <p>The description of the domain provided through <code>RegisterDomain</code>.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the domain.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl DomainInfo {
    /// Creates a new builder-style object to manufacture [`DomainInfo`](crate::types::DomainInfo).
    pub fn builder() -> crate::types::builders::DomainInfoBuilder {
        crate::types::builders::DomainInfoBuilder::default()
    }
}

/// A builder for [`DomainInfo`](crate::types::DomainInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DomainInfoBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RegistrationStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
}
impl DomainInfoBuilder {
    /// <p>The name of the domain. This name is unique within the account.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain. This name is unique within the account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the domain. This name is unique within the account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the domain:</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The domain was deprecated using <code>DeprecateDomain</code>, but is still in use. You should not create new workflow executions in this domain. </p> </li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::RegistrationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the domain:</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The domain was deprecated using <code>DeprecateDomain</code>, but is still in use. You should not create new workflow executions in this domain. </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RegistrationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the domain:</p>
    /// <ul>
    /// <li> <p> <code>REGISTERED</code> – The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions. </p> </li>
    /// <li> <p> <code>DEPRECATED</code> – The domain was deprecated using <code>DeprecateDomain</code>, but is still in use. You should not create new workflow executions in this domain. </p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RegistrationStatus> {
        &self.status
    }
    /// <p>The description of the domain provided through <code>RegisterDomain</code>.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the domain provided through <code>RegisterDomain</code>.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the domain provided through <code>RegisterDomain</code>.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ARN of the domain.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the domain.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the domain.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Consumes the builder and constructs a [`DomainInfo`](crate::types::DomainInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DomainInfoBuilder::name)
    /// - [`status`](crate::types::builders::DomainInfoBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::DomainInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DomainInfo {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DomainInfo",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building DomainInfo",
                )
            })?,
            description: self.description,
            arn: self.arn,
        })
    }
}
