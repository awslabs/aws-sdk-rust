// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a workflow type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowTypeInfo {
    /// <p>The workflow type this information is about.</p>
    pub workflow_type: ::std::option::Option<crate::types::WorkflowType>,
    /// <p>The current status of the workflow type.</p>
    pub status: crate::types::RegistrationStatus,
    /// <p>The description of the type registered through <code>RegisterWorkflowType</code>.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date when this type was registered.</p>
    pub creation_date: ::aws_smithy_types::DateTime,
    /// <p>If the type is in deprecated state, then it is set to the date when the type was deprecated.</p>
    pub deprecation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl WorkflowTypeInfo {
    /// <p>The workflow type this information is about.</p>
    pub fn workflow_type(&self) -> ::std::option::Option<&crate::types::WorkflowType> {
        self.workflow_type.as_ref()
    }
    /// <p>The current status of the workflow type.</p>
    pub fn status(&self) -> &crate::types::RegistrationStatus {
        &self.status
    }
    /// <p>The description of the type registered through <code>RegisterWorkflowType</code>.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date when this type was registered.</p>
    pub fn creation_date(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_date
    }
    /// <p>If the type is in deprecated state, then it is set to the date when the type was deprecated.</p>
    pub fn deprecation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.deprecation_date.as_ref()
    }
}
impl WorkflowTypeInfo {
    /// Creates a new builder-style object to manufacture [`WorkflowTypeInfo`](crate::types::WorkflowTypeInfo).
    pub fn builder() -> crate::types::builders::WorkflowTypeInfoBuilder {
        crate::types::builders::WorkflowTypeInfoBuilder::default()
    }
}

/// A builder for [`WorkflowTypeInfo`](crate::types::WorkflowTypeInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowTypeInfoBuilder {
    pub(crate) workflow_type: ::std::option::Option<crate::types::WorkflowType>,
    pub(crate) status: ::std::option::Option<crate::types::RegistrationStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) deprecation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl WorkflowTypeInfoBuilder {
    /// <p>The workflow type this information is about.</p>
    /// This field is required.
    pub fn workflow_type(mut self, input: crate::types::WorkflowType) -> Self {
        self.workflow_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The workflow type this information is about.</p>
    pub fn set_workflow_type(mut self, input: ::std::option::Option<crate::types::WorkflowType>) -> Self {
        self.workflow_type = input;
        self
    }
    /// <p>The workflow type this information is about.</p>
    pub fn get_workflow_type(&self) -> &::std::option::Option<crate::types::WorkflowType> {
        &self.workflow_type
    }
    /// <p>The current status of the workflow type.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::RegistrationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the workflow type.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RegistrationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the workflow type.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RegistrationStatus> {
        &self.status
    }
    /// <p>The description of the type registered through <code>RegisterWorkflowType</code>.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the type registered through <code>RegisterWorkflowType</code>.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the type registered through <code>RegisterWorkflowType</code>.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date when this type was registered.</p>
    /// This field is required.
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when this type was registered.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date when this type was registered.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>If the type is in deprecated state, then it is set to the date when the type was deprecated.</p>
    pub fn deprecation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.deprecation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the type is in deprecated state, then it is set to the date when the type was deprecated.</p>
    pub fn set_deprecation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.deprecation_date = input;
        self
    }
    /// <p>If the type is in deprecated state, then it is set to the date when the type was deprecated.</p>
    pub fn get_deprecation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.deprecation_date
    }
    /// Consumes the builder and constructs a [`WorkflowTypeInfo`](crate::types::WorkflowTypeInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::WorkflowTypeInfoBuilder::status)
    /// - [`creation_date`](crate::types::builders::WorkflowTypeInfoBuilder::creation_date)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkflowTypeInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkflowTypeInfo {
            workflow_type: self.workflow_type,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building WorkflowTypeInfo",
                )
            })?,
            description: self.description,
            creation_date: self.creation_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_date",
                    "creation_date was not specified but it is required when building WorkflowTypeInfo",
                )
            })?,
            deprecation_date: self.deprecation_date,
        })
    }
}
