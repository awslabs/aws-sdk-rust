// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>CancelWorkflowExecutionFailed</code> event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CancelWorkflowExecutionFailedEventAttributes {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub cause: crate::types::CancelWorkflowExecutionFailedCause,
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub decision_task_completed_event_id: i64,
}
impl CancelWorkflowExecutionFailedEventAttributes {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn cause(&self) -> &crate::types::CancelWorkflowExecutionFailedCause {
        &self.cause
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn decision_task_completed_event_id(&self) -> i64 {
        self.decision_task_completed_event_id
    }
}
impl CancelWorkflowExecutionFailedEventAttributes {
    /// Creates a new builder-style object to manufacture [`CancelWorkflowExecutionFailedEventAttributes`](crate::types::CancelWorkflowExecutionFailedEventAttributes).
    pub fn builder() -> crate::types::builders::CancelWorkflowExecutionFailedEventAttributesBuilder {
        crate::types::builders::CancelWorkflowExecutionFailedEventAttributesBuilder::default()
    }
}

/// A builder for [`CancelWorkflowExecutionFailedEventAttributes`](crate::types::CancelWorkflowExecutionFailedEventAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CancelWorkflowExecutionFailedEventAttributesBuilder {
    pub(crate) cause: ::std::option::Option<crate::types::CancelWorkflowExecutionFailedCause>,
    pub(crate) decision_task_completed_event_id: ::std::option::Option<i64>,
}
impl CancelWorkflowExecutionFailedEventAttributesBuilder {
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    /// This field is required.
    pub fn cause(mut self, input: crate::types::CancelWorkflowExecutionFailedCause) -> Self {
        self.cause = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn set_cause(mut self, input: ::std::option::Option<crate::types::CancelWorkflowExecutionFailedCause>) -> Self {
        self.cause = input;
        self
    }
    /// <p>The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.</p> <note>
    /// <p>If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
    /// </note>
    pub fn get_cause(&self) -> &::std::option::Option<crate::types::CancelWorkflowExecutionFailedCause> {
        &self.cause
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    /// This field is required.
    pub fn decision_task_completed_event_id(mut self, input: i64) -> Self {
        self.decision_task_completed_event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_decision_task_completed_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.decision_task_completed_event_id = input;
        self
    }
    /// <p>The ID of the <code>DecisionTaskCompleted</code> event corresponding to the decision task that resulted in the <code>CancelWorkflowExecution</code> decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn get_decision_task_completed_event_id(&self) -> &::std::option::Option<i64> {
        &self.decision_task_completed_event_id
    }
    /// Consumes the builder and constructs a [`CancelWorkflowExecutionFailedEventAttributes`](crate::types::CancelWorkflowExecutionFailedEventAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`cause`](crate::types::builders::CancelWorkflowExecutionFailedEventAttributesBuilder::cause)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CancelWorkflowExecutionFailedEventAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CancelWorkflowExecutionFailedEventAttributes {
            cause: self.cause.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cause",
                    "cause was not specified but it is required when building CancelWorkflowExecutionFailedEventAttributes",
                )
            })?,
            decision_task_completed_event_id: self.decision_task_completed_event_id.unwrap_or_default(),
        })
    }
}
