// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of the <code>TimerFired</code> event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimerFiredEventAttributes {
    /// <p>The unique ID of the timer that fired.</p>
    pub timer_id: ::std::string::String,
    /// <p>The ID of the <code>TimerStarted</code> event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub started_event_id: i64,
}
impl TimerFiredEventAttributes {
    /// <p>The unique ID of the timer that fired.</p>
    pub fn timer_id(&self) -> &str {
        use std::ops::Deref;
        self.timer_id.deref()
    }
    /// <p>The ID of the <code>TimerStarted</code> event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn started_event_id(&self) -> i64 {
        self.started_event_id
    }
}
impl TimerFiredEventAttributes {
    /// Creates a new builder-style object to manufacture [`TimerFiredEventAttributes`](crate::types::TimerFiredEventAttributes).
    pub fn builder() -> crate::types::builders::TimerFiredEventAttributesBuilder {
        crate::types::builders::TimerFiredEventAttributesBuilder::default()
    }
}

/// A builder for [`TimerFiredEventAttributes`](crate::types::TimerFiredEventAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimerFiredEventAttributesBuilder {
    pub(crate) timer_id: ::std::option::Option<::std::string::String>,
    pub(crate) started_event_id: ::std::option::Option<i64>,
}
impl TimerFiredEventAttributesBuilder {
    /// <p>The unique ID of the timer that fired.</p>
    /// This field is required.
    pub fn timer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the timer that fired.</p>
    pub fn set_timer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timer_id = input;
        self
    }
    /// <p>The unique ID of the timer that fired.</p>
    pub fn get_timer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.timer_id
    }
    /// <p>The ID of the <code>TimerStarted</code> event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    /// This field is required.
    pub fn started_event_id(mut self, input: i64) -> Self {
        self.started_event_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the <code>TimerStarted</code> event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn set_started_event_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_event_id = input;
        self
    }
    /// <p>The ID of the <code>TimerStarted</code> event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.</p>
    pub fn get_started_event_id(&self) -> &::std::option::Option<i64> {
        &self.started_event_id
    }
    /// Consumes the builder and constructs a [`TimerFiredEventAttributes`](crate::types::TimerFiredEventAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`timer_id`](crate::types::builders::TimerFiredEventAttributesBuilder::timer_id)
    pub fn build(self) -> ::std::result::Result<crate::types::TimerFiredEventAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TimerFiredEventAttributes {
            timer_id: self.timer_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timer_id",
                    "timer_id was not specified but it is required when building TimerFiredEventAttributes",
                )
            })?,
            started_event_id: self.started_event_id.unwrap_or_default(),
        })
    }
}
