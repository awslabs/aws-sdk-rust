// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to filter the closed workflow executions in visibility APIs by their close status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloseStatusFilter {
    /// <p> The close status that must match the close status of an execution for it to meet the criteria of this filter.</p>
    pub status: crate::types::CloseStatus,
}
impl CloseStatusFilter {
    /// <p> The close status that must match the close status of an execution for it to meet the criteria of this filter.</p>
    pub fn status(&self) -> &crate::types::CloseStatus {
        &self.status
    }
}
impl CloseStatusFilter {
    /// Creates a new builder-style object to manufacture [`CloseStatusFilter`](crate::types::CloseStatusFilter).
    pub fn builder() -> crate::types::builders::CloseStatusFilterBuilder {
        crate::types::builders::CloseStatusFilterBuilder::default()
    }
}

/// A builder for [`CloseStatusFilter`](crate::types::CloseStatusFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloseStatusFilterBuilder {
    pub(crate) status: ::std::option::Option<crate::types::CloseStatus>,
}
impl CloseStatusFilterBuilder {
    /// <p> The close status that must match the close status of an execution for it to meet the criteria of this filter.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::CloseStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The close status that must match the close status of an execution for it to meet the criteria of this filter.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CloseStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The close status that must match the close status of an execution for it to meet the criteria of this filter.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CloseStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`CloseStatusFilter`](crate::types::CloseStatusFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::CloseStatusFilterBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::CloseStatusFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CloseStatusFilter {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CloseStatusFilter",
                )
            })?,
        })
    }
}
