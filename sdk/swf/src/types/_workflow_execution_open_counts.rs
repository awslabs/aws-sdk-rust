// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the counts of open tasks, child workflow executions and timers for a workflow execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowExecutionOpenCounts {
    /// <p>The count of activity tasks whose status is <code>OPEN</code>.</p>
    pub open_activity_tasks: i32,
    /// <p>The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.</p>
    pub open_decision_tasks: i32,
    /// <p>The count of timers started by this workflow execution that have not fired yet.</p>
    pub open_timers: i32,
    /// <p>The count of child workflow executions whose status is <code>OPEN</code>.</p>
    pub open_child_workflow_executions: i32,
    /// <p>The count of Lambda tasks whose status is <code>OPEN</code>.</p>
    pub open_lambda_functions: i32,
}
impl WorkflowExecutionOpenCounts {
    /// <p>The count of activity tasks whose status is <code>OPEN</code>.</p>
    pub fn open_activity_tasks(&self) -> i32 {
        self.open_activity_tasks
    }
    /// <p>The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.</p>
    pub fn open_decision_tasks(&self) -> i32 {
        self.open_decision_tasks
    }
    /// <p>The count of timers started by this workflow execution that have not fired yet.</p>
    pub fn open_timers(&self) -> i32 {
        self.open_timers
    }
    /// <p>The count of child workflow executions whose status is <code>OPEN</code>.</p>
    pub fn open_child_workflow_executions(&self) -> i32 {
        self.open_child_workflow_executions
    }
    /// <p>The count of Lambda tasks whose status is <code>OPEN</code>.</p>
    pub fn open_lambda_functions(&self) -> i32 {
        self.open_lambda_functions
    }
}
impl WorkflowExecutionOpenCounts {
    /// Creates a new builder-style object to manufacture [`WorkflowExecutionOpenCounts`](crate::types::WorkflowExecutionOpenCounts).
    pub fn builder() -> crate::types::builders::WorkflowExecutionOpenCountsBuilder {
        crate::types::builders::WorkflowExecutionOpenCountsBuilder::default()
    }
}

/// A builder for [`WorkflowExecutionOpenCounts`](crate::types::WorkflowExecutionOpenCounts).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowExecutionOpenCountsBuilder {
    pub(crate) open_activity_tasks: ::std::option::Option<i32>,
    pub(crate) open_decision_tasks: ::std::option::Option<i32>,
    pub(crate) open_timers: ::std::option::Option<i32>,
    pub(crate) open_child_workflow_executions: ::std::option::Option<i32>,
    pub(crate) open_lambda_functions: ::std::option::Option<i32>,
}
impl WorkflowExecutionOpenCountsBuilder {
    /// <p>The count of activity tasks whose status is <code>OPEN</code>.</p>
    /// This field is required.
    pub fn open_activity_tasks(mut self, input: i32) -> Self {
        self.open_activity_tasks = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count of activity tasks whose status is <code>OPEN</code>.</p>
    pub fn set_open_activity_tasks(mut self, input: ::std::option::Option<i32>) -> Self {
        self.open_activity_tasks = input;
        self
    }
    /// <p>The count of activity tasks whose status is <code>OPEN</code>.</p>
    pub fn get_open_activity_tasks(&self) -> &::std::option::Option<i32> {
        &self.open_activity_tasks
    }
    /// <p>The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.</p>
    /// This field is required.
    pub fn open_decision_tasks(mut self, input: i32) -> Self {
        self.open_decision_tasks = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.</p>
    pub fn set_open_decision_tasks(mut self, input: ::std::option::Option<i32>) -> Self {
        self.open_decision_tasks = input;
        self
    }
    /// <p>The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.</p>
    pub fn get_open_decision_tasks(&self) -> &::std::option::Option<i32> {
        &self.open_decision_tasks
    }
    /// <p>The count of timers started by this workflow execution that have not fired yet.</p>
    /// This field is required.
    pub fn open_timers(mut self, input: i32) -> Self {
        self.open_timers = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count of timers started by this workflow execution that have not fired yet.</p>
    pub fn set_open_timers(mut self, input: ::std::option::Option<i32>) -> Self {
        self.open_timers = input;
        self
    }
    /// <p>The count of timers started by this workflow execution that have not fired yet.</p>
    pub fn get_open_timers(&self) -> &::std::option::Option<i32> {
        &self.open_timers
    }
    /// <p>The count of child workflow executions whose status is <code>OPEN</code>.</p>
    /// This field is required.
    pub fn open_child_workflow_executions(mut self, input: i32) -> Self {
        self.open_child_workflow_executions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count of child workflow executions whose status is <code>OPEN</code>.</p>
    pub fn set_open_child_workflow_executions(mut self, input: ::std::option::Option<i32>) -> Self {
        self.open_child_workflow_executions = input;
        self
    }
    /// <p>The count of child workflow executions whose status is <code>OPEN</code>.</p>
    pub fn get_open_child_workflow_executions(&self) -> &::std::option::Option<i32> {
        &self.open_child_workflow_executions
    }
    /// <p>The count of Lambda tasks whose status is <code>OPEN</code>.</p>
    pub fn open_lambda_functions(mut self, input: i32) -> Self {
        self.open_lambda_functions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count of Lambda tasks whose status is <code>OPEN</code>.</p>
    pub fn set_open_lambda_functions(mut self, input: ::std::option::Option<i32>) -> Self {
        self.open_lambda_functions = input;
        self
    }
    /// <p>The count of Lambda tasks whose status is <code>OPEN</code>.</p>
    pub fn get_open_lambda_functions(&self) -> &::std::option::Option<i32> {
        &self.open_lambda_functions
    }
    /// Consumes the builder and constructs a [`WorkflowExecutionOpenCounts`](crate::types::WorkflowExecutionOpenCounts).
    pub fn build(self) -> crate::types::WorkflowExecutionOpenCounts {
        crate::types::WorkflowExecutionOpenCounts {
            open_activity_tasks: self.open_activity_tasks.unwrap_or_default(),
            open_decision_tasks: self.open_decision_tasks.unwrap_or_default(),
            open_timers: self.open_timers.unwrap_or_default(),
            open_child_workflow_executions: self.open_child_workflow_executions.unwrap_or_default(),
            open_lambda_functions: self.open_lambda_functions.unwrap_or_default(),
        }
    }
}
