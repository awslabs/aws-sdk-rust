// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub struct NotifyObjectCompleteInput {
    /// Backup job Id for the in-progress backup
    pub backup_job_id: ::std::option::Option<::std::string::String>,
    /// Upload Id for the in-progress upload
    pub upload_id: ::std::option::Option<::std::string::String>,
    /// Object checksum
    pub object_checksum: ::std::option::Option<::std::string::String>,
    /// Checksum algorithm
    pub object_checksum_algorithm: ::std::option::Option<crate::types::SummaryChecksumAlgorithm>,
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub metadata_string: ::std::option::Option<::std::string::String>,
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub metadata_blob: ::aws_smithy_types::byte_stream::ByteStream,
    /// The size of MetadataBlob.
    pub metadata_blob_length: ::std::option::Option<i64>,
    /// Checksum of MetadataBlob.
    pub metadata_blob_checksum: ::std::option::Option<::std::string::String>,
    /// Checksum algorithm.
    pub metadata_blob_checksum_algorithm: ::std::option::Option<crate::types::DataChecksumAlgorithm>,
}
impl NotifyObjectCompleteInput {
    /// Backup job Id for the in-progress backup
    pub fn backup_job_id(&self) -> ::std::option::Option<&str> {
        self.backup_job_id.as_deref()
    }
    /// Upload Id for the in-progress upload
    pub fn upload_id(&self) -> ::std::option::Option<&str> {
        self.upload_id.as_deref()
    }
    /// Object checksum
    pub fn object_checksum(&self) -> ::std::option::Option<&str> {
        self.object_checksum.as_deref()
    }
    /// Checksum algorithm
    pub fn object_checksum_algorithm(&self) -> ::std::option::Option<&crate::types::SummaryChecksumAlgorithm> {
        self.object_checksum_algorithm.as_ref()
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn metadata_string(&self) -> ::std::option::Option<&str> {
        self.metadata_string.as_deref()
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn metadata_blob(&self) -> &::aws_smithy_types::byte_stream::ByteStream {
        &self.metadata_blob
    }
    /// The size of MetadataBlob.
    pub fn metadata_blob_length(&self) -> ::std::option::Option<i64> {
        self.metadata_blob_length
    }
    /// Checksum of MetadataBlob.
    pub fn metadata_blob_checksum(&self) -> ::std::option::Option<&str> {
        self.metadata_blob_checksum.as_deref()
    }
    /// Checksum algorithm.
    pub fn metadata_blob_checksum_algorithm(&self) -> ::std::option::Option<&crate::types::DataChecksumAlgorithm> {
        self.metadata_blob_checksum_algorithm.as_ref()
    }
}
impl NotifyObjectCompleteInput {
    /// Creates a new builder-style object to manufacture [`NotifyObjectCompleteInput`](crate::operation::notify_object_complete::NotifyObjectCompleteInput).
    pub fn builder() -> crate::operation::notify_object_complete::builders::NotifyObjectCompleteInputBuilder {
        crate::operation::notify_object_complete::builders::NotifyObjectCompleteInputBuilder::default()
    }
}

/// A builder for [`NotifyObjectCompleteInput`](crate::operation::notify_object_complete::NotifyObjectCompleteInput).
#[non_exhaustive]
#[derive(::std::default::Default, ::std::fmt::Debug)]
pub struct NotifyObjectCompleteInputBuilder {
    pub(crate) backup_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) upload_id: ::std::option::Option<::std::string::String>,
    pub(crate) object_checksum: ::std::option::Option<::std::string::String>,
    pub(crate) object_checksum_algorithm: ::std::option::Option<crate::types::SummaryChecksumAlgorithm>,
    pub(crate) metadata_string: ::std::option::Option<::std::string::String>,
    pub(crate) metadata_blob: ::std::option::Option<::aws_smithy_types::byte_stream::ByteStream>,
    pub(crate) metadata_blob_length: ::std::option::Option<i64>,
    pub(crate) metadata_blob_checksum: ::std::option::Option<::std::string::String>,
    pub(crate) metadata_blob_checksum_algorithm: ::std::option::Option<crate::types::DataChecksumAlgorithm>,
}
impl NotifyObjectCompleteInputBuilder {
    /// Backup job Id for the in-progress backup
    /// This field is required.
    pub fn backup_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Backup job Id for the in-progress backup
    pub fn set_backup_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_job_id = input;
        self
    }
    /// Backup job Id for the in-progress backup
    pub fn get_backup_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_job_id
    }
    /// Upload Id for the in-progress upload
    /// This field is required.
    pub fn upload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Upload Id for the in-progress upload
    pub fn set_upload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upload_id = input;
        self
    }
    /// Upload Id for the in-progress upload
    pub fn get_upload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.upload_id
    }
    /// Object checksum
    /// This field is required.
    pub fn object_checksum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_checksum = ::std::option::Option::Some(input.into());
        self
    }
    /// Object checksum
    pub fn set_object_checksum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_checksum = input;
        self
    }
    /// Object checksum
    pub fn get_object_checksum(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_checksum
    }
    /// Checksum algorithm
    /// This field is required.
    pub fn object_checksum_algorithm(mut self, input: crate::types::SummaryChecksumAlgorithm) -> Self {
        self.object_checksum_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// Checksum algorithm
    pub fn set_object_checksum_algorithm(mut self, input: ::std::option::Option<crate::types::SummaryChecksumAlgorithm>) -> Self {
        self.object_checksum_algorithm = input;
        self
    }
    /// Checksum algorithm
    pub fn get_object_checksum_algorithm(&self) -> &::std::option::Option<crate::types::SummaryChecksumAlgorithm> {
        &self.object_checksum_algorithm
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn metadata_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata_string = ::std::option::Option::Some(input.into());
        self
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn set_metadata_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata_string = input;
        self
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn get_metadata_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata_string
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn metadata_blob(mut self, input: ::aws_smithy_types::byte_stream::ByteStream) -> Self {
        self.metadata_blob = ::std::option::Option::Some(input);
        self
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn set_metadata_blob(mut self, input: ::std::option::Option<::aws_smithy_types::byte_stream::ByteStream>) -> Self {
        self.metadata_blob = input;
        self
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn get_metadata_blob(&self) -> &::std::option::Option<::aws_smithy_types::byte_stream::ByteStream> {
        &self.metadata_blob
    }
    /// The size of MetadataBlob.
    pub fn metadata_blob_length(mut self, input: i64) -> Self {
        self.metadata_blob_length = ::std::option::Option::Some(input);
        self
    }
    /// The size of MetadataBlob.
    pub fn set_metadata_blob_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.metadata_blob_length = input;
        self
    }
    /// The size of MetadataBlob.
    pub fn get_metadata_blob_length(&self) -> &::std::option::Option<i64> {
        &self.metadata_blob_length
    }
    /// Checksum of MetadataBlob.
    pub fn metadata_blob_checksum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata_blob_checksum = ::std::option::Option::Some(input.into());
        self
    }
    /// Checksum of MetadataBlob.
    pub fn set_metadata_blob_checksum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata_blob_checksum = input;
        self
    }
    /// Checksum of MetadataBlob.
    pub fn get_metadata_blob_checksum(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata_blob_checksum
    }
    /// Checksum algorithm.
    pub fn metadata_blob_checksum_algorithm(mut self, input: crate::types::DataChecksumAlgorithm) -> Self {
        self.metadata_blob_checksum_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// Checksum algorithm.
    pub fn set_metadata_blob_checksum_algorithm(mut self, input: ::std::option::Option<crate::types::DataChecksumAlgorithm>) -> Self {
        self.metadata_blob_checksum_algorithm = input;
        self
    }
    /// Checksum algorithm.
    pub fn get_metadata_blob_checksum_algorithm(&self) -> &::std::option::Option<crate::types::DataChecksumAlgorithm> {
        &self.metadata_blob_checksum_algorithm
    }
    /// Consumes the builder and constructs a [`NotifyObjectCompleteInput`](crate::operation::notify_object_complete::NotifyObjectCompleteInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::notify_object_complete::NotifyObjectCompleteInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::notify_object_complete::NotifyObjectCompleteInput {
            backup_job_id: self.backup_job_id,
            upload_id: self.upload_id,
            object_checksum: self.object_checksum,
            object_checksum_algorithm: self.object_checksum_algorithm,
            metadata_string: self.metadata_string,
            metadata_blob: self.metadata_blob.unwrap_or_default(),
            metadata_blob_length: self.metadata_blob_length,
            metadata_blob_checksum: self.metadata_blob_checksum,
            metadata_blob_checksum_algorithm: self.metadata_blob_checksum_algorithm,
        })
    }
}
