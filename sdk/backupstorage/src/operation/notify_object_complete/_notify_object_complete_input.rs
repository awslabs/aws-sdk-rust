// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct NotifyObjectCompleteInput {
    /// Backup job Id for the in-progress backup
    #[doc(hidden)]
    pub backup_job_id: std::option::Option<std::string::String>,
    /// Upload Id for the in-progress upload
    #[doc(hidden)]
    pub upload_id: std::option::Option<std::string::String>,
    /// Object checksum
    #[doc(hidden)]
    pub object_checksum: std::option::Option<std::string::String>,
    /// Checksum algorithm
    #[doc(hidden)]
    pub object_checksum_algorithm: std::option::Option<crate::types::SummaryChecksumAlgorithm>,
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    #[doc(hidden)]
    pub metadata_string: std::option::Option<std::string::String>,
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub metadata_blob: aws_smithy_http::byte_stream::ByteStream,
    /// The size of MetadataBlob.
    #[doc(hidden)]
    pub metadata_blob_length: i64,
    /// Checksum of MetadataBlob.
    #[doc(hidden)]
    pub metadata_blob_checksum: std::option::Option<std::string::String>,
    /// Checksum algorithm.
    #[doc(hidden)]
    pub metadata_blob_checksum_algorithm: std::option::Option<crate::types::DataChecksumAlgorithm>,
}
impl NotifyObjectCompleteInput {
    /// Backup job Id for the in-progress backup
    pub fn backup_job_id(&self) -> std::option::Option<&str> {
        self.backup_job_id.as_deref()
    }
    /// Upload Id for the in-progress upload
    pub fn upload_id(&self) -> std::option::Option<&str> {
        self.upload_id.as_deref()
    }
    /// Object checksum
    pub fn object_checksum(&self) -> std::option::Option<&str> {
        self.object_checksum.as_deref()
    }
    /// Checksum algorithm
    pub fn object_checksum_algorithm(
        &self,
    ) -> std::option::Option<&crate::types::SummaryChecksumAlgorithm> {
        self.object_checksum_algorithm.as_ref()
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn metadata_string(&self) -> std::option::Option<&str> {
        self.metadata_string.as_deref()
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn metadata_blob(&self) -> &aws_smithy_http::byte_stream::ByteStream {
        &self.metadata_blob
    }
    /// The size of MetadataBlob.
    pub fn metadata_blob_length(&self) -> i64 {
        self.metadata_blob_length
    }
    /// Checksum of MetadataBlob.
    pub fn metadata_blob_checksum(&self) -> std::option::Option<&str> {
        self.metadata_blob_checksum.as_deref()
    }
    /// Checksum algorithm.
    pub fn metadata_blob_checksum_algorithm(
        &self,
    ) -> std::option::Option<&crate::types::DataChecksumAlgorithm> {
        self.metadata_blob_checksum_algorithm.as_ref()
    }
}
impl NotifyObjectCompleteInput {
    /// Creates a new builder-style object to manufacture [`NotifyObjectCompleteInput`](crate::operation::notify_object_complete::NotifyObjectCompleteInput).
    pub fn builder(
    ) -> crate::operation::notify_object_complete::builders::NotifyObjectCompleteInputBuilder {
        crate::operation::notify_object_complete::builders::NotifyObjectCompleteInputBuilder::default()
    }
}

/// A builder for [`NotifyObjectCompleteInput`](crate::operation::notify_object_complete::NotifyObjectCompleteInput).
#[non_exhaustive]
#[derive(std::default::Default, std::fmt::Debug)]
pub struct NotifyObjectCompleteInputBuilder {
    pub(crate) backup_job_id: std::option::Option<std::string::String>,
    pub(crate) upload_id: std::option::Option<std::string::String>,
    pub(crate) object_checksum: std::option::Option<std::string::String>,
    pub(crate) object_checksum_algorithm:
        std::option::Option<crate::types::SummaryChecksumAlgorithm>,
    pub(crate) metadata_string: std::option::Option<std::string::String>,
    pub(crate) metadata_blob: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    pub(crate) metadata_blob_length: std::option::Option<i64>,
    pub(crate) metadata_blob_checksum: std::option::Option<std::string::String>,
    pub(crate) metadata_blob_checksum_algorithm:
        std::option::Option<crate::types::DataChecksumAlgorithm>,
}
impl NotifyObjectCompleteInputBuilder {
    /// Backup job Id for the in-progress backup
    pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_job_id = Some(input.into());
        self
    }
    /// Backup job Id for the in-progress backup
    pub fn set_backup_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.backup_job_id = input;
        self
    }
    /// Upload Id for the in-progress upload
    pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.upload_id = Some(input.into());
        self
    }
    /// Upload Id for the in-progress upload
    pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.upload_id = input;
        self
    }
    /// Object checksum
    pub fn object_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.object_checksum = Some(input.into());
        self
    }
    /// Object checksum
    pub fn set_object_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.object_checksum = input;
        self
    }
    /// Checksum algorithm
    pub fn object_checksum_algorithm(
        mut self,
        input: crate::types::SummaryChecksumAlgorithm,
    ) -> Self {
        self.object_checksum_algorithm = Some(input);
        self
    }
    /// Checksum algorithm
    pub fn set_object_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::types::SummaryChecksumAlgorithm>,
    ) -> Self {
        self.object_checksum_algorithm = input;
        self
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn metadata_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata_string = Some(input.into());
        self
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn set_metadata_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata_string = input;
        self
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn metadata_blob(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
        self.metadata_blob = Some(input);
        self
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn set_metadata_blob(
        mut self,
        input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    ) -> Self {
        self.metadata_blob = input;
        self
    }
    /// The size of MetadataBlob.
    pub fn metadata_blob_length(mut self, input: i64) -> Self {
        self.metadata_blob_length = Some(input);
        self
    }
    /// The size of MetadataBlob.
    pub fn set_metadata_blob_length(mut self, input: std::option::Option<i64>) -> Self {
        self.metadata_blob_length = input;
        self
    }
    /// Checksum of MetadataBlob.
    pub fn metadata_blob_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata_blob_checksum = Some(input.into());
        self
    }
    /// Checksum of MetadataBlob.
    pub fn set_metadata_blob_checksum(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.metadata_blob_checksum = input;
        self
    }
    /// Checksum algorithm.
    pub fn metadata_blob_checksum_algorithm(
        mut self,
        input: crate::types::DataChecksumAlgorithm,
    ) -> Self {
        self.metadata_blob_checksum_algorithm = Some(input);
        self
    }
    /// Checksum algorithm.
    pub fn set_metadata_blob_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::types::DataChecksumAlgorithm>,
    ) -> Self {
        self.metadata_blob_checksum_algorithm = input;
        self
    }
    /// Consumes the builder and constructs a [`NotifyObjectCompleteInput`](crate::operation::notify_object_complete::NotifyObjectCompleteInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::notify_object_complete::NotifyObjectCompleteInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::notify_object_complete::NotifyObjectCompleteInput {
                backup_job_id: self.backup_job_id,
                upload_id: self.upload_id,
                object_checksum: self.object_checksum,
                object_checksum_algorithm: self.object_checksum_algorithm,
                metadata_string: self.metadata_string,
                metadata_blob: self.metadata_blob.unwrap_or_default(),
                metadata_blob_length: self.metadata_blob_length.unwrap_or_default(),
                metadata_blob_checksum: self.metadata_blob_checksum,
                metadata_blob_checksum_algorithm: self.metadata_blob_checksum_algorithm,
            },
        )
    }
}
