// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::notify_object_complete::_notify_object_complete_output::NotifyObjectCompleteOutputBuilder;

pub use crate::operation::notify_object_complete::_notify_object_complete_input::NotifyObjectCompleteInputBuilder;

/// Fluent builder constructing a request to `NotifyObjectComplete`.
///
/// Complete upload
#[derive(std::fmt::Debug)]
pub struct NotifyObjectCompleteFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::notify_object_complete::builders::NotifyObjectCompleteInputBuilder,
}
impl NotifyObjectCompleteFluentBuilder {
    /// Creates a new `NotifyObjectComplete`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::notify_object_complete::NotifyObjectComplete,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::notify_object_complete::NotifyObjectCompleteError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::notify_object_complete::NotifyObjectCompleteOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::notify_object_complete::NotifyObjectCompleteError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Backup job Id for the in-progress backup
    pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_job_id(input.into());
        self
    }
    /// Backup job Id for the in-progress backup
    pub fn set_backup_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_job_id(input);
        self
    }
    /// Upload Id for the in-progress upload
    pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.upload_id(input.into());
        self
    }
    /// Upload Id for the in-progress upload
    pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_upload_id(input);
        self
    }
    /// Object checksum
    pub fn object_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_checksum(input.into());
        self
    }
    /// Object checksum
    pub fn set_object_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_checksum(input);
        self
    }
    /// Checksum algorithm
    pub fn object_checksum_algorithm(
        mut self,
        input: crate::types::SummaryChecksumAlgorithm,
    ) -> Self {
        self.inner = self.inner.object_checksum_algorithm(input);
        self
    }
    /// Checksum algorithm
    pub fn set_object_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::types::SummaryChecksumAlgorithm>,
    ) -> Self {
        self.inner = self.inner.set_object_checksum_algorithm(input);
        self
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn metadata_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metadata_string(input.into());
        self
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn set_metadata_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_metadata_string(input);
        self
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn metadata_blob(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
        self.inner = self.inner.metadata_blob(input);
        self
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn set_metadata_blob(
        mut self,
        input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    ) -> Self {
        self.inner = self.inner.set_metadata_blob(input);
        self
    }
    /// The size of MetadataBlob.
    pub fn metadata_blob_length(mut self, input: i64) -> Self {
        self.inner = self.inner.metadata_blob_length(input);
        self
    }
    /// The size of MetadataBlob.
    pub fn set_metadata_blob_length(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_metadata_blob_length(input);
        self
    }
    /// Checksum of MetadataBlob.
    pub fn metadata_blob_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metadata_blob_checksum(input.into());
        self
    }
    /// Checksum of MetadataBlob.
    pub fn set_metadata_blob_checksum(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_metadata_blob_checksum(input);
        self
    }
    /// Checksum algorithm.
    pub fn metadata_blob_checksum_algorithm(
        mut self,
        input: crate::types::DataChecksumAlgorithm,
    ) -> Self {
        self.inner = self.inner.metadata_blob_checksum_algorithm(input);
        self
    }
    /// Checksum algorithm.
    pub fn set_metadata_blob_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::types::DataChecksumAlgorithm>,
    ) -> Self {
        self.inner = self.inner.set_metadata_blob_checksum_algorithm(input);
        self
    }
}
