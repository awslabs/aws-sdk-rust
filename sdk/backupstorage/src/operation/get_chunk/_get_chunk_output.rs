// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetChunkOutput {
    /// Chunk data
    pub data: aws_smithy_http::byte_stream::ByteStream,
    /// Data length
    #[doc(hidden)]
    pub length: i64,
    /// Data checksum
    #[doc(hidden)]
    pub checksum: std::option::Option<std::string::String>,
    /// Checksum algorithm
    #[doc(hidden)]
    pub checksum_algorithm: std::option::Option<crate::types::DataChecksumAlgorithm>,
    _request_id: Option<String>,
}
impl GetChunkOutput {
    /// Chunk data
    pub fn data(&self) -> &aws_smithy_http::byte_stream::ByteStream {
        &self.data
    }
    /// Data length
    pub fn length(&self) -> i64 {
        self.length
    }
    /// Data checksum
    pub fn checksum(&self) -> std::option::Option<&str> {
        self.checksum.as_deref()
    }
    /// Checksum algorithm
    pub fn checksum_algorithm(&self) -> std::option::Option<&crate::types::DataChecksumAlgorithm> {
        self.checksum_algorithm.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetChunkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetChunkOutput {
    /// Creates a new builder-style object to manufacture [`GetChunkOutput`](crate::operation::get_chunk::GetChunkOutput).
    pub fn builder() -> crate::operation::get_chunk::builders::GetChunkOutputBuilder {
        crate::operation::get_chunk::builders::GetChunkOutputBuilder::default()
    }
}

/// A builder for [`GetChunkOutput`](crate::operation::get_chunk::GetChunkOutput).
#[non_exhaustive]
#[derive(std::default::Default, std::fmt::Debug)]
pub struct GetChunkOutputBuilder {
    pub(crate) data: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    pub(crate) length: std::option::Option<i64>,
    pub(crate) checksum: std::option::Option<std::string::String>,
    pub(crate) checksum_algorithm: std::option::Option<crate::types::DataChecksumAlgorithm>,
    _request_id: Option<String>,
}
impl GetChunkOutputBuilder {
    /// Chunk data
    pub fn data(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
        self.data = Some(input);
        self
    }
    /// Chunk data
    pub fn set_data(
        mut self,
        input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    ) -> Self {
        self.data = input;
        self
    }
    /// Data length
    pub fn length(mut self, input: i64) -> Self {
        self.length = Some(input);
        self
    }
    /// Data length
    pub fn set_length(mut self, input: std::option::Option<i64>) -> Self {
        self.length = input;
        self
    }
    /// Data checksum
    pub fn checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.checksum = Some(input.into());
        self
    }
    /// Data checksum
    pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.checksum = input;
        self
    }
    /// Checksum algorithm
    pub fn checksum_algorithm(mut self, input: crate::types::DataChecksumAlgorithm) -> Self {
        self.checksum_algorithm = Some(input);
        self
    }
    /// Checksum algorithm
    pub fn set_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::types::DataChecksumAlgorithm>,
    ) -> Self {
        self.checksum_algorithm = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetChunkOutput`](crate::operation::get_chunk::GetChunkOutput).
    pub fn build(self) -> crate::operation::get_chunk::GetChunkOutput {
        crate::operation::get_chunk::GetChunkOutput {
            data: self.data.unwrap_or_default(),
            length: self.length.unwrap_or_default(),
            checksum: self.checksum,
            checksum_algorithm: self.checksum_algorithm,
            _request_id: self._request_id,
        }
    }
}
