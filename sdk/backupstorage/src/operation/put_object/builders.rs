// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_object::_put_object_output::PutObjectOutputBuilder;

pub use crate::operation::put_object::_put_object_input::PutObjectInputBuilder;

/// Fluent builder constructing a request to `PutObject`.
///
/// Upload object that can store object metadata String and data blob in single API call using inline chunk field.
#[derive(std::fmt::Debug)]
pub struct PutObjectFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_object::builders::PutObjectInputBuilder,
}
impl PutObjectFluentBuilder {
    /// Creates a new `PutObject`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_object::PutObject,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::put_object::PutObjectError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_object::PutObjectOutput,
        aws_smithy_http::result::SdkError<crate::operation::put_object::PutObjectError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Backup job Id for the in-progress backup.
    pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_job_id(input.into());
        self
    }
    /// Backup job Id for the in-progress backup.
    pub fn set_backup_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_job_id(input);
        self
    }
    /// The name of the Object to be uploaded.
    pub fn object_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_name(input.into());
        self
    }
    /// The name of the Object to be uploaded.
    pub fn set_object_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_name(input);
        self
    }
    /// Store user defined metadata like backup checksum, disk ids, restore metadata etc.
    pub fn metadata_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metadata_string(input.into());
        self
    }
    /// Store user defined metadata like backup checksum, disk ids, restore metadata etc.
    pub fn set_metadata_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_metadata_string(input);
        self
    }
    /// Inline chunk data to be uploaded.
    pub fn inline_chunk(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
        self.inner = self.inner.inline_chunk(input);
        self
    }
    /// Inline chunk data to be uploaded.
    pub fn set_inline_chunk(
        mut self,
        input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    ) -> Self {
        self.inner = self.inner.set_inline_chunk(input);
        self
    }
    /// Length of the inline chunk data.
    pub fn inline_chunk_length(mut self, input: i64) -> Self {
        self.inner = self.inner.inline_chunk_length(input);
        self
    }
    /// Length of the inline chunk data.
    pub fn set_inline_chunk_length(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_inline_chunk_length(input);
        self
    }
    /// Inline chunk checksum
    pub fn inline_chunk_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.inline_chunk_checksum(input.into());
        self
    }
    /// Inline chunk checksum
    pub fn set_inline_chunk_checksum(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_inline_chunk_checksum(input);
        self
    }
    /// Inline chunk checksum algorithm
    pub fn inline_chunk_checksum_algorithm(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.inline_chunk_checksum_algorithm(input.into());
        self
    }
    /// Inline chunk checksum algorithm
    pub fn set_inline_chunk_checksum_algorithm(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_inline_chunk_checksum_algorithm(input);
        self
    }
    /// object checksum
    pub fn object_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_checksum(input.into());
        self
    }
    /// object checksum
    pub fn set_object_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_checksum(input);
        self
    }
    /// object checksum algorithm
    pub fn object_checksum_algorithm(
        mut self,
        input: crate::types::SummaryChecksumAlgorithm,
    ) -> Self {
        self.inner = self.inner.object_checksum_algorithm(input);
        self
    }
    /// object checksum algorithm
    pub fn set_object_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::types::SummaryChecksumAlgorithm>,
    ) -> Self {
        self.inner = self.inner.set_object_checksum_algorithm(input);
        self
    }
    /// Throw an exception if Object name is already exist.
    pub fn throw_on_duplicate(mut self, input: bool) -> Self {
        self.inner = self.inner.throw_on_duplicate(input);
        self
    }
    /// Throw an exception if Object name is already exist.
    pub fn set_throw_on_duplicate(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_throw_on_duplicate(input);
        self
    }
}
