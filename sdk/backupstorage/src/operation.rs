// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `DeleteObject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_object`](crate::client::fluent_builders::DeleteObject).
///
/// `ParseStrictResponse` impl for `DeleteObject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteObject {
    _private: (),
}
impl DeleteObject {
    /// Creates a new builder-style object to manufacture [`DeleteObjectInput`](crate::input::DeleteObjectInput).
    pub fn builder() -> crate::input::delete_object_input::Builder {
        crate::input::delete_object_input::Builder::default()
    }
    /// Creates a new `DeleteObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteObject {
    type Output =
        std::result::Result<crate::output::DeleteObjectOutput, crate::error::DeleteObjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_object::de_delete_object_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_object::de_delete_object_http_response(response)
        }
    }
}

/// Operation shape for `GetChunk`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_chunk`](crate::client::fluent_builders::GetChunk).
///
/// `ParseStrictResponse` impl for `GetChunk`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetChunk {
    _private: (),
}
impl GetChunk {
    /// Creates a new builder-style object to manufacture [`GetChunkInput`](crate::input::GetChunkInput).
    pub fn builder() -> crate::input::get_chunk_input::Builder {
        crate::input::get_chunk_input::Builder::default()
    }
    /// Creates a new `GetChunk` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseHttpResponse for GetChunk {
    type Output = std::result::Result<crate::output::GetChunkOutput, crate::error::GetChunkError>;
    fn parse_unloaded(
        &self,
        response: &mut aws_smithy_http::operation::Response,
    ) -> Option<Self::Output> {
        // This is an error, defer to the non-streaming parser
        if !response.http().status().is_success() && response.http().status().as_u16() != 200 {
            return None;
        }
        Some(crate::protocol_serde::shape_get_chunk::de_get_chunk_http_response(response))
    }
    fn parse_loaded(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        // if streaming, we only hit this case if its an error
        crate::protocol_serde::shape_get_chunk::de_get_chunk_http_error(response)
    }
}

/// Operation shape for `GetObjectMetadata`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_object_metadata`](crate::client::fluent_builders::GetObjectMetadata).
///
/// `ParseStrictResponse` impl for `GetObjectMetadata`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetObjectMetadata {
    _private: (),
}
impl GetObjectMetadata {
    /// Creates a new builder-style object to manufacture [`GetObjectMetadataInput`](crate::input::GetObjectMetadataInput).
    pub fn builder() -> crate::input::get_object_metadata_input::Builder {
        crate::input::get_object_metadata_input::Builder::default()
    }
    /// Creates a new `GetObjectMetadata` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseHttpResponse for GetObjectMetadata {
    type Output = std::result::Result<
        crate::output::GetObjectMetadataOutput,
        crate::error::GetObjectMetadataError,
    >;
    fn parse_unloaded(
        &self,
        response: &mut aws_smithy_http::operation::Response,
    ) -> Option<Self::Output> {
        // This is an error, defer to the non-streaming parser
        if !response.http().status().is_success() && response.http().status().as_u16() != 200 {
            return None;
        }
        Some(
            crate::protocol_serde::shape_get_object_metadata::de_get_object_metadata_http_response(
                response,
            ),
        )
    }
    fn parse_loaded(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        // if streaming, we only hit this case if its an error
        crate::protocol_serde::shape_get_object_metadata::de_get_object_metadata_http_error(
            response,
        )
    }
}

/// Operation shape for `ListChunks`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_chunks`](crate::client::fluent_builders::ListChunks).
///
/// `ParseStrictResponse` impl for `ListChunks`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChunks {
    _private: (),
}
impl ListChunks {
    /// Creates a new builder-style object to manufacture [`ListChunksInput`](crate::input::ListChunksInput).
    pub fn builder() -> crate::input::list_chunks_input::Builder {
        crate::input::list_chunks_input::Builder::default()
    }
    /// Creates a new `ListChunks` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChunks {
    type Output =
        std::result::Result<crate::output::ListChunksOutput, crate::error::ListChunksError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_chunks::de_list_chunks_http_error(response)
        } else {
            crate::protocol_serde::shape_list_chunks::de_list_chunks_http_response(response)
        }
    }
}

/// Operation shape for `ListObjects`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_objects`](crate::client::fluent_builders::ListObjects).
///
/// `ParseStrictResponse` impl for `ListObjects`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListObjects {
    _private: (),
}
impl ListObjects {
    /// Creates a new builder-style object to manufacture [`ListObjectsInput`](crate::input::ListObjectsInput).
    pub fn builder() -> crate::input::list_objects_input::Builder {
        crate::input::list_objects_input::Builder::default()
    }
    /// Creates a new `ListObjects` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListObjects {
    type Output =
        std::result::Result<crate::output::ListObjectsOutput, crate::error::ListObjectsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_objects::de_list_objects_http_error(response)
        } else {
            crate::protocol_serde::shape_list_objects::de_list_objects_http_response(response)
        }
    }
}

/// Operation shape for `NotifyObjectComplete`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`notify_object_complete`](crate::client::fluent_builders::NotifyObjectComplete).
///
/// `ParseStrictResponse` impl for `NotifyObjectComplete`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct NotifyObjectComplete {
    _private: (),
}
impl NotifyObjectComplete {
    /// Creates a new builder-style object to manufacture [`NotifyObjectCompleteInput`](crate::input::NotifyObjectCompleteInput).
    pub fn builder() -> crate::input::notify_object_complete_input::Builder {
        crate::input::notify_object_complete_input::Builder::default()
    }
    /// Creates a new `NotifyObjectComplete` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for NotifyObjectComplete {
    type Output = std::result::Result<
        crate::output::NotifyObjectCompleteOutput,
        crate::error::NotifyObjectCompleteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_notify_object_complete::de_notify_object_complete_http_error(response)
        } else {
            crate::protocol_serde::shape_notify_object_complete::de_notify_object_complete_http_response(response)
        }
    }
}

/// Operation shape for `PutChunk`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_chunk`](crate::client::fluent_builders::PutChunk).
///
/// `ParseStrictResponse` impl for `PutChunk`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutChunk {
    _private: (),
}
impl PutChunk {
    /// Creates a new builder-style object to manufacture [`PutChunkInput`](crate::input::PutChunkInput).
    pub fn builder() -> crate::input::put_chunk_input::Builder {
        crate::input::put_chunk_input::Builder::default()
    }
    /// Creates a new `PutChunk` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutChunk {
    type Output = std::result::Result<crate::output::PutChunkOutput, crate::error::PutChunkError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_chunk::de_put_chunk_http_error(response)
        } else {
            crate::protocol_serde::shape_put_chunk::de_put_chunk_http_response(response)
        }
    }
}

/// Operation shape for `PutObject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_object`](crate::client::fluent_builders::PutObject).
///
/// `ParseStrictResponse` impl for `PutObject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutObject {
    _private: (),
}
impl PutObject {
    /// Creates a new builder-style object to manufacture [`PutObjectInput`](crate::input::PutObjectInput).
    pub fn builder() -> crate::input::put_object_input::Builder {
        crate::input::put_object_input::Builder::default()
    }
    /// Creates a new `PutObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutObject {
    type Output = std::result::Result<crate::output::PutObjectOutput, crate::error::PutObjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_object::de_put_object_http_error(response)
        } else {
            crate::protocol_serde::shape_put_object::de_put_object_http_response(response)
        }
    }
}

/// Operation shape for `StartObject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_object`](crate::client::fluent_builders::StartObject).
///
/// `ParseStrictResponse` impl for `StartObject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartObject {
    _private: (),
}
impl StartObject {
    /// Creates a new builder-style object to manufacture [`StartObjectInput`](crate::input::StartObjectInput).
    pub fn builder() -> crate::input::start_object_input::Builder {
        crate::input::start_object_input::Builder::default()
    }
    /// Creates a new `StartObject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartObject {
    type Output =
        std::result::Result<crate::output::StartObjectOutput, crate::error::StartObjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_object::de_start_object_http_error(response)
        } else {
            crate::protocol_serde::shape_start_object::de_start_object_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
