// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `DeleteObject`.
///
/// Delete Object from the incremental base Backup.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteObject {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_object_input::Builder,
}
impl DeleteObject {
    /// Creates a new `DeleteObject`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteObject,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteObjectError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteObjectOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteObjectError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Backup job Id for the in-progress backup.
    pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_job_id(input.into());
        self
    }
    /// Backup job Id for the in-progress backup.
    pub fn set_backup_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_job_id(input);
        self
    }
    /// The name of the Object.
    pub fn object_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_name(input.into());
        self
    }
    /// The name of the Object.
    pub fn set_object_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_name(input);
        self
    }
}

/// Fluent builder constructing a request to `GetChunk`.
///
/// Gets the specified object's chunk.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetChunk {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_chunk_input::Builder,
}
impl GetChunk {
    /// Creates a new `GetChunk`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetChunk,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetChunkError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetChunkOutput,
        aws_smithy_http::result::SdkError<crate::error::GetChunkError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Storage job id
    pub fn storage_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.storage_job_id(input.into());
        self
    }
    /// Storage job id
    pub fn set_storage_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_storage_job_id(input);
        self
    }
    /// Chunk token
    pub fn chunk_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.chunk_token(input.into());
        self
    }
    /// Chunk token
    pub fn set_chunk_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_chunk_token(input);
        self
    }
}

/// Fluent builder constructing a request to `GetObjectMetadata`.
///
/// Get metadata associated with an Object.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetObjectMetadata {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_object_metadata_input::Builder,
}
impl GetObjectMetadata {
    /// Creates a new `GetObjectMetadata`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetObjectMetadata,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetObjectMetadataError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetObjectMetadataOutput,
        aws_smithy_http::result::SdkError<crate::error::GetObjectMetadataError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Backup job id for the in-progress backup.
    pub fn storage_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.storage_job_id(input.into());
        self
    }
    /// Backup job id for the in-progress backup.
    pub fn set_storage_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_storage_job_id(input);
        self
    }
    /// Object token.
    pub fn object_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_token(input.into());
        self
    }
    /// Object token.
    pub fn set_object_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListChunks`.
///
/// List chunks in a given Object
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListChunks {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_chunks_input::Builder,
}
impl ListChunks {
    /// Creates a new `ListChunks`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListChunks,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListChunksError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListChunksOutput,
        aws_smithy_http::result::SdkError<crate::error::ListChunksError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListChunksPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListChunksPaginator {
        crate::paginator::ListChunksPaginator::new(self.handle, self.inner)
    }
    /// Storage job id
    pub fn storage_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.storage_job_id(input.into());
        self
    }
    /// Storage job id
    pub fn set_storage_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_storage_job_id(input);
        self
    }
    /// Object token
    pub fn object_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_token(input.into());
        self
    }
    /// Object token
    pub fn set_object_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_token(input);
        self
    }
    /// Maximum number of chunks
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// Maximum number of chunks
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// Pagination token
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// Pagination token
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListObjects`.
///
/// List all Objects in a given Backup.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListObjects {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_objects_input::Builder,
}
impl ListObjects {
    /// Creates a new `ListObjects`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListObjects,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListObjectsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListObjectsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListObjectsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListObjectsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListObjectsPaginator {
        crate::paginator::ListObjectsPaginator::new(self.handle, self.inner)
    }
    /// Storage job id
    pub fn storage_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.storage_job_id(input.into());
        self
    }
    /// Storage job id
    pub fn set_storage_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_storage_job_id(input);
        self
    }
    /// Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL
    pub fn starting_object_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.starting_object_name(input.into());
        self
    }
    /// Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL
    pub fn set_starting_object_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_starting_object_name(input);
        self
    }
    /// Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL
    pub fn starting_object_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.starting_object_prefix(input.into());
        self
    }
    /// Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL
    pub fn set_starting_object_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_starting_object_prefix(input);
        self
    }
    /// Maximum objects count
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// Maximum objects count
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// Pagination token
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// Pagination token
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// (Optional) Created before filter
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// (Optional) Created before filter
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// (Optional) Created after filter
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// (Optional) Created after filter
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
}

/// Fluent builder constructing a request to `NotifyObjectComplete`.
///
/// Complete upload
#[derive(std::fmt::Debug)]
pub struct NotifyObjectComplete {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::notify_object_complete_input::Builder,
}
impl NotifyObjectComplete {
    /// Creates a new `NotifyObjectComplete`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::NotifyObjectComplete,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::NotifyObjectCompleteError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::NotifyObjectCompleteOutput,
        aws_smithy_http::result::SdkError<crate::error::NotifyObjectCompleteError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Backup job Id for the in-progress backup
    pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_job_id(input.into());
        self
    }
    /// Backup job Id for the in-progress backup
    pub fn set_backup_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_job_id(input);
        self
    }
    /// Upload Id for the in-progress upload
    pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.upload_id(input.into());
        self
    }
    /// Upload Id for the in-progress upload
    pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_upload_id(input);
        self
    }
    /// Object checksum
    pub fn object_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_checksum(input.into());
        self
    }
    /// Object checksum
    pub fn set_object_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_checksum(input);
        self
    }
    /// Checksum algorithm
    pub fn object_checksum_algorithm(
        mut self,
        input: crate::model::SummaryChecksumAlgorithm,
    ) -> Self {
        self.inner = self.inner.object_checksum_algorithm(input);
        self
    }
    /// Checksum algorithm
    pub fn set_object_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::model::SummaryChecksumAlgorithm>,
    ) -> Self {
        self.inner = self.inner.set_object_checksum_algorithm(input);
        self
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn metadata_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metadata_string(input.into());
        self
    }
    /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
    pub fn set_metadata_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_metadata_string(input);
        self
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn metadata_blob(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
        self.inner = self.inner.metadata_blob(input);
        self
    }
    /// Optional metadata associated with an Object. Maximum length is 4MB.
    pub fn set_metadata_blob(
        mut self,
        input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    ) -> Self {
        self.inner = self.inner.set_metadata_blob(input);
        self
    }
    /// The size of MetadataBlob.
    pub fn metadata_blob_length(mut self, input: i64) -> Self {
        self.inner = self.inner.metadata_blob_length(input);
        self
    }
    /// The size of MetadataBlob.
    pub fn set_metadata_blob_length(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_metadata_blob_length(input);
        self
    }
    /// Checksum of MetadataBlob.
    pub fn metadata_blob_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metadata_blob_checksum(input.into());
        self
    }
    /// Checksum of MetadataBlob.
    pub fn set_metadata_blob_checksum(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_metadata_blob_checksum(input);
        self
    }
    /// Checksum algorithm.
    pub fn metadata_blob_checksum_algorithm(
        mut self,
        input: crate::model::DataChecksumAlgorithm,
    ) -> Self {
        self.inner = self.inner.metadata_blob_checksum_algorithm(input);
        self
    }
    /// Checksum algorithm.
    pub fn set_metadata_blob_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::model::DataChecksumAlgorithm>,
    ) -> Self {
        self.inner = self.inner.set_metadata_blob_checksum_algorithm(input);
        self
    }
}

/// Fluent builder constructing a request to `PutChunk`.
///
/// Upload chunk.
#[derive(std::fmt::Debug)]
pub struct PutChunk {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_chunk_input::Builder,
}
impl PutChunk {
    /// Creates a new `PutChunk`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutChunk,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutChunkError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutChunkOutput,
        aws_smithy_http::result::SdkError<crate::error::PutChunkError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Backup job Id for the in-progress backup.
    pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_job_id(input.into());
        self
    }
    /// Backup job Id for the in-progress backup.
    pub fn set_backup_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_job_id(input);
        self
    }
    /// Upload Id for the in-progress upload.
    pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.upload_id(input.into());
        self
    }
    /// Upload Id for the in-progress upload.
    pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_upload_id(input);
        self
    }
    /// Describes this chunk's position relative to the other chunks
    pub fn chunk_index(mut self, input: i64) -> Self {
        self.inner = self.inner.chunk_index(input);
        self
    }
    /// Describes this chunk's position relative to the other chunks
    pub fn set_chunk_index(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_chunk_index(input);
        self
    }
    /// Data to be uploaded
    pub fn data(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
        self.inner = self.inner.data(input);
        self
    }
    /// Data to be uploaded
    pub fn set_data(
        mut self,
        input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    ) -> Self {
        self.inner = self.inner.set_data(input);
        self
    }
    /// Data length
    pub fn length(mut self, input: i64) -> Self {
        self.inner = self.inner.length(input);
        self
    }
    /// Data length
    pub fn set_length(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_length(input);
        self
    }
    /// Data checksum
    pub fn checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.checksum(input.into());
        self
    }
    /// Data checksum
    pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_checksum(input);
        self
    }
    /// Checksum algorithm
    pub fn checksum_algorithm(mut self, input: crate::model::DataChecksumAlgorithm) -> Self {
        self.inner = self.inner.checksum_algorithm(input);
        self
    }
    /// Checksum algorithm
    pub fn set_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::model::DataChecksumAlgorithm>,
    ) -> Self {
        self.inner = self.inner.set_checksum_algorithm(input);
        self
    }
}

/// Fluent builder constructing a request to `PutObject`.
///
/// Upload object that can store object metadata String and data blob in single API call using inline chunk field.
#[derive(std::fmt::Debug)]
pub struct PutObject {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_object_input::Builder,
}
impl PutObject {
    /// Creates a new `PutObject`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutObject,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutObjectError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutObjectOutput,
        aws_smithy_http::result::SdkError<crate::error::PutObjectError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Backup job Id for the in-progress backup.
    pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_job_id(input.into());
        self
    }
    /// Backup job Id for the in-progress backup.
    pub fn set_backup_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_job_id(input);
        self
    }
    /// The name of the Object to be uploaded.
    pub fn object_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_name(input.into());
        self
    }
    /// The name of the Object to be uploaded.
    pub fn set_object_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_name(input);
        self
    }
    /// Store user defined metadata like backup checksum, disk ids, restore metadata etc.
    pub fn metadata_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.metadata_string(input.into());
        self
    }
    /// Store user defined metadata like backup checksum, disk ids, restore metadata etc.
    pub fn set_metadata_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_metadata_string(input);
        self
    }
    /// Inline chunk data to be uploaded.
    pub fn inline_chunk(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
        self.inner = self.inner.inline_chunk(input);
        self
    }
    /// Inline chunk data to be uploaded.
    pub fn set_inline_chunk(
        mut self,
        input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    ) -> Self {
        self.inner = self.inner.set_inline_chunk(input);
        self
    }
    /// Length of the inline chunk data.
    pub fn inline_chunk_length(mut self, input: i64) -> Self {
        self.inner = self.inner.inline_chunk_length(input);
        self
    }
    /// Length of the inline chunk data.
    pub fn set_inline_chunk_length(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_inline_chunk_length(input);
        self
    }
    /// Inline chunk checksum
    pub fn inline_chunk_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.inline_chunk_checksum(input.into());
        self
    }
    /// Inline chunk checksum
    pub fn set_inline_chunk_checksum(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_inline_chunk_checksum(input);
        self
    }
    /// Inline chunk checksum algorithm
    pub fn inline_chunk_checksum_algorithm(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.inline_chunk_checksum_algorithm(input.into());
        self
    }
    /// Inline chunk checksum algorithm
    pub fn set_inline_chunk_checksum_algorithm(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_inline_chunk_checksum_algorithm(input);
        self
    }
    /// object checksum
    pub fn object_checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_checksum(input.into());
        self
    }
    /// object checksum
    pub fn set_object_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_checksum(input);
        self
    }
    /// object checksum algorithm
    pub fn object_checksum_algorithm(
        mut self,
        input: crate::model::SummaryChecksumAlgorithm,
    ) -> Self {
        self.inner = self.inner.object_checksum_algorithm(input);
        self
    }
    /// object checksum algorithm
    pub fn set_object_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::model::SummaryChecksumAlgorithm>,
    ) -> Self {
        self.inner = self.inner.set_object_checksum_algorithm(input);
        self
    }
    /// Throw an exception if Object name is already exist.
    pub fn throw_on_duplicate(mut self, input: bool) -> Self {
        self.inner = self.inner.throw_on_duplicate(input);
        self
    }
    /// Throw an exception if Object name is already exist.
    pub fn set_throw_on_duplicate(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_throw_on_duplicate(input);
        self
    }
}

/// Fluent builder constructing a request to `StartObject`.
///
/// Start upload containing one or many chunks.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartObject {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_object_input::Builder,
}
impl StartObject {
    /// Creates a new `StartObject`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartObject,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartObjectError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartObjectOutput,
        aws_smithy_http::result::SdkError<crate::error::StartObjectError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Backup job Id for the in-progress backup
    pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_job_id(input.into());
        self
    }
    /// Backup job Id for the in-progress backup
    pub fn set_backup_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_job_id(input);
        self
    }
    /// Name for the object.
    pub fn object_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.object_name(input.into());
        self
    }
    /// Name for the object.
    pub fn set_object_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_object_name(input);
        self
    }
    /// Throw an exception if Object name is already exist.
    pub fn throw_on_duplicate(mut self, input: bool) -> Self {
        self.inner = self.inner.throw_on_duplicate(input);
        self
    }
    /// Throw an exception if Object name is already exist.
    pub fn set_throw_on_duplicate(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_throw_on_duplicate(input);
        self
    }
}
