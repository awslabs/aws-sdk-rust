// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Chunk
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Chunk {
    /// Chunk index
    pub index: i64,
    /// Chunk length
    pub length: i64,
    /// Chunk checksum
    pub checksum: ::std::string::String,
    /// Checksum algorithm
    pub checksum_algorithm: crate::types::DataChecksumAlgorithm,
    /// Chunk token
    pub chunk_token: ::std::string::String,
}
impl Chunk {
    /// Chunk index
    pub fn index(&self) -> i64 {
        self.index
    }
    /// Chunk length
    pub fn length(&self) -> i64 {
        self.length
    }
    /// Chunk checksum
    pub fn checksum(&self) -> &str {
        use std::ops::Deref;
        self.checksum.deref()
    }
    /// Checksum algorithm
    pub fn checksum_algorithm(&self) -> &crate::types::DataChecksumAlgorithm {
        &self.checksum_algorithm
    }
    /// Chunk token
    pub fn chunk_token(&self) -> &str {
        use std::ops::Deref;
        self.chunk_token.deref()
    }
}
impl Chunk {
    /// Creates a new builder-style object to manufacture [`Chunk`](crate::types::Chunk).
    pub fn builder() -> crate::types::builders::ChunkBuilder {
        crate::types::builders::ChunkBuilder::default()
    }
}

/// A builder for [`Chunk`](crate::types::Chunk).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChunkBuilder {
    pub(crate) index: ::std::option::Option<i64>,
    pub(crate) length: ::std::option::Option<i64>,
    pub(crate) checksum: ::std::option::Option<::std::string::String>,
    pub(crate) checksum_algorithm: ::std::option::Option<crate::types::DataChecksumAlgorithm>,
    pub(crate) chunk_token: ::std::option::Option<::std::string::String>,
}
impl ChunkBuilder {
    /// Chunk index
    /// This field is required.
    pub fn index(mut self, input: i64) -> Self {
        self.index = ::std::option::Option::Some(input);
        self
    }
    /// Chunk index
    pub fn set_index(mut self, input: ::std::option::Option<i64>) -> Self {
        self.index = input;
        self
    }
    /// Chunk index
    pub fn get_index(&self) -> &::std::option::Option<i64> {
        &self.index
    }
    /// Chunk length
    /// This field is required.
    pub fn length(mut self, input: i64) -> Self {
        self.length = ::std::option::Option::Some(input);
        self
    }
    /// Chunk length
    pub fn set_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.length = input;
        self
    }
    /// Chunk length
    pub fn get_length(&self) -> &::std::option::Option<i64> {
        &self.length
    }
    /// Chunk checksum
    /// This field is required.
    pub fn checksum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.checksum = ::std::option::Option::Some(input.into());
        self
    }
    /// Chunk checksum
    pub fn set_checksum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.checksum = input;
        self
    }
    /// Chunk checksum
    pub fn get_checksum(&self) -> &::std::option::Option<::std::string::String> {
        &self.checksum
    }
    /// Checksum algorithm
    /// This field is required.
    pub fn checksum_algorithm(mut self, input: crate::types::DataChecksumAlgorithm) -> Self {
        self.checksum_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// Checksum algorithm
    pub fn set_checksum_algorithm(mut self, input: ::std::option::Option<crate::types::DataChecksumAlgorithm>) -> Self {
        self.checksum_algorithm = input;
        self
    }
    /// Checksum algorithm
    pub fn get_checksum_algorithm(&self) -> &::std::option::Option<crate::types::DataChecksumAlgorithm> {
        &self.checksum_algorithm
    }
    /// Chunk token
    /// This field is required.
    pub fn chunk_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chunk_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Chunk token
    pub fn set_chunk_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chunk_token = input;
        self
    }
    /// Chunk token
    pub fn get_chunk_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.chunk_token
    }
    /// Consumes the builder and constructs a [`Chunk`](crate::types::Chunk).
    /// This method will fail if any of the following fields are not set:
    /// - [`checksum`](crate::types::builders::ChunkBuilder::checksum)
    /// - [`checksum_algorithm`](crate::types::builders::ChunkBuilder::checksum_algorithm)
    /// - [`chunk_token`](crate::types::builders::ChunkBuilder::chunk_token)
    pub fn build(self) -> ::std::result::Result<crate::types::Chunk, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Chunk {
            index: self.index.unwrap_or_default(),
            length: self.length.unwrap_or_default(),
            checksum: self.checksum.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "checksum",
                    "checksum was not specified but it is required when building Chunk",
                )
            })?,
            checksum_algorithm: self.checksum_algorithm.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "checksum_algorithm",
                    "checksum_algorithm was not specified but it is required when building Chunk",
                )
            })?,
            chunk_token: self.chunk_token.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "chunk_token",
                    "chunk_token was not specified but it is required when building Chunk",
                )
            })?,
        })
    }
}
