// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Chunk
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Chunk {
    /// Chunk index
    #[doc(hidden)]
    pub index: i64,
    /// Chunk length
    #[doc(hidden)]
    pub length: i64,
    /// Chunk checksum
    #[doc(hidden)]
    pub checksum: std::option::Option<std::string::String>,
    /// Checksum algorithm
    #[doc(hidden)]
    pub checksum_algorithm: std::option::Option<crate::types::DataChecksumAlgorithm>,
    /// Chunk token
    #[doc(hidden)]
    pub chunk_token: std::option::Option<std::string::String>,
}
impl Chunk {
    /// Chunk index
    pub fn index(&self) -> i64 {
        self.index
    }
    /// Chunk length
    pub fn length(&self) -> i64 {
        self.length
    }
    /// Chunk checksum
    pub fn checksum(&self) -> std::option::Option<&str> {
        self.checksum.as_deref()
    }
    /// Checksum algorithm
    pub fn checksum_algorithm(&self) -> std::option::Option<&crate::types::DataChecksumAlgorithm> {
        self.checksum_algorithm.as_ref()
    }
    /// Chunk token
    pub fn chunk_token(&self) -> std::option::Option<&str> {
        self.chunk_token.as_deref()
    }
}
impl Chunk {
    /// Creates a new builder-style object to manufacture [`Chunk`](crate::types::Chunk).
    pub fn builder() -> crate::types::builders::ChunkBuilder {
        crate::types::builders::ChunkBuilder::default()
    }
}

/// A builder for [`Chunk`](crate::types::Chunk).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChunkBuilder {
    pub(crate) index: std::option::Option<i64>,
    pub(crate) length: std::option::Option<i64>,
    pub(crate) checksum: std::option::Option<std::string::String>,
    pub(crate) checksum_algorithm: std::option::Option<crate::types::DataChecksumAlgorithm>,
    pub(crate) chunk_token: std::option::Option<std::string::String>,
}
impl ChunkBuilder {
    /// Chunk index
    pub fn index(mut self, input: i64) -> Self {
        self.index = Some(input);
        self
    }
    /// Chunk index
    pub fn set_index(mut self, input: std::option::Option<i64>) -> Self {
        self.index = input;
        self
    }
    /// Chunk length
    pub fn length(mut self, input: i64) -> Self {
        self.length = Some(input);
        self
    }
    /// Chunk length
    pub fn set_length(mut self, input: std::option::Option<i64>) -> Self {
        self.length = input;
        self
    }
    /// Chunk checksum
    pub fn checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.checksum = Some(input.into());
        self
    }
    /// Chunk checksum
    pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.checksum = input;
        self
    }
    /// Checksum algorithm
    pub fn checksum_algorithm(mut self, input: crate::types::DataChecksumAlgorithm) -> Self {
        self.checksum_algorithm = Some(input);
        self
    }
    /// Checksum algorithm
    pub fn set_checksum_algorithm(
        mut self,
        input: std::option::Option<crate::types::DataChecksumAlgorithm>,
    ) -> Self {
        self.checksum_algorithm = input;
        self
    }
    /// Chunk token
    pub fn chunk_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.chunk_token = Some(input.into());
        self
    }
    /// Chunk token
    pub fn set_chunk_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.chunk_token = input;
        self
    }
    /// Consumes the builder and constructs a [`Chunk`](crate::types::Chunk).
    pub fn build(self) -> crate::types::Chunk {
        crate::types::Chunk {
            index: self.index.unwrap_or_default(),
            length: self.length.unwrap_or_default(),
            checksum: self.checksum,
            checksum_algorithm: self.checksum_algorithm,
            chunk_token: self.chunk_token,
        }
    }
}
