// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Backup Storage
///
/// Client for invoking operations on AWS Backup Storage. Each operation on AWS Backup Storage is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_backupstorage::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_backupstorage::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_backupstorage::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`DeleteObject`](crate::client::fluent_builders::DeleteObject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_job_id(impl Into<String>)`](crate::client::fluent_builders::DeleteObject::backup_job_id) / [`set_backup_job_id(Option<String>)`](crate::client::fluent_builders::DeleteObject::set_backup_job_id): Backup job Id for the in-progress backup.
    ///   - [`object_name(impl Into<String>)`](crate::client::fluent_builders::DeleteObject::object_name) / [`set_object_name(Option<String>)`](crate::client::fluent_builders::DeleteObject::set_object_name): The name of the Object.
    /// - On success, responds with [`DeleteObjectOutput`](crate::output::DeleteObjectOutput)

    /// - On failure, responds with [`SdkError<DeleteObjectError>`](crate::error::DeleteObjectError)
    pub fn delete_object(&self) -> fluent_builders::DeleteObject {
        fluent_builders::DeleteObject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetChunk`](crate::client::fluent_builders::GetChunk) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`storage_job_id(impl Into<String>)`](crate::client::fluent_builders::GetChunk::storage_job_id) / [`set_storage_job_id(Option<String>)`](crate::client::fluent_builders::GetChunk::set_storage_job_id): Storage job id
    ///   - [`chunk_token(impl Into<String>)`](crate::client::fluent_builders::GetChunk::chunk_token) / [`set_chunk_token(Option<String>)`](crate::client::fluent_builders::GetChunk::set_chunk_token): Chunk token
    /// - On success, responds with [`GetChunkOutput`](crate::output::GetChunkOutput) with field(s):
    ///   - [`data(ByteStream)`](crate::output::GetChunkOutput::data): Chunk data
    ///   - [`length(i64)`](crate::output::GetChunkOutput::length): Data length
    ///   - [`checksum(Option<String>)`](crate::output::GetChunkOutput::checksum): Data checksum
    ///   - [`checksum_algorithm(Option<DataChecksumAlgorithm>)`](crate::output::GetChunkOutput::checksum_algorithm): Checksum algorithm
    /// - On failure, responds with [`SdkError<GetChunkError>`](crate::error::GetChunkError)
    pub fn get_chunk(&self) -> fluent_builders::GetChunk {
        fluent_builders::GetChunk::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetObjectMetadata`](crate::client::fluent_builders::GetObjectMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`storage_job_id(impl Into<String>)`](crate::client::fluent_builders::GetObjectMetadata::storage_job_id) / [`set_storage_job_id(Option<String>)`](crate::client::fluent_builders::GetObjectMetadata::set_storage_job_id): Backup job id for the in-progress backup.
    ///   - [`object_token(impl Into<String>)`](crate::client::fluent_builders::GetObjectMetadata::object_token) / [`set_object_token(Option<String>)`](crate::client::fluent_builders::GetObjectMetadata::set_object_token): Object token.
    /// - On success, responds with [`GetObjectMetadataOutput`](crate::output::GetObjectMetadataOutput) with field(s):
    ///   - [`metadata_string(Option<String>)`](crate::output::GetObjectMetadataOutput::metadata_string): Metadata string.
    ///   - [`metadata_blob(ByteStream)`](crate::output::GetObjectMetadataOutput::metadata_blob): Metadata blob.
    ///   - [`metadata_blob_length(i64)`](crate::output::GetObjectMetadataOutput::metadata_blob_length): The size of MetadataBlob.
    ///   - [`metadata_blob_checksum(Option<String>)`](crate::output::GetObjectMetadataOutput::metadata_blob_checksum): MetadataBlob checksum.
    ///   - [`metadata_blob_checksum_algorithm(Option<DataChecksumAlgorithm>)`](crate::output::GetObjectMetadataOutput::metadata_blob_checksum_algorithm): Checksum algorithm.
    /// - On failure, responds with [`SdkError<GetObjectMetadataError>`](crate::error::GetObjectMetadataError)
    pub fn get_object_metadata(&self) -> fluent_builders::GetObjectMetadata {
        fluent_builders::GetObjectMetadata::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListChunks`](crate::client::fluent_builders::ListChunks) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListChunks::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`storage_job_id(impl Into<String>)`](crate::client::fluent_builders::ListChunks::storage_job_id) / [`set_storage_job_id(Option<String>)`](crate::client::fluent_builders::ListChunks::set_storage_job_id): Storage job id
    ///   - [`object_token(impl Into<String>)`](crate::client::fluent_builders::ListChunks::object_token) / [`set_object_token(Option<String>)`](crate::client::fluent_builders::ListChunks::set_object_token): Object token
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListChunks::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListChunks::set_max_results): Maximum number of chunks
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListChunks::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListChunks::set_next_token): Pagination token
    /// - On success, responds with [`ListChunksOutput`](crate::output::ListChunksOutput) with field(s):
    ///   - [`chunk_list(Option<Vec<Chunk>>)`](crate::output::ListChunksOutput::chunk_list): List of chunks
    ///   - [`next_token(Option<String>)`](crate::output::ListChunksOutput::next_token): Pagination token
    /// - On failure, responds with [`SdkError<ListChunksError>`](crate::error::ListChunksError)
    pub fn list_chunks(&self) -> fluent_builders::ListChunks {
        fluent_builders::ListChunks::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListObjects`](crate::client::fluent_builders::ListObjects) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListObjects::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`storage_job_id(impl Into<String>)`](crate::client::fluent_builders::ListObjects::storage_job_id) / [`set_storage_job_id(Option<String>)`](crate::client::fluent_builders::ListObjects::set_storage_job_id): Storage job id
    ///   - [`starting_object_name(impl Into<String>)`](crate::client::fluent_builders::ListObjects::starting_object_name) / [`set_starting_object_name(Option<String>)`](crate::client::fluent_builders::ListObjects::set_starting_object_name): Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL
    ///   - [`starting_object_prefix(impl Into<String>)`](crate::client::fluent_builders::ListObjects::starting_object_prefix) / [`set_starting_object_prefix(Option<String>)`](crate::client::fluent_builders::ListObjects::set_starting_object_prefix): Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListObjects::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListObjects::set_max_results): Maximum objects count
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListObjects::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListObjects::set_next_token): Pagination token
    ///   - [`created_before(DateTime)`](crate::client::fluent_builders::ListObjects::created_before) / [`set_created_before(Option<DateTime>)`](crate::client::fluent_builders::ListObjects::set_created_before): (Optional) Created before filter
    ///   - [`created_after(DateTime)`](crate::client::fluent_builders::ListObjects::created_after) / [`set_created_after(Option<DateTime>)`](crate::client::fluent_builders::ListObjects::set_created_after): (Optional) Created after filter
    /// - On success, responds with [`ListObjectsOutput`](crate::output::ListObjectsOutput) with field(s):
    ///   - [`object_list(Option<Vec<BackupObject>>)`](crate::output::ListObjectsOutput::object_list): Object list
    ///   - [`next_token(Option<String>)`](crate::output::ListObjectsOutput::next_token): Pagination token
    /// - On failure, responds with [`SdkError<ListObjectsError>`](crate::error::ListObjectsError)
    pub fn list_objects(&self) -> fluent_builders::ListObjects {
        fluent_builders::ListObjects::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`NotifyObjectComplete`](crate::client::fluent_builders::NotifyObjectComplete) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_job_id(impl Into<String>)`](crate::client::fluent_builders::NotifyObjectComplete::backup_job_id) / [`set_backup_job_id(Option<String>)`](crate::client::fluent_builders::NotifyObjectComplete::set_backup_job_id): Backup job Id for the in-progress backup
    ///   - [`upload_id(impl Into<String>)`](crate::client::fluent_builders::NotifyObjectComplete::upload_id) / [`set_upload_id(Option<String>)`](crate::client::fluent_builders::NotifyObjectComplete::set_upload_id): Upload Id for the in-progress upload
    ///   - [`object_checksum(impl Into<String>)`](crate::client::fluent_builders::NotifyObjectComplete::object_checksum) / [`set_object_checksum(Option<String>)`](crate::client::fluent_builders::NotifyObjectComplete::set_object_checksum): Object checksum
    ///   - [`object_checksum_algorithm(SummaryChecksumAlgorithm)`](crate::client::fluent_builders::NotifyObjectComplete::object_checksum_algorithm) / [`set_object_checksum_algorithm(Option<SummaryChecksumAlgorithm>)`](crate::client::fluent_builders::NotifyObjectComplete::set_object_checksum_algorithm): Checksum algorithm
    ///   - [`metadata_string(impl Into<String>)`](crate::client::fluent_builders::NotifyObjectComplete::metadata_string) / [`set_metadata_string(Option<String>)`](crate::client::fluent_builders::NotifyObjectComplete::set_metadata_string): Optional metadata associated with an Object. Maximum string length is 256 bytes.
    ///   - [`metadata_blob(ByteStream)`](crate::client::fluent_builders::NotifyObjectComplete::metadata_blob) / [`set_metadata_blob(ByteStream)`](crate::client::fluent_builders::NotifyObjectComplete::set_metadata_blob): Optional metadata associated with an Object. Maximum length is 4MB.
    ///   - [`metadata_blob_length(i64)`](crate::client::fluent_builders::NotifyObjectComplete::metadata_blob_length) / [`set_metadata_blob_length(i64)`](crate::client::fluent_builders::NotifyObjectComplete::set_metadata_blob_length): The size of MetadataBlob.
    ///   - [`metadata_blob_checksum(impl Into<String>)`](crate::client::fluent_builders::NotifyObjectComplete::metadata_blob_checksum) / [`set_metadata_blob_checksum(Option<String>)`](crate::client::fluent_builders::NotifyObjectComplete::set_metadata_blob_checksum): Checksum of MetadataBlob.
    ///   - [`metadata_blob_checksum_algorithm(DataChecksumAlgorithm)`](crate::client::fluent_builders::NotifyObjectComplete::metadata_blob_checksum_algorithm) / [`set_metadata_blob_checksum_algorithm(Option<DataChecksumAlgorithm>)`](crate::client::fluent_builders::NotifyObjectComplete::set_metadata_blob_checksum_algorithm): Checksum algorithm.
    /// - On success, responds with [`NotifyObjectCompleteOutput`](crate::output::NotifyObjectCompleteOutput) with field(s):
    ///   - [`object_checksum(Option<String>)`](crate::output::NotifyObjectCompleteOutput::object_checksum): Object checksum
    ///   - [`object_checksum_algorithm(Option<SummaryChecksumAlgorithm>)`](crate::output::NotifyObjectCompleteOutput::object_checksum_algorithm): Checksum algorithm
    /// - On failure, responds with [`SdkError<NotifyObjectCompleteError>`](crate::error::NotifyObjectCompleteError)
    pub fn notify_object_complete(&self) -> fluent_builders::NotifyObjectComplete {
        fluent_builders::NotifyObjectComplete::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutChunk`](crate::client::fluent_builders::PutChunk) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_job_id(impl Into<String>)`](crate::client::fluent_builders::PutChunk::backup_job_id) / [`set_backup_job_id(Option<String>)`](crate::client::fluent_builders::PutChunk::set_backup_job_id): Backup job Id for the in-progress backup.
    ///   - [`upload_id(impl Into<String>)`](crate::client::fluent_builders::PutChunk::upload_id) / [`set_upload_id(Option<String>)`](crate::client::fluent_builders::PutChunk::set_upload_id): Upload Id for the in-progress upload.
    ///   - [`chunk_index(i64)`](crate::client::fluent_builders::PutChunk::chunk_index) / [`set_chunk_index(i64)`](crate::client::fluent_builders::PutChunk::set_chunk_index): Describes this chunk's position relative to the other chunks
    ///   - [`data(ByteStream)`](crate::client::fluent_builders::PutChunk::data) / [`set_data(ByteStream)`](crate::client::fluent_builders::PutChunk::set_data): Data to be uploaded
    ///   - [`length(i64)`](crate::client::fluent_builders::PutChunk::length) / [`set_length(i64)`](crate::client::fluent_builders::PutChunk::set_length): Data length
    ///   - [`checksum(impl Into<String>)`](crate::client::fluent_builders::PutChunk::checksum) / [`set_checksum(Option<String>)`](crate::client::fluent_builders::PutChunk::set_checksum): Data checksum
    ///   - [`checksum_algorithm(DataChecksumAlgorithm)`](crate::client::fluent_builders::PutChunk::checksum_algorithm) / [`set_checksum_algorithm(Option<DataChecksumAlgorithm>)`](crate::client::fluent_builders::PutChunk::set_checksum_algorithm): Checksum algorithm
    /// - On success, responds with [`PutChunkOutput`](crate::output::PutChunkOutput) with field(s):
    ///   - [`chunk_checksum(Option<String>)`](crate::output::PutChunkOutput::chunk_checksum): Chunk checksum
    ///   - [`chunk_checksum_algorithm(Option<DataChecksumAlgorithm>)`](crate::output::PutChunkOutput::chunk_checksum_algorithm): Checksum algorithm
    /// - On failure, responds with [`SdkError<PutChunkError>`](crate::error::PutChunkError)
    pub fn put_chunk(&self) -> fluent_builders::PutChunk {
        fluent_builders::PutChunk::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutObject`](crate::client::fluent_builders::PutObject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_job_id(impl Into<String>)`](crate::client::fluent_builders::PutObject::backup_job_id) / [`set_backup_job_id(Option<String>)`](crate::client::fluent_builders::PutObject::set_backup_job_id): Backup job Id for the in-progress backup.
    ///   - [`object_name(impl Into<String>)`](crate::client::fluent_builders::PutObject::object_name) / [`set_object_name(Option<String>)`](crate::client::fluent_builders::PutObject::set_object_name): The name of the Object to be uploaded.
    ///   - [`metadata_string(impl Into<String>)`](crate::client::fluent_builders::PutObject::metadata_string) / [`set_metadata_string(Option<String>)`](crate::client::fluent_builders::PutObject::set_metadata_string): Store user defined metadata like backup checksum, disk ids, restore metadata etc.
    ///   - [`inline_chunk(ByteStream)`](crate::client::fluent_builders::PutObject::inline_chunk) / [`set_inline_chunk(ByteStream)`](crate::client::fluent_builders::PutObject::set_inline_chunk): Inline chunk data to be uploaded.
    ///   - [`inline_chunk_length(i64)`](crate::client::fluent_builders::PutObject::inline_chunk_length) / [`set_inline_chunk_length(i64)`](crate::client::fluent_builders::PutObject::set_inline_chunk_length): Length of the inline chunk data.
    ///   - [`inline_chunk_checksum(impl Into<String>)`](crate::client::fluent_builders::PutObject::inline_chunk_checksum) / [`set_inline_chunk_checksum(Option<String>)`](crate::client::fluent_builders::PutObject::set_inline_chunk_checksum): Inline chunk checksum
    ///   - [`inline_chunk_checksum_algorithm(impl Into<String>)`](crate::client::fluent_builders::PutObject::inline_chunk_checksum_algorithm) / [`set_inline_chunk_checksum_algorithm(Option<String>)`](crate::client::fluent_builders::PutObject::set_inline_chunk_checksum_algorithm): Inline chunk checksum algorithm
    ///   - [`object_checksum(impl Into<String>)`](crate::client::fluent_builders::PutObject::object_checksum) / [`set_object_checksum(Option<String>)`](crate::client::fluent_builders::PutObject::set_object_checksum): object checksum
    ///   - [`object_checksum_algorithm(SummaryChecksumAlgorithm)`](crate::client::fluent_builders::PutObject::object_checksum_algorithm) / [`set_object_checksum_algorithm(Option<SummaryChecksumAlgorithm>)`](crate::client::fluent_builders::PutObject::set_object_checksum_algorithm): object checksum algorithm
    ///   - [`throw_on_duplicate(bool)`](crate::client::fluent_builders::PutObject::throw_on_duplicate) / [`set_throw_on_duplicate(bool)`](crate::client::fluent_builders::PutObject::set_throw_on_duplicate): Throw an exception if Object name is already exist.
    /// - On success, responds with [`PutObjectOutput`](crate::output::PutObjectOutput) with field(s):
    ///   - [`inline_chunk_checksum(Option<String>)`](crate::output::PutObjectOutput::inline_chunk_checksum): Inline chunk checksum
    ///   - [`inline_chunk_checksum_algorithm(Option<DataChecksumAlgorithm>)`](crate::output::PutObjectOutput::inline_chunk_checksum_algorithm): Inline chunk checksum algorithm
    ///   - [`object_checksum(Option<String>)`](crate::output::PutObjectOutput::object_checksum): object checksum
    ///   - [`object_checksum_algorithm(Option<SummaryChecksumAlgorithm>)`](crate::output::PutObjectOutput::object_checksum_algorithm): object checksum algorithm
    /// - On failure, responds with [`SdkError<PutObjectError>`](crate::error::PutObjectError)
    pub fn put_object(&self) -> fluent_builders::PutObject {
        fluent_builders::PutObject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartObject`](crate::client::fluent_builders::StartObject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_job_id(impl Into<String>)`](crate::client::fluent_builders::StartObject::backup_job_id) / [`set_backup_job_id(Option<String>)`](crate::client::fluent_builders::StartObject::set_backup_job_id): Backup job Id for the in-progress backup
    ///   - [`object_name(impl Into<String>)`](crate::client::fluent_builders::StartObject::object_name) / [`set_object_name(Option<String>)`](crate::client::fluent_builders::StartObject::set_object_name): Name for the object.
    ///   - [`throw_on_duplicate(bool)`](crate::client::fluent_builders::StartObject::throw_on_duplicate) / [`set_throw_on_duplicate(bool)`](crate::client::fluent_builders::StartObject::set_throw_on_duplicate): Throw an exception if Object name is already exist.
    /// - On success, responds with [`StartObjectOutput`](crate::output::StartObjectOutput) with field(s):
    ///   - [`upload_id(Option<String>)`](crate::output::StartObjectOutput::upload_id): Upload Id for a given upload.
    /// - On failure, responds with [`SdkError<StartObjectError>`](crate::error::StartObjectError)
    pub fn start_object(&self) -> fluent_builders::StartObject {
        fluent_builders::StartObject::new(self.handle.clone())
    }
}
pub mod fluent_builders {

    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    /// Fluent builder constructing a request to `DeleteObject`.
    ///
    /// Delete Object from the incremental base Backup.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteObject {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_object_input::Builder,
    }
    impl DeleteObject {
        /// Creates a new `DeleteObject`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteObject,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteObjectError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteObjectOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteObjectError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Backup job Id for the in-progress backup.
        pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_job_id(input.into());
            self
        }
        /// Backup job Id for the in-progress backup.
        pub fn set_backup_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_backup_job_id(input);
            self
        }
        /// The name of the Object.
        pub fn object_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.object_name(input.into());
            self
        }
        /// The name of the Object.
        pub fn set_object_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_object_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetChunk`.
    ///
    /// Gets the specified object's chunk.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetChunk {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_chunk_input::Builder,
    }
    impl GetChunk {
        /// Creates a new `GetChunk`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetChunk,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetChunkError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetChunkOutput,
            aws_smithy_http::result::SdkError<crate::error::GetChunkError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Storage job id
        pub fn storage_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.storage_job_id(input.into());
            self
        }
        /// Storage job id
        pub fn set_storage_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_storage_job_id(input);
            self
        }
        /// Chunk token
        pub fn chunk_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.chunk_token(input.into());
            self
        }
        /// Chunk token
        pub fn set_chunk_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_chunk_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetObjectMetadata`.
    ///
    /// Get metadata associated with an Object.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetObjectMetadata {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_object_metadata_input::Builder,
    }
    impl GetObjectMetadata {
        /// Creates a new `GetObjectMetadata`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetObjectMetadata,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetObjectMetadataError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetObjectMetadataOutput,
            aws_smithy_http::result::SdkError<crate::error::GetObjectMetadataError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Backup job id for the in-progress backup.
        pub fn storage_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.storage_job_id(input.into());
            self
        }
        /// Backup job id for the in-progress backup.
        pub fn set_storage_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_storage_job_id(input);
            self
        }
        /// Object token.
        pub fn object_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.object_token(input.into());
            self
        }
        /// Object token.
        pub fn set_object_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_object_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListChunks`.
    ///
    /// List chunks in a given Object
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListChunks {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_chunks_input::Builder,
    }
    impl ListChunks {
        /// Creates a new `ListChunks`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListChunks,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListChunksError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListChunksOutput,
            aws_smithy_http::result::SdkError<crate::error::ListChunksError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListChunksPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListChunksPaginator {
            crate::paginator::ListChunksPaginator::new(self.handle, self.inner)
        }
        /// Storage job id
        pub fn storage_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.storage_job_id(input.into());
            self
        }
        /// Storage job id
        pub fn set_storage_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_storage_job_id(input);
            self
        }
        /// Object token
        pub fn object_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.object_token(input.into());
            self
        }
        /// Object token
        pub fn set_object_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_object_token(input);
            self
        }
        /// Maximum number of chunks
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// Maximum number of chunks
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Pagination token
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// Pagination token
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListObjects`.
    ///
    /// List all Objects in a given Backup.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListObjects {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_objects_input::Builder,
    }
    impl ListObjects {
        /// Creates a new `ListObjects`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListObjects,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListObjectsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListObjectsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListObjectsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListObjectsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListObjectsPaginator {
            crate::paginator::ListObjectsPaginator::new(self.handle, self.inner)
        }
        /// Storage job id
        pub fn storage_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.storage_job_id(input.into());
            self
        }
        /// Storage job id
        pub fn set_storage_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_storage_job_id(input);
            self
        }
        /// Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL
        pub fn starting_object_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.starting_object_name(input.into());
            self
        }
        /// Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL
        pub fn set_starting_object_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_starting_object_name(input);
            self
        }
        /// Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL
        pub fn starting_object_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.starting_object_prefix(input.into());
            self
        }
        /// Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL
        pub fn set_starting_object_prefix(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_starting_object_prefix(input);
            self
        }
        /// Maximum objects count
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// Maximum objects count
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Pagination token
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// Pagination token
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// (Optional) Created before filter
        pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.created_before(input);
            self
        }
        /// (Optional) Created before filter
        pub fn set_created_before(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_created_before(input);
            self
        }
        /// (Optional) Created after filter
        pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.inner = self.inner.created_after(input);
            self
        }
        /// (Optional) Created after filter
        pub fn set_created_after(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.inner = self.inner.set_created_after(input);
            self
        }
    }
    /// Fluent builder constructing a request to `NotifyObjectComplete`.
    ///
    /// Complete upload
    #[derive(std::fmt::Debug)]
    pub struct NotifyObjectComplete {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::notify_object_complete_input::Builder,
    }
    impl NotifyObjectComplete {
        /// Creates a new `NotifyObjectComplete`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::NotifyObjectComplete,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::NotifyObjectCompleteError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::NotifyObjectCompleteOutput,
            aws_smithy_http::result::SdkError<crate::error::NotifyObjectCompleteError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Backup job Id for the in-progress backup
        pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_job_id(input.into());
            self
        }
        /// Backup job Id for the in-progress backup
        pub fn set_backup_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_backup_job_id(input);
            self
        }
        /// Upload Id for the in-progress upload
        pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.upload_id(input.into());
            self
        }
        /// Upload Id for the in-progress upload
        pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_upload_id(input);
            self
        }
        /// Object checksum
        pub fn object_checksum(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.object_checksum(input.into());
            self
        }
        /// Object checksum
        pub fn set_object_checksum(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_object_checksum(input);
            self
        }
        /// Checksum algorithm
        pub fn object_checksum_algorithm(
            mut self,
            input: crate::model::SummaryChecksumAlgorithm,
        ) -> Self {
            self.inner = self.inner.object_checksum_algorithm(input);
            self
        }
        /// Checksum algorithm
        pub fn set_object_checksum_algorithm(
            mut self,
            input: std::option::Option<crate::model::SummaryChecksumAlgorithm>,
        ) -> Self {
            self.inner = self.inner.set_object_checksum_algorithm(input);
            self
        }
        /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
        pub fn metadata_string(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.metadata_string(input.into());
            self
        }
        /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
        pub fn set_metadata_string(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_metadata_string(input);
            self
        }
        /// Optional metadata associated with an Object. Maximum length is 4MB.
        pub fn metadata_blob(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
            self.inner = self.inner.metadata_blob(input);
            self
        }
        /// Optional metadata associated with an Object. Maximum length is 4MB.
        pub fn set_metadata_blob(
            mut self,
            input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
        ) -> Self {
            self.inner = self.inner.set_metadata_blob(input);
            self
        }
        /// The size of MetadataBlob.
        pub fn metadata_blob_length(mut self, input: i64) -> Self {
            self.inner = self.inner.metadata_blob_length(input);
            self
        }
        /// The size of MetadataBlob.
        pub fn set_metadata_blob_length(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_metadata_blob_length(input);
            self
        }
        /// Checksum of MetadataBlob.
        pub fn metadata_blob_checksum(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.metadata_blob_checksum(input.into());
            self
        }
        /// Checksum of MetadataBlob.
        pub fn set_metadata_blob_checksum(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_metadata_blob_checksum(input);
            self
        }
        /// Checksum algorithm.
        pub fn metadata_blob_checksum_algorithm(
            mut self,
            input: crate::model::DataChecksumAlgorithm,
        ) -> Self {
            self.inner = self.inner.metadata_blob_checksum_algorithm(input);
            self
        }
        /// Checksum algorithm.
        pub fn set_metadata_blob_checksum_algorithm(
            mut self,
            input: std::option::Option<crate::model::DataChecksumAlgorithm>,
        ) -> Self {
            self.inner = self.inner.set_metadata_blob_checksum_algorithm(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutChunk`.
    ///
    /// Upload chunk.
    #[derive(std::fmt::Debug)]
    pub struct PutChunk {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_chunk_input::Builder,
    }
    impl PutChunk {
        /// Creates a new `PutChunk`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::PutChunk,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::PutChunkError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutChunkOutput,
            aws_smithy_http::result::SdkError<crate::error::PutChunkError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Backup job Id for the in-progress backup.
        pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_job_id(input.into());
            self
        }
        /// Backup job Id for the in-progress backup.
        pub fn set_backup_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_backup_job_id(input);
            self
        }
        /// Upload Id for the in-progress upload.
        pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.upload_id(input.into());
            self
        }
        /// Upload Id for the in-progress upload.
        pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_upload_id(input);
            self
        }
        /// Describes this chunk's position relative to the other chunks
        pub fn chunk_index(mut self, input: i64) -> Self {
            self.inner = self.inner.chunk_index(input);
            self
        }
        /// Describes this chunk's position relative to the other chunks
        pub fn set_chunk_index(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_chunk_index(input);
            self
        }
        /// Data to be uploaded
        pub fn data(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
            self.inner = self.inner.data(input);
            self
        }
        /// Data to be uploaded
        pub fn set_data(
            mut self,
            input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
        ) -> Self {
            self.inner = self.inner.set_data(input);
            self
        }
        /// Data length
        pub fn length(mut self, input: i64) -> Self {
            self.inner = self.inner.length(input);
            self
        }
        /// Data length
        pub fn set_length(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_length(input);
            self
        }
        /// Data checksum
        pub fn checksum(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.checksum(input.into());
            self
        }
        /// Data checksum
        pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_checksum(input);
            self
        }
        /// Checksum algorithm
        pub fn checksum_algorithm(mut self, input: crate::model::DataChecksumAlgorithm) -> Self {
            self.inner = self.inner.checksum_algorithm(input);
            self
        }
        /// Checksum algorithm
        pub fn set_checksum_algorithm(
            mut self,
            input: std::option::Option<crate::model::DataChecksumAlgorithm>,
        ) -> Self {
            self.inner = self.inner.set_checksum_algorithm(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PutObject`.
    ///
    /// Upload object that can store object metadata String and data blob in single API call using inline chunk field.
    #[derive(std::fmt::Debug)]
    pub struct PutObject {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::put_object_input::Builder,
    }
    impl PutObject {
        /// Creates a new `PutObject`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::PutObject,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::PutObjectError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutObjectOutput,
            aws_smithy_http::result::SdkError<crate::error::PutObjectError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Backup job Id for the in-progress backup.
        pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_job_id(input.into());
            self
        }
        /// Backup job Id for the in-progress backup.
        pub fn set_backup_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_backup_job_id(input);
            self
        }
        /// The name of the Object to be uploaded.
        pub fn object_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.object_name(input.into());
            self
        }
        /// The name of the Object to be uploaded.
        pub fn set_object_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_object_name(input);
            self
        }
        /// Store user defined metadata like backup checksum, disk ids, restore metadata etc.
        pub fn metadata_string(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.metadata_string(input.into());
            self
        }
        /// Store user defined metadata like backup checksum, disk ids, restore metadata etc.
        pub fn set_metadata_string(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_metadata_string(input);
            self
        }
        /// Inline chunk data to be uploaded.
        pub fn inline_chunk(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
            self.inner = self.inner.inline_chunk(input);
            self
        }
        /// Inline chunk data to be uploaded.
        pub fn set_inline_chunk(
            mut self,
            input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
        ) -> Self {
            self.inner = self.inner.set_inline_chunk(input);
            self
        }
        /// Length of the inline chunk data.
        pub fn inline_chunk_length(mut self, input: i64) -> Self {
            self.inner = self.inner.inline_chunk_length(input);
            self
        }
        /// Length of the inline chunk data.
        pub fn set_inline_chunk_length(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_inline_chunk_length(input);
            self
        }
        /// Inline chunk checksum
        pub fn inline_chunk_checksum(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.inline_chunk_checksum(input.into());
            self
        }
        /// Inline chunk checksum
        pub fn set_inline_chunk_checksum(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_inline_chunk_checksum(input);
            self
        }
        /// Inline chunk checksum algorithm
        pub fn inline_chunk_checksum_algorithm(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.inline_chunk_checksum_algorithm(input.into());
            self
        }
        /// Inline chunk checksum algorithm
        pub fn set_inline_chunk_checksum_algorithm(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_inline_chunk_checksum_algorithm(input);
            self
        }
        /// object checksum
        pub fn object_checksum(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.object_checksum(input.into());
            self
        }
        /// object checksum
        pub fn set_object_checksum(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_object_checksum(input);
            self
        }
        /// object checksum algorithm
        pub fn object_checksum_algorithm(
            mut self,
            input: crate::model::SummaryChecksumAlgorithm,
        ) -> Self {
            self.inner = self.inner.object_checksum_algorithm(input);
            self
        }
        /// object checksum algorithm
        pub fn set_object_checksum_algorithm(
            mut self,
            input: std::option::Option<crate::model::SummaryChecksumAlgorithm>,
        ) -> Self {
            self.inner = self.inner.set_object_checksum_algorithm(input);
            self
        }
        /// Throw an exception if Object name is already exist.
        pub fn throw_on_duplicate(mut self, input: bool) -> Self {
            self.inner = self.inner.throw_on_duplicate(input);
            self
        }
        /// Throw an exception if Object name is already exist.
        pub fn set_throw_on_duplicate(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_throw_on_duplicate(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StartObject`.
    ///
    /// Start upload containing one or many chunks.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct StartObject {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::start_object_input::Builder,
    }
    impl StartObject {
        /// Creates a new `StartObject`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::StartObject,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::StartObjectError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartObjectOutput,
            aws_smithy_http::result::SdkError<crate::error::StartObjectError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Backup job Id for the in-progress backup
        pub fn backup_job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.backup_job_id(input.into());
            self
        }
        /// Backup job Id for the in-progress backup
        pub fn set_backup_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_backup_job_id(input);
            self
        }
        /// Name for the object.
        pub fn object_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.object_name(input.into());
            self
        }
        /// Name for the object.
        pub fn set_object_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_object_name(input);
            self
        }
        /// Throw an exception if Object name is already exist.
        pub fn throw_on_duplicate(mut self, input: bool) -> Self {
            self.inner = self.inner.throw_on_duplicate(input);
            self
        }
        /// Throw an exception if Object name is already exist.
        pub fn set_throw_on_duplicate(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_throw_on_duplicate(input);
            self
        }
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
