// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVocabularyFilterOutput {
    /// <p>The name of the updated custom vocabulary filter.</p>
    #[doc(hidden)]
    pub vocabulary_filter_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::LanguageCode>,
    /// <p>The date and time the specified custom vocabulary filter was last updated.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateVocabularyFilterOutput {
    /// <p>The name of the updated custom vocabulary filter.</p>
    pub fn vocabulary_filter_name(&self) -> std::option::Option<&str> {
        self.vocabulary_filter_name.as_deref()
    }
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The date and time the specified custom vocabulary filter was last updated.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateVocabularyFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateVocabularyFilterOutput`](crate::output::UpdateVocabularyFilterOutput).
pub mod update_vocabulary_filter_output {

    /// A builder for [`UpdateVocabularyFilterOutput`](crate::output::UpdateVocabularyFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vocabulary_filter_name: std::option::Option<std::string::String>,
        pub(crate) language_code: std::option::Option<crate::model::LanguageCode>,
        pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the updated custom vocabulary filter.</p>
        pub fn vocabulary_filter_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.vocabulary_filter_name = Some(input.into());
            self
        }
        /// <p>The name of the updated custom vocabulary filter.</p>
        pub fn set_vocabulary_filter_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vocabulary_filter_name = input;
            self
        }
        /// <p>The language code you selected for your custom vocabulary filter.</p>
        pub fn language_code(mut self, input: crate::model::LanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom vocabulary filter.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The date and time the specified custom vocabulary filter was last updated.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modified_time = Some(input);
            self
        }
        /// <p>The date and time the specified custom vocabulary filter was last updated.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn set_last_modified_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modified_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVocabularyFilterOutput`](crate::output::UpdateVocabularyFilterOutput).
        pub fn build(self) -> crate::output::UpdateVocabularyFilterOutput {
            crate::output::UpdateVocabularyFilterOutput {
                vocabulary_filter_name: self.vocabulary_filter_name,
                language_code: self.language_code,
                last_modified_time: self.last_modified_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateVocabularyFilterOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVocabularyFilterOutput`](crate::output::UpdateVocabularyFilterOutput).
    pub fn builder() -> crate::output::update_vocabulary_filter_output::Builder {
        crate::output::update_vocabulary_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVocabularyOutput {
    /// <p>The name of the updated custom vocabulary.</p>
    #[doc(hidden)]
    pub vocabulary_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom vocabulary.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::LanguageCode>,
    /// <p>The date and time the specified custom vocabulary was last updated.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    #[doc(hidden)]
    pub vocabulary_state: std::option::Option<crate::model::VocabularyState>,
    _request_id: Option<String>,
}
impl UpdateVocabularyOutput {
    /// <p>The name of the updated custom vocabulary.</p>
    pub fn vocabulary_name(&self) -> std::option::Option<&str> {
        self.vocabulary_name.as_deref()
    }
    /// <p>The language code you selected for your custom vocabulary.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The date and time the specified custom vocabulary was last updated.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    pub fn vocabulary_state(&self) -> std::option::Option<&crate::model::VocabularyState> {
        self.vocabulary_state.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateVocabularyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateVocabularyOutput`](crate::output::UpdateVocabularyOutput).
pub mod update_vocabulary_output {

    /// A builder for [`UpdateVocabularyOutput`](crate::output::UpdateVocabularyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vocabulary_name: std::option::Option<std::string::String>,
        pub(crate) language_code: std::option::Option<crate::model::LanguageCode>,
        pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) vocabulary_state: std::option::Option<crate::model::VocabularyState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the updated custom vocabulary.</p>
        pub fn vocabulary_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.vocabulary_name = Some(input.into());
            self
        }
        /// <p>The name of the updated custom vocabulary.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vocabulary_name = input;
            self
        }
        /// <p>The language code you selected for your custom vocabulary.</p>
        pub fn language_code(mut self, input: crate::model::LanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom vocabulary.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The date and time the specified custom vocabulary was last updated.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modified_time = Some(input);
            self
        }
        /// <p>The date and time the specified custom vocabulary was last updated.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn set_last_modified_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modified_time = input;
            self
        }
        /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
        pub fn vocabulary_state(mut self, input: crate::model::VocabularyState) -> Self {
            self.vocabulary_state = Some(input);
            self
        }
        /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
        pub fn set_vocabulary_state(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.vocabulary_state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVocabularyOutput`](crate::output::UpdateVocabularyOutput).
        pub fn build(self) -> crate::output::UpdateVocabularyOutput {
            crate::output::UpdateVocabularyOutput {
                vocabulary_name: self.vocabulary_name,
                language_code: self.language_code,
                last_modified_time: self.last_modified_time,
                vocabulary_state: self.vocabulary_state,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateVocabularyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVocabularyOutput`](crate::output::UpdateVocabularyOutput).
    pub fn builder() -> crate::output::update_vocabulary_output::Builder {
        crate::output::update_vocabulary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMedicalVocabularyOutput {
    /// <p>The name of the updated custom medical vocabulary.</p>
    #[doc(hidden)]
    pub vocabulary_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::LanguageCode>,
    /// <p>The date and time the specified custom medical vocabulary was last updated.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
    #[doc(hidden)]
    pub vocabulary_state: std::option::Option<crate::model::VocabularyState>,
    _request_id: Option<String>,
}
impl UpdateMedicalVocabularyOutput {
    /// <p>The name of the updated custom medical vocabulary.</p>
    pub fn vocabulary_name(&self) -> std::option::Option<&str> {
        self.vocabulary_name.as_deref()
    }
    /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The date and time the specified custom medical vocabulary was last updated.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
    pub fn vocabulary_state(&self) -> std::option::Option<&crate::model::VocabularyState> {
        self.vocabulary_state.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateMedicalVocabularyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateMedicalVocabularyOutput`](crate::output::UpdateMedicalVocabularyOutput).
pub mod update_medical_vocabulary_output {

    /// A builder for [`UpdateMedicalVocabularyOutput`](crate::output::UpdateMedicalVocabularyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vocabulary_name: std::option::Option<std::string::String>,
        pub(crate) language_code: std::option::Option<crate::model::LanguageCode>,
        pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) vocabulary_state: std::option::Option<crate::model::VocabularyState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the updated custom medical vocabulary.</p>
        pub fn vocabulary_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.vocabulary_name = Some(input.into());
            self
        }
        /// <p>The name of the updated custom medical vocabulary.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vocabulary_name = input;
            self
        }
        /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
        pub fn language_code(mut self, input: crate::model::LanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The date and time the specified custom medical vocabulary was last updated.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modified_time = Some(input);
            self
        }
        /// <p>The date and time the specified custom medical vocabulary was last updated.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn set_last_modified_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modified_time = input;
            self
        }
        /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
        pub fn vocabulary_state(mut self, input: crate::model::VocabularyState) -> Self {
            self.vocabulary_state = Some(input);
            self
        }
        /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
        pub fn set_vocabulary_state(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.vocabulary_state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateMedicalVocabularyOutput`](crate::output::UpdateMedicalVocabularyOutput).
        pub fn build(self) -> crate::output::UpdateMedicalVocabularyOutput {
            crate::output::UpdateMedicalVocabularyOutput {
                vocabulary_name: self.vocabulary_name,
                language_code: self.language_code,
                last_modified_time: self.last_modified_time,
                vocabulary_state: self.vocabulary_state,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateMedicalVocabularyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMedicalVocabularyOutput`](crate::output::UpdateMedicalVocabularyOutput).
    pub fn builder() -> crate::output::update_medical_vocabulary_output::Builder {
        crate::output::update_medical_vocabulary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCallAnalyticsCategoryOutput {
    /// <p>Provides you with the properties of the Call Analytics category you specified in your <code>UpdateCallAnalyticsCategory</code> request.</p>
    #[doc(hidden)]
    pub category_properties: std::option::Option<crate::model::CategoryProperties>,
    _request_id: Option<String>,
}
impl UpdateCallAnalyticsCategoryOutput {
    /// <p>Provides you with the properties of the Call Analytics category you specified in your <code>UpdateCallAnalyticsCategory</code> request.</p>
    pub fn category_properties(&self) -> std::option::Option<&crate::model::CategoryProperties> {
        self.category_properties.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateCallAnalyticsCategoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateCallAnalyticsCategoryOutput`](crate::output::UpdateCallAnalyticsCategoryOutput).
pub mod update_call_analytics_category_output {

    /// A builder for [`UpdateCallAnalyticsCategoryOutput`](crate::output::UpdateCallAnalyticsCategoryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) category_properties: std::option::Option<crate::model::CategoryProperties>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides you with the properties of the Call Analytics category you specified in your <code>UpdateCallAnalyticsCategory</code> request.</p>
        pub fn category_properties(mut self, input: crate::model::CategoryProperties) -> Self {
            self.category_properties = Some(input);
            self
        }
        /// <p>Provides you with the properties of the Call Analytics category you specified in your <code>UpdateCallAnalyticsCategory</code> request.</p>
        pub fn set_category_properties(
            mut self,
            input: std::option::Option<crate::model::CategoryProperties>,
        ) -> Self {
            self.category_properties = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateCallAnalyticsCategoryOutput`](crate::output::UpdateCallAnalyticsCategoryOutput).
        pub fn build(self) -> crate::output::UpdateCallAnalyticsCategoryOutput {
            crate::output::UpdateCallAnalyticsCategoryOutput {
                category_properties: self.category_properties,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateCallAnalyticsCategoryOutput {
    /// Creates a new builder-style object to manufacture [`UpdateCallAnalyticsCategoryOutput`](crate::output::UpdateCallAnalyticsCategoryOutput).
    pub fn builder() -> crate::output::update_call_analytics_category_output::Builder {
        crate::output::update_call_analytics_category_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartTranscriptionJobOutput {
    /// <p>Provides detailed information about the current transcription job, including job status and, if applicable, failure reason.</p>
    #[doc(hidden)]
    pub transcription_job: std::option::Option<crate::model::TranscriptionJob>,
    _request_id: Option<String>,
}
impl StartTranscriptionJobOutput {
    /// <p>Provides detailed information about the current transcription job, including job status and, if applicable, failure reason.</p>
    pub fn transcription_job(&self) -> std::option::Option<&crate::model::TranscriptionJob> {
        self.transcription_job.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartTranscriptionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartTranscriptionJobOutput`](crate::output::StartTranscriptionJobOutput).
pub mod start_transcription_job_output {

    /// A builder for [`StartTranscriptionJobOutput`](crate::output::StartTranscriptionJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transcription_job: std::option::Option<crate::model::TranscriptionJob>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides detailed information about the current transcription job, including job status and, if applicable, failure reason.</p>
        pub fn transcription_job(mut self, input: crate::model::TranscriptionJob) -> Self {
            self.transcription_job = Some(input);
            self
        }
        /// <p>Provides detailed information about the current transcription job, including job status and, if applicable, failure reason.</p>
        pub fn set_transcription_job(
            mut self,
            input: std::option::Option<crate::model::TranscriptionJob>,
        ) -> Self {
            self.transcription_job = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartTranscriptionJobOutput`](crate::output::StartTranscriptionJobOutput).
        pub fn build(self) -> crate::output::StartTranscriptionJobOutput {
            crate::output::StartTranscriptionJobOutput {
                transcription_job: self.transcription_job,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartTranscriptionJobOutput {
    /// Creates a new builder-style object to manufacture [`StartTranscriptionJobOutput`](crate::output::StartTranscriptionJobOutput).
    pub fn builder() -> crate::output::start_transcription_job_output::Builder {
        crate::output::start_transcription_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartMedicalTranscriptionJobOutput {
    /// <p>Provides detailed information about the current medical transcription job, including job status and, if applicable, failure reason.</p>
    #[doc(hidden)]
    pub medical_transcription_job: std::option::Option<crate::model::MedicalTranscriptionJob>,
    _request_id: Option<String>,
}
impl StartMedicalTranscriptionJobOutput {
    /// <p>Provides detailed information about the current medical transcription job, including job status and, if applicable, failure reason.</p>
    pub fn medical_transcription_job(
        &self,
    ) -> std::option::Option<&crate::model::MedicalTranscriptionJob> {
        self.medical_transcription_job.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartMedicalTranscriptionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartMedicalTranscriptionJobOutput`](crate::output::StartMedicalTranscriptionJobOutput).
pub mod start_medical_transcription_job_output {

    /// A builder for [`StartMedicalTranscriptionJobOutput`](crate::output::StartMedicalTranscriptionJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) medical_transcription_job:
            std::option::Option<crate::model::MedicalTranscriptionJob>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides detailed information about the current medical transcription job, including job status and, if applicable, failure reason.</p>
        pub fn medical_transcription_job(
            mut self,
            input: crate::model::MedicalTranscriptionJob,
        ) -> Self {
            self.medical_transcription_job = Some(input);
            self
        }
        /// <p>Provides detailed information about the current medical transcription job, including job status and, if applicable, failure reason.</p>
        pub fn set_medical_transcription_job(
            mut self,
            input: std::option::Option<crate::model::MedicalTranscriptionJob>,
        ) -> Self {
            self.medical_transcription_job = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartMedicalTranscriptionJobOutput`](crate::output::StartMedicalTranscriptionJobOutput).
        pub fn build(self) -> crate::output::StartMedicalTranscriptionJobOutput {
            crate::output::StartMedicalTranscriptionJobOutput {
                medical_transcription_job: self.medical_transcription_job,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartMedicalTranscriptionJobOutput {
    /// Creates a new builder-style object to manufacture [`StartMedicalTranscriptionJobOutput`](crate::output::StartMedicalTranscriptionJobOutput).
    pub fn builder() -> crate::output::start_medical_transcription_job_output::Builder {
        crate::output::start_medical_transcription_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartCallAnalyticsJobOutput {
    /// <p>Provides detailed information about the current Call Analytics job, including job status and, if applicable, failure reason.</p>
    #[doc(hidden)]
    pub call_analytics_job: std::option::Option<crate::model::CallAnalyticsJob>,
    _request_id: Option<String>,
}
impl StartCallAnalyticsJobOutput {
    /// <p>Provides detailed information about the current Call Analytics job, including job status and, if applicable, failure reason.</p>
    pub fn call_analytics_job(&self) -> std::option::Option<&crate::model::CallAnalyticsJob> {
        self.call_analytics_job.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartCallAnalyticsJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartCallAnalyticsJobOutput`](crate::output::StartCallAnalyticsJobOutput).
pub mod start_call_analytics_job_output {

    /// A builder for [`StartCallAnalyticsJobOutput`](crate::output::StartCallAnalyticsJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) call_analytics_job: std::option::Option<crate::model::CallAnalyticsJob>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides detailed information about the current Call Analytics job, including job status and, if applicable, failure reason.</p>
        pub fn call_analytics_job(mut self, input: crate::model::CallAnalyticsJob) -> Self {
            self.call_analytics_job = Some(input);
            self
        }
        /// <p>Provides detailed information about the current Call Analytics job, including job status and, if applicable, failure reason.</p>
        pub fn set_call_analytics_job(
            mut self,
            input: std::option::Option<crate::model::CallAnalyticsJob>,
        ) -> Self {
            self.call_analytics_job = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartCallAnalyticsJobOutput`](crate::output::StartCallAnalyticsJobOutput).
        pub fn build(self) -> crate::output::StartCallAnalyticsJobOutput {
            crate::output::StartCallAnalyticsJobOutput {
                call_analytics_job: self.call_analytics_job,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartCallAnalyticsJobOutput {
    /// Creates a new builder-style object to manufacture [`StartCallAnalyticsJobOutput`](crate::output::StartCallAnalyticsJobOutput).
    pub fn builder() -> crate::output::start_call_analytics_job_output::Builder {
        crate::output::start_call_analytics_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVocabularyFiltersOutput {
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Provides information about the custom vocabulary filters that match the criteria specified in your request.</p>
    #[doc(hidden)]
    pub vocabulary_filters: std::option::Option<std::vec::Vec<crate::model::VocabularyFilterInfo>>,
    _request_id: Option<String>,
}
impl ListVocabularyFiltersOutput {
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides information about the custom vocabulary filters that match the criteria specified in your request.</p>
    pub fn vocabulary_filters(&self) -> std::option::Option<&[crate::model::VocabularyFilterInfo]> {
        self.vocabulary_filters.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVocabularyFiltersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListVocabularyFiltersOutput`](crate::output::ListVocabularyFiltersOutput).
pub mod list_vocabulary_filters_output {

    /// A builder for [`ListVocabularyFiltersOutput`](crate::output::ListVocabularyFiltersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) vocabulary_filters:
            std::option::Option<std::vec::Vec<crate::model::VocabularyFilterInfo>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `vocabulary_filters`.
        ///
        /// To override the contents of this collection use [`set_vocabulary_filters`](Self::set_vocabulary_filters).
        ///
        /// <p>Provides information about the custom vocabulary filters that match the criteria specified in your request.</p>
        pub fn vocabulary_filters(mut self, input: crate::model::VocabularyFilterInfo) -> Self {
            let mut v = self.vocabulary_filters.unwrap_or_default();
            v.push(input);
            self.vocabulary_filters = Some(v);
            self
        }
        /// <p>Provides information about the custom vocabulary filters that match the criteria specified in your request.</p>
        pub fn set_vocabulary_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VocabularyFilterInfo>>,
        ) -> Self {
            self.vocabulary_filters = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVocabularyFiltersOutput`](crate::output::ListVocabularyFiltersOutput).
        pub fn build(self) -> crate::output::ListVocabularyFiltersOutput {
            crate::output::ListVocabularyFiltersOutput {
                next_token: self.next_token,
                vocabulary_filters: self.vocabulary_filters,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListVocabularyFiltersOutput {
    /// Creates a new builder-style object to manufacture [`ListVocabularyFiltersOutput`](crate::output::ListVocabularyFiltersOutput).
    pub fn builder() -> crate::output::list_vocabulary_filters_output::Builder {
        crate::output::list_vocabulary_filters_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVocabulariesOutput {
    /// <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::VocabularyState>,
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
    #[doc(hidden)]
    pub vocabularies: std::option::Option<std::vec::Vec<crate::model::VocabularyInfo>>,
    _request_id: Option<String>,
}
impl ListVocabulariesOutput {
    /// <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::VocabularyState> {
        self.status.as_ref()
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
    pub fn vocabularies(&self) -> std::option::Option<&[crate::model::VocabularyInfo]> {
        self.vocabularies.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVocabulariesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListVocabulariesOutput`](crate::output::ListVocabulariesOutput).
pub mod list_vocabularies_output {

    /// A builder for [`ListVocabulariesOutput`](crate::output::ListVocabulariesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::VocabularyState>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) vocabularies: std::option::Option<std::vec::Vec<crate::model::VocabularyInfo>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
        pub fn status(mut self, input: crate::model::VocabularyState) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `vocabularies`.
        ///
        /// To override the contents of this collection use [`set_vocabularies`](Self::set_vocabularies).
        ///
        /// <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
        pub fn vocabularies(mut self, input: crate::model::VocabularyInfo) -> Self {
            let mut v = self.vocabularies.unwrap_or_default();
            v.push(input);
            self.vocabularies = Some(v);
            self
        }
        /// <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
        pub fn set_vocabularies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VocabularyInfo>>,
        ) -> Self {
            self.vocabularies = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVocabulariesOutput`](crate::output::ListVocabulariesOutput).
        pub fn build(self) -> crate::output::ListVocabulariesOutput {
            crate::output::ListVocabulariesOutput {
                status: self.status,
                next_token: self.next_token,
                vocabularies: self.vocabularies,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListVocabulariesOutput {
    /// Creates a new builder-style object to manufacture [`ListVocabulariesOutput`](crate::output::ListVocabulariesOutput).
    pub fn builder() -> crate::output::list_vocabularies_output::Builder {
        crate::output::list_vocabularies_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTranscriptionJobsOutput {
    /// <p>Lists all transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::TranscriptionJobStatus>,
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Provides a summary of information about each result.</p>
    #[doc(hidden)]
    pub transcription_job_summaries:
        std::option::Option<std::vec::Vec<crate::model::TranscriptionJobSummary>>,
    _request_id: Option<String>,
}
impl ListTranscriptionJobsOutput {
    /// <p>Lists all transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::TranscriptionJobStatus> {
        self.status.as_ref()
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides a summary of information about each result.</p>
    pub fn transcription_job_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::TranscriptionJobSummary]> {
        self.transcription_job_summaries.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTranscriptionJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTranscriptionJobsOutput`](crate::output::ListTranscriptionJobsOutput).
pub mod list_transcription_jobs_output {

    /// A builder for [`ListTranscriptionJobsOutput`](crate::output::ListTranscriptionJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::TranscriptionJobStatus>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) transcription_job_summaries:
            std::option::Option<std::vec::Vec<crate::model::TranscriptionJobSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Lists all transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
        pub fn status(mut self, input: crate::model::TranscriptionJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Lists all transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TranscriptionJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `transcription_job_summaries`.
        ///
        /// To override the contents of this collection use [`set_transcription_job_summaries`](Self::set_transcription_job_summaries).
        ///
        /// <p>Provides a summary of information about each result.</p>
        pub fn transcription_job_summaries(
            mut self,
            input: crate::model::TranscriptionJobSummary,
        ) -> Self {
            let mut v = self.transcription_job_summaries.unwrap_or_default();
            v.push(input);
            self.transcription_job_summaries = Some(v);
            self
        }
        /// <p>Provides a summary of information about each result.</p>
        pub fn set_transcription_job_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TranscriptionJobSummary>>,
        ) -> Self {
            self.transcription_job_summaries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTranscriptionJobsOutput`](crate::output::ListTranscriptionJobsOutput).
        pub fn build(self) -> crate::output::ListTranscriptionJobsOutput {
            crate::output::ListTranscriptionJobsOutput {
                status: self.status,
                next_token: self.next_token,
                transcription_job_summaries: self.transcription_job_summaries,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTranscriptionJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListTranscriptionJobsOutput`](crate::output::ListTranscriptionJobsOutput).
    pub fn builder() -> crate::output::list_transcription_jobs_output::Builder {
        crate::output::list_transcription_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The Amazon Resource Name (ARN) specified in your request.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>Lists all tags associated with the given transcription job, vocabulary, model, or resource.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The Amazon Resource Name (ARN) specified in your request.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>Lists all tags associated with the given transcription job, vocabulary, model, or resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) specified in your request.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) specified in your request.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Lists all tags associated with the given transcription job, vocabulary, model, or resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Lists all tags associated with the given transcription job, vocabulary, model, or resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                resource_arn: self.resource_arn,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMedicalVocabulariesOutput {
    /// <p>Lists all custom medical vocabularies that have the status specified in your request. Custom vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::VocabularyState>,
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Provides information about the custom medical vocabularies that match the criteria specified in your request.</p>
    #[doc(hidden)]
    pub vocabularies: std::option::Option<std::vec::Vec<crate::model::VocabularyInfo>>,
    _request_id: Option<String>,
}
impl ListMedicalVocabulariesOutput {
    /// <p>Lists all custom medical vocabularies that have the status specified in your request. Custom vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::VocabularyState> {
        self.status.as_ref()
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides information about the custom medical vocabularies that match the criteria specified in your request.</p>
    pub fn vocabularies(&self) -> std::option::Option<&[crate::model::VocabularyInfo]> {
        self.vocabularies.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMedicalVocabulariesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListMedicalVocabulariesOutput`](crate::output::ListMedicalVocabulariesOutput).
pub mod list_medical_vocabularies_output {

    /// A builder for [`ListMedicalVocabulariesOutput`](crate::output::ListMedicalVocabulariesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::VocabularyState>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) vocabularies: std::option::Option<std::vec::Vec<crate::model::VocabularyInfo>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Lists all custom medical vocabularies that have the status specified in your request. Custom vocabularies are ordered by creation date, with the newest vocabulary first.</p>
        pub fn status(mut self, input: crate::model::VocabularyState) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Lists all custom medical vocabularies that have the status specified in your request. Custom vocabularies are ordered by creation date, with the newest vocabulary first.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `vocabularies`.
        ///
        /// To override the contents of this collection use [`set_vocabularies`](Self::set_vocabularies).
        ///
        /// <p>Provides information about the custom medical vocabularies that match the criteria specified in your request.</p>
        pub fn vocabularies(mut self, input: crate::model::VocabularyInfo) -> Self {
            let mut v = self.vocabularies.unwrap_or_default();
            v.push(input);
            self.vocabularies = Some(v);
            self
        }
        /// <p>Provides information about the custom medical vocabularies that match the criteria specified in your request.</p>
        pub fn set_vocabularies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VocabularyInfo>>,
        ) -> Self {
            self.vocabularies = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListMedicalVocabulariesOutput`](crate::output::ListMedicalVocabulariesOutput).
        pub fn build(self) -> crate::output::ListMedicalVocabulariesOutput {
            crate::output::ListMedicalVocabulariesOutput {
                status: self.status,
                next_token: self.next_token,
                vocabularies: self.vocabularies,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListMedicalVocabulariesOutput {
    /// Creates a new builder-style object to manufacture [`ListMedicalVocabulariesOutput`](crate::output::ListMedicalVocabulariesOutput).
    pub fn builder() -> crate::output::list_medical_vocabularies_output::Builder {
        crate::output::list_medical_vocabularies_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMedicalTranscriptionJobsOutput {
    /// <p>Lists all medical transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::TranscriptionJobStatus>,
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Provides a summary of information about each result.</p>
    #[doc(hidden)]
    pub medical_transcription_job_summaries:
        std::option::Option<std::vec::Vec<crate::model::MedicalTranscriptionJobSummary>>,
    _request_id: Option<String>,
}
impl ListMedicalTranscriptionJobsOutput {
    /// <p>Lists all medical transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::TranscriptionJobStatus> {
        self.status.as_ref()
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides a summary of information about each result.</p>
    pub fn medical_transcription_job_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::MedicalTranscriptionJobSummary]> {
        self.medical_transcription_job_summaries.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMedicalTranscriptionJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListMedicalTranscriptionJobsOutput`](crate::output::ListMedicalTranscriptionJobsOutput).
pub mod list_medical_transcription_jobs_output {

    /// A builder for [`ListMedicalTranscriptionJobsOutput`](crate::output::ListMedicalTranscriptionJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::TranscriptionJobStatus>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) medical_transcription_job_summaries:
            std::option::Option<std::vec::Vec<crate::model::MedicalTranscriptionJobSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Lists all medical transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
        pub fn status(mut self, input: crate::model::TranscriptionJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Lists all medical transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TranscriptionJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `medical_transcription_job_summaries`.
        ///
        /// To override the contents of this collection use [`set_medical_transcription_job_summaries`](Self::set_medical_transcription_job_summaries).
        ///
        /// <p>Provides a summary of information about each result.</p>
        pub fn medical_transcription_job_summaries(
            mut self,
            input: crate::model::MedicalTranscriptionJobSummary,
        ) -> Self {
            let mut v = self.medical_transcription_job_summaries.unwrap_or_default();
            v.push(input);
            self.medical_transcription_job_summaries = Some(v);
            self
        }
        /// <p>Provides a summary of information about each result.</p>
        pub fn set_medical_transcription_job_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MedicalTranscriptionJobSummary>>,
        ) -> Self {
            self.medical_transcription_job_summaries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListMedicalTranscriptionJobsOutput`](crate::output::ListMedicalTranscriptionJobsOutput).
        pub fn build(self) -> crate::output::ListMedicalTranscriptionJobsOutput {
            crate::output::ListMedicalTranscriptionJobsOutput {
                status: self.status,
                next_token: self.next_token,
                medical_transcription_job_summaries: self.medical_transcription_job_summaries,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListMedicalTranscriptionJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListMedicalTranscriptionJobsOutput`](crate::output::ListMedicalTranscriptionJobsOutput).
    pub fn builder() -> crate::output::list_medical_transcription_jobs_output::Builder {
        crate::output::list_medical_transcription_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLanguageModelsOutput {
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Provides information about the custom language models that match the criteria specified in your request.</p>
    #[doc(hidden)]
    pub models: std::option::Option<std::vec::Vec<crate::model::LanguageModel>>,
    _request_id: Option<String>,
}
impl ListLanguageModelsOutput {
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides information about the custom language models that match the criteria specified in your request.</p>
    pub fn models(&self) -> std::option::Option<&[crate::model::LanguageModel]> {
        self.models.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLanguageModelsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListLanguageModelsOutput`](crate::output::ListLanguageModelsOutput).
pub mod list_language_models_output {

    /// A builder for [`ListLanguageModelsOutput`](crate::output::ListLanguageModelsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) models: std::option::Option<std::vec::Vec<crate::model::LanguageModel>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `models`.
        ///
        /// To override the contents of this collection use [`set_models`](Self::set_models).
        ///
        /// <p>Provides information about the custom language models that match the criteria specified in your request.</p>
        pub fn models(mut self, input: crate::model::LanguageModel) -> Self {
            let mut v = self.models.unwrap_or_default();
            v.push(input);
            self.models = Some(v);
            self
        }
        /// <p>Provides information about the custom language models that match the criteria specified in your request.</p>
        pub fn set_models(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LanguageModel>>,
        ) -> Self {
            self.models = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListLanguageModelsOutput`](crate::output::ListLanguageModelsOutput).
        pub fn build(self) -> crate::output::ListLanguageModelsOutput {
            crate::output::ListLanguageModelsOutput {
                next_token: self.next_token,
                models: self.models,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListLanguageModelsOutput {
    /// Creates a new builder-style object to manufacture [`ListLanguageModelsOutput`](crate::output::ListLanguageModelsOutput).
    pub fn builder() -> crate::output::list_language_models_output::Builder {
        crate::output::list_language_models_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCallAnalyticsJobsOutput {
    /// <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::CallAnalyticsJobStatus>,
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Provides a summary of information about each result.</p>
    #[doc(hidden)]
    pub call_analytics_job_summaries:
        std::option::Option<std::vec::Vec<crate::model::CallAnalyticsJobSummary>>,
    _request_id: Option<String>,
}
impl ListCallAnalyticsJobsOutput {
    /// <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::CallAnalyticsJobStatus> {
        self.status.as_ref()
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides a summary of information about each result.</p>
    pub fn call_analytics_job_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::CallAnalyticsJobSummary]> {
        self.call_analytics_job_summaries.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCallAnalyticsJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListCallAnalyticsJobsOutput`](crate::output::ListCallAnalyticsJobsOutput).
pub mod list_call_analytics_jobs_output {

    /// A builder for [`ListCallAnalyticsJobsOutput`](crate::output::ListCallAnalyticsJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::CallAnalyticsJobStatus>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) call_analytics_job_summaries:
            std::option::Option<std::vec::Vec<crate::model::CallAnalyticsJobSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
        pub fn status(mut self, input: crate::model::CallAnalyticsJobStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CallAnalyticsJobStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `call_analytics_job_summaries`.
        ///
        /// To override the contents of this collection use [`set_call_analytics_job_summaries`](Self::set_call_analytics_job_summaries).
        ///
        /// <p>Provides a summary of information about each result.</p>
        pub fn call_analytics_job_summaries(
            mut self,
            input: crate::model::CallAnalyticsJobSummary,
        ) -> Self {
            let mut v = self.call_analytics_job_summaries.unwrap_or_default();
            v.push(input);
            self.call_analytics_job_summaries = Some(v);
            self
        }
        /// <p>Provides a summary of information about each result.</p>
        pub fn set_call_analytics_job_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CallAnalyticsJobSummary>>,
        ) -> Self {
            self.call_analytics_job_summaries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListCallAnalyticsJobsOutput`](crate::output::ListCallAnalyticsJobsOutput).
        pub fn build(self) -> crate::output::ListCallAnalyticsJobsOutput {
            crate::output::ListCallAnalyticsJobsOutput {
                status: self.status,
                next_token: self.next_token,
                call_analytics_job_summaries: self.call_analytics_job_summaries,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListCallAnalyticsJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListCallAnalyticsJobsOutput`](crate::output::ListCallAnalyticsJobsOutput).
    pub fn builder() -> crate::output::list_call_analytics_jobs_output::Builder {
        crate::output::list_call_analytics_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCallAnalyticsCategoriesOutput {
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Provides detailed information about your Call Analytics categories, including all the rules associated with each category.</p>
    #[doc(hidden)]
    pub categories: std::option::Option<std::vec::Vec<crate::model::CategoryProperties>>,
    _request_id: Option<String>,
}
impl ListCallAnalyticsCategoriesOutput {
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides detailed information about your Call Analytics categories, including all the rules associated with each category.</p>
    pub fn categories(&self) -> std::option::Option<&[crate::model::CategoryProperties]> {
        self.categories.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCallAnalyticsCategoriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListCallAnalyticsCategoriesOutput`](crate::output::ListCallAnalyticsCategoriesOutput).
pub mod list_call_analytics_categories_output {

    /// A builder for [`ListCallAnalyticsCategoriesOutput`](crate::output::ListCallAnalyticsCategoriesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) categories: std::option::Option<std::vec::Vec<crate::model::CategoryProperties>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `categories`.
        ///
        /// To override the contents of this collection use [`set_categories`](Self::set_categories).
        ///
        /// <p>Provides detailed information about your Call Analytics categories, including all the rules associated with each category.</p>
        pub fn categories(mut self, input: crate::model::CategoryProperties) -> Self {
            let mut v = self.categories.unwrap_or_default();
            v.push(input);
            self.categories = Some(v);
            self
        }
        /// <p>Provides detailed information about your Call Analytics categories, including all the rules associated with each category.</p>
        pub fn set_categories(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CategoryProperties>>,
        ) -> Self {
            self.categories = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListCallAnalyticsCategoriesOutput`](crate::output::ListCallAnalyticsCategoriesOutput).
        pub fn build(self) -> crate::output::ListCallAnalyticsCategoriesOutput {
            crate::output::ListCallAnalyticsCategoriesOutput {
                next_token: self.next_token,
                categories: self.categories,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListCallAnalyticsCategoriesOutput {
    /// Creates a new builder-style object to manufacture [`ListCallAnalyticsCategoriesOutput`](crate::output::ListCallAnalyticsCategoriesOutput).
    pub fn builder() -> crate::output::list_call_analytics_categories_output::Builder {
        crate::output::list_call_analytics_categories_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVocabularyFilterOutput {
    /// <p>The name of the custom vocabulary filter you requested information about.</p>
    #[doc(hidden)]
    pub vocabulary_filter_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::LanguageCode>,
    /// <p>The date and time the specified custom vocabulary filter was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Amazon S3 location where the custom vocabulary filter is stored; use this URI to view or download the custom vocabulary filter.</p>
    #[doc(hidden)]
    pub download_uri: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetVocabularyFilterOutput {
    /// <p>The name of the custom vocabulary filter you requested information about.</p>
    pub fn vocabulary_filter_name(&self) -> std::option::Option<&str> {
        self.vocabulary_filter_name.as_deref()
    }
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The date and time the specified custom vocabulary filter was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The Amazon S3 location where the custom vocabulary filter is stored; use this URI to view or download the custom vocabulary filter.</p>
    pub fn download_uri(&self) -> std::option::Option<&str> {
        self.download_uri.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetVocabularyFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetVocabularyFilterOutput`](crate::output::GetVocabularyFilterOutput).
pub mod get_vocabulary_filter_output {

    /// A builder for [`GetVocabularyFilterOutput`](crate::output::GetVocabularyFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vocabulary_filter_name: std::option::Option<std::string::String>,
        pub(crate) language_code: std::option::Option<crate::model::LanguageCode>,
        pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) download_uri: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the custom vocabulary filter you requested information about.</p>
        pub fn vocabulary_filter_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.vocabulary_filter_name = Some(input.into());
            self
        }
        /// <p>The name of the custom vocabulary filter you requested information about.</p>
        pub fn set_vocabulary_filter_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vocabulary_filter_name = input;
            self
        }
        /// <p>The language code you selected for your custom vocabulary filter.</p>
        pub fn language_code(mut self, input: crate::model::LanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom vocabulary filter.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The date and time the specified custom vocabulary filter was last modified.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modified_time = Some(input);
            self
        }
        /// <p>The date and time the specified custom vocabulary filter was last modified.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn set_last_modified_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modified_time = input;
            self
        }
        /// <p>The Amazon S3 location where the custom vocabulary filter is stored; use this URI to view or download the custom vocabulary filter.</p>
        pub fn download_uri(mut self, input: impl Into<std::string::String>) -> Self {
            self.download_uri = Some(input.into());
            self
        }
        /// <p>The Amazon S3 location where the custom vocabulary filter is stored; use this URI to view or download the custom vocabulary filter.</p>
        pub fn set_download_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.download_uri = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVocabularyFilterOutput`](crate::output::GetVocabularyFilterOutput).
        pub fn build(self) -> crate::output::GetVocabularyFilterOutput {
            crate::output::GetVocabularyFilterOutput {
                vocabulary_filter_name: self.vocabulary_filter_name,
                language_code: self.language_code,
                last_modified_time: self.last_modified_time,
                download_uri: self.download_uri,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetVocabularyFilterOutput {
    /// Creates a new builder-style object to manufacture [`GetVocabularyFilterOutput`](crate::output::GetVocabularyFilterOutput).
    pub fn builder() -> crate::output::get_vocabulary_filter_output::Builder {
        crate::output::get_vocabulary_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVocabularyOutput {
    /// <p>The name of the custom vocabulary you requested information about.</p>
    #[doc(hidden)]
    pub vocabulary_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom vocabulary.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::LanguageCode>,
    /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    #[doc(hidden)]
    pub vocabulary_state: std::option::Option<crate::model::VocabularyState>,
    /// <p>The date and time the specified custom vocabulary was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The S3 location where the custom vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
    #[doc(hidden)]
    pub download_uri: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetVocabularyOutput {
    /// <p>The name of the custom vocabulary you requested information about.</p>
    pub fn vocabulary_name(&self) -> std::option::Option<&str> {
        self.vocabulary_name.as_deref()
    }
    /// <p>The language code you selected for your custom vocabulary.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    pub fn vocabulary_state(&self) -> std::option::Option<&crate::model::VocabularyState> {
        self.vocabulary_state.as_ref()
    }
    /// <p>The date and time the specified custom vocabulary was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The S3 location where the custom vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
    pub fn download_uri(&self) -> std::option::Option<&str> {
        self.download_uri.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetVocabularyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetVocabularyOutput`](crate::output::GetVocabularyOutput).
pub mod get_vocabulary_output {

    /// A builder for [`GetVocabularyOutput`](crate::output::GetVocabularyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vocabulary_name: std::option::Option<std::string::String>,
        pub(crate) language_code: std::option::Option<crate::model::LanguageCode>,
        pub(crate) vocabulary_state: std::option::Option<crate::model::VocabularyState>,
        pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) failure_reason: std::option::Option<std::string::String>,
        pub(crate) download_uri: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the custom vocabulary you requested information about.</p>
        pub fn vocabulary_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.vocabulary_name = Some(input.into());
            self
        }
        /// <p>The name of the custom vocabulary you requested information about.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vocabulary_name = input;
            self
        }
        /// <p>The language code you selected for your custom vocabulary.</p>
        pub fn language_code(mut self, input: crate::model::LanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom vocabulary.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
        pub fn vocabulary_state(mut self, input: crate::model::VocabularyState) -> Self {
            self.vocabulary_state = Some(input);
            self
        }
        /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
        pub fn set_vocabulary_state(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.vocabulary_state = input;
            self
        }
        /// <p>The date and time the specified custom vocabulary was last modified.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modified_time = Some(input);
            self
        }
        /// <p>The date and time the specified custom vocabulary was last modified.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn set_last_modified_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modified_time = input;
            self
        }
        /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.failure_reason = Some(input.into());
            self
        }
        /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        pub fn set_failure_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failure_reason = input;
            self
        }
        /// <p>The S3 location where the custom vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
        pub fn download_uri(mut self, input: impl Into<std::string::String>) -> Self {
            self.download_uri = Some(input.into());
            self
        }
        /// <p>The S3 location where the custom vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
        pub fn set_download_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.download_uri = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVocabularyOutput`](crate::output::GetVocabularyOutput).
        pub fn build(self) -> crate::output::GetVocabularyOutput {
            crate::output::GetVocabularyOutput {
                vocabulary_name: self.vocabulary_name,
                language_code: self.language_code,
                vocabulary_state: self.vocabulary_state,
                last_modified_time: self.last_modified_time,
                failure_reason: self.failure_reason,
                download_uri: self.download_uri,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetVocabularyOutput {
    /// Creates a new builder-style object to manufacture [`GetVocabularyOutput`](crate::output::GetVocabularyOutput).
    pub fn builder() -> crate::output::get_vocabulary_output::Builder {
        crate::output::get_vocabulary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTranscriptionJobOutput {
    /// <p>Provides detailed information about the specified transcription job, including job status and, if applicable, failure reason.</p>
    #[doc(hidden)]
    pub transcription_job: std::option::Option<crate::model::TranscriptionJob>,
    _request_id: Option<String>,
}
impl GetTranscriptionJobOutput {
    /// <p>Provides detailed information about the specified transcription job, including job status and, if applicable, failure reason.</p>
    pub fn transcription_job(&self) -> std::option::Option<&crate::model::TranscriptionJob> {
        self.transcription_job.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetTranscriptionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetTranscriptionJobOutput`](crate::output::GetTranscriptionJobOutput).
pub mod get_transcription_job_output {

    /// A builder for [`GetTranscriptionJobOutput`](crate::output::GetTranscriptionJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transcription_job: std::option::Option<crate::model::TranscriptionJob>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides detailed information about the specified transcription job, including job status and, if applicable, failure reason.</p>
        pub fn transcription_job(mut self, input: crate::model::TranscriptionJob) -> Self {
            self.transcription_job = Some(input);
            self
        }
        /// <p>Provides detailed information about the specified transcription job, including job status and, if applicable, failure reason.</p>
        pub fn set_transcription_job(
            mut self,
            input: std::option::Option<crate::model::TranscriptionJob>,
        ) -> Self {
            self.transcription_job = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTranscriptionJobOutput`](crate::output::GetTranscriptionJobOutput).
        pub fn build(self) -> crate::output::GetTranscriptionJobOutput {
            crate::output::GetTranscriptionJobOutput {
                transcription_job: self.transcription_job,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetTranscriptionJobOutput {
    /// Creates a new builder-style object to manufacture [`GetTranscriptionJobOutput`](crate::output::GetTranscriptionJobOutput).
    pub fn builder() -> crate::output::get_transcription_job_output::Builder {
        crate::output::get_transcription_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMedicalVocabularyOutput {
    /// <p>The name of the custom medical vocabulary you requested information about.</p>
    #[doc(hidden)]
    pub vocabulary_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::LanguageCode>,
    /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
    #[doc(hidden)]
    pub vocabulary_state: std::option::Option<crate::model::VocabularyState>,
    /// <p>The date and time the specified custom medical vocabulary was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom medical vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The S3 location where the specified custom medical vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
    #[doc(hidden)]
    pub download_uri: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetMedicalVocabularyOutput {
    /// <p>The name of the custom medical vocabulary you requested information about.</p>
    pub fn vocabulary_name(&self) -> std::option::Option<&str> {
        self.vocabulary_name.as_deref()
    }
    /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
    pub fn vocabulary_state(&self) -> std::option::Option<&crate::model::VocabularyState> {
        self.vocabulary_state.as_ref()
    }
    /// <p>The date and time the specified custom medical vocabulary was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom medical vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The S3 location where the specified custom medical vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
    pub fn download_uri(&self) -> std::option::Option<&str> {
        self.download_uri.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetMedicalVocabularyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMedicalVocabularyOutput`](crate::output::GetMedicalVocabularyOutput).
pub mod get_medical_vocabulary_output {

    /// A builder for [`GetMedicalVocabularyOutput`](crate::output::GetMedicalVocabularyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vocabulary_name: std::option::Option<std::string::String>,
        pub(crate) language_code: std::option::Option<crate::model::LanguageCode>,
        pub(crate) vocabulary_state: std::option::Option<crate::model::VocabularyState>,
        pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) failure_reason: std::option::Option<std::string::String>,
        pub(crate) download_uri: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the custom medical vocabulary you requested information about.</p>
        pub fn vocabulary_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.vocabulary_name = Some(input.into());
            self
        }
        /// <p>The name of the custom medical vocabulary you requested information about.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vocabulary_name = input;
            self
        }
        /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
        pub fn language_code(mut self, input: crate::model::LanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
        pub fn vocabulary_state(mut self, input: crate::model::VocabularyState) -> Self {
            self.vocabulary_state = Some(input);
            self
        }
        /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
        pub fn set_vocabulary_state(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.vocabulary_state = input;
            self
        }
        /// <p>The date and time the specified custom medical vocabulary was last modified.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modified_time = Some(input);
            self
        }
        /// <p>The date and time the specified custom medical vocabulary was last modified.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn set_last_modified_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modified_time = input;
            self
        }
        /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom medical vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.failure_reason = Some(input.into());
            self
        }
        /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom medical vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        pub fn set_failure_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failure_reason = input;
            self
        }
        /// <p>The S3 location where the specified custom medical vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
        pub fn download_uri(mut self, input: impl Into<std::string::String>) -> Self {
            self.download_uri = Some(input.into());
            self
        }
        /// <p>The S3 location where the specified custom medical vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
        pub fn set_download_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.download_uri = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMedicalVocabularyOutput`](crate::output::GetMedicalVocabularyOutput).
        pub fn build(self) -> crate::output::GetMedicalVocabularyOutput {
            crate::output::GetMedicalVocabularyOutput {
                vocabulary_name: self.vocabulary_name,
                language_code: self.language_code,
                vocabulary_state: self.vocabulary_state,
                last_modified_time: self.last_modified_time,
                failure_reason: self.failure_reason,
                download_uri: self.download_uri,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMedicalVocabularyOutput {
    /// Creates a new builder-style object to manufacture [`GetMedicalVocabularyOutput`](crate::output::GetMedicalVocabularyOutput).
    pub fn builder() -> crate::output::get_medical_vocabulary_output::Builder {
        crate::output::get_medical_vocabulary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMedicalTranscriptionJobOutput {
    /// <p>Provides detailed information about the specified medical transcription job, including job status and, if applicable, failure reason.</p>
    #[doc(hidden)]
    pub medical_transcription_job: std::option::Option<crate::model::MedicalTranscriptionJob>,
    _request_id: Option<String>,
}
impl GetMedicalTranscriptionJobOutput {
    /// <p>Provides detailed information about the specified medical transcription job, including job status and, if applicable, failure reason.</p>
    pub fn medical_transcription_job(
        &self,
    ) -> std::option::Option<&crate::model::MedicalTranscriptionJob> {
        self.medical_transcription_job.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMedicalTranscriptionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMedicalTranscriptionJobOutput`](crate::output::GetMedicalTranscriptionJobOutput).
pub mod get_medical_transcription_job_output {

    /// A builder for [`GetMedicalTranscriptionJobOutput`](crate::output::GetMedicalTranscriptionJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) medical_transcription_job:
            std::option::Option<crate::model::MedicalTranscriptionJob>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides detailed information about the specified medical transcription job, including job status and, if applicable, failure reason.</p>
        pub fn medical_transcription_job(
            mut self,
            input: crate::model::MedicalTranscriptionJob,
        ) -> Self {
            self.medical_transcription_job = Some(input);
            self
        }
        /// <p>Provides detailed information about the specified medical transcription job, including job status and, if applicable, failure reason.</p>
        pub fn set_medical_transcription_job(
            mut self,
            input: std::option::Option<crate::model::MedicalTranscriptionJob>,
        ) -> Self {
            self.medical_transcription_job = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMedicalTranscriptionJobOutput`](crate::output::GetMedicalTranscriptionJobOutput).
        pub fn build(self) -> crate::output::GetMedicalTranscriptionJobOutput {
            crate::output::GetMedicalTranscriptionJobOutput {
                medical_transcription_job: self.medical_transcription_job,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMedicalTranscriptionJobOutput {
    /// Creates a new builder-style object to manufacture [`GetMedicalTranscriptionJobOutput`](crate::output::GetMedicalTranscriptionJobOutput).
    pub fn builder() -> crate::output::get_medical_transcription_job_output::Builder {
        crate::output::get_medical_transcription_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCallAnalyticsJobOutput {
    /// <p>Provides detailed information about the specified Call Analytics job, including job status and, if applicable, failure reason.</p>
    #[doc(hidden)]
    pub call_analytics_job: std::option::Option<crate::model::CallAnalyticsJob>,
    _request_id: Option<String>,
}
impl GetCallAnalyticsJobOutput {
    /// <p>Provides detailed information about the specified Call Analytics job, including job status and, if applicable, failure reason.</p>
    pub fn call_analytics_job(&self) -> std::option::Option<&crate::model::CallAnalyticsJob> {
        self.call_analytics_job.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetCallAnalyticsJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetCallAnalyticsJobOutput`](crate::output::GetCallAnalyticsJobOutput).
pub mod get_call_analytics_job_output {

    /// A builder for [`GetCallAnalyticsJobOutput`](crate::output::GetCallAnalyticsJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) call_analytics_job: std::option::Option<crate::model::CallAnalyticsJob>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides detailed information about the specified Call Analytics job, including job status and, if applicable, failure reason.</p>
        pub fn call_analytics_job(mut self, input: crate::model::CallAnalyticsJob) -> Self {
            self.call_analytics_job = Some(input);
            self
        }
        /// <p>Provides detailed information about the specified Call Analytics job, including job status and, if applicable, failure reason.</p>
        pub fn set_call_analytics_job(
            mut self,
            input: std::option::Option<crate::model::CallAnalyticsJob>,
        ) -> Self {
            self.call_analytics_job = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCallAnalyticsJobOutput`](crate::output::GetCallAnalyticsJobOutput).
        pub fn build(self) -> crate::output::GetCallAnalyticsJobOutput {
            crate::output::GetCallAnalyticsJobOutput {
                call_analytics_job: self.call_analytics_job,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetCallAnalyticsJobOutput {
    /// Creates a new builder-style object to manufacture [`GetCallAnalyticsJobOutput`](crate::output::GetCallAnalyticsJobOutput).
    pub fn builder() -> crate::output::get_call_analytics_job_output::Builder {
        crate::output::get_call_analytics_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCallAnalyticsCategoryOutput {
    /// <p>Provides you with the properties of the Call Analytics category you specified in your <code>GetCallAnalyticsCategory</code> request.</p>
    #[doc(hidden)]
    pub category_properties: std::option::Option<crate::model::CategoryProperties>,
    _request_id: Option<String>,
}
impl GetCallAnalyticsCategoryOutput {
    /// <p>Provides you with the properties of the Call Analytics category you specified in your <code>GetCallAnalyticsCategory</code> request.</p>
    pub fn category_properties(&self) -> std::option::Option<&crate::model::CategoryProperties> {
        self.category_properties.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetCallAnalyticsCategoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetCallAnalyticsCategoryOutput`](crate::output::GetCallAnalyticsCategoryOutput).
pub mod get_call_analytics_category_output {

    /// A builder for [`GetCallAnalyticsCategoryOutput`](crate::output::GetCallAnalyticsCategoryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) category_properties: std::option::Option<crate::model::CategoryProperties>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides you with the properties of the Call Analytics category you specified in your <code>GetCallAnalyticsCategory</code> request.</p>
        pub fn category_properties(mut self, input: crate::model::CategoryProperties) -> Self {
            self.category_properties = Some(input);
            self
        }
        /// <p>Provides you with the properties of the Call Analytics category you specified in your <code>GetCallAnalyticsCategory</code> request.</p>
        pub fn set_category_properties(
            mut self,
            input: std::option::Option<crate::model::CategoryProperties>,
        ) -> Self {
            self.category_properties = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCallAnalyticsCategoryOutput`](crate::output::GetCallAnalyticsCategoryOutput).
        pub fn build(self) -> crate::output::GetCallAnalyticsCategoryOutput {
            crate::output::GetCallAnalyticsCategoryOutput {
                category_properties: self.category_properties,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetCallAnalyticsCategoryOutput {
    /// Creates a new builder-style object to manufacture [`GetCallAnalyticsCategoryOutput`](crate::output::GetCallAnalyticsCategoryOutput).
    pub fn builder() -> crate::output::get_call_analytics_category_output::Builder {
        crate::output::get_call_analytics_category_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLanguageModelOutput {
    /// <p>Provides information about the specified custom language model.</p>
    /// <p>This parameter also shows if the base language model you used to create your custom language model has been updated. If Amazon Transcribe has updated the base model, you can create a new custom language model using the updated base model.</p>
    /// <p>If you tried to create a new custom language model and the request wasn't successful, you can use this <code>DescribeLanguageModel</code> to help identify the reason for this failure.</p>
    #[doc(hidden)]
    pub language_model: std::option::Option<crate::model::LanguageModel>,
    _request_id: Option<String>,
}
impl DescribeLanguageModelOutput {
    /// <p>Provides information about the specified custom language model.</p>
    /// <p>This parameter also shows if the base language model you used to create your custom language model has been updated. If Amazon Transcribe has updated the base model, you can create a new custom language model using the updated base model.</p>
    /// <p>If you tried to create a new custom language model and the request wasn't successful, you can use this <code>DescribeLanguageModel</code> to help identify the reason for this failure.</p>
    pub fn language_model(&self) -> std::option::Option<&crate::model::LanguageModel> {
        self.language_model.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeLanguageModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLanguageModelOutput`](crate::output::DescribeLanguageModelOutput).
pub mod describe_language_model_output {

    /// A builder for [`DescribeLanguageModelOutput`](crate::output::DescribeLanguageModelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) language_model: std::option::Option<crate::model::LanguageModel>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides information about the specified custom language model.</p>
        /// <p>This parameter also shows if the base language model you used to create your custom language model has been updated. If Amazon Transcribe has updated the base model, you can create a new custom language model using the updated base model.</p>
        /// <p>If you tried to create a new custom language model and the request wasn't successful, you can use this <code>DescribeLanguageModel</code> to help identify the reason for this failure.</p>
        pub fn language_model(mut self, input: crate::model::LanguageModel) -> Self {
            self.language_model = Some(input);
            self
        }
        /// <p>Provides information about the specified custom language model.</p>
        /// <p>This parameter also shows if the base language model you used to create your custom language model has been updated. If Amazon Transcribe has updated the base model, you can create a new custom language model using the updated base model.</p>
        /// <p>If you tried to create a new custom language model and the request wasn't successful, you can use this <code>DescribeLanguageModel</code> to help identify the reason for this failure.</p>
        pub fn set_language_model(
            mut self,
            input: std::option::Option<crate::model::LanguageModel>,
        ) -> Self {
            self.language_model = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLanguageModelOutput`](crate::output::DescribeLanguageModelOutput).
        pub fn build(self) -> crate::output::DescribeLanguageModelOutput {
            crate::output::DescribeLanguageModelOutput {
                language_model: self.language_model,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLanguageModelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLanguageModelOutput`](crate::output::DescribeLanguageModelOutput).
    pub fn builder() -> crate::output::describe_language_model_output::Builder {
        crate::output::describe_language_model_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVocabularyFilterOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVocabularyFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVocabularyFilterOutput`](crate::output::DeleteVocabularyFilterOutput).
pub mod delete_vocabulary_filter_output {

    /// A builder for [`DeleteVocabularyFilterOutput`](crate::output::DeleteVocabularyFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVocabularyFilterOutput`](crate::output::DeleteVocabularyFilterOutput).
        pub fn build(self) -> crate::output::DeleteVocabularyFilterOutput {
            crate::output::DeleteVocabularyFilterOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVocabularyFilterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVocabularyFilterOutput`](crate::output::DeleteVocabularyFilterOutput).
    pub fn builder() -> crate::output::delete_vocabulary_filter_output::Builder {
        crate::output::delete_vocabulary_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVocabularyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVocabularyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVocabularyOutput`](crate::output::DeleteVocabularyOutput).
pub mod delete_vocabulary_output {

    /// A builder for [`DeleteVocabularyOutput`](crate::output::DeleteVocabularyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVocabularyOutput`](crate::output::DeleteVocabularyOutput).
        pub fn build(self) -> crate::output::DeleteVocabularyOutput {
            crate::output::DeleteVocabularyOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVocabularyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVocabularyOutput`](crate::output::DeleteVocabularyOutput).
    pub fn builder() -> crate::output::delete_vocabulary_output::Builder {
        crate::output::delete_vocabulary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTranscriptionJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteTranscriptionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTranscriptionJobOutput`](crate::output::DeleteTranscriptionJobOutput).
pub mod delete_transcription_job_output {

    /// A builder for [`DeleteTranscriptionJobOutput`](crate::output::DeleteTranscriptionJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTranscriptionJobOutput`](crate::output::DeleteTranscriptionJobOutput).
        pub fn build(self) -> crate::output::DeleteTranscriptionJobOutput {
            crate::output::DeleteTranscriptionJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTranscriptionJobOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTranscriptionJobOutput`](crate::output::DeleteTranscriptionJobOutput).
    pub fn builder() -> crate::output::delete_transcription_job_output::Builder {
        crate::output::delete_transcription_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMedicalVocabularyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteMedicalVocabularyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteMedicalVocabularyOutput`](crate::output::DeleteMedicalVocabularyOutput).
pub mod delete_medical_vocabulary_output {

    /// A builder for [`DeleteMedicalVocabularyOutput`](crate::output::DeleteMedicalVocabularyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteMedicalVocabularyOutput`](crate::output::DeleteMedicalVocabularyOutput).
        pub fn build(self) -> crate::output::DeleteMedicalVocabularyOutput {
            crate::output::DeleteMedicalVocabularyOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteMedicalVocabularyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMedicalVocabularyOutput`](crate::output::DeleteMedicalVocabularyOutput).
    pub fn builder() -> crate::output::delete_medical_vocabulary_output::Builder {
        crate::output::delete_medical_vocabulary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMedicalTranscriptionJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteMedicalTranscriptionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteMedicalTranscriptionJobOutput`](crate::output::DeleteMedicalTranscriptionJobOutput).
pub mod delete_medical_transcription_job_output {

    /// A builder for [`DeleteMedicalTranscriptionJobOutput`](crate::output::DeleteMedicalTranscriptionJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteMedicalTranscriptionJobOutput`](crate::output::DeleteMedicalTranscriptionJobOutput).
        pub fn build(self) -> crate::output::DeleteMedicalTranscriptionJobOutput {
            crate::output::DeleteMedicalTranscriptionJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteMedicalTranscriptionJobOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMedicalTranscriptionJobOutput`](crate::output::DeleteMedicalTranscriptionJobOutput).
    pub fn builder() -> crate::output::delete_medical_transcription_job_output::Builder {
        crate::output::delete_medical_transcription_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLanguageModelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteLanguageModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLanguageModelOutput`](crate::output::DeleteLanguageModelOutput).
pub mod delete_language_model_output {

    /// A builder for [`DeleteLanguageModelOutput`](crate::output::DeleteLanguageModelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLanguageModelOutput`](crate::output::DeleteLanguageModelOutput).
        pub fn build(self) -> crate::output::DeleteLanguageModelOutput {
            crate::output::DeleteLanguageModelOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLanguageModelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLanguageModelOutput`](crate::output::DeleteLanguageModelOutput).
    pub fn builder() -> crate::output::delete_language_model_output::Builder {
        crate::output::delete_language_model_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCallAnalyticsJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteCallAnalyticsJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteCallAnalyticsJobOutput`](crate::output::DeleteCallAnalyticsJobOutput).
pub mod delete_call_analytics_job_output {

    /// A builder for [`DeleteCallAnalyticsJobOutput`](crate::output::DeleteCallAnalyticsJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCallAnalyticsJobOutput`](crate::output::DeleteCallAnalyticsJobOutput).
        pub fn build(self) -> crate::output::DeleteCallAnalyticsJobOutput {
            crate::output::DeleteCallAnalyticsJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteCallAnalyticsJobOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCallAnalyticsJobOutput`](crate::output::DeleteCallAnalyticsJobOutput).
    pub fn builder() -> crate::output::delete_call_analytics_job_output::Builder {
        crate::output::delete_call_analytics_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCallAnalyticsCategoryOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteCallAnalyticsCategoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteCallAnalyticsCategoryOutput`](crate::output::DeleteCallAnalyticsCategoryOutput).
pub mod delete_call_analytics_category_output {

    /// A builder for [`DeleteCallAnalyticsCategoryOutput`](crate::output::DeleteCallAnalyticsCategoryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCallAnalyticsCategoryOutput`](crate::output::DeleteCallAnalyticsCategoryOutput).
        pub fn build(self) -> crate::output::DeleteCallAnalyticsCategoryOutput {
            crate::output::DeleteCallAnalyticsCategoryOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteCallAnalyticsCategoryOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCallAnalyticsCategoryOutput`](crate::output::DeleteCallAnalyticsCategoryOutput).
    pub fn builder() -> crate::output::delete_call_analytics_category_output::Builder {
        crate::output::delete_call_analytics_category_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVocabularyFilterOutput {
    /// <p>The name you chose for your custom vocabulary filter.</p>
    #[doc(hidden)]
    pub vocabulary_filter_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::LanguageCode>,
    /// <p>The date and time you created your custom vocabulary filter.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateVocabularyFilterOutput {
    /// <p>The name you chose for your custom vocabulary filter.</p>
    pub fn vocabulary_filter_name(&self) -> std::option::Option<&str> {
        self.vocabulary_filter_name.as_deref()
    }
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The date and time you created your custom vocabulary filter.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVocabularyFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVocabularyFilterOutput`](crate::output::CreateVocabularyFilterOutput).
pub mod create_vocabulary_filter_output {

    /// A builder for [`CreateVocabularyFilterOutput`](crate::output::CreateVocabularyFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vocabulary_filter_name: std::option::Option<std::string::String>,
        pub(crate) language_code: std::option::Option<crate::model::LanguageCode>,
        pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name you chose for your custom vocabulary filter.</p>
        pub fn vocabulary_filter_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.vocabulary_filter_name = Some(input.into());
            self
        }
        /// <p>The name you chose for your custom vocabulary filter.</p>
        pub fn set_vocabulary_filter_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vocabulary_filter_name = input;
            self
        }
        /// <p>The language code you selected for your custom vocabulary filter.</p>
        pub fn language_code(mut self, input: crate::model::LanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom vocabulary filter.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The date and time you created your custom vocabulary filter.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modified_time = Some(input);
            self
        }
        /// <p>The date and time you created your custom vocabulary filter.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn set_last_modified_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modified_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVocabularyFilterOutput`](crate::output::CreateVocabularyFilterOutput).
        pub fn build(self) -> crate::output::CreateVocabularyFilterOutput {
            crate::output::CreateVocabularyFilterOutput {
                vocabulary_filter_name: self.vocabulary_filter_name,
                language_code: self.language_code,
                last_modified_time: self.last_modified_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVocabularyFilterOutput {
    /// Creates a new builder-style object to manufacture [`CreateVocabularyFilterOutput`](crate::output::CreateVocabularyFilterOutput).
    pub fn builder() -> crate::output::create_vocabulary_filter_output::Builder {
        crate::output::create_vocabulary_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVocabularyOutput {
    /// <p>The name you chose for your custom vocabulary.</p>
    #[doc(hidden)]
    pub vocabulary_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom vocabulary.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::LanguageCode>,
    /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    #[doc(hidden)]
    pub vocabulary_state: std::option::Option<crate::model::VocabularyState>,
    /// <p>The date and time you created your custom vocabulary.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateVocabularyOutput {
    /// <p>The name you chose for your custom vocabulary.</p>
    pub fn vocabulary_name(&self) -> std::option::Option<&str> {
        self.vocabulary_name.as_deref()
    }
    /// <p>The language code you selected for your custom vocabulary.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    pub fn vocabulary_state(&self) -> std::option::Option<&crate::model::VocabularyState> {
        self.vocabulary_state.as_ref()
    }
    /// <p>The date and time you created your custom vocabulary.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateVocabularyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVocabularyOutput`](crate::output::CreateVocabularyOutput).
pub mod create_vocabulary_output {

    /// A builder for [`CreateVocabularyOutput`](crate::output::CreateVocabularyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vocabulary_name: std::option::Option<std::string::String>,
        pub(crate) language_code: std::option::Option<crate::model::LanguageCode>,
        pub(crate) vocabulary_state: std::option::Option<crate::model::VocabularyState>,
        pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) failure_reason: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name you chose for your custom vocabulary.</p>
        pub fn vocabulary_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.vocabulary_name = Some(input.into());
            self
        }
        /// <p>The name you chose for your custom vocabulary.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vocabulary_name = input;
            self
        }
        /// <p>The language code you selected for your custom vocabulary.</p>
        pub fn language_code(mut self, input: crate::model::LanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom vocabulary.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
        pub fn vocabulary_state(mut self, input: crate::model::VocabularyState) -> Self {
            self.vocabulary_state = Some(input);
            self
        }
        /// <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
        pub fn set_vocabulary_state(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.vocabulary_state = input;
            self
        }
        /// <p>The date and time you created your custom vocabulary.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modified_time = Some(input);
            self
        }
        /// <p>The date and time you created your custom vocabulary.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn set_last_modified_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modified_time = input;
            self
        }
        /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.failure_reason = Some(input.into());
            self
        }
        /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        pub fn set_failure_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failure_reason = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVocabularyOutput`](crate::output::CreateVocabularyOutput).
        pub fn build(self) -> crate::output::CreateVocabularyOutput {
            crate::output::CreateVocabularyOutput {
                vocabulary_name: self.vocabulary_name,
                language_code: self.language_code,
                vocabulary_state: self.vocabulary_state,
                last_modified_time: self.last_modified_time,
                failure_reason: self.failure_reason,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVocabularyOutput {
    /// Creates a new builder-style object to manufacture [`CreateVocabularyOutput`](crate::output::CreateVocabularyOutput).
    pub fn builder() -> crate::output::create_vocabulary_output::Builder {
        crate::output::create_vocabulary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMedicalVocabularyOutput {
    /// <p>The name you chose for your custom medical vocabulary.</p>
    #[doc(hidden)]
    pub vocabulary_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::LanguageCode>,
    /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
    #[doc(hidden)]
    pub vocabulary_state: std::option::Option<crate::model::VocabularyState>,
    /// <p>The date and time you created your custom medical vocabulary.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the medical transcription job request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateMedicalVocabularyOutput {
    /// <p>The name you chose for your custom medical vocabulary.</p>
    pub fn vocabulary_name(&self) -> std::option::Option<&str> {
        self.vocabulary_name.as_deref()
    }
    /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
    pub fn vocabulary_state(&self) -> std::option::Option<&crate::model::VocabularyState> {
        self.vocabulary_state.as_ref()
    }
    /// <p>The date and time you created your custom medical vocabulary.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the medical transcription job request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateMedicalVocabularyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateMedicalVocabularyOutput`](crate::output::CreateMedicalVocabularyOutput).
pub mod create_medical_vocabulary_output {

    /// A builder for [`CreateMedicalVocabularyOutput`](crate::output::CreateMedicalVocabularyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vocabulary_name: std::option::Option<std::string::String>,
        pub(crate) language_code: std::option::Option<crate::model::LanguageCode>,
        pub(crate) vocabulary_state: std::option::Option<crate::model::VocabularyState>,
        pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) failure_reason: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name you chose for your custom medical vocabulary.</p>
        pub fn vocabulary_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.vocabulary_name = Some(input.into());
            self
        }
        /// <p>The name you chose for your custom medical vocabulary.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vocabulary_name = input;
            self
        }
        /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
        pub fn language_code(mut self, input: crate::model::LanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
        pub fn vocabulary_state(mut self, input: crate::model::VocabularyState) -> Self {
            self.vocabulary_state = Some(input);
            self
        }
        /// <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
        pub fn set_vocabulary_state(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.vocabulary_state = input;
            self
        }
        /// <p>The date and time you created your custom medical vocabulary.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_modified_time = Some(input);
            self
        }
        /// <p>The date and time you created your custom medical vocabulary.</p>
        /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
        pub fn set_last_modified_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_modified_time = input;
            self
        }
        /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the medical transcription job request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.failure_reason = Some(input.into());
            self
        }
        /// <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the medical transcription job request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        pub fn set_failure_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failure_reason = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateMedicalVocabularyOutput`](crate::output::CreateMedicalVocabularyOutput).
        pub fn build(self) -> crate::output::CreateMedicalVocabularyOutput {
            crate::output::CreateMedicalVocabularyOutput {
                vocabulary_name: self.vocabulary_name,
                language_code: self.language_code,
                vocabulary_state: self.vocabulary_state,
                last_modified_time: self.last_modified_time,
                failure_reason: self.failure_reason,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateMedicalVocabularyOutput {
    /// Creates a new builder-style object to manufacture [`CreateMedicalVocabularyOutput`](crate::output::CreateMedicalVocabularyOutput).
    pub fn builder() -> crate::output::create_medical_vocabulary_output::Builder {
        crate::output::create_medical_vocabulary_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLanguageModelOutput {
    /// <p>The language code you selected for your custom language model.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::model::ClmLanguageCode>,
    /// <p>The Amazon Transcribe standard language model, or base model, you specified when creating your custom language model.</p>
    #[doc(hidden)]
    pub base_model_name: std::option::Option<crate::model::BaseModelName>,
    /// <p>The name of your custom language model.</p>
    #[doc(hidden)]
    pub model_name: std::option::Option<std::string::String>,
    /// <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3 locations you provided for your training (<code>S3Uri</code>) and tuning (<code>TuningDataS3Uri</code>) data.</p>
    #[doc(hidden)]
    pub input_data_config: std::option::Option<crate::model::InputDataConfig>,
    /// <p>The status of your custom language model. When the status displays as <code>COMPLETED</code>, your model is ready to use.</p>
    #[doc(hidden)]
    pub model_status: std::option::Option<crate::model::ModelStatus>,
    _request_id: Option<String>,
}
impl CreateLanguageModelOutput {
    /// <p>The language code you selected for your custom language model.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::model::ClmLanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The Amazon Transcribe standard language model, or base model, you specified when creating your custom language model.</p>
    pub fn base_model_name(&self) -> std::option::Option<&crate::model::BaseModelName> {
        self.base_model_name.as_ref()
    }
    /// <p>The name of your custom language model.</p>
    pub fn model_name(&self) -> std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3 locations you provided for your training (<code>S3Uri</code>) and tuning (<code>TuningDataS3Uri</code>) data.</p>
    pub fn input_data_config(&self) -> std::option::Option<&crate::model::InputDataConfig> {
        self.input_data_config.as_ref()
    }
    /// <p>The status of your custom language model. When the status displays as <code>COMPLETED</code>, your model is ready to use.</p>
    pub fn model_status(&self) -> std::option::Option<&crate::model::ModelStatus> {
        self.model_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLanguageModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLanguageModelOutput`](crate::output::CreateLanguageModelOutput).
pub mod create_language_model_output {

    /// A builder for [`CreateLanguageModelOutput`](crate::output::CreateLanguageModelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) language_code: std::option::Option<crate::model::ClmLanguageCode>,
        pub(crate) base_model_name: std::option::Option<crate::model::BaseModelName>,
        pub(crate) model_name: std::option::Option<std::string::String>,
        pub(crate) input_data_config: std::option::Option<crate::model::InputDataConfig>,
        pub(crate) model_status: std::option::Option<crate::model::ModelStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The language code you selected for your custom language model.</p>
        pub fn language_code(mut self, input: crate::model::ClmLanguageCode) -> Self {
            self.language_code = Some(input);
            self
        }
        /// <p>The language code you selected for your custom language model.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::ClmLanguageCode>,
        ) -> Self {
            self.language_code = input;
            self
        }
        /// <p>The Amazon Transcribe standard language model, or base model, you specified when creating your custom language model.</p>
        pub fn base_model_name(mut self, input: crate::model::BaseModelName) -> Self {
            self.base_model_name = Some(input);
            self
        }
        /// <p>The Amazon Transcribe standard language model, or base model, you specified when creating your custom language model.</p>
        pub fn set_base_model_name(
            mut self,
            input: std::option::Option<crate::model::BaseModelName>,
        ) -> Self {
            self.base_model_name = input;
            self
        }
        /// <p>The name of your custom language model.</p>
        pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.model_name = Some(input.into());
            self
        }
        /// <p>The name of your custom language model.</p>
        pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.model_name = input;
            self
        }
        /// <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3 locations you provided for your training (<code>S3Uri</code>) and tuning (<code>TuningDataS3Uri</code>) data.</p>
        pub fn input_data_config(mut self, input: crate::model::InputDataConfig) -> Self {
            self.input_data_config = Some(input);
            self
        }
        /// <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3 locations you provided for your training (<code>S3Uri</code>) and tuning (<code>TuningDataS3Uri</code>) data.</p>
        pub fn set_input_data_config(
            mut self,
            input: std::option::Option<crate::model::InputDataConfig>,
        ) -> Self {
            self.input_data_config = input;
            self
        }
        /// <p>The status of your custom language model. When the status displays as <code>COMPLETED</code>, your model is ready to use.</p>
        pub fn model_status(mut self, input: crate::model::ModelStatus) -> Self {
            self.model_status = Some(input);
            self
        }
        /// <p>The status of your custom language model. When the status displays as <code>COMPLETED</code>, your model is ready to use.</p>
        pub fn set_model_status(
            mut self,
            input: std::option::Option<crate::model::ModelStatus>,
        ) -> Self {
            self.model_status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLanguageModelOutput`](crate::output::CreateLanguageModelOutput).
        pub fn build(self) -> crate::output::CreateLanguageModelOutput {
            crate::output::CreateLanguageModelOutput {
                language_code: self.language_code,
                base_model_name: self.base_model_name,
                model_name: self.model_name,
                input_data_config: self.input_data_config,
                model_status: self.model_status,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLanguageModelOutput {
    /// Creates a new builder-style object to manufacture [`CreateLanguageModelOutput`](crate::output::CreateLanguageModelOutput).
    pub fn builder() -> crate::output::create_language_model_output::Builder {
        crate::output::create_language_model_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCallAnalyticsCategoryOutput {
    /// <p>Provides you with the properties of your new category, including its associated rules.</p>
    #[doc(hidden)]
    pub category_properties: std::option::Option<crate::model::CategoryProperties>,
    _request_id: Option<String>,
}
impl CreateCallAnalyticsCategoryOutput {
    /// <p>Provides you with the properties of your new category, including its associated rules.</p>
    pub fn category_properties(&self) -> std::option::Option<&crate::model::CategoryProperties> {
        self.category_properties.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateCallAnalyticsCategoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateCallAnalyticsCategoryOutput`](crate::output::CreateCallAnalyticsCategoryOutput).
pub mod create_call_analytics_category_output {

    /// A builder for [`CreateCallAnalyticsCategoryOutput`](crate::output::CreateCallAnalyticsCategoryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) category_properties: std::option::Option<crate::model::CategoryProperties>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides you with the properties of your new category, including its associated rules.</p>
        pub fn category_properties(mut self, input: crate::model::CategoryProperties) -> Self {
            self.category_properties = Some(input);
            self
        }
        /// <p>Provides you with the properties of your new category, including its associated rules.</p>
        pub fn set_category_properties(
            mut self,
            input: std::option::Option<crate::model::CategoryProperties>,
        ) -> Self {
            self.category_properties = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCallAnalyticsCategoryOutput`](crate::output::CreateCallAnalyticsCategoryOutput).
        pub fn build(self) -> crate::output::CreateCallAnalyticsCategoryOutput {
            crate::output::CreateCallAnalyticsCategoryOutput {
                category_properties: self.category_properties,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateCallAnalyticsCategoryOutput {
    /// Creates a new builder-style object to manufacture [`CreateCallAnalyticsCategoryOutput`](crate::output::CreateCallAnalyticsCategoryOutput).
    pub fn builder() -> crate::output::create_call_analytics_category_output::Builder {
        crate::output::create_call_analytics_category_output::Builder::default()
    }
}
