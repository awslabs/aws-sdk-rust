// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_call_analytics_categories_output_next_token(
    input: &crate::operation::list_call_analytics_categories::ListCallAnalyticsCategoriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_call_analytics_jobs_output_next_token(
    input: &crate::operation::list_call_analytics_jobs::ListCallAnalyticsJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_language_models_output_next_token(
    input: &crate::operation::list_language_models::ListLanguageModelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_medical_transcription_jobs_output_next_token(
    input: &crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_medical_vocabularies_output_next_token(
    input: &crate::operation::list_medical_vocabularies::ListMedicalVocabulariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_transcription_jobs_output_next_token(
    input: &crate::operation::list_transcription_jobs::ListTranscriptionJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_vocabularies_output_next_token(
    input: &crate::operation::list_vocabularies::ListVocabulariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_vocabulary_filters_output_next_token(
    input: &crate::operation::list_vocabulary_filters::ListVocabularyFiltersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
