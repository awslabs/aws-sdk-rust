// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about your subtitle file, including format, start index, and Amazon S3 location.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubtitlesOutput {
    /// <p>Provides the format of your subtitle files. If your request included both WebVTT (<code>vtt</code>) and SubRip (<code>srt</code>) formats, both formats are shown.</p>
    pub formats: ::std::option::Option<::std::vec::Vec<crate::types::SubtitleFormat>>,
    /// <p>The Amazon S3 location of your transcript. You can use this URI to access or download your subtitle file. Your subtitle file is stored in the same location as your transcript. If you specified both WebVTT and SubRip subtitle formats, two URIs are provided.</p>
    /// <p>If you included <code>OutputBucketName</code> in your transcription job request, this is the URI of that bucket. If you also included <code>OutputKey</code> in your request, your output is located in the path you specified in your request.</p>
    /// <p>If you didn't include <code>OutputBucketName</code> in your transcription job request, your subtitle file is stored in a service-managed bucket, and <code>TranscriptFileUri</code> provides you with a temporary URI you can use for secure access to your subtitle file.</p> <note>
    /// <p>Temporary URIs for service-managed Amazon S3 buckets are only valid for 15 minutes. If you get an <code>AccesDenied</code> error, you can get a new temporary URI by running a <code>GetTranscriptionJob</code> or <code>ListTranscriptionJob</code> request.</p>
    /// </note>
    pub subtitle_file_uris: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Provides the start index value for your subtitle files. If you did not specify a value in your request, the default value of <code>0</code> is used.</p>
    pub output_start_index: ::std::option::Option<i32>,
}
impl SubtitlesOutput {
    /// <p>Provides the format of your subtitle files. If your request included both WebVTT (<code>vtt</code>) and SubRip (<code>srt</code>) formats, both formats are shown.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.formats.is_none()`.
    pub fn formats(&self) -> &[crate::types::SubtitleFormat] {
        self.formats.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon S3 location of your transcript. You can use this URI to access or download your subtitle file. Your subtitle file is stored in the same location as your transcript. If you specified both WebVTT and SubRip subtitle formats, two URIs are provided.</p>
    /// <p>If you included <code>OutputBucketName</code> in your transcription job request, this is the URI of that bucket. If you also included <code>OutputKey</code> in your request, your output is located in the path you specified in your request.</p>
    /// <p>If you didn't include <code>OutputBucketName</code> in your transcription job request, your subtitle file is stored in a service-managed bucket, and <code>TranscriptFileUri</code> provides you with a temporary URI you can use for secure access to your subtitle file.</p> <note>
    /// <p>Temporary URIs for service-managed Amazon S3 buckets are only valid for 15 minutes. If you get an <code>AccesDenied</code> error, you can get a new temporary URI by running a <code>GetTranscriptionJob</code> or <code>ListTranscriptionJob</code> request.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subtitle_file_uris.is_none()`.
    pub fn subtitle_file_uris(&self) -> &[::std::string::String] {
        self.subtitle_file_uris.as_deref().unwrap_or_default()
    }
    /// <p>Provides the start index value for your subtitle files. If you did not specify a value in your request, the default value of <code>0</code> is used.</p>
    pub fn output_start_index(&self) -> ::std::option::Option<i32> {
        self.output_start_index
    }
}
impl SubtitlesOutput {
    /// Creates a new builder-style object to manufacture [`SubtitlesOutput`](crate::types::SubtitlesOutput).
    pub fn builder() -> crate::types::builders::SubtitlesOutputBuilder {
        crate::types::builders::SubtitlesOutputBuilder::default()
    }
}

/// A builder for [`SubtitlesOutput`](crate::types::SubtitlesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubtitlesOutputBuilder {
    pub(crate) formats: ::std::option::Option<::std::vec::Vec<crate::types::SubtitleFormat>>,
    pub(crate) subtitle_file_uris: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) output_start_index: ::std::option::Option<i32>,
}
impl SubtitlesOutputBuilder {
    /// Appends an item to `formats`.
    ///
    /// To override the contents of this collection use [`set_formats`](Self::set_formats).
    ///
    /// <p>Provides the format of your subtitle files. If your request included both WebVTT (<code>vtt</code>) and SubRip (<code>srt</code>) formats, both formats are shown.</p>
    pub fn formats(mut self, input: crate::types::SubtitleFormat) -> Self {
        let mut v = self.formats.unwrap_or_default();
        v.push(input);
        self.formats = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides the format of your subtitle files. If your request included both WebVTT (<code>vtt</code>) and SubRip (<code>srt</code>) formats, both formats are shown.</p>
    pub fn set_formats(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SubtitleFormat>>) -> Self {
        self.formats = input;
        self
    }
    /// <p>Provides the format of your subtitle files. If your request included both WebVTT (<code>vtt</code>) and SubRip (<code>srt</code>) formats, both formats are shown.</p>
    pub fn get_formats(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SubtitleFormat>> {
        &self.formats
    }
    /// Appends an item to `subtitle_file_uris`.
    ///
    /// To override the contents of this collection use [`set_subtitle_file_uris`](Self::set_subtitle_file_uris).
    ///
    /// <p>The Amazon S3 location of your transcript. You can use this URI to access or download your subtitle file. Your subtitle file is stored in the same location as your transcript. If you specified both WebVTT and SubRip subtitle formats, two URIs are provided.</p>
    /// <p>If you included <code>OutputBucketName</code> in your transcription job request, this is the URI of that bucket. If you also included <code>OutputKey</code> in your request, your output is located in the path you specified in your request.</p>
    /// <p>If you didn't include <code>OutputBucketName</code> in your transcription job request, your subtitle file is stored in a service-managed bucket, and <code>TranscriptFileUri</code> provides you with a temporary URI you can use for secure access to your subtitle file.</p> <note>
    /// <p>Temporary URIs for service-managed Amazon S3 buckets are only valid for 15 minutes. If you get an <code>AccesDenied</code> error, you can get a new temporary URI by running a <code>GetTranscriptionJob</code> or <code>ListTranscriptionJob</code> request.</p>
    /// </note>
    pub fn subtitle_file_uris(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subtitle_file_uris.unwrap_or_default();
        v.push(input.into());
        self.subtitle_file_uris = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon S3 location of your transcript. You can use this URI to access or download your subtitle file. Your subtitle file is stored in the same location as your transcript. If you specified both WebVTT and SubRip subtitle formats, two URIs are provided.</p>
    /// <p>If you included <code>OutputBucketName</code> in your transcription job request, this is the URI of that bucket. If you also included <code>OutputKey</code> in your request, your output is located in the path you specified in your request.</p>
    /// <p>If you didn't include <code>OutputBucketName</code> in your transcription job request, your subtitle file is stored in a service-managed bucket, and <code>TranscriptFileUri</code> provides you with a temporary URI you can use for secure access to your subtitle file.</p> <note>
    /// <p>Temporary URIs for service-managed Amazon S3 buckets are only valid for 15 minutes. If you get an <code>AccesDenied</code> error, you can get a new temporary URI by running a <code>GetTranscriptionJob</code> or <code>ListTranscriptionJob</code> request.</p>
    /// </note>
    pub fn set_subtitle_file_uris(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subtitle_file_uris = input;
        self
    }
    /// <p>The Amazon S3 location of your transcript. You can use this URI to access or download your subtitle file. Your subtitle file is stored in the same location as your transcript. If you specified both WebVTT and SubRip subtitle formats, two URIs are provided.</p>
    /// <p>If you included <code>OutputBucketName</code> in your transcription job request, this is the URI of that bucket. If you also included <code>OutputKey</code> in your request, your output is located in the path you specified in your request.</p>
    /// <p>If you didn't include <code>OutputBucketName</code> in your transcription job request, your subtitle file is stored in a service-managed bucket, and <code>TranscriptFileUri</code> provides you with a temporary URI you can use for secure access to your subtitle file.</p> <note>
    /// <p>Temporary URIs for service-managed Amazon S3 buckets are only valid for 15 minutes. If you get an <code>AccesDenied</code> error, you can get a new temporary URI by running a <code>GetTranscriptionJob</code> or <code>ListTranscriptionJob</code> request.</p>
    /// </note>
    pub fn get_subtitle_file_uris(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subtitle_file_uris
    }
    /// <p>Provides the start index value for your subtitle files. If you did not specify a value in your request, the default value of <code>0</code> is used.</p>
    pub fn output_start_index(mut self, input: i32) -> Self {
        self.output_start_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the start index value for your subtitle files. If you did not specify a value in your request, the default value of <code>0</code> is used.</p>
    pub fn set_output_start_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.output_start_index = input;
        self
    }
    /// <p>Provides the start index value for your subtitle files. If you did not specify a value in your request, the default value of <code>0</code> is used.</p>
    pub fn get_output_start_index(&self) -> &::std::option::Option<i32> {
        &self.output_start_index
    }
    /// Consumes the builder and constructs a [`SubtitlesOutput`](crate::types::SubtitlesOutput).
    pub fn build(self) -> crate::types::SubtitlesOutput {
        crate::types::SubtitlesOutput {
            formats: self.formats,
            subtitle_file_uris: self.subtitle_file_uris,
            output_start_index: self.output_start_index,
        }
    }
}
