// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Amazon S3 location of the media file you want to use in your request.</p>
/// <p>For information on supported media formats, refer to the <a href="https://docs.aws.amazon.com/APIReference/API_StartTranscriptionJob.html#transcribe-StartTranscriptionJob-request-MediaFormat">MediaFormat</a> parameter or the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio">Media formats</a> section in the Amazon S3 Developer Guide.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Media {
    /// <p>The Amazon S3 location of the media file you want to transcribe. For example:</p>
    /// <ul>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code> </p> </li>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code> </p> </li>
    /// </ul>
    /// <p>Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription request.</p>
    #[doc(hidden)]
    pub media_file_uri: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 location of the media file you want to redact. For example:</p>
    /// <ul>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code> </p> </li>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code> </p> </li>
    /// </ul>
    /// <p>Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription request.</p> <important>
    /// <p> <code>RedactedMediaFileUri</code> produces a redacted audio file in addition to a redacted transcript. It is only supported for Call Analytics (<code>StartCallAnalyticsJob</code>) transcription requests.</p>
    /// </important>
    #[doc(hidden)]
    pub redacted_media_file_uri: std::option::Option<std::string::String>,
}
impl Media {
    /// <p>The Amazon S3 location of the media file you want to transcribe. For example:</p>
    /// <ul>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code> </p> </li>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code> </p> </li>
    /// </ul>
    /// <p>Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription request.</p>
    pub fn media_file_uri(&self) -> std::option::Option<&str> {
        self.media_file_uri.as_deref()
    }
    /// <p>The Amazon S3 location of the media file you want to redact. For example:</p>
    /// <ul>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code> </p> </li>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code> </p> </li>
    /// </ul>
    /// <p>Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription request.</p> <important>
    /// <p> <code>RedactedMediaFileUri</code> produces a redacted audio file in addition to a redacted transcript. It is only supported for Call Analytics (<code>StartCallAnalyticsJob</code>) transcription requests.</p>
    /// </important>
    pub fn redacted_media_file_uri(&self) -> std::option::Option<&str> {
        self.redacted_media_file_uri.as_deref()
    }
}
impl Media {
    /// Creates a new builder-style object to manufacture [`Media`](crate::types::Media).
    pub fn builder() -> crate::types::builders::MediaBuilder {
        crate::types::builders::MediaBuilder::default()
    }
}

/// A builder for [`Media`](crate::types::Media).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MediaBuilder {
    pub(crate) media_file_uri: std::option::Option<std::string::String>,
    pub(crate) redacted_media_file_uri: std::option::Option<std::string::String>,
}
impl MediaBuilder {
    /// <p>The Amazon S3 location of the media file you want to transcribe. For example:</p>
    /// <ul>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code> </p> </li>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code> </p> </li>
    /// </ul>
    /// <p>Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription request.</p>
    pub fn media_file_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.media_file_uri = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location of the media file you want to transcribe. For example:</p>
    /// <ul>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code> </p> </li>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code> </p> </li>
    /// </ul>
    /// <p>Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription request.</p>
    pub fn set_media_file_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.media_file_uri = input;
        self
    }
    /// <p>The Amazon S3 location of the media file you want to redact. For example:</p>
    /// <ul>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code> </p> </li>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code> </p> </li>
    /// </ul>
    /// <p>Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription request.</p> <important>
    /// <p> <code>RedactedMediaFileUri</code> produces a redacted audio file in addition to a redacted transcript. It is only supported for Call Analytics (<code>StartCallAnalyticsJob</code>) transcription requests.</p>
    /// </important>
    pub fn redacted_media_file_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.redacted_media_file_uri = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location of the media file you want to redact. For example:</p>
    /// <ul>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/my-media-file.flac</code> </p> </li>
    /// <li> <p> <code>s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac</code> </p> </li>
    /// </ul>
    /// <p>Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription request.</p> <important>
    /// <p> <code>RedactedMediaFileUri</code> produces a redacted audio file in addition to a redacted transcript. It is only supported for Call Analytics (<code>StartCallAnalyticsJob</code>) transcription requests.</p>
    /// </important>
    pub fn set_redacted_media_file_uri(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.redacted_media_file_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`Media`](crate::types::Media).
    pub fn build(self) -> crate::types::Media {
        crate::types::Media {
            media_file_uri: self.media_file_uri,
            redacted_media_file_uri: self.redacted_media_file_uri,
        }
    }
}
