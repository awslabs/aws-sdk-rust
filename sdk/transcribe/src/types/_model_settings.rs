// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the name of the custom language model that was included in the specified transcription job.</p>
/// <p>Only use <code>ModelSettings</code> with the <code>LanguageModelName</code> sub-parameter if you're <b>not</b> using automatic language identification (<code></code>). If using <code>LanguageIdSettings</code> in your request, this parameter contains a <code>LanguageModelName</code> sub-parameter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModelSettings {
    /// <p>The name of the custom language model you want to use when processing your transcription job. Note that custom language model names are case sensitive.</p>
    /// <p>The language of the specified custom language model must match the language code that you specify in your transcription request. If the languages don't match, the custom language model isn't applied. There are no errors or warnings associated with a language mismatch.</p>
    #[doc(hidden)]
    pub language_model_name: std::option::Option<std::string::String>,
}
impl ModelSettings {
    /// <p>The name of the custom language model you want to use when processing your transcription job. Note that custom language model names are case sensitive.</p>
    /// <p>The language of the specified custom language model must match the language code that you specify in your transcription request. If the languages don't match, the custom language model isn't applied. There are no errors or warnings associated with a language mismatch.</p>
    pub fn language_model_name(&self) -> std::option::Option<&str> {
        self.language_model_name.as_deref()
    }
}
impl ModelSettings {
    /// Creates a new builder-style object to manufacture [`ModelSettings`](crate::types::ModelSettings).
    pub fn builder() -> crate::types::builders::ModelSettingsBuilder {
        crate::types::builders::ModelSettingsBuilder::default()
    }
}

/// A builder for [`ModelSettings`](crate::types::ModelSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModelSettingsBuilder {
    pub(crate) language_model_name: std::option::Option<std::string::String>,
}
impl ModelSettingsBuilder {
    /// <p>The name of the custom language model you want to use when processing your transcription job. Note that custom language model names are case sensitive.</p>
    /// <p>The language of the specified custom language model must match the language code that you specify in your transcription request. If the languages don't match, the custom language model isn't applied. There are no errors or warnings associated with a language mismatch.</p>
    pub fn language_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.language_model_name = Some(input.into());
        self
    }
    /// <p>The name of the custom language model you want to use when processing your transcription job. Note that custom language model names are case sensitive.</p>
    /// <p>The language of the specified custom language model must match the language code that you specify in your transcription request. If the languages don't match, the custom language model isn't applied. There are no errors or warnings associated with a language mismatch.</p>
    pub fn set_language_model_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.language_model_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ModelSettings`](crate::types::ModelSettings).
    pub fn build(self) -> crate::types::ModelSettings {
        crate::types::ModelSettings {
            language_model_name: self.language_model_name,
        }
    }
}
