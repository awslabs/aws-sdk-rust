// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Transcribe Service
///
/// Client for invoking operations on Amazon Transcribe Service. Each operation on Amazon Transcribe Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_transcribe::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_transcribe::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_transcribe::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateCallAnalyticsCategory`](crate::client::fluent_builders::CreateCallAnalyticsCategory) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`category_name(impl Into<String>)`](crate::client::fluent_builders::CreateCallAnalyticsCategory::category_name) / [`set_category_name(Option<String>)`](crate::client::fluent_builders::CreateCallAnalyticsCategory::set_category_name): <p>A unique name, chosen by you, for your Call Analytics category. It's helpful to use a detailed naming system that will make sense to you in the future. For example, it's better to use <code>sentiment-positive-last30seconds</code> for a category over a generic name like <code>test-category</code>.</p>  <p>Category names are case sensitive.</p>
    ///   - [`rules(Vec<Rule>)`](crate::client::fluent_builders::CreateCallAnalyticsCategory::rules) / [`set_rules(Option<Vec<Rule>>)`](crate::client::fluent_builders::CreateCallAnalyticsCategory::set_rules): <p>Rules define a Call Analytics category. When creating a new category, you must create between 1 and 20 rules for that category. For each rule, you specify a filter you want applied to the attributes of a call. For example, you can choose a sentiment filter that detects if a customer's sentiment was positive during the last 30 seconds of the call.</p>
    ///   - [`input_type(InputType)`](crate::client::fluent_builders::CreateCallAnalyticsCategory::input_type) / [`set_input_type(Option<InputType>)`](crate::client::fluent_builders::CreateCallAnalyticsCategory::set_input_type): <p>Choose whether you want to create a streaming or a batch category for your Call Analytics transcription.</p>  <p>Specifying <code>POST_CALL</code> assigns your category to batch transcriptions; categories with this input type cannot be applied to streaming (real-time) transcriptions.</p>  <p>Specifying <code>REAL_TIME</code> assigns your category to streaming transcriptions; categories with this input type cannot be applied to batch (post-call) transcriptions.</p>  <p>If you do not include <code>InputType</code>, your category is created as a batch category by default.</p>
    /// - On success, responds with [`CreateCallAnalyticsCategoryOutput`](crate::output::CreateCallAnalyticsCategoryOutput) with field(s):
    ///   - [`category_properties(Option<CategoryProperties>)`](crate::output::CreateCallAnalyticsCategoryOutput::category_properties): <p>Provides you with the properties of your new category, including its associated rules.</p>
    /// - On failure, responds with [`SdkError<CreateCallAnalyticsCategoryError>`](crate::error::CreateCallAnalyticsCategoryError)
    pub fn create_call_analytics_category(
        &self,
    ) -> crate::client::fluent_builders::CreateCallAnalyticsCategory {
        crate::client::fluent_builders::CreateCallAnalyticsCategory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLanguageModel`](crate::client::fluent_builders::CreateLanguageModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`language_code(ClmLanguageCode)`](crate::client::fluent_builders::CreateLanguageModel::language_code) / [`set_language_code(Option<ClmLanguageCode>)`](crate::client::fluent_builders::CreateLanguageModel::set_language_code): <p>The language code that represents the language of your model. Each custom language model must contain terms in only one language, and the language you select for your custom language model must match the language of your training and tuning data.</p>  <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table. Note that US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>  <p>A custom language model can only be used to transcribe files in the same language as the model. For example, if you create a custom language model using US English (<code>en-US</code>), you can only apply this model to files that contain English audio.</p>
    ///   - [`base_model_name(BaseModelName)`](crate::client::fluent_builders::CreateLanguageModel::base_model_name) / [`set_base_model_name(Option<BaseModelName>)`](crate::client::fluent_builders::CreateLanguageModel::set_base_model_name): <p>The Amazon Transcribe standard language model, or base model, used to create your custom language model. Amazon Transcribe offers two options for base models: Wideband and Narrowband.</p>  <p>If the audio you want to transcribe has a sample rate of 16,000 Hz or greater, choose <code>WideBand</code>. To transcribe audio with a sample rate less than 16,000 Hz, choose <code>NarrowBand</code>.</p>
    ///   - [`model_name(impl Into<String>)`](crate::client::fluent_builders::CreateLanguageModel::model_name) / [`set_model_name(Option<String>)`](crate::client::fluent_builders::CreateLanguageModel::set_model_name): <p>A unique name, chosen by you, for your custom language model.</p>  <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account. If you try to create a new custom language model with the same name as an existing custom language model, you get a <code>ConflictException</code> error.</p>
    ///   - [`input_data_config(InputDataConfig)`](crate::client::fluent_builders::CreateLanguageModel::input_data_config) / [`set_input_data_config(Option<InputDataConfig>)`](crate::client::fluent_builders::CreateLanguageModel::set_input_data_config): <p>Contains the Amazon S3 location of the training data you want to use to create a new custom language model, and permissions to access this location.</p>  <p>When using <code>InputDataConfig</code>, you must include these sub-parameters: <code>S3Uri</code>, which is the Amazon S3 location of your training data, and <code>DataAccessRoleArn</code>, which is the Amazon Resource Name (ARN) of the role that has permission to access your specified Amazon S3 location. You can optionally include <code>TuningDataS3Uri</code>, which is the Amazon S3 location of your tuning data. If you specify different Amazon S3 locations for training and tuning data, the ARN you use must have permissions to access both locations.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateLanguageModel::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateLanguageModel::set_tags): <p>Adds one or more custom tags, each in the form of a key:value pair, to a new custom language model at the time you create this new model.</p>  <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
    /// - On success, responds with [`CreateLanguageModelOutput`](crate::output::CreateLanguageModelOutput) with field(s):
    ///   - [`language_code(Option<ClmLanguageCode>)`](crate::output::CreateLanguageModelOutput::language_code): <p>The language code you selected for your custom language model.</p>
    ///   - [`base_model_name(Option<BaseModelName>)`](crate::output::CreateLanguageModelOutput::base_model_name): <p>The Amazon Transcribe standard language model, or base model, you specified when creating your custom language model.</p>
    ///   - [`model_name(Option<String>)`](crate::output::CreateLanguageModelOutput::model_name): <p>The name of your custom language model.</p>
    ///   - [`input_data_config(Option<InputDataConfig>)`](crate::output::CreateLanguageModelOutput::input_data_config): <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3 locations you provided for your training (<code>S3Uri</code>) and tuning (<code>TuningDataS3Uri</code>) data.</p>
    ///   - [`model_status(Option<ModelStatus>)`](crate::output::CreateLanguageModelOutput::model_status): <p>The status of your custom language model. When the status displays as <code>COMPLETED</code>, your model is ready to use.</p>
    /// - On failure, responds with [`SdkError<CreateLanguageModelError>`](crate::error::CreateLanguageModelError)
    pub fn create_language_model(&self) -> crate::client::fluent_builders::CreateLanguageModel {
        crate::client::fluent_builders::CreateLanguageModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateMedicalVocabulary`](crate::client::fluent_builders::CreateMedicalVocabulary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::CreateMedicalVocabulary::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::CreateMedicalVocabulary::set_vocabulary_name): <p>A unique name, chosen by you, for your new custom medical vocabulary.</p>  <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account. If you try to create a new custom medical vocabulary with the same name as an existing custom medical vocabulary, you get a <code>ConflictException</code> error.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::CreateMedicalVocabulary::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::CreateMedicalVocabulary::set_language_code): <p>The language code that represents the language of the entries in your custom vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    ///   - [`vocabulary_file_uri(impl Into<String>)`](crate::client::fluent_builders::CreateMedicalVocabulary::vocabulary_file_uri) / [`set_vocabulary_file_uri(Option<String>)`](crate::client::fluent_builders::CreateMedicalVocabulary::set_vocabulary_file_uri): <p>The Amazon S3 location (URI) of the text file that contains your custom medical vocabulary. The URI must be in the same Amazon Web Services Region as the resource you're calling.</p>  <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code> </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateMedicalVocabulary::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateMedicalVocabulary::set_tags): <p>Adds one or more custom tags, each in the form of a key:value pair, to a new custom medical vocabulary at the time you create this new custom vocabulary.</p>  <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
    /// - On success, responds with [`CreateMedicalVocabularyOutput`](crate::output::CreateMedicalVocabularyOutput) with field(s):
    ///   - [`vocabulary_name(Option<String>)`](crate::output::CreateMedicalVocabularyOutput::vocabulary_name): <p>The name you chose for your custom medical vocabulary.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::CreateMedicalVocabularyOutput::language_code): <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    ///   - [`vocabulary_state(Option<VocabularyState>)`](crate::output::CreateMedicalVocabularyOutput::vocabulary_state): <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::output::CreateMedicalVocabularyOutput::last_modified_time): <p>The date and time you created your custom medical vocabulary.</p>  <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    ///   - [`failure_reason(Option<String>)`](crate::output::CreateMedicalVocabularyOutput::failure_reason): <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the medical transcription job request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    /// - On failure, responds with [`SdkError<CreateMedicalVocabularyError>`](crate::error::CreateMedicalVocabularyError)
    pub fn create_medical_vocabulary(
        &self,
    ) -> crate::client::fluent_builders::CreateMedicalVocabulary {
        crate::client::fluent_builders::CreateMedicalVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateVocabulary`](crate::client::fluent_builders::CreateVocabulary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::CreateVocabulary::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::CreateVocabulary::set_vocabulary_name): <p>A unique name, chosen by you, for your new custom vocabulary.</p>  <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account. If you try to create a new custom vocabulary with the same name as an existing custom vocabulary, you get a <code>ConflictException</code> error.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::CreateVocabulary::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::CreateVocabulary::set_language_code): <p>The language code that represents the language of the entries in your custom vocabulary. Each custom vocabulary must contain terms in only one language.</p>  <p>A custom vocabulary can only be used to transcribe files in the same language as the custom vocabulary. For example, if you create a custom vocabulary using US English (<code>en-US</code>), you can only apply this custom vocabulary to files that contain English audio.</p>  <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.</p>
    ///   - [`phrases(Vec<String>)`](crate::client::fluent_builders::CreateVocabulary::phrases) / [`set_phrases(Option<Vec<String>>)`](crate::client::fluent_builders::CreateVocabulary::set_phrases): <p>Use this parameter if you want to create your custom vocabulary by including all desired terms, as comma-separated values, within your request. The other option for creating your custom vocabulary is to save your entries in a text file and upload them to an Amazon S3 bucket, then specify the location of your file using the <code>VocabularyFileUri</code> parameter.</p>  <p>Note that if you include <code>Phrases</code> in your request, you cannot use <code>VocabularyFileUri</code>; you must choose one or the other.</p>  <p>Each language has a character set that contains all allowed characters for that specific language. If you use unsupported characters, your custom vocabulary filter request fails. Refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for Custom Vocabularies</a> to get the character set for your language.</p>
    ///   - [`vocabulary_file_uri(impl Into<String>)`](crate::client::fluent_builders::CreateVocabulary::vocabulary_file_uri) / [`set_vocabulary_file_uri(Option<String>)`](crate::client::fluent_builders::CreateVocabulary::set_vocabulary_file_uri): <p>The Amazon S3 location of the text file that contains your custom vocabulary. The URI must be located in the same Amazon Web Services Region as the resource you're calling.</p>  <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code> </p>  <p>Note that if you include <code>VocabularyFileUri</code> in your request, you cannot use the <code>Phrases</code> flag; you must choose one or the other.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateVocabulary::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateVocabulary::set_tags): <p>Adds one or more custom tags, each in the form of a key:value pair, to a new custom vocabulary at the time you create this new custom vocabulary.</p>  <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
    /// - On success, responds with [`CreateVocabularyOutput`](crate::output::CreateVocabularyOutput) with field(s):
    ///   - [`vocabulary_name(Option<String>)`](crate::output::CreateVocabularyOutput::vocabulary_name): <p>The name you chose for your custom vocabulary.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::CreateVocabularyOutput::language_code): <p>The language code you selected for your custom vocabulary.</p>
    ///   - [`vocabulary_state(Option<VocabularyState>)`](crate::output::CreateVocabularyOutput::vocabulary_state): <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::output::CreateVocabularyOutput::last_modified_time): <p>The date and time you created your custom vocabulary.</p>  <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    ///   - [`failure_reason(Option<String>)`](crate::output::CreateVocabularyOutput::failure_reason): <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    /// - On failure, responds with [`SdkError<CreateVocabularyError>`](crate::error::CreateVocabularyError)
    pub fn create_vocabulary(&self) -> crate::client::fluent_builders::CreateVocabulary {
        crate::client::fluent_builders::CreateVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateVocabularyFilter`](crate::client::fluent_builders::CreateVocabularyFilter) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_filter_name(impl Into<String>)`](crate::client::fluent_builders::CreateVocabularyFilter::vocabulary_filter_name) / [`set_vocabulary_filter_name(Option<String>)`](crate::client::fluent_builders::CreateVocabularyFilter::set_vocabulary_filter_name): <p>A unique name, chosen by you, for your new custom vocabulary filter.</p>  <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account. If you try to create a new custom vocabulary filter with the same name as an existing custom vocabulary filter, you get a <code>ConflictException</code> error.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::CreateVocabularyFilter::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::CreateVocabularyFilter::set_language_code): <p>The language code that represents the language of the entries in your vocabulary filter. Each custom vocabulary filter must contain terms in only one language.</p>  <p>A custom vocabulary filter can only be used to transcribe files in the same language as the filter. For example, if you create a custom vocabulary filter using US English (<code>en-US</code>), you can only apply this filter to files that contain English audio.</p>  <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.</p>
    ///   - [`words(Vec<String>)`](crate::client::fluent_builders::CreateVocabularyFilter::words) / [`set_words(Option<Vec<String>>)`](crate::client::fluent_builders::CreateVocabularyFilter::set_words): <p>Use this parameter if you want to create your custom vocabulary filter by including all desired terms, as comma-separated values, within your request. The other option for creating your vocabulary filter is to save your entries in a text file and upload them to an Amazon S3 bucket, then specify the location of your file using the <code>VocabularyFilterFileUri</code> parameter.</p>  <p>Note that if you include <code>Words</code> in your request, you cannot use <code>VocabularyFilterFileUri</code>; you must choose one or the other.</p>  <p>Each language has a character set that contains all allowed characters for that specific language. If you use unsupported characters, your custom vocabulary filter request fails. Refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for Custom Vocabularies</a> to get the character set for your language.</p>
    ///   - [`vocabulary_filter_file_uri(impl Into<String>)`](crate::client::fluent_builders::CreateVocabularyFilter::vocabulary_filter_file_uri) / [`set_vocabulary_filter_file_uri(Option<String>)`](crate::client::fluent_builders::CreateVocabularyFilter::set_vocabulary_filter_file_uri): <p>The Amazon S3 location of the text file that contains your custom vocabulary filter terms. The URI must be located in the same Amazon Web Services Region as the resource you're calling.</p>  <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-filter-file.txt</code> </p>  <p>Note that if you include <code>VocabularyFilterFileUri</code> in your request, you cannot use <code>Words</code>; you must choose one or the other.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateVocabularyFilter::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateVocabularyFilter::set_tags): <p>Adds one or more custom tags, each in the form of a key:value pair, to a new custom vocabulary filter at the time you create this new vocabulary filter.</p>  <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
    /// - On success, responds with [`CreateVocabularyFilterOutput`](crate::output::CreateVocabularyFilterOutput) with field(s):
    ///   - [`vocabulary_filter_name(Option<String>)`](crate::output::CreateVocabularyFilterOutput::vocabulary_filter_name): <p>The name you chose for your custom vocabulary filter.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::CreateVocabularyFilterOutput::language_code): <p>The language code you selected for your custom vocabulary filter.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::output::CreateVocabularyFilterOutput::last_modified_time): <p>The date and time you created your custom vocabulary filter.</p>  <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    /// - On failure, responds with [`SdkError<CreateVocabularyFilterError>`](crate::error::CreateVocabularyFilterError)
    pub fn create_vocabulary_filter(
        &self,
    ) -> crate::client::fluent_builders::CreateVocabularyFilter {
        crate::client::fluent_builders::CreateVocabularyFilter::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCallAnalyticsCategory`](crate::client::fluent_builders::DeleteCallAnalyticsCategory) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`category_name(impl Into<String>)`](crate::client::fluent_builders::DeleteCallAnalyticsCategory::category_name) / [`set_category_name(Option<String>)`](crate::client::fluent_builders::DeleteCallAnalyticsCategory::set_category_name): <p>The name of the Call Analytics category you want to delete. Category names are case sensitive.</p>
    /// - On success, responds with [`DeleteCallAnalyticsCategoryOutput`](crate::output::DeleteCallAnalyticsCategoryOutput)

    /// - On failure, responds with [`SdkError<DeleteCallAnalyticsCategoryError>`](crate::error::DeleteCallAnalyticsCategoryError)
    pub fn delete_call_analytics_category(
        &self,
    ) -> crate::client::fluent_builders::DeleteCallAnalyticsCategory {
        crate::client::fluent_builders::DeleteCallAnalyticsCategory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCallAnalyticsJob`](crate::client::fluent_builders::DeleteCallAnalyticsJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`call_analytics_job_name(impl Into<String>)`](crate::client::fluent_builders::DeleteCallAnalyticsJob::call_analytics_job_name) / [`set_call_analytics_job_name(Option<String>)`](crate::client::fluent_builders::DeleteCallAnalyticsJob::set_call_analytics_job_name): <p>The name of the Call Analytics job you want to delete. Job names are case sensitive.</p>
    /// - On success, responds with [`DeleteCallAnalyticsJobOutput`](crate::output::DeleteCallAnalyticsJobOutput)

    /// - On failure, responds with [`SdkError<DeleteCallAnalyticsJobError>`](crate::error::DeleteCallAnalyticsJobError)
    pub fn delete_call_analytics_job(
        &self,
    ) -> crate::client::fluent_builders::DeleteCallAnalyticsJob {
        crate::client::fluent_builders::DeleteCallAnalyticsJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLanguageModel`](crate::client::fluent_builders::DeleteLanguageModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_name(impl Into<String>)`](crate::client::fluent_builders::DeleteLanguageModel::model_name) / [`set_model_name(Option<String>)`](crate::client::fluent_builders::DeleteLanguageModel::set_model_name): <p>The name of the custom language model you want to delete. Model names are case sensitive.</p>
    /// - On success, responds with [`DeleteLanguageModelOutput`](crate::output::DeleteLanguageModelOutput)

    /// - On failure, responds with [`SdkError<DeleteLanguageModelError>`](crate::error::DeleteLanguageModelError)
    pub fn delete_language_model(&self) -> crate::client::fluent_builders::DeleteLanguageModel {
        crate::client::fluent_builders::DeleteLanguageModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteMedicalTranscriptionJob`](crate::client::fluent_builders::DeleteMedicalTranscriptionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`medical_transcription_job_name(impl Into<String>)`](crate::client::fluent_builders::DeleteMedicalTranscriptionJob::medical_transcription_job_name) / [`set_medical_transcription_job_name(Option<String>)`](crate::client::fluent_builders::DeleteMedicalTranscriptionJob::set_medical_transcription_job_name): <p>The name of the medical transcription job you want to delete. Job names are case sensitive.</p>
    /// - On success, responds with [`DeleteMedicalTranscriptionJobOutput`](crate::output::DeleteMedicalTranscriptionJobOutput)

    /// - On failure, responds with [`SdkError<DeleteMedicalTranscriptionJobError>`](crate::error::DeleteMedicalTranscriptionJobError)
    pub fn delete_medical_transcription_job(
        &self,
    ) -> crate::client::fluent_builders::DeleteMedicalTranscriptionJob {
        crate::client::fluent_builders::DeleteMedicalTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteMedicalVocabulary`](crate::client::fluent_builders::DeleteMedicalVocabulary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::DeleteMedicalVocabulary::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::DeleteMedicalVocabulary::set_vocabulary_name): <p>The name of the custom medical vocabulary you want to delete. Custom medical vocabulary names are case sensitive.</p>
    /// - On success, responds with [`DeleteMedicalVocabularyOutput`](crate::output::DeleteMedicalVocabularyOutput)

    /// - On failure, responds with [`SdkError<DeleteMedicalVocabularyError>`](crate::error::DeleteMedicalVocabularyError)
    pub fn delete_medical_vocabulary(
        &self,
    ) -> crate::client::fluent_builders::DeleteMedicalVocabulary {
        crate::client::fluent_builders::DeleteMedicalVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteTranscriptionJob`](crate::client::fluent_builders::DeleteTranscriptionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`transcription_job_name(impl Into<String>)`](crate::client::fluent_builders::DeleteTranscriptionJob::transcription_job_name) / [`set_transcription_job_name(Option<String>)`](crate::client::fluent_builders::DeleteTranscriptionJob::set_transcription_job_name): <p>The name of the transcription job you want to delete. Job names are case sensitive.</p>
    /// - On success, responds with [`DeleteTranscriptionJobOutput`](crate::output::DeleteTranscriptionJobOutput)

    /// - On failure, responds with [`SdkError<DeleteTranscriptionJobError>`](crate::error::DeleteTranscriptionJobError)
    pub fn delete_transcription_job(
        &self,
    ) -> crate::client::fluent_builders::DeleteTranscriptionJob {
        crate::client::fluent_builders::DeleteTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteVocabulary`](crate::client::fluent_builders::DeleteVocabulary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::DeleteVocabulary::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::DeleteVocabulary::set_vocabulary_name): <p>The name of the custom vocabulary you want to delete. Custom vocabulary names are case sensitive.</p>
    /// - On success, responds with [`DeleteVocabularyOutput`](crate::output::DeleteVocabularyOutput)

    /// - On failure, responds with [`SdkError<DeleteVocabularyError>`](crate::error::DeleteVocabularyError)
    pub fn delete_vocabulary(&self) -> crate::client::fluent_builders::DeleteVocabulary {
        crate::client::fluent_builders::DeleteVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteVocabularyFilter`](crate::client::fluent_builders::DeleteVocabularyFilter) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_filter_name(impl Into<String>)`](crate::client::fluent_builders::DeleteVocabularyFilter::vocabulary_filter_name) / [`set_vocabulary_filter_name(Option<String>)`](crate::client::fluent_builders::DeleteVocabularyFilter::set_vocabulary_filter_name): <p>The name of the custom vocabulary filter you want to delete. Custom vocabulary filter names are case sensitive.</p>
    /// - On success, responds with [`DeleteVocabularyFilterOutput`](crate::output::DeleteVocabularyFilterOutput)

    /// - On failure, responds with [`SdkError<DeleteVocabularyFilterError>`](crate::error::DeleteVocabularyFilterError)
    pub fn delete_vocabulary_filter(
        &self,
    ) -> crate::client::fluent_builders::DeleteVocabularyFilter {
        crate::client::fluent_builders::DeleteVocabularyFilter::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeLanguageModel`](crate::client::fluent_builders::DescribeLanguageModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_name(impl Into<String>)`](crate::client::fluent_builders::DescribeLanguageModel::model_name) / [`set_model_name(Option<String>)`](crate::client::fluent_builders::DescribeLanguageModel::set_model_name): <p>The name of the custom language model you want information about. Model names are case sensitive.</p>
    /// - On success, responds with [`DescribeLanguageModelOutput`](crate::output::DescribeLanguageModelOutput) with field(s):
    ///   - [`language_model(Option<LanguageModel>)`](crate::output::DescribeLanguageModelOutput::language_model): <p>Provides information about the specified custom language model.</p>  <p>This parameter also shows if the base language model you used to create your custom language model has been updated. If Amazon Transcribe has updated the base model, you can create a new custom language model using the updated base model.</p>  <p>If you tried to create a new custom language model and the request wasn't successful, you can use this <code>DescribeLanguageModel</code> to help identify the reason for this failure.</p>
    /// - On failure, responds with [`SdkError<DescribeLanguageModelError>`](crate::error::DescribeLanguageModelError)
    pub fn describe_language_model(&self) -> crate::client::fluent_builders::DescribeLanguageModel {
        crate::client::fluent_builders::DescribeLanguageModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCallAnalyticsCategory`](crate::client::fluent_builders::GetCallAnalyticsCategory) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`category_name(impl Into<String>)`](crate::client::fluent_builders::GetCallAnalyticsCategory::category_name) / [`set_category_name(Option<String>)`](crate::client::fluent_builders::GetCallAnalyticsCategory::set_category_name): <p>The name of the Call Analytics category you want information about. Category names are case sensitive.</p>
    /// - On success, responds with [`GetCallAnalyticsCategoryOutput`](crate::output::GetCallAnalyticsCategoryOutput) with field(s):
    ///   - [`category_properties(Option<CategoryProperties>)`](crate::output::GetCallAnalyticsCategoryOutput::category_properties): <p>Provides you with the properties of the Call Analytics category you specified in your <code>GetCallAnalyticsCategory</code> request.</p>
    /// - On failure, responds with [`SdkError<GetCallAnalyticsCategoryError>`](crate::error::GetCallAnalyticsCategoryError)
    pub fn get_call_analytics_category(
        &self,
    ) -> crate::client::fluent_builders::GetCallAnalyticsCategory {
        crate::client::fluent_builders::GetCallAnalyticsCategory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCallAnalyticsJob`](crate::client::fluent_builders::GetCallAnalyticsJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`call_analytics_job_name(impl Into<String>)`](crate::client::fluent_builders::GetCallAnalyticsJob::call_analytics_job_name) / [`set_call_analytics_job_name(Option<String>)`](crate::client::fluent_builders::GetCallAnalyticsJob::set_call_analytics_job_name): <p>The name of the Call Analytics job you want information about. Job names are case sensitive.</p>
    /// - On success, responds with [`GetCallAnalyticsJobOutput`](crate::output::GetCallAnalyticsJobOutput) with field(s):
    ///   - [`call_analytics_job(Option<CallAnalyticsJob>)`](crate::output::GetCallAnalyticsJobOutput::call_analytics_job): <p>Provides detailed information about the specified Call Analytics job, including job status and, if applicable, failure reason.</p>
    /// - On failure, responds with [`SdkError<GetCallAnalyticsJobError>`](crate::error::GetCallAnalyticsJobError)
    pub fn get_call_analytics_job(&self) -> crate::client::fluent_builders::GetCallAnalyticsJob {
        crate::client::fluent_builders::GetCallAnalyticsJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetMedicalTranscriptionJob`](crate::client::fluent_builders::GetMedicalTranscriptionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`medical_transcription_job_name(impl Into<String>)`](crate::client::fluent_builders::GetMedicalTranscriptionJob::medical_transcription_job_name) / [`set_medical_transcription_job_name(Option<String>)`](crate::client::fluent_builders::GetMedicalTranscriptionJob::set_medical_transcription_job_name): <p>The name of the medical transcription job you want information about. Job names are case sensitive.</p>
    /// - On success, responds with [`GetMedicalTranscriptionJobOutput`](crate::output::GetMedicalTranscriptionJobOutput) with field(s):
    ///   - [`medical_transcription_job(Option<MedicalTranscriptionJob>)`](crate::output::GetMedicalTranscriptionJobOutput::medical_transcription_job): <p>Provides detailed information about the specified medical transcription job, including job status and, if applicable, failure reason.</p>
    /// - On failure, responds with [`SdkError<GetMedicalTranscriptionJobError>`](crate::error::GetMedicalTranscriptionJobError)
    pub fn get_medical_transcription_job(
        &self,
    ) -> crate::client::fluent_builders::GetMedicalTranscriptionJob {
        crate::client::fluent_builders::GetMedicalTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetMedicalVocabulary`](crate::client::fluent_builders::GetMedicalVocabulary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::GetMedicalVocabulary::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::GetMedicalVocabulary::set_vocabulary_name): <p>The name of the custom medical vocabulary you want information about. Custom medical vocabulary names are case sensitive.</p>
    /// - On success, responds with [`GetMedicalVocabularyOutput`](crate::output::GetMedicalVocabularyOutput) with field(s):
    ///   - [`vocabulary_name(Option<String>)`](crate::output::GetMedicalVocabularyOutput::vocabulary_name): <p>The name of the custom medical vocabulary you requested information about.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::GetMedicalVocabularyOutput::language_code): <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    ///   - [`vocabulary_state(Option<VocabularyState>)`](crate::output::GetMedicalVocabularyOutput::vocabulary_state): <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::output::GetMedicalVocabularyOutput::last_modified_time): <p>The date and time the specified custom medical vocabulary was last modified.</p>  <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    ///   - [`failure_reason(Option<String>)`](crate::output::GetMedicalVocabularyOutput::failure_reason): <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom medical vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    ///   - [`download_uri(Option<String>)`](crate::output::GetMedicalVocabularyOutput::download_uri): <p>The S3 location where the specified custom medical vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
    /// - On failure, responds with [`SdkError<GetMedicalVocabularyError>`](crate::error::GetMedicalVocabularyError)
    pub fn get_medical_vocabulary(&self) -> crate::client::fluent_builders::GetMedicalVocabulary {
        crate::client::fluent_builders::GetMedicalVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTranscriptionJob`](crate::client::fluent_builders::GetTranscriptionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`transcription_job_name(impl Into<String>)`](crate::client::fluent_builders::GetTranscriptionJob::transcription_job_name) / [`set_transcription_job_name(Option<String>)`](crate::client::fluent_builders::GetTranscriptionJob::set_transcription_job_name): <p>The name of the transcription job you want information about. Job names are case sensitive.</p>
    /// - On success, responds with [`GetTranscriptionJobOutput`](crate::output::GetTranscriptionJobOutput) with field(s):
    ///   - [`transcription_job(Option<TranscriptionJob>)`](crate::output::GetTranscriptionJobOutput::transcription_job): <p>Provides detailed information about the specified transcription job, including job status and, if applicable, failure reason.</p>
    /// - On failure, responds with [`SdkError<GetTranscriptionJobError>`](crate::error::GetTranscriptionJobError)
    pub fn get_transcription_job(&self) -> crate::client::fluent_builders::GetTranscriptionJob {
        crate::client::fluent_builders::GetTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetVocabulary`](crate::client::fluent_builders::GetVocabulary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::GetVocabulary::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::GetVocabulary::set_vocabulary_name): <p>The name of the custom vocabulary you want information about. Custom vocabulary names are case sensitive.</p>
    /// - On success, responds with [`GetVocabularyOutput`](crate::output::GetVocabularyOutput) with field(s):
    ///   - [`vocabulary_name(Option<String>)`](crate::output::GetVocabularyOutput::vocabulary_name): <p>The name of the custom vocabulary you requested information about.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::GetVocabularyOutput::language_code): <p>The language code you selected for your custom vocabulary.</p>
    ///   - [`vocabulary_state(Option<VocabularyState>)`](crate::output::GetVocabularyOutput::vocabulary_state): <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::output::GetVocabularyOutput::last_modified_time): <p>The date and time the specified custom vocabulary was last modified.</p>  <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    ///   - [`failure_reason(Option<String>)`](crate::output::GetVocabularyOutput::failure_reason): <p>If <code>VocabularyState</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom vocabulary request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    ///   - [`download_uri(Option<String>)`](crate::output::GetVocabularyOutput::download_uri): <p>The S3 location where the custom vocabulary is stored; use this URI to view or download the custom vocabulary.</p>
    /// - On failure, responds with [`SdkError<GetVocabularyError>`](crate::error::GetVocabularyError)
    pub fn get_vocabulary(&self) -> crate::client::fluent_builders::GetVocabulary {
        crate::client::fluent_builders::GetVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetVocabularyFilter`](crate::client::fluent_builders::GetVocabularyFilter) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_filter_name(impl Into<String>)`](crate::client::fluent_builders::GetVocabularyFilter::vocabulary_filter_name) / [`set_vocabulary_filter_name(Option<String>)`](crate::client::fluent_builders::GetVocabularyFilter::set_vocabulary_filter_name): <p>The name of the custom vocabulary filter you want information about. Custom vocabulary filter names are case sensitive.</p>
    /// - On success, responds with [`GetVocabularyFilterOutput`](crate::output::GetVocabularyFilterOutput) with field(s):
    ///   - [`vocabulary_filter_name(Option<String>)`](crate::output::GetVocabularyFilterOutput::vocabulary_filter_name): <p>The name of the custom vocabulary filter you requested information about.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::GetVocabularyFilterOutput::language_code): <p>The language code you selected for your custom vocabulary filter.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::output::GetVocabularyFilterOutput::last_modified_time): <p>The date and time the specified custom vocabulary filter was last modified.</p>  <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    ///   - [`download_uri(Option<String>)`](crate::output::GetVocabularyFilterOutput::download_uri): <p>The Amazon S3 location where the custom vocabulary filter is stored; use this URI to view or download the custom vocabulary filter.</p>
    /// - On failure, responds with [`SdkError<GetVocabularyFilterError>`](crate::error::GetVocabularyFilterError)
    pub fn get_vocabulary_filter(&self) -> crate::client::fluent_builders::GetVocabularyFilter {
        crate::client::fluent_builders::GetVocabularyFilter::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCallAnalyticsCategories`](crate::client::fluent_builders::ListCallAnalyticsCategories) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCallAnalyticsCategories::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCallAnalyticsCategories::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCallAnalyticsCategories::set_next_token): <p>If your <code>ListCallAnalyticsCategories</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCallAnalyticsCategories::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCallAnalyticsCategories::set_max_results): <p>The maximum number of Call Analytics categories to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    /// - On success, responds with [`ListCallAnalyticsCategoriesOutput`](crate::output::ListCallAnalyticsCategoriesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListCallAnalyticsCategoriesOutput::next_token): <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`categories(Option<Vec<CategoryProperties>>)`](crate::output::ListCallAnalyticsCategoriesOutput::categories): <p>Provides detailed information about your Call Analytics categories, including all the rules associated with each category.</p>
    /// - On failure, responds with [`SdkError<ListCallAnalyticsCategoriesError>`](crate::error::ListCallAnalyticsCategoriesError)
    pub fn list_call_analytics_categories(
        &self,
    ) -> crate::client::fluent_builders::ListCallAnalyticsCategories {
        crate::client::fluent_builders::ListCallAnalyticsCategories::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCallAnalyticsJobs`](crate::client::fluent_builders::ListCallAnalyticsJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCallAnalyticsJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`status(CallAnalyticsJobStatus)`](crate::client::fluent_builders::ListCallAnalyticsJobs::status) / [`set_status(Option<CallAnalyticsJobStatus>)`](crate::client::fluent_builders::ListCallAnalyticsJobs::set_status): <p>Returns only Call Analytics jobs with the specified status. Jobs are ordered by creation date, with the newest job first. If you don't include <code>Status</code>, all Call Analytics jobs are returned.</p>
    ///   - [`job_name_contains(impl Into<String>)`](crate::client::fluent_builders::ListCallAnalyticsJobs::job_name_contains) / [`set_job_name_contains(Option<String>)`](crate::client::fluent_builders::ListCallAnalyticsJobs::set_job_name_contains): <p>Returns only the Call Analytics jobs that contain the specified string. The search is not case sensitive.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCallAnalyticsJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCallAnalyticsJobs::set_next_token): <p>If your <code>ListCallAnalyticsJobs</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListCallAnalyticsJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListCallAnalyticsJobs::set_max_results): <p>The maximum number of Call Analytics jobs to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    /// - On success, responds with [`ListCallAnalyticsJobsOutput`](crate::output::ListCallAnalyticsJobsOutput) with field(s):
    ///   - [`status(Option<CallAnalyticsJobStatus>)`](crate::output::ListCallAnalyticsJobsOutput::status): <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListCallAnalyticsJobsOutput::next_token): <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`call_analytics_job_summaries(Option<Vec<CallAnalyticsJobSummary>>)`](crate::output::ListCallAnalyticsJobsOutput::call_analytics_job_summaries): <p>Provides a summary of information about each result.</p>
    /// - On failure, responds with [`SdkError<ListCallAnalyticsJobsError>`](crate::error::ListCallAnalyticsJobsError)
    pub fn list_call_analytics_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListCallAnalyticsJobs {
        crate::client::fluent_builders::ListCallAnalyticsJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLanguageModels`](crate::client::fluent_builders::ListLanguageModels) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLanguageModels::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`status_equals(ModelStatus)`](crate::client::fluent_builders::ListLanguageModels::status_equals) / [`set_status_equals(Option<ModelStatus>)`](crate::client::fluent_builders::ListLanguageModels::set_status_equals): <p>Returns only custom language models with the specified status. Language models are ordered by creation date, with the newest model first. If you don't include <code>StatusEquals</code>, all custom language models are returned.</p>
    ///   - [`name_contains(impl Into<String>)`](crate::client::fluent_builders::ListLanguageModels::name_contains) / [`set_name_contains(Option<String>)`](crate::client::fluent_builders::ListLanguageModels::set_name_contains): <p>Returns only the custom language models that contain the specified string. The search is not case sensitive.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLanguageModels::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLanguageModels::set_next_token): <p>If your <code>ListLanguageModels</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLanguageModels::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListLanguageModels::set_max_results): <p>The maximum number of custom language models to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    /// - On success, responds with [`ListLanguageModelsOutput`](crate::output::ListLanguageModelsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListLanguageModelsOutput::next_token): <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`models(Option<Vec<LanguageModel>>)`](crate::output::ListLanguageModelsOutput::models): <p>Provides information about the custom language models that match the criteria specified in your request.</p>
    /// - On failure, responds with [`SdkError<ListLanguageModelsError>`](crate::error::ListLanguageModelsError)
    pub fn list_language_models(&self) -> crate::client::fluent_builders::ListLanguageModels {
        crate::client::fluent_builders::ListLanguageModels::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListMedicalTranscriptionJobs`](crate::client::fluent_builders::ListMedicalTranscriptionJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListMedicalTranscriptionJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`status(TranscriptionJobStatus)`](crate::client::fluent_builders::ListMedicalTranscriptionJobs::status) / [`set_status(Option<TranscriptionJobStatus>)`](crate::client::fluent_builders::ListMedicalTranscriptionJobs::set_status): <p>Returns only medical transcription jobs with the specified status. Jobs are ordered by creation date, with the newest job first. If you don't include <code>Status</code>, all medical transcription jobs are returned.</p>
    ///   - [`job_name_contains(impl Into<String>)`](crate::client::fluent_builders::ListMedicalTranscriptionJobs::job_name_contains) / [`set_job_name_contains(Option<String>)`](crate::client::fluent_builders::ListMedicalTranscriptionJobs::set_job_name_contains): <p>Returns only the medical transcription jobs that contain the specified string. The search is not case sensitive.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListMedicalTranscriptionJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListMedicalTranscriptionJobs::set_next_token): <p>If your <code>ListMedicalTranscriptionJobs</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListMedicalTranscriptionJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListMedicalTranscriptionJobs::set_max_results): <p>The maximum number of medical transcription jobs to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    /// - On success, responds with [`ListMedicalTranscriptionJobsOutput`](crate::output::ListMedicalTranscriptionJobsOutput) with field(s):
    ///   - [`status(Option<TranscriptionJobStatus>)`](crate::output::ListMedicalTranscriptionJobsOutput::status): <p>Lists all medical transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListMedicalTranscriptionJobsOutput::next_token): <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`medical_transcription_job_summaries(Option<Vec<MedicalTranscriptionJobSummary>>)`](crate::output::ListMedicalTranscriptionJobsOutput::medical_transcription_job_summaries): <p>Provides a summary of information about each result.</p>
    /// - On failure, responds with [`SdkError<ListMedicalTranscriptionJobsError>`](crate::error::ListMedicalTranscriptionJobsError)
    pub fn list_medical_transcription_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListMedicalTranscriptionJobs {
        crate::client::fluent_builders::ListMedicalTranscriptionJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListMedicalVocabularies`](crate::client::fluent_builders::ListMedicalVocabularies) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListMedicalVocabularies::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListMedicalVocabularies::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListMedicalVocabularies::set_next_token): <p>If your <code>ListMedicalVocabularies</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListMedicalVocabularies::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListMedicalVocabularies::set_max_results): <p>The maximum number of custom medical vocabularies to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    ///   - [`state_equals(VocabularyState)`](crate::client::fluent_builders::ListMedicalVocabularies::state_equals) / [`set_state_equals(Option<VocabularyState>)`](crate::client::fluent_builders::ListMedicalVocabularies::set_state_equals): <p>Returns only custom medical vocabularies with the specified state. Custom vocabularies are ordered by creation date, with the newest vocabulary first. If you don't include <code>StateEquals</code>, all custom medical vocabularies are returned.</p>
    ///   - [`name_contains(impl Into<String>)`](crate::client::fluent_builders::ListMedicalVocabularies::name_contains) / [`set_name_contains(Option<String>)`](crate::client::fluent_builders::ListMedicalVocabularies::set_name_contains): <p>Returns only the custom medical vocabularies that contain the specified string. The search is not case sensitive.</p>
    /// - On success, responds with [`ListMedicalVocabulariesOutput`](crate::output::ListMedicalVocabulariesOutput) with field(s):
    ///   - [`status(Option<VocabularyState>)`](crate::output::ListMedicalVocabulariesOutput::status): <p>Lists all custom medical vocabularies that have the status specified in your request. Custom vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListMedicalVocabulariesOutput::next_token): <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`vocabularies(Option<Vec<VocabularyInfo>>)`](crate::output::ListMedicalVocabulariesOutput::vocabularies): <p>Provides information about the custom medical vocabularies that match the criteria specified in your request.</p>
    /// - On failure, responds with [`SdkError<ListMedicalVocabulariesError>`](crate::error::ListMedicalVocabulariesError)
    pub fn list_medical_vocabularies(
        &self,
    ) -> crate::client::fluent_builders::ListMedicalVocabularies {
        crate::client::fluent_builders::ListMedicalVocabularies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>Returns a list of all tags associated with the specified Amazon Resource Name (ARN). ARNs have the format <code>arn:partition:service:region:account-id:resource-type/resource-id</code>.</p>  <p>For example, <code>arn:aws:transcribe:us-west-2:111122223333:transcription-job/transcription-job-name</code>.</p>  <p>Valid values for <code>resource-type</code> are: <code>transcription-job</code>, <code>medical-transcription-job</code>, <code>vocabulary</code>, <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and <code>language-model</code>.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`resource_arn(Option<String>)`](crate::output::ListTagsForResourceOutput::resource_arn): <p>The Amazon Resource Name (ARN) specified in your request.</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>Lists all tags associated with the given transcription job, vocabulary, model, or resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTranscriptionJobs`](crate::client::fluent_builders::ListTranscriptionJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTranscriptionJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`status(TranscriptionJobStatus)`](crate::client::fluent_builders::ListTranscriptionJobs::status) / [`set_status(Option<TranscriptionJobStatus>)`](crate::client::fluent_builders::ListTranscriptionJobs::set_status): <p>Returns only transcription jobs with the specified status. Jobs are ordered by creation date, with the newest job first. If you don't include <code>Status</code>, all transcription jobs are returned.</p>
    ///   - [`job_name_contains(impl Into<String>)`](crate::client::fluent_builders::ListTranscriptionJobs::job_name_contains) / [`set_job_name_contains(Option<String>)`](crate::client::fluent_builders::ListTranscriptionJobs::set_job_name_contains): <p>Returns only the transcription jobs that contain the specified string. The search is not case sensitive.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTranscriptionJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTranscriptionJobs::set_next_token): <p>If your <code>ListTranscriptionJobs</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTranscriptionJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTranscriptionJobs::set_max_results): <p>The maximum number of transcription jobs to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    /// - On success, responds with [`ListTranscriptionJobsOutput`](crate::output::ListTranscriptionJobsOutput) with field(s):
    ///   - [`status(Option<TranscriptionJobStatus>)`](crate::output::ListTranscriptionJobsOutput::status): <p>Lists all transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTranscriptionJobsOutput::next_token): <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`transcription_job_summaries(Option<Vec<TranscriptionJobSummary>>)`](crate::output::ListTranscriptionJobsOutput::transcription_job_summaries): <p>Provides a summary of information about each result.</p>
    /// - On failure, responds with [`SdkError<ListTranscriptionJobsError>`](crate::error::ListTranscriptionJobsError)
    pub fn list_transcription_jobs(&self) -> crate::client::fluent_builders::ListTranscriptionJobs {
        crate::client::fluent_builders::ListTranscriptionJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVocabularies`](crate::client::fluent_builders::ListVocabularies) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListVocabularies::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVocabularies::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVocabularies::set_next_token): <p>If your <code>ListVocabularies</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListVocabularies::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListVocabularies::set_max_results): <p>The maximum number of custom vocabularies to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    ///   - [`state_equals(VocabularyState)`](crate::client::fluent_builders::ListVocabularies::state_equals) / [`set_state_equals(Option<VocabularyState>)`](crate::client::fluent_builders::ListVocabularies::set_state_equals): <p>Returns only custom vocabularies with the specified state. Vocabularies are ordered by creation date, with the newest vocabulary first. If you don't include <code>StateEquals</code>, all custom medical vocabularies are returned.</p>
    ///   - [`name_contains(impl Into<String>)`](crate::client::fluent_builders::ListVocabularies::name_contains) / [`set_name_contains(Option<String>)`](crate::client::fluent_builders::ListVocabularies::set_name_contains): <p>Returns only the custom vocabularies that contain the specified string. The search is not case sensitive.</p>
    /// - On success, responds with [`ListVocabulariesOutput`](crate::output::ListVocabulariesOutput) with field(s):
    ///   - [`status(Option<VocabularyState>)`](crate::output::ListVocabulariesOutput::status): <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVocabulariesOutput::next_token): <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`vocabularies(Option<Vec<VocabularyInfo>>)`](crate::output::ListVocabulariesOutput::vocabularies): <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
    /// - On failure, responds with [`SdkError<ListVocabulariesError>`](crate::error::ListVocabulariesError)
    pub fn list_vocabularies(&self) -> crate::client::fluent_builders::ListVocabularies {
        crate::client::fluent_builders::ListVocabularies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVocabularyFilters`](crate::client::fluent_builders::ListVocabularyFilters) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListVocabularyFilters::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVocabularyFilters::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVocabularyFilters::set_next_token): <p>If your <code>ListVocabularyFilters</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListVocabularyFilters::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListVocabularyFilters::set_max_results): <p>The maximum number of custom vocabulary filters to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    ///   - [`name_contains(impl Into<String>)`](crate::client::fluent_builders::ListVocabularyFilters::name_contains) / [`set_name_contains(Option<String>)`](crate::client::fluent_builders::ListVocabularyFilters::set_name_contains): <p>Returns only the custom vocabulary filters that contain the specified string. The search is not case sensitive.</p>
    /// - On success, responds with [`ListVocabularyFiltersOutput`](crate::output::ListVocabularyFiltersOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListVocabularyFiltersOutput::next_token): <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    ///   - [`vocabulary_filters(Option<Vec<VocabularyFilterInfo>>)`](crate::output::ListVocabularyFiltersOutput::vocabulary_filters): <p>Provides information about the custom vocabulary filters that match the criteria specified in your request.</p>
    /// - On failure, responds with [`SdkError<ListVocabularyFiltersError>`](crate::error::ListVocabularyFiltersError)
    pub fn list_vocabulary_filters(&self) -> crate::client::fluent_builders::ListVocabularyFilters {
        crate::client::fluent_builders::ListVocabularyFilters::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartCallAnalyticsJob`](crate::client::fluent_builders::StartCallAnalyticsJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`call_analytics_job_name(impl Into<String>)`](crate::client::fluent_builders::StartCallAnalyticsJob::call_analytics_job_name) / [`set_call_analytics_job_name(Option<String>)`](crate::client::fluent_builders::StartCallAnalyticsJob::set_call_analytics_job_name): <p>A unique name, chosen by you, for your Call Analytics job.</p>  <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account. If you try to create a new job with the same name as an existing job, you get a <code>ConflictException</code> error.</p>
    ///   - [`media(Media)`](crate::client::fluent_builders::StartCallAnalyticsJob::media) / [`set_media(Option<Media>)`](crate::client::fluent_builders::StartCallAnalyticsJob::set_media): <p>Describes the Amazon S3 location of the media file you want to use in your Call Analytics request.</p>
    ///   - [`output_location(impl Into<String>)`](crate::client::fluent_builders::StartCallAnalyticsJob::output_location) / [`set_output_location(Option<String>)`](crate::client::fluent_builders::StartCallAnalyticsJob::set_output_location): <p>The Amazon S3 location where you want your Call Analytics transcription output stored. You can use any of the following formats to specify the output location:</p>  <ol>   <li> <p>s3://DOC-EXAMPLE-BUCKET</p> </li>   <li> <p>s3://DOC-EXAMPLE-BUCKET/my-output-folder/</p> </li>   <li> <p>s3://DOC-EXAMPLE-BUCKET/my-output-folder/my-call-analytics-job.json</p> </li>  </ol>  <p>Unless you specify a file name (option 3), the name of your output file has a default value that matches the name you specified for your transcription job using the <code>CallAnalyticsJobName</code> parameter.</p>  <p>You can specify a KMS key to encrypt your output using the <code>OutputEncryptionKMSKeyId</code> parameter. If you don't specify a KMS key, Amazon Transcribe uses the default Amazon S3 key for server-side encryption.</p>  <p>If you don't specify <code>OutputLocation</code>, your transcript is placed in a service-managed Amazon S3 bucket and you are provided with a URI to access your transcript.</p>
    ///   - [`output_encryption_kms_key_id(impl Into<String>)`](crate::client::fluent_builders::StartCallAnalyticsJob::output_encryption_kms_key_id) / [`set_output_encryption_kms_key_id(Option<String>)`](crate::client::fluent_builders::StartCallAnalyticsJob::set_output_encryption_kms_key_id): <p>The KMS key you want to use to encrypt your Call Analytics output.</p>  <p>If using a key located in the <b>current</b> Amazon Web Services account, you can specify your KMS key in one of four ways:</p>  <ol>   <li> <p>Use the KMS key ID itself. For example, <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>   <li> <p>Use an alias for the KMS key ID. For example, <code>alias/ExampleAlias</code>.</p> </li>   <li> <p>Use the Amazon Resource Name (ARN) for the KMS key ID. For example, <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>   <li> <p>Use the ARN for the KMS key alias. For example, <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p> </li>  </ol>  <p>If using a key located in a <b>different</b> Amazon Web Services account than the current Amazon Web Services account, you can specify your KMS key in one of two ways:</p>  <ol>   <li> <p>Use the ARN for the KMS key ID. For example, <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>   <li> <p>Use the ARN for the KMS key alias. For example, <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p> </li>  </ol>  <p>If you don't specify an encryption key, your output is encrypted with the default Amazon S3 key (SSE-S3).</p>  <p>If you specify a KMS key to encrypt your output, you must also specify an output location using the <code>OutputLocation</code> parameter.</p>  <p>Note that the user making the request must have permission to use the specified KMS key.</p>
    ///   - [`data_access_role_arn(impl Into<String>)`](crate::client::fluent_builders::StartCallAnalyticsJob::data_access_role_arn) / [`set_data_access_role_arn(Option<String>)`](crate::client::fluent_builders::StartCallAnalyticsJob::set_data_access_role_arn): <p>The Amazon Resource Name (ARN) of an IAM role that has permissions to access the Amazon S3 bucket that contains your input files. If the role that you specify doesn’t have the appropriate permissions to access the specified Amazon S3 location, your request fails.</p>  <p>IAM role ARNs have the format <code>arn:partition:iam::account:role/role-name-with-path</code>. For example: <code>arn:aws:iam::111122223333:role/Admin</code>.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns">IAM ARNs</a>.</p>
    ///   - [`settings(CallAnalyticsJobSettings)`](crate::client::fluent_builders::StartCallAnalyticsJob::settings) / [`set_settings(Option<CallAnalyticsJobSettings>)`](crate::client::fluent_builders::StartCallAnalyticsJob::set_settings): <p>Specify additional optional settings in your request, including content redaction; allows you to apply custom language models, vocabulary filters, and custom vocabularies to your Call Analytics job.</p>
    ///   - [`channel_definitions(Vec<ChannelDefinition>)`](crate::client::fluent_builders::StartCallAnalyticsJob::channel_definitions) / [`set_channel_definitions(Option<Vec<ChannelDefinition>>)`](crate::client::fluent_builders::StartCallAnalyticsJob::set_channel_definitions): <p>Makes it possible to specify which speaker is on which channel. For example, if your agent is the first participant to speak, you would set <code>ChannelId</code> to <code>0</code> (to indicate the first channel) and <code>ParticipantRole</code> to <code>AGENT</code> (to indicate that it's the agent speaking).</p>
    /// - On success, responds with [`StartCallAnalyticsJobOutput`](crate::output::StartCallAnalyticsJobOutput) with field(s):
    ///   - [`call_analytics_job(Option<CallAnalyticsJob>)`](crate::output::StartCallAnalyticsJobOutput::call_analytics_job): <p>Provides detailed information about the current Call Analytics job, including job status and, if applicable, failure reason.</p>
    /// - On failure, responds with [`SdkError<StartCallAnalyticsJobError>`](crate::error::StartCallAnalyticsJobError)
    pub fn start_call_analytics_job(
        &self,
    ) -> crate::client::fluent_builders::StartCallAnalyticsJob {
        crate::client::fluent_builders::StartCallAnalyticsJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartMedicalTranscriptionJob`](crate::client::fluent_builders::StartMedicalTranscriptionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`medical_transcription_job_name(impl Into<String>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::medical_transcription_job_name) / [`set_medical_transcription_job_name(Option<String>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_medical_transcription_job_name): <p>A unique name, chosen by you, for your medical transcription job. The name that you specify is also used as the default name of your transcription output file. If you want to specify a different name for your transcription output, use the <code>OutputKey</code> parameter.</p>  <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account. If you try to create a new job with the same name as an existing job, you get a <code>ConflictException</code> error.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_language_code): <p>The language code that represents the language spoken in the input media file. US English (<code>en-US</code>) is the only valid value for medical transcription jobs. Any other value you enter for language code results in a <code>BadRequestException</code> error.</p>
    ///   - [`media_sample_rate_hertz(i32)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::media_sample_rate_hertz) / [`set_media_sample_rate_hertz(Option<i32>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_media_sample_rate_hertz): <p>The sample rate, in hertz, of the audio track in your input media file.</p>  <p>If you don't specify the media sample rate, Amazon Transcribe Medical determines it for you. If you specify the sample rate, it must match the rate detected by Amazon Transcribe Medical; if there's a mismatch between the value that you specify and the value detected, your job fails. Therefore, in most cases, it's advised to omit <code>MediaSampleRateHertz</code> and let Amazon Transcribe Medical determine the sample rate.</p>
    ///   - [`media_format(MediaFormat)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::media_format) / [`set_media_format(Option<MediaFormat>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_media_format): <p>Specify the format of your input media file.</p>
    ///   - [`media(Media)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::media) / [`set_media(Option<Media>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_media): <p>Describes the Amazon S3 location of the media file you want to use in your request.</p>  <p>For information on supported media formats, refer to the <a href="https://docs.aws.amazon.com/APIReference/API_StartTranscriptionJob.html#transcribe-StartTranscriptionJob-request-MediaFormat">MediaFormat</a> parameter or the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio">Media formats</a> section in the Amazon S3 Developer Guide.</p>
    ///   - [`output_bucket_name(impl Into<String>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::output_bucket_name) / [`set_output_bucket_name(Option<String>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_output_bucket_name): <p>The name of the Amazon S3 bucket where you want your medical transcription output stored. Do not include the <code>S3://</code> prefix of the specified bucket.</p>  <p>If you want your output to go to a sub-folder of this bucket, specify it using the <code>OutputKey</code> parameter; <code>OutputBucketName</code> only accepts the name of a bucket.</p>  <p>For example, if you want your output stored in <code>S3://DOC-EXAMPLE-BUCKET</code>, set <code>OutputBucketName</code> to <code>DOC-EXAMPLE-BUCKET</code>. However, if you want your output stored in <code>S3://DOC-EXAMPLE-BUCKET/test-files/</code>, set <code>OutputBucketName</code> to <code>DOC-EXAMPLE-BUCKET</code> and <code>OutputKey</code> to <code>test-files/</code>.</p>  <p>Note that Amazon Transcribe must have permission to use the specified location. You can change Amazon S3 permissions using the <a href="https://console.aws.amazon.com/s3">Amazon Web Services Management Console</a>. See also <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions Required for IAM User Roles</a>.</p>
    ///   - [`output_key(impl Into<String>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::output_key) / [`set_output_key(Option<String>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_output_key): <p>Use in combination with <code>OutputBucketName</code> to specify the output location of your transcript and, optionally, a unique name for your output file. The default name for your transcription output is the same as the name you specified for your medical transcription job (<code>MedicalTranscriptionJobName</code>).</p>  <p>Here are some examples of how you can use <code>OutputKey</code>:</p>  <ul>   <li> <p>If you specify 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code> and 'my-transcript.json' as the <code>OutputKey</code>, your transcription output path is <code>s3://DOC-EXAMPLE-BUCKET/my-transcript.json</code>.</p> </li>   <li> <p>If you specify 'my-first-transcription' as the <code>MedicalTranscriptionJobName</code>, 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>, and 'my-transcript' as the <code>OutputKey</code>, your transcription output path is <code>s3://DOC-EXAMPLE-BUCKET/my-transcript/my-first-transcription.json</code>.</p> </li>   <li> <p>If you specify 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code> and 'test-files/my-transcript.json' as the <code>OutputKey</code>, your transcription output path is <code>s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript.json</code>.</p> </li>   <li> <p>If you specify 'my-first-transcription' as the <code>MedicalTranscriptionJobName</code>, 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>, and 'test-files/my-transcript' as the <code>OutputKey</code>, your transcription output path is <code>s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript/my-first-transcription.json</code>.</p> </li>  </ul>  <p>If you specify the name of an Amazon S3 bucket sub-folder that doesn't exist, one is created for you.</p>
    ///   - [`output_encryption_kms_key_id(impl Into<String>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::output_encryption_kms_key_id) / [`set_output_encryption_kms_key_id(Option<String>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_output_encryption_kms_key_id): <p>The KMS key you want to use to encrypt your medical transcription output.</p>  <p>If using a key located in the <b>current</b> Amazon Web Services account, you can specify your KMS key in one of four ways:</p>  <ol>   <li> <p>Use the KMS key ID itself. For example, <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>   <li> <p>Use an alias for the KMS key ID. For example, <code>alias/ExampleAlias</code>.</p> </li>   <li> <p>Use the Amazon Resource Name (ARN) for the KMS key ID. For example, <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>   <li> <p>Use the ARN for the KMS key alias. For example, <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p> </li>  </ol>  <p>If using a key located in a <b>different</b> Amazon Web Services account than the current Amazon Web Services account, you can specify your KMS key in one of two ways:</p>  <ol>   <li> <p>Use the ARN for the KMS key ID. For example, <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>   <li> <p>Use the ARN for the KMS key alias. For example, <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p> </li>  </ol>  <p>If you don't specify an encryption key, your output is encrypted with the default Amazon S3 key (SSE-S3).</p>  <p>If you specify a KMS key to encrypt your output, you must also specify an output location using the <code>OutputLocation</code> parameter.</p>  <p>Note that the user making the request must have permission to use the specified KMS key.</p>
    ///   - [`kms_encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::kms_encryption_context) / [`set_kms_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_kms_encryption_context): <p>A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added layer of security for your data. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/key-management.html#kms-context">KMS encryption context</a> and <a href="https://docs.aws.amazon.com/transcribe/latest/dg/symmetric-asymmetric.html">Asymmetric keys in KMS</a>.</p>
    ///   - [`settings(MedicalTranscriptionSetting)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::settings) / [`set_settings(Option<MedicalTranscriptionSetting>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_settings): <p>Specify additional optional settings in your request, including channel identification, alternative transcriptions, and speaker partitioning. You can use that to apply custom vocabularies to your transcription job.</p>
    ///   - [`content_identification_type(MedicalContentIdentificationType)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::content_identification_type) / [`set_content_identification_type(Option<MedicalContentIdentificationType>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_content_identification_type): <p>Labels all personal health information (PHI) identified in your transcript. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/phi-id.html">Identifying personal health information (PHI) in a transcription</a>.</p>
    ///   - [`specialty(Specialty)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::specialty) / [`set_specialty(Option<Specialty>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_specialty): <p>Specify the predominant medical specialty represented in your media. For batch transcriptions, <code>PRIMARYCARE</code> is the only valid value. If you require additional specialties, refer to .</p>
    ///   - [`r#type(Type)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::type) / [`set_type(Option<Type>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_type): <p>Specify whether your input media contains only one person (<code>DICTATION</code>) or contains a conversation between two people (<code>CONVERSATION</code>).</p>  <p>For example, <code>DICTATION</code> could be used for a medical professional wanting to transcribe voice memos; <code>CONVERSATION</code> could be used for transcribing the doctor-patient dialogue during the patient's office visit.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::StartMedicalTranscriptionJob::set_tags): <p>Adds one or more custom tags, each in the form of a key:value pair, to a new medical transcription job at the time you start this new job.</p>  <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
    /// - On success, responds with [`StartMedicalTranscriptionJobOutput`](crate::output::StartMedicalTranscriptionJobOutput) with field(s):
    ///   - [`medical_transcription_job(Option<MedicalTranscriptionJob>)`](crate::output::StartMedicalTranscriptionJobOutput::medical_transcription_job): <p>Provides detailed information about the current medical transcription job, including job status and, if applicable, failure reason.</p>
    /// - On failure, responds with [`SdkError<StartMedicalTranscriptionJobError>`](crate::error::StartMedicalTranscriptionJobError)
    pub fn start_medical_transcription_job(
        &self,
    ) -> crate::client::fluent_builders::StartMedicalTranscriptionJob {
        crate::client::fluent_builders::StartMedicalTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartTranscriptionJob`](crate::client::fluent_builders::StartTranscriptionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`transcription_job_name(impl Into<String>)`](crate::client::fluent_builders::StartTranscriptionJob::transcription_job_name) / [`set_transcription_job_name(Option<String>)`](crate::client::fluent_builders::StartTranscriptionJob::set_transcription_job_name): <p>A unique name, chosen by you, for your transcription job. The name that you specify is also used as the default name of your transcription output file. If you want to specify a different name for your transcription output, use the <code>OutputKey</code> parameter.</p>  <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account. If you try to create a new job with the same name as an existing job, you get a <code>ConflictException</code> error.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::StartTranscriptionJob::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::StartTranscriptionJob::set_language_code): <p>The language code that represents the language spoken in the input media file.</p>  <p>If you're unsure of the language spoken in your media file, consider using <code>IdentifyLanguage</code> or <code>IdentifyMultipleLanguages</code> to enable automatic language identification.</p>  <p>Note that you must include one of <code>LanguageCode</code>, <code>IdentifyLanguage</code>, or <code>IdentifyMultipleLanguages</code> in your request. If you include more than one of these parameters, your transcription job fails.</p>  <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.</p> <note>   <p>To transcribe speech in Modern Standard Arabic (<code>ar-SA</code>), your media file must be encoded at a sample rate of 16,000 Hz or higher.</p>  </note>
    ///   - [`media_sample_rate_hertz(i32)`](crate::client::fluent_builders::StartTranscriptionJob::media_sample_rate_hertz) / [`set_media_sample_rate_hertz(Option<i32>)`](crate::client::fluent_builders::StartTranscriptionJob::set_media_sample_rate_hertz): <p>The sample rate, in hertz, of the audio track in your input media file.</p>  <p>If you don't specify the media sample rate, Amazon Transcribe determines it for you. If you specify the sample rate, it must match the rate detected by Amazon Transcribe. If there's a mismatch between the value that you specify and the value detected, your job fails. In most cases, you can omit <code>MediaSampleRateHertz</code> and let Amazon Transcribe determine the sample rate.</p>
    ///   - [`media_format(MediaFormat)`](crate::client::fluent_builders::StartTranscriptionJob::media_format) / [`set_media_format(Option<MediaFormat>)`](crate::client::fluent_builders::StartTranscriptionJob::set_media_format): <p>Specify the format of your input media file.</p>
    ///   - [`media(Media)`](crate::client::fluent_builders::StartTranscriptionJob::media) / [`set_media(Option<Media>)`](crate::client::fluent_builders::StartTranscriptionJob::set_media): <p>Describes the Amazon S3 location of the media file you want to use in your request.</p>
    ///   - [`output_bucket_name(impl Into<String>)`](crate::client::fluent_builders::StartTranscriptionJob::output_bucket_name) / [`set_output_bucket_name(Option<String>)`](crate::client::fluent_builders::StartTranscriptionJob::set_output_bucket_name): <p>The name of the Amazon S3 bucket where you want your transcription output stored. Do not include the <code>S3://</code> prefix of the specified bucket.</p>  <p>If you want your output to go to a sub-folder of this bucket, specify it using the <code>OutputKey</code> parameter; <code>OutputBucketName</code> only accepts the name of a bucket.</p>  <p>For example, if you want your output stored in <code>S3://DOC-EXAMPLE-BUCKET</code>, set <code>OutputBucketName</code> to <code>DOC-EXAMPLE-BUCKET</code>. However, if you want your output stored in <code>S3://DOC-EXAMPLE-BUCKET/test-files/</code>, set <code>OutputBucketName</code> to <code>DOC-EXAMPLE-BUCKET</code> and <code>OutputKey</code> to <code>test-files/</code>.</p>  <p>Note that Amazon Transcribe must have permission to use the specified location. You can change Amazon S3 permissions using the <a href="https://console.aws.amazon.com/s3">Amazon Web Services Management Console</a>. See also <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions Required for IAM User Roles</a>.</p>  <p>If you don't specify <code>OutputBucketName</code>, your transcript is placed in a service-managed Amazon S3 bucket and you are provided with a URI to access your transcript.</p>
    ///   - [`output_key(impl Into<String>)`](crate::client::fluent_builders::StartTranscriptionJob::output_key) / [`set_output_key(Option<String>)`](crate::client::fluent_builders::StartTranscriptionJob::set_output_key): <p>Use in combination with <code>OutputBucketName</code> to specify the output location of your transcript and, optionally, a unique name for your output file. The default name for your transcription output is the same as the name you specified for your transcription job (<code>TranscriptionJobName</code>).</p>  <p>Here are some examples of how you can use <code>OutputKey</code>:</p>  <ul>   <li> <p>If you specify 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code> and 'my-transcript.json' as the <code>OutputKey</code>, your transcription output path is <code>s3://DOC-EXAMPLE-BUCKET/my-transcript.json</code>.</p> </li>   <li> <p>If you specify 'my-first-transcription' as the <code>TranscriptionJobName</code>, 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>, and 'my-transcript' as the <code>OutputKey</code>, your transcription output path is <code>s3://DOC-EXAMPLE-BUCKET/my-transcript/my-first-transcription.json</code>.</p> </li>   <li> <p>If you specify 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code> and 'test-files/my-transcript.json' as the <code>OutputKey</code>, your transcription output path is <code>s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript.json</code>.</p> </li>   <li> <p>If you specify 'my-first-transcription' as the <code>TranscriptionJobName</code>, 'DOC-EXAMPLE-BUCKET' as the <code>OutputBucketName</code>, and 'test-files/my-transcript' as the <code>OutputKey</code>, your transcription output path is <code>s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript/my-first-transcription.json</code>.</p> </li>  </ul>  <p>If you specify the name of an Amazon S3 bucket sub-folder that doesn't exist, one is created for you.</p>
    ///   - [`output_encryption_kms_key_id(impl Into<String>)`](crate::client::fluent_builders::StartTranscriptionJob::output_encryption_kms_key_id) / [`set_output_encryption_kms_key_id(Option<String>)`](crate::client::fluent_builders::StartTranscriptionJob::set_output_encryption_kms_key_id): <p>The KMS key you want to use to encrypt your transcription output.</p>  <p>If using a key located in the <b>current</b> Amazon Web Services account, you can specify your KMS key in one of four ways:</p>  <ol>   <li> <p>Use the KMS key ID itself. For example, <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>   <li> <p>Use an alias for the KMS key ID. For example, <code>alias/ExampleAlias</code>.</p> </li>   <li> <p>Use the Amazon Resource Name (ARN) for the KMS key ID. For example, <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>   <li> <p>Use the ARN for the KMS key alias. For example, <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p> </li>  </ol>  <p>If using a key located in a <b>different</b> Amazon Web Services account than the current Amazon Web Services account, you can specify your KMS key in one of two ways:</p>  <ol>   <li> <p>Use the ARN for the KMS key ID. For example, <code>arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li>   <li> <p>Use the ARN for the KMS key alias. For example, <code>arn:aws:kms:region:account-ID:alias/ExampleAlias</code>.</p> </li>  </ol>  <p>If you don't specify an encryption key, your output is encrypted with the default Amazon S3 key (SSE-S3).</p>  <p>If you specify a KMS key to encrypt your output, you must also specify an output location using the <code>OutputLocation</code> parameter.</p>  <p>Note that the user making the request must have permission to use the specified KMS key.</p>
    ///   - [`kms_encryption_context(HashMap<String, String>)`](crate::client::fluent_builders::StartTranscriptionJob::kms_encryption_context) / [`set_kms_encryption_context(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartTranscriptionJob::set_kms_encryption_context): <p>A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added layer of security for your data. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/key-management.html#kms-context">KMS encryption context</a> and <a href="https://docs.aws.amazon.com/transcribe/latest/dg/symmetric-asymmetric.html">Asymmetric keys in KMS</a>.</p>
    ///   - [`settings(Settings)`](crate::client::fluent_builders::StartTranscriptionJob::settings) / [`set_settings(Option<Settings>)`](crate::client::fluent_builders::StartTranscriptionJob::set_settings): <p>Specify additional optional settings in your request, including channel identification, alternative transcriptions, speaker partitioning. You can use that to apply custom vocabularies and vocabulary filters.</p>  <p>If you want to include a custom vocabulary or a custom vocabulary filter (or both) with your request but <b>do not</b> want to use automatic language identification, use <code>Settings</code> with the <code>VocabularyName</code> or <code>VocabularyFilterName</code> (or both) sub-parameter.</p>  <p>If you're using automatic language identification with your request and want to include a custom language model, a custom vocabulary, or a custom vocabulary filter, use instead the <code></code> parameter with the <code>LanguageModelName</code>, <code>VocabularyName</code> or <code>VocabularyFilterName</code> sub-parameters.</p>
    ///   - [`model_settings(ModelSettings)`](crate::client::fluent_builders::StartTranscriptionJob::model_settings) / [`set_model_settings(Option<ModelSettings>)`](crate::client::fluent_builders::StartTranscriptionJob::set_model_settings): <p>Specify the custom language model you want to include with your transcription job. If you include <code>ModelSettings</code> in your request, you must include the <code>LanguageModelName</code> sub-parameter.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html">Custom language models</a>.</p>
    ///   - [`job_execution_settings(JobExecutionSettings)`](crate::client::fluent_builders::StartTranscriptionJob::job_execution_settings) / [`set_job_execution_settings(Option<JobExecutionSettings>)`](crate::client::fluent_builders::StartTranscriptionJob::set_job_execution_settings): <p>Makes it possible to control how your transcription job is processed. Currently, the only <code>JobExecutionSettings</code> modification you can choose is enabling job queueing using the <code>AllowDeferredExecution</code> sub-parameter.</p>  <p>If you include <code>JobExecutionSettings</code> in your request, you must also include the sub-parameters: <code>AllowDeferredExecution</code> and <code>DataAccessRoleArn</code>.</p>
    ///   - [`content_redaction(ContentRedaction)`](crate::client::fluent_builders::StartTranscriptionJob::content_redaction) / [`set_content_redaction(Option<ContentRedaction>)`](crate::client::fluent_builders::StartTranscriptionJob::set_content_redaction): <p>Makes it possible to redact or flag specified personally identifiable information (PII) in your transcript. If you use <code>ContentRedaction</code>, you must also include the sub-parameters: <code>PiiEntityTypes</code>, <code>RedactionOutput</code>, and <code>RedactionType</code>.</p>
    ///   - [`identify_language(bool)`](crate::client::fluent_builders::StartTranscriptionJob::identify_language) / [`set_identify_language(Option<bool>)`](crate::client::fluent_builders::StartTranscriptionJob::set_identify_language): <p>Enables automatic language identification in your transcription job request. Use this parameter if your media file contains only one language. If your media contains multiple languages, use <code>IdentifyMultipleLanguages</code> instead.</p>  <p>If you include <code>IdentifyLanguage</code>, you can optionally include a list of language codes, using <code>LanguageOptions</code>, that you think may be present in your media file. Including <code>LanguageOptions</code> restricts <code>IdentifyLanguage</code> to only the language options that you specify, which can improve transcription accuracy.</p>  <p>If you want to apply a custom language model, a custom vocabulary, or a custom vocabulary filter to your automatic language identification request, include <code>LanguageIdSettings</code> with the relevant sub-parameters (<code>VocabularyName</code>, <code>LanguageModelName</code>, and <code>VocabularyFilterName</code>). If you include <code>LanguageIdSettings</code>, also include <code>LanguageOptions</code>.</p>  <p>Note that you must include one of <code>LanguageCode</code>, <code>IdentifyLanguage</code>, or <code>IdentifyMultipleLanguages</code> in your request. If you include more than one of these parameters, your transcription job fails.</p>
    ///   - [`identify_multiple_languages(bool)`](crate::client::fluent_builders::StartTranscriptionJob::identify_multiple_languages) / [`set_identify_multiple_languages(Option<bool>)`](crate::client::fluent_builders::StartTranscriptionJob::set_identify_multiple_languages): <p>Enables automatic multi-language identification in your transcription job request. Use this parameter if your media file contains more than one language. If your media contains only one language, use <code>IdentifyLanguage</code> instead.</p>  <p>If you include <code>IdentifyMultipleLanguages</code>, you can optionally include a list of language codes, using <code>LanguageOptions</code>, that you think may be present in your media file. Including <code>LanguageOptions</code> restricts <code>IdentifyLanguage</code> to only the language options that you specify, which can improve transcription accuracy.</p>  <p>If you want to apply a custom vocabulary or a custom vocabulary filter to your automatic language identification request, include <code>LanguageIdSettings</code> with the relevant sub-parameters (<code>VocabularyName</code> and <code>VocabularyFilterName</code>). If you include <code>LanguageIdSettings</code>, also include <code>LanguageOptions</code>.</p>  <p>Note that you must include one of <code>LanguageCode</code>, <code>IdentifyLanguage</code>, or <code>IdentifyMultipleLanguages</code> in your request. If you include more than one of these parameters, your transcription job fails.</p>
    ///   - [`language_options(Vec<LanguageCode>)`](crate::client::fluent_builders::StartTranscriptionJob::language_options) / [`set_language_options(Option<Vec<LanguageCode>>)`](crate::client::fluent_builders::StartTranscriptionJob::set_language_options): <p>You can specify two or more language codes that represent the languages you think may be present in your media. Including more than five is not recommended. If you're unsure what languages are present, do not include this parameter.</p>  <p>If you include <code>LanguageOptions</code> in your request, you must also include <code>IdentifyLanguage</code>.</p>  <p>For more information, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a>.</p>  <p>To transcribe speech in Modern Standard Arabic (<code>ar-SA</code>), your media file must be encoded at a sample rate of 16,000 Hz or higher.</p>
    ///   - [`subtitles(Subtitles)`](crate::client::fluent_builders::StartTranscriptionJob::subtitles) / [`set_subtitles(Option<Subtitles>)`](crate::client::fluent_builders::StartTranscriptionJob::set_subtitles): <p>Produces subtitle files for your input media. You can specify WebVTT (*.vtt) and SubRip (*.srt) formats.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::StartTranscriptionJob::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::StartTranscriptionJob::set_tags): <p>Adds one or more custom tags, each in the form of a key:value pair, to a new transcription job at the time you start this new job.</p>  <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
    ///   - [`language_id_settings(HashMap<LanguageCode, LanguageIdSettings>)`](crate::client::fluent_builders::StartTranscriptionJob::language_id_settings) / [`set_language_id_settings(Option<HashMap<LanguageCode, LanguageIdSettings>>)`](crate::client::fluent_builders::StartTranscriptionJob::set_language_id_settings): <p>If using automatic language identification in your request and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary filter, include <code>LanguageIdSettings</code> with the relevant sub-parameters (<code>VocabularyName</code>, <code>LanguageModelName</code>, and <code>VocabularyFilterName</code>). Note that multi-language identification (<code>IdentifyMultipleLanguages</code>) doesn't support custom language models.</p>  <p> <code>LanguageIdSettings</code> supports two to five language codes. Each language code you include can have an associated custom language model, custom vocabulary, and custom vocabulary filter. The language codes that you specify must match the languages of the associated custom language models, custom vocabularies, and custom vocabulary filters.</p>  <p>It's recommended that you include <code>LanguageOptions</code> when using <code>LanguageIdSettings</code> to ensure that the correct language dialect is identified. For example, if you specify a custom vocabulary that is in <code>en-US</code> but Amazon Transcribe determines that the language spoken in your media is <code>en-AU</code>, your custom vocabulary <i>is not</i> applied to your transcription. If you include <code>LanguageOptions</code> and include <code>en-US</code> as the only English language dialect, your custom vocabulary <i>is</i> applied to your transcription.</p>  <p>If you want to include a custom language model with your request but <b>do not</b> want to use automatic language identification, use instead the <code></code> parameter with the <code>LanguageModelName</code> sub-parameter. If you want to include a custom vocabulary or a custom vocabulary filter (or both) with your request but <b>do not</b> want to use automatic language identification, use instead the <code></code> parameter with the <code>VocabularyName</code> or <code>VocabularyFilterName</code> (or both) sub-parameter.</p>
    /// - On success, responds with [`StartTranscriptionJobOutput`](crate::output::StartTranscriptionJobOutput) with field(s):
    ///   - [`transcription_job(Option<TranscriptionJob>)`](crate::output::StartTranscriptionJobOutput::transcription_job): <p>Provides detailed information about the current transcription job, including job status and, if applicable, failure reason.</p>
    /// - On failure, responds with [`SdkError<StartTranscriptionJobError>`](crate::error::StartTranscriptionJobError)
    pub fn start_transcription_job(&self) -> crate::client::fluent_builders::StartTranscriptionJob {
        crate::client::fluent_builders::StartTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource you want to tag. ARNs have the format <code>arn:partition:service:region:account-id:resource-type/resource-id</code>.</p>  <p>For example, <code>arn:aws:transcribe:us-west-2:111122223333:transcription-job/transcription-job-name</code>.</p>  <p>Valid values for <code>resource-type</code> are: <code>transcription-job</code>, <code>medical-transcription-job</code>, <code>vocabulary</code>, <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and <code>language-model</code>.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>Adds one or more custom tags, each in the form of a key:value pair, to the specified resource.</p>  <p>To learn more about using tags with Amazon Transcribe, refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html">Tagging resources</a>.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to remove tags from. ARNs have the format <code>arn:partition:service:region:account-id:resource-type/resource-id</code>.</p>  <p>For example, <code>arn:aws:transcribe:us-west-2:111122223333:transcription-job/transcription-job-name</code>.</p>  <p>Valid values for <code>resource-type</code> are: <code>transcription-job</code>, <code>medical-transcription-job</code>, <code>vocabulary</code>, <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and <code>language-model</code>.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>Removes the specified tag keys from the specified Amazon Transcribe resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCallAnalyticsCategory`](crate::client::fluent_builders::UpdateCallAnalyticsCategory) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`category_name(impl Into<String>)`](crate::client::fluent_builders::UpdateCallAnalyticsCategory::category_name) / [`set_category_name(Option<String>)`](crate::client::fluent_builders::UpdateCallAnalyticsCategory::set_category_name): <p>The name of the Call Analytics category you want to update. Category names are case sensitive.</p>
    ///   - [`rules(Vec<Rule>)`](crate::client::fluent_builders::UpdateCallAnalyticsCategory::rules) / [`set_rules(Option<Vec<Rule>>)`](crate::client::fluent_builders::UpdateCallAnalyticsCategory::set_rules): <p>The rules used for the updated Call Analytics category. The rules you provide in this field replace the ones that are currently being used in the specified category.</p>
    ///   - [`input_type(InputType)`](crate::client::fluent_builders::UpdateCallAnalyticsCategory::input_type) / [`set_input_type(Option<InputType>)`](crate::client::fluent_builders::UpdateCallAnalyticsCategory::set_input_type): <p>Choose whether you want to update a streaming or a batch Call Analytics category. The input type you specify must match the input type specified when the category was created. For example, if you created a category with the <code>POST_CALL</code> input type, you must use <code>POST_CALL</code> as the input type when updating this category.</p>
    /// - On success, responds with [`UpdateCallAnalyticsCategoryOutput`](crate::output::UpdateCallAnalyticsCategoryOutput) with field(s):
    ///   - [`category_properties(Option<CategoryProperties>)`](crate::output::UpdateCallAnalyticsCategoryOutput::category_properties): <p>Provides you with the properties of the Call Analytics category you specified in your <code>UpdateCallAnalyticsCategory</code> request.</p>
    /// - On failure, responds with [`SdkError<UpdateCallAnalyticsCategoryError>`](crate::error::UpdateCallAnalyticsCategoryError)
    pub fn update_call_analytics_category(
        &self,
    ) -> crate::client::fluent_builders::UpdateCallAnalyticsCategory {
        crate::client::fluent_builders::UpdateCallAnalyticsCategory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateMedicalVocabulary`](crate::client::fluent_builders::UpdateMedicalVocabulary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::UpdateMedicalVocabulary::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::UpdateMedicalVocabulary::set_vocabulary_name): <p>The name of the custom medical vocabulary you want to update. Custom medical vocabulary names are case sensitive.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::UpdateMedicalVocabulary::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::UpdateMedicalVocabulary::set_language_code): <p>The language code that represents the language of the entries in the custom vocabulary you want to update. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    ///   - [`vocabulary_file_uri(impl Into<String>)`](crate::client::fluent_builders::UpdateMedicalVocabulary::vocabulary_file_uri) / [`set_vocabulary_file_uri(Option<String>)`](crate::client::fluent_builders::UpdateMedicalVocabulary::set_vocabulary_file_uri): <p>The Amazon S3 location of the text file that contains your custom medical vocabulary. The URI must be located in the same Amazon Web Services Region as the resource you're calling.</p>  <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code> </p>
    /// - On success, responds with [`UpdateMedicalVocabularyOutput`](crate::output::UpdateMedicalVocabularyOutput) with field(s):
    ///   - [`vocabulary_name(Option<String>)`](crate::output::UpdateMedicalVocabularyOutput::vocabulary_name): <p>The name of the updated custom medical vocabulary.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::UpdateMedicalVocabularyOutput::language_code): <p>The language code you selected for your custom medical vocabulary. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::output::UpdateMedicalVocabularyOutput::last_modified_time): <p>The date and time the specified custom medical vocabulary was last updated.</p>  <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    ///   - [`vocabulary_state(Option<VocabularyState>)`](crate::output::UpdateMedicalVocabularyOutput::vocabulary_state): <p>The processing state of your custom medical vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartMedicalTranscriptionJob</code> request.</p>
    /// - On failure, responds with [`SdkError<UpdateMedicalVocabularyError>`](crate::error::UpdateMedicalVocabularyError)
    pub fn update_medical_vocabulary(
        &self,
    ) -> crate::client::fluent_builders::UpdateMedicalVocabulary {
        crate::client::fluent_builders::UpdateMedicalVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateVocabulary`](crate::client::fluent_builders::UpdateVocabulary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::UpdateVocabulary::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::UpdateVocabulary::set_vocabulary_name): <p>The name of the custom vocabulary you want to update. Custom vocabulary names are case sensitive.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::UpdateVocabulary::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::UpdateVocabulary::set_language_code): <p>The language code that represents the language of the entries in the custom vocabulary you want to update. Each custom vocabulary must contain terms in only one language.</p>  <p>A custom vocabulary can only be used to transcribe files in the same language as the custom vocabulary. For example, if you create a custom vocabulary using US English (<code>en-US</code>), you can only apply this custom vocabulary to files that contain English audio.</p>  <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.</p>
    ///   - [`phrases(Vec<String>)`](crate::client::fluent_builders::UpdateVocabulary::phrases) / [`set_phrases(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateVocabulary::set_phrases): <p>Use this parameter if you want to update your custom vocabulary by including all desired terms, as comma-separated values, within your request. The other option for updating your custom vocabulary is to save your entries in a text file and upload them to an Amazon S3 bucket, then specify the location of your file using the <code>VocabularyFileUri</code> parameter.</p>  <p>Note that if you include <code>Phrases</code> in your request, you cannot use <code>VocabularyFileUri</code>; you must choose one or the other.</p>  <p>Each language has a character set that contains all allowed characters for that specific language. If you use unsupported characters, your custom vocabulary filter request fails. Refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for Custom Vocabularies</a> to get the character set for your language.</p>
    ///   - [`vocabulary_file_uri(impl Into<String>)`](crate::client::fluent_builders::UpdateVocabulary::vocabulary_file_uri) / [`set_vocabulary_file_uri(Option<String>)`](crate::client::fluent_builders::UpdateVocabulary::set_vocabulary_file_uri): <p>The Amazon S3 location of the text file that contains your custom vocabulary. The URI must be located in the same Amazon Web Services Region as the resource you're calling.</p>  <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code> </p>  <p>Note that if you include <code>VocabularyFileUri</code> in your request, you cannot use the <code>Phrases</code> flag; you must choose one or the other.</p>
    /// - On success, responds with [`UpdateVocabularyOutput`](crate::output::UpdateVocabularyOutput) with field(s):
    ///   - [`vocabulary_name(Option<String>)`](crate::output::UpdateVocabularyOutput::vocabulary_name): <p>The name of the updated custom vocabulary.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::UpdateVocabularyOutput::language_code): <p>The language code you selected for your custom vocabulary.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::output::UpdateVocabularyOutput::last_modified_time): <p>The date and time the specified custom vocabulary was last updated.</p>  <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    ///   - [`vocabulary_state(Option<VocabularyState>)`](crate::output::UpdateVocabularyOutput::vocabulary_state): <p>The processing state of your custom vocabulary. If the state is <code>READY</code>, you can use the custom vocabulary in a <code>StartTranscriptionJob</code> request.</p>
    /// - On failure, responds with [`SdkError<UpdateVocabularyError>`](crate::error::UpdateVocabularyError)
    pub fn update_vocabulary(&self) -> crate::client::fluent_builders::UpdateVocabulary {
        crate::client::fluent_builders::UpdateVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateVocabularyFilter`](crate::client::fluent_builders::UpdateVocabularyFilter) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vocabulary_filter_name(impl Into<String>)`](crate::client::fluent_builders::UpdateVocabularyFilter::vocabulary_filter_name) / [`set_vocabulary_filter_name(Option<String>)`](crate::client::fluent_builders::UpdateVocabularyFilter::set_vocabulary_filter_name): <p>The name of the custom vocabulary filter you want to update. Custom vocabulary filter names are case sensitive.</p>
    ///   - [`words(Vec<String>)`](crate::client::fluent_builders::UpdateVocabularyFilter::words) / [`set_words(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateVocabularyFilter::set_words): <p>Use this parameter if you want to update your custom vocabulary filter by including all desired terms, as comma-separated values, within your request. The other option for updating your vocabulary filter is to save your entries in a text file and upload them to an Amazon S3 bucket, then specify the location of your file using the <code>VocabularyFilterFileUri</code> parameter.</p>  <p>Note that if you include <code>Words</code> in your request, you cannot use <code>VocabularyFilterFileUri</code>; you must choose one or the other.</p>  <p>Each language has a character set that contains all allowed characters for that specific language. If you use unsupported characters, your custom vocabulary filter request fails. Refer to <a href="https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html">Character Sets for Custom Vocabularies</a> to get the character set for your language.</p>
    ///   - [`vocabulary_filter_file_uri(impl Into<String>)`](crate::client::fluent_builders::UpdateVocabularyFilter::vocabulary_filter_file_uri) / [`set_vocabulary_filter_file_uri(Option<String>)`](crate::client::fluent_builders::UpdateVocabularyFilter::set_vocabulary_filter_file_uri): <p>The Amazon S3 location of the text file that contains your custom vocabulary filter terms. The URI must be located in the same Amazon Web Services Region as the resource you're calling.</p>  <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-filter-file.txt</code> </p>  <p>Note that if you include <code>VocabularyFilterFileUri</code> in your request, you cannot use <code>Words</code>; you must choose one or the other.</p>
    /// - On success, responds with [`UpdateVocabularyFilterOutput`](crate::output::UpdateVocabularyFilterOutput) with field(s):
    ///   - [`vocabulary_filter_name(Option<String>)`](crate::output::UpdateVocabularyFilterOutput::vocabulary_filter_name): <p>The name of the updated custom vocabulary filter.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::UpdateVocabularyFilterOutput::language_code): <p>The language code you selected for your custom vocabulary filter.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::output::UpdateVocabularyFilterOutput::last_modified_time): <p>The date and time the specified custom vocabulary filter was last updated.</p>  <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    /// - On failure, responds with [`SdkError<UpdateVocabularyFilterError>`](crate::error::UpdateVocabularyFilterError)
    pub fn update_vocabulary_filter(
        &self,
    ) -> crate::client::fluent_builders::UpdateVocabularyFilter {
        crate::client::fluent_builders::UpdateVocabularyFilter::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
