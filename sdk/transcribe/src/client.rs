// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = aws_smithy_client::erase::DynConnector,
    M = crate::middleware::DefaultMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    client: aws_smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// Client for Amazon Transcribe Service
///
/// Client for invoking operations on Amazon Transcribe Service. Each operation on Amazon Transcribe Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_transcribe::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::RetryConfig;
/// # async fn docs() {
///     let shared_config = aws_config::load_from_env().await;
///     let config = aws_sdk_transcribe::config::Builder::from(&shared_config)
///         .retry_config(RetryConfig::disabled())
///         .build();
///     let client = aws_sdk_transcribe::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client<
    C = aws_smithy_client::erase::DynConnector,
    M = crate::middleware::DefaultMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl<C, M, R> From<aws_smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: aws_smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    /// Creates a client with the given service configuration.
    pub fn with_config(client: aws_smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: aws_smithy_client::bounds::SmithyConnector,
    M: aws_smithy_client::bounds::SmithyMiddleware<C>,
    R: aws_smithy_client::retry::NewRequestPolicy,
{
    /// Constructs a fluent builder for the `CreateCallAnalyticsCategory` operation.
    ///
    /// See [`CreateCallAnalyticsCategory`](crate::client::fluent_builders::CreateCallAnalyticsCategory) for more information about the
    /// operation and its arguments.
    pub fn create_call_analytics_category(
        &self,
    ) -> fluent_builders::CreateCallAnalyticsCategory<C, M, R> {
        fluent_builders::CreateCallAnalyticsCategory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateLanguageModel` operation.
    ///
    /// See [`CreateLanguageModel`](crate::client::fluent_builders::CreateLanguageModel) for more information about the
    /// operation and its arguments.
    pub fn create_language_model(&self) -> fluent_builders::CreateLanguageModel<C, M, R> {
        fluent_builders::CreateLanguageModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateMedicalVocabulary` operation.
    ///
    /// See [`CreateMedicalVocabulary`](crate::client::fluent_builders::CreateMedicalVocabulary) for more information about the
    /// operation and its arguments.
    pub fn create_medical_vocabulary(&self) -> fluent_builders::CreateMedicalVocabulary<C, M, R> {
        fluent_builders::CreateMedicalVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateVocabulary` operation.
    ///
    /// See [`CreateVocabulary`](crate::client::fluent_builders::CreateVocabulary) for more information about the
    /// operation and its arguments.
    pub fn create_vocabulary(&self) -> fluent_builders::CreateVocabulary<C, M, R> {
        fluent_builders::CreateVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateVocabularyFilter` operation.
    ///
    /// See [`CreateVocabularyFilter`](crate::client::fluent_builders::CreateVocabularyFilter) for more information about the
    /// operation and its arguments.
    pub fn create_vocabulary_filter(&self) -> fluent_builders::CreateVocabularyFilter<C, M, R> {
        fluent_builders::CreateVocabularyFilter::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteCallAnalyticsCategory` operation.
    ///
    /// See [`DeleteCallAnalyticsCategory`](crate::client::fluent_builders::DeleteCallAnalyticsCategory) for more information about the
    /// operation and its arguments.
    pub fn delete_call_analytics_category(
        &self,
    ) -> fluent_builders::DeleteCallAnalyticsCategory<C, M, R> {
        fluent_builders::DeleteCallAnalyticsCategory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteCallAnalyticsJob` operation.
    ///
    /// See [`DeleteCallAnalyticsJob`](crate::client::fluent_builders::DeleteCallAnalyticsJob) for more information about the
    /// operation and its arguments.
    pub fn delete_call_analytics_job(&self) -> fluent_builders::DeleteCallAnalyticsJob<C, M, R> {
        fluent_builders::DeleteCallAnalyticsJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteLanguageModel` operation.
    ///
    /// See [`DeleteLanguageModel`](crate::client::fluent_builders::DeleteLanguageModel) for more information about the
    /// operation and its arguments.
    pub fn delete_language_model(&self) -> fluent_builders::DeleteLanguageModel<C, M, R> {
        fluent_builders::DeleteLanguageModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteMedicalTranscriptionJob` operation.
    ///
    /// See [`DeleteMedicalTranscriptionJob`](crate::client::fluent_builders::DeleteMedicalTranscriptionJob) for more information about the
    /// operation and its arguments.
    pub fn delete_medical_transcription_job(
        &self,
    ) -> fluent_builders::DeleteMedicalTranscriptionJob<C, M, R> {
        fluent_builders::DeleteMedicalTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteMedicalVocabulary` operation.
    ///
    /// See [`DeleteMedicalVocabulary`](crate::client::fluent_builders::DeleteMedicalVocabulary) for more information about the
    /// operation and its arguments.
    pub fn delete_medical_vocabulary(&self) -> fluent_builders::DeleteMedicalVocabulary<C, M, R> {
        fluent_builders::DeleteMedicalVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteTranscriptionJob` operation.
    ///
    /// See [`DeleteTranscriptionJob`](crate::client::fluent_builders::DeleteTranscriptionJob) for more information about the
    /// operation and its arguments.
    pub fn delete_transcription_job(&self) -> fluent_builders::DeleteTranscriptionJob<C, M, R> {
        fluent_builders::DeleteTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteVocabulary` operation.
    ///
    /// See [`DeleteVocabulary`](crate::client::fluent_builders::DeleteVocabulary) for more information about the
    /// operation and its arguments.
    pub fn delete_vocabulary(&self) -> fluent_builders::DeleteVocabulary<C, M, R> {
        fluent_builders::DeleteVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteVocabularyFilter` operation.
    ///
    /// See [`DeleteVocabularyFilter`](crate::client::fluent_builders::DeleteVocabularyFilter) for more information about the
    /// operation and its arguments.
    pub fn delete_vocabulary_filter(&self) -> fluent_builders::DeleteVocabularyFilter<C, M, R> {
        fluent_builders::DeleteVocabularyFilter::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeLanguageModel` operation.
    ///
    /// See [`DescribeLanguageModel`](crate::client::fluent_builders::DescribeLanguageModel) for more information about the
    /// operation and its arguments.
    pub fn describe_language_model(&self) -> fluent_builders::DescribeLanguageModel<C, M, R> {
        fluent_builders::DescribeLanguageModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetCallAnalyticsCategory` operation.
    ///
    /// See [`GetCallAnalyticsCategory`](crate::client::fluent_builders::GetCallAnalyticsCategory) for more information about the
    /// operation and its arguments.
    pub fn get_call_analytics_category(
        &self,
    ) -> fluent_builders::GetCallAnalyticsCategory<C, M, R> {
        fluent_builders::GetCallAnalyticsCategory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetCallAnalyticsJob` operation.
    ///
    /// See [`GetCallAnalyticsJob`](crate::client::fluent_builders::GetCallAnalyticsJob) for more information about the
    /// operation and its arguments.
    pub fn get_call_analytics_job(&self) -> fluent_builders::GetCallAnalyticsJob<C, M, R> {
        fluent_builders::GetCallAnalyticsJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetMedicalTranscriptionJob` operation.
    ///
    /// See [`GetMedicalTranscriptionJob`](crate::client::fluent_builders::GetMedicalTranscriptionJob) for more information about the
    /// operation and its arguments.
    pub fn get_medical_transcription_job(
        &self,
    ) -> fluent_builders::GetMedicalTranscriptionJob<C, M, R> {
        fluent_builders::GetMedicalTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetMedicalVocabulary` operation.
    ///
    /// See [`GetMedicalVocabulary`](crate::client::fluent_builders::GetMedicalVocabulary) for more information about the
    /// operation and its arguments.
    pub fn get_medical_vocabulary(&self) -> fluent_builders::GetMedicalVocabulary<C, M, R> {
        fluent_builders::GetMedicalVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetTranscriptionJob` operation.
    ///
    /// See [`GetTranscriptionJob`](crate::client::fluent_builders::GetTranscriptionJob) for more information about the
    /// operation and its arguments.
    pub fn get_transcription_job(&self) -> fluent_builders::GetTranscriptionJob<C, M, R> {
        fluent_builders::GetTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetVocabulary` operation.
    ///
    /// See [`GetVocabulary`](crate::client::fluent_builders::GetVocabulary) for more information about the
    /// operation and its arguments.
    pub fn get_vocabulary(&self) -> fluent_builders::GetVocabulary<C, M, R> {
        fluent_builders::GetVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetVocabularyFilter` operation.
    ///
    /// See [`GetVocabularyFilter`](crate::client::fluent_builders::GetVocabularyFilter) for more information about the
    /// operation and its arguments.
    pub fn get_vocabulary_filter(&self) -> fluent_builders::GetVocabularyFilter<C, M, R> {
        fluent_builders::GetVocabularyFilter::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListCallAnalyticsCategories` operation.
    ///
    /// See [`ListCallAnalyticsCategories`](crate::client::fluent_builders::ListCallAnalyticsCategories) for more information about the
    /// operation and its arguments.
    pub fn list_call_analytics_categories(
        &self,
    ) -> fluent_builders::ListCallAnalyticsCategories<C, M, R> {
        fluent_builders::ListCallAnalyticsCategories::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListCallAnalyticsJobs` operation.
    ///
    /// See [`ListCallAnalyticsJobs`](crate::client::fluent_builders::ListCallAnalyticsJobs) for more information about the
    /// operation and its arguments.
    pub fn list_call_analytics_jobs(&self) -> fluent_builders::ListCallAnalyticsJobs<C, M, R> {
        fluent_builders::ListCallAnalyticsJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListLanguageModels` operation.
    ///
    /// See [`ListLanguageModels`](crate::client::fluent_builders::ListLanguageModels) for more information about the
    /// operation and its arguments.
    pub fn list_language_models(&self) -> fluent_builders::ListLanguageModels<C, M, R> {
        fluent_builders::ListLanguageModels::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListMedicalTranscriptionJobs` operation.
    ///
    /// See [`ListMedicalTranscriptionJobs`](crate::client::fluent_builders::ListMedicalTranscriptionJobs) for more information about the
    /// operation and its arguments.
    pub fn list_medical_transcription_jobs(
        &self,
    ) -> fluent_builders::ListMedicalTranscriptionJobs<C, M, R> {
        fluent_builders::ListMedicalTranscriptionJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListMedicalVocabularies` operation.
    ///
    /// See [`ListMedicalVocabularies`](crate::client::fluent_builders::ListMedicalVocabularies) for more information about the
    /// operation and its arguments.
    pub fn list_medical_vocabularies(&self) -> fluent_builders::ListMedicalVocabularies<C, M, R> {
        fluent_builders::ListMedicalVocabularies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListTagsForResource` operation.
    ///
    /// See [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) for more information about the
    /// operation and its arguments.
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C, M, R> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListTranscriptionJobs` operation.
    ///
    /// See [`ListTranscriptionJobs`](crate::client::fluent_builders::ListTranscriptionJobs) for more information about the
    /// operation and its arguments.
    pub fn list_transcription_jobs(&self) -> fluent_builders::ListTranscriptionJobs<C, M, R> {
        fluent_builders::ListTranscriptionJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListVocabularies` operation.
    ///
    /// See [`ListVocabularies`](crate::client::fluent_builders::ListVocabularies) for more information about the
    /// operation and its arguments.
    pub fn list_vocabularies(&self) -> fluent_builders::ListVocabularies<C, M, R> {
        fluent_builders::ListVocabularies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListVocabularyFilters` operation.
    ///
    /// See [`ListVocabularyFilters`](crate::client::fluent_builders::ListVocabularyFilters) for more information about the
    /// operation and its arguments.
    pub fn list_vocabulary_filters(&self) -> fluent_builders::ListVocabularyFilters<C, M, R> {
        fluent_builders::ListVocabularyFilters::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `StartCallAnalyticsJob` operation.
    ///
    /// See [`StartCallAnalyticsJob`](crate::client::fluent_builders::StartCallAnalyticsJob) for more information about the
    /// operation and its arguments.
    pub fn start_call_analytics_job(&self) -> fluent_builders::StartCallAnalyticsJob<C, M, R> {
        fluent_builders::StartCallAnalyticsJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `StartMedicalTranscriptionJob` operation.
    ///
    /// See [`StartMedicalTranscriptionJob`](crate::client::fluent_builders::StartMedicalTranscriptionJob) for more information about the
    /// operation and its arguments.
    pub fn start_medical_transcription_job(
        &self,
    ) -> fluent_builders::StartMedicalTranscriptionJob<C, M, R> {
        fluent_builders::StartMedicalTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `StartTranscriptionJob` operation.
    ///
    /// See [`StartTranscriptionJob`](crate::client::fluent_builders::StartTranscriptionJob) for more information about the
    /// operation and its arguments.
    pub fn start_transcription_job(&self) -> fluent_builders::StartTranscriptionJob<C, M, R> {
        fluent_builders::StartTranscriptionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `TagResource` operation.
    ///
    /// See [`TagResource`](crate::client::fluent_builders::TagResource) for more information about the
    /// operation and its arguments.
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UntagResource` operation.
    ///
    /// See [`UntagResource`](crate::client::fluent_builders::UntagResource) for more information about the
    /// operation and its arguments.
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateCallAnalyticsCategory` operation.
    ///
    /// See [`UpdateCallAnalyticsCategory`](crate::client::fluent_builders::UpdateCallAnalyticsCategory) for more information about the
    /// operation and its arguments.
    pub fn update_call_analytics_category(
        &self,
    ) -> fluent_builders::UpdateCallAnalyticsCategory<C, M, R> {
        fluent_builders::UpdateCallAnalyticsCategory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateMedicalVocabulary` operation.
    ///
    /// See [`UpdateMedicalVocabulary`](crate::client::fluent_builders::UpdateMedicalVocabulary) for more information about the
    /// operation and its arguments.
    pub fn update_medical_vocabulary(&self) -> fluent_builders::UpdateMedicalVocabulary<C, M, R> {
        fluent_builders::UpdateMedicalVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateVocabulary` operation.
    ///
    /// See [`UpdateVocabulary`](crate::client::fluent_builders::UpdateVocabulary) for more information about the
    /// operation and its arguments.
    pub fn update_vocabulary(&self) -> fluent_builders::UpdateVocabulary<C, M, R> {
        fluent_builders::UpdateVocabulary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UpdateVocabularyFilter` operation.
    ///
    /// See [`UpdateVocabularyFilter`](crate::client::fluent_builders::UpdateVocabularyFilter) for more information about the
    /// operation and its arguments.
    pub fn update_vocabulary_filter(&self) -> fluent_builders::UpdateVocabularyFilter<C, M, R> {
        fluent_builders::UpdateVocabularyFilter::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `CreateCallAnalyticsCategory`.
    ///
    /// <p>Creates an analytics category. Amazon Transcribe applies the conditions specified by your
    /// analytics categories to your call analytics jobs. For each analytics category, you specify one or
    /// more rules. For example, you can specify a rule that the customer sentiment was neutral or
    /// negative within that category. If you start a call analytics job, Amazon Transcribe applies the
    /// category to the analytics job that you've specified.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateCallAnalyticsCategory<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_call_analytics_category_input::Builder,
    }
    impl<C, M, R> CreateCallAnalyticsCategory<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateCallAnalyticsCategory`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateCallAnalyticsCategoryOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateCallAnalyticsCategoryError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateCallAnalyticsCategoryInputOperationOutputAlias,
                crate::output::CreateCallAnalyticsCategoryOutput,
                crate::error::CreateCallAnalyticsCategoryError,
                crate::input::CreateCallAnalyticsCategoryInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name that you choose for your category when you create it. </p>
        pub fn category_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.category_name(inp);
            self
        }
        /// <p>The name that you choose for your category when you create it. </p>
        pub fn set_category_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_category_name(input);
            self
        }
        /// Appends an item to `Rules`.
        ///
        /// To override the contents of this collection use [`set_rules`](Self::set_rules).
        ///
        /// <p>To create a category, you must specify between 1 and 20 rules. For each rule, you specify a
        /// filter to be applied to the attributes of the call. For example, you can specify a sentiment
        /// filter to detect if the customer's sentiment was negative or neutral. </p>
        pub fn rules(mut self, inp: impl Into<crate::model::Rule>) -> Self {
            self.inner = self.inner.rules(inp);
            self
        }
        /// <p>To create a category, you must specify between 1 and 20 rules. For each rule, you specify a
        /// filter to be applied to the attributes of the call. For example, you can specify a sentiment
        /// filter to detect if the customer's sentiment was negative or neutral. </p>
        pub fn set_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Rule>>,
        ) -> Self {
            self.inner = self.inner.set_rules(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateLanguageModel`.
    ///
    /// <p>Creates a new custom language model. Use Amazon S3 prefixes to provide the location of your input files. The time it
    /// takes to create your model depends on the size of your training data.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateLanguageModel<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_language_model_input::Builder,
    }
    impl<C, M, R> CreateLanguageModel<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateLanguageModel`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateLanguageModelOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateLanguageModelError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateLanguageModelInputOperationOutputAlias,
                crate::output::CreateLanguageModelOutput,
                crate::error::CreateLanguageModelError,
                crate::input::CreateLanguageModelInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The language of the input text you're using to train your custom language
        /// model.</p>
        pub fn language_code(mut self, inp: crate::model::ClmLanguageCode) -> Self {
            self.inner = self.inner.language_code(inp);
            self
        }
        /// <p>The language of the input text you're using to train your custom language
        /// model.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::ClmLanguageCode>,
        ) -> Self {
            self.inner = self.inner.set_language_code(input);
            self
        }
        /// <p>The Amazon Transcribe standard language model, or base model used to create your custom language model.</p>
        /// <p>If you want to use your custom language model to transcribe audio with a sample rate of 16,000 Hz or greater,
        /// choose <code>Wideband</code>.</p>
        /// <p>If you want to use your custom language model to transcribe audio with a sample rate that is less than
        /// 16,000 Hz, choose <code>Narrowband</code>.</p>
        pub fn base_model_name(mut self, inp: crate::model::BaseModelName) -> Self {
            self.inner = self.inner.base_model_name(inp);
            self
        }
        /// <p>The Amazon Transcribe standard language model, or base model used to create your custom language model.</p>
        /// <p>If you want to use your custom language model to transcribe audio with a sample rate of 16,000 Hz or greater,
        /// choose <code>Wideband</code>.</p>
        /// <p>If you want to use your custom language model to transcribe audio with a sample rate that is less than
        /// 16,000 Hz, choose <code>Narrowband</code>.</p>
        pub fn set_base_model_name(
            mut self,
            input: std::option::Option<crate::model::BaseModelName>,
        ) -> Self {
            self.inner = self.inner.set_base_model_name(input);
            self
        }
        /// <p>The name you choose for your custom language model when you create it.</p>
        pub fn model_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.model_name(inp);
            self
        }
        /// <p>The name you choose for your custom language model when you create it.</p>
        pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_model_name(input);
            self
        }
        /// <p>Contains the data access role and the Amazon S3 prefixes to read the required input files to create a custom
        /// language model.</p>
        pub fn input_data_config(mut self, inp: crate::model::InputDataConfig) -> Self {
            self.inner = self.inner.input_data_config(inp);
            self
        }
        /// <p>Contains the data access role and the Amazon S3 prefixes to read the required input files to create a custom
        /// language model.</p>
        pub fn set_input_data_config(
            mut self,
            input: std::option::Option<crate::model::InputDataConfig>,
        ) -> Self {
            self.inner = self.inner.set_input_data_config(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Adds one or more tags, each in the form of a key:value pair, to a new language model at the time you create
        /// this new model.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>Adds one or more tags, each in the form of a key:value pair, to a new language model at the time you create
        /// this new model.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateMedicalVocabulary`.
    ///
    /// <p>Creates a new custom vocabulary that you can use to modify how Amazon Transcribe Medical transcribes your audio file.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateMedicalVocabulary<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_medical_vocabulary_input::Builder,
    }
    impl<C, M, R> CreateMedicalVocabulary<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateMedicalVocabulary`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateMedicalVocabularyOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateMedicalVocabularyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateMedicalVocabularyInputOperationOutputAlias,
                crate::output::CreateMedicalVocabularyOutput,
                crate::error::CreateMedicalVocabularyError,
                crate::input::CreateMedicalVocabularyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the custom vocabulary. This case-sensitive name must be unique within an Amazon Web Services
        /// account. If you try to create a vocabulary with the same name as a previous vocabulary, you get a
        /// <code>ConflictException</code> error.</p>
        pub fn vocabulary_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_name(inp);
            self
        }
        /// <p>The name of the custom vocabulary. This case-sensitive name must be unique within an Amazon Web Services
        /// account. If you try to create a vocabulary with the same name as a previous vocabulary, you get a
        /// <code>ConflictException</code> error.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_name(input);
            self
        }
        /// <p>The language code for the language used for the entries in your custom vocabulary. The language code of your
        /// custom vocabulary must match the language code of your transcription job. US English (en-US) is the only language
        /// code available for Amazon Transcribe Medical.</p>
        pub fn language_code(mut self, inp: crate::model::LanguageCode) -> Self {
            self.inner = self.inner.language_code(inp);
            self
        }
        /// <p>The language code for the language used for the entries in your custom vocabulary. The language code of your
        /// custom vocabulary must match the language code of your transcription job. US English (en-US) is the only language
        /// code available for Amazon Transcribe Medical.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.inner = self.inner.set_language_code(input);
            self
        }
        /// <p>The location in Amazon S3 of the text file you use to define your custom vocabulary. The URI must be in the same
        /// Amazon Web Services Region as the resource that you're calling. Enter information about your
        /// <code>VocabularyFileUri</code> in the following format:</p>
        /// <p>
        /// <code>
        /// https://s3.<aws-region>.amazonaws.com/<bucket-name>/<keyprefix>/<objectkey>
        /// </code>
        /// </p>
        /// <p>The following is an example URI for a vocabulary file that is stored in Amazon S3:</p>
        /// <p>
        /// <code>https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt</code>
        /// </p>
        /// <p>For more information about Amazon S3 object names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3
        /// Developer Guide</i>.</p>
        /// <p>For more information about custom vocabularies, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary-med">Medical Custom Vocabularies</a>.</p>
        pub fn vocabulary_file_uri(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_file_uri(inp);
            self
        }
        /// <p>The location in Amazon S3 of the text file you use to define your custom vocabulary. The URI must be in the same
        /// Amazon Web Services Region as the resource that you're calling. Enter information about your
        /// <code>VocabularyFileUri</code> in the following format:</p>
        /// <p>
        /// <code>
        /// https://s3.<aws-region>.amazonaws.com/<bucket-name>/<keyprefix>/<objectkey>
        /// </code>
        /// </p>
        /// <p>The following is an example URI for a vocabulary file that is stored in Amazon S3:</p>
        /// <p>
        /// <code>https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt</code>
        /// </p>
        /// <p>For more information about Amazon S3 object names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3
        /// Developer Guide</i>.</p>
        /// <p>For more information about custom vocabularies, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary-med">Medical Custom Vocabularies</a>.</p>
        pub fn set_vocabulary_file_uri(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_file_uri(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Adds one or more tags, each in the form of a key:value pair, to a new medical vocabulary at the time you
        /// create this new vocabulary.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>Adds one or more tags, each in the form of a key:value pair, to a new medical vocabulary at the time you
        /// create this new vocabulary.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateVocabulary`.
    ///
    /// <p>Creates a new custom vocabulary that you can use to change the way Amazon Transcribe handles transcription of an
    /// audio file.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateVocabulary<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_vocabulary_input::Builder,
    }
    impl<C, M, R> CreateVocabulary<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateVocabulary`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateVocabularyOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateVocabularyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateVocabularyInputOperationOutputAlias,
                crate::output::CreateVocabularyOutput,
                crate::error::CreateVocabularyError,
                crate::input::CreateVocabularyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary. The name must be unique within an Amazon Web Services account. The name
        /// is case sensitive. If you try to create a vocabulary with the same name as a previous vocabulary you will receive a
        /// <code>ConflictException</code> error.</p>
        pub fn vocabulary_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_name(inp);
            self
        }
        /// <p>The name of the vocabulary. The name must be unique within an Amazon Web Services account. The name
        /// is case sensitive. If you try to create a vocabulary with the same name as a previous vocabulary you will receive a
        /// <code>ConflictException</code> error.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_name(input);
            self
        }
        /// <p>The language code of the vocabulary entries. For a list of languages and their corresponding language
        /// codes, see <a>transcribe-whatis</a>.</p>
        pub fn language_code(mut self, inp: crate::model::LanguageCode) -> Self {
            self.inner = self.inner.language_code(inp);
            self
        }
        /// <p>The language code of the vocabulary entries. For a list of languages and their corresponding language
        /// codes, see <a>transcribe-whatis</a>.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.inner = self.inner.set_language_code(input);
            self
        }
        /// Appends an item to `Phrases`.
        ///
        /// To override the contents of this collection use [`set_phrases`](Self::set_phrases).
        ///
        /// <p>An array of strings that contains the vocabulary entries. </p>
        pub fn phrases(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.phrases(inp);
            self
        }
        /// <p>An array of strings that contains the vocabulary entries. </p>
        pub fn set_phrases(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_phrases(input);
            self
        }
        /// <p>The S3 location of the text file that contains the definition of the custom vocabulary. The URI must be in the
        /// same region as the API endpoint that you are calling. The general form is:</p>
        ///
        ///
        ///
        /// <p>For more information about S3 object names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the
        /// <i>Amazon S3 Developer Guide</i>.</p>
        /// <p>For more information about custom vocabularies, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary">Custom vocabularies</a>.</p>
        pub fn vocabulary_file_uri(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_file_uri(inp);
            self
        }
        /// <p>The S3 location of the text file that contains the definition of the custom vocabulary. The URI must be in the
        /// same region as the API endpoint that you are calling. The general form is:</p>
        ///
        ///
        ///
        /// <p>For more information about S3 object names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the
        /// <i>Amazon S3 Developer Guide</i>.</p>
        /// <p>For more information about custom vocabularies, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary">Custom vocabularies</a>.</p>
        pub fn set_vocabulary_file_uri(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_file_uri(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Adds one or more tags, each in the form of a key:value pair, to a new Amazon Transcribe vocabulary at the time you create
        /// this new vocabulary.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>Adds one or more tags, each in the form of a key:value pair, to a new Amazon Transcribe vocabulary at the time you create
        /// this new vocabulary.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateVocabularyFilter`.
    ///
    /// <p>Creates a new vocabulary filter that you can use to filter words, such as profane words, from the output of
    /// a transcription job.</p>
    #[derive(std::fmt::Debug)]
    pub struct CreateVocabularyFilter<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_vocabulary_filter_input::Builder,
    }
    impl<C, M, R> CreateVocabularyFilter<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateVocabularyFilter`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateVocabularyFilterOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateVocabularyFilterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateVocabularyFilterInputOperationOutputAlias,
                crate::output::CreateVocabularyFilterOutput,
                crate::error::CreateVocabularyFilterError,
                crate::input::CreateVocabularyFilterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The vocabulary filter name. The name must be unique within the account that contains it. If you try to create a
        /// vocabulary filter with the same name as another vocabulary filter, you get a <code>ConflictException</code>
        /// error.</p>
        pub fn vocabulary_filter_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_filter_name(inp);
            self
        }
        /// <p>The vocabulary filter name. The name must be unique within the account that contains it. If you try to create a
        /// vocabulary filter with the same name as another vocabulary filter, you get a <code>ConflictException</code>
        /// error.</p>
        pub fn set_vocabulary_filter_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_filter_name(input);
            self
        }
        /// <p>The language code of the words in the vocabulary filter. All words in the filter must be in the same language.
        /// The vocabulary filter can only be used with transcription jobs in the specified language.</p>
        pub fn language_code(mut self, inp: crate::model::LanguageCode) -> Self {
            self.inner = self.inner.language_code(inp);
            self
        }
        /// <p>The language code of the words in the vocabulary filter. All words in the filter must be in the same language.
        /// The vocabulary filter can only be used with transcription jobs in the specified language.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.inner = self.inner.set_language_code(input);
            self
        }
        /// Appends an item to `Words`.
        ///
        /// To override the contents of this collection use [`set_words`](Self::set_words).
        ///
        /// <p>The words to use in the vocabulary filter. Only use characters from the character set defined for custom
        /// vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
        /// <p>If you provide a list of words in the <code>Words</code> parameter, you can't use the
        /// <code>VocabularyFilterFileUri</code> parameter.</p>
        pub fn words(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.words(inp);
            self
        }
        /// <p>The words to use in the vocabulary filter. Only use characters from the character set defined for custom
        /// vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
        /// <p>If you provide a list of words in the <code>Words</code> parameter, you can't use the
        /// <code>VocabularyFilterFileUri</code> parameter.</p>
        pub fn set_words(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_words(input);
            self
        }
        /// <p>The Amazon S3 location of a text file used as input to create the vocabulary filter. Only use characters from
        /// the character set defined for custom vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
        /// <p>The specified file must be less than 50 KB of UTF-8 characters.</p>
        /// <p>If you provide the location of a list of words in the <code>VocabularyFilterFileUri</code> parameter, you can't
        /// use the <code>Words</code> parameter.</p>
        pub fn vocabulary_filter_file_uri(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_filter_file_uri(inp);
            self
        }
        /// <p>The Amazon S3 location of a text file used as input to create the vocabulary filter. Only use characters from
        /// the character set defined for custom vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
        /// <p>The specified file must be less than 50 KB of UTF-8 characters.</p>
        /// <p>If you provide the location of a list of words in the <code>VocabularyFilterFileUri</code> parameter, you can't
        /// use the <code>Words</code> parameter.</p>
        pub fn set_vocabulary_filter_file_uri(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_filter_file_uri(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Adds one or more tags, each in the form of a key:value pair, to a new Amazon Transcribe vocabulary filter at the time you
        /// create this new vocabulary filter.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>Adds one or more tags, each in the form of a key:value pair, to a new Amazon Transcribe vocabulary filter at the time you
        /// create this new vocabulary filter.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteCallAnalyticsCategory`.
    ///
    /// <p>Deletes a call analytics category using its name.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteCallAnalyticsCategory<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_call_analytics_category_input::Builder,
    }
    impl<C, M, R> DeleteCallAnalyticsCategory<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteCallAnalyticsCategory`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteCallAnalyticsCategoryOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteCallAnalyticsCategoryError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteCallAnalyticsCategoryInputOperationOutputAlias,
                crate::output::DeleteCallAnalyticsCategoryOutput,
                crate::error::DeleteCallAnalyticsCategoryError,
                crate::input::DeleteCallAnalyticsCategoryInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the call analytics category that you're choosing to delete. The value is case
        /// sensitive. </p>
        pub fn category_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.category_name(inp);
            self
        }
        /// <p>The name of the call analytics category that you're choosing to delete. The value is case
        /// sensitive. </p>
        pub fn set_category_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_category_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteCallAnalyticsJob`.
    ///
    /// <p>Deletes a call analytics job using its name.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteCallAnalyticsJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_call_analytics_job_input::Builder,
    }
    impl<C, M, R> DeleteCallAnalyticsJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteCallAnalyticsJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteCallAnalyticsJobOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteCallAnalyticsJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteCallAnalyticsJobInputOperationOutputAlias,
                crate::output::DeleteCallAnalyticsJobOutput,
                crate::error::DeleteCallAnalyticsJobError,
                crate::input::DeleteCallAnalyticsJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the call analytics job you want to delete.</p>
        pub fn call_analytics_job_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.call_analytics_job_name(inp);
            self
        }
        /// <p>The name of the call analytics job you want to delete.</p>
        pub fn set_call_analytics_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_call_analytics_job_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteLanguageModel`.
    ///
    /// <p>Deletes a custom language model using its name.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteLanguageModel<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_language_model_input::Builder,
    }
    impl<C, M, R> DeleteLanguageModel<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteLanguageModel`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteLanguageModelOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteLanguageModelError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteLanguageModelInputOperationOutputAlias,
                crate::output::DeleteLanguageModelOutput,
                crate::error::DeleteLanguageModelError,
                crate::input::DeleteLanguageModelInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the model you're choosing to delete.</p>
        pub fn model_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.model_name(inp);
            self
        }
        /// <p>The name of the model you're choosing to delete.</p>
        pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_model_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteMedicalTranscriptionJob`.
    ///
    /// <p>Deletes a transcription job generated by Amazon Transcribe Medical and any related information.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteMedicalTranscriptionJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_medical_transcription_job_input::Builder,
    }
    impl<C, M, R> DeleteMedicalTranscriptionJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteMedicalTranscriptionJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteMedicalTranscriptionJobOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteMedicalTranscriptionJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteMedicalTranscriptionJobInputOperationOutputAlias,
                crate::output::DeleteMedicalTranscriptionJobOutput,
                crate::error::DeleteMedicalTranscriptionJobError,
                crate::input::DeleteMedicalTranscriptionJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name you provide to the <code>DeleteMedicalTranscriptionJob</code> object to
        /// delete a transcription job.</p>
        pub fn medical_transcription_job_name(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.medical_transcription_job_name(inp);
            self
        }
        /// <p>The name you provide to the <code>DeleteMedicalTranscriptionJob</code> object to
        /// delete a transcription job.</p>
        pub fn set_medical_transcription_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_medical_transcription_job_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteMedicalVocabulary`.
    ///
    /// <p>Deletes a vocabulary from Amazon Transcribe Medical.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteMedicalVocabulary<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_medical_vocabulary_input::Builder,
    }
    impl<C, M, R> DeleteMedicalVocabulary<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteMedicalVocabulary`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteMedicalVocabularyOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteMedicalVocabularyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteMedicalVocabularyInputOperationOutputAlias,
                crate::output::DeleteMedicalVocabularyOutput,
                crate::error::DeleteMedicalVocabularyError,
                crate::input::DeleteMedicalVocabularyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary that you want to delete.</p>
        pub fn vocabulary_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_name(inp);
            self
        }
        /// <p>The name of the vocabulary that you want to delete.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteTranscriptionJob`.
    ///
    /// <p>Deletes a previously submitted transcription job along with any other generated results such as the
    /// transcription, models, and so on.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteTranscriptionJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_transcription_job_input::Builder,
    }
    impl<C, M, R> DeleteTranscriptionJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteTranscriptionJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteTranscriptionJobOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteTranscriptionJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteTranscriptionJobInputOperationOutputAlias,
                crate::output::DeleteTranscriptionJobOutput,
                crate::error::DeleteTranscriptionJobError,
                crate::input::DeleteTranscriptionJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the transcription job to be deleted.</p>
        pub fn transcription_job_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.transcription_job_name(inp);
            self
        }
        /// <p>The name of the transcription job to be deleted.</p>
        pub fn set_transcription_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_transcription_job_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteVocabulary`.
    ///
    /// <p>Deletes a vocabulary from Amazon Transcribe. </p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteVocabulary<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_vocabulary_input::Builder,
    }
    impl<C, M, R> DeleteVocabulary<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteVocabulary`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVocabularyOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteVocabularyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteVocabularyInputOperationOutputAlias,
                crate::output::DeleteVocabularyOutput,
                crate::error::DeleteVocabularyError,
                crate::input::DeleteVocabularyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary to delete. </p>
        pub fn vocabulary_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_name(inp);
            self
        }
        /// <p>The name of the vocabulary to delete. </p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteVocabularyFilter`.
    ///
    /// <p>Removes a vocabulary filter.</p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteVocabularyFilter<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_vocabulary_filter_input::Builder,
    }
    impl<C, M, R> DeleteVocabularyFilter<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteVocabularyFilter`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVocabularyFilterOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteVocabularyFilterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteVocabularyFilterInputOperationOutputAlias,
                crate::output::DeleteVocabularyFilterOutput,
                crate::error::DeleteVocabularyFilterError,
                crate::input::DeleteVocabularyFilterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary filter to remove.</p>
        pub fn vocabulary_filter_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_filter_name(inp);
            self
        }
        /// <p>The name of the vocabulary filter to remove.</p>
        pub fn set_vocabulary_filter_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_filter_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeLanguageModel`.
    ///
    /// <p>Gets information about a single custom language model. Use this information to see details about the
    /// language model in your Amazon Web Services account. You can also see whether the base language model used
    /// to create your custom language model has been updated. If Amazon Transcribe has updated the base model, you can create a
    /// new custom language model using the updated base model. If the language model wasn't created, you can use this
    /// operation to understand why Amazon Transcribe couldn't create it. </p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeLanguageModel<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_language_model_input::Builder,
    }
    impl<C, M, R> DescribeLanguageModel<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeLanguageModel`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeLanguageModelOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeLanguageModelError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeLanguageModelInputOperationOutputAlias,
                crate::output::DescribeLanguageModelOutput,
                crate::error::DescribeLanguageModelError,
                crate::input::DescribeLanguageModelInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the custom language model you submit to get more information.</p>
        pub fn model_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.model_name(inp);
            self
        }
        /// <p>The name of the custom language model you submit to get more information.</p>
        pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_model_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetCallAnalyticsCategory`.
    ///
    /// <p>Retrieves information about a call analytics category.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetCallAnalyticsCategory<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_call_analytics_category_input::Builder,
    }
    impl<C, M, R> GetCallAnalyticsCategory<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetCallAnalyticsCategory`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetCallAnalyticsCategoryOutput,
            aws_smithy_http::result::SdkError<crate::error::GetCallAnalyticsCategoryError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetCallAnalyticsCategoryInputOperationOutputAlias,
                crate::output::GetCallAnalyticsCategoryOutput,
                crate::error::GetCallAnalyticsCategoryError,
                crate::input::GetCallAnalyticsCategoryInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the category you want information about. This value is case sensitive.</p>
        pub fn category_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.category_name(inp);
            self
        }
        /// <p>The name of the category you want information about. This value is case sensitive.</p>
        pub fn set_category_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_category_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetCallAnalyticsJob`.
    ///
    /// <p>Returns information about a call analytics job. To see the status of the job, check the
    /// <code>CallAnalyticsJobStatus</code> field. If the status is <code>COMPLETED</code>, the job
    /// is finished and you can find the results at the location specified in the <code>TranscriptFileUri</code>
    /// field. If you enable personally identifiable information (PII) redaction, the redacted transcript appears
    /// in the <code>RedactedTranscriptFileUri</code> field.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetCallAnalyticsJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_call_analytics_job_input::Builder,
    }
    impl<C, M, R> GetCallAnalyticsJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetCallAnalyticsJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetCallAnalyticsJobOutput,
            aws_smithy_http::result::SdkError<crate::error::GetCallAnalyticsJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetCallAnalyticsJobInputOperationOutputAlias,
                crate::output::GetCallAnalyticsJobOutput,
                crate::error::GetCallAnalyticsJobError,
                crate::input::GetCallAnalyticsJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the analytics job you want information about. This value is case
        /// sensitive. </p>
        pub fn call_analytics_job_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.call_analytics_job_name(inp);
            self
        }
        /// <p>The name of the analytics job you want information about. This value is case
        /// sensitive. </p>
        pub fn set_call_analytics_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_call_analytics_job_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetMedicalTranscriptionJob`.
    ///
    /// <p>Returns information about a transcription job from Amazon Transcribe Medical. To see the status of the job, check the
    /// <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the job is finished. You
    /// find the results of the completed job in the <code>TranscriptFileUri</code> field.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetMedicalTranscriptionJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_medical_transcription_job_input::Builder,
    }
    impl<C, M, R> GetMedicalTranscriptionJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetMedicalTranscriptionJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetMedicalTranscriptionJobOutput,
            aws_smithy_http::result::SdkError<crate::error::GetMedicalTranscriptionJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetMedicalTranscriptionJobInputOperationOutputAlias,
                crate::output::GetMedicalTranscriptionJobOutput,
                crate::error::GetMedicalTranscriptionJobError,
                crate::input::GetMedicalTranscriptionJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the medical transcription job.</p>
        pub fn medical_transcription_job_name(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.medical_transcription_job_name(inp);
            self
        }
        /// <p>The name of the medical transcription job.</p>
        pub fn set_medical_transcription_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_medical_transcription_job_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetMedicalVocabulary`.
    ///
    /// <p>Retrieves information about a medical vocabulary.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetMedicalVocabulary<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_medical_vocabulary_input::Builder,
    }
    impl<C, M, R> GetMedicalVocabulary<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetMedicalVocabulary`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetMedicalVocabularyOutput,
            aws_smithy_http::result::SdkError<crate::error::GetMedicalVocabularyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetMedicalVocabularyInputOperationOutputAlias,
                crate::output::GetMedicalVocabularyOutput,
                crate::error::GetMedicalVocabularyError,
                crate::input::GetMedicalVocabularyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary that you want information about. The value is case sensitive. </p>
        pub fn vocabulary_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_name(inp);
            self
        }
        /// <p>The name of the vocabulary that you want information about. The value is case sensitive. </p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetTranscriptionJob`.
    ///
    /// <p>Returns information about a transcription job. To see the status of the job, check the
    /// <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the job is finished and
    /// you can find the results at the location specified in the <code>TranscriptFileUri</code> field. If you enable content
    /// redaction, the redacted transcript appears in <code>RedactedTranscriptFileUri</code>.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetTranscriptionJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_transcription_job_input::Builder,
    }
    impl<C, M, R> GetTranscriptionJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetTranscriptionJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetTranscriptionJobOutput,
            aws_smithy_http::result::SdkError<crate::error::GetTranscriptionJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetTranscriptionJobInputOperationOutputAlias,
                crate::output::GetTranscriptionJobOutput,
                crate::error::GetTranscriptionJobError,
                crate::input::GetTranscriptionJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the job.</p>
        pub fn transcription_job_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.transcription_job_name(inp);
            self
        }
        /// <p>The name of the job.</p>
        pub fn set_transcription_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_transcription_job_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetVocabulary`.
    ///
    /// <p>Gets information about a vocabulary. </p>
    #[derive(std::fmt::Debug)]
    pub struct GetVocabulary<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_vocabulary_input::Builder,
    }
    impl<C, M, R> GetVocabulary<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetVocabulary`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetVocabularyOutput,
            aws_smithy_http::result::SdkError<crate::error::GetVocabularyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetVocabularyInputOperationOutputAlias,
                crate::output::GetVocabularyOutput,
                crate::error::GetVocabularyError,
                crate::input::GetVocabularyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary to return information about. The name is case
        /// sensitive.</p>
        pub fn vocabulary_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_name(inp);
            self
        }
        /// <p>The name of the vocabulary to return information about. The name is case
        /// sensitive.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetVocabularyFilter`.
    ///
    /// <p>Returns information about a vocabulary filter.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetVocabularyFilter<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_vocabulary_filter_input::Builder,
    }
    impl<C, M, R> GetVocabularyFilter<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetVocabularyFilter`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetVocabularyFilterOutput,
            aws_smithy_http::result::SdkError<crate::error::GetVocabularyFilterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetVocabularyFilterInputOperationOutputAlias,
                crate::output::GetVocabularyFilterOutput,
                crate::error::GetVocabularyFilterError,
                crate::input::GetVocabularyFilterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary filter for which to return information.</p>
        pub fn vocabulary_filter_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_filter_name(inp);
            self
        }
        /// <p>The name of the vocabulary filter for which to return information.</p>
        pub fn set_vocabulary_filter_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_filter_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListCallAnalyticsCategories`.
    ///
    /// <p>Provides more information about the call analytics categories that you've created. You
    /// can use the information in this list to find a specific category. You can then use the
    /// operation to get more information about it.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListCallAnalyticsCategories<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_call_analytics_categories_input::Builder,
    }
    impl<C, M, R> ListCallAnalyticsCategories<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListCallAnalyticsCategories`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListCallAnalyticsCategoriesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListCallAnalyticsCategoriesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListCallAnalyticsCategoriesInputOperationOutputAlias,
                crate::output::ListCallAnalyticsCategoriesOutput,
                crate::error::ListCallAnalyticsCategoriesError,
                crate::input::ListCallAnalyticsCategoriesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>When included, <code>NextToken</code>fetches the next set of categories if the result
        /// of the previous request was truncated.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>When included, <code>NextToken</code>fetches the next set of categories if the result
        /// of the previous request was truncated.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of categories to return in each page of results. If there are fewer
        /// results than the value you specify, only the actual results are returned. If you do not specify a
        /// value, the default of 5 is used.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of categories to return in each page of results. If there are fewer
        /// results than the value you specify, only the actual results are returned. If you do not specify a
        /// value, the default of 5 is used.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListCallAnalyticsJobs`.
    ///
    /// <p>List call analytics jobs with a specified status or substring that matches their names.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListCallAnalyticsJobs<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_call_analytics_jobs_input::Builder,
    }
    impl<C, M, R> ListCallAnalyticsJobs<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListCallAnalyticsJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListCallAnalyticsJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListCallAnalyticsJobsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListCallAnalyticsJobsInputOperationOutputAlias,
                crate::output::ListCallAnalyticsJobsOutput,
                crate::error::ListCallAnalyticsJobsError,
                crate::input::ListCallAnalyticsJobsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>When specified, returns only call analytics jobs with the specified status. Jobs are ordered
        /// by creation date, with the most recent jobs returned first. If you don't specify a status, Amazon Transcribe
        /// returns all analytics jobs ordered by creation date.</p>
        pub fn status(mut self, inp: crate::model::CallAnalyticsJobStatus) -> Self {
            self.inner = self.inner.status(inp);
            self
        }
        /// <p>When specified, returns only call analytics jobs with the specified status. Jobs are ordered
        /// by creation date, with the most recent jobs returned first. If you don't specify a status, Amazon Transcribe
        /// returns all analytics jobs ordered by creation date.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::CallAnalyticsJobStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>When specified, the jobs returned in the list are limited to jobs whose name contains the
        /// specified string.</p>
        pub fn job_name_contains(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_name_contains(inp);
            self
        }
        /// <p>When specified, the jobs returned in the list are limited to jobs whose name contains the
        /// specified string.</p>
        pub fn set_job_name_contains(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_job_name_contains(input);
            self
        }
        /// <p>If you receive a truncated result in the previous request of
        /// ,
        /// include <code>NextToken</code> to fetch the next set of jobs.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>If you receive a truncated result in the previous request of
        /// ,
        /// include <code>NextToken</code> to fetch the next set of jobs.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>  The maximum number of call analytics jobs to return in each page of results. If there are
        /// fewer results than the value you specify, only the actual results are returned. If you do not
        /// specify a value, the default of 5 is used. </p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>  The maximum number of call analytics jobs to return in each page of results. If there are
        /// fewer results than the value you specify, only the actual results are returned. If you do not
        /// specify a value, the default of 5 is used. </p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListLanguageModels`.
    ///
    /// <p>Provides more information about the custom language models you've created. You can use the information in
    /// this list to find a specific custom language model. You can then use the
    /// operation to get more information about it.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListLanguageModels<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_language_models_input::Builder,
    }
    impl<C, M, R> ListLanguageModels<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListLanguageModels`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListLanguageModelsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListLanguageModelsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListLanguageModelsInputOperationOutputAlias,
                crate::output::ListLanguageModelsOutput,
                crate::error::ListLanguageModelsError,
                crate::input::ListLanguageModelsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>When specified, returns only custom language models with the specified status. Language models are ordered
        /// by creation date, with the newest models first. If you don't specify a status, Amazon Transcribe returns all custom language
        /// models ordered by date.</p>
        pub fn status_equals(mut self, inp: crate::model::ModelStatus) -> Self {
            self.inner = self.inner.status_equals(inp);
            self
        }
        /// <p>When specified, returns only custom language models with the specified status. Language models are ordered
        /// by creation date, with the newest models first. If you don't specify a status, Amazon Transcribe returns all custom language
        /// models ordered by date.</p>
        pub fn set_status_equals(
            mut self,
            input: std::option::Option<crate::model::ModelStatus>,
        ) -> Self {
            self.inner = self.inner.set_status_equals(input);
            self
        }
        /// <p>When specified, the custom language model names returned contain the substring you've specified.</p>
        pub fn name_contains(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name_contains(inp);
            self
        }
        /// <p>When specified, the custom language model names returned contain the substring you've specified.</p>
        pub fn set_name_contains(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_name_contains(input);
            self
        }
        /// <p>When included, fetches the next set of jobs if the result of the previous request was truncated.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>When included, fetches the next set of jobs if the result of the previous request was truncated.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p> The maximum number of language models to return in each page of results. If there are fewer results than the
        /// value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p> The maximum number of language models to return in each page of results. If there are fewer results than the
        /// value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListMedicalTranscriptionJobs`.
    ///
    /// <p>Lists medical transcription jobs with a specified status or substring that matches their names.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListMedicalTranscriptionJobs<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_medical_transcription_jobs_input::Builder,
    }
    impl<C, M, R> ListMedicalTranscriptionJobs<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListMedicalTranscriptionJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListMedicalTranscriptionJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListMedicalTranscriptionJobsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListMedicalTranscriptionJobsInputOperationOutputAlias,
                crate::output::ListMedicalTranscriptionJobsOutput,
                crate::error::ListMedicalTranscriptionJobsError,
                crate::input::ListMedicalTranscriptionJobsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>When specified, returns only medical transcription jobs with the specified status. Jobs are ordered by creation
        /// date, with the newest jobs returned first. If you don't specify a status, Amazon Transcribe Medical returns all transcription jobs ordered
        /// by creation date.</p>
        pub fn status(mut self, inp: crate::model::TranscriptionJobStatus) -> Self {
            self.inner = self.inner.status(inp);
            self
        }
        /// <p>When specified, returns only medical transcription jobs with the specified status. Jobs are ordered by creation
        /// date, with the newest jobs returned first. If you don't specify a status, Amazon Transcribe Medical returns all transcription jobs ordered
        /// by creation date.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TranscriptionJobStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.</p>
        pub fn job_name_contains(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_name_contains(inp);
            self
        }
        /// <p>When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.</p>
        pub fn set_job_name_contains(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_job_name_contains(input);
            self
        }
        /// <p>If you a receive a truncated result in the previous request of <code>ListMedicalTranscriptionJobs</code>,
        /// include <code>NextToken</code> to fetch the next set of jobs.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>If you a receive a truncated result in the previous request of <code>ListMedicalTranscriptionJobs</code>,
        /// include <code>NextToken</code> to fetch the next set of jobs.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p> The maximum number of medical transcription jobs to return in each page of results. If there are fewer
        /// results than the value you specify, only the actual results are returned. If you do not specify a value, the default of
        /// 5 is used.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p> The maximum number of medical transcription jobs to return in each page of results. If there are fewer
        /// results than the value you specify, only the actual results are returned. If you do not specify a value, the default of
        /// 5 is used.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListMedicalVocabularies`.
    ///
    /// <p>Returns a list of vocabularies that match the specified criteria. If you don't enter a value in any of the request
    /// parameters, returns the entire list of vocabularies.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListMedicalVocabularies<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_medical_vocabularies_input::Builder,
    }
    impl<C, M, R> ListMedicalVocabularies<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListMedicalVocabularies`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListMedicalVocabulariesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListMedicalVocabulariesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListMedicalVocabulariesInputOperationOutputAlias,
                crate::output::ListMedicalVocabulariesOutput,
                crate::error::ListMedicalVocabulariesError,
                crate::input::ListMedicalVocabulariesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>If the result of your previous request to <code>ListMedicalVocabularies</code> was truncated, include the
        /// <code>NextToken</code> to fetch the next set of vocabularies.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>If the result of your previous request to <code>ListMedicalVocabularies</code> was truncated, include the
        /// <code>NextToken</code> to fetch the next set of vocabularies.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of vocabularies to return in each page of results. If there are fewer results than the
        /// value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of vocabularies to return in each page of results. If there are fewer results than the
        /// value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>When specified, returns only vocabularies with the <code>VocabularyState</code> equal to the specified
        /// vocabulary state. Use this field to see which vocabularies are ready for your medical transcription jobs.</p>
        pub fn state_equals(mut self, inp: crate::model::VocabularyState) -> Self {
            self.inner = self.inner.state_equals(inp);
            self
        }
        /// <p>When specified, returns only vocabularies with the <code>VocabularyState</code> equal to the specified
        /// vocabulary state. Use this field to see which vocabularies are ready for your medical transcription jobs.</p>
        pub fn set_state_equals(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.inner = self.inner.set_state_equals(input);
            self
        }
        /// <p>Returns vocabularies whose names contain the specified string. The search is not case sensitive.
        /// <code>ListMedicalVocabularies</code> returns both "<code>vocabularyname</code>" and
        /// "<code>VocabularyName</code>".</p>
        pub fn name_contains(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name_contains(inp);
            self
        }
        /// <p>Returns vocabularies whose names contain the specified string. The search is not case sensitive.
        /// <code>ListMedicalVocabularies</code> returns both "<code>vocabularyname</code>" and
        /// "<code>VocabularyName</code>".</p>
        pub fn set_name_contains(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_name_contains(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTagsForResource`.
    ///
    /// <p>Lists all tags associated with a given transcription job, vocabulary, or resource.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C, M, R> ListTagsForResource<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListTagsForResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForResourceInputOperationOutputAlias,
                crate::output::ListTagsForResourceOutput,
                crate::error::ListTagsForResourceError,
                crate::input::ListTagsForResourceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Lists all tags associated with a given Amazon Resource Name (ARN). ARNs have the format
        /// <code>arn:partition:service:region:account-id:resource-type/resource-id</code> (for example,
        /// <code>arn:aws:transcribe:us-east-1:account-id:transcription-job/your-job-name</code>). Valid
        /// values for <code>resource-type</code> are: <code>transcription-job</code>,
        /// <code>medical-transcription-job</code>, <code>vocabulary</code>,
        /// <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and
        /// <code>language-model</code>.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        /// <p>Lists all tags associated with a given Amazon Resource Name (ARN). ARNs have the format
        /// <code>arn:partition:service:region:account-id:resource-type/resource-id</code> (for example,
        /// <code>arn:aws:transcribe:us-east-1:account-id:transcription-job/your-job-name</code>). Valid
        /// values for <code>resource-type</code> are: <code>transcription-job</code>,
        /// <code>medical-transcription-job</code>, <code>vocabulary</code>,
        /// <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and
        /// <code>language-model</code>.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTranscriptionJobs`.
    ///
    /// <p>Lists transcription jobs with the specified status.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListTranscriptionJobs<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_transcription_jobs_input::Builder,
    }
    impl<C, M, R> ListTranscriptionJobs<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListTranscriptionJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTranscriptionJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTranscriptionJobsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTranscriptionJobsInputOperationOutputAlias,
                crate::output::ListTranscriptionJobsOutput,
                crate::error::ListTranscriptionJobsError,
                crate::input::ListTranscriptionJobsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>When specified, returns only transcription jobs with the specified status. Jobs are ordered by creation date, with
        /// the newest jobs returned first. If you don’t specify a status, Amazon Transcribe returns all transcription jobs ordered by creation
        /// date.</p>
        pub fn status(mut self, inp: crate::model::TranscriptionJobStatus) -> Self {
            self.inner = self.inner.status(inp);
            self
        }
        /// <p>When specified, returns only transcription jobs with the specified status. Jobs are ordered by creation date, with
        /// the newest jobs returned first. If you don’t specify a status, Amazon Transcribe returns all transcription jobs ordered by creation
        /// date.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TranscriptionJobStatus>,
        ) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.</p>
        pub fn job_name_contains(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_name_contains(inp);
            self
        }
        /// <p>When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.</p>
        pub fn set_job_name_contains(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_job_name_contains(input);
            self
        }
        /// <p>If the result of the previous request to <code>ListTranscriptionJobs</code> is truncated, include the
        /// <code>NextToken</code> to fetch the next set of jobs.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>If the result of the previous request to <code>ListTranscriptionJobs</code> is truncated, include the
        /// <code>NextToken</code> to fetch the next set of jobs.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of jobs to return in each page of results. If there are fewer results than the value you
        /// specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of jobs to return in each page of results. If there are fewer results than the value you
        /// specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListVocabularies`.
    ///
    /// <p>Returns a list of vocabularies that match the specified criteria. If no criteria are specified, returns the entire list
    /// of vocabularies.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListVocabularies<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_vocabularies_input::Builder,
    }
    impl<C, M, R> ListVocabularies<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListVocabularies`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListVocabulariesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListVocabulariesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListVocabulariesInputOperationOutputAlias,
                crate::output::ListVocabulariesOutput,
                crate::error::ListVocabulariesError,
                crate::input::ListVocabulariesInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>If the result of the previous request to <code>ListVocabularies</code> was truncated, include the
        /// <code>NextToken</code> to fetch the next set of jobs.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>If the result of the previous request to <code>ListVocabularies</code> was truncated, include the
        /// <code>NextToken</code> to fetch the next set of jobs.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of vocabularies to return in each page of results. If there are fewer results than the
        /// value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of vocabularies to return in each page of results. If there are fewer results than the
        /// value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>When specified, only returns vocabularies with the <code>VocabularyState</code> field equal to the
        /// specified state.</p>
        pub fn state_equals(mut self, inp: crate::model::VocabularyState) -> Self {
            self.inner = self.inner.state_equals(inp);
            self
        }
        /// <p>When specified, only returns vocabularies with the <code>VocabularyState</code> field equal to the
        /// specified state.</p>
        pub fn set_state_equals(
            mut self,
            input: std::option::Option<crate::model::VocabularyState>,
        ) -> Self {
            self.inner = self.inner.set_state_equals(input);
            self
        }
        /// <p>When specified, the vocabularies returned in the list are limited to vocabularies whose name contains the
        /// specified string. The search is not case sensitive, <code>ListVocabularies</code> returns both "vocabularyname"
        /// and "VocabularyName" in the response list.</p>
        pub fn name_contains(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name_contains(inp);
            self
        }
        /// <p>When specified, the vocabularies returned in the list are limited to vocabularies whose name contains the
        /// specified string. The search is not case sensitive, <code>ListVocabularies</code> returns both "vocabularyname"
        /// and "VocabularyName" in the response list.</p>
        pub fn set_name_contains(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_name_contains(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListVocabularyFilters`.
    ///
    /// <p>Gets information about vocabulary filters.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListVocabularyFilters<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_vocabulary_filters_input::Builder,
    }
    impl<C, M, R> ListVocabularyFilters<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListVocabularyFilters`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListVocabularyFiltersOutput,
            aws_smithy_http::result::SdkError<crate::error::ListVocabularyFiltersError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListVocabularyFiltersInputOperationOutputAlias,
                crate::output::ListVocabularyFiltersOutput,
                crate::error::ListVocabularyFiltersError,
                crate::input::ListVocabularyFiltersInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>If the result of the previous request to <code>ListVocabularyFilters</code> was truncated, include the
        /// <code>NextToken</code> to fetch the next set of collections.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        /// <p>If the result of the previous request to <code>ListVocabularyFilters</code> was truncated, include the
        /// <code>NextToken</code> to fetch the next set of collections.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of filters to return in each page of results. If there are fewer results than the value you
        /// specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        /// <p>The maximum number of filters to return in each page of results. If there are fewer results than the value you
        /// specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>Filters the response so that it only contains vocabulary filters whose name contains the specified string.</p>
        pub fn name_contains(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name_contains(inp);
            self
        }
        /// <p>Filters the response so that it only contains vocabulary filters whose name contains the specified string.</p>
        pub fn set_name_contains(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_name_contains(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StartCallAnalyticsJob`.
    ///
    /// <p>Starts an asynchronous analytics job that not only transcribes the audio recording of a caller and agent, but
    /// also returns additional insights. These insights include how quickly or loudly the caller or agent was speaking. To
    /// retrieve additional insights with your analytics jobs, create categories. A category is a way to classify analytics jobs
    /// based on attributes, such as a customer's sentiment or a particular phrase being used during the call. For more
    /// information, see the  operation. </p>
    #[derive(std::fmt::Debug)]
    pub struct StartCallAnalyticsJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_call_analytics_job_input::Builder,
    }
    impl<C, M, R> StartCallAnalyticsJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `StartCallAnalyticsJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartCallAnalyticsJobOutput,
            aws_smithy_http::result::SdkError<crate::error::StartCallAnalyticsJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartCallAnalyticsJobInputOperationOutputAlias,
                crate::output::StartCallAnalyticsJobOutput,
                crate::error::StartCallAnalyticsJobError,
                crate::input::StartCallAnalyticsJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the call analytics job. You can't use the string "." or ".." by themselves as the job name. The name
        /// must also be unique within an Amazon Web Services account. If you try to create a call analytics job with the same
        /// name as a previous call analytics job, you get a <code>ConflictException</code> error.</p>
        pub fn call_analytics_job_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.call_analytics_job_name(inp);
            self
        }
        /// <p>The name of the call analytics job. You can't use the string "." or ".." by themselves as the job name. The name
        /// must also be unique within an Amazon Web Services account. If you try to create a call analytics job with the same
        /// name as a previous call analytics job, you get a <code>ConflictException</code> error.</p>
        pub fn set_call_analytics_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_call_analytics_job_name(input);
            self
        }
        /// <p>Describes the input media file in a transcription request.</p>
        pub fn media(mut self, inp: crate::model::Media) -> Self {
            self.inner = self.inner.media(inp);
            self
        }
        /// <p>Describes the input media file in a transcription request.</p>
        pub fn set_media(mut self, input: std::option::Option<crate::model::Media>) -> Self {
            self.inner = self.inner.set_media(input);
            self
        }
        /// <p>The Amazon S3 location where the output of the call analytics job is stored. You can provide the following
        /// location types to store the output of call analytics job:</p>
        /// <ul>
        /// <li>
        /// <p>s3://DOC-EXAMPLE-BUCKET1</p>
        /// <p> If you specify a bucket, Amazon Transcribe saves the output of the analytics job as a JSON file at the root level of the
        /// bucket.</p>
        /// </li>
        /// <li>
        /// <p>s3://DOC-EXAMPLE-BUCKET1/folder/</p>
        /// <p>f you specify a path, Amazon Transcribe saves the output of the analytics job as
        /// s3://DOC-EXAMPLE-BUCKET1/folder/your-transcription-job-name.json</p>
        /// <p>If you specify a folder, you must provide a trailing slash.</p>
        /// </li>
        /// <li>
        /// <p>s3://DOC-EXAMPLE-BUCKET1/folder/filename.json</p>
        /// <p> If you provide a path that has the filename specified, Amazon Transcribe saves the output of the analytics job as
        /// s3://DOC-EXAMPLEBUCKET1/folder/filename.json</p>
        /// </li>
        /// </ul>
        /// <p>You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of our
        /// analytics job using the <code>OutputEncryptionKMSKeyId</code> parameter. If you don't specify a KMS key,
        /// Amazon Transcribe uses the default Amazon S3 key for server-side encryption of the analytics job output that is placed in your
        /// S3 bucket.</p>
        pub fn output_location(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_location(inp);
            self
        }
        /// <p>The Amazon S3 location where the output of the call analytics job is stored. You can provide the following
        /// location types to store the output of call analytics job:</p>
        /// <ul>
        /// <li>
        /// <p>s3://DOC-EXAMPLE-BUCKET1</p>
        /// <p> If you specify a bucket, Amazon Transcribe saves the output of the analytics job as a JSON file at the root level of the
        /// bucket.</p>
        /// </li>
        /// <li>
        /// <p>s3://DOC-EXAMPLE-BUCKET1/folder/</p>
        /// <p>f you specify a path, Amazon Transcribe saves the output of the analytics job as
        /// s3://DOC-EXAMPLE-BUCKET1/folder/your-transcription-job-name.json</p>
        /// <p>If you specify a folder, you must provide a trailing slash.</p>
        /// </li>
        /// <li>
        /// <p>s3://DOC-EXAMPLE-BUCKET1/folder/filename.json</p>
        /// <p> If you provide a path that has the filename specified, Amazon Transcribe saves the output of the analytics job as
        /// s3://DOC-EXAMPLEBUCKET1/folder/filename.json</p>
        /// </li>
        /// </ul>
        /// <p>You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of our
        /// analytics job using the <code>OutputEncryptionKMSKeyId</code> parameter. If you don't specify a KMS key,
        /// Amazon Transcribe uses the default Amazon S3 key for server-side encryption of the analytics job output that is placed in your
        /// S3 bucket.</p>
        pub fn set_output_location(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_output_location(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service key used to encrypt
        /// the output of the call analytics job. The user calling the  operation must
        /// have permission to use the specified KMS key.</p>
        /// <p>You use either of the following to identify an Amazon Web Services KMS key in the current account:</p>
        /// <ul>
        /// <li>
        /// <p>KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>KMS Key Alias: "alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p> You can use either of the following to identify a KMS key in the current account or another account:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Resource Name (ARN) of a KMS key in the current account or another account:
        /// "arn:aws:kms:region:account ID:key/1234abcd-12ab-34cd-56ef1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>If you don't specify an encryption key, the output of the call analytics job is encrypted with the default Amazon
        /// S3 key (SSE-S3).</p>
        /// <p>If you specify a KMS key to encrypt your output, you must also specify an output location in the
        /// <code>OutputLocation</code> parameter. </p>
        pub fn output_encryption_kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_encryption_kms_key_id(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service key used to encrypt
        /// the output of the call analytics job. The user calling the  operation must
        /// have permission to use the specified KMS key.</p>
        /// <p>You use either of the following to identify an Amazon Web Services KMS key in the current account:</p>
        /// <ul>
        /// <li>
        /// <p>KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>KMS Key Alias: "alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p> You can use either of the following to identify a KMS key in the current account or another account:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Resource Name (ARN) of a KMS key in the current account or another account:
        /// "arn:aws:kms:region:account ID:key/1234abcd-12ab-34cd-56ef1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>If you don't specify an encryption key, the output of the call analytics job is encrypted with the default Amazon
        /// S3 key (SSE-S3).</p>
        /// <p>If you specify a KMS key to encrypt your output, you must also specify an output location in the
        /// <code>OutputLocation</code> parameter. </p>
        pub fn set_output_encryption_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_output_encryption_kms_key_id(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of a role that has access to the S3 bucket that contains your input files.
        /// Amazon Transcribe assumes this role to read queued audio files. If you have specified an output S3 bucket for your transcription
        /// results, this role should have access to the output bucket as well.</p>
        pub fn data_access_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.data_access_role_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of a role that has access to the S3 bucket that contains your input files.
        /// Amazon Transcribe assumes this role to read queued audio files. If you have specified an output S3 bucket for your transcription
        /// results, this role should have access to the output bucket as well.</p>
        pub fn set_data_access_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_data_access_role_arn(input);
            self
        }
        /// <p>A <code>Settings</code> object that provides optional settings for a call analytics job. </p>
        pub fn settings(mut self, inp: crate::model::CallAnalyticsJobSettings) -> Self {
            self.inner = self.inner.settings(inp);
            self
        }
        /// <p>A <code>Settings</code> object that provides optional settings for a call analytics job. </p>
        pub fn set_settings(
            mut self,
            input: std::option::Option<crate::model::CallAnalyticsJobSettings>,
        ) -> Self {
            self.inner = self.inner.set_settings(input);
            self
        }
        /// Appends an item to `ChannelDefinitions`.
        ///
        /// To override the contents of this collection use [`set_channel_definitions`](Self::set_channel_definitions).
        ///
        /// <p>When you start a call analytics job, you must pass an array that maps the agent and the customer to specific
        /// audio channels. The values you can assign to a channel are 0 and 1. The agent and the customer must each have
        /// their own channel. You can't assign more than one channel to an agent or customer. </p>
        pub fn channel_definitions(
            mut self,
            inp: impl Into<crate::model::ChannelDefinition>,
        ) -> Self {
            self.inner = self.inner.channel_definitions(inp);
            self
        }
        /// <p>When you start a call analytics job, you must pass an array that maps the agent and the customer to specific
        /// audio channels. The values you can assign to a channel are 0 and 1. The agent and the customer must each have
        /// their own channel. You can't assign more than one channel to an agent or customer. </p>
        pub fn set_channel_definitions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChannelDefinition>>,
        ) -> Self {
            self.inner = self.inner.set_channel_definitions(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StartMedicalTranscriptionJob`.
    ///
    /// <p>Starts a batch job to transcribe medical speech to text.</p>
    #[derive(std::fmt::Debug)]
    pub struct StartMedicalTranscriptionJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_medical_transcription_job_input::Builder,
    }
    impl<C, M, R> StartMedicalTranscriptionJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `StartMedicalTranscriptionJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartMedicalTranscriptionJobOutput,
            aws_smithy_http::result::SdkError<crate::error::StartMedicalTranscriptionJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartMedicalTranscriptionJobInputOperationOutputAlias,
                crate::output::StartMedicalTranscriptionJobOutput,
                crate::error::StartMedicalTranscriptionJobError,
                crate::input::StartMedicalTranscriptionJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the medical transcription job. You can't use the strings "<code>.</code>" or "<code>..</code>"
        /// by themselves as the job name. The name must also be unique within an Amazon Web Services account. If you try to
        /// create a medical transcription job with the same name as a previous medical transcription job, you get a
        /// <code>ConflictException</code> error.</p>
        pub fn medical_transcription_job_name(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.medical_transcription_job_name(inp);
            self
        }
        /// <p>The name of the medical transcription job. You can't use the strings "<code>.</code>" or "<code>..</code>"
        /// by themselves as the job name. The name must also be unique within an Amazon Web Services account. If you try to
        /// create a medical transcription job with the same name as a previous medical transcription job, you get a
        /// <code>ConflictException</code> error.</p>
        pub fn set_medical_transcription_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_medical_transcription_job_name(input);
            self
        }
        /// <p>The language code for the language spoken in the input media file. US English (en-US) is the valid value for
        /// medical transcription jobs. Any other value you enter for language code results in a
        /// <code>BadRequestException</code> error.</p>
        pub fn language_code(mut self, inp: crate::model::LanguageCode) -> Self {
            self.inner = self.inner.language_code(inp);
            self
        }
        /// <p>The language code for the language spoken in the input media file. US English (en-US) is the valid value for
        /// medical transcription jobs. Any other value you enter for language code results in a
        /// <code>BadRequestException</code> error.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.inner = self.inner.set_language_code(input);
            self
        }
        /// <p>The sample rate, in Hertz, of the audio track in the input media file.</p>
        /// <p>If you do not specify the media sample rate, Amazon Transcribe Medical determines the sample rate. If you specify the sample rate,
        /// it must match the rate detected by Amazon Transcribe Medical. In most cases, you should leave the
        /// <code>MediaSampleRateHertz</code> field blank and let Amazon Transcribe Medical determine the sample rate.</p>
        pub fn media_sample_rate_hertz(mut self, inp: i32) -> Self {
            self.inner = self.inner.media_sample_rate_hertz(inp);
            self
        }
        /// <p>The sample rate, in Hertz, of the audio track in the input media file.</p>
        /// <p>If you do not specify the media sample rate, Amazon Transcribe Medical determines the sample rate. If you specify the sample rate,
        /// it must match the rate detected by Amazon Transcribe Medical. In most cases, you should leave the
        /// <code>MediaSampleRateHertz</code> field blank and let Amazon Transcribe Medical determine the sample rate.</p>
        pub fn set_media_sample_rate_hertz(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_media_sample_rate_hertz(input);
            self
        }
        /// <p>The audio format of the input media file.</p>
        pub fn media_format(mut self, inp: crate::model::MediaFormat) -> Self {
            self.inner = self.inner.media_format(inp);
            self
        }
        /// <p>The audio format of the input media file.</p>
        pub fn set_media_format(
            mut self,
            input: std::option::Option<crate::model::MediaFormat>,
        ) -> Self {
            self.inner = self.inner.set_media_format(input);
            self
        }
        /// <p>Describes the input media file in a transcription request.</p>
        pub fn media(mut self, inp: crate::model::Media) -> Self {
            self.inner = self.inner.media(inp);
            self
        }
        /// <p>Describes the input media file in a transcription request.</p>
        pub fn set_media(mut self, input: std::option::Option<crate::model::Media>) -> Self {
            self.inner = self.inner.set_media(input);
            self
        }
        /// <p>The Amazon S3 location where the transcription is stored.</p>
        /// <p>You must set <code>OutputBucketName</code> for Amazon Transcribe Medical to store the transcription results. Your transcript
        /// appears in the S3 location you specify. When you call the <a>GetMedicalTranscriptionJob</a>, the operation
        /// returns this location in the <code>TranscriptFileUri</code> field. The S3 bucket must have permissions that allow
        /// Amazon Transcribe Medical to put files in the bucket. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions Required for
        /// IAM User Roles</a>.</p>
        /// <p>You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of your
        /// transcription using the <code>OutputEncryptionKMSKeyId</code> parameter. If you don't specify a KMS key, Amazon Transcribe Medical
        /// uses the default Amazon S3 key for server-side encryption of transcripts that are placed in your S3 bucket.</p>
        pub fn output_bucket_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_bucket_name(inp);
            self
        }
        /// <p>The Amazon S3 location where the transcription is stored.</p>
        /// <p>You must set <code>OutputBucketName</code> for Amazon Transcribe Medical to store the transcription results. Your transcript
        /// appears in the S3 location you specify. When you call the <a>GetMedicalTranscriptionJob</a>, the operation
        /// returns this location in the <code>TranscriptFileUri</code> field. The S3 bucket must have permissions that allow
        /// Amazon Transcribe Medical to put files in the bucket. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions Required for
        /// IAM User Roles</a>.</p>
        /// <p>You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of your
        /// transcription using the <code>OutputEncryptionKMSKeyId</code> parameter. If you don't specify a KMS key, Amazon Transcribe Medical
        /// uses the default Amazon S3 key for server-side encryption of transcripts that are placed in your S3 bucket.</p>
        pub fn set_output_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_output_bucket_name(input);
            self
        }
        /// <p>You can specify a location in an Amazon S3 bucket to store the output of your medical transcription job.</p>
        /// <p>If you don't specify an output key, Amazon Transcribe Medical stores the output of your transcription job in the Amazon S3 bucket you
        /// specified. By default, the object key is "your-transcription-job-name.json".</p>
        /// <p>You can use output keys to specify the Amazon S3 prefix and file name of the transcription output. For example,
        /// specifying the Amazon S3 prefix, "folder1/folder2/", as an output key would lead to the output being stored as
        /// "folder1/folder2/your-transcription-job-name.json". If you specify "my-other-job-name.json" as the output key, the object
        /// key is changed to "my-other-job-name.json". You can use an output key to change both the prefix and the file name, for
        /// example "folder/my-other-job-name.json".</p>
        /// <p>If you specify an output key, you must also specify an S3 bucket in the <code>OutputBucketName</code>
        /// parameter.</p>
        pub fn output_key(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_key(inp);
            self
        }
        /// <p>You can specify a location in an Amazon S3 bucket to store the output of your medical transcription job.</p>
        /// <p>If you don't specify an output key, Amazon Transcribe Medical stores the output of your transcription job in the Amazon S3 bucket you
        /// specified. By default, the object key is "your-transcription-job-name.json".</p>
        /// <p>You can use output keys to specify the Amazon S3 prefix and file name of the transcription output. For example,
        /// specifying the Amazon S3 prefix, "folder1/folder2/", as an output key would lead to the output being stored as
        /// "folder1/folder2/your-transcription-job-name.json". If you specify "my-other-job-name.json" as the output key, the object
        /// key is changed to "my-other-job-name.json". You can use an output key to change both the prefix and the file name, for
        /// example "folder/my-other-job-name.json".</p>
        /// <p>If you specify an output key, you must also specify an S3 bucket in the <code>OutputBucketName</code>
        /// parameter.</p>
        pub fn set_output_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_output_key(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service (KMS) key used to
        /// encrypt the output of the transcription job. The user calling the <a>StartMedicalTranscriptionJob</a>
        /// operation must have permission to use the specified KMS key.</p>
        /// <p>You use either of the following to identify a KMS key in the current account:</p>
        /// <ul>
        /// <li>
        /// <p>KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>KMS Key Alias: "alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>You can use either of the following to identify a KMS key in the current account or another account:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Resource Name (ARN) of a KMS key in the current account or another
        /// account: "arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>If you don't specify an encryption key, the output of the medical transcription job is encrypted with the default Amazon S3
        /// key (SSE-S3).</p>
        /// <p>If you specify a KMS key to encrypt your output, you must also specify an output location in the
        /// <code>OutputBucketName</code> parameter.</p>
        pub fn output_encryption_kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_encryption_kms_key_id(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service (KMS) key used to
        /// encrypt the output of the transcription job. The user calling the <a>StartMedicalTranscriptionJob</a>
        /// operation must have permission to use the specified KMS key.</p>
        /// <p>You use either of the following to identify a KMS key in the current account:</p>
        /// <ul>
        /// <li>
        /// <p>KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>KMS Key Alias: "alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>You can use either of the following to identify a KMS key in the current account or another account:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Resource Name (ARN) of a KMS key in the current account or another
        /// account: "arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>If you don't specify an encryption key, the output of the medical transcription job is encrypted with the default Amazon S3
        /// key (SSE-S3).</p>
        /// <p>If you specify a KMS key to encrypt your output, you must also specify an output location in the
        /// <code>OutputBucketName</code> parameter.</p>
        pub fn set_output_encryption_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_output_encryption_kms_key_id(input);
            self
        }
        /// Adds a key-value pair to `KMSEncryptionContext`.
        ///
        /// To override the contents of this collection use [`set_kms_encryption_context`](Self::set_kms_encryption_context).
        ///
        /// <p>A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added
        /// layer of security for your data.</p>
        pub fn kms_encryption_context(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.kms_encryption_context(k, v);
            self
        }
        /// <p>A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added
        /// layer of security for your data.</p>
        pub fn set_kms_encryption_context(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_kms_encryption_context(input);
            self
        }
        /// <p>Optional settings for the medical transcription job.</p>
        pub fn settings(mut self, inp: crate::model::MedicalTranscriptionSetting) -> Self {
            self.inner = self.inner.settings(inp);
            self
        }
        /// <p>Optional settings for the medical transcription job.</p>
        pub fn set_settings(
            mut self,
            input: std::option::Option<crate::model::MedicalTranscriptionSetting>,
        ) -> Self {
            self.inner = self.inner.set_settings(input);
            self
        }
        /// <p>You can configure Amazon Transcribe Medical to label content in the transcription output. If you specify <code>PHI</code>,
        /// Amazon Transcribe Medical labels the personal health information (PHI) that it identifies in the transcription output.</p>
        pub fn content_identification_type(
            mut self,
            inp: crate::model::MedicalContentIdentificationType,
        ) -> Self {
            self.inner = self.inner.content_identification_type(inp);
            self
        }
        /// <p>You can configure Amazon Transcribe Medical to label content in the transcription output. If you specify <code>PHI</code>,
        /// Amazon Transcribe Medical labels the personal health information (PHI) that it identifies in the transcription output.</p>
        pub fn set_content_identification_type(
            mut self,
            input: std::option::Option<crate::model::MedicalContentIdentificationType>,
        ) -> Self {
            self.inner = self.inner.set_content_identification_type(input);
            self
        }
        /// <p>The medical specialty of any clinician speaking in the input media.</p>
        pub fn specialty(mut self, inp: crate::model::Specialty) -> Self {
            self.inner = self.inner.specialty(inp);
            self
        }
        /// <p>The medical specialty of any clinician speaking in the input media.</p>
        pub fn set_specialty(
            mut self,
            input: std::option::Option<crate::model::Specialty>,
        ) -> Self {
            self.inner = self.inner.set_specialty(input);
            self
        }
        /// <p>The type of speech in the input audio. <code>CONVERSATION</code> refers to conversations between two or
        /// more speakers, e.g., a conversations between doctors and patients. <code>DICTATION</code> refers to
        /// single-speaker dictated speech, such as clinical notes.</p>
        pub fn r#type(mut self, inp: crate::model::Type) -> Self {
            self.inner = self.inner.r#type(inp);
            self
        }
        /// <p>The type of speech in the input audio. <code>CONVERSATION</code> refers to conversations between two or
        /// more speakers, e.g., a conversations between doctors and patients. <code>DICTATION</code> refers to
        /// single-speaker dictated speech, such as clinical notes.</p>
        pub fn set_type(mut self, input: std::option::Option<crate::model::Type>) -> Self {
            self.inner = self.inner.set_type(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Add tags to an Amazon Transcribe medical transcription job.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>Add tags to an Amazon Transcribe medical transcription job.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `StartTranscriptionJob`.
    ///
    /// <p>Starts an asynchronous job to transcribe speech to text.</p>
    #[derive(std::fmt::Debug)]
    pub struct StartTranscriptionJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_transcription_job_input::Builder,
    }
    impl<C, M, R> StartTranscriptionJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `StartTranscriptionJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartTranscriptionJobOutput,
            aws_smithy_http::result::SdkError<crate::error::StartTranscriptionJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartTranscriptionJobInputOperationOutputAlias,
                crate::output::StartTranscriptionJobOutput,
                crate::error::StartTranscriptionJobError,
                crate::input::StartTranscriptionJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the job. You can't use the strings "<code>.</code>" or "<code>..</code>" by themselves as the
        /// job name. The name must also be unique within an Amazon Web Services account. If you try to create a transcription
        /// job with the same name as a previous transcription job, you get a <code>ConflictException</code> error.</p>
        pub fn transcription_job_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.transcription_job_name(inp);
            self
        }
        /// <p>The name of the job. You can't use the strings "<code>.</code>" or "<code>..</code>" by themselves as the
        /// job name. The name must also be unique within an Amazon Web Services account. If you try to create a transcription
        /// job with the same name as a previous transcription job, you get a <code>ConflictException</code> error.</p>
        pub fn set_transcription_job_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_transcription_job_name(input);
            self
        }
        /// <p>The language code for the language used in the input media file.</p>
        /// <p>To transcribe speech in Modern Standard Arabic (ar-SA), your audio or video file must be encoded at a sample
        /// rate of 16,000 Hz or higher.</p>
        pub fn language_code(mut self, inp: crate::model::LanguageCode) -> Self {
            self.inner = self.inner.language_code(inp);
            self
        }
        /// <p>The language code for the language used in the input media file.</p>
        /// <p>To transcribe speech in Modern Standard Arabic (ar-SA), your audio or video file must be encoded at a sample
        /// rate of 16,000 Hz or higher.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.inner = self.inner.set_language_code(input);
            self
        }
        /// <p>The sample rate, in Hertz, of the audio track in the input media file. </p>
        /// <p>If you do not specify the media sample rate, Amazon Transcribe determines the sample rate. If you specify the sample rate, it
        /// must match the sample rate detected by Amazon Transcribe. In most cases, you should leave the
        /// <code>MediaSampleRateHertz</code> field blank and let Amazon Transcribe determine the sample rate.</p>
        pub fn media_sample_rate_hertz(mut self, inp: i32) -> Self {
            self.inner = self.inner.media_sample_rate_hertz(inp);
            self
        }
        /// <p>The sample rate, in Hertz, of the audio track in the input media file. </p>
        /// <p>If you do not specify the media sample rate, Amazon Transcribe determines the sample rate. If you specify the sample rate, it
        /// must match the sample rate detected by Amazon Transcribe. In most cases, you should leave the
        /// <code>MediaSampleRateHertz</code> field blank and let Amazon Transcribe determine the sample rate.</p>
        pub fn set_media_sample_rate_hertz(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_media_sample_rate_hertz(input);
            self
        }
        /// <p>The format of the input media file.</p>
        pub fn media_format(mut self, inp: crate::model::MediaFormat) -> Self {
            self.inner = self.inner.media_format(inp);
            self
        }
        /// <p>The format of the input media file.</p>
        pub fn set_media_format(
            mut self,
            input: std::option::Option<crate::model::MediaFormat>,
        ) -> Self {
            self.inner = self.inner.set_media_format(input);
            self
        }
        /// <p>An object that describes the input media for a transcription job.</p>
        pub fn media(mut self, inp: crate::model::Media) -> Self {
            self.inner = self.inner.media(inp);
            self
        }
        /// <p>An object that describes the input media for a transcription job.</p>
        pub fn set_media(mut self, input: std::option::Option<crate::model::Media>) -> Self {
            self.inner = self.inner.set_media(input);
            self
        }
        /// <p>The location where the transcription is stored.</p>
        /// <p>If you set the <code>OutputBucketName</code>, Amazon Transcribe puts the transcript in the specified S3 bucket. When
        /// you call the <a>GetTranscriptionJob</a> operation, the operation returns this location in the
        /// <code>TranscriptFileUri</code> field. If you enable content redaction, the redacted transcript appears in
        /// <code>RedactedTranscriptFileUri</code>. If you enable content redaction and choose to output an unredacted
        /// transcript, that transcript's location still appears in the <code>TranscriptFileUri</code>. The S3 bucket must have
        /// permissions that allow Amazon Transcribe to put files in the bucket. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions Required for
        /// IAM User Roles</a>.</p>
        /// <p>You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of your
        /// transcription using the <code>OutputEncryptionKMSKeyId</code> parameter. If you don't specify a KMS key, Amazon Transcribe
        /// uses the default Amazon S3 key for server-side encryption of transcripts that are placed in your S3 bucket.</p>
        /// <p>If you don't set the <code>OutputBucketName</code>, Amazon Transcribe generates a pre-signed URL, a shareable URL that
        /// provides secure access to your transcription, and returns it in the <code>TranscriptFileUri</code> field. Use this URL
        /// to download the transcription.</p>
        pub fn output_bucket_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_bucket_name(inp);
            self
        }
        /// <p>The location where the transcription is stored.</p>
        /// <p>If you set the <code>OutputBucketName</code>, Amazon Transcribe puts the transcript in the specified S3 bucket. When
        /// you call the <a>GetTranscriptionJob</a> operation, the operation returns this location in the
        /// <code>TranscriptFileUri</code> field. If you enable content redaction, the redacted transcript appears in
        /// <code>RedactedTranscriptFileUri</code>. If you enable content redaction and choose to output an unredacted
        /// transcript, that transcript's location still appears in the <code>TranscriptFileUri</code>. The S3 bucket must have
        /// permissions that allow Amazon Transcribe to put files in the bucket. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user">Permissions Required for
        /// IAM User Roles</a>.</p>
        /// <p>You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of your
        /// transcription using the <code>OutputEncryptionKMSKeyId</code> parameter. If you don't specify a KMS key, Amazon Transcribe
        /// uses the default Amazon S3 key for server-side encryption of transcripts that are placed in your S3 bucket.</p>
        /// <p>If you don't set the <code>OutputBucketName</code>, Amazon Transcribe generates a pre-signed URL, a shareable URL that
        /// provides secure access to your transcription, and returns it in the <code>TranscriptFileUri</code> field. Use this URL
        /// to download the transcription.</p>
        pub fn set_output_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_output_bucket_name(input);
            self
        }
        /// <p>You can specify a location in an Amazon S3 bucket to store the output of your transcription job.</p>
        /// <p>If you don't specify an output key, Amazon Transcribe stores the output of your transcription job in the Amazon S3 bucket you
        /// specified. By default, the object key is "your-transcription-job-name.json".</p>
        /// <p>You can use output keys to specify the Amazon S3 prefix and file name of the transcription output. For example,
        /// specifying the Amazon S3 prefix, "folder1/folder2/", as an output key would lead to the output being stored as
        /// "folder1/folder2/your-transcription-job-name.json". If you specify "my-other-job-name.json" as the output key, the
        /// object key is changed to "my-other-job-name.json". You can use an output key to change both the prefix and the file
        /// name, for example "folder/my-other-job-name.json".</p>
        /// <p>If you specify an output key, you must also specify an S3 bucket in the <code>OutputBucketName</code>
        /// parameter.</p>
        pub fn output_key(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_key(inp);
            self
        }
        /// <p>You can specify a location in an Amazon S3 bucket to store the output of your transcription job.</p>
        /// <p>If you don't specify an output key, Amazon Transcribe stores the output of your transcription job in the Amazon S3 bucket you
        /// specified. By default, the object key is "your-transcription-job-name.json".</p>
        /// <p>You can use output keys to specify the Amazon S3 prefix and file name of the transcription output. For example,
        /// specifying the Amazon S3 prefix, "folder1/folder2/", as an output key would lead to the output being stored as
        /// "folder1/folder2/your-transcription-job-name.json". If you specify "my-other-job-name.json" as the output key, the
        /// object key is changed to "my-other-job-name.json". You can use an output key to change both the prefix and the file
        /// name, for example "folder/my-other-job-name.json".</p>
        /// <p>If you specify an output key, you must also specify an S3 bucket in the <code>OutputBucketName</code>
        /// parameter.</p>
        pub fn set_output_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_output_key(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service (KMS) key used to
        /// encrypt the output of the transcription job. The user calling the <code>StartTranscriptionJob</code>
        /// operation must have permission to use the specified KMS key.</p>
        /// <p>You can use either of the following to identify a KMS key in the current account:</p>
        /// <ul>
        /// <li>
        /// <p>KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>KMS Key Alias: "alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>You can use either of the following to identify a KMS key in the current account or another account:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:region:account
        /// ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>ARN of a KMS Key Alias: "arn:aws:kms:region:account-ID:alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>If you don't specify an encryption key, the output of the transcription job is encrypted with the default
        /// Amazon S3 key (SSE-S3).</p>
        /// <p>If you specify a KMS key to encrypt your output, you must also specify an output location in the
        /// <code>OutputBucketName</code> parameter.</p>
        pub fn output_encryption_kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_encryption_kms_key_id(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service (KMS) key used to
        /// encrypt the output of the transcription job. The user calling the <code>StartTranscriptionJob</code>
        /// operation must have permission to use the specified KMS key.</p>
        /// <p>You can use either of the following to identify a KMS key in the current account:</p>
        /// <ul>
        /// <li>
        /// <p>KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>KMS Key Alias: "alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>You can use either of the following to identify a KMS key in the current account or another account:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:region:account
        /// ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"</p>
        /// </li>
        /// <li>
        /// <p>ARN of a KMS Key Alias: "arn:aws:kms:region:account-ID:alias/ExampleAlias"</p>
        /// </li>
        /// </ul>
        /// <p>If you don't specify an encryption key, the output of the transcription job is encrypted with the default
        /// Amazon S3 key (SSE-S3).</p>
        /// <p>If you specify a KMS key to encrypt your output, you must also specify an output location in the
        /// <code>OutputBucketName</code> parameter.</p>
        pub fn set_output_encryption_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_output_encryption_kms_key_id(input);
            self
        }
        /// Adds a key-value pair to `KMSEncryptionContext`.
        ///
        /// To override the contents of this collection use [`set_kms_encryption_context`](Self::set_kms_encryption_context).
        ///
        /// <p>A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added
        /// layer of security for your data.</p>
        pub fn kms_encryption_context(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.kms_encryption_context(k, v);
            self
        }
        /// <p>A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added
        /// layer of security for your data.</p>
        pub fn set_kms_encryption_context(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_kms_encryption_context(input);
            self
        }
        /// <p>A <code>Settings</code> object that provides optional settings for a transcription job.</p>
        pub fn settings(mut self, inp: crate::model::Settings) -> Self {
            self.inner = self.inner.settings(inp);
            self
        }
        /// <p>A <code>Settings</code> object that provides optional settings for a transcription job.</p>
        pub fn set_settings(mut self, input: std::option::Option<crate::model::Settings>) -> Self {
            self.inner = self.inner.set_settings(input);
            self
        }
        /// <p>Choose the custom language model you use for your transcription job in this parameter.</p>
        pub fn model_settings(mut self, inp: crate::model::ModelSettings) -> Self {
            self.inner = self.inner.model_settings(inp);
            self
        }
        /// <p>Choose the custom language model you use for your transcription job in this parameter.</p>
        pub fn set_model_settings(
            mut self,
            input: std::option::Option<crate::model::ModelSettings>,
        ) -> Self {
            self.inner = self.inner.set_model_settings(input);
            self
        }
        /// <p>Provides information about how a transcription job is executed. Use this field to indicate that the job can be
        /// queued for deferred execution if the concurrency limit is reached and there are no slots available to immediately run
        /// the job.</p>
        pub fn job_execution_settings(mut self, inp: crate::model::JobExecutionSettings) -> Self {
            self.inner = self.inner.job_execution_settings(inp);
            self
        }
        /// <p>Provides information about how a transcription job is executed. Use this field to indicate that the job can be
        /// queued for deferred execution if the concurrency limit is reached and there are no slots available to immediately run
        /// the job.</p>
        pub fn set_job_execution_settings(
            mut self,
            input: std::option::Option<crate::model::JobExecutionSettings>,
        ) -> Self {
            self.inner = self.inner.set_job_execution_settings(input);
            self
        }
        /// <p>An object that contains the request parameters for content redaction.</p>
        pub fn content_redaction(mut self, inp: crate::model::ContentRedaction) -> Self {
            self.inner = self.inner.content_redaction(inp);
            self
        }
        /// <p>An object that contains the request parameters for content redaction.</p>
        pub fn set_content_redaction(
            mut self,
            input: std::option::Option<crate::model::ContentRedaction>,
        ) -> Self {
            self.inner = self.inner.set_content_redaction(input);
            self
        }
        /// <p>Set this field to <code>true</code> to enable automatic language identification. Automatic language identification
        /// is disabled by default. You receive a <code>BadRequestException</code> error if you enter a value for a
        /// <code>LanguageCode</code>.</p>
        pub fn identify_language(mut self, inp: bool) -> Self {
            self.inner = self.inner.identify_language(inp);
            self
        }
        /// <p>Set this field to <code>true</code> to enable automatic language identification. Automatic language identification
        /// is disabled by default. You receive a <code>BadRequestException</code> error if you enter a value for a
        /// <code>LanguageCode</code>.</p>
        pub fn set_identify_language(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_identify_language(input);
            self
        }
        /// Appends an item to `LanguageOptions`.
        ///
        /// To override the contents of this collection use [`set_language_options`](Self::set_language_options).
        ///
        /// <p>An object containing a list of languages that might be present in your collection of audio files. Automatic language
        /// identification chooses a language that best matches the source audio from that list.</p>
        /// <p>To transcribe speech in Modern Standard Arabic (ar-SA), your audio or video file must be encoded at a sample
        /// rate of 16,000 Hz or higher.</p>
        pub fn language_options(mut self, inp: impl Into<crate::model::LanguageCode>) -> Self {
            self.inner = self.inner.language_options(inp);
            self
        }
        /// <p>An object containing a list of languages that might be present in your collection of audio files. Automatic language
        /// identification chooses a language that best matches the source audio from that list.</p>
        /// <p>To transcribe speech in Modern Standard Arabic (ar-SA), your audio or video file must be encoded at a sample
        /// rate of 16,000 Hz or higher.</p>
        pub fn set_language_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LanguageCode>>,
        ) -> Self {
            self.inner = self.inner.set_language_options(input);
            self
        }
        /// <p>Add subtitles to your batch transcription job.</p>
        pub fn subtitles(mut self, inp: crate::model::Subtitles) -> Self {
            self.inner = self.inner.subtitles(inp);
            self
        }
        /// <p>Add subtitles to your batch transcription job.</p>
        pub fn set_subtitles(
            mut self,
            input: std::option::Option<crate::model::Subtitles>,
        ) -> Self {
            self.inner = self.inner.set_subtitles(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Add tags to an Amazon Transcribe transcription job.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>Add tags to an Amazon Transcribe transcription job.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// Adds a key-value pair to `LanguageIdSettings`.
        ///
        /// To override the contents of this collection use [`set_language_id_settings`](Self::set_language_id_settings).
        ///
        /// <p>The language identification settings associated with your transcription job. These settings include
        /// <code>VocabularyName</code>, <code>VocabularyFilterName</code>, and
        /// <code>LanguageModelName</code>.</p>
        pub fn language_id_settings(
            mut self,
            k: impl Into<crate::model::LanguageCode>,
            v: impl Into<crate::model::LanguageIdSettings>,
        ) -> Self {
            self.inner = self.inner.language_id_settings(k, v);
            self
        }
        /// <p>The language identification settings associated with your transcription job. These settings include
        /// <code>VocabularyName</code>, <code>VocabularyFilterName</code>, and
        /// <code>LanguageModelName</code>.</p>
        pub fn set_language_id_settings(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    crate::model::LanguageCode,
                    crate::model::LanguageIdSettings,
                >,
            >,
        ) -> Self {
            self.inner = self.inner.set_language_id_settings(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TagResource`.
    ///
    /// <p>Tags an Amazon Transcribe resource with the given list of tags.</p>
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `TagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to tag. ARNs have the format
        /// <code>arn:partition:service:region:account-id:resource-type/resource-id</code> (for example,
        /// <code>arn:aws:transcribe:us-east-1:account-id:transcription-job/your-job-name</code>). Valid
        /// values for <code>resource-type</code> are: <code>transcription-job</code>,
        /// <code>medical-transcription-job</code>, <code>vocabulary</code>,
        /// <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and
        /// <code>language-model</code>.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to tag. ARNs have the format
        /// <code>arn:partition:service:region:account-id:resource-type/resource-id</code> (for example,
        /// <code>arn:aws:transcribe:us-east-1:account-id:transcription-job/your-job-name</code>). Valid
        /// values for <code>resource-type</code> are: <code>transcription-job</code>,
        /// <code>medical-transcription-job</code>, <code>vocabulary</code>,
        /// <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and
        /// <code>language-model</code>.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags you are assigning to a given Amazon Transcribe resource.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        /// <p>The tags you are assigning to a given Amazon Transcribe resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UntagResource`.
    ///
    /// <p>Removes specified tags from a specified Amazon Transcribe resource.</p>
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UntagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to remove tags from.
        /// ARNs have the format
        /// <code>arn:partition:service:region:account-id:resource-type/resource-id</code> (for example,
        /// <code>arn:aws:transcribe:us-east-1:account-id:transcription-job/your-job-name</code>). Valid
        /// values for <code>resource-type</code> are: <code>transcription-job</code>,
        /// <code>medical-transcription-job</code>, <code>vocabulary</code>,
        /// <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and
        /// <code>language-model</code>.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to remove tags from.
        /// ARNs have the format
        /// <code>arn:partition:service:region:account-id:resource-type/resource-id</code> (for example,
        /// <code>arn:aws:transcribe:us-east-1:account-id:transcription-job/your-job-name</code>). Valid
        /// values for <code>resource-type</code> are: <code>transcription-job</code>,
        /// <code>medical-transcription-job</code>, <code>vocabulary</code>,
        /// <code>medical-vocabulary</code>, <code>vocabulary-filter</code>, and
        /// <code>language-model</code>.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>A list of tag keys you want to remove from a specified Amazon Transcribe resource.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        /// <p>A list of tag keys you want to remove from a specified Amazon Transcribe resource.</p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateCallAnalyticsCategory`.
    ///
    /// <p>Updates the call analytics category with new values. The <code>UpdateCallAnalyticsCategory</code>
    /// operation overwrites all of the existing information with the values that you provide in the request. </p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateCallAnalyticsCategory<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_call_analytics_category_input::Builder,
    }
    impl<C, M, R> UpdateCallAnalyticsCategory<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateCallAnalyticsCategory`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateCallAnalyticsCategoryOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateCallAnalyticsCategoryError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateCallAnalyticsCategoryInputOperationOutputAlias,
                crate::output::UpdateCallAnalyticsCategoryOutput,
                crate::error::UpdateCallAnalyticsCategoryError,
                crate::input::UpdateCallAnalyticsCategoryInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the analytics category to update. The name is case sensitive. If you try to update a call analytics
        /// category with the same name as a previous category you will receive a <code>ConflictException</code> error.</p>
        pub fn category_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.category_name(inp);
            self
        }
        /// <p>The name of the analytics category to update. The name is case sensitive. If you try to update a call analytics
        /// category with the same name as a previous category you will receive a <code>ConflictException</code> error.</p>
        pub fn set_category_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_category_name(input);
            self
        }
        /// Appends an item to `Rules`.
        ///
        /// To override the contents of this collection use [`set_rules`](Self::set_rules).
        ///
        /// <p>The rules used for the updated analytics category. The rules that you provide in this field replace the ones
        /// that are currently being used. </p>
        pub fn rules(mut self, inp: impl Into<crate::model::Rule>) -> Self {
            self.inner = self.inner.rules(inp);
            self
        }
        /// <p>The rules used for the updated analytics category. The rules that you provide in this field replace the ones
        /// that are currently being used. </p>
        pub fn set_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Rule>>,
        ) -> Self {
            self.inner = self.inner.set_rules(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateMedicalVocabulary`.
    ///
    /// <p>Updates a vocabulary with new values that you provide in a different text file from the one you used to create
    /// the vocabulary. The <code>UpdateMedicalVocabulary</code> operation overwrites all of the existing information
    /// with the values that you provide in the request.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateMedicalVocabulary<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_medical_vocabulary_input::Builder,
    }
    impl<C, M, R> UpdateMedicalVocabulary<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateMedicalVocabulary`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateMedicalVocabularyOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateMedicalVocabularyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateMedicalVocabularyInputOperationOutputAlias,
                crate::output::UpdateMedicalVocabularyOutput,
                crate::error::UpdateMedicalVocabularyError,
                crate::input::UpdateMedicalVocabularyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary to update. The name is case sensitive. If you try to update a vocabulary with the
        /// same name as a vocabulary you've already made, you get a <code>ConflictException</code> error.</p>
        pub fn vocabulary_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_name(inp);
            self
        }
        /// <p>The name of the vocabulary to update. The name is case sensitive. If you try to update a vocabulary with the
        /// same name as a vocabulary you've already made, you get a <code>ConflictException</code> error.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_name(input);
            self
        }
        /// <p>The language code of the language used for the entries in the updated vocabulary. US English (en-US) is the
        /// only valid language code in Amazon Transcribe Medical.</p>
        pub fn language_code(mut self, inp: crate::model::LanguageCode) -> Self {
            self.inner = self.inner.language_code(inp);
            self
        }
        /// <p>The language code of the language used for the entries in the updated vocabulary. US English (en-US) is the
        /// only valid language code in Amazon Transcribe Medical.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.inner = self.inner.set_language_code(input);
            self
        }
        /// <p>The location in Amazon S3 of the text file that contains your custom vocabulary. The URI must be in the same
        /// Amazon Web Services Region as the resource that you are calling. The following is the format for a  URI:</p>
        /// <p>
        /// <code>
        /// https://s3.<aws-region>.amazonaws.com/<bucket-name>/<keyprefix>/<objectkey>
        /// </code>
        /// </p>
        /// <p>For example:</p>
        /// <p>
        /// <code>https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt</code>
        /// </p>
        /// <p>For more information about Amazon S3 object names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3
        /// Developer Guide</i>.</p>
        /// <p>For more information about custom vocabularies in Amazon Transcribe Medical, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary">Medical Custom Vocabularies</a>.</p>
        pub fn vocabulary_file_uri(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_file_uri(inp);
            self
        }
        /// <p>The location in Amazon S3 of the text file that contains your custom vocabulary. The URI must be in the same
        /// Amazon Web Services Region as the resource that you are calling. The following is the format for a  URI:</p>
        /// <p>
        /// <code>
        /// https://s3.<aws-region>.amazonaws.com/<bucket-name>/<keyprefix>/<objectkey>
        /// </code>
        /// </p>
        /// <p>For example:</p>
        /// <p>
        /// <code>https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt</code>
        /// </p>
        /// <p>For more information about Amazon S3 object names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3
        /// Developer Guide</i>.</p>
        /// <p>For more information about custom vocabularies in Amazon Transcribe Medical, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary">Medical Custom Vocabularies</a>.</p>
        pub fn set_vocabulary_file_uri(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_file_uri(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateVocabulary`.
    ///
    /// <p>Updates an existing vocabulary with new values. The <code>UpdateVocabulary</code> operation overwrites
    /// all of the existing information with the values that you provide in the request. </p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateVocabulary<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_vocabulary_input::Builder,
    }
    impl<C, M, R> UpdateVocabulary<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateVocabulary`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateVocabularyOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateVocabularyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateVocabularyInputOperationOutputAlias,
                crate::output::UpdateVocabularyOutput,
                crate::error::UpdateVocabularyError,
                crate::input::UpdateVocabularyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary to update. The name is case sensitive. If you try to update a vocabulary with the
        /// same name as a previous vocabulary you will receive a <code>ConflictException</code> error.</p>
        pub fn vocabulary_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_name(inp);
            self
        }
        /// <p>The name of the vocabulary to update. The name is case sensitive. If you try to update a vocabulary with the
        /// same name as a previous vocabulary you will receive a <code>ConflictException</code> error.</p>
        pub fn set_vocabulary_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_name(input);
            self
        }
        /// <p>The language code of the vocabulary entries. For a list of languages and their corresponding language codes,
        /// see <a>transcribe-whatis</a>.</p>
        pub fn language_code(mut self, inp: crate::model::LanguageCode) -> Self {
            self.inner = self.inner.language_code(inp);
            self
        }
        /// <p>The language code of the vocabulary entries. For a list of languages and their corresponding language codes,
        /// see <a>transcribe-whatis</a>.</p>
        pub fn set_language_code(
            mut self,
            input: std::option::Option<crate::model::LanguageCode>,
        ) -> Self {
            self.inner = self.inner.set_language_code(input);
            self
        }
        /// Appends an item to `Phrases`.
        ///
        /// To override the contents of this collection use [`set_phrases`](Self::set_phrases).
        ///
        /// <p>An array of strings containing the vocabulary entries.</p>
        pub fn phrases(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.phrases(inp);
            self
        }
        /// <p>An array of strings containing the vocabulary entries.</p>
        pub fn set_phrases(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_phrases(input);
            self
        }
        /// <p>The S3 location of the text file that contains the definition of the custom vocabulary. The URI must be in the
        /// same region as the API endpoint that you are calling. The general form is </p>
        ///
        /// <p>For example:</p>
        ///
        /// <p>For more information about S3 object names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3
        /// Developer Guide</i>.</p>
        /// <p>For more information about custom vocabularies, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary">Custom Vocabularies</a>.</p>
        pub fn vocabulary_file_uri(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_file_uri(inp);
            self
        }
        /// <p>The S3 location of the text file that contains the definition of the custom vocabulary. The URI must be in the
        /// same region as the API endpoint that you are calling. The general form is </p>
        ///
        /// <p>For example:</p>
        ///
        /// <p>For more information about S3 object names, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys">Object Keys</a> in the <i>Amazon S3
        /// Developer Guide</i>.</p>
        /// <p>For more information about custom vocabularies, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary">Custom Vocabularies</a>.</p>
        pub fn set_vocabulary_file_uri(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_file_uri(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateVocabularyFilter`.
    ///
    /// <p>Updates a vocabulary filter with a new list of filtered words.</p>
    #[derive(std::fmt::Debug)]
    pub struct UpdateVocabularyFilter<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_vocabulary_filter_input::Builder,
    }
    impl<C, M, R> UpdateVocabularyFilter<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UpdateVocabularyFilter`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateVocabularyFilterOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateVocabularyFilterError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateVocabularyFilterInputOperationOutputAlias,
                crate::output::UpdateVocabularyFilterOutput,
                crate::error::UpdateVocabularyFilterError,
                crate::input::UpdateVocabularyFilterInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vocabulary filter to update. If you try to update a vocabulary filter with the same name as
        /// another vocabulary filter, you get a <code>ConflictException</code> error.</p>
        pub fn vocabulary_filter_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_filter_name(inp);
            self
        }
        /// <p>The name of the vocabulary filter to update. If you try to update a vocabulary filter with the same name as
        /// another vocabulary filter, you get a <code>ConflictException</code> error.</p>
        pub fn set_vocabulary_filter_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_filter_name(input);
            self
        }
        /// Appends an item to `Words`.
        ///
        /// To override the contents of this collection use [`set_words`](Self::set_words).
        ///
        /// <p>The words to use in the vocabulary filter. Only use characters from the character set defined for custom
        /// vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
        /// <p>If you provide a list of words in the <code>Words</code> parameter, you can't use the
        /// <code>VocabularyFilterFileUri</code> parameter.</p>
        pub fn words(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.words(inp);
            self
        }
        /// <p>The words to use in the vocabulary filter. Only use characters from the character set defined for custom
        /// vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
        /// <p>If you provide a list of words in the <code>Words</code> parameter, you can't use the
        /// <code>VocabularyFilterFileUri</code> parameter.</p>
        pub fn set_words(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_words(input);
            self
        }
        /// <p>The Amazon S3 location of a text file used as input to create the vocabulary filter. Only use characters from
        /// the character set defined for custom vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
        /// <p>The specified file must be less than 50 KB of UTF-8 characters.</p>
        /// <p>If you provide the location of a list of words in the
        /// <code>VocabularyFilterFileUri</code> parameter, you can't use the <code>Words</code>
        /// parameter.</p>
        pub fn vocabulary_filter_file_uri(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vocabulary_filter_file_uri(inp);
            self
        }
        /// <p>The Amazon S3 location of a text file used as input to create the vocabulary filter. Only use characters from
        /// the character set defined for custom vocabularies. For a list of character sets, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets">Character Sets for Custom Vocabularies</a>.</p>
        /// <p>The specified file must be less than 50 KB of UTF-8 characters.</p>
        /// <p>If you provide the location of a list of words in the
        /// <code>VocabularyFilterFileUri</code> parameter, you can't use the <code>Words</code>
        /// parameter.</p>
        pub fn set_vocabulary_filter_file_uri(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vocabulary_filter_file_uri(input);
            self
        }
    }
}
impl<C> Client<C, crate::middleware::DefaultMiddleware, aws_smithy_client::retry::Standard> {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::new()
            .connector(conn)
            .middleware(crate::middleware::DefaultMiddleware::new());
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        aws_smithy_client::erase::DynConnector,
        crate::middleware::DefaultMiddleware,
        aws_smithy_client::retry::Standard,
    >
{
    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::dyn_https()
            .middleware(crate::middleware::DefaultMiddleware::new());
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        // the builder maintains a try-state. To avoid suppressing the warning when sleep is unset,
        // only set it if we actually have a sleep impl.
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
