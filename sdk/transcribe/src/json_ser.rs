// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_language_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLanguageModelInput,
) {
    if let Some(var_1) = &input.language_code {
        object.key("LanguageCode").string(var_1.as_str());
    }
    if let Some(var_2) = &input.base_model_name {
        object.key("BaseModelName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.model_name {
        object.key("ModelName").string(var_3);
    }
    if let Some(var_4) = &input.input_data_config {
        let mut object_5 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_5, var_4);
        object_5.finish();
    }
}

pub fn serialize_structure_create_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMedicalVocabularyInput,
) {
    if let Some(var_6) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_6);
    }
    if let Some(var_7) = &input.language_code {
        object.key("LanguageCode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_8);
    }
}

pub fn serialize_structure_create_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVocabularyInput,
) {
    if let Some(var_9) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_9);
    }
    if let Some(var_10) = &input.language_code {
        object.key("LanguageCode").string(var_10.as_str());
    }
    if let Some(var_11) = &input.phrases {
        let mut array_12 = object.key("Phrases").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13);
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_14);
    }
}

pub fn serialize_structure_create_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVocabularyFilterInput,
) {
    if let Some(var_15) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_15);
    }
    if let Some(var_16) = &input.language_code {
        object.key("LanguageCode").string(var_16.as_str());
    }
    if let Some(var_17) = &input.words {
        let mut array_18 = object.key("Words").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19);
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.vocabulary_filter_file_uri {
        object.key("VocabularyFilterFileUri").string(var_20);
    }
}

pub fn serialize_structure_delete_language_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLanguageModelInput,
) {
    if let Some(var_21) = &input.model_name {
        object.key("ModelName").string(var_21);
    }
}

pub fn serialize_structure_delete_medical_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMedicalTranscriptionJobInput,
) {
    if let Some(var_22) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_22);
    }
}

pub fn serialize_structure_delete_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMedicalVocabularyInput,
) {
    if let Some(var_23) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_23);
    }
}

pub fn serialize_structure_delete_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTranscriptionJobInput,
) {
    if let Some(var_24) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_24);
    }
}

pub fn serialize_structure_delete_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVocabularyInput,
) {
    if let Some(var_25) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_25);
    }
}

pub fn serialize_structure_delete_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVocabularyFilterInput,
) {
    if let Some(var_26) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_26);
    }
}

pub fn serialize_structure_describe_language_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLanguageModelInput,
) {
    if let Some(var_27) = &input.model_name {
        object.key("ModelName").string(var_27);
    }
}

pub fn serialize_structure_get_medical_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMedicalTranscriptionJobInput,
) {
    if let Some(var_28) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_28);
    }
}

pub fn serialize_structure_get_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMedicalVocabularyInput,
) {
    if let Some(var_29) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_29);
    }
}

pub fn serialize_structure_get_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTranscriptionJobInput,
) {
    if let Some(var_30) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_30);
    }
}

pub fn serialize_structure_get_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetVocabularyInput,
) {
    if let Some(var_31) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_31);
    }
}

pub fn serialize_structure_get_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetVocabularyFilterInput,
) {
    if let Some(var_32) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_32);
    }
}

pub fn serialize_structure_list_language_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLanguageModelsInput,
) {
    if let Some(var_33) = &input.status_equals {
        object.key("StatusEquals").string(var_33.as_str());
    }
    if let Some(var_34) = &input.name_contains {
        object.key("NameContains").string(var_34);
    }
    if let Some(var_35) = &input.next_token {
        object.key("NextToken").string(var_35);
    }
    if let Some(var_36) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_36).into()),
        );
    }
}

pub fn serialize_structure_list_medical_transcription_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMedicalTranscriptionJobsInput,
) {
    if let Some(var_37) = &input.status {
        object.key("Status").string(var_37.as_str());
    }
    if let Some(var_38) = &input.job_name_contains {
        object.key("JobNameContains").string(var_38);
    }
    if let Some(var_39) = &input.next_token {
        object.key("NextToken").string(var_39);
    }
    if let Some(var_40) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_40).into()),
        );
    }
}

pub fn serialize_structure_list_medical_vocabularies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMedicalVocabulariesInput,
) {
    if let Some(var_41) = &input.next_token {
        object.key("NextToken").string(var_41);
    }
    if let Some(var_42) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_42).into()),
        );
    }
    if let Some(var_43) = &input.state_equals {
        object.key("StateEquals").string(var_43.as_str());
    }
    if let Some(var_44) = &input.name_contains {
        object.key("NameContains").string(var_44);
    }
}

pub fn serialize_structure_list_transcription_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTranscriptionJobsInput,
) {
    if let Some(var_45) = &input.status {
        object.key("Status").string(var_45.as_str());
    }
    if let Some(var_46) = &input.job_name_contains {
        object.key("JobNameContains").string(var_46);
    }
    if let Some(var_47) = &input.next_token {
        object.key("NextToken").string(var_47);
    }
    if let Some(var_48) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_48).into()),
        );
    }
}

pub fn serialize_structure_list_vocabularies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVocabulariesInput,
) {
    if let Some(var_49) = &input.next_token {
        object.key("NextToken").string(var_49);
    }
    if let Some(var_50) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_50).into()),
        );
    }
    if let Some(var_51) = &input.state_equals {
        object.key("StateEquals").string(var_51.as_str());
    }
    if let Some(var_52) = &input.name_contains {
        object.key("NameContains").string(var_52);
    }
}

pub fn serialize_structure_list_vocabulary_filters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVocabularyFiltersInput,
) {
    if let Some(var_53) = &input.next_token {
        object.key("NextToken").string(var_53);
    }
    if let Some(var_54) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_54).into()),
        );
    }
    if let Some(var_55) = &input.name_contains {
        object.key("NameContains").string(var_55);
    }
}

pub fn serialize_structure_start_medical_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMedicalTranscriptionJobInput,
) {
    if let Some(var_56) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_56);
    }
    if let Some(var_57) = &input.language_code {
        object.key("LanguageCode").string(var_57.as_str());
    }
    if let Some(var_58) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    if let Some(var_59) = &input.media_format {
        object.key("MediaFormat").string(var_59.as_str());
    }
    if let Some(var_60) = &input.media {
        let mut object_61 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_media(&mut object_61, var_60);
        object_61.finish();
    }
    if let Some(var_62) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_62);
    }
    if let Some(var_63) = &input.output_key {
        object.key("OutputKey").string(var_63);
    }
    if let Some(var_64) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_64);
    }
    if let Some(var_65) = &input.settings {
        let mut object_66 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_medical_transcription_setting(&mut object_66, var_65);
        object_66.finish();
    }
    if let Some(var_67) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_67.as_str());
    }
    if let Some(var_68) = &input.specialty {
        object.key("Specialty").string(var_68.as_str());
    }
    if let Some(var_69) = &input.r#type {
        object.key("Type").string(var_69.as_str());
    }
}

pub fn serialize_structure_start_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTranscriptionJobInput,
) {
    if let Some(var_70) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_70);
    }
    if let Some(var_71) = &input.language_code {
        object.key("LanguageCode").string(var_71.as_str());
    }
    if let Some(var_72) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    if let Some(var_73) = &input.media_format {
        object.key("MediaFormat").string(var_73.as_str());
    }
    if let Some(var_74) = &input.media {
        let mut object_75 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_media(&mut object_75, var_74);
        object_75.finish();
    }
    if let Some(var_76) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_76);
    }
    if let Some(var_77) = &input.output_key {
        object.key("OutputKey").string(var_77);
    }
    if let Some(var_78) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_78);
    }
    if let Some(var_79) = &input.settings {
        let mut object_80 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_settings(&mut object_80, var_79);
        object_80.finish();
    }
    if let Some(var_81) = &input.model_settings {
        let mut object_82 = object.key("ModelSettings").start_object();
        crate::json_ser::serialize_structure_model_settings(&mut object_82, var_81);
        object_82.finish();
    }
    if let Some(var_83) = &input.job_execution_settings {
        let mut object_84 = object.key("JobExecutionSettings").start_object();
        crate::json_ser::serialize_structure_job_execution_settings(&mut object_84, var_83);
        object_84.finish();
    }
    if let Some(var_85) = &input.content_redaction {
        let mut object_86 = object.key("ContentRedaction").start_object();
        crate::json_ser::serialize_structure_content_redaction(&mut object_86, var_85);
        object_86.finish();
    }
    if let Some(var_87) = &input.identify_language {
        object.key("IdentifyLanguage").boolean(*var_87);
    }
    if let Some(var_88) = &input.language_options {
        let mut array_89 = object.key("LanguageOptions").start_array();
        for item_90 in var_88 {
            {
                array_89.value().string(item_90.as_str());
            }
        }
        array_89.finish();
    }
}

pub fn serialize_structure_update_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMedicalVocabularyInput,
) {
    if let Some(var_91) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_91);
    }
    if let Some(var_92) = &input.language_code {
        object.key("LanguageCode").string(var_92.as_str());
    }
    if let Some(var_93) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_93);
    }
}

pub fn serialize_structure_update_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVocabularyInput,
) {
    if let Some(var_94) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_94);
    }
    if let Some(var_95) = &input.language_code {
        object.key("LanguageCode").string(var_95.as_str());
    }
    if let Some(var_96) = &input.phrases {
        let mut array_97 = object.key("Phrases").start_array();
        for item_98 in var_96 {
            {
                array_97.value().string(item_98);
            }
        }
        array_97.finish();
    }
    if let Some(var_99) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_99);
    }
}

pub fn serialize_structure_update_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVocabularyFilterInput,
) {
    if let Some(var_100) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_100);
    }
    if let Some(var_101) = &input.words {
        let mut array_102 = object.key("Words").start_array();
        for item_103 in var_101 {
            {
                array_102.value().string(item_103);
            }
        }
        array_102.finish();
    }
    if let Some(var_104) = &input.vocabulary_filter_file_uri {
        object.key("VocabularyFilterFileUri").string(var_104);
    }
}

pub fn serialize_structure_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDataConfig,
) {
    if let Some(var_105) = &input.s3_uri {
        object.key("S3Uri").string(var_105);
    }
    if let Some(var_106) = &input.tuning_data_s3_uri {
        object.key("TuningDataS3Uri").string(var_106);
    }
    if let Some(var_107) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_107);
    }
}

pub fn serialize_structure_media(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Media,
) {
    if let Some(var_108) = &input.media_file_uri {
        object.key("MediaFileUri").string(var_108);
    }
}

pub fn serialize_structure_medical_transcription_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MedicalTranscriptionSetting,
) {
    if let Some(var_109) = &input.show_speaker_labels {
        object.key("ShowSpeakerLabels").boolean(*var_109);
    }
    if let Some(var_110) = &input.max_speaker_labels {
        object.key("MaxSpeakerLabels").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    if let Some(var_111) = &input.channel_identification {
        object.key("ChannelIdentification").boolean(*var_111);
    }
    if let Some(var_112) = &input.show_alternatives {
        object.key("ShowAlternatives").boolean(*var_112);
    }
    if let Some(var_113) = &input.max_alternatives {
        object.key("MaxAlternatives").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_113).into()),
        );
    }
    if let Some(var_114) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_114);
    }
}

pub fn serialize_structure_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Settings,
) {
    if let Some(var_115) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_115);
    }
    if let Some(var_116) = &input.show_speaker_labels {
        object.key("ShowSpeakerLabels").boolean(*var_116);
    }
    if let Some(var_117) = &input.max_speaker_labels {
        object.key("MaxSpeakerLabels").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_117).into()),
        );
    }
    if let Some(var_118) = &input.channel_identification {
        object.key("ChannelIdentification").boolean(*var_118);
    }
    if let Some(var_119) = &input.show_alternatives {
        object.key("ShowAlternatives").boolean(*var_119);
    }
    if let Some(var_120) = &input.max_alternatives {
        object.key("MaxAlternatives").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_120).into()),
        );
    }
    if let Some(var_121) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_121);
    }
    if let Some(var_122) = &input.vocabulary_filter_method {
        object
            .key("VocabularyFilterMethod")
            .string(var_122.as_str());
    }
}

pub fn serialize_structure_model_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelSettings,
) {
    if let Some(var_123) = &input.language_model_name {
        object.key("LanguageModelName").string(var_123);
    }
}

pub fn serialize_structure_job_execution_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobExecutionSettings,
) {
    if let Some(var_124) = &input.allow_deferred_execution {
        object.key("AllowDeferredExecution").boolean(*var_124);
    }
    if let Some(var_125) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_125);
    }
}

pub fn serialize_structure_content_redaction(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContentRedaction,
) {
    if let Some(var_126) = &input.redaction_type {
        object.key("RedactionType").string(var_126.as_str());
    }
    if let Some(var_127) = &input.redaction_output {
        object.key("RedactionOutput").string(var_127.as_str());
    }
}
