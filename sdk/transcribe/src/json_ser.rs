// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_call_analytics_category_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCallAnalyticsCategoryInput,
) {
    if let Some(var_1) = &input.category_name {
        object.key("CategoryName").string(var_1);
    }
    if let Some(var_2) = &input.rules {
        let mut array_3 = object.key("Rules").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_union_crate_model_rule(&mut object_5, item_4);
                object_5.finish();
            }
        }
        array_3.finish();
    }
}

pub fn serialize_structure_crate_input_create_language_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLanguageModelInput,
) {
    if let Some(var_6) = &input.language_code {
        object.key("LanguageCode").string(var_6.as_str());
    }
    if let Some(var_7) = &input.base_model_name {
        object.key("BaseModelName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.model_name {
        object.key("ModelName").string(var_8);
    }
    if let Some(var_9) = &input.input_data_config {
        let mut object_10 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_input_data_config(&mut object_10, var_9);
        object_10.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                let mut object_14 = array_12.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_14, item_13);
                object_14.finish();
            }
        }
        array_12.finish();
    }
}

pub fn serialize_structure_crate_input_create_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMedicalVocabularyInput,
) {
    if let Some(var_15) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_15);
    }
    if let Some(var_16) = &input.language_code {
        object.key("LanguageCode").string(var_16.as_str());
    }
    if let Some(var_17) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_17);
    }
    if let Some(var_18) = &input.tags {
        let mut array_19 = object.key("Tags").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_21, item_20);
                object_21.finish();
            }
        }
        array_19.finish();
    }
}

pub fn serialize_structure_crate_input_create_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVocabularyInput,
) {
    if let Some(var_22) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_22);
    }
    if let Some(var_23) = &input.language_code {
        object.key("LanguageCode").string(var_23.as_str());
    }
    if let Some(var_24) = &input.phrases {
        let mut array_25 = object.key("Phrases").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26);
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_27);
    }
    if let Some(var_28) = &input.tags {
        let mut array_29 = object.key("Tags").start_array();
        for item_30 in var_28 {
            {
                let mut object_31 = array_29.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_31, item_30);
                object_31.finish();
            }
        }
        array_29.finish();
    }
}

pub fn serialize_structure_crate_input_create_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVocabularyFilterInput,
) {
    if let Some(var_32) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_32);
    }
    if let Some(var_33) = &input.language_code {
        object.key("LanguageCode").string(var_33.as_str());
    }
    if let Some(var_34) = &input.words {
        let mut array_35 = object.key("Words").start_array();
        for item_36 in var_34 {
            {
                array_35.value().string(item_36);
            }
        }
        array_35.finish();
    }
    if let Some(var_37) = &input.vocabulary_filter_file_uri {
        object.key("VocabularyFilterFileUri").string(var_37);
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
}

pub fn serialize_structure_crate_input_delete_call_analytics_category_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCallAnalyticsCategoryInput,
) {
    if let Some(var_42) = &input.category_name {
        object.key("CategoryName").string(var_42);
    }
}

pub fn serialize_structure_crate_input_delete_call_analytics_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteCallAnalyticsJobInput,
) {
    if let Some(var_43) = &input.call_analytics_job_name {
        object.key("CallAnalyticsJobName").string(var_43);
    }
}

pub fn serialize_structure_crate_input_delete_language_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLanguageModelInput,
) {
    if let Some(var_44) = &input.model_name {
        object.key("ModelName").string(var_44);
    }
}

pub fn serialize_structure_crate_input_delete_medical_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMedicalTranscriptionJobInput,
) {
    if let Some(var_45) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_45);
    }
}

pub fn serialize_structure_crate_input_delete_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMedicalVocabularyInput,
) {
    if let Some(var_46) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_46);
    }
}

pub fn serialize_structure_crate_input_delete_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTranscriptionJobInput,
) {
    if let Some(var_47) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_47);
    }
}

pub fn serialize_structure_crate_input_delete_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVocabularyInput,
) {
    if let Some(var_48) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_48);
    }
}

pub fn serialize_structure_crate_input_delete_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVocabularyFilterInput,
) {
    if let Some(var_49) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_49);
    }
}

pub fn serialize_structure_crate_input_describe_language_model_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLanguageModelInput,
) {
    if let Some(var_50) = &input.model_name {
        object.key("ModelName").string(var_50);
    }
}

pub fn serialize_structure_crate_input_get_call_analytics_category_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCallAnalyticsCategoryInput,
) {
    if let Some(var_51) = &input.category_name {
        object.key("CategoryName").string(var_51);
    }
}

pub fn serialize_structure_crate_input_get_call_analytics_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCallAnalyticsJobInput,
) {
    if let Some(var_52) = &input.call_analytics_job_name {
        object.key("CallAnalyticsJobName").string(var_52);
    }
}

pub fn serialize_structure_crate_input_get_medical_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMedicalTranscriptionJobInput,
) {
    if let Some(var_53) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_53);
    }
}

pub fn serialize_structure_crate_input_get_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMedicalVocabularyInput,
) {
    if let Some(var_54) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_54);
    }
}

pub fn serialize_structure_crate_input_get_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTranscriptionJobInput,
) {
    if let Some(var_55) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_55);
    }
}

pub fn serialize_structure_crate_input_get_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetVocabularyInput,
) {
    if let Some(var_56) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_56);
    }
}

pub fn serialize_structure_crate_input_get_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetVocabularyFilterInput,
) {
    if let Some(var_57) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_57);
    }
}

pub fn serialize_structure_crate_input_list_call_analytics_categories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCallAnalyticsCategoriesInput,
) {
    if let Some(var_58) = &input.next_token {
        object.key("NextToken").string(var_58);
    }
    if let Some(var_59) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_59).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_call_analytics_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCallAnalyticsJobsInput,
) {
    if let Some(var_60) = &input.status {
        object.key("Status").string(var_60.as_str());
    }
    if let Some(var_61) = &input.job_name_contains {
        object.key("JobNameContains").string(var_61);
    }
    if let Some(var_62) = &input.next_token {
        object.key("NextToken").string(var_62);
    }
    if let Some(var_63) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_63).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_language_models_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLanguageModelsInput,
) {
    if let Some(var_64) = &input.status_equals {
        object.key("StatusEquals").string(var_64.as_str());
    }
    if let Some(var_65) = &input.name_contains {
        object.key("NameContains").string(var_65);
    }
    if let Some(var_66) = &input.next_token {
        object.key("NextToken").string(var_66);
    }
    if let Some(var_67) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_67).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_medical_transcription_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMedicalTranscriptionJobsInput,
) {
    if let Some(var_68) = &input.status {
        object.key("Status").string(var_68.as_str());
    }
    if let Some(var_69) = &input.job_name_contains {
        object.key("JobNameContains").string(var_69);
    }
    if let Some(var_70) = &input.next_token {
        object.key("NextToken").string(var_70);
    }
    if let Some(var_71) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_71).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_medical_vocabularies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMedicalVocabulariesInput,
) {
    if let Some(var_72) = &input.next_token {
        object.key("NextToken").string(var_72);
    }
    if let Some(var_73) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_73).into()),
        );
    }
    if let Some(var_74) = &input.state_equals {
        object.key("StateEquals").string(var_74.as_str());
    }
    if let Some(var_75) = &input.name_contains {
        object.key("NameContains").string(var_75);
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_76) = &input.resource_arn {
        object.key("ResourceArn").string(var_76);
    }
}

pub fn serialize_structure_crate_input_list_transcription_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTranscriptionJobsInput,
) {
    if let Some(var_77) = &input.status {
        object.key("Status").string(var_77.as_str());
    }
    if let Some(var_78) = &input.job_name_contains {
        object.key("JobNameContains").string(var_78);
    }
    if let Some(var_79) = &input.next_token {
        object.key("NextToken").string(var_79);
    }
    if let Some(var_80) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_80).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_vocabularies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVocabulariesInput,
) {
    if let Some(var_81) = &input.next_token {
        object.key("NextToken").string(var_81);
    }
    if let Some(var_82) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_82).into()),
        );
    }
    if let Some(var_83) = &input.state_equals {
        object.key("StateEquals").string(var_83.as_str());
    }
    if let Some(var_84) = &input.name_contains {
        object.key("NameContains").string(var_84);
    }
}

pub fn serialize_structure_crate_input_list_vocabulary_filters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVocabularyFiltersInput,
) {
    if let Some(var_85) = &input.next_token {
        object.key("NextToken").string(var_85);
    }
    if let Some(var_86) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_86).into()),
        );
    }
    if let Some(var_87) = &input.name_contains {
        object.key("NameContains").string(var_87);
    }
}

pub fn serialize_structure_crate_input_start_call_analytics_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCallAnalyticsJobInput,
) {
    if let Some(var_88) = &input.call_analytics_job_name {
        object.key("CallAnalyticsJobName").string(var_88);
    }
    if let Some(var_89) = &input.media {
        let mut object_90 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_crate_model_media(&mut object_90, var_89);
        object_90.finish();
    }
    if let Some(var_91) = &input.output_location {
        object.key("OutputLocation").string(var_91);
    }
    if let Some(var_92) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_92);
    }
    if let Some(var_93) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_93);
    }
    if let Some(var_94) = &input.settings {
        let mut object_95 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_call_analytics_job_settings(
            &mut object_95,
            var_94,
        );
        object_95.finish();
    }
    if let Some(var_96) = &input.channel_definitions {
        let mut array_97 = object.key("ChannelDefinitions").start_array();
        for item_98 in var_96 {
            {
                let mut object_99 = array_97.value().start_object();
                crate::json_ser::serialize_structure_crate_model_channel_definition(
                    &mut object_99,
                    item_98,
                );
                object_99.finish();
            }
        }
        array_97.finish();
    }
}

pub fn serialize_structure_crate_input_start_medical_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMedicalTranscriptionJobInput,
) {
    if let Some(var_100) = &input.medical_transcription_job_name {
        object.key("MedicalTranscriptionJobName").string(var_100);
    }
    if let Some(var_101) = &input.language_code {
        object.key("LanguageCode").string(var_101.as_str());
    }
    if let Some(var_102) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_102).into()),
        );
    }
    if let Some(var_103) = &input.media_format {
        object.key("MediaFormat").string(var_103.as_str());
    }
    if let Some(var_104) = &input.media {
        let mut object_105 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_crate_model_media(&mut object_105, var_104);
        object_105.finish();
    }
    if let Some(var_106) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_106);
    }
    if let Some(var_107) = &input.output_key {
        object.key("OutputKey").string(var_107);
    }
    if let Some(var_108) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_108);
    }
    if let Some(var_109) = &input.kms_encryption_context {
        let mut object_110 = object.key("KMSEncryptionContext").start_object();
        for (key_111, value_112) in var_109 {
            {
                object_110.key(key_111).string(value_112);
            }
        }
        object_110.finish();
    }
    if let Some(var_113) = &input.settings {
        let mut object_114 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_medical_transcription_setting(
            &mut object_114,
            var_113,
        );
        object_114.finish();
    }
    if let Some(var_115) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_115.as_str());
    }
    if let Some(var_116) = &input.specialty {
        object.key("Specialty").string(var_116.as_str());
    }
    if let Some(var_117) = &input.r#type {
        object.key("Type").string(var_117.as_str());
    }
    if let Some(var_118) = &input.tags {
        let mut array_119 = object.key("Tags").start_array();
        for item_120 in var_118 {
            {
                let mut object_121 = array_119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_121, item_120);
                object_121.finish();
            }
        }
        array_119.finish();
    }
}

pub fn serialize_structure_crate_input_start_transcription_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTranscriptionJobInput,
) {
    if let Some(var_122) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_122);
    }
    if let Some(var_123) = &input.language_code {
        object.key("LanguageCode").string(var_123.as_str());
    }
    if let Some(var_124) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_124).into()),
        );
    }
    if let Some(var_125) = &input.media_format {
        object.key("MediaFormat").string(var_125.as_str());
    }
    if let Some(var_126) = &input.media {
        let mut object_127 = object.key("Media").start_object();
        crate::json_ser::serialize_structure_crate_model_media(&mut object_127, var_126);
        object_127.finish();
    }
    if let Some(var_128) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_128);
    }
    if let Some(var_129) = &input.output_key {
        object.key("OutputKey").string(var_129);
    }
    if let Some(var_130) = &input.output_encryption_kms_key_id {
        object.key("OutputEncryptionKMSKeyId").string(var_130);
    }
    if let Some(var_131) = &input.kms_encryption_context {
        let mut object_132 = object.key("KMSEncryptionContext").start_object();
        for (key_133, value_134) in var_131 {
            {
                object_132.key(key_133).string(value_134);
            }
        }
        object_132.finish();
    }
    if let Some(var_135) = &input.settings {
        let mut object_136 = object.key("Settings").start_object();
        crate::json_ser::serialize_structure_crate_model_settings(&mut object_136, var_135);
        object_136.finish();
    }
    if let Some(var_137) = &input.model_settings {
        let mut object_138 = object.key("ModelSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_model_settings(&mut object_138, var_137);
        object_138.finish();
    }
    if let Some(var_139) = &input.job_execution_settings {
        let mut object_140 = object.key("JobExecutionSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_job_execution_settings(
            &mut object_140,
            var_139,
        );
        object_140.finish();
    }
    if let Some(var_141) = &input.content_redaction {
        let mut object_142 = object.key("ContentRedaction").start_object();
        crate::json_ser::serialize_structure_crate_model_content_redaction(
            &mut object_142,
            var_141,
        );
        object_142.finish();
    }
    if let Some(var_143) = &input.identify_language {
        object.key("IdentifyLanguage").boolean(*var_143);
    }
    if let Some(var_144) = &input.language_options {
        let mut array_145 = object.key("LanguageOptions").start_array();
        for item_146 in var_144 {
            {
                array_145.value().string(item_146.as_str());
            }
        }
        array_145.finish();
    }
    if let Some(var_147) = &input.subtitles {
        let mut object_148 = object.key("Subtitles").start_object();
        crate::json_ser::serialize_structure_crate_model_subtitles(&mut object_148, var_147);
        object_148.finish();
    }
    if let Some(var_149) = &input.tags {
        let mut array_150 = object.key("Tags").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_152, item_151);
                object_152.finish();
            }
        }
        array_150.finish();
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_153) = &input.resource_arn {
        object.key("ResourceArn").string(var_153);
    }
    if let Some(var_154) = &input.tags {
        let mut array_155 = object.key("Tags").start_array();
        for item_156 in var_154 {
            {
                let mut object_157 = array_155.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_157, item_156);
                object_157.finish();
            }
        }
        array_155.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_158) = &input.resource_arn {
        object.key("ResourceArn").string(var_158);
    }
    if let Some(var_159) = &input.tag_keys {
        let mut array_160 = object.key("TagKeys").start_array();
        for item_161 in var_159 {
            {
                array_160.value().string(item_161);
            }
        }
        array_160.finish();
    }
}

pub fn serialize_structure_crate_input_update_call_analytics_category_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCallAnalyticsCategoryInput,
) {
    if let Some(var_162) = &input.category_name {
        object.key("CategoryName").string(var_162);
    }
    if let Some(var_163) = &input.rules {
        let mut array_164 = object.key("Rules").start_array();
        for item_165 in var_163 {
            {
                let mut object_166 = array_164.value().start_object();
                crate::json_ser::serialize_union_crate_model_rule(&mut object_166, item_165);
                object_166.finish();
            }
        }
        array_164.finish();
    }
}

pub fn serialize_structure_crate_input_update_medical_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMedicalVocabularyInput,
) {
    if let Some(var_167) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_167);
    }
    if let Some(var_168) = &input.language_code {
        object.key("LanguageCode").string(var_168.as_str());
    }
    if let Some(var_169) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_169);
    }
}

pub fn serialize_structure_crate_input_update_vocabulary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVocabularyInput,
) {
    if let Some(var_170) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_170);
    }
    if let Some(var_171) = &input.language_code {
        object.key("LanguageCode").string(var_171.as_str());
    }
    if let Some(var_172) = &input.phrases {
        let mut array_173 = object.key("Phrases").start_array();
        for item_174 in var_172 {
            {
                array_173.value().string(item_174);
            }
        }
        array_173.finish();
    }
    if let Some(var_175) = &input.vocabulary_file_uri {
        object.key("VocabularyFileUri").string(var_175);
    }
}

pub fn serialize_structure_crate_input_update_vocabulary_filter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVocabularyFilterInput,
) {
    if let Some(var_176) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_176);
    }
    if let Some(var_177) = &input.words {
        let mut array_178 = object.key("Words").start_array();
        for item_179 in var_177 {
            {
                array_178.value().string(item_179);
            }
        }
        array_178.finish();
    }
    if let Some(var_180) = &input.vocabulary_filter_file_uri {
        object.key("VocabularyFilterFileUri").string(var_180);
    }
}

pub fn serialize_union_crate_model_rule(
    object_5: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Rule,
) {
    match input {
        crate::model::Rule::NonTalkTimeFilter(inner) => {
            let mut object_181 = object_5.key("NonTalkTimeFilter").start_object();
            crate::json_ser::serialize_structure_crate_model_non_talk_time_filter(
                &mut object_181,
                inner,
            );
            object_181.finish();
        }
        crate::model::Rule::InterruptionFilter(inner) => {
            let mut object_182 = object_5.key("InterruptionFilter").start_object();
            crate::json_ser::serialize_structure_crate_model_interruption_filter(
                &mut object_182,
                inner,
            );
            object_182.finish();
        }
        crate::model::Rule::TranscriptFilter(inner) => {
            let mut object_183 = object_5.key("TranscriptFilter").start_object();
            crate::json_ser::serialize_structure_crate_model_transcript_filter(
                &mut object_183,
                inner,
            );
            object_183.finish();
        }
        crate::model::Rule::SentimentFilter(inner) => {
            let mut object_184 = object_5.key("SentimentFilter").start_object();
            crate::json_ser::serialize_structure_crate_model_sentiment_filter(
                &mut object_184,
                inner,
            );
            object_184.finish();
        }
    }
}

pub fn serialize_structure_crate_model_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDataConfig,
) {
    if let Some(var_185) = &input.s3_uri {
        object.key("S3Uri").string(var_185);
    }
    if let Some(var_186) = &input.tuning_data_s3_uri {
        object.key("TuningDataS3Uri").string(var_186);
    }
    if let Some(var_187) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_187);
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_188) = &input.key {
        object.key("Key").string(var_188);
    }
    if let Some(var_189) = &input.value {
        object.key("Value").string(var_189);
    }
}

pub fn serialize_structure_crate_model_media(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Media,
) {
    if let Some(var_190) = &input.media_file_uri {
        object.key("MediaFileUri").string(var_190);
    }
    if let Some(var_191) = &input.redacted_media_file_uri {
        object.key("RedactedMediaFileUri").string(var_191);
    }
}

pub fn serialize_structure_crate_model_call_analytics_job_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CallAnalyticsJobSettings,
) {
    if let Some(var_192) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_192);
    }
    if let Some(var_193) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_193);
    }
    if let Some(var_194) = &input.vocabulary_filter_method {
        object
            .key("VocabularyFilterMethod")
            .string(var_194.as_str());
    }
    if let Some(var_195) = &input.language_model_name {
        object.key("LanguageModelName").string(var_195);
    }
    if let Some(var_196) = &input.content_redaction {
        let mut object_197 = object.key("ContentRedaction").start_object();
        crate::json_ser::serialize_structure_crate_model_content_redaction(
            &mut object_197,
            var_196,
        );
        object_197.finish();
    }
    if let Some(var_198) = &input.language_options {
        let mut array_199 = object.key("LanguageOptions").start_array();
        for item_200 in var_198 {
            {
                array_199.value().string(item_200.as_str());
            }
        }
        array_199.finish();
    }
}

pub fn serialize_structure_crate_model_channel_definition(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelDefinition,
) {
    if input.channel_id != 0 {
        object.key("ChannelId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.channel_id).into()),
        );
    }
    if let Some(var_201) = &input.participant_role {
        object.key("ParticipantRole").string(var_201.as_str());
    }
}

pub fn serialize_structure_crate_model_medical_transcription_setting(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MedicalTranscriptionSetting,
) {
    if let Some(var_202) = &input.show_speaker_labels {
        object.key("ShowSpeakerLabels").boolean(*var_202);
    }
    if let Some(var_203) = &input.max_speaker_labels {
        object.key("MaxSpeakerLabels").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_203).into()),
        );
    }
    if let Some(var_204) = &input.channel_identification {
        object.key("ChannelIdentification").boolean(*var_204);
    }
    if let Some(var_205) = &input.show_alternatives {
        object.key("ShowAlternatives").boolean(*var_205);
    }
    if let Some(var_206) = &input.max_alternatives {
        object.key("MaxAlternatives").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_206).into()),
        );
    }
    if let Some(var_207) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_207);
    }
}

pub fn serialize_structure_crate_model_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Settings,
) {
    if let Some(var_208) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_208);
    }
    if let Some(var_209) = &input.show_speaker_labels {
        object.key("ShowSpeakerLabels").boolean(*var_209);
    }
    if let Some(var_210) = &input.max_speaker_labels {
        object.key("MaxSpeakerLabels").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_210).into()),
        );
    }
    if let Some(var_211) = &input.channel_identification {
        object.key("ChannelIdentification").boolean(*var_211);
    }
    if let Some(var_212) = &input.show_alternatives {
        object.key("ShowAlternatives").boolean(*var_212);
    }
    if let Some(var_213) = &input.max_alternatives {
        object.key("MaxAlternatives").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_214);
    }
    if let Some(var_215) = &input.vocabulary_filter_method {
        object
            .key("VocabularyFilterMethod")
            .string(var_215.as_str());
    }
}

pub fn serialize_structure_crate_model_model_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ModelSettings,
) {
    if let Some(var_216) = &input.language_model_name {
        object.key("LanguageModelName").string(var_216);
    }
}

pub fn serialize_structure_crate_model_job_execution_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobExecutionSettings,
) {
    if let Some(var_217) = &input.allow_deferred_execution {
        object.key("AllowDeferredExecution").boolean(*var_217);
    }
    if let Some(var_218) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_218);
    }
}

pub fn serialize_structure_crate_model_content_redaction(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContentRedaction,
) {
    if let Some(var_219) = &input.redaction_type {
        object.key("RedactionType").string(var_219.as_str());
    }
    if let Some(var_220) = &input.redaction_output {
        object.key("RedactionOutput").string(var_220.as_str());
    }
}

pub fn serialize_structure_crate_model_subtitles(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Subtitles,
) {
    if let Some(var_221) = &input.formats {
        let mut array_222 = object.key("Formats").start_array();
        for item_223 in var_221 {
            {
                array_222.value().string(item_223.as_str());
            }
        }
        array_222.finish();
    }
}

pub fn serialize_structure_crate_model_non_talk_time_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NonTalkTimeFilter,
) {
    if let Some(var_224) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_224).into()),
        );
    }
    if let Some(var_225) = &input.absolute_time_range {
        let mut object_226 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_absolute_time_range(
            &mut object_226,
            var_225,
        );
        object_226.finish();
    }
    if let Some(var_227) = &input.relative_time_range {
        let mut object_228 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_time_range(
            &mut object_228,
            var_227,
        );
        object_228.finish();
    }
    if let Some(var_229) = &input.negate {
        object.key("Negate").boolean(*var_229);
    }
}

pub fn serialize_structure_crate_model_interruption_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InterruptionFilter,
) {
    if let Some(var_230) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_230).into()),
        );
    }
    if let Some(var_231) = &input.participant_role {
        object.key("ParticipantRole").string(var_231.as_str());
    }
    if let Some(var_232) = &input.absolute_time_range {
        let mut object_233 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_absolute_time_range(
            &mut object_233,
            var_232,
        );
        object_233.finish();
    }
    if let Some(var_234) = &input.relative_time_range {
        let mut object_235 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_time_range(
            &mut object_235,
            var_234,
        );
        object_235.finish();
    }
    if let Some(var_236) = &input.negate {
        object.key("Negate").boolean(*var_236);
    }
}

pub fn serialize_structure_crate_model_transcript_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TranscriptFilter,
) {
    if let Some(var_237) = &input.transcript_filter_type {
        object.key("TranscriptFilterType").string(var_237.as_str());
    }
    if let Some(var_238) = &input.absolute_time_range {
        let mut object_239 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_absolute_time_range(
            &mut object_239,
            var_238,
        );
        object_239.finish();
    }
    if let Some(var_240) = &input.relative_time_range {
        let mut object_241 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_time_range(
            &mut object_241,
            var_240,
        );
        object_241.finish();
    }
    if let Some(var_242) = &input.participant_role {
        object.key("ParticipantRole").string(var_242.as_str());
    }
    if let Some(var_243) = &input.negate {
        object.key("Negate").boolean(*var_243);
    }
    if let Some(var_244) = &input.targets {
        let mut array_245 = object.key("Targets").start_array();
        for item_246 in var_244 {
            {
                array_245.value().string(item_246);
            }
        }
        array_245.finish();
    }
}

pub fn serialize_structure_crate_model_sentiment_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SentimentFilter,
) {
    if let Some(var_247) = &input.sentiments {
        let mut array_248 = object.key("Sentiments").start_array();
        for item_249 in var_247 {
            {
                array_248.value().string(item_249.as_str());
            }
        }
        array_248.finish();
    }
    if let Some(var_250) = &input.absolute_time_range {
        let mut object_251 = object.key("AbsoluteTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_absolute_time_range(
            &mut object_251,
            var_250,
        );
        object_251.finish();
    }
    if let Some(var_252) = &input.relative_time_range {
        let mut object_253 = object.key("RelativeTimeRange").start_object();
        crate::json_ser::serialize_structure_crate_model_relative_time_range(
            &mut object_253,
            var_252,
        );
        object_253.finish();
    }
    if let Some(var_254) = &input.participant_role {
        object.key("ParticipantRole").string(var_254.as_str());
    }
    if let Some(var_255) = &input.negate {
        object.key("Negate").boolean(*var_255);
    }
}

pub fn serialize_structure_crate_model_absolute_time_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbsoluteTimeRange,
) {
    if let Some(var_256) = &input.start_time {
        object.key("StartTime").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_256).into()),
        );
    }
    if let Some(var_257) = &input.end_time {
        object.key("EndTime").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_257).into()),
        );
    }
    if let Some(var_258) = &input.first {
        object.key("First").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_258).into()),
        );
    }
    if let Some(var_259) = &input.last {
        object.key("Last").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_259).into()),
        );
    }
}

pub fn serialize_structure_crate_model_relative_time_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelativeTimeRange,
) {
    if let Some(var_260) = &input.start_percentage {
        object.key("StartPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_260).into()),
        );
    }
    if let Some(var_261) = &input.end_percentage {
        object.key("EndPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_261).into()),
        );
    }
    if let Some(var_262) = &input.first {
        object.key("First").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_262).into()),
        );
    }
    if let Some(var_263) = &input.last {
        object.key("Last").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_263).into()),
        );
    }
}
