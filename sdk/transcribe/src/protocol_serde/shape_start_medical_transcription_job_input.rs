// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_medical_transcription_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_medical_transcription_job::StartMedicalTranscriptionJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.medical_transcription_job_name {
        object
            .key("MedicalTranscriptionJobName")
            .string(var_1.as_str());
    }
    if let Some(var_2) = &input.language_code {
        object.key("LanguageCode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.media_format {
        object.key("MediaFormat").string(var_4.as_str());
    }
    if let Some(var_5) = &input.media {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Media").start_object();
        crate::protocol_serde::shape_media::ser_media(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.output_key {
        object.key("OutputKey").string(var_8.as_str());
    }
    if let Some(var_9) = &input.output_encryption_kms_key_id {
        object
            .key("OutputEncryptionKMSKeyId")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.kms_encryption_context {
        #[allow(unused_mut)]
        let mut object_11 = object.key("KMSEncryptionContext").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.settings {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Settings").start_object();
        crate::protocol_serde::shape_medical_transcription_setting::ser_medical_transcription_setting(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.content_identification_type {
        object
            .key("ContentIdentificationType")
            .string(var_16.as_str());
    }
    if let Some(var_17) = &input.specialty {
        object.key("Specialty").string(var_17.as_str());
    }
    if let Some(var_18) = &input.r#type {
        object.key("Type").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        let mut array_20 = object.key("Tags").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    Ok(())
}
