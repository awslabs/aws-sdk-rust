// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_medical_scribe_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MedicalScribeSettings,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.show_speaker_labels {
        object.key("ShowSpeakerLabels").boolean(*var_1);
    }
    if let Some(var_2) = &input.max_speaker_labels {
        object.key("MaxSpeakerLabels").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.channel_identification {
        object.key("ChannelIdentification").boolean(*var_3);
    }
    if let Some(var_4) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.vocabulary_filter_method {
        object.key("VocabularyFilterMethod").string(var_6.as_str());
    }
    if let Some(var_7) = &input.clinical_note_generation_settings {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ClinicalNoteGenerationSettings").start_object();
        crate::protocol_serde::shape_clinical_note_generation_settings::ser_clinical_note_generation_settings(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}

pub(crate) fn de_medical_scribe_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::MedicalScribeSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MedicalScribeSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ShowSpeakerLabels" => {
                            builder = builder.set_show_speaker_labels(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "MaxSpeakerLabels" => {
                            builder = builder.set_max_speaker_labels(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "ChannelIdentification" => {
                            builder = builder.set_channel_identification(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "VocabularyName" => {
                            builder = builder.set_vocabulary_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VocabularyFilterName" => {
                            builder = builder.set_vocabulary_filter_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VocabularyFilterMethod" => {
                            builder = builder.set_vocabulary_filter_method(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VocabularyFilterMethod::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ClinicalNoteGenerationSettings" => {
                            builder = builder.set_clinical_note_generation_settings(
                                crate::protocol_serde::shape_clinical_note_generation_settings::de_clinical_note_generation_settings(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
