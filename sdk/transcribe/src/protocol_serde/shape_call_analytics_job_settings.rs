// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_call_analytics_job_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CallAnalyticsJobSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.vocabulary_filter_method {
        object.key("VocabularyFilterMethod").string(var_3.as_str());
    }
    if let Some(var_4) = &input.language_model_name {
        object.key("LanguageModelName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.content_redaction {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ContentRedaction").start_object();
        crate::protocol_serde::shape_content_redaction::ser_content_redaction(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.language_options {
        let mut array_8 = object.key("LanguageOptions").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.language_id_settings {
        #[allow(unused_mut)]
        let mut object_11 = object.key("LanguageIdSettings").start_object();
        for (key_12, value_13) in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_14 = object_11.key(key_12.as_str()).start_object();
                crate::protocol_serde::shape_language_id_settings::ser_language_id_settings(&mut object_14, value_13)?;
                object_14.finish();
            }
        }
        object_11.finish();
    }
    Ok(())
}

pub(crate) fn de_call_analytics_job_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CallAnalyticsJobSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CallAnalyticsJobSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "VocabularyName" => {
                            builder = builder.set_vocabulary_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VocabularyFilterName" => {
                            builder = builder.set_vocabulary_filter_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VocabularyFilterMethod" => {
                            builder = builder.set_vocabulary_filter_method(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VocabularyFilterMethod::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "LanguageModelName" => {
                            builder = builder.set_language_model_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ContentRedaction" => {
                            builder = builder.set_content_redaction(crate::protocol_serde::shape_content_redaction::de_content_redaction(tokens)?);
                        }
                        "LanguageOptions" => {
                            builder = builder.set_language_options(crate::protocol_serde::shape_language_options::de_language_options(tokens)?);
                        }
                        "LanguageIdSettings" => {
                            builder = builder.set_language_id_settings(
                                crate::protocol_serde::shape_language_id_settings_map::de_language_id_settings_map(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
