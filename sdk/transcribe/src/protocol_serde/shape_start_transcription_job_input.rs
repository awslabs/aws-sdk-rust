// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_transcription_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_transcription_job::StartTranscriptionJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.transcription_job_name {
        object.key("TranscriptionJobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.language_code {
        object.key("LanguageCode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.media_sample_rate_hertz {
        object.key("MediaSampleRateHertz").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.media_format {
        object.key("MediaFormat").string(var_4.as_str());
    }
    if let Some(var_5) = &input.media {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Media").start_object();
        crate::protocol_serde::shape_media::ser_media(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.output_bucket_name {
        object.key("OutputBucketName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.output_key {
        object.key("OutputKey").string(var_8.as_str());
    }
    if let Some(var_9) = &input.output_encryption_kms_key_id {
        object
            .key("OutputEncryptionKMSKeyId")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.kms_encryption_context {
        #[allow(unused_mut)]
        let mut object_11 = object.key("KMSEncryptionContext").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.settings {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Settings").start_object();
        crate::protocol_serde::shape_settings::ser_settings(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.model_settings {
        #[allow(unused_mut)]
        let mut object_17 = object.key("ModelSettings").start_object();
        crate::protocol_serde::shape_model_settings::ser_model_settings(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.job_execution_settings {
        #[allow(unused_mut)]
        let mut object_19 = object.key("JobExecutionSettings").start_object();
        crate::protocol_serde::shape_job_execution_settings::ser_job_execution_settings(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    if let Some(var_20) = &input.content_redaction {
        #[allow(unused_mut)]
        let mut object_21 = object.key("ContentRedaction").start_object();
        crate::protocol_serde::shape_content_redaction::ser_content_redaction(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.identify_language {
        object.key("IdentifyLanguage").boolean(*var_22);
    }
    if let Some(var_23) = &input.identify_multiple_languages {
        object.key("IdentifyMultipleLanguages").boolean(*var_23);
    }
    if let Some(var_24) = &input.language_options {
        let mut array_25 = object.key("LanguageOptions").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.subtitles {
        #[allow(unused_mut)]
        let mut object_28 = object.key("Subtitles").start_object();
        crate::protocol_serde::shape_subtitles::ser_subtitles(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.tags {
        let mut array_30 = object.key("Tags").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.language_id_settings {
        #[allow(unused_mut)]
        let mut object_34 = object.key("LanguageIdSettings").start_object();
        for (key_35, value_36) in var_33 {
            {
                #[allow(unused_mut)]
                let mut object_37 = object_34.key(key_35.as_str()).start_object();
                crate::protocol_serde::shape_language_id_settings::ser_language_id_settings(
                    &mut object_37,
                    value_36,
                )?;
                object_37.finish();
            }
        }
        object_34.finish();
    }
    Ok(())
}
