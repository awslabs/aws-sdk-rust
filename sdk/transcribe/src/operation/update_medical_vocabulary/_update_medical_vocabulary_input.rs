// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMedicalVocabularyInput {
    /// <p>The name of the custom medical vocabulary you want to update. Custom medical vocabulary names are case sensitive.</p>
    #[doc(hidden)]
    pub vocabulary_name: std::option::Option<std::string::String>,
    /// <p>The language code that represents the language of the entries in the custom vocabulary you want to update. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::types::LanguageCode>,
    /// <p>The Amazon S3 location of the text file that contains your custom medical vocabulary. The URI must be located in the same Amazon Web Services Region as the resource you're calling.</p>
    /// <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code> </p>
    #[doc(hidden)]
    pub vocabulary_file_uri: std::option::Option<std::string::String>,
}
impl UpdateMedicalVocabularyInput {
    /// <p>The name of the custom medical vocabulary you want to update. Custom medical vocabulary names are case sensitive.</p>
    pub fn vocabulary_name(&self) -> std::option::Option<&str> {
        self.vocabulary_name.as_deref()
    }
    /// <p>The language code that represents the language of the entries in the custom vocabulary you want to update. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::types::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The Amazon S3 location of the text file that contains your custom medical vocabulary. The URI must be located in the same Amazon Web Services Region as the resource you're calling.</p>
    /// <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code> </p>
    pub fn vocabulary_file_uri(&self) -> std::option::Option<&str> {
        self.vocabulary_file_uri.as_deref()
    }
}
impl UpdateMedicalVocabularyInput {
    /// Creates a new builder-style object to manufacture [`UpdateMedicalVocabularyInput`](crate::operation::update_medical_vocabulary::UpdateMedicalVocabularyInput).
    pub fn builder(
    ) -> crate::operation::update_medical_vocabulary::builders::UpdateMedicalVocabularyInputBuilder
    {
        crate::operation::update_medical_vocabulary::builders::UpdateMedicalVocabularyInputBuilder::default()
    }
}

/// A builder for [`UpdateMedicalVocabularyInput`](crate::operation::update_medical_vocabulary::UpdateMedicalVocabularyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateMedicalVocabularyInputBuilder {
    pub(crate) vocabulary_name: std::option::Option<std::string::String>,
    pub(crate) language_code: std::option::Option<crate::types::LanguageCode>,
    pub(crate) vocabulary_file_uri: std::option::Option<std::string::String>,
}
impl UpdateMedicalVocabularyInputBuilder {
    /// <p>The name of the custom medical vocabulary you want to update. Custom medical vocabulary names are case sensitive.</p>
    pub fn vocabulary_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vocabulary_name = Some(input.into());
        self
    }
    /// <p>The name of the custom medical vocabulary you want to update. Custom medical vocabulary names are case sensitive.</p>
    pub fn set_vocabulary_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vocabulary_name = input;
        self
    }
    /// <p>The language code that represents the language of the entries in the custom vocabulary you want to update. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn language_code(mut self, input: crate::types::LanguageCode) -> Self {
        self.language_code = Some(input);
        self
    }
    /// <p>The language code that represents the language of the entries in the custom vocabulary you want to update. US English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn set_language_code(
        mut self,
        input: std::option::Option<crate::types::LanguageCode>,
    ) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The Amazon S3 location of the text file that contains your custom medical vocabulary. The URI must be located in the same Amazon Web Services Region as the resource you're calling.</p>
    /// <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code> </p>
    pub fn vocabulary_file_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.vocabulary_file_uri = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location of the text file that contains your custom medical vocabulary. The URI must be located in the same Amazon Web Services Region as the resource you're calling.</p>
    /// <p>Here's an example URI path: <code>s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt</code> </p>
    pub fn set_vocabulary_file_uri(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vocabulary_file_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateMedicalVocabularyInput`](crate::operation::update_medical_vocabulary::UpdateMedicalVocabularyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_medical_vocabulary::UpdateMedicalVocabularyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_medical_vocabulary::UpdateMedicalVocabularyInput {
                vocabulary_name: self.vocabulary_name,
                language_code: self.language_code,
                vocabulary_file_uri: self.vocabulary_file_uri,
            },
        )
    }
}
