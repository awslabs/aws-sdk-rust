// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_medical_transcription_jobs::_list_medical_transcription_jobs_output::ListMedicalTranscriptionJobsOutputBuilder;

pub use crate::operation::list_medical_transcription_jobs::_list_medical_transcription_jobs_input::ListMedicalTranscriptionJobsInputBuilder;

impl ListMedicalTranscriptionJobsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_medical_transcription_jobs();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListMedicalTranscriptionJobs`.
///
/// <p>Provides a list of medical transcription jobs that match the specified criteria. If no criteria are specified, all medical transcription jobs are returned.</p>
/// <p>To get detailed information about a specific medical transcription job, use the operation.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListMedicalTranscriptionJobsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_medical_transcription_jobs::builders::ListMedicalTranscriptionJobsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsOutput,
        crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsError,
    > for ListMedicalTranscriptionJobsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsOutput,
            crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListMedicalTranscriptionJobsFluentBuilder {
    /// Creates a new `ListMedicalTranscriptionJobs`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListMedicalTranscriptionJobs as a reference.
    pub fn as_input(&self) -> &crate::operation::list_medical_transcription_jobs::builders::ListMedicalTranscriptionJobsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobs::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobs::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsOutput,
        crate::operation::list_medical_transcription_jobs::ListMedicalTranscriptionJobsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_medical_transcription_jobs::paginator::ListMedicalTranscriptionJobsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_medical_transcription_jobs::paginator::ListMedicalTranscriptionJobsPaginator {
        crate::operation::list_medical_transcription_jobs::paginator::ListMedicalTranscriptionJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>Returns only medical transcription jobs with the specified status. Jobs are ordered by creation date, with the newest job first. If you don't include <code>Status</code>, all medical transcription jobs are returned.</p>
    pub fn status(mut self, input: crate::types::TranscriptionJobStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>Returns only medical transcription jobs with the specified status. Jobs are ordered by creation date, with the newest job first. If you don't include <code>Status</code>, all medical transcription jobs are returned.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TranscriptionJobStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>Returns only medical transcription jobs with the specified status. Jobs are ordered by creation date, with the newest job first. If you don't include <code>Status</code>, all medical transcription jobs are returned.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TranscriptionJobStatus> {
        self.inner.get_status()
    }
    /// <p>Returns only the medical transcription jobs that contain the specified string. The search is not case sensitive.</p>
    pub fn job_name_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_name_contains(input.into());
        self
    }
    /// <p>Returns only the medical transcription jobs that contain the specified string. The search is not case sensitive.</p>
    pub fn set_job_name_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_name_contains(input);
        self
    }
    /// <p>Returns only the medical transcription jobs that contain the specified string. The search is not case sensitive.</p>
    pub fn get_job_name_contains(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_name_contains()
    }
    /// <p>If your <code>ListMedicalTranscriptionJobs</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If your <code>ListMedicalTranscriptionJobs</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>If your <code>ListMedicalTranscriptionJobs</code> request returns more results than can be displayed, <code>NextToken</code> is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of medical transcription jobs to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of medical transcription jobs to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of medical transcription jobs to return in each page of results. If there are fewer results than the value that you specify, only the actual results are returned. If you don't specify a value, a default of 5 is used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
