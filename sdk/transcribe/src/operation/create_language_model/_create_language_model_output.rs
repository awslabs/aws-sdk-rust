// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLanguageModelOutput {
    /// <p>The language code you selected for your custom language model.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::types::ClmLanguageCode>,
    /// <p>The Amazon Transcribe standard language model, or base model, you specified when creating your custom language model.</p>
    #[doc(hidden)]
    pub base_model_name: std::option::Option<crate::types::BaseModelName>,
    /// <p>The name of your custom language model.</p>
    #[doc(hidden)]
    pub model_name: std::option::Option<std::string::String>,
    /// <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3 locations you provided for your training (<code>S3Uri</code>) and tuning (<code>TuningDataS3Uri</code>) data.</p>
    #[doc(hidden)]
    pub input_data_config: std::option::Option<crate::types::InputDataConfig>,
    /// <p>The status of your custom language model. When the status displays as <code>COMPLETED</code>, your model is ready to use.</p>
    #[doc(hidden)]
    pub model_status: std::option::Option<crate::types::ModelStatus>,
    _request_id: Option<String>,
}
impl CreateLanguageModelOutput {
    /// <p>The language code you selected for your custom language model.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::types::ClmLanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The Amazon Transcribe standard language model, or base model, you specified when creating your custom language model.</p>
    pub fn base_model_name(&self) -> std::option::Option<&crate::types::BaseModelName> {
        self.base_model_name.as_ref()
    }
    /// <p>The name of your custom language model.</p>
    pub fn model_name(&self) -> std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3 locations you provided for your training (<code>S3Uri</code>) and tuning (<code>TuningDataS3Uri</code>) data.</p>
    pub fn input_data_config(&self) -> std::option::Option<&crate::types::InputDataConfig> {
        self.input_data_config.as_ref()
    }
    /// <p>The status of your custom language model. When the status displays as <code>COMPLETED</code>, your model is ready to use.</p>
    pub fn model_status(&self) -> std::option::Option<&crate::types::ModelStatus> {
        self.model_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLanguageModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateLanguageModelOutput {
    /// Creates a new builder-style object to manufacture [`CreateLanguageModelOutput`](crate::operation::create_language_model::CreateLanguageModelOutput).
    pub fn builder(
    ) -> crate::operation::create_language_model::builders::CreateLanguageModelOutputBuilder {
        crate::operation::create_language_model::builders::CreateLanguageModelOutputBuilder::default(
        )
    }
}

/// A builder for [`CreateLanguageModelOutput`](crate::operation::create_language_model::CreateLanguageModelOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateLanguageModelOutputBuilder {
    pub(crate) language_code: std::option::Option<crate::types::ClmLanguageCode>,
    pub(crate) base_model_name: std::option::Option<crate::types::BaseModelName>,
    pub(crate) model_name: std::option::Option<std::string::String>,
    pub(crate) input_data_config: std::option::Option<crate::types::InputDataConfig>,
    pub(crate) model_status: std::option::Option<crate::types::ModelStatus>,
    _request_id: Option<String>,
}
impl CreateLanguageModelOutputBuilder {
    /// <p>The language code you selected for your custom language model.</p>
    pub fn language_code(mut self, input: crate::types::ClmLanguageCode) -> Self {
        self.language_code = Some(input);
        self
    }
    /// <p>The language code you selected for your custom language model.</p>
    pub fn set_language_code(
        mut self,
        input: std::option::Option<crate::types::ClmLanguageCode>,
    ) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The Amazon Transcribe standard language model, or base model, you specified when creating your custom language model.</p>
    pub fn base_model_name(mut self, input: crate::types::BaseModelName) -> Self {
        self.base_model_name = Some(input);
        self
    }
    /// <p>The Amazon Transcribe standard language model, or base model, you specified when creating your custom language model.</p>
    pub fn set_base_model_name(
        mut self,
        input: std::option::Option<crate::types::BaseModelName>,
    ) -> Self {
        self.base_model_name = input;
        self
    }
    /// <p>The name of your custom language model.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_name = Some(input.into());
        self
    }
    /// <p>The name of your custom language model.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3 locations you provided for your training (<code>S3Uri</code>) and tuning (<code>TuningDataS3Uri</code>) data.</p>
    pub fn input_data_config(mut self, input: crate::types::InputDataConfig) -> Self {
        self.input_data_config = Some(input);
        self
    }
    /// <p>Lists your data access role ARN (Amazon Resource Name) and the Amazon S3 locations you provided for your training (<code>S3Uri</code>) and tuning (<code>TuningDataS3Uri</code>) data.</p>
    pub fn set_input_data_config(
        mut self,
        input: std::option::Option<crate::types::InputDataConfig>,
    ) -> Self {
        self.input_data_config = input;
        self
    }
    /// <p>The status of your custom language model. When the status displays as <code>COMPLETED</code>, your model is ready to use.</p>
    pub fn model_status(mut self, input: crate::types::ModelStatus) -> Self {
        self.model_status = Some(input);
        self
    }
    /// <p>The status of your custom language model. When the status displays as <code>COMPLETED</code>, your model is ready to use.</p>
    pub fn set_model_status(
        mut self,
        input: std::option::Option<crate::types::ModelStatus>,
    ) -> Self {
        self.model_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateLanguageModelOutput`](crate::operation::create_language_model::CreateLanguageModelOutput).
    pub fn build(self) -> crate::operation::create_language_model::CreateLanguageModelOutput {
        crate::operation::create_language_model::CreateLanguageModelOutput {
            language_code: self.language_code,
            base_model_name: self.base_model_name,
            model_name: self.model_name,
            input_data_config: self.input_data_config,
            model_status: self.model_status,
            _request_id: self._request_id,
        }
    }
}
