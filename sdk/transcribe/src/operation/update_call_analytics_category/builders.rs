// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_call_analytics_category::_update_call_analytics_category_output::UpdateCallAnalyticsCategoryOutputBuilder;

pub use crate::operation::update_call_analytics_category::_update_call_analytics_category_input::UpdateCallAnalyticsCategoryInputBuilder;

/// Fluent builder constructing a request to `UpdateCallAnalyticsCategory`.
///
/// <p>Updates the specified Call Analytics category with new rules. Note that the <code>UpdateCallAnalyticsCategory</code> operation overwrites all existing rules contained in the specified category. You cannot append additional rules onto an existing category.</p>
/// <p>To create a new category, see .</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCallAnalyticsCategoryFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_call_analytics_category::builders::UpdateCallAnalyticsCategoryInputBuilder
            }
impl UpdateCallAnalyticsCategoryFluentBuilder {
    /// Creates a new `UpdateCallAnalyticsCategory`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_call_analytics_category::UpdateCallAnalyticsCategory,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_call_analytics_category::UpdateCallAnalyticsCategoryError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_call_analytics_category::UpdateCallAnalyticsCategoryOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_call_analytics_category::UpdateCallAnalyticsCategoryError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Call Analytics category you want to update. Category names are case sensitive.</p>
    pub fn category_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.category_name(input.into());
        self
    }
    /// <p>The name of the Call Analytics category you want to update. Category names are case sensitive.</p>
    pub fn set_category_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_category_name(input);
        self
    }
    /// Appends an item to `Rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The rules used for the updated Call Analytics category. The rules you provide in this field replace the ones that are currently being used in the specified category.</p>
    pub fn rules(mut self, input: crate::types::Rule) -> Self {
        self.inner = self.inner.rules(input);
        self
    }
    /// <p>The rules used for the updated Call Analytics category. The rules you provide in this field replace the ones that are currently being used in the specified category.</p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Rule>>,
    ) -> Self {
        self.inner = self.inner.set_rules(input);
        self
    }
    /// <p>Choose whether you want to update a streaming or a batch Call Analytics category. The input type you specify must match the input type specified when the category was created. For example, if you created a category with the <code>POST_CALL</code> input type, you must use <code>POST_CALL</code> as the input type when updating this category.</p>
    pub fn input_type(mut self, input: crate::types::InputType) -> Self {
        self.inner = self.inner.input_type(input);
        self
    }
    /// <p>Choose whether you want to update a streaming or a batch Call Analytics category. The input type you specify must match the input type specified when the category was created. For example, if you created a category with the <code>POST_CALL</code> input type, you must use <code>POST_CALL</code> as the input type when updating this category.</p>
    pub fn set_input_type(mut self, input: std::option::Option<crate::types::InputType>) -> Self {
        self.inner = self.inner.set_input_type(input);
        self
    }
}
