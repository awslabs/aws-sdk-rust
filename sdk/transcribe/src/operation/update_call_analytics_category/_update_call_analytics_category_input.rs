// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCallAnalyticsCategoryInput {
    /// <p>The name of the Call Analytics category you want to update. Category names are case sensitive.</p>
    #[doc(hidden)]
    pub category_name: std::option::Option<std::string::String>,
    /// <p>The rules used for the updated Call Analytics category. The rules you provide in this field replace the ones that are currently being used in the specified category.</p>
    #[doc(hidden)]
    pub rules: std::option::Option<std::vec::Vec<crate::types::Rule>>,
    /// <p>Choose whether you want to update a streaming or a batch Call Analytics category. The input type you specify must match the input type specified when the category was created. For example, if you created a category with the <code>POST_CALL</code> input type, you must use <code>POST_CALL</code> as the input type when updating this category.</p>
    #[doc(hidden)]
    pub input_type: std::option::Option<crate::types::InputType>,
}
impl UpdateCallAnalyticsCategoryInput {
    /// <p>The name of the Call Analytics category you want to update. Category names are case sensitive.</p>
    pub fn category_name(&self) -> std::option::Option<&str> {
        self.category_name.as_deref()
    }
    /// <p>The rules used for the updated Call Analytics category. The rules you provide in this field replace the ones that are currently being used in the specified category.</p>
    pub fn rules(&self) -> std::option::Option<&[crate::types::Rule]> {
        self.rules.as_deref()
    }
    /// <p>Choose whether you want to update a streaming or a batch Call Analytics category. The input type you specify must match the input type specified when the category was created. For example, if you created a category with the <code>POST_CALL</code> input type, you must use <code>POST_CALL</code> as the input type when updating this category.</p>
    pub fn input_type(&self) -> std::option::Option<&crate::types::InputType> {
        self.input_type.as_ref()
    }
}
impl UpdateCallAnalyticsCategoryInput {
    /// Creates a new builder-style object to manufacture [`UpdateCallAnalyticsCategoryInput`](crate::operation::update_call_analytics_category::UpdateCallAnalyticsCategoryInput).
    pub fn builder() -> crate::operation::update_call_analytics_category::builders::UpdateCallAnalyticsCategoryInputBuilder{
        crate::operation::update_call_analytics_category::builders::UpdateCallAnalyticsCategoryInputBuilder::default()
    }
}

/// A builder for [`UpdateCallAnalyticsCategoryInput`](crate::operation::update_call_analytics_category::UpdateCallAnalyticsCategoryInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateCallAnalyticsCategoryInputBuilder {
    pub(crate) category_name: std::option::Option<std::string::String>,
    pub(crate) rules: std::option::Option<std::vec::Vec<crate::types::Rule>>,
    pub(crate) input_type: std::option::Option<crate::types::InputType>,
}
impl UpdateCallAnalyticsCategoryInputBuilder {
    /// <p>The name of the Call Analytics category you want to update. Category names are case sensitive.</p>
    pub fn category_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.category_name = Some(input.into());
        self
    }
    /// <p>The name of the Call Analytics category you want to update. Category names are case sensitive.</p>
    pub fn set_category_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.category_name = input;
        self
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The rules used for the updated Call Analytics category. The rules you provide in this field replace the ones that are currently being used in the specified category.</p>
    pub fn rules(mut self, input: crate::types::Rule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = Some(v);
        self
    }
    /// <p>The rules used for the updated Call Analytics category. The rules you provide in this field replace the ones that are currently being used in the specified category.</p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Rule>>,
    ) -> Self {
        self.rules = input;
        self
    }
    /// <p>Choose whether you want to update a streaming or a batch Call Analytics category. The input type you specify must match the input type specified when the category was created. For example, if you created a category with the <code>POST_CALL</code> input type, you must use <code>POST_CALL</code> as the input type when updating this category.</p>
    pub fn input_type(mut self, input: crate::types::InputType) -> Self {
        self.input_type = Some(input);
        self
    }
    /// <p>Choose whether you want to update a streaming or a batch Call Analytics category. The input type you specify must match the input type specified when the category was created. For example, if you created a category with the <code>POST_CALL</code> input type, you must use <code>POST_CALL</code> as the input type when updating this category.</p>
    pub fn set_input_type(mut self, input: std::option::Option<crate::types::InputType>) -> Self {
        self.input_type = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateCallAnalyticsCategoryInput`](crate::operation::update_call_analytics_category::UpdateCallAnalyticsCategoryInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_call_analytics_category::UpdateCallAnalyticsCategoryInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_call_analytics_category::UpdateCallAnalyticsCategoryInput {
                category_name: self.category_name,
                rules: self.rules,
                input_type: self.input_type,
            },
        )
    }
}
