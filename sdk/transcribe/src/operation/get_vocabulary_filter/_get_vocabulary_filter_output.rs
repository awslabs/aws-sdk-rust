// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVocabularyFilterOutput {
    /// <p>The name of the custom vocabulary filter you requested information about.</p>
    #[doc(hidden)]
    pub vocabulary_filter_name: std::option::Option<std::string::String>,
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::types::LanguageCode>,
    /// <p>The date and time the specified custom vocabulary filter was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Amazon S3 location where the custom vocabulary filter is stored; use this URI to view or download the custom vocabulary filter.</p>
    #[doc(hidden)]
    pub download_uri: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetVocabularyFilterOutput {
    /// <p>The name of the custom vocabulary filter you requested information about.</p>
    pub fn vocabulary_filter_name(&self) -> std::option::Option<&str> {
        self.vocabulary_filter_name.as_deref()
    }
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    pub fn language_code(&self) -> std::option::Option<&crate::types::LanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The date and time the specified custom vocabulary filter was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The Amazon S3 location where the custom vocabulary filter is stored; use this URI to view or download the custom vocabulary filter.</p>
    pub fn download_uri(&self) -> std::option::Option<&str> {
        self.download_uri.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetVocabularyFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVocabularyFilterOutput {
    /// Creates a new builder-style object to manufacture [`GetVocabularyFilterOutput`](crate::operation::get_vocabulary_filter::GetVocabularyFilterOutput).
    pub fn builder(
    ) -> crate::operation::get_vocabulary_filter::builders::GetVocabularyFilterOutputBuilder {
        crate::operation::get_vocabulary_filter::builders::GetVocabularyFilterOutputBuilder::default(
        )
    }
}

/// A builder for [`GetVocabularyFilterOutput`](crate::operation::get_vocabulary_filter::GetVocabularyFilterOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetVocabularyFilterOutputBuilder {
    pub(crate) vocabulary_filter_name: std::option::Option<std::string::String>,
    pub(crate) language_code: std::option::Option<crate::types::LanguageCode>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) download_uri: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetVocabularyFilterOutputBuilder {
    /// <p>The name of the custom vocabulary filter you requested information about.</p>
    pub fn vocabulary_filter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vocabulary_filter_name = Some(input.into());
        self
    }
    /// <p>The name of the custom vocabulary filter you requested information about.</p>
    pub fn set_vocabulary_filter_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vocabulary_filter_name = input;
        self
    }
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    pub fn language_code(mut self, input: crate::types::LanguageCode) -> Self {
        self.language_code = Some(input);
        self
    }
    /// <p>The language code you selected for your custom vocabulary filter.</p>
    pub fn set_language_code(
        mut self,
        input: std::option::Option<crate::types::LanguageCode>,
    ) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The date and time the specified custom vocabulary filter was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The date and time the specified custom vocabulary filter was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The Amazon S3 location where the custom vocabulary filter is stored; use this URI to view or download the custom vocabulary filter.</p>
    pub fn download_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.download_uri = Some(input.into());
        self
    }
    /// <p>The Amazon S3 location where the custom vocabulary filter is stored; use this URI to view or download the custom vocabulary filter.</p>
    pub fn set_download_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.download_uri = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetVocabularyFilterOutput`](crate::operation::get_vocabulary_filter::GetVocabularyFilterOutput).
    pub fn build(self) -> crate::operation::get_vocabulary_filter::GetVocabularyFilterOutput {
        crate::operation::get_vocabulary_filter::GetVocabularyFilterOutput {
            vocabulary_filter_name: self.vocabulary_filter_name,
            language_code: self.language_code,
            last_modified_time: self.last_modified_time,
            download_uri: self.download_uri,
            _request_id: self._request_id,
        }
    }
}
