// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListVocabulariesOutput {
    /// <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    pub status: ::std::option::Option<crate::types::VocabularyState>,
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
    pub vocabularies: ::std::option::Option<::std::vec::Vec<crate::types::VocabularyInfo>>,
    _request_id: Option<String>,
}
impl ListVocabulariesOutput {
    /// <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::VocabularyState> {
        self.status.as_ref()
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vocabularies.is_none()`.
    pub fn vocabularies(&self) -> &[crate::types::VocabularyInfo] {
        self.vocabularies.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ListVocabulariesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListVocabulariesOutput {
    /// Creates a new builder-style object to manufacture [`ListVocabulariesOutput`](crate::operation::list_vocabularies::ListVocabulariesOutput).
    pub fn builder() -> crate::operation::list_vocabularies::builders::ListVocabulariesOutputBuilder {
        crate::operation::list_vocabularies::builders::ListVocabulariesOutputBuilder::default()
    }
}

/// A builder for [`ListVocabulariesOutput`](crate::operation::list_vocabularies::ListVocabulariesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListVocabulariesOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::VocabularyState>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) vocabularies: ::std::option::Option<::std::vec::Vec<crate::types::VocabularyInfo>>,
    _request_id: Option<String>,
}
impl ListVocabulariesOutputBuilder {
    /// <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    pub fn status(mut self, input: crate::types::VocabularyState) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VocabularyState>) -> Self {
        self.status = input;
        self
    }
    /// <p>Lists all custom vocabularies that have the status specified in your request. Vocabularies are ordered by creation date, with the newest vocabulary first.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VocabularyState> {
        &self.status
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `vocabularies`.
    ///
    /// To override the contents of this collection use [`set_vocabularies`](Self::set_vocabularies).
    ///
    /// <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
    pub fn vocabularies(mut self, input: crate::types::VocabularyInfo) -> Self {
        let mut v = self.vocabularies.unwrap_or_default();
        v.push(input);
        self.vocabularies = ::std::option::Option::Some(v);
        self
    }
    /// <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
    pub fn set_vocabularies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VocabularyInfo>>) -> Self {
        self.vocabularies = input;
        self
    }
    /// <p>Provides information about the custom vocabularies that match the criteria specified in your request.</p>
    pub fn get_vocabularies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VocabularyInfo>> {
        &self.vocabularies
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListVocabulariesOutput`](crate::operation::list_vocabularies::ListVocabulariesOutput).
    pub fn build(self) -> crate::operation::list_vocabularies::ListVocabulariesOutput {
        crate::operation::list_vocabularies::ListVocabulariesOutput {
            status: self.status,
            next_token: self.next_token,
            vocabularies: self.vocabularies,
            _request_id: self._request_id,
        }
    }
}
