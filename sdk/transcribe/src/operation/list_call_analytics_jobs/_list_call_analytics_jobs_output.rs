// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCallAnalyticsJobsOutput {
    /// <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CallAnalyticsJobStatus>,
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Provides a summary of information about each result.</p>
    #[doc(hidden)]
    pub call_analytics_job_summaries:
        std::option::Option<std::vec::Vec<crate::types::CallAnalyticsJobSummary>>,
    _request_id: Option<String>,
}
impl ListCallAnalyticsJobsOutput {
    /// <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::CallAnalyticsJobStatus> {
        self.status.as_ref()
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Provides a summary of information about each result.</p>
    pub fn call_analytics_job_summaries(
        &self,
    ) -> std::option::Option<&[crate::types::CallAnalyticsJobSummary]> {
        self.call_analytics_job_summaries.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCallAnalyticsJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListCallAnalyticsJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListCallAnalyticsJobsOutput`](crate::operation::list_call_analytics_jobs::ListCallAnalyticsJobsOutput).
    pub fn builder(
    ) -> crate::operation::list_call_analytics_jobs::builders::ListCallAnalyticsJobsOutputBuilder
    {
        crate::operation::list_call_analytics_jobs::builders::ListCallAnalyticsJobsOutputBuilder::default()
    }
}

/// A builder for [`ListCallAnalyticsJobsOutput`](crate::operation::list_call_analytics_jobs::ListCallAnalyticsJobsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListCallAnalyticsJobsOutputBuilder {
    pub(crate) status: std::option::Option<crate::types::CallAnalyticsJobStatus>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) call_analytics_job_summaries:
        std::option::Option<std::vec::Vec<crate::types::CallAnalyticsJobSummary>>,
    _request_id: Option<String>,
}
impl ListCallAnalyticsJobsOutputBuilder {
    /// <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    pub fn status(mut self, input: crate::types::CallAnalyticsJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CallAnalyticsJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If <code>NextToken</code> is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the <code>NextToken</code> parameter in your results output, then run your request again including <code>NextToken</code> with the value of the copied string. Repeat as needed to view all your results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `call_analytics_job_summaries`.
    ///
    /// To override the contents of this collection use [`set_call_analytics_job_summaries`](Self::set_call_analytics_job_summaries).
    ///
    /// <p>Provides a summary of information about each result.</p>
    pub fn call_analytics_job_summaries(
        mut self,
        input: crate::types::CallAnalyticsJobSummary,
    ) -> Self {
        let mut v = self.call_analytics_job_summaries.unwrap_or_default();
        v.push(input);
        self.call_analytics_job_summaries = Some(v);
        self
    }
    /// <p>Provides a summary of information about each result.</p>
    pub fn set_call_analytics_job_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CallAnalyticsJobSummary>>,
    ) -> Self {
        self.call_analytics_job_summaries = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListCallAnalyticsJobsOutput`](crate::operation::list_call_analytics_jobs::ListCallAnalyticsJobsOutput).
    pub fn build(self) -> crate::operation::list_call_analytics_jobs::ListCallAnalyticsJobsOutput {
        crate::operation::list_call_analytics_jobs::ListCallAnalyticsJobsOutput {
            status: self.status,
            next_token: self.next_token,
            call_analytics_job_summaries: self.call_analytics_job_summaries,
            _request_id: self._request_id,
        }
    }
}
