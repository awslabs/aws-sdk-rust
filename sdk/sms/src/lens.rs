// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_connectors_output_next_token(
    input: &crate::output::GetConnectorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_replication_jobs_output_next_token(
    input: &crate::output::GetReplicationJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_replication_runs_output_next_token(
    input: &crate::output::GetReplicationRunsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_servers_output_next_token(
    input: &crate::output::GetServersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_connectors_output_connector_list(
    input: crate::output::GetConnectorsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Connector>> {
    let input = match input.connector_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_replication_jobs_output_replication_job_list(
    input: crate::output::GetReplicationJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReplicationJob>> {
    let input = match input.replication_job_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_replication_runs_output_replication_run_list(
    input: crate::output::GetReplicationRunsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReplicationRun>> {
    let input = match input.replication_run_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_servers_output_server_list(
    input: crate::output::GetServersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Server>> {
    let input = match input.server_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
