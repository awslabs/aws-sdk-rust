// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetReplicationRunsOutput {
    /// <p>Information about the replication job.</p>
    pub replication_job: ::std::option::Option<crate::types::ReplicationJob>,
    /// <p>Information about the replication runs.</p>
    pub replication_run_list: ::std::option::Option<::std::vec::Vec<crate::types::ReplicationRun>>,
    /// <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetReplicationRunsOutput {
    /// <p>Information about the replication job.</p>
    pub fn replication_job(&self) -> ::std::option::Option<&crate::types::ReplicationJob> {
        self.replication_job.as_ref()
    }
    /// <p>Information about the replication runs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replication_run_list.is_none()`.
    pub fn replication_run_list(&self) -> &[crate::types::ReplicationRun] {
        self.replication_run_list.as_deref().unwrap_or_default()
    }
    /// <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetReplicationRunsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetReplicationRunsOutput {
    /// Creates a new builder-style object to manufacture [`GetReplicationRunsOutput`](crate::operation::get_replication_runs::GetReplicationRunsOutput).
    pub fn builder() -> crate::operation::get_replication_runs::builders::GetReplicationRunsOutputBuilder {
        crate::operation::get_replication_runs::builders::GetReplicationRunsOutputBuilder::default()
    }
}

/// A builder for [`GetReplicationRunsOutput`](crate::operation::get_replication_runs::GetReplicationRunsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetReplicationRunsOutputBuilder {
    pub(crate) replication_job: ::std::option::Option<crate::types::ReplicationJob>,
    pub(crate) replication_run_list: ::std::option::Option<::std::vec::Vec<crate::types::ReplicationRun>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetReplicationRunsOutputBuilder {
    /// <p>Information about the replication job.</p>
    pub fn replication_job(mut self, input: crate::types::ReplicationJob) -> Self {
        self.replication_job = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the replication job.</p>
    pub fn set_replication_job(mut self, input: ::std::option::Option<crate::types::ReplicationJob>) -> Self {
        self.replication_job = input;
        self
    }
    /// <p>Information about the replication job.</p>
    pub fn get_replication_job(&self) -> &::std::option::Option<crate::types::ReplicationJob> {
        &self.replication_job
    }
    /// Appends an item to `replication_run_list`.
    ///
    /// To override the contents of this collection use [`set_replication_run_list`](Self::set_replication_run_list).
    ///
    /// <p>Information about the replication runs.</p>
    pub fn replication_run_list(mut self, input: crate::types::ReplicationRun) -> Self {
        let mut v = self.replication_run_list.unwrap_or_default();
        v.push(input);
        self.replication_run_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the replication runs.</p>
    pub fn set_replication_run_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReplicationRun>>) -> Self {
        self.replication_run_list = input;
        self
    }
    /// <p>Information about the replication runs.</p>
    pub fn get_replication_run_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReplicationRun>> {
        &self.replication_run_list
    }
    /// <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetReplicationRunsOutput`](crate::operation::get_replication_runs::GetReplicationRunsOutput).
    pub fn build(self) -> crate::operation::get_replication_runs::GetReplicationRunsOutput {
        crate::operation::get_replication_runs::GetReplicationRunsOutput {
            replication_job: self.replication_job,
            replication_run_list: self.replication_run_list,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
