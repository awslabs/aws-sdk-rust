// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_replication_job::_create_replication_job_output::CreateReplicationJobOutputBuilder;

pub use crate::operation::create_replication_job::_create_replication_job_input::CreateReplicationJobInputBuilder;

impl crate::operation::create_replication_job::builders::CreateReplicationJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_replication_job::CreateReplicationJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_replication_job::CreateReplicationJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_replication_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateReplicationJob`.
///
/// <p>Creates a replication job. The replication job schedules periodic replication runs to replicate your server to Amazon Web Services. Each replication run creates an Amazon Machine Image (AMI).</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateReplicationJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_replication_job::builders::CreateReplicationJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_replication_job::CreateReplicationJobOutput,
        crate::operation::create_replication_job::CreateReplicationJobError,
    > for CreateReplicationJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_replication_job::CreateReplicationJobOutput,
            crate::operation::create_replication_job::CreateReplicationJobError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateReplicationJobFluentBuilder {
    /// Creates a new `CreateReplicationJob`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateReplicationJob as a reference.
    pub fn as_input(&self) -> &crate::operation::create_replication_job::builders::CreateReplicationJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_replication_job::CreateReplicationJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_replication_job::CreateReplicationJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_replication_job::CreateReplicationJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_replication_job::CreateReplicationJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_replication_job::CreateReplicationJobOutput,
        crate::operation::create_replication_job::CreateReplicationJobError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the server.</p>
    pub fn server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.server_id(input.into());
        self
    }
    /// <p>The ID of the server.</p>
    pub fn set_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_server_id(input);
        self
    }
    /// <p>The ID of the server.</p>
    pub fn get_server_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_server_id()
    }
    /// <p>The seed replication time.</p>
    pub fn seed_replication_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.seed_replication_time(input);
        self
    }
    /// <p>The seed replication time.</p>
    pub fn set_seed_replication_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_seed_replication_time(input);
        self
    }
    /// <p>The seed replication time.</p>
    pub fn get_seed_replication_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_seed_replication_time()
    }
    /// <p>The time between consecutive replication runs, in hours.</p>
    pub fn frequency(mut self, input: i32) -> Self {
        self.inner = self.inner.frequency(input);
        self
    }
    /// <p>The time between consecutive replication runs, in hours.</p>
    pub fn set_frequency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_frequency(input);
        self
    }
    /// <p>The time between consecutive replication runs, in hours.</p>
    pub fn get_frequency(&self) -> &::std::option::Option<i32> {
        self.inner.get_frequency()
    }
    /// <p>Indicates whether to run the replication job one time.</p>
    pub fn run_once(mut self, input: bool) -> Self {
        self.inner = self.inner.run_once(input);
        self
    }
    /// <p>Indicates whether to run the replication job one time.</p>
    pub fn set_run_once(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_run_once(input);
        self
    }
    /// <p>Indicates whether to run the replication job one time.</p>
    pub fn get_run_once(&self) -> &::std::option::Option<bool> {
        self.inner.get_run_once()
    }
    /// <p>The license type to be used for the AMI created by a successful replication run.</p>
    pub fn license_type(mut self, input: crate::types::LicenseType) -> Self {
        self.inner = self.inner.license_type(input);
        self
    }
    /// <p>The license type to be used for the AMI created by a successful replication run.</p>
    pub fn set_license_type(mut self, input: ::std::option::Option<crate::types::LicenseType>) -> Self {
        self.inner = self.inner.set_license_type(input);
        self
    }
    /// <p>The license type to be used for the AMI created by a successful replication run.</p>
    pub fn get_license_type(&self) -> &::std::option::Option<crate::types::LicenseType> {
        self.inner.get_license_type()
    }
    /// <p>The name of the IAM role to be used by the Server Migration Service.</p>
    pub fn role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_name(input.into());
        self
    }
    /// <p>The name of the IAM role to be used by the Server Migration Service.</p>
    pub fn set_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_name(input);
        self
    }
    /// <p>The name of the IAM role to be used by the Server Migration Service.</p>
    pub fn get_role_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_name()
    }
    /// <p>The description of the replication job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the replication job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description of the replication job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    pub fn number_of_recent_amis_to_keep(mut self, input: i32) -> Self {
        self.inner = self.inner.number_of_recent_amis_to_keep(input);
        self
    }
    /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    pub fn set_number_of_recent_amis_to_keep(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_number_of_recent_amis_to_keep(input);
        self
    }
    /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    pub fn get_number_of_recent_amis_to_keep(&self) -> &::std::option::Option<i32> {
        self.inner.get_number_of_recent_amis_to_keep()
    }
    /// <p>Indicates whether the replication job produces encrypted AMIs.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.inner = self.inner.encrypted(input);
        self
    }
    /// <p>Indicates whether the replication job produces encrypted AMIs.</p>
    pub fn set_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_encrypted(input);
        self
    }
    /// <p>Indicates whether the replication job produces encrypted AMIs.</p>
    pub fn get_encrypted(&self) -> &::std::option::Option<bool> {
        self.inner.get_encrypted()
    }
    /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>
    /// <ul>
    /// <li>
    /// <p>KMS key ID</p></li>
    /// <li>
    /// <p>KMS key alias</p></li>
    /// <li>
    /// <p>ARN referring to the KMS key ID</p></li>
    /// <li>
    /// <p>ARN referring to the KMS key alias</p></li>
    /// </ul>
    /// <p>If encrypted is <i>true</i> but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>
    /// <ul>
    /// <li>
    /// <p>KMS key ID</p></li>
    /// <li>
    /// <p>KMS key alias</p></li>
    /// <li>
    /// <p>ARN referring to the KMS key ID</p></li>
    /// <li>
    /// <p>ARN referring to the KMS key alias</p></li>
    /// </ul>
    /// <p>If encrypted is <i>true</i> but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>
    /// <ul>
    /// <li>
    /// <p>KMS key ID</p></li>
    /// <li>
    /// <p>KMS key alias</p></li>
    /// <li>
    /// <p>ARN referring to the KMS key ID</p></li>
    /// <li>
    /// <p>ARN referring to the KMS key alias</p></li>
    /// </ul>
    /// <p>If encrypted is <i>true</i> but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_kms_key_id()
    }
}
