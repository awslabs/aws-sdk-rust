// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateReplicationJobInput {
    /// <p>The ID of the server.</p>
    pub server_id: ::std::option::Option<::std::string::String>,
    /// <p>The seed replication time.</p>
    pub seed_replication_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time between consecutive replication runs, in hours.</p>
    pub frequency: ::std::option::Option<i32>,
    /// <p>Indicates whether to run the replication job one time.</p>
    pub run_once: ::std::option::Option<bool>,
    /// <p>The license type to be used for the AMI created by a successful replication run.</p>
    pub license_type: ::std::option::Option<crate::types::LicenseType>,
    /// <p>The name of the IAM role to be used by the Server Migration Service.</p>
    pub role_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the replication job.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    pub number_of_recent_amis_to_keep: ::std::option::Option<i32>,
    /// <p>Indicates whether the replication job produces encrypted AMIs.</p>
    pub encrypted: ::std::option::Option<bool>,
    /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>
    /// <ul>
    /// <li> <p>KMS key ID</p> </li>
    /// <li> <p>KMS key alias</p> </li>
    /// <li> <p>ARN referring to the KMS key ID</p> </li>
    /// <li> <p>ARN referring to the KMS key alias</p> </li>
    /// </ul>
    /// <p> If encrypted is <i>true</i> but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used. </p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl CreateReplicationJobInput {
    /// <p>The ID of the server.</p>
    pub fn server_id(&self) -> ::std::option::Option<&str> {
        self.server_id.as_deref()
    }
    /// <p>The seed replication time.</p>
    pub fn seed_replication_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.seed_replication_time.as_ref()
    }
    /// <p>The time between consecutive replication runs, in hours.</p>
    pub fn frequency(&self) -> ::std::option::Option<i32> {
        self.frequency
    }
    /// <p>Indicates whether to run the replication job one time.</p>
    pub fn run_once(&self) -> ::std::option::Option<bool> {
        self.run_once
    }
    /// <p>The license type to be used for the AMI created by a successful replication run.</p>
    pub fn license_type(&self) -> ::std::option::Option<&crate::types::LicenseType> {
        self.license_type.as_ref()
    }
    /// <p>The name of the IAM role to be used by the Server Migration Service.</p>
    pub fn role_name(&self) -> ::std::option::Option<&str> {
        self.role_name.as_deref()
    }
    /// <p>The description of the replication job.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    pub fn number_of_recent_amis_to_keep(&self) -> ::std::option::Option<i32> {
        self.number_of_recent_amis_to_keep
    }
    /// <p>Indicates whether the replication job produces encrypted AMIs.</p>
    pub fn encrypted(&self) -> ::std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>
    /// <ul>
    /// <li> <p>KMS key ID</p> </li>
    /// <li> <p>KMS key alias</p> </li>
    /// <li> <p>ARN referring to the KMS key ID</p> </li>
    /// <li> <p>ARN referring to the KMS key alias</p> </li>
    /// </ul>
    /// <p> If encrypted is <i>true</i> but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used. </p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl CreateReplicationJobInput {
    /// Creates a new builder-style object to manufacture [`CreateReplicationJobInput`](crate::operation::create_replication_job::CreateReplicationJobInput).
    pub fn builder() -> crate::operation::create_replication_job::builders::CreateReplicationJobInputBuilder {
        crate::operation::create_replication_job::builders::CreateReplicationJobInputBuilder::default()
    }
}

/// A builder for [`CreateReplicationJobInput`](crate::operation::create_replication_job::CreateReplicationJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateReplicationJobInputBuilder {
    pub(crate) server_id: ::std::option::Option<::std::string::String>,
    pub(crate) seed_replication_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) frequency: ::std::option::Option<i32>,
    pub(crate) run_once: ::std::option::Option<bool>,
    pub(crate) license_type: ::std::option::Option<crate::types::LicenseType>,
    pub(crate) role_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_recent_amis_to_keep: ::std::option::Option<i32>,
    pub(crate) encrypted: ::std::option::Option<bool>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl CreateReplicationJobInputBuilder {
    /// <p>The ID of the server.</p>
    /// This field is required.
    pub fn server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the server.</p>
    pub fn set_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_id = input;
        self
    }
    /// <p>The ID of the server.</p>
    pub fn get_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_id
    }
    /// <p>The seed replication time.</p>
    /// This field is required.
    pub fn seed_replication_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.seed_replication_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The seed replication time.</p>
    pub fn set_seed_replication_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.seed_replication_time = input;
        self
    }
    /// <p>The seed replication time.</p>
    pub fn get_seed_replication_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.seed_replication_time
    }
    /// <p>The time between consecutive replication runs, in hours.</p>
    pub fn frequency(mut self, input: i32) -> Self {
        self.frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time between consecutive replication runs, in hours.</p>
    pub fn set_frequency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.frequency = input;
        self
    }
    /// <p>The time between consecutive replication runs, in hours.</p>
    pub fn get_frequency(&self) -> &::std::option::Option<i32> {
        &self.frequency
    }
    /// <p>Indicates whether to run the replication job one time.</p>
    pub fn run_once(mut self, input: bool) -> Self {
        self.run_once = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to run the replication job one time.</p>
    pub fn set_run_once(mut self, input: ::std::option::Option<bool>) -> Self {
        self.run_once = input;
        self
    }
    /// <p>Indicates whether to run the replication job one time.</p>
    pub fn get_run_once(&self) -> &::std::option::Option<bool> {
        &self.run_once
    }
    /// <p>The license type to be used for the AMI created by a successful replication run.</p>
    pub fn license_type(mut self, input: crate::types::LicenseType) -> Self {
        self.license_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The license type to be used for the AMI created by a successful replication run.</p>
    pub fn set_license_type(mut self, input: ::std::option::Option<crate::types::LicenseType>) -> Self {
        self.license_type = input;
        self
    }
    /// <p>The license type to be used for the AMI created by a successful replication run.</p>
    pub fn get_license_type(&self) -> &::std::option::Option<crate::types::LicenseType> {
        &self.license_type
    }
    /// <p>The name of the IAM role to be used by the Server Migration Service.</p>
    pub fn role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IAM role to be used by the Server Migration Service.</p>
    pub fn set_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_name = input;
        self
    }
    /// <p>The name of the IAM role to be used by the Server Migration Service.</p>
    pub fn get_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_name
    }
    /// <p>The description of the replication job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the replication job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the replication job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    pub fn number_of_recent_amis_to_keep(mut self, input: i32) -> Self {
        self.number_of_recent_amis_to_keep = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    pub fn set_number_of_recent_amis_to_keep(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_recent_amis_to_keep = input;
        self
    }
    /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    pub fn get_number_of_recent_amis_to_keep(&self) -> &::std::option::Option<i32> {
        &self.number_of_recent_amis_to_keep
    }
    /// <p>Indicates whether the replication job produces encrypted AMIs.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the replication job produces encrypted AMIs.</p>
    pub fn set_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.encrypted = input;
        self
    }
    /// <p>Indicates whether the replication job produces encrypted AMIs.</p>
    pub fn get_encrypted(&self) -> &::std::option::Option<bool> {
        &self.encrypted
    }
    /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>
    /// <ul>
    /// <li> <p>KMS key ID</p> </li>
    /// <li> <p>KMS key alias</p> </li>
    /// <li> <p>ARN referring to the KMS key ID</p> </li>
    /// <li> <p>ARN referring to the KMS key alias</p> </li>
    /// </ul>
    /// <p> If encrypted is <i>true</i> but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used. </p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>
    /// <ul>
    /// <li> <p>KMS key ID</p> </li>
    /// <li> <p>KMS key alias</p> </li>
    /// <li> <p>ARN referring to the KMS key ID</p> </li>
    /// <li> <p>ARN referring to the KMS key alias</p> </li>
    /// </ul>
    /// <p> If encrypted is <i>true</i> but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used. </p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>
    /// <ul>
    /// <li> <p>KMS key ID</p> </li>
    /// <li> <p>KMS key alias</p> </li>
    /// <li> <p>ARN referring to the KMS key ID</p> </li>
    /// <li> <p>ARN referring to the KMS key alias</p> </li>
    /// </ul>
    /// <p> If encrypted is <i>true</i> but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used. </p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`CreateReplicationJobInput`](crate::operation::create_replication_job::CreateReplicationJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_replication_job::CreateReplicationJobInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_replication_job::CreateReplicationJobInput {
            server_id: self.server_id,
            seed_replication_time: self.seed_replication_time,
            frequency: self.frequency,
            run_once: self.run_once,
            license_type: self.license_type,
            role_name: self.role_name,
            description: self.description,
            number_of_recent_amis_to_keep: self.number_of_recent_amis_to_keep,
            encrypted: self.encrypted,
            kms_key_id: self.kms_key_id,
        })
    }
}
