// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates an application. An application consists of one or more server groups. Each
/// server group contain one or more servers.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateApp {
    _private: (),
}
impl CreateApp {
    /// Creates a new builder-style object to manufacture [`CreateAppInput`](crate::input::CreateAppInput)
    pub fn builder() -> crate::input::create_app_input::Builder {
        crate::input::create_app_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateApp {
    type Output = std::result::Result<crate::output::CreateAppOutput, crate::error::CreateAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_app_error(response)
        } else {
            crate::operation_deser::parse_create_app_response(response)
        }
    }
}

/// <p>Creates a replication job. The replication job schedules periodic replication runs
/// to replicate your server to AWS. Each replication run creates an Amazon Machine Image
/// (AMI).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateReplicationJob {
    _private: (),
}
impl CreateReplicationJob {
    /// Creates a new builder-style object to manufacture [`CreateReplicationJobInput`](crate::input::CreateReplicationJobInput)
    pub fn builder() -> crate::input::create_replication_job_input::Builder {
        crate::input::create_replication_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateReplicationJob {
    type Output = std::result::Result<
        crate::output::CreateReplicationJobOutput,
        crate::error::CreateReplicationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_replication_job_error(response)
        } else {
            crate::operation_deser::parse_create_replication_job_response(response)
        }
    }
}

/// <p>Deletes the specified application. Optionally deletes the launched stack associated with
/// the application and all AWS SMS replication jobs for servers in the application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteApp {
    _private: (),
}
impl DeleteApp {
    /// Creates a new builder-style object to manufacture [`DeleteAppInput`](crate::input::DeleteAppInput)
    pub fn builder() -> crate::input::delete_app_input::Builder {
        crate::input::delete_app_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteApp {
    type Output = std::result::Result<crate::output::DeleteAppOutput, crate::error::DeleteAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_app_error(response)
        } else {
            crate::operation_deser::parse_delete_app_response(response)
        }
    }
}

/// <p>Deletes the launch configuration for the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAppLaunchConfiguration {
    _private: (),
}
impl DeleteAppLaunchConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteAppLaunchConfigurationInput`](crate::input::DeleteAppLaunchConfigurationInput)
    pub fn builder() -> crate::input::delete_app_launch_configuration_input::Builder {
        crate::input::delete_app_launch_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAppLaunchConfiguration {
    type Output = std::result::Result<
        crate::output::DeleteAppLaunchConfigurationOutput,
        crate::error::DeleteAppLaunchConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_app_launch_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_app_launch_configuration_response(response)
        }
    }
}

/// <p>Deletes the replication configuration for the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAppReplicationConfiguration {
    _private: (),
}
impl DeleteAppReplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteAppReplicationConfigurationInput`](crate::input::DeleteAppReplicationConfigurationInput)
    pub fn builder() -> crate::input::delete_app_replication_configuration_input::Builder {
        crate::input::delete_app_replication_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAppReplicationConfiguration {
    type Output = std::result::Result<
        crate::output::DeleteAppReplicationConfigurationOutput,
        crate::error::DeleteAppReplicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_app_replication_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_app_replication_configuration_response(response)
        }
    }
}

/// <p>Deletes the validation configuration for the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAppValidationConfiguration {
    _private: (),
}
impl DeleteAppValidationConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteAppValidationConfigurationInput`](crate::input::DeleteAppValidationConfigurationInput)
    pub fn builder() -> crate::input::delete_app_validation_configuration_input::Builder {
        crate::input::delete_app_validation_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAppValidationConfiguration {
    type Output = std::result::Result<
        crate::output::DeleteAppValidationConfigurationOutput,
        crate::error::DeleteAppValidationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_app_validation_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_app_validation_configuration_response(response)
        }
    }
}

/// <p>Deletes the specified replication job.</p>
/// <p>After you delete a replication job, there are no further replication runs. AWS
/// deletes the contents of the Amazon S3 bucket used to store AWS SMS artifacts. The AMIs created
/// by the replication runs are not deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReplicationJob {
    _private: (),
}
impl DeleteReplicationJob {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationJobInput`](crate::input::DeleteReplicationJobInput)
    pub fn builder() -> crate::input::delete_replication_job_input::Builder {
        crate::input::delete_replication_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteReplicationJob {
    type Output = std::result::Result<
        crate::output::DeleteReplicationJobOutput,
        crate::error::DeleteReplicationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_replication_job_error(response)
        } else {
            crate::operation_deser::parse_delete_replication_job_response(response)
        }
    }
}

/// <p>Deletes all servers from your server catalog.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteServerCatalog {
    _private: (),
}
impl DeleteServerCatalog {
    /// Creates a new builder-style object to manufacture [`DeleteServerCatalogInput`](crate::input::DeleteServerCatalogInput)
    pub fn builder() -> crate::input::delete_server_catalog_input::Builder {
        crate::input::delete_server_catalog_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteServerCatalog {
    type Output = std::result::Result<
        crate::output::DeleteServerCatalogOutput,
        crate::error::DeleteServerCatalogError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_server_catalog_error(response)
        } else {
            crate::operation_deser::parse_delete_server_catalog_response(response)
        }
    }
}

/// <p>Disassociates the specified connector from AWS SMS.</p>
/// <p>After you disassociate a connector, it is no longer available to support
/// replication jobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateConnector {
    _private: (),
}
impl DisassociateConnector {
    /// Creates a new builder-style object to manufacture [`DisassociateConnectorInput`](crate::input::DisassociateConnectorInput)
    pub fn builder() -> crate::input::disassociate_connector_input::Builder {
        crate::input::disassociate_connector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateConnector {
    type Output = std::result::Result<
        crate::output::DisassociateConnectorOutput,
        crate::error::DisassociateConnectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_connector_error(response)
        } else {
            crate::operation_deser::parse_disassociate_connector_response(response)
        }
    }
}

/// <p>Generates a target change set for a currently launched stack and writes it to an Amazon S3
/// object in the customer’s Amazon S3 bucket.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GenerateChangeSet {
    _private: (),
}
impl GenerateChangeSet {
    /// Creates a new builder-style object to manufacture [`GenerateChangeSetInput`](crate::input::GenerateChangeSetInput)
    pub fn builder() -> crate::input::generate_change_set_input::Builder {
        crate::input::generate_change_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GenerateChangeSet {
    type Output = std::result::Result<
        crate::output::GenerateChangeSetOutput,
        crate::error::GenerateChangeSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_generate_change_set_error(response)
        } else {
            crate::operation_deser::parse_generate_change_set_response(response)
        }
    }
}

/// <p>Generates an AWS CloudFormation template based on the current launch configuration and writes it to
/// an Amazon S3 object in the customer’s Amazon S3 bucket.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GenerateTemplate {
    _private: (),
}
impl GenerateTemplate {
    /// Creates a new builder-style object to manufacture [`GenerateTemplateInput`](crate::input::GenerateTemplateInput)
    pub fn builder() -> crate::input::generate_template_input::Builder {
        crate::input::generate_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GenerateTemplate {
    type Output = std::result::Result<
        crate::output::GenerateTemplateOutput,
        crate::error::GenerateTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_generate_template_error(response)
        } else {
            crate::operation_deser::parse_generate_template_response(response)
        }
    }
}

/// <p>Retrieve information about the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetApp {
    _private: (),
}
impl GetApp {
    /// Creates a new builder-style object to manufacture [`GetAppInput`](crate::input::GetAppInput)
    pub fn builder() -> crate::input::get_app_input::Builder {
        crate::input::get_app_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetApp {
    type Output = std::result::Result<crate::output::GetAppOutput, crate::error::GetAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_app_error(response)
        } else {
            crate::operation_deser::parse_get_app_response(response)
        }
    }
}

/// <p>Retrieves the application launch configuration associated with the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAppLaunchConfiguration {
    _private: (),
}
impl GetAppLaunchConfiguration {
    /// Creates a new builder-style object to manufacture [`GetAppLaunchConfigurationInput`](crate::input::GetAppLaunchConfigurationInput)
    pub fn builder() -> crate::input::get_app_launch_configuration_input::Builder {
        crate::input::get_app_launch_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAppLaunchConfiguration {
    type Output = std::result::Result<
        crate::output::GetAppLaunchConfigurationOutput,
        crate::error::GetAppLaunchConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_app_launch_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_app_launch_configuration_response(response)
        }
    }
}

/// <p>Retrieves the application replication configuration associated with the specified
/// application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAppReplicationConfiguration {
    _private: (),
}
impl GetAppReplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`GetAppReplicationConfigurationInput`](crate::input::GetAppReplicationConfigurationInput)
    pub fn builder() -> crate::input::get_app_replication_configuration_input::Builder {
        crate::input::get_app_replication_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAppReplicationConfiguration {
    type Output = std::result::Result<
        crate::output::GetAppReplicationConfigurationOutput,
        crate::error::GetAppReplicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_app_replication_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_app_replication_configuration_response(response)
        }
    }
}

/// <p>Retrieves information about a configuration for validating an application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAppValidationConfiguration {
    _private: (),
}
impl GetAppValidationConfiguration {
    /// Creates a new builder-style object to manufacture [`GetAppValidationConfigurationInput`](crate::input::GetAppValidationConfigurationInput)
    pub fn builder() -> crate::input::get_app_validation_configuration_input::Builder {
        crate::input::get_app_validation_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAppValidationConfiguration {
    type Output = std::result::Result<
        crate::output::GetAppValidationConfigurationOutput,
        crate::error::GetAppValidationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_app_validation_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_app_validation_configuration_response(response)
        }
    }
}

/// <p>Retrieves output from validating an application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAppValidationOutput {
    _private: (),
}
impl GetAppValidationOutput {
    /// Creates a new builder-style object to manufacture [`GetAppValidationOutputInput`](crate::input::GetAppValidationOutputInput)
    pub fn builder() -> crate::input::get_app_validation_output_input::Builder {
        crate::input::get_app_validation_output_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAppValidationOutput {
    type Output = std::result::Result<
        crate::output::GetAppValidationOutputOutput,
        crate::error::GetAppValidationOutputError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_app_validation_output_error(response)
        } else {
            crate::operation_deser::parse_get_app_validation_output_response(response)
        }
    }
}

/// <p>Describes the connectors registered with the AWS SMS.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConnectors {
    _private: (),
}
impl GetConnectors {
    /// Creates a new builder-style object to manufacture [`GetConnectorsInput`](crate::input::GetConnectorsInput)
    pub fn builder() -> crate::input::get_connectors_input::Builder {
        crate::input::get_connectors_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConnectors {
    type Output =
        std::result::Result<crate::output::GetConnectorsOutput, crate::error::GetConnectorsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_connectors_error(response)
        } else {
            crate::operation_deser::parse_get_connectors_response(response)
        }
    }
}

/// <p>Describes the specified replication job or all of your replication jobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetReplicationJobs {
    _private: (),
}
impl GetReplicationJobs {
    /// Creates a new builder-style object to manufacture [`GetReplicationJobsInput`](crate::input::GetReplicationJobsInput)
    pub fn builder() -> crate::input::get_replication_jobs_input::Builder {
        crate::input::get_replication_jobs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetReplicationJobs {
    type Output = std::result::Result<
        crate::output::GetReplicationJobsOutput,
        crate::error::GetReplicationJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_replication_jobs_error(response)
        } else {
            crate::operation_deser::parse_get_replication_jobs_response(response)
        }
    }
}

/// <p>Describes the replication runs for the specified replication job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetReplicationRuns {
    _private: (),
}
impl GetReplicationRuns {
    /// Creates a new builder-style object to manufacture [`GetReplicationRunsInput`](crate::input::GetReplicationRunsInput)
    pub fn builder() -> crate::input::get_replication_runs_input::Builder {
        crate::input::get_replication_runs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetReplicationRuns {
    type Output = std::result::Result<
        crate::output::GetReplicationRunsOutput,
        crate::error::GetReplicationRunsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_replication_runs_error(response)
        } else {
            crate::operation_deser::parse_get_replication_runs_response(response)
        }
    }
}

/// <p>Describes the servers in your server catalog.</p>
/// <p>Before you can describe your servers, you must import them using <a>ImportServerCatalog</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServers {
    _private: (),
}
impl GetServers {
    /// Creates a new builder-style object to manufacture [`GetServersInput`](crate::input::GetServersInput)
    pub fn builder() -> crate::input::get_servers_input::Builder {
        crate::input::get_servers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServers {
    type Output =
        std::result::Result<crate::output::GetServersOutput, crate::error::GetServersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_servers_error(response)
        } else {
            crate::operation_deser::parse_get_servers_response(response)
        }
    }
}

/// <p>Allows application import from AWS Migration Hub.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportAppCatalog {
    _private: (),
}
impl ImportAppCatalog {
    /// Creates a new builder-style object to manufacture [`ImportAppCatalogInput`](crate::input::ImportAppCatalogInput)
    pub fn builder() -> crate::input::import_app_catalog_input::Builder {
        crate::input::import_app_catalog_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportAppCatalog {
    type Output = std::result::Result<
        crate::output::ImportAppCatalogOutput,
        crate::error::ImportAppCatalogError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_app_catalog_error(response)
        } else {
            crate::operation_deser::parse_import_app_catalog_response(response)
        }
    }
}

/// <p>Gathers a complete list of on-premises servers. Connectors must be installed and
/// monitoring all servers to import.</p>
/// <p>This call returns immediately, but might take additional time to retrieve all the
/// servers.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportServerCatalog {
    _private: (),
}
impl ImportServerCatalog {
    /// Creates a new builder-style object to manufacture [`ImportServerCatalogInput`](crate::input::ImportServerCatalogInput)
    pub fn builder() -> crate::input::import_server_catalog_input::Builder {
        crate::input::import_server_catalog_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportServerCatalog {
    type Output = std::result::Result<
        crate::output::ImportServerCatalogOutput,
        crate::error::ImportServerCatalogError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_server_catalog_error(response)
        } else {
            crate::operation_deser::parse_import_server_catalog_response(response)
        }
    }
}

/// <p>Launches the specified application as a stack in AWS CloudFormation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct LaunchApp {
    _private: (),
}
impl LaunchApp {
    /// Creates a new builder-style object to manufacture [`LaunchAppInput`](crate::input::LaunchAppInput)
    pub fn builder() -> crate::input::launch_app_input::Builder {
        crate::input::launch_app_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for LaunchApp {
    type Output = std::result::Result<crate::output::LaunchAppOutput, crate::error::LaunchAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_launch_app_error(response)
        } else {
            crate::operation_deser::parse_launch_app_response(response)
        }
    }
}

/// <p>Retrieves summaries for all applications.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListApps {
    _private: (),
}
impl ListApps {
    /// Creates a new builder-style object to manufacture [`ListAppsInput`](crate::input::ListAppsInput)
    pub fn builder() -> crate::input::list_apps_input::Builder {
        crate::input::list_apps_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListApps {
    type Output = std::result::Result<crate::output::ListAppsOutput, crate::error::ListAppsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_apps_error(response)
        } else {
            crate::operation_deser::parse_list_apps_response(response)
        }
    }
}

/// <p>Provides information to AWS SMS about whether application validation is successful.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct NotifyAppValidationOutput {
    _private: (),
}
impl NotifyAppValidationOutput {
    /// Creates a new builder-style object to manufacture [`NotifyAppValidationOutputInput`](crate::input::NotifyAppValidationOutputInput)
    pub fn builder() -> crate::input::notify_app_validation_output_input::Builder {
        crate::input::notify_app_validation_output_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for NotifyAppValidationOutput {
    type Output = std::result::Result<
        crate::output::NotifyAppValidationOutputOutput,
        crate::error::NotifyAppValidationOutputError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_notify_app_validation_output_error(response)
        } else {
            crate::operation_deser::parse_notify_app_validation_output_response(response)
        }
    }
}

/// <p>Creates or updates the launch configuration for the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAppLaunchConfiguration {
    _private: (),
}
impl PutAppLaunchConfiguration {
    /// Creates a new builder-style object to manufacture [`PutAppLaunchConfigurationInput`](crate::input::PutAppLaunchConfigurationInput)
    pub fn builder() -> crate::input::put_app_launch_configuration_input::Builder {
        crate::input::put_app_launch_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAppLaunchConfiguration {
    type Output = std::result::Result<
        crate::output::PutAppLaunchConfigurationOutput,
        crate::error::PutAppLaunchConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_app_launch_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_app_launch_configuration_response(response)
        }
    }
}

/// <p>Creates or updates the replication configuration for the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAppReplicationConfiguration {
    _private: (),
}
impl PutAppReplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`PutAppReplicationConfigurationInput`](crate::input::PutAppReplicationConfigurationInput)
    pub fn builder() -> crate::input::put_app_replication_configuration_input::Builder {
        crate::input::put_app_replication_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAppReplicationConfiguration {
    type Output = std::result::Result<
        crate::output::PutAppReplicationConfigurationOutput,
        crate::error::PutAppReplicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_app_replication_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_app_replication_configuration_response(response)
        }
    }
}

/// <p>Creates or updates a validation configuration for the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAppValidationConfiguration {
    _private: (),
}
impl PutAppValidationConfiguration {
    /// Creates a new builder-style object to manufacture [`PutAppValidationConfigurationInput`](crate::input::PutAppValidationConfigurationInput)
    pub fn builder() -> crate::input::put_app_validation_configuration_input::Builder {
        crate::input::put_app_validation_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAppValidationConfiguration {
    type Output = std::result::Result<
        crate::output::PutAppValidationConfigurationOutput,
        crate::error::PutAppValidationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_app_validation_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_app_validation_configuration_response(response)
        }
    }
}

/// <p>Starts replicating the specified application by creating replication jobs for each server in the
/// application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartAppReplication {
    _private: (),
}
impl StartAppReplication {
    /// Creates a new builder-style object to manufacture [`StartAppReplicationInput`](crate::input::StartAppReplicationInput)
    pub fn builder() -> crate::input::start_app_replication_input::Builder {
        crate::input::start_app_replication_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartAppReplication {
    type Output = std::result::Result<
        crate::output::StartAppReplicationOutput,
        crate::error::StartAppReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_app_replication_error(response)
        } else {
            crate::operation_deser::parse_start_app_replication_response(response)
        }
    }
}

/// <p>Starts an on-demand replication run for the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartOnDemandAppReplication {
    _private: (),
}
impl StartOnDemandAppReplication {
    /// Creates a new builder-style object to manufacture [`StartOnDemandAppReplicationInput`](crate::input::StartOnDemandAppReplicationInput)
    pub fn builder() -> crate::input::start_on_demand_app_replication_input::Builder {
        crate::input::start_on_demand_app_replication_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartOnDemandAppReplication {
    type Output = std::result::Result<
        crate::output::StartOnDemandAppReplicationOutput,
        crate::error::StartOnDemandAppReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_on_demand_app_replication_error(response)
        } else {
            crate::operation_deser::parse_start_on_demand_app_replication_response(response)
        }
    }
}

/// <p>Starts an on-demand replication run for the specified replication job. This
/// replication run starts immediately. This replication run is in addition to the ones
/// already scheduled.</p>
/// <p>There is a limit on the number of on-demand replications runs that you can request
/// in a 24-hour period.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartOnDemandReplicationRun {
    _private: (),
}
impl StartOnDemandReplicationRun {
    /// Creates a new builder-style object to manufacture [`StartOnDemandReplicationRunInput`](crate::input::StartOnDemandReplicationRunInput)
    pub fn builder() -> crate::input::start_on_demand_replication_run_input::Builder {
        crate::input::start_on_demand_replication_run_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartOnDemandReplicationRun {
    type Output = std::result::Result<
        crate::output::StartOnDemandReplicationRunOutput,
        crate::error::StartOnDemandReplicationRunError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_on_demand_replication_run_error(response)
        } else {
            crate::operation_deser::parse_start_on_demand_replication_run_response(response)
        }
    }
}

/// <p>Stops replicating the specified application by deleting the replication job for each server in
/// the application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopAppReplication {
    _private: (),
}
impl StopAppReplication {
    /// Creates a new builder-style object to manufacture [`StopAppReplicationInput`](crate::input::StopAppReplicationInput)
    pub fn builder() -> crate::input::stop_app_replication_input::Builder {
        crate::input::stop_app_replication_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopAppReplication {
    type Output = std::result::Result<
        crate::output::StopAppReplicationOutput,
        crate::error::StopAppReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_app_replication_error(response)
        } else {
            crate::operation_deser::parse_stop_app_replication_response(response)
        }
    }
}

/// <p>Terminates the stack for the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TerminateApp {
    _private: (),
}
impl TerminateApp {
    /// Creates a new builder-style object to manufacture [`TerminateAppInput`](crate::input::TerminateAppInput)
    pub fn builder() -> crate::input::terminate_app_input::Builder {
        crate::input::terminate_app_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TerminateApp {
    type Output =
        std::result::Result<crate::output::TerminateAppOutput, crate::error::TerminateAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_terminate_app_error(response)
        } else {
            crate::operation_deser::parse_terminate_app_response(response)
        }
    }
}

/// <p>Updates the specified application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateApp {
    _private: (),
}
impl UpdateApp {
    /// Creates a new builder-style object to manufacture [`UpdateAppInput`](crate::input::UpdateAppInput)
    pub fn builder() -> crate::input::update_app_input::Builder {
        crate::input::update_app_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateApp {
    type Output = std::result::Result<crate::output::UpdateAppOutput, crate::error::UpdateAppError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_app_error(response)
        } else {
            crate::operation_deser::parse_update_app_response(response)
        }
    }
}

/// <p>Updates the specified settings for the specified replication job.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateReplicationJob {
    _private: (),
}
impl UpdateReplicationJob {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationJobInput`](crate::input::UpdateReplicationJobInput)
    pub fn builder() -> crate::input::update_replication_job_input::Builder {
        crate::input::update_replication_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateReplicationJob {
    type Output = std::result::Result<
        crate::output::UpdateReplicationJobOutput,
        crate::error::UpdateReplicationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_replication_job_error(response)
        } else {
            crate::operation_deser::parse_update_replication_job_response(response)
        }
    }
}
