// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_server_launch_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ServerLaunchConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.server {
        #[allow(unused_mut)]
        let mut object_2 = object.key("server").start_object();
        crate::protocol_serde::shape_server::ser_server(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.logical_id {
        object.key("logicalId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.vpc {
        object.key("vpc").string(var_4.as_str());
    }
    if let Some(var_5) = &input.subnet {
        object.key("subnet").string(var_5.as_str());
    }
    if let Some(var_6) = &input.security_group {
        object.key("securityGroup").string(var_6.as_str());
    }
    if let Some(var_7) = &input.ec2_key_name {
        object.key("ec2KeyName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.user_data {
        #[allow(unused_mut)]
        let mut object_9 = object.key("userData").start_object();
        crate::protocol_serde::shape_user_data::ser_user_data(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.instance_type {
        object.key("instanceType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.associate_public_ip_address {
        object.key("associatePublicIpAddress").boolean(*var_11);
    }
    if let Some(var_12) = &input.iam_instance_profile_name {
        object.key("iamInstanceProfileName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.configure_script {
        #[allow(unused_mut)]
        let mut object_14 = object.key("configureScript").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.configure_script_type {
        object.key("configureScriptType").string(var_15.as_str());
    }
    Ok(())
}

pub(crate) fn de_server_launch_configuration<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ServerLaunchConfiguration>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ServerLaunchConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "server" => {
                                builder = builder.set_server(
                                    crate::protocol_serde::shape_server::de_server(tokens)?,
                                );
                            }
                            "logicalId" => {
                                builder = builder.set_logical_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "vpc" => {
                                builder = builder.set_vpc(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "subnet" => {
                                builder = builder.set_subnet(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "securityGroup" => {
                                builder = builder.set_security_group(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ec2KeyName" => {
                                builder = builder.set_ec2_key_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "userData" => {
                                builder = builder.set_user_data(
                                    crate::protocol_serde::shape_user_data::de_user_data(tokens)?,
                                );
                            }
                            "instanceType" => {
                                builder = builder.set_instance_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "associatePublicIpAddress" => {
                                builder = builder.set_associate_public_ip_address(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "iamInstanceProfileName" => {
                                builder = builder.set_iam_instance_profile_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "configureScript" => {
                                builder = builder.set_configure_script(
                                    crate::protocol_serde::shape_s3_location::de_s3_location(
                                        tokens,
                                    )?,
                                );
                            }
                            "configureScriptType" => {
                                builder = builder.set_configure_script_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::ScriptType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
