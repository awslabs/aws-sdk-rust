// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a connector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Connector {
    /// <p>The ID of the connector.</p>
    pub connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The connector version.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The status of the connector.</p>
    pub status: ::std::option::Option<crate::types::ConnectorStatus>,
    /// <p>The capabilities of the connector.</p>
    pub capability_list: ::std::option::Option<::std::vec::Vec<crate::types::ConnectorCapability>>,
    /// <p>The name of the VM manager.</p>
    pub vm_manager_name: ::std::option::Option<::std::string::String>,
    /// <p>The VM management product.</p>
    pub vm_manager_type: ::std::option::Option<crate::types::VmManagerType>,
    /// <p>The ID of the VM manager.</p>
    pub vm_manager_id: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the connector.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The MAC address of the connector.</p>
    pub mac_address: ::std::option::Option<::std::string::String>,
    /// <p>The time the connector was associated.</p>
    pub associated_on: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Connector {
    /// <p>The ID of the connector.</p>
    pub fn connector_id(&self) -> ::std::option::Option<&str> {
        self.connector_id.as_deref()
    }
    /// <p>The connector version.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The status of the connector.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ConnectorStatus> {
        self.status.as_ref()
    }
    /// <p>The capabilities of the connector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.capability_list.is_none()`.
    pub fn capability_list(&self) -> &[crate::types::ConnectorCapability] {
        self.capability_list.as_deref().unwrap_or_default()
    }
    /// <p>The name of the VM manager.</p>
    pub fn vm_manager_name(&self) -> ::std::option::Option<&str> {
        self.vm_manager_name.as_deref()
    }
    /// <p>The VM management product.</p>
    pub fn vm_manager_type(&self) -> ::std::option::Option<&crate::types::VmManagerType> {
        self.vm_manager_type.as_ref()
    }
    /// <p>The ID of the VM manager.</p>
    pub fn vm_manager_id(&self) -> ::std::option::Option<&str> {
        self.vm_manager_id.as_deref()
    }
    /// <p>The IP address of the connector.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The MAC address of the connector.</p>
    pub fn mac_address(&self) -> ::std::option::Option<&str> {
        self.mac_address.as_deref()
    }
    /// <p>The time the connector was associated.</p>
    pub fn associated_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.associated_on.as_ref()
    }
}
impl Connector {
    /// Creates a new builder-style object to manufacture [`Connector`](crate::types::Connector).
    pub fn builder() -> crate::types::builders::ConnectorBuilder {
        crate::types::builders::ConnectorBuilder::default()
    }
}

/// A builder for [`Connector`](crate::types::Connector).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectorBuilder {
    pub(crate) connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ConnectorStatus>,
    pub(crate) capability_list: ::std::option::Option<::std::vec::Vec<crate::types::ConnectorCapability>>,
    pub(crate) vm_manager_name: ::std::option::Option<::std::string::String>,
    pub(crate) vm_manager_type: ::std::option::Option<crate::types::VmManagerType>,
    pub(crate) vm_manager_id: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) mac_address: ::std::option::Option<::std::string::String>,
    pub(crate) associated_on: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ConnectorBuilder {
    /// <p>The ID of the connector.</p>
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connector.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connector_id = input;
        self
    }
    /// <p>The ID of the connector.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connector_id
    }
    /// <p>The connector version.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The connector version.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The connector version.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The status of the connector.</p>
    pub fn status(mut self, input: crate::types::ConnectorStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the connector.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ConnectorStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the connector.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ConnectorStatus> {
        &self.status
    }
    /// Appends an item to `capability_list`.
    ///
    /// To override the contents of this collection use [`set_capability_list`](Self::set_capability_list).
    ///
    /// <p>The capabilities of the connector.</p>
    pub fn capability_list(mut self, input: crate::types::ConnectorCapability) -> Self {
        let mut v = self.capability_list.unwrap_or_default();
        v.push(input);
        self.capability_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The capabilities of the connector.</p>
    pub fn set_capability_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConnectorCapability>>) -> Self {
        self.capability_list = input;
        self
    }
    /// <p>The capabilities of the connector.</p>
    pub fn get_capability_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConnectorCapability>> {
        &self.capability_list
    }
    /// <p>The name of the VM manager.</p>
    pub fn vm_manager_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vm_manager_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the VM manager.</p>
    pub fn set_vm_manager_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vm_manager_name = input;
        self
    }
    /// <p>The name of the VM manager.</p>
    pub fn get_vm_manager_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vm_manager_name
    }
    /// <p>The VM management product.</p>
    pub fn vm_manager_type(mut self, input: crate::types::VmManagerType) -> Self {
        self.vm_manager_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The VM management product.</p>
    pub fn set_vm_manager_type(mut self, input: ::std::option::Option<crate::types::VmManagerType>) -> Self {
        self.vm_manager_type = input;
        self
    }
    /// <p>The VM management product.</p>
    pub fn get_vm_manager_type(&self) -> &::std::option::Option<crate::types::VmManagerType> {
        &self.vm_manager_type
    }
    /// <p>The ID of the VM manager.</p>
    pub fn vm_manager_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vm_manager_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VM manager.</p>
    pub fn set_vm_manager_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vm_manager_id = input;
        self
    }
    /// <p>The ID of the VM manager.</p>
    pub fn get_vm_manager_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vm_manager_id
    }
    /// <p>The IP address of the connector.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the connector.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The IP address of the connector.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>The MAC address of the connector.</p>
    pub fn mac_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mac_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MAC address of the connector.</p>
    pub fn set_mac_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mac_address = input;
        self
    }
    /// <p>The MAC address of the connector.</p>
    pub fn get_mac_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.mac_address
    }
    /// <p>The time the connector was associated.</p>
    pub fn associated_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.associated_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the connector was associated.</p>
    pub fn set_associated_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.associated_on = input;
        self
    }
    /// <p>The time the connector was associated.</p>
    pub fn get_associated_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.associated_on
    }
    /// Consumes the builder and constructs a [`Connector`](crate::types::Connector).
    pub fn build(self) -> crate::types::Connector {
        crate::types::Connector {
            connector_id: self.connector_id,
            version: self.version,
            status: self.status,
            capability_list: self.capability_list,
            vm_manager_name: self.vm_manager_name,
            vm_manager_type: self.vm_manager_type,
            vm_manager_id: self.vm_manager_id,
            ip_address: self.ip_address,
            mac_address: self.mac_address,
            associated_on: self.associated_on,
        }
    }
}
