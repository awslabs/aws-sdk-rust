// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AppReplicationStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let appreplicationstatus = unimplemented!();
/// match appreplicationstatus {
///     AppReplicationStatus::ConfigurationInvalid => { /* ... */ },
///     AppReplicationStatus::ConfigurationInProgress => { /* ... */ },
///     AppReplicationStatus::DeltaReplicated => { /* ... */ },
///     AppReplicationStatus::DeltaReplicationFailed => { /* ... */ },
///     AppReplicationStatus::DeltaReplicationInProgress => { /* ... */ },
///     AppReplicationStatus::PartiallyReplicated => { /* ... */ },
///     AppReplicationStatus::ReadyForConfiguration => { /* ... */ },
///     AppReplicationStatus::ReadyForReplication => { /* ... */ },
///     AppReplicationStatus::Replicated => { /* ... */ },
///     AppReplicationStatus::ReplicationFailed => { /* ... */ },
///     AppReplicationStatus::ReplicationInProgress => { /* ... */ },
///     AppReplicationStatus::ReplicationPending => { /* ... */ },
///     AppReplicationStatus::ReplicationStopped => { /* ... */ },
///     AppReplicationStatus::ReplicationStopping => { /* ... */ },
///     AppReplicationStatus::ReplicationStopFailed => { /* ... */ },
///     AppReplicationStatus::ValidationInProgress => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `appreplicationstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AppReplicationStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AppReplicationStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AppReplicationStatus::NewFeature` is defined.
/// Specifically, when `appreplicationstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AppReplicationStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AppReplicationStatus {
    #[allow(missing_docs)] // documentation missing in model
    ConfigurationInvalid,
    #[allow(missing_docs)] // documentation missing in model
    ConfigurationInProgress,
    #[allow(missing_docs)] // documentation missing in model
    DeltaReplicated,
    #[allow(missing_docs)] // documentation missing in model
    DeltaReplicationFailed,
    #[allow(missing_docs)] // documentation missing in model
    DeltaReplicationInProgress,
    #[allow(missing_docs)] // documentation missing in model
    PartiallyReplicated,
    #[allow(missing_docs)] // documentation missing in model
    ReadyForConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    ReadyForReplication,
    #[allow(missing_docs)] // documentation missing in model
    Replicated,
    #[allow(missing_docs)] // documentation missing in model
    ReplicationFailed,
    #[allow(missing_docs)] // documentation missing in model
    ReplicationInProgress,
    #[allow(missing_docs)] // documentation missing in model
    ReplicationPending,
    #[allow(missing_docs)] // documentation missing in model
    ReplicationStopped,
    #[allow(missing_docs)] // documentation missing in model
    ReplicationStopping,
    #[allow(missing_docs)] // documentation missing in model
    ReplicationStopFailed,
    #[allow(missing_docs)] // documentation missing in model
    ValidationInProgress,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AppReplicationStatus {
    fn from(s: &str) -> Self {
        match s {
            "CONFIGURATION_INVALID" => AppReplicationStatus::ConfigurationInvalid,
            "CONFIGURATION_IN_PROGRESS" => AppReplicationStatus::ConfigurationInProgress,
            "DELTA_REPLICATED" => AppReplicationStatus::DeltaReplicated,
            "DELTA_REPLICATION_FAILED" => AppReplicationStatus::DeltaReplicationFailed,
            "DELTA_REPLICATION_IN_PROGRESS" => AppReplicationStatus::DeltaReplicationInProgress,
            "PARTIALLY_REPLICATED" => AppReplicationStatus::PartiallyReplicated,
            "READY_FOR_CONFIGURATION" => AppReplicationStatus::ReadyForConfiguration,
            "READY_FOR_REPLICATION" => AppReplicationStatus::ReadyForReplication,
            "REPLICATED" => AppReplicationStatus::Replicated,
            "REPLICATION_FAILED" => AppReplicationStatus::ReplicationFailed,
            "REPLICATION_IN_PROGRESS" => AppReplicationStatus::ReplicationInProgress,
            "REPLICATION_PENDING" => AppReplicationStatus::ReplicationPending,
            "REPLICATION_STOPPED" => AppReplicationStatus::ReplicationStopped,
            "REPLICATION_STOPPING" => AppReplicationStatus::ReplicationStopping,
            "REPLICATION_STOP_FAILED" => AppReplicationStatus::ReplicationStopFailed,
            "VALIDATION_IN_PROGRESS" => AppReplicationStatus::ValidationInProgress,
            other => AppReplicationStatus::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for AppReplicationStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AppReplicationStatus::from(s))
    }
}
impl AppReplicationStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AppReplicationStatus::ConfigurationInvalid => "CONFIGURATION_INVALID",
            AppReplicationStatus::ConfigurationInProgress => "CONFIGURATION_IN_PROGRESS",
            AppReplicationStatus::DeltaReplicated => "DELTA_REPLICATED",
            AppReplicationStatus::DeltaReplicationFailed => "DELTA_REPLICATION_FAILED",
            AppReplicationStatus::DeltaReplicationInProgress => "DELTA_REPLICATION_IN_PROGRESS",
            AppReplicationStatus::PartiallyReplicated => "PARTIALLY_REPLICATED",
            AppReplicationStatus::ReadyForConfiguration => "READY_FOR_CONFIGURATION",
            AppReplicationStatus::ReadyForReplication => "READY_FOR_REPLICATION",
            AppReplicationStatus::Replicated => "REPLICATED",
            AppReplicationStatus::ReplicationFailed => "REPLICATION_FAILED",
            AppReplicationStatus::ReplicationInProgress => "REPLICATION_IN_PROGRESS",
            AppReplicationStatus::ReplicationPending => "REPLICATION_PENDING",
            AppReplicationStatus::ReplicationStopped => "REPLICATION_STOPPED",
            AppReplicationStatus::ReplicationStopping => "REPLICATION_STOPPING",
            AppReplicationStatus::ReplicationStopFailed => "REPLICATION_STOP_FAILED",
            AppReplicationStatus::ValidationInProgress => "VALIDATION_IN_PROGRESS",
            AppReplicationStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CONFIGURATION_INVALID",
            "CONFIGURATION_IN_PROGRESS",
            "DELTA_REPLICATED",
            "DELTA_REPLICATION_FAILED",
            "DELTA_REPLICATION_IN_PROGRESS",
            "PARTIALLY_REPLICATED",
            "READY_FOR_CONFIGURATION",
            "READY_FOR_REPLICATION",
            "REPLICATED",
            "REPLICATION_FAILED",
            "REPLICATION_IN_PROGRESS",
            "REPLICATION_PENDING",
            "REPLICATION_STOPPED",
            "REPLICATION_STOPPING",
            "REPLICATION_STOP_FAILED",
            "VALIDATION_IN_PROGRESS",
        ]
    }
}
impl AsRef<str> for AppReplicationStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
