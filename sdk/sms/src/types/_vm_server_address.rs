// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a VM server location.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VmServerAddress {
    /// <p>The ID of the VM manager.</p>
    #[doc(hidden)]
    pub vm_manager_id: std::option::Option<std::string::String>,
    /// <p>The ID of the VM.</p>
    #[doc(hidden)]
    pub vm_id: std::option::Option<std::string::String>,
}
impl VmServerAddress {
    /// <p>The ID of the VM manager.</p>
    pub fn vm_manager_id(&self) -> std::option::Option<&str> {
        self.vm_manager_id.as_deref()
    }
    /// <p>The ID of the VM.</p>
    pub fn vm_id(&self) -> std::option::Option<&str> {
        self.vm_id.as_deref()
    }
}
impl VmServerAddress {
    /// Creates a new builder-style object to manufacture [`VmServerAddress`](crate::types::VmServerAddress).
    pub fn builder() -> crate::types::builders::VmServerAddressBuilder {
        crate::types::builders::VmServerAddressBuilder::default()
    }
}

/// A builder for [`VmServerAddress`](crate::types::VmServerAddress).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VmServerAddressBuilder {
    pub(crate) vm_manager_id: std::option::Option<std::string::String>,
    pub(crate) vm_id: std::option::Option<std::string::String>,
}
impl VmServerAddressBuilder {
    /// <p>The ID of the VM manager.</p>
    pub fn vm_manager_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vm_manager_id = Some(input.into());
        self
    }
    /// <p>The ID of the VM manager.</p>
    pub fn set_vm_manager_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vm_manager_id = input;
        self
    }
    /// <p>The ID of the VM.</p>
    pub fn vm_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vm_id = Some(input.into());
        self
    }
    /// <p>The ID of the VM.</p>
    pub fn set_vm_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vm_id = input;
        self
    }
    /// Consumes the builder and constructs a [`VmServerAddress`](crate::types::VmServerAddress).
    pub fn build(self) -> crate::types::VmServerAddress {
        crate::types::VmServerAddress {
            vm_manager_id: self.vm_manager_id,
            vm_id: self.vm_id,
        }
    }
}
