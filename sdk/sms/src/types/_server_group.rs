// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Logical grouping of servers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerGroup {
    /// <p>The ID of a server group.</p>
    pub server_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of a server group.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The servers that belong to a server group.</p>
    pub server_list: ::std::option::Option<::std::vec::Vec<crate::types::Server>>,
}
impl ServerGroup {
    /// <p>The ID of a server group.</p>
    pub fn server_group_id(&self) -> ::std::option::Option<&str> {
        self.server_group_id.as_deref()
    }
    /// <p>The name of a server group.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The servers that belong to a server group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.server_list.is_none()`.
    pub fn server_list(&self) -> &[crate::types::Server] {
        self.server_list.as_deref().unwrap_or_default()
    }
}
impl ServerGroup {
    /// Creates a new builder-style object to manufacture [`ServerGroup`](crate::types::ServerGroup).
    pub fn builder() -> crate::types::builders::ServerGroupBuilder {
        crate::types::builders::ServerGroupBuilder::default()
    }
}

/// A builder for [`ServerGroup`](crate::types::ServerGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServerGroupBuilder {
    pub(crate) server_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) server_list: ::std::option::Option<::std::vec::Vec<crate::types::Server>>,
}
impl ServerGroupBuilder {
    /// <p>The ID of a server group.</p>
    pub fn server_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a server group.</p>
    pub fn set_server_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_group_id = input;
        self
    }
    /// <p>The ID of a server group.</p>
    pub fn get_server_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_group_id
    }
    /// <p>The name of a server group.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a server group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a server group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `server_list`.
    ///
    /// To override the contents of this collection use [`set_server_list`](Self::set_server_list).
    ///
    /// <p>The servers that belong to a server group.</p>
    pub fn server_list(mut self, input: crate::types::Server) -> Self {
        let mut v = self.server_list.unwrap_or_default();
        v.push(input);
        self.server_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The servers that belong to a server group.</p>
    pub fn set_server_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Server>>) -> Self {
        self.server_list = input;
        self
    }
    /// <p>The servers that belong to a server group.</p>
    pub fn get_server_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Server>> {
        &self.server_list
    }
    /// Consumes the builder and constructs a [`ServerGroup`](crate::types::ServerGroup).
    pub fn build(self) -> crate::types::ServerGroup {
        crate::types::ServerGroup {
            server_group_id: self.server_group_id,
            name: self.name,
            server_list: self.server_list,
        }
    }
}
