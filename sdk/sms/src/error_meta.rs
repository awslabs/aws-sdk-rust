// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The user has the required permissions, so the request would have succeeded, but a dry run was performed.</p>
    DryRunOperationException(crate::error::DryRunOperationException),
    /// <p>An internal error occurred.</p>
    InternalError(crate::error::InternalError),
    /// <p>A specified parameter is not valid.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>A required parameter is missing.</p>
    MissingRequiredParameterException(crate::error::MissingRequiredParameterException),
    /// <p>There are no connectors available.</p>
    NoConnectorsAvailableException(crate::error::NoConnectorsAvailableException),
    /// <p>This operation is not allowed.</p>
    OperationNotPermittedException(crate::error::OperationNotPermittedException),
    /// <p>The specified replication job already exists.</p>
    ReplicationJobAlreadyExistsException(crate::error::ReplicationJobAlreadyExistsException),
    /// <p>The specified replication job does not exist.</p>
    ReplicationJobNotFoundException(crate::error::ReplicationJobNotFoundException),
    /// <p>You have exceeded the number of on-demand replication runs you can request in a 24-hour period.</p>
    ReplicationRunLimitExceededException(crate::error::ReplicationRunLimitExceededException),
    /// <p>The specified server cannot be replicated.</p>
    ServerCannotBeReplicatedException(crate::error::ServerCannotBeReplicatedException),
    /// <p>The service is temporarily unavailable.</p>
    TemporarilyUnavailableException(crate::error::TemporarilyUnavailableException),
    /// <p>You lack permissions needed to perform this operation. Check your IAM policies, and ensure that you are using the correct access keys.</p>
    UnauthorizedOperationException(crate::error::UnauthorizedOperationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::DryRunOperationException(inner) => inner.fmt(f),
            Error::InternalError(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::MissingRequiredParameterException(inner) => inner.fmt(f),
            Error::NoConnectorsAvailableException(inner) => inner.fmt(f),
            Error::OperationNotPermittedException(inner) => inner.fmt(f),
            Error::ReplicationJobAlreadyExistsException(inner) => inner.fmt(f),
            Error::ReplicationJobNotFoundException(inner) => inner.fmt(f),
            Error::ReplicationRunLimitExceededException(inner) => inner.fmt(f),
            Error::ServerCannotBeReplicatedException(inner) => inner.fmt(f),
            Error::TemporarilyUnavailableException(inner) => inner.fmt(f),
            Error::UnauthorizedOperationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAppError> for Error {
    fn from(err: crate::error::CreateAppError) -> Self {
        match err {
            crate::error::CreateAppError::InternalError(inner) => Error::InternalError(inner),
            crate::error::CreateAppError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateAppError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::CreateAppError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::CreateAppError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::CreateAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateReplicationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateReplicationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateReplicationJobError> for Error {
    fn from(err: crate::error::CreateReplicationJobError) -> Self {
        match err {
            crate::error::CreateReplicationJobError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::CreateReplicationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateReplicationJobError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::CreateReplicationJobError::NoConnectorsAvailableException(inner) => {
                Error::NoConnectorsAvailableException(inner)
            }
            crate::error::CreateReplicationJobError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::CreateReplicationJobError::ReplicationJobAlreadyExistsException(
                inner,
            ) => Error::ReplicationJobAlreadyExistsException(inner),
            crate::error::CreateReplicationJobError::ServerCannotBeReplicatedException(inner) => {
                Error::ServerCannotBeReplicatedException(inner)
            }
            crate::error::CreateReplicationJobError::TemporarilyUnavailableException(inner) => {
                Error::TemporarilyUnavailableException(inner)
            }
            crate::error::CreateReplicationJobError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::CreateReplicationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppError> for Error {
    fn from(err: crate::error::DeleteAppError) -> Self {
        match err {
            crate::error::DeleteAppError::InternalError(inner) => Error::InternalError(inner),
            crate::error::DeleteAppError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteAppError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::DeleteAppError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::DeleteAppError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::DeleteAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppLaunchConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAppLaunchConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppLaunchConfigurationError> for Error {
    fn from(err: crate::error::DeleteAppLaunchConfigurationError) -> Self {
        match err {
            crate::error::DeleteAppLaunchConfigurationError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::DeleteAppLaunchConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteAppLaunchConfigurationError::MissingRequiredParameterException(
                inner,
            ) => Error::MissingRequiredParameterException(inner),
            crate::error::DeleteAppLaunchConfigurationError::OperationNotPermittedException(
                inner,
            ) => Error::OperationNotPermittedException(inner),
            crate::error::DeleteAppLaunchConfigurationError::UnauthorizedOperationException(
                inner,
            ) => Error::UnauthorizedOperationException(inner),
            crate::error::DeleteAppLaunchConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteAppReplicationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteAppReplicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppReplicationConfigurationError> for Error {
    fn from(err: crate::error::DeleteAppReplicationConfigurationError) -> Self {
        match err {
            crate::error::DeleteAppReplicationConfigurationError::InternalError(inner) => Error::InternalError(inner),
            crate::error::DeleteAppReplicationConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DeleteAppReplicationConfigurationError::MissingRequiredParameterException(inner) => Error::MissingRequiredParameterException(inner),
            crate::error::DeleteAppReplicationConfigurationError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::DeleteAppReplicationConfigurationError::UnauthorizedOperationException(inner) => Error::UnauthorizedOperationException(inner),
            crate::error::DeleteAppReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteAppValidationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteAppValidationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppValidationConfigurationError> for Error {
    fn from(err: crate::error::DeleteAppValidationConfigurationError) -> Self {
        match err {
            crate::error::DeleteAppValidationConfigurationError::InternalError(inner) => Error::InternalError(inner),
            crate::error::DeleteAppValidationConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DeleteAppValidationConfigurationError::MissingRequiredParameterException(inner) => Error::MissingRequiredParameterException(inner),
            crate::error::DeleteAppValidationConfigurationError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::DeleteAppValidationConfigurationError::UnauthorizedOperationException(inner) => Error::UnauthorizedOperationException(inner),
            crate::error::DeleteAppValidationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteReplicationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteReplicationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteReplicationJobError> for Error {
    fn from(err: crate::error::DeleteReplicationJobError) -> Self {
        match err {
            crate::error::DeleteReplicationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteReplicationJobError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::DeleteReplicationJobError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::DeleteReplicationJobError::ReplicationJobNotFoundException(inner) => {
                Error::ReplicationJobNotFoundException(inner)
            }
            crate::error::DeleteReplicationJobError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::DeleteReplicationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteServerCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteServerCatalogError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteServerCatalogError> for Error {
    fn from(err: crate::error::DeleteServerCatalogError) -> Self {
        match err {
            crate::error::DeleteServerCatalogError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteServerCatalogError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::DeleteServerCatalogError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::DeleteServerCatalogError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::DeleteServerCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateConnectorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateConnectorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateConnectorError> for Error {
    fn from(err: crate::error::DisassociateConnectorError) -> Self {
        match err {
            crate::error::DisassociateConnectorError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DisassociateConnectorError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::DisassociateConnectorError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::DisassociateConnectorError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::DisassociateConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GenerateChangeSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GenerateChangeSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateChangeSetError> for Error {
    fn from(err: crate::error::GenerateChangeSetError) -> Self {
        match err {
            crate::error::GenerateChangeSetError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::GenerateChangeSetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GenerateChangeSetError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::GenerateChangeSetError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GenerateChangeSetError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::GenerateChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GenerateTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GenerateTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateTemplateError> for Error {
    fn from(err: crate::error::GenerateTemplateError) -> Self {
        match err {
            crate::error::GenerateTemplateError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::GenerateTemplateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GenerateTemplateError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::GenerateTemplateError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GenerateTemplateError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::GenerateTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppError> for Error {
    fn from(err: crate::error::GetAppError) -> Self {
        match err {
            crate::error::GetAppError::InternalError(inner) => Error::InternalError(inner),
            crate::error::GetAppError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetAppError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::GetAppError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetAppError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::GetAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppLaunchConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAppLaunchConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppLaunchConfigurationError> for Error {
    fn from(err: crate::error::GetAppLaunchConfigurationError) -> Self {
        match err {
            crate::error::GetAppLaunchConfigurationError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::GetAppLaunchConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetAppLaunchConfigurationError::MissingRequiredParameterException(
                inner,
            ) => Error::MissingRequiredParameterException(inner),
            crate::error::GetAppLaunchConfigurationError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetAppLaunchConfigurationError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::GetAppLaunchConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetAppReplicationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAppReplicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppReplicationConfigurationError> for Error {
    fn from(err: crate::error::GetAppReplicationConfigurationError) -> Self {
        match err {
            crate::error::GetAppReplicationConfigurationError::InternalError(inner) => Error::InternalError(inner),
            crate::error::GetAppReplicationConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::GetAppReplicationConfigurationError::MissingRequiredParameterException(inner) => Error::MissingRequiredParameterException(inner),
            crate::error::GetAppReplicationConfigurationError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::GetAppReplicationConfigurationError::UnauthorizedOperationException(inner) => Error::UnauthorizedOperationException(inner),
            crate::error::GetAppReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppValidationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAppValidationConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppValidationConfigurationError> for Error {
    fn from(err: crate::error::GetAppValidationConfigurationError) -> Self {
        match err {
            crate::error::GetAppValidationConfigurationError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::GetAppValidationConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetAppValidationConfigurationError::MissingRequiredParameterException(
                inner,
            ) => Error::MissingRequiredParameterException(inner),
            crate::error::GetAppValidationConfigurationError::OperationNotPermittedException(
                inner,
            ) => Error::OperationNotPermittedException(inner),
            crate::error::GetAppValidationConfigurationError::UnauthorizedOperationException(
                inner,
            ) => Error::UnauthorizedOperationException(inner),
            crate::error::GetAppValidationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppValidationOutputError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAppValidationOutputError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppValidationOutputError> for Error {
    fn from(err: crate::error::GetAppValidationOutputError) -> Self {
        match err {
            crate::error::GetAppValidationOutputError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::GetAppValidationOutputError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetAppValidationOutputError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::GetAppValidationOutputError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetAppValidationOutputError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::GetAppValidationOutputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConnectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetConnectorsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConnectorsError> for Error {
    fn from(err: crate::error::GetConnectorsError) -> Self {
        match err {
            crate::error::GetConnectorsError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::GetConnectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetReplicationJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetReplicationJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetReplicationJobsError> for Error {
    fn from(err: crate::error::GetReplicationJobsError) -> Self {
        match err {
            crate::error::GetReplicationJobsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetReplicationJobsError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::GetReplicationJobsError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::GetReplicationJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetReplicationRunsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetReplicationRunsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetReplicationRunsError> for Error {
    fn from(err: crate::error::GetReplicationRunsError) -> Self {
        match err {
            crate::error::GetReplicationRunsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetReplicationRunsError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::GetReplicationRunsError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::GetReplicationRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetServersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServersError> for Error {
    fn from(err: crate::error::GetServersError) -> Self {
        match err {
            crate::error::GetServersError::InternalError(inner) => Error::InternalError(inner),
            crate::error::GetServersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetServersError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::GetServersError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::GetServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportAppCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportAppCatalogError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportAppCatalogError> for Error {
    fn from(err: crate::error::ImportAppCatalogError) -> Self {
        match err {
            crate::error::ImportAppCatalogError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::ImportAppCatalogError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ImportAppCatalogError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::ImportAppCatalogError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ImportAppCatalogError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::ImportAppCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportServerCatalogError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportServerCatalogError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportServerCatalogError> for Error {
    fn from(err: crate::error::ImportServerCatalogError) -> Self {
        match err {
            crate::error::ImportServerCatalogError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ImportServerCatalogError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::ImportServerCatalogError::NoConnectorsAvailableException(inner) => {
                Error::NoConnectorsAvailableException(inner)
            }
            crate::error::ImportServerCatalogError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ImportServerCatalogError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::ImportServerCatalogError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::LaunchAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::LaunchAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::LaunchAppError> for Error {
    fn from(err: crate::error::LaunchAppError) -> Self {
        match err {
            crate::error::LaunchAppError::InternalError(inner) => Error::InternalError(inner),
            crate::error::LaunchAppError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::LaunchAppError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::LaunchAppError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::LaunchAppError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::LaunchAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAppsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppsError> for Error {
    fn from(err: crate::error::ListAppsError) -> Self {
        match err {
            crate::error::ListAppsError::InternalError(inner) => Error::InternalError(inner),
            crate::error::ListAppsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListAppsError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::ListAppsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ListAppsError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::ListAppsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::NotifyAppValidationOutputError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::NotifyAppValidationOutputError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::NotifyAppValidationOutputError> for Error {
    fn from(err: crate::error::NotifyAppValidationOutputError) -> Self {
        match err {
            crate::error::NotifyAppValidationOutputError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::NotifyAppValidationOutputError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::NotifyAppValidationOutputError::MissingRequiredParameterException(
                inner,
            ) => Error::MissingRequiredParameterException(inner),
            crate::error::NotifyAppValidationOutputError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::NotifyAppValidationOutputError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::NotifyAppValidationOutputError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAppLaunchConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutAppLaunchConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAppLaunchConfigurationError> for Error {
    fn from(err: crate::error::PutAppLaunchConfigurationError) -> Self {
        match err {
            crate::error::PutAppLaunchConfigurationError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::PutAppLaunchConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutAppLaunchConfigurationError::MissingRequiredParameterException(
                inner,
            ) => Error::MissingRequiredParameterException(inner),
            crate::error::PutAppLaunchConfigurationError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::PutAppLaunchConfigurationError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::PutAppLaunchConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::PutAppReplicationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutAppReplicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAppReplicationConfigurationError> for Error {
    fn from(err: crate::error::PutAppReplicationConfigurationError) -> Self {
        match err {
            crate::error::PutAppReplicationConfigurationError::InternalError(inner) => Error::InternalError(inner),
            crate::error::PutAppReplicationConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::PutAppReplicationConfigurationError::MissingRequiredParameterException(inner) => Error::MissingRequiredParameterException(inner),
            crate::error::PutAppReplicationConfigurationError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::PutAppReplicationConfigurationError::UnauthorizedOperationException(inner) => Error::UnauthorizedOperationException(inner),
            crate::error::PutAppReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAppValidationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutAppValidationConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAppValidationConfigurationError> for Error {
    fn from(err: crate::error::PutAppValidationConfigurationError) -> Self {
        match err {
            crate::error::PutAppValidationConfigurationError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::PutAppValidationConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutAppValidationConfigurationError::MissingRequiredParameterException(
                inner,
            ) => Error::MissingRequiredParameterException(inner),
            crate::error::PutAppValidationConfigurationError::OperationNotPermittedException(
                inner,
            ) => Error::OperationNotPermittedException(inner),
            crate::error::PutAppValidationConfigurationError::UnauthorizedOperationException(
                inner,
            ) => Error::UnauthorizedOperationException(inner),
            crate::error::PutAppValidationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartAppReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartAppReplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartAppReplicationError> for Error {
    fn from(err: crate::error::StartAppReplicationError) -> Self {
        match err {
            crate::error::StartAppReplicationError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::StartAppReplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartAppReplicationError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::StartAppReplicationError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::StartAppReplicationError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::StartAppReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartOnDemandAppReplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartOnDemandAppReplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartOnDemandAppReplicationError> for Error {
    fn from(err: crate::error::StartOnDemandAppReplicationError) -> Self {
        match err {
            crate::error::StartOnDemandAppReplicationError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::StartOnDemandAppReplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartOnDemandAppReplicationError::MissingRequiredParameterException(
                inner,
            ) => Error::MissingRequiredParameterException(inner),
            crate::error::StartOnDemandAppReplicationError::OperationNotPermittedException(
                inner,
            ) => Error::OperationNotPermittedException(inner),
            crate::error::StartOnDemandAppReplicationError::UnauthorizedOperationException(
                inner,
            ) => Error::UnauthorizedOperationException(inner),
            crate::error::StartOnDemandAppReplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartOnDemandReplicationRunError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartOnDemandReplicationRunError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartOnDemandReplicationRunError> for Error {
    fn from(err: crate::error::StartOnDemandReplicationRunError) -> Self {
        match err {
            crate::error::StartOnDemandReplicationRunError::DryRunOperationException(inner) => Error::DryRunOperationException(inner),
            crate::error::StartOnDemandReplicationRunError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::StartOnDemandReplicationRunError::MissingRequiredParameterException(inner) => Error::MissingRequiredParameterException(inner),
            crate::error::StartOnDemandReplicationRunError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::StartOnDemandReplicationRunError::ReplicationRunLimitExceededException(inner) => Error::ReplicationRunLimitExceededException(inner),
            crate::error::StartOnDemandReplicationRunError::UnauthorizedOperationException(inner) => Error::UnauthorizedOperationException(inner),
            crate::error::StartOnDemandReplicationRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopAppReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopAppReplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopAppReplicationError> for Error {
    fn from(err: crate::error::StopAppReplicationError) -> Self {
        match err {
            crate::error::StopAppReplicationError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::StopAppReplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StopAppReplicationError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::StopAppReplicationError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::StopAppReplicationError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::StopAppReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TerminateAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TerminateAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TerminateAppError> for Error {
    fn from(err: crate::error::TerminateAppError) -> Self {
        match err {
            crate::error::TerminateAppError::InternalError(inner) => Error::InternalError(inner),
            crate::error::TerminateAppError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::TerminateAppError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::TerminateAppError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::TerminateAppError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::TerminateAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAppError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateAppError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAppError> for Error {
    fn from(err: crate::error::UpdateAppError) -> Self {
        match err {
            crate::error::UpdateAppError::InternalError(inner) => Error::InternalError(inner),
            crate::error::UpdateAppError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateAppError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::UpdateAppError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::UpdateAppError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::UpdateAppError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateReplicationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateReplicationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateReplicationJobError> for Error {
    fn from(err: crate::error::UpdateReplicationJobError) -> Self {
        match err {
            crate::error::UpdateReplicationJobError::InternalError(inner) => {
                Error::InternalError(inner)
            }
            crate::error::UpdateReplicationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateReplicationJobError::MissingRequiredParameterException(inner) => {
                Error::MissingRequiredParameterException(inner)
            }
            crate::error::UpdateReplicationJobError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::UpdateReplicationJobError::ReplicationJobNotFoundException(inner) => {
                Error::ReplicationJobNotFoundException(inner)
            }
            crate::error::UpdateReplicationJobError::ServerCannotBeReplicatedException(inner) => {
                Error::ServerCannotBeReplicatedException(inner)
            }
            crate::error::UpdateReplicationJobError::TemporarilyUnavailableException(inner) => {
                Error::TemporarilyUnavailableException(inner)
            }
            crate::error::UpdateReplicationJobError::UnauthorizedOperationException(inner) => {
                Error::UnauthorizedOperationException(inner)
            }
            crate::error::UpdateReplicationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::DryRunOperationException(e) => e.request_id(),
            Self::InternalError(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::MissingRequiredParameterException(e) => e.request_id(),
            Self::NoConnectorsAvailableException(e) => e.request_id(),
            Self::OperationNotPermittedException(e) => e.request_id(),
            Self::ReplicationJobAlreadyExistsException(e) => e.request_id(),
            Self::ReplicationJobNotFoundException(e) => e.request_id(),
            Self::ReplicationRunLimitExceededException(e) => e.request_id(),
            Self::ServerCannotBeReplicatedException(e) => e.request_id(),
            Self::TemporarilyUnavailableException(e) => e.request_id(),
            Self::UnauthorizedOperationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
