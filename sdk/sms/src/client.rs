// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Server Migration Service
///
/// Client for invoking operations on AWS Server Migration Service. Each operation on AWS Server Migration Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_sms::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_sms::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_sms::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateApp`](crate::client::fluent_builders::CreateApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateApp::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateApp::set_name): <p>The name of the new application.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateApp::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateApp::set_description): <p>The description of the new application</p>
    ///   - [`role_name(impl Into<String>)`](crate::client::fluent_builders::CreateApp::role_name) / [`set_role_name(Option<String>)`](crate::client::fluent_builders::CreateApp::set_role_name): <p>The name of the service role in the customer's account to be used by Server Migration Service.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateApp::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateApp::set_client_token): <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of application creation.</p>
    ///   - [`server_groups(Vec<ServerGroup>)`](crate::client::fluent_builders::CreateApp::server_groups) / [`set_server_groups(Option<Vec<ServerGroup>>)`](crate::client::fluent_builders::CreateApp::set_server_groups): <p>The server groups to include in the application.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateApp::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateApp::set_tags): <p>The tags to be associated with the application.</p>
    /// - On success, responds with [`CreateAppOutput`](crate::output::CreateAppOutput) with field(s):
    ///   - [`app_summary(Option<AppSummary>)`](crate::output::CreateAppOutput::app_summary): <p>A summary description of the application.</p>
    ///   - [`server_groups(Option<Vec<ServerGroup>>)`](crate::output::CreateAppOutput::server_groups): <p>The server groups included in the application.</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::CreateAppOutput::tags): <p>The tags associated with the application.</p>
    /// - On failure, responds with [`SdkError<CreateAppError>`](crate::error::CreateAppError)
    pub fn create_app(&self) -> crate::client::fluent_builders::CreateApp {
        crate::client::fluent_builders::CreateApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateReplicationJob`](crate::client::fluent_builders::CreateReplicationJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`server_id(impl Into<String>)`](crate::client::fluent_builders::CreateReplicationJob::server_id) / [`set_server_id(Option<String>)`](crate::client::fluent_builders::CreateReplicationJob::set_server_id): <p>The ID of the server.</p>
    ///   - [`seed_replication_time(DateTime)`](crate::client::fluent_builders::CreateReplicationJob::seed_replication_time) / [`set_seed_replication_time(Option<DateTime>)`](crate::client::fluent_builders::CreateReplicationJob::set_seed_replication_time): <p>The seed replication time.</p>
    ///   - [`frequency(i32)`](crate::client::fluent_builders::CreateReplicationJob::frequency) / [`set_frequency(Option<i32>)`](crate::client::fluent_builders::CreateReplicationJob::set_frequency): <p>The time between consecutive replication runs, in hours.</p>
    ///   - [`run_once(bool)`](crate::client::fluent_builders::CreateReplicationJob::run_once) / [`set_run_once(Option<bool>)`](crate::client::fluent_builders::CreateReplicationJob::set_run_once): <p>Indicates whether to run the replication job one time.</p>
    ///   - [`license_type(LicenseType)`](crate::client::fluent_builders::CreateReplicationJob::license_type) / [`set_license_type(Option<LicenseType>)`](crate::client::fluent_builders::CreateReplicationJob::set_license_type): <p>The license type to be used for the AMI created by a successful replication run.</p>
    ///   - [`role_name(impl Into<String>)`](crate::client::fluent_builders::CreateReplicationJob::role_name) / [`set_role_name(Option<String>)`](crate::client::fluent_builders::CreateReplicationJob::set_role_name): <p>The name of the IAM role to be used by the Server Migration Service.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateReplicationJob::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateReplicationJob::set_description): <p>The description of the replication job.</p>
    ///   - [`number_of_recent_amis_to_keep(i32)`](crate::client::fluent_builders::CreateReplicationJob::number_of_recent_amis_to_keep) / [`set_number_of_recent_amis_to_keep(Option<i32>)`](crate::client::fluent_builders::CreateReplicationJob::set_number_of_recent_amis_to_keep): <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    ///   - [`encrypted(bool)`](crate::client::fluent_builders::CreateReplicationJob::encrypted) / [`set_encrypted(Option<bool>)`](crate::client::fluent_builders::CreateReplicationJob::set_encrypted): <p>Indicates whether the replication job produces encrypted AMIs.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::CreateReplicationJob::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::CreateReplicationJob::set_kms_key_id): <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>  <ul>   <li> <p>KMS key ID</p> </li>   <li> <p>KMS key alias</p> </li>   <li> <p>ARN referring to the KMS key ID</p> </li>   <li> <p>ARN referring to the KMS key alias</p> </li>  </ul>  <p> If encrypted is <i>true</i> but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used. </p>
    /// - On success, responds with [`CreateReplicationJobOutput`](crate::output::CreateReplicationJobOutput) with field(s):
    ///   - [`replication_job_id(Option<String>)`](crate::output::CreateReplicationJobOutput::replication_job_id): <p>The unique identifier of the replication job.</p>
    /// - On failure, responds with [`SdkError<CreateReplicationJobError>`](crate::error::CreateReplicationJobError)
    pub fn create_replication_job(&self) -> crate::client::fluent_builders::CreateReplicationJob {
        crate::client::fluent_builders::CreateReplicationJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApp`](crate::client::fluent_builders::DeleteApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApp::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::DeleteApp::set_app_id): <p>The ID of the application.</p>
    ///   - [`force_stop_app_replication(bool)`](crate::client::fluent_builders::DeleteApp::force_stop_app_replication) / [`set_force_stop_app_replication(Option<bool>)`](crate::client::fluent_builders::DeleteApp::set_force_stop_app_replication): <p>Indicates whether to stop all replication jobs corresponding to the servers in the application while deleting the application.</p>
    ///   - [`force_terminate_app(bool)`](crate::client::fluent_builders::DeleteApp::force_terminate_app) / [`set_force_terminate_app(Option<bool>)`](crate::client::fluent_builders::DeleteApp::set_force_terminate_app): <p>Indicates whether to terminate the stack corresponding to the application while deleting the application.</p>
    /// - On success, responds with [`DeleteAppOutput`](crate::output::DeleteAppOutput)

    /// - On failure, responds with [`SdkError<DeleteAppError>`](crate::error::DeleteAppError)
    pub fn delete_app(&self) -> crate::client::fluent_builders::DeleteApp {
        crate::client::fluent_builders::DeleteApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAppLaunchConfiguration`](crate::client::fluent_builders::DeleteAppLaunchConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAppLaunchConfiguration::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::DeleteAppLaunchConfiguration::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`DeleteAppLaunchConfigurationOutput`](crate::output::DeleteAppLaunchConfigurationOutput)

    /// - On failure, responds with [`SdkError<DeleteAppLaunchConfigurationError>`](crate::error::DeleteAppLaunchConfigurationError)
    pub fn delete_app_launch_configuration(
        &self,
    ) -> crate::client::fluent_builders::DeleteAppLaunchConfiguration {
        crate::client::fluent_builders::DeleteAppLaunchConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAppReplicationConfiguration`](crate::client::fluent_builders::DeleteAppReplicationConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAppReplicationConfiguration::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::DeleteAppReplicationConfiguration::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`DeleteAppReplicationConfigurationOutput`](crate::output::DeleteAppReplicationConfigurationOutput)

    /// - On failure, responds with [`SdkError<DeleteAppReplicationConfigurationError>`](crate::error::DeleteAppReplicationConfigurationError)
    pub fn delete_app_replication_configuration(
        &self,
    ) -> crate::client::fluent_builders::DeleteAppReplicationConfiguration {
        crate::client::fluent_builders::DeleteAppReplicationConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteAppValidationConfiguration`](crate::client::fluent_builders::DeleteAppValidationConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAppValidationConfiguration::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::DeleteAppValidationConfiguration::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`DeleteAppValidationConfigurationOutput`](crate::output::DeleteAppValidationConfigurationOutput)

    /// - On failure, responds with [`SdkError<DeleteAppValidationConfigurationError>`](crate::error::DeleteAppValidationConfigurationError)
    pub fn delete_app_validation_configuration(
        &self,
    ) -> crate::client::fluent_builders::DeleteAppValidationConfiguration {
        crate::client::fluent_builders::DeleteAppValidationConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteReplicationJob`](crate::client::fluent_builders::DeleteReplicationJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_job_id(impl Into<String>)`](crate::client::fluent_builders::DeleteReplicationJob::replication_job_id) / [`set_replication_job_id(Option<String>)`](crate::client::fluent_builders::DeleteReplicationJob::set_replication_job_id): <p>The ID of the replication job.</p>
    /// - On success, responds with [`DeleteReplicationJobOutput`](crate::output::DeleteReplicationJobOutput)

    /// - On failure, responds with [`SdkError<DeleteReplicationJobError>`](crate::error::DeleteReplicationJobError)
    pub fn delete_replication_job(&self) -> crate::client::fluent_builders::DeleteReplicationJob {
        crate::client::fluent_builders::DeleteReplicationJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteServerCatalog`](crate::client::fluent_builders::DeleteServerCatalog) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DeleteServerCatalog::send) it.

    /// - On success, responds with [`DeleteServerCatalogOutput`](crate::output::DeleteServerCatalogOutput)

    /// - On failure, responds with [`SdkError<DeleteServerCatalogError>`](crate::error::DeleteServerCatalogError)
    pub fn delete_server_catalog(&self) -> crate::client::fluent_builders::DeleteServerCatalog {
        crate::client::fluent_builders::DeleteServerCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateConnector`](crate::client::fluent_builders::DisassociateConnector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_id(impl Into<String>)`](crate::client::fluent_builders::DisassociateConnector::connector_id) / [`set_connector_id(Option<String>)`](crate::client::fluent_builders::DisassociateConnector::set_connector_id): <p>The ID of the connector.</p>
    /// - On success, responds with [`DisassociateConnectorOutput`](crate::output::DisassociateConnectorOutput)

    /// - On failure, responds with [`SdkError<DisassociateConnectorError>`](crate::error::DisassociateConnectorError)
    pub fn disassociate_connector(&self) -> crate::client::fluent_builders::DisassociateConnector {
        crate::client::fluent_builders::DisassociateConnector::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GenerateChangeSet`](crate::client::fluent_builders::GenerateChangeSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GenerateChangeSet::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GenerateChangeSet::set_app_id): <p>The ID of the application associated with the change set.</p>
    ///   - [`changeset_format(OutputFormat)`](crate::client::fluent_builders::GenerateChangeSet::changeset_format) / [`set_changeset_format(Option<OutputFormat>)`](crate::client::fluent_builders::GenerateChangeSet::set_changeset_format): <p>The format for the change set.</p>
    /// - On success, responds with [`GenerateChangeSetOutput`](crate::output::GenerateChangeSetOutput) with field(s):
    ///   - [`s3_location(Option<S3Location>)`](crate::output::GenerateChangeSetOutput::s3_location): <p>The location of the Amazon S3 object.</p>
    /// - On failure, responds with [`SdkError<GenerateChangeSetError>`](crate::error::GenerateChangeSetError)
    pub fn generate_change_set(&self) -> crate::client::fluent_builders::GenerateChangeSet {
        crate::client::fluent_builders::GenerateChangeSet::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GenerateTemplate`](crate::client::fluent_builders::GenerateTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GenerateTemplate::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GenerateTemplate::set_app_id): <p>The ID of the application associated with the CloudFormation template.</p>
    ///   - [`template_format(OutputFormat)`](crate::client::fluent_builders::GenerateTemplate::template_format) / [`set_template_format(Option<OutputFormat>)`](crate::client::fluent_builders::GenerateTemplate::set_template_format): <p>The format for generating the CloudFormation template.</p>
    /// - On success, responds with [`GenerateTemplateOutput`](crate::output::GenerateTemplateOutput) with field(s):
    ///   - [`s3_location(Option<S3Location>)`](crate::output::GenerateTemplateOutput::s3_location): <p>The location of the Amazon S3 object.</p>
    /// - On failure, responds with [`SdkError<GenerateTemplateError>`](crate::error::GenerateTemplateError)
    pub fn generate_template(&self) -> crate::client::fluent_builders::GenerateTemplate {
        crate::client::fluent_builders::GenerateTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetApp`](crate::client::fluent_builders::GetApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetApp::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetApp::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`GetAppOutput`](crate::output::GetAppOutput) with field(s):
    ///   - [`app_summary(Option<AppSummary>)`](crate::output::GetAppOutput::app_summary): <p>Information about the application.</p>
    ///   - [`server_groups(Option<Vec<ServerGroup>>)`](crate::output::GetAppOutput::server_groups): <p>The server groups that belong to the application.</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::GetAppOutput::tags): <p>The tags associated with the application.</p>
    /// - On failure, responds with [`SdkError<GetAppError>`](crate::error::GetAppError)
    pub fn get_app(&self) -> crate::client::fluent_builders::GetApp {
        crate::client::fluent_builders::GetApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAppLaunchConfiguration`](crate::client::fluent_builders::GetAppLaunchConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetAppLaunchConfiguration::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetAppLaunchConfiguration::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`GetAppLaunchConfigurationOutput`](crate::output::GetAppLaunchConfigurationOutput) with field(s):
    ///   - [`app_id(Option<String>)`](crate::output::GetAppLaunchConfigurationOutput::app_id): <p>The ID of the application.</p>
    ///   - [`role_name(Option<String>)`](crate::output::GetAppLaunchConfigurationOutput::role_name): <p>The name of the service role in the customer's account that CloudFormation uses to launch the application.</p>
    ///   - [`auto_launch(Option<bool>)`](crate::output::GetAppLaunchConfigurationOutput::auto_launch): <p>Indicates whether the application is configured to launch automatically after replication is complete.</p>
    ///   - [`server_group_launch_configurations(Option<Vec<ServerGroupLaunchConfiguration>>)`](crate::output::GetAppLaunchConfigurationOutput::server_group_launch_configurations): <p>The launch configurations for server groups in this application.</p>
    /// - On failure, responds with [`SdkError<GetAppLaunchConfigurationError>`](crate::error::GetAppLaunchConfigurationError)
    pub fn get_app_launch_configuration(
        &self,
    ) -> crate::client::fluent_builders::GetAppLaunchConfiguration {
        crate::client::fluent_builders::GetAppLaunchConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAppReplicationConfiguration`](crate::client::fluent_builders::GetAppReplicationConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetAppReplicationConfiguration::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetAppReplicationConfiguration::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`GetAppReplicationConfigurationOutput`](crate::output::GetAppReplicationConfigurationOutput) with field(s):
    ///   - [`server_group_replication_configurations(Option<Vec<ServerGroupReplicationConfiguration>>)`](crate::output::GetAppReplicationConfigurationOutput::server_group_replication_configurations): <p>The replication configurations associated with server groups in this application.</p>
    /// - On failure, responds with [`SdkError<GetAppReplicationConfigurationError>`](crate::error::GetAppReplicationConfigurationError)
    pub fn get_app_replication_configuration(
        &self,
    ) -> crate::client::fluent_builders::GetAppReplicationConfiguration {
        crate::client::fluent_builders::GetAppReplicationConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAppValidationConfiguration`](crate::client::fluent_builders::GetAppValidationConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetAppValidationConfiguration::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetAppValidationConfiguration::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`GetAppValidationConfigurationOutput`](crate::output::GetAppValidationConfigurationOutput) with field(s):
    ///   - [`app_validation_configurations(Option<Vec<AppValidationConfiguration>>)`](crate::output::GetAppValidationConfigurationOutput::app_validation_configurations): <p>The configuration for application validation.</p>
    ///   - [`server_group_validation_configurations(Option<Vec<ServerGroupValidationConfiguration>>)`](crate::output::GetAppValidationConfigurationOutput::server_group_validation_configurations): <p>The configuration for instance validation.</p>
    /// - On failure, responds with [`SdkError<GetAppValidationConfigurationError>`](crate::error::GetAppValidationConfigurationError)
    pub fn get_app_validation_configuration(
        &self,
    ) -> crate::client::fluent_builders::GetAppValidationConfiguration {
        crate::client::fluent_builders::GetAppValidationConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAppValidationOutput`](crate::client::fluent_builders::GetAppValidationOutput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::GetAppValidationOutput::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::GetAppValidationOutput::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`GetAppValidationOutputOutput`](crate::output::GetAppValidationOutputOutput) with field(s):
    ///   - [`validation_output_list(Option<Vec<ValidationOutput>>)`](crate::output::GetAppValidationOutputOutput::validation_output_list): <p>The validation output.</p>
    /// - On failure, responds with [`SdkError<GetAppValidationOutputError>`](crate::error::GetAppValidationOutputError)
    pub fn get_app_validation_output(
        &self,
    ) -> crate::client::fluent_builders::GetAppValidationOutput {
        crate::client::fluent_builders::GetAppValidationOutput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetConnectors`](crate::client::fluent_builders::GetConnectors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetConnectors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetConnectors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetConnectors::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetConnectors::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetConnectors::set_max_results): <p>The maximum number of results to return in a single call. The default value is 50. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    /// - On success, responds with [`GetConnectorsOutput`](crate::output::GetConnectorsOutput) with field(s):
    ///   - [`connector_list(Option<Vec<Connector>>)`](crate::output::GetConnectorsOutput::connector_list): <p>Information about the registered connectors.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetConnectorsOutput::next_token): <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<GetConnectorsError>`](crate::error::GetConnectorsError)
    pub fn get_connectors(&self) -> crate::client::fluent_builders::GetConnectors {
        crate::client::fluent_builders::GetConnectors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReplicationJobs`](crate::client::fluent_builders::GetReplicationJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetReplicationJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_job_id(impl Into<String>)`](crate::client::fluent_builders::GetReplicationJobs::replication_job_id) / [`set_replication_job_id(Option<String>)`](crate::client::fluent_builders::GetReplicationJobs::set_replication_job_id): <p>The ID of the replication job.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetReplicationJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetReplicationJobs::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetReplicationJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetReplicationJobs::set_max_results): <p>The maximum number of results to return in a single call. The default value is 50. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    /// - On success, responds with [`GetReplicationJobsOutput`](crate::output::GetReplicationJobsOutput) with field(s):
    ///   - [`replication_job_list(Option<Vec<ReplicationJob>>)`](crate::output::GetReplicationJobsOutput::replication_job_list): <p>Information about the replication jobs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetReplicationJobsOutput::next_token): <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<GetReplicationJobsError>`](crate::error::GetReplicationJobsError)
    pub fn get_replication_jobs(&self) -> crate::client::fluent_builders::GetReplicationJobs {
        crate::client::fluent_builders::GetReplicationJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetReplicationRuns`](crate::client::fluent_builders::GetReplicationRuns) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetReplicationRuns::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_job_id(impl Into<String>)`](crate::client::fluent_builders::GetReplicationRuns::replication_job_id) / [`set_replication_job_id(Option<String>)`](crate::client::fluent_builders::GetReplicationRuns::set_replication_job_id): <p>The ID of the replication job.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetReplicationRuns::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetReplicationRuns::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetReplicationRuns::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetReplicationRuns::set_max_results): <p>The maximum number of results to return in a single call. The default value is 50. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    /// - On success, responds with [`GetReplicationRunsOutput`](crate::output::GetReplicationRunsOutput) with field(s):
    ///   - [`replication_job(Option<ReplicationJob>)`](crate::output::GetReplicationRunsOutput::replication_job): <p>Information about the replication job.</p>
    ///   - [`replication_run_list(Option<Vec<ReplicationRun>>)`](crate::output::GetReplicationRunsOutput::replication_run_list): <p>Information about the replication runs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetReplicationRunsOutput::next_token): <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<GetReplicationRunsError>`](crate::error::GetReplicationRunsError)
    pub fn get_replication_runs(&self) -> crate::client::fluent_builders::GetReplicationRuns {
        crate::client::fluent_builders::GetReplicationRuns::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetServers`](crate::client::fluent_builders::GetServers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetServers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetServers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetServers::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetServers::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetServers::set_max_results): <p>The maximum number of results to return in a single call. The default value is 50. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    ///   - [`vm_server_address_list(Vec<VmServerAddress>)`](crate::client::fluent_builders::GetServers::vm_server_address_list) / [`set_vm_server_address_list(Option<Vec<VmServerAddress>>)`](crate::client::fluent_builders::GetServers::set_vm_server_address_list): <p>The server addresses.</p>
    /// - On success, responds with [`GetServersOutput`](crate::output::GetServersOutput) with field(s):
    ///   - [`last_modified_on(Option<DateTime>)`](crate::output::GetServersOutput::last_modified_on): <p>The time when the server was last modified.</p>
    ///   - [`server_catalog_status(Option<ServerCatalogStatus>)`](crate::output::GetServersOutput::server_catalog_status): <p>The status of the server catalog.</p>
    ///   - [`server_list(Option<Vec<Server>>)`](crate::output::GetServersOutput::server_list): <p>Information about the servers.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetServersOutput::next_token): <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<GetServersError>`](crate::error::GetServersError)
    pub fn get_servers(&self) -> crate::client::fluent_builders::GetServers {
        crate::client::fluent_builders::GetServers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportAppCatalog`](crate::client::fluent_builders::ImportAppCatalog) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`role_name(impl Into<String>)`](crate::client::fluent_builders::ImportAppCatalog::role_name) / [`set_role_name(Option<String>)`](crate::client::fluent_builders::ImportAppCatalog::set_role_name): <p>The name of the service role. If you omit this parameter, we create a service-linked role for Migration Hub in your account. Otherwise, the role that you provide must have the <a href="https://docs.aws.amazon.com/migrationhub/latest/ug/new-customer-setup.html#sms-managed">policy and trust policy</a> described in the <i>Migration Hub User Guide</i>.</p>
    /// - On success, responds with [`ImportAppCatalogOutput`](crate::output::ImportAppCatalogOutput)

    /// - On failure, responds with [`SdkError<ImportAppCatalogError>`](crate::error::ImportAppCatalogError)
    pub fn import_app_catalog(&self) -> crate::client::fluent_builders::ImportAppCatalog {
        crate::client::fluent_builders::ImportAppCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportServerCatalog`](crate::client::fluent_builders::ImportServerCatalog) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::ImportServerCatalog::send) it.

    /// - On success, responds with [`ImportServerCatalogOutput`](crate::output::ImportServerCatalogOutput)

    /// - On failure, responds with [`SdkError<ImportServerCatalogError>`](crate::error::ImportServerCatalogError)
    pub fn import_server_catalog(&self) -> crate::client::fluent_builders::ImportServerCatalog {
        crate::client::fluent_builders::ImportServerCatalog::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`LaunchApp`](crate::client::fluent_builders::LaunchApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::LaunchApp::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::LaunchApp::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`LaunchAppOutput`](crate::output::LaunchAppOutput)

    /// - On failure, responds with [`SdkError<LaunchAppError>`](crate::error::LaunchAppError)
    pub fn launch_app(&self) -> crate::client::fluent_builders::LaunchApp {
        crate::client::fluent_builders::LaunchApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApps`](crate::client::fluent_builders::ListApps) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_ids(Vec<String>)`](crate::client::fluent_builders::ListApps::app_ids) / [`set_app_ids(Option<Vec<String>>)`](crate::client::fluent_builders::ListApps::set_app_ids): <p>The unique application IDs.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApps::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApps::set_next_token): <p>The token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListApps::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListApps::set_max_results): <p>The maximum number of results to return in a single call. The default value is 100. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. </p>
    /// - On success, responds with [`ListAppsOutput`](crate::output::ListAppsOutput) with field(s):
    ///   - [`apps(Option<Vec<AppSummary>>)`](crate::output::ListAppsOutput::apps): <p>The application summaries.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListAppsOutput::next_token): <p>The token required to retrieve the next set of results. This value is null when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListAppsError>`](crate::error::ListAppsError)
    pub fn list_apps(&self) -> crate::client::fluent_builders::ListApps {
        crate::client::fluent_builders::ListApps::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`NotifyAppValidationOutput`](crate::client::fluent_builders::NotifyAppValidationOutput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::NotifyAppValidationOutput::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::NotifyAppValidationOutput::set_app_id): <p>The ID of the application.</p>
    ///   - [`notification_context(NotificationContext)`](crate::client::fluent_builders::NotifyAppValidationOutput::notification_context) / [`set_notification_context(Option<NotificationContext>)`](crate::client::fluent_builders::NotifyAppValidationOutput::set_notification_context): <p>The notification information.</p>
    /// - On success, responds with [`NotifyAppValidationOutputOutput`](crate::output::NotifyAppValidationOutputOutput)

    /// - On failure, responds with [`SdkError<NotifyAppValidationOutputError>`](crate::error::NotifyAppValidationOutputError)
    pub fn notify_app_validation_output(
        &self,
    ) -> crate::client::fluent_builders::NotifyAppValidationOutput {
        crate::client::fluent_builders::NotifyAppValidationOutput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutAppLaunchConfiguration`](crate::client::fluent_builders::PutAppLaunchConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::PutAppLaunchConfiguration::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::PutAppLaunchConfiguration::set_app_id): <p>The ID of the application.</p>
    ///   - [`role_name(impl Into<String>)`](crate::client::fluent_builders::PutAppLaunchConfiguration::role_name) / [`set_role_name(Option<String>)`](crate::client::fluent_builders::PutAppLaunchConfiguration::set_role_name): <p>The name of service role in the customer's account that CloudFormation uses to launch the application.</p>
    ///   - [`auto_launch(bool)`](crate::client::fluent_builders::PutAppLaunchConfiguration::auto_launch) / [`set_auto_launch(Option<bool>)`](crate::client::fluent_builders::PutAppLaunchConfiguration::set_auto_launch): <p>Indicates whether the application is configured to launch automatically after replication is complete.</p>
    ///   - [`server_group_launch_configurations(Vec<ServerGroupLaunchConfiguration>)`](crate::client::fluent_builders::PutAppLaunchConfiguration::server_group_launch_configurations) / [`set_server_group_launch_configurations(Option<Vec<ServerGroupLaunchConfiguration>>)`](crate::client::fluent_builders::PutAppLaunchConfiguration::set_server_group_launch_configurations): <p>Information about the launch configurations for server groups in the application.</p>
    /// - On success, responds with [`PutAppLaunchConfigurationOutput`](crate::output::PutAppLaunchConfigurationOutput)

    /// - On failure, responds with [`SdkError<PutAppLaunchConfigurationError>`](crate::error::PutAppLaunchConfigurationError)
    pub fn put_app_launch_configuration(
        &self,
    ) -> crate::client::fluent_builders::PutAppLaunchConfiguration {
        crate::client::fluent_builders::PutAppLaunchConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutAppReplicationConfiguration`](crate::client::fluent_builders::PutAppReplicationConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::PutAppReplicationConfiguration::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::PutAppReplicationConfiguration::set_app_id): <p>The ID of the application.</p>
    ///   - [`server_group_replication_configurations(Vec<ServerGroupReplicationConfiguration>)`](crate::client::fluent_builders::PutAppReplicationConfiguration::server_group_replication_configurations) / [`set_server_group_replication_configurations(Option<Vec<ServerGroupReplicationConfiguration>>)`](crate::client::fluent_builders::PutAppReplicationConfiguration::set_server_group_replication_configurations): <p>Information about the replication configurations for server groups in the application.</p>
    /// - On success, responds with [`PutAppReplicationConfigurationOutput`](crate::output::PutAppReplicationConfigurationOutput)

    /// - On failure, responds with [`SdkError<PutAppReplicationConfigurationError>`](crate::error::PutAppReplicationConfigurationError)
    pub fn put_app_replication_configuration(
        &self,
    ) -> crate::client::fluent_builders::PutAppReplicationConfiguration {
        crate::client::fluent_builders::PutAppReplicationConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutAppValidationConfiguration`](crate::client::fluent_builders::PutAppValidationConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::PutAppValidationConfiguration::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::PutAppValidationConfiguration::set_app_id): <p>The ID of the application.</p>
    ///   - [`app_validation_configurations(Vec<AppValidationConfiguration>)`](crate::client::fluent_builders::PutAppValidationConfiguration::app_validation_configurations) / [`set_app_validation_configurations(Option<Vec<AppValidationConfiguration>>)`](crate::client::fluent_builders::PutAppValidationConfiguration::set_app_validation_configurations): <p>The configuration for application validation.</p>
    ///   - [`server_group_validation_configurations(Vec<ServerGroupValidationConfiguration>)`](crate::client::fluent_builders::PutAppValidationConfiguration::server_group_validation_configurations) / [`set_server_group_validation_configurations(Option<Vec<ServerGroupValidationConfiguration>>)`](crate::client::fluent_builders::PutAppValidationConfiguration::set_server_group_validation_configurations): <p>The configuration for instance validation.</p>
    /// - On success, responds with [`PutAppValidationConfigurationOutput`](crate::output::PutAppValidationConfigurationOutput)

    /// - On failure, responds with [`SdkError<PutAppValidationConfigurationError>`](crate::error::PutAppValidationConfigurationError)
    pub fn put_app_validation_configuration(
        &self,
    ) -> crate::client::fluent_builders::PutAppValidationConfiguration {
        crate::client::fluent_builders::PutAppValidationConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartAppReplication`](crate::client::fluent_builders::StartAppReplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::StartAppReplication::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::StartAppReplication::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`StartAppReplicationOutput`](crate::output::StartAppReplicationOutput)

    /// - On failure, responds with [`SdkError<StartAppReplicationError>`](crate::error::StartAppReplicationError)
    pub fn start_app_replication(&self) -> crate::client::fluent_builders::StartAppReplication {
        crate::client::fluent_builders::StartAppReplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartOnDemandAppReplication`](crate::client::fluent_builders::StartOnDemandAppReplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::StartOnDemandAppReplication::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::StartOnDemandAppReplication::set_app_id): <p>The ID of the application.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::StartOnDemandAppReplication::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::StartOnDemandAppReplication::set_description): <p>The description of the replication run.</p>
    /// - On success, responds with [`StartOnDemandAppReplicationOutput`](crate::output::StartOnDemandAppReplicationOutput)

    /// - On failure, responds with [`SdkError<StartOnDemandAppReplicationError>`](crate::error::StartOnDemandAppReplicationError)
    pub fn start_on_demand_app_replication(
        &self,
    ) -> crate::client::fluent_builders::StartOnDemandAppReplication {
        crate::client::fluent_builders::StartOnDemandAppReplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartOnDemandReplicationRun`](crate::client::fluent_builders::StartOnDemandReplicationRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_job_id(impl Into<String>)`](crate::client::fluent_builders::StartOnDemandReplicationRun::replication_job_id) / [`set_replication_job_id(Option<String>)`](crate::client::fluent_builders::StartOnDemandReplicationRun::set_replication_job_id): <p>The ID of the replication job.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::StartOnDemandReplicationRun::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::StartOnDemandReplicationRun::set_description): <p>The description of the replication run.</p>
    /// - On success, responds with [`StartOnDemandReplicationRunOutput`](crate::output::StartOnDemandReplicationRunOutput) with field(s):
    ///   - [`replication_run_id(Option<String>)`](crate::output::StartOnDemandReplicationRunOutput::replication_run_id): <p>The ID of the replication run.</p>
    /// - On failure, responds with [`SdkError<StartOnDemandReplicationRunError>`](crate::error::StartOnDemandReplicationRunError)
    pub fn start_on_demand_replication_run(
        &self,
    ) -> crate::client::fluent_builders::StartOnDemandReplicationRun {
        crate::client::fluent_builders::StartOnDemandReplicationRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopAppReplication`](crate::client::fluent_builders::StopAppReplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::StopAppReplication::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::StopAppReplication::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`StopAppReplicationOutput`](crate::output::StopAppReplicationOutput)

    /// - On failure, responds with [`SdkError<StopAppReplicationError>`](crate::error::StopAppReplicationError)
    pub fn stop_app_replication(&self) -> crate::client::fluent_builders::StopAppReplication {
        crate::client::fluent_builders::StopAppReplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TerminateApp`](crate::client::fluent_builders::TerminateApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::TerminateApp::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::TerminateApp::set_app_id): <p>The ID of the application.</p>
    /// - On success, responds with [`TerminateAppOutput`](crate::output::TerminateAppOutput)

    /// - On failure, responds with [`SdkError<TerminateAppError>`](crate::error::TerminateAppError)
    pub fn terminate_app(&self) -> crate::client::fluent_builders::TerminateApp {
        crate::client::fluent_builders::TerminateApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateApp`](crate::client::fluent_builders::UpdateApp) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`app_id(impl Into<String>)`](crate::client::fluent_builders::UpdateApp::app_id) / [`set_app_id(Option<String>)`](crate::client::fluent_builders::UpdateApp::set_app_id): <p>The ID of the application.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateApp::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateApp::set_name): <p>The new name of the application.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateApp::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateApp::set_description): <p>The new description of the application.</p>
    ///   - [`role_name(impl Into<String>)`](crate::client::fluent_builders::UpdateApp::role_name) / [`set_role_name(Option<String>)`](crate::client::fluent_builders::UpdateApp::set_role_name): <p>The name of the service role in the customer's account used by Server Migration Service.</p>
    ///   - [`server_groups(Vec<ServerGroup>)`](crate::client::fluent_builders::UpdateApp::server_groups) / [`set_server_groups(Option<Vec<ServerGroup>>)`](crate::client::fluent_builders::UpdateApp::set_server_groups): <p>The server groups in the application to update.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::UpdateApp::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::UpdateApp::set_tags): <p>The tags to associate with the application.</p>
    /// - On success, responds with [`UpdateAppOutput`](crate::output::UpdateAppOutput) with field(s):
    ///   - [`app_summary(Option<AppSummary>)`](crate::output::UpdateAppOutput::app_summary): <p>A summary description of the application.</p>
    ///   - [`server_groups(Option<Vec<ServerGroup>>)`](crate::output::UpdateAppOutput::server_groups): <p>The updated server groups in the application.</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::UpdateAppOutput::tags): <p>The tags associated with the application.</p>
    /// - On failure, responds with [`SdkError<UpdateAppError>`](crate::error::UpdateAppError)
    pub fn update_app(&self) -> crate::client::fluent_builders::UpdateApp {
        crate::client::fluent_builders::UpdateApp::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateReplicationJob`](crate::client::fluent_builders::UpdateReplicationJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_job_id(impl Into<String>)`](crate::client::fluent_builders::UpdateReplicationJob::replication_job_id) / [`set_replication_job_id(Option<String>)`](crate::client::fluent_builders::UpdateReplicationJob::set_replication_job_id): <p>The ID of the replication job.</p>
    ///   - [`frequency(i32)`](crate::client::fluent_builders::UpdateReplicationJob::frequency) / [`set_frequency(Option<i32>)`](crate::client::fluent_builders::UpdateReplicationJob::set_frequency): <p>The time between consecutive replication runs, in hours.</p>
    ///   - [`next_replication_run_start_time(DateTime)`](crate::client::fluent_builders::UpdateReplicationJob::next_replication_run_start_time) / [`set_next_replication_run_start_time(Option<DateTime>)`](crate::client::fluent_builders::UpdateReplicationJob::set_next_replication_run_start_time): <p>The start time of the next replication run.</p>
    ///   - [`license_type(LicenseType)`](crate::client::fluent_builders::UpdateReplicationJob::license_type) / [`set_license_type(Option<LicenseType>)`](crate::client::fluent_builders::UpdateReplicationJob::set_license_type): <p>The license type to be used for the AMI created by a successful replication run.</p>
    ///   - [`role_name(impl Into<String>)`](crate::client::fluent_builders::UpdateReplicationJob::role_name) / [`set_role_name(Option<String>)`](crate::client::fluent_builders::UpdateReplicationJob::set_role_name): <p>The name of the IAM role to be used by Server Migration Service.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateReplicationJob::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateReplicationJob::set_description): <p>The description of the replication job.</p>
    ///   - [`number_of_recent_amis_to_keep(i32)`](crate::client::fluent_builders::UpdateReplicationJob::number_of_recent_amis_to_keep) / [`set_number_of_recent_amis_to_keep(Option<i32>)`](crate::client::fluent_builders::UpdateReplicationJob::set_number_of_recent_amis_to_keep): <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.</p>
    ///   - [`encrypted(bool)`](crate::client::fluent_builders::UpdateReplicationJob::encrypted) / [`set_encrypted(Option<bool>)`](crate::client::fluent_builders::UpdateReplicationJob::set_encrypted): <p>When true, the replication job produces encrypted AMIs. For more information, <code>KmsKeyId</code>.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::UpdateReplicationJob::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::UpdateReplicationJob::set_kms_key_id): <p>The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:</p>  <ul>   <li> <p>KMS key ID</p> </li>   <li> <p>KMS key alias</p> </li>   <li> <p>ARN referring to the KMS key ID</p> </li>   <li> <p>ARN referring to the KMS key alias</p> </li>  </ul>  <p>If encrypted is enabled but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used.</p>
    /// - On success, responds with [`UpdateReplicationJobOutput`](crate::output::UpdateReplicationJobOutput)

    /// - On failure, responds with [`SdkError<UpdateReplicationJobError>`](crate::error::UpdateReplicationJobError)
    pub fn update_replication_job(&self) -> crate::client::fluent_builders::UpdateReplicationJob {
        crate::client::fluent_builders::UpdateReplicationJob::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
