// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `AWSServerMigrationService_V2016_10_24`.
///
/// This client allows ergonomic access to a `AWSServerMigrationService_V2016_10_24`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn create_app(&self) -> fluent_builders::CreateApp<C, M, R> {
        fluent_builders::CreateApp::new(self.handle.clone())
    }
    pub fn create_replication_job(&self) -> fluent_builders::CreateReplicationJob<C, M, R> {
        fluent_builders::CreateReplicationJob::new(self.handle.clone())
    }
    pub fn delete_app(&self) -> fluent_builders::DeleteApp<C, M, R> {
        fluent_builders::DeleteApp::new(self.handle.clone())
    }
    pub fn delete_app_launch_configuration(
        &self,
    ) -> fluent_builders::DeleteAppLaunchConfiguration<C, M, R> {
        fluent_builders::DeleteAppLaunchConfiguration::new(self.handle.clone())
    }
    pub fn delete_app_replication_configuration(
        &self,
    ) -> fluent_builders::DeleteAppReplicationConfiguration<C, M, R> {
        fluent_builders::DeleteAppReplicationConfiguration::new(self.handle.clone())
    }
    pub fn delete_app_validation_configuration(
        &self,
    ) -> fluent_builders::DeleteAppValidationConfiguration<C, M, R> {
        fluent_builders::DeleteAppValidationConfiguration::new(self.handle.clone())
    }
    pub fn delete_replication_job(&self) -> fluent_builders::DeleteReplicationJob<C, M, R> {
        fluent_builders::DeleteReplicationJob::new(self.handle.clone())
    }
    pub fn delete_server_catalog(&self) -> fluent_builders::DeleteServerCatalog<C, M, R> {
        fluent_builders::DeleteServerCatalog::new(self.handle.clone())
    }
    pub fn disassociate_connector(&self) -> fluent_builders::DisassociateConnector<C, M, R> {
        fluent_builders::DisassociateConnector::new(self.handle.clone())
    }
    pub fn generate_change_set(&self) -> fluent_builders::GenerateChangeSet<C, M, R> {
        fluent_builders::GenerateChangeSet::new(self.handle.clone())
    }
    pub fn generate_template(&self) -> fluent_builders::GenerateTemplate<C, M, R> {
        fluent_builders::GenerateTemplate::new(self.handle.clone())
    }
    pub fn get_app(&self) -> fluent_builders::GetApp<C, M, R> {
        fluent_builders::GetApp::new(self.handle.clone())
    }
    pub fn get_app_launch_configuration(
        &self,
    ) -> fluent_builders::GetAppLaunchConfiguration<C, M, R> {
        fluent_builders::GetAppLaunchConfiguration::new(self.handle.clone())
    }
    pub fn get_app_replication_configuration(
        &self,
    ) -> fluent_builders::GetAppReplicationConfiguration<C, M, R> {
        fluent_builders::GetAppReplicationConfiguration::new(self.handle.clone())
    }
    pub fn get_app_validation_configuration(
        &self,
    ) -> fluent_builders::GetAppValidationConfiguration<C, M, R> {
        fluent_builders::GetAppValidationConfiguration::new(self.handle.clone())
    }
    pub fn get_app_validation_output(&self) -> fluent_builders::GetAppValidationOutput<C, M, R> {
        fluent_builders::GetAppValidationOutput::new(self.handle.clone())
    }
    pub fn get_connectors(&self) -> fluent_builders::GetConnectors<C, M, R> {
        fluent_builders::GetConnectors::new(self.handle.clone())
    }
    pub fn get_replication_jobs(&self) -> fluent_builders::GetReplicationJobs<C, M, R> {
        fluent_builders::GetReplicationJobs::new(self.handle.clone())
    }
    pub fn get_replication_runs(&self) -> fluent_builders::GetReplicationRuns<C, M, R> {
        fluent_builders::GetReplicationRuns::new(self.handle.clone())
    }
    pub fn get_servers(&self) -> fluent_builders::GetServers<C, M, R> {
        fluent_builders::GetServers::new(self.handle.clone())
    }
    pub fn import_app_catalog(&self) -> fluent_builders::ImportAppCatalog<C, M, R> {
        fluent_builders::ImportAppCatalog::new(self.handle.clone())
    }
    pub fn import_server_catalog(&self) -> fluent_builders::ImportServerCatalog<C, M, R> {
        fluent_builders::ImportServerCatalog::new(self.handle.clone())
    }
    pub fn launch_app(&self) -> fluent_builders::LaunchApp<C, M, R> {
        fluent_builders::LaunchApp::new(self.handle.clone())
    }
    pub fn list_apps(&self) -> fluent_builders::ListApps<C, M, R> {
        fluent_builders::ListApps::new(self.handle.clone())
    }
    pub fn notify_app_validation_output(
        &self,
    ) -> fluent_builders::NotifyAppValidationOutput<C, M, R> {
        fluent_builders::NotifyAppValidationOutput::new(self.handle.clone())
    }
    pub fn put_app_launch_configuration(
        &self,
    ) -> fluent_builders::PutAppLaunchConfiguration<C, M, R> {
        fluent_builders::PutAppLaunchConfiguration::new(self.handle.clone())
    }
    pub fn put_app_replication_configuration(
        &self,
    ) -> fluent_builders::PutAppReplicationConfiguration<C, M, R> {
        fluent_builders::PutAppReplicationConfiguration::new(self.handle.clone())
    }
    pub fn put_app_validation_configuration(
        &self,
    ) -> fluent_builders::PutAppValidationConfiguration<C, M, R> {
        fluent_builders::PutAppValidationConfiguration::new(self.handle.clone())
    }
    pub fn start_app_replication(&self) -> fluent_builders::StartAppReplication<C, M, R> {
        fluent_builders::StartAppReplication::new(self.handle.clone())
    }
    pub fn start_on_demand_app_replication(
        &self,
    ) -> fluent_builders::StartOnDemandAppReplication<C, M, R> {
        fluent_builders::StartOnDemandAppReplication::new(self.handle.clone())
    }
    pub fn start_on_demand_replication_run(
        &self,
    ) -> fluent_builders::StartOnDemandReplicationRun<C, M, R> {
        fluent_builders::StartOnDemandReplicationRun::new(self.handle.clone())
    }
    pub fn stop_app_replication(&self) -> fluent_builders::StopAppReplication<C, M, R> {
        fluent_builders::StopAppReplication::new(self.handle.clone())
    }
    pub fn terminate_app(&self) -> fluent_builders::TerminateApp<C, M, R> {
        fluent_builders::TerminateApp::new(self.handle.clone())
    }
    pub fn update_app(&self) -> fluent_builders::UpdateApp<C, M, R> {
        fluent_builders::UpdateApp::new(self.handle.clone())
    }
    pub fn update_replication_job(&self) -> fluent_builders::UpdateReplicationJob<C, M, R> {
        fluent_builders::UpdateReplicationJob::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct CreateApp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_app_input::Builder,
    }
    impl<C, M, R> CreateApp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateAppOutput,
            smithy_http::result::SdkError<crate::error::CreateAppError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateAppInputOperationOutputAlias,
                crate::output::CreateAppOutput,
                crate::error::CreateAppError,
                crate::input::CreateAppInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the new application.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The description of the new application</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The name of the service role in the customer's account to be used by AWS SMS.</p>
        pub fn role_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name(inp);
            self
        }
        pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_name(input);
            self
        }
        /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of
        /// application creation.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(inp);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// Appends an item to `serverGroups`.
        ///
        /// To override the contents of this collection use [`set_server_groups`](Self::set_server_groups).
        /// <p>The server groups to include in the application.</p>
        pub fn server_groups(mut self, inp: impl Into<crate::model::ServerGroup>) -> Self {
            self.inner = self.inner.server_groups(inp);
            self
        }
        pub fn set_server_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServerGroup>>,
        ) -> Self {
            self.inner = self.inner.set_server_groups(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to be associated with the application.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateReplicationJob<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_replication_job_input::Builder,
    }
    impl<C, M, R> CreateReplicationJob<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateReplicationJobOutput,
            smithy_http::result::SdkError<crate::error::CreateReplicationJobError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateReplicationJobInputOperationOutputAlias,
                crate::output::CreateReplicationJobOutput,
                crate::error::CreateReplicationJobError,
                crate::input::CreateReplicationJobInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the server.</p>
        pub fn server_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.server_id(inp);
            self
        }
        pub fn set_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_server_id(input);
            self
        }
        /// <p>The seed replication time.</p>
        pub fn seed_replication_time(mut self, inp: smithy_types::Instant) -> Self {
            self.inner = self.inner.seed_replication_time(inp);
            self
        }
        pub fn set_seed_replication_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_seed_replication_time(input);
            self
        }
        /// <p>The time between consecutive replication runs, in hours.</p>
        pub fn frequency(mut self, inp: i32) -> Self {
            self.inner = self.inner.frequency(inp);
            self
        }
        pub fn set_frequency(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_frequency(input);
            self
        }
        /// <p>Indicates whether to run the replication job one time.</p>
        pub fn run_once(mut self, inp: bool) -> Self {
            self.inner = self.inner.run_once(inp);
            self
        }
        pub fn set_run_once(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_run_once(input);
            self
        }
        /// <p>The license type to be used for the AMI created by a successful replication
        /// run.</p>
        pub fn license_type(mut self, inp: crate::model::LicenseType) -> Self {
            self.inner = self.inner.license_type(inp);
            self
        }
        pub fn set_license_type(
            mut self,
            input: std::option::Option<crate::model::LicenseType>,
        ) -> Self {
            self.inner = self.inner.set_license_type(input);
            self
        }
        /// <p>The name of the IAM role to be used by the AWS SMS.</p>
        pub fn role_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name(inp);
            self
        }
        pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_name(input);
            self
        }
        /// <p>The description of the replication job.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the
        /// maximum number is reached and a new AMI is created.</p>
        pub fn number_of_recent_amis_to_keep(mut self, inp: i32) -> Self {
            self.inner = self.inner.number_of_recent_amis_to_keep(inp);
            self
        }
        pub fn set_number_of_recent_amis_to_keep(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.inner = self.inner.set_number_of_recent_amis_to_keep(input);
            self
        }
        /// <p>Indicates whether the replication job produces encrypted AMIs.</p>
        pub fn encrypted(mut self, inp: bool) -> Self {
            self.inner = self.inner.encrypted(inp);
            self
        }
        pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_encrypted(input);
            self
        }
        /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs.
        /// This value can be any of the following:</p>
        /// <ul>
        /// <li>
        /// <p>KMS key ID</p>
        /// </li>
        /// <li>
        /// <p>KMS key alias</p>
        /// </li>
        /// <li>
        /// <p>ARN referring to the KMS key ID</p>
        /// </li>
        /// <li>
        /// <p>ARN referring to the KMS key alias</p>
        /// </li>
        /// </ul>
        /// <p> If encrypted is <i>true</i> but a KMS key ID is not specified, the
        /// customer's default KMS key for Amazon EBS is used. </p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.kms_key_id(inp);
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_kms_key_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_app_input::Builder,
    }
    impl<C, M, R> DeleteApp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteAppOutput,
            smithy_http::result::SdkError<crate::error::DeleteAppError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteAppInputOperationOutputAlias,
                crate::output::DeleteAppOutput,
                crate::error::DeleteAppError,
                crate::input::DeleteAppInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// <p>Indicates whether to stop all replication jobs corresponding to the servers
        /// in the application while deleting the application.</p>
        pub fn force_stop_app_replication(mut self, inp: bool) -> Self {
            self.inner = self.inner.force_stop_app_replication(inp);
            self
        }
        pub fn set_force_stop_app_replication(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_force_stop_app_replication(input);
            self
        }
        /// <p>Indicates whether to terminate the stack corresponding to the
        /// application while deleting the application.</p>
        pub fn force_terminate_app(mut self, inp: bool) -> Self {
            self.inner = self.inner.force_terminate_app(inp);
            self
        }
        pub fn set_force_terminate_app(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_force_terminate_app(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteAppLaunchConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_app_launch_configuration_input::Builder,
    }
    impl<C, M, R> DeleteAppLaunchConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteAppLaunchConfigurationOutput,
            smithy_http::result::SdkError<crate::error::DeleteAppLaunchConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteAppLaunchConfigurationInputOperationOutputAlias,
                crate::output::DeleteAppLaunchConfigurationOutput,
                crate::error::DeleteAppLaunchConfigurationError,
                crate::input::DeleteAppLaunchConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteAppReplicationConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_app_replication_configuration_input::Builder,
    }
    impl<C, M, R> DeleteAppReplicationConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteAppReplicationConfigurationOutput,
            smithy_http::result::SdkError<crate::error::DeleteAppReplicationConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteAppReplicationConfigurationInputOperationOutputAlias,
                crate::output::DeleteAppReplicationConfigurationOutput,
                crate::error::DeleteAppReplicationConfigurationError,
                crate::input::DeleteAppReplicationConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteAppValidationConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_app_validation_configuration_input::Builder,
    }
    impl<C, M, R> DeleteAppValidationConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteAppValidationConfigurationOutput,
            smithy_http::result::SdkError<crate::error::DeleteAppValidationConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteAppValidationConfigurationInputOperationOutputAlias,
                crate::output::DeleteAppValidationConfigurationOutput,
                crate::error::DeleteAppValidationConfigurationError,
                crate::input::DeleteAppValidationConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteReplicationJob<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_replication_job_input::Builder,
    }
    impl<C, M, R> DeleteReplicationJob<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteReplicationJobOutput,
            smithy_http::result::SdkError<crate::error::DeleteReplicationJobError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteReplicationJobInputOperationOutputAlias,
                crate::output::DeleteReplicationJobOutput,
                crate::error::DeleteReplicationJobError,
                crate::input::DeleteReplicationJobInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the replication job.</p>
        pub fn replication_job_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.replication_job_id(inp);
            self
        }
        pub fn set_replication_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_replication_job_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteServerCatalog<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_server_catalog_input::Builder,
    }
    impl<C, M, R> DeleteServerCatalog<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteServerCatalogOutput,
            smithy_http::result::SdkError<crate::error::DeleteServerCatalogError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteServerCatalogInputOperationOutputAlias,
                crate::output::DeleteServerCatalogOutput,
                crate::error::DeleteServerCatalogError,
                crate::input::DeleteServerCatalogInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateConnector<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::disassociate_connector_input::Builder,
    }
    impl<C, M, R> DisassociateConnector<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateConnectorOutput,
            smithy_http::result::SdkError<crate::error::DisassociateConnectorError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DisassociateConnectorInputOperationOutputAlias,
                crate::output::DisassociateConnectorOutput,
                crate::error::DisassociateConnectorError,
                crate::input::DisassociateConnectorInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connector.</p>
        pub fn connector_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connector_id(inp);
            self
        }
        pub fn set_connector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_connector_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GenerateChangeSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::generate_change_set_input::Builder,
    }
    impl<C, M, R> GenerateChangeSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GenerateChangeSetOutput,
            smithy_http::result::SdkError<crate::error::GenerateChangeSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GenerateChangeSetInputOperationOutputAlias,
                crate::output::GenerateChangeSetOutput,
                crate::error::GenerateChangeSetError,
                crate::input::GenerateChangeSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application associated with the change set.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// <p>The format for the change set.</p>
        pub fn changeset_format(mut self, inp: crate::model::OutputFormat) -> Self {
            self.inner = self.inner.changeset_format(inp);
            self
        }
        pub fn set_changeset_format(
            mut self,
            input: std::option::Option<crate::model::OutputFormat>,
        ) -> Self {
            self.inner = self.inner.set_changeset_format(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GenerateTemplate<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::generate_template_input::Builder,
    }
    impl<C, M, R> GenerateTemplate<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GenerateTemplateOutput,
            smithy_http::result::SdkError<crate::error::GenerateTemplateError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GenerateTemplateInputOperationOutputAlias,
                crate::output::GenerateTemplateOutput,
                crate::error::GenerateTemplateError,
                crate::input::GenerateTemplateInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application associated with the AWS CloudFormation template.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// <p>The format for generating the AWS CloudFormation template.</p>
        pub fn template_format(mut self, inp: crate::model::OutputFormat) -> Self {
            self.inner = self.inner.template_format(inp);
            self
        }
        pub fn set_template_format(
            mut self,
            input: std::option::Option<crate::model::OutputFormat>,
        ) -> Self {
            self.inner = self.inner.set_template_format(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetApp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_app_input::Builder,
    }
    impl<C, M, R> GetApp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAppOutput,
            smithy_http::result::SdkError<crate::error::GetAppError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetAppInputOperationOutputAlias,
                crate::output::GetAppOutput,
                crate::error::GetAppError,
                crate::input::GetAppInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetAppLaunchConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_app_launch_configuration_input::Builder,
    }
    impl<C, M, R> GetAppLaunchConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAppLaunchConfigurationOutput,
            smithy_http::result::SdkError<crate::error::GetAppLaunchConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetAppLaunchConfigurationInputOperationOutputAlias,
                crate::output::GetAppLaunchConfigurationOutput,
                crate::error::GetAppLaunchConfigurationError,
                crate::input::GetAppLaunchConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetAppReplicationConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_app_replication_configuration_input::Builder,
    }
    impl<C, M, R> GetAppReplicationConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAppReplicationConfigurationOutput,
            smithy_http::result::SdkError<crate::error::GetAppReplicationConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetAppReplicationConfigurationInputOperationOutputAlias,
                crate::output::GetAppReplicationConfigurationOutput,
                crate::error::GetAppReplicationConfigurationError,
                crate::input::GetAppReplicationConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetAppValidationConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_app_validation_configuration_input::Builder,
    }
    impl<C, M, R> GetAppValidationConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAppValidationConfigurationOutput,
            smithy_http::result::SdkError<crate::error::GetAppValidationConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetAppValidationConfigurationInputOperationOutputAlias,
                crate::output::GetAppValidationConfigurationOutput,
                crate::error::GetAppValidationConfigurationError,
                crate::input::GetAppValidationConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetAppValidationOutput<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_app_validation_output_input::Builder,
    }
    impl<C, M, R> GetAppValidationOutput<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetAppValidationOutputOutput,
            smithy_http::result::SdkError<crate::error::GetAppValidationOutputError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetAppValidationOutputInputOperationOutputAlias,
                crate::output::GetAppValidationOutputOutput,
                crate::error::GetAppValidationOutputError,
                crate::input::GetAppValidationOutputInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetConnectors<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_connectors_input::Builder,
    }
    impl<C, M, R> GetConnectors<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetConnectorsOutput,
            smithy_http::result::SdkError<crate::error::GetConnectorsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetConnectorsInputOperationOutputAlias,
                crate::output::GetConnectorsOutput,
                crate::error::GetConnectorsError,
                crate::input::GetConnectorsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. The default value is 50.
        /// To retrieve the remaining results, make another call with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetReplicationJobs<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_replication_jobs_input::Builder,
    }
    impl<C, M, R> GetReplicationJobs<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetReplicationJobsOutput,
            smithy_http::result::SdkError<crate::error::GetReplicationJobsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetReplicationJobsInputOperationOutputAlias,
                crate::output::GetReplicationJobsOutput,
                crate::error::GetReplicationJobsError,
                crate::input::GetReplicationJobsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the replication job.</p>
        pub fn replication_job_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.replication_job_id(inp);
            self
        }
        pub fn set_replication_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_replication_job_id(input);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. The default value is 50.
        /// To retrieve the remaining results, make another call with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetReplicationRuns<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_replication_runs_input::Builder,
    }
    impl<C, M, R> GetReplicationRuns<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetReplicationRunsOutput,
            smithy_http::result::SdkError<crate::error::GetReplicationRunsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetReplicationRunsInputOperationOutputAlias,
                crate::output::GetReplicationRunsOutput,
                crate::error::GetReplicationRunsError,
                crate::input::GetReplicationRunsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the replication job.</p>
        pub fn replication_job_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.replication_job_id(inp);
            self
        }
        pub fn set_replication_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_replication_job_id(input);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. The default value is 50.
        /// To retrieve the remaining results, make another call with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetServers<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_servers_input::Builder,
    }
    impl<C, M, R> GetServers<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetServersOutput,
            smithy_http::result::SdkError<crate::error::GetServersError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetServersInputOperationOutputAlias,
                crate::output::GetServersOutput,
                crate::error::GetServersError,
                crate::input::GetServersInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. The default value is 50.
        /// To retrieve the remaining results, make another call with the returned
        /// <code>NextToken</code> value.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// Appends an item to `vmServerAddressList`.
        ///
        /// To override the contents of this collection use [`set_vm_server_address_list`](Self::set_vm_server_address_list).
        /// <p>The server addresses.</p>
        pub fn vm_server_address_list(
            mut self,
            inp: impl Into<crate::model::VmServerAddress>,
        ) -> Self {
            self.inner = self.inner.vm_server_address_list(inp);
            self
        }
        pub fn set_vm_server_address_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VmServerAddress>>,
        ) -> Self {
            self.inner = self.inner.set_vm_server_address_list(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ImportAppCatalog<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::import_app_catalog_input::Builder,
    }
    impl<C, M, R> ImportAppCatalog<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ImportAppCatalogOutput,
            smithy_http::result::SdkError<crate::error::ImportAppCatalogError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ImportAppCatalogInputOperationOutputAlias,
                crate::output::ImportAppCatalogOutput,
                crate::error::ImportAppCatalogError,
                crate::input::ImportAppCatalogInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service role. If you omit this parameter, we create a service-linked role
        /// for AWS Migration Hub in your account. Otherwise, the role that you provide must have the <a href="https://docs.aws.amazon.com/migrationhub/latest/ug/new-customer-setup.html#sms-managed">policy
        /// and trust policy</a> described in the <i>AWS Migration Hub User Guide</i>.</p>
        pub fn role_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name(inp);
            self
        }
        pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ImportServerCatalog<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::import_server_catalog_input::Builder,
    }
    impl<C, M, R> ImportServerCatalog<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ImportServerCatalogOutput,
            smithy_http::result::SdkError<crate::error::ImportServerCatalogError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ImportServerCatalogInputOperationOutputAlias,
                crate::output::ImportServerCatalogOutput,
                crate::error::ImportServerCatalogError,
                crate::input::ImportServerCatalogInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct LaunchApp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::launch_app_input::Builder,
    }
    impl<C, M, R> LaunchApp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::LaunchAppOutput,
            smithy_http::result::SdkError<crate::error::LaunchAppError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::LaunchAppInputOperationOutputAlias,
                crate::output::LaunchAppOutput,
                crate::error::LaunchAppError,
                crate::input::LaunchAppInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListApps<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_apps_input::Builder,
    }
    impl<C, M, R> ListApps<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListAppsOutput,
            smithy_http::result::SdkError<crate::error::ListAppsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListAppsInputOperationOutputAlias,
                crate::output::ListAppsOutput,
                crate::error::ListAppsError,
                crate::input::ListAppsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `appIds`.
        ///
        /// To override the contents of this collection use [`set_app_ids`](Self::set_app_ids).
        /// <p>The unique application IDs.</p>
        pub fn app_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_ids(inp);
            self
        }
        pub fn set_app_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_app_ids(input);
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return in a single call. The default value is 100. To
        /// retrieve the remaining results, make another call with the returned
        /// <code>NextToken</code> value. </p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct NotifyAppValidationOutput<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::notify_app_validation_output_input::Builder,
    }
    impl<C, M, R> NotifyAppValidationOutput<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::NotifyAppValidationOutputOutput,
            smithy_http::result::SdkError<crate::error::NotifyAppValidationOutputError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::NotifyAppValidationOutputInputOperationOutputAlias,
                crate::output::NotifyAppValidationOutputOutput,
                crate::error::NotifyAppValidationOutputError,
                crate::input::NotifyAppValidationOutputInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// <p>The notification information.</p>
        pub fn notification_context(mut self, inp: crate::model::NotificationContext) -> Self {
            self.inner = self.inner.notification_context(inp);
            self
        }
        pub fn set_notification_context(
            mut self,
            input: std::option::Option<crate::model::NotificationContext>,
        ) -> Self {
            self.inner = self.inner.set_notification_context(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutAppLaunchConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_app_launch_configuration_input::Builder,
    }
    impl<C, M, R> PutAppLaunchConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutAppLaunchConfigurationOutput,
            smithy_http::result::SdkError<crate::error::PutAppLaunchConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutAppLaunchConfigurationInputOperationOutputAlias,
                crate::output::PutAppLaunchConfigurationOutput,
                crate::error::PutAppLaunchConfigurationError,
                crate::input::PutAppLaunchConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// <p>The name of service role in the customer's account that AWS CloudFormation uses to launch the
        /// application.</p>
        pub fn role_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name(inp);
            self
        }
        pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_name(input);
            self
        }
        /// <p>Indicates whether the application is configured to launch automatically after replication is complete.</p>
        pub fn auto_launch(mut self, inp: bool) -> Self {
            self.inner = self.inner.auto_launch(inp);
            self
        }
        pub fn set_auto_launch(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_auto_launch(input);
            self
        }
        /// Appends an item to `serverGroupLaunchConfigurations`.
        ///
        /// To override the contents of this collection use [`set_server_group_launch_configurations`](Self::set_server_group_launch_configurations).
        /// <p>Information about the launch configurations for server groups in the application.</p>
        pub fn server_group_launch_configurations(
            mut self,
            inp: impl Into<crate::model::ServerGroupLaunchConfiguration>,
        ) -> Self {
            self.inner = self.inner.server_group_launch_configurations(inp);
            self
        }
        pub fn set_server_group_launch_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServerGroupLaunchConfiguration>>,
        ) -> Self {
            self.inner = self.inner.set_server_group_launch_configurations(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutAppReplicationConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_app_replication_configuration_input::Builder,
    }
    impl<C, M, R> PutAppReplicationConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutAppReplicationConfigurationOutput,
            smithy_http::result::SdkError<crate::error::PutAppReplicationConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutAppReplicationConfigurationInputOperationOutputAlias,
                crate::output::PutAppReplicationConfigurationOutput,
                crate::error::PutAppReplicationConfigurationError,
                crate::input::PutAppReplicationConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// Appends an item to `serverGroupReplicationConfigurations`.
        ///
        /// To override the contents of this collection use [`set_server_group_replication_configurations`](Self::set_server_group_replication_configurations).
        /// <p>Information about the replication configurations for server groups in the application.</p>
        pub fn server_group_replication_configurations(
            mut self,
            inp: impl Into<crate::model::ServerGroupReplicationConfiguration>,
        ) -> Self {
            self.inner = self.inner.server_group_replication_configurations(inp);
            self
        }
        pub fn set_server_group_replication_configurations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ServerGroupReplicationConfiguration>,
            >,
        ) -> Self {
            self.inner = self
                .inner
                .set_server_group_replication_configurations(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutAppValidationConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_app_validation_configuration_input::Builder,
    }
    impl<C, M, R> PutAppValidationConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutAppValidationConfigurationOutput,
            smithy_http::result::SdkError<crate::error::PutAppValidationConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutAppValidationConfigurationInputOperationOutputAlias,
                crate::output::PutAppValidationConfigurationOutput,
                crate::error::PutAppValidationConfigurationError,
                crate::input::PutAppValidationConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// Appends an item to `appValidationConfigurations`.
        ///
        /// To override the contents of this collection use [`set_app_validation_configurations`](Self::set_app_validation_configurations).
        /// <p>The configuration for application validation.</p>
        pub fn app_validation_configurations(
            mut self,
            inp: impl Into<crate::model::AppValidationConfiguration>,
        ) -> Self {
            self.inner = self.inner.app_validation_configurations(inp);
            self
        }
        pub fn set_app_validation_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AppValidationConfiguration>>,
        ) -> Self {
            self.inner = self.inner.set_app_validation_configurations(input);
            self
        }
        /// Appends an item to `serverGroupValidationConfigurations`.
        ///
        /// To override the contents of this collection use [`set_server_group_validation_configurations`](Self::set_server_group_validation_configurations).
        /// <p>The configuration for instance validation.</p>
        pub fn server_group_validation_configurations(
            mut self,
            inp: impl Into<crate::model::ServerGroupValidationConfiguration>,
        ) -> Self {
            self.inner = self.inner.server_group_validation_configurations(inp);
            self
        }
        pub fn set_server_group_validation_configurations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ServerGroupValidationConfiguration>,
            >,
        ) -> Self {
            self.inner = self.inner.set_server_group_validation_configurations(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartAppReplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_app_replication_input::Builder,
    }
    impl<C, M, R> StartAppReplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartAppReplicationOutput,
            smithy_http::result::SdkError<crate::error::StartAppReplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartAppReplicationInputOperationOutputAlias,
                crate::output::StartAppReplicationOutput,
                crate::error::StartAppReplicationError,
                crate::input::StartAppReplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartOnDemandAppReplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_on_demand_app_replication_input::Builder,
    }
    impl<C, M, R> StartOnDemandAppReplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartOnDemandAppReplicationOutput,
            smithy_http::result::SdkError<crate::error::StartOnDemandAppReplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartOnDemandAppReplicationInputOperationOutputAlias,
                crate::output::StartOnDemandAppReplicationOutput,
                crate::error::StartOnDemandAppReplicationError,
                crate::input::StartOnDemandAppReplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// <p>The description of the replication run.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartOnDemandReplicationRun<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_on_demand_replication_run_input::Builder,
    }
    impl<C, M, R> StartOnDemandReplicationRun<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartOnDemandReplicationRunOutput,
            smithy_http::result::SdkError<crate::error::StartOnDemandReplicationRunError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartOnDemandReplicationRunInputOperationOutputAlias,
                crate::output::StartOnDemandReplicationRunOutput,
                crate::error::StartOnDemandReplicationRunError,
                crate::input::StartOnDemandReplicationRunInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the replication job.</p>
        pub fn replication_job_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.replication_job_id(inp);
            self
        }
        pub fn set_replication_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_replication_job_id(input);
            self
        }
        /// <p>The description of the replication run.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopAppReplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::stop_app_replication_input::Builder,
    }
    impl<C, M, R> StopAppReplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopAppReplicationOutput,
            smithy_http::result::SdkError<crate::error::StopAppReplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StopAppReplicationInputOperationOutputAlias,
                crate::output::StopAppReplicationOutput,
                crate::error::StopAppReplicationError,
                crate::input::StopAppReplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TerminateApp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::terminate_app_input::Builder,
    }
    impl<C, M, R> TerminateApp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TerminateAppOutput,
            smithy_http::result::SdkError<crate::error::TerminateAppError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TerminateAppInputOperationOutputAlias,
                crate::output::TerminateAppOutput,
                crate::error::TerminateAppError,
                crate::input::TerminateAppInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateApp<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_app_input::Builder,
    }
    impl<C, M, R> UpdateApp<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateAppOutput,
            smithy_http::result::SdkError<crate::error::UpdateAppError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateAppInputOperationOutputAlias,
                crate::output::UpdateAppOutput,
                crate::error::UpdateAppError,
                crate::input::UpdateAppInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the application.</p>
        pub fn app_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.app_id(inp);
            self
        }
        pub fn set_app_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_app_id(input);
            self
        }
        /// <p>The new name of the application.</p>
        pub fn name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(inp);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The new description of the application.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The name of the service role in the customer's account used by AWS SMS.</p>
        pub fn role_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name(inp);
            self
        }
        pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_name(input);
            self
        }
        /// Appends an item to `serverGroups`.
        ///
        /// To override the contents of this collection use [`set_server_groups`](Self::set_server_groups).
        /// <p>The server groups in the application to update.</p>
        pub fn server_groups(mut self, inp: impl Into<crate::model::ServerGroup>) -> Self {
            self.inner = self.inner.server_groups(inp);
            self
        }
        pub fn set_server_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServerGroup>>,
        ) -> Self {
            self.inner = self.inner.set_server_groups(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to associate with the application.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateReplicationJob<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_replication_job_input::Builder,
    }
    impl<C, M, R> UpdateReplicationJob<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateReplicationJobOutput,
            smithy_http::result::SdkError<crate::error::UpdateReplicationJobError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateReplicationJobInputOperationOutputAlias,
                crate::output::UpdateReplicationJobOutput,
                crate::error::UpdateReplicationJobError,
                crate::input::UpdateReplicationJobInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the replication job.</p>
        pub fn replication_job_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.replication_job_id(inp);
            self
        }
        pub fn set_replication_job_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_replication_job_id(input);
            self
        }
        /// <p>The time between consecutive replication runs, in hours.</p>
        pub fn frequency(mut self, inp: i32) -> Self {
            self.inner = self.inner.frequency(inp);
            self
        }
        pub fn set_frequency(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_frequency(input);
            self
        }
        /// <p>The start time of the next replication run.</p>
        pub fn next_replication_run_start_time(mut self, inp: smithy_types::Instant) -> Self {
            self.inner = self.inner.next_replication_run_start_time(inp);
            self
        }
        pub fn set_next_replication_run_start_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_next_replication_run_start_time(input);
            self
        }
        /// <p>The license type to be used for the AMI created by a successful replication
        /// run.</p>
        pub fn license_type(mut self, inp: crate::model::LicenseType) -> Self {
            self.inner = self.inner.license_type(inp);
            self
        }
        pub fn set_license_type(
            mut self,
            input: std::option::Option<crate::model::LicenseType>,
        ) -> Self {
            self.inner = self.inner.set_license_type(input);
            self
        }
        /// <p>The name of the IAM role to be used by AWS SMS.</p>
        pub fn role_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name(inp);
            self
        }
        pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_name(input);
            self
        }
        /// <p>The description of the replication job.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(inp);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The maximum number of SMS-created AMIs to retain. The oldest is deleted after the
        /// maximum number is reached and a new AMI is created.</p>
        pub fn number_of_recent_amis_to_keep(mut self, inp: i32) -> Self {
            self.inner = self.inner.number_of_recent_amis_to_keep(inp);
            self
        }
        pub fn set_number_of_recent_amis_to_keep(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.inner = self.inner.set_number_of_recent_amis_to_keep(input);
            self
        }
        /// <p>When true, the replication job produces encrypted AMIs. For more information,
        /// <code>KmsKeyId</code>.</p>
        pub fn encrypted(mut self, inp: bool) -> Self {
            self.inner = self.inner.encrypted(inp);
            self
        }
        pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_encrypted(input);
            self
        }
        /// <p>The ID of the KMS key for replication jobs that produce encrypted AMIs.
        /// This value can be any of the following:</p>
        /// <ul>
        /// <li>
        /// <p>KMS key ID</p>
        /// </li>
        /// <li>
        /// <p>KMS key alias</p>
        /// </li>
        /// <li>
        /// <p>ARN referring to the KMS key ID</p>
        /// </li>
        /// <li>
        /// <p>ARN referring to the KMS key alias</p>
        /// </li>
        /// </ul>
        /// <p>If encrypted is enabled but a KMS key ID is not specified, the
        /// customer's default KMS key for Amazon EBS is used.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.kms_key_id(inp);
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_kms_key_id(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::new(conn).with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::https().with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
