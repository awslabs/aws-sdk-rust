// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A control condition is an alarm that you specify for a practice run. When you configure practice runs with zonal autoshift for a resource, you specify Amazon CloudWatch alarms, which you create in CloudWatch to use with the practice run. The alarms that you specify are an <i>outcome alarm</i>, to monitor application health during practice runs and, optionally, a <i>blocking alarm</i>, to block practice runs from starting or to interrupt a practice run in progress.</p>
/// <p>Control condition alarms do not apply for autoshifts.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-autoshift.considerations.html"> Considerations when you configure zonal autoshift</a> in the Amazon Route 53 Application Recovery Controller Developer Guide.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ControlCondition {
    /// <p>The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is <code>CLOUDWATCH</code>.</p>
    pub r#type: crate::types::ControlConditionType,
    /// <p>The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.</p>
    pub alarm_identifier: ::std::string::String,
}
impl ControlCondition {
    /// <p>The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is <code>CLOUDWATCH</code>.</p>
    pub fn r#type(&self) -> &crate::types::ControlConditionType {
        &self.r#type
    }
    /// <p>The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.</p>
    pub fn alarm_identifier(&self) -> &str {
        use std::ops::Deref;
        self.alarm_identifier.deref()
    }
}
impl ControlCondition {
    /// Creates a new builder-style object to manufacture [`ControlCondition`](crate::types::ControlCondition).
    pub fn builder() -> crate::types::builders::ControlConditionBuilder {
        crate::types::builders::ControlConditionBuilder::default()
    }
}

/// A builder for [`ControlCondition`](crate::types::ControlCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ControlConditionBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ControlConditionType>,
    pub(crate) alarm_identifier: ::std::option::Option<::std::string::String>,
}
impl ControlConditionBuilder {
    /// <p>The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is <code>CLOUDWATCH</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ControlConditionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is <code>CLOUDWATCH</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ControlConditionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is <code>CLOUDWATCH</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ControlConditionType> {
        &self.r#type
    }
    /// <p>The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.</p>
    /// This field is required.
    pub fn alarm_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alarm_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.</p>
    pub fn set_alarm_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alarm_identifier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.</p>
    pub fn get_alarm_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.alarm_identifier
    }
    /// Consumes the builder and constructs a [`ControlCondition`](crate::types::ControlCondition).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::ControlConditionBuilder::type)
    /// - [`alarm_identifier`](crate::types::builders::ControlConditionBuilder::alarm_identifier)
    pub fn build(self) -> ::std::result::Result<crate::types::ControlCondition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ControlCondition {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ControlCondition",
                )
            })?,
            alarm_identifier: self.alarm_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "alarm_identifier",
                    "alarm_identifier was not specified but it is required when building ControlCondition",
                )
            })?,
        })
    }
}
