// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartZonalShiftInput {
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    #[doc(hidden)]
    pub resource_identifier: std::option::Option<std::string::String>,
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    #[doc(hidden)]
    pub away_from: std::option::Option<std::string::String>,
    /// <p>The length of time that you want a zonal shift to be active, which Route 53 ARC converts to an expiry time (expiration time). Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours).</p>
    /// <p>If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p>
    /// <p>To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:</p>
    /// <ul>
    /// <li> <p> <b>A lowercase letter m:</b> To specify that the value is in minutes.</p> </li>
    /// <li> <p> <b>A lowercase letter h:</b> To specify that the value is in hours.</p> </li>
    /// </ul>
    /// <p>For example: <code>20h</code> means the zonal shift expires in 20 hours. <code>120m</code> means the zonal shift expires in 120 minutes (2 hours).</p>
    #[doc(hidden)]
    pub expires_in: std::option::Option<std::string::String>,
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
}
impl StartZonalShiftInput {
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    pub fn resource_identifier(&self) -> std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    pub fn away_from(&self) -> std::option::Option<&str> {
        self.away_from.as_deref()
    }
    /// <p>The length of time that you want a zonal shift to be active, which Route 53 ARC converts to an expiry time (expiration time). Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours).</p>
    /// <p>If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p>
    /// <p>To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:</p>
    /// <ul>
    /// <li> <p> <b>A lowercase letter m:</b> To specify that the value is in minutes.</p> </li>
    /// <li> <p> <b>A lowercase letter h:</b> To specify that the value is in hours.</p> </li>
    /// </ul>
    /// <p>For example: <code>20h</code> means the zonal shift expires in 20 hours. <code>120m</code> means the zonal shift expires in 120 minutes (2 hours).</p>
    pub fn expires_in(&self) -> std::option::Option<&str> {
        self.expires_in.as_deref()
    }
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
}
impl StartZonalShiftInput {
    /// Creates a new builder-style object to manufacture [`StartZonalShiftInput`](crate::operation::start_zonal_shift::StartZonalShiftInput).
    pub fn builder() -> crate::operation::start_zonal_shift::builders::StartZonalShiftInputBuilder {
        crate::operation::start_zonal_shift::builders::StartZonalShiftInputBuilder::default()
    }
}

/// A builder for [`StartZonalShiftInput`](crate::operation::start_zonal_shift::StartZonalShiftInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartZonalShiftInputBuilder {
    pub(crate) resource_identifier: std::option::Option<std::string::String>,
    pub(crate) away_from: std::option::Option<std::string::String>,
    pub(crate) expires_in: std::option::Option<std::string::String>,
    pub(crate) comment: std::option::Option<std::string::String>,
}
impl StartZonalShiftInputBuilder {
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    pub fn resource_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_identifier = Some(input.into());
        self
    }
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    pub fn set_resource_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    pub fn away_from(mut self, input: impl Into<std::string::String>) -> Self {
        self.away_from = Some(input.into());
        self
    }
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    pub fn set_away_from(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.away_from = input;
        self
    }
    /// <p>The length of time that you want a zonal shift to be active, which Route 53 ARC converts to an expiry time (expiration time). Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours).</p>
    /// <p>If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p>
    /// <p>To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:</p>
    /// <ul>
    /// <li> <p> <b>A lowercase letter m:</b> To specify that the value is in minutes.</p> </li>
    /// <li> <p> <b>A lowercase letter h:</b> To specify that the value is in hours.</p> </li>
    /// </ul>
    /// <p>For example: <code>20h</code> means the zonal shift expires in 20 hours. <code>120m</code> means the zonal shift expires in 120 minutes (2 hours).</p>
    pub fn expires_in(mut self, input: impl Into<std::string::String>) -> Self {
        self.expires_in = Some(input.into());
        self
    }
    /// <p>The length of time that you want a zonal shift to be active, which Route 53 ARC converts to an expiry time (expiration time). Zonal shifts are temporary. You can set a zonal shift to be active initially for up to three days (72 hours).</p>
    /// <p>If you want to still keep traffic away from an Availability Zone, you can update the zonal shift and set a new expiration. You can also cancel a zonal shift, before it expires, for example, if you're ready to restore traffic to the Availability Zone.</p>
    /// <p>To set a length of time for a zonal shift to be active, specify a whole number, and then one of the following, with no space:</p>
    /// <ul>
    /// <li> <p> <b>A lowercase letter m:</b> To specify that the value is in minutes.</p> </li>
    /// <li> <p> <b>A lowercase letter h:</b> To specify that the value is in hours.</p> </li>
    /// </ul>
    /// <p>For example: <code>20h</code> means the zonal shift expires in 20 hours. <code>120m</code> means the zonal shift expires in 120 minutes (2 hours).</p>
    pub fn set_expires_in(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expires_in = input;
        self
    }
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// Consumes the builder and constructs a [`StartZonalShiftInput`](crate::operation::start_zonal_shift::StartZonalShiftInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_zonal_shift::StartZonalShiftInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::start_zonal_shift::StartZonalShiftInput {
            resource_identifier: self.resource_identifier,
            away_from: self.away_from,
            expires_in: self.expires_in,
            comment: self.comment,
        })
    }
}
