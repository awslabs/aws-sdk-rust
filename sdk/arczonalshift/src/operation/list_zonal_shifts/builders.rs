// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_zonal_shifts::_list_zonal_shifts_output::ListZonalShiftsOutputBuilder;

pub use crate::operation::list_zonal_shifts::_list_zonal_shifts_input::ListZonalShiftsInputBuilder;

/// Fluent builder constructing a request to `ListZonalShifts`.
///
/// <p>Lists all the active zonal shifts in Amazon Route 53 Application Recovery Controller in your AWS account in this AWS Region.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListZonalShiftsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_zonal_shifts::builders::ListZonalShiftsInputBuilder,
}
impl ListZonalShiftsFluentBuilder {
    /// Creates a new `ListZonalShifts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_zonal_shifts::ListZonalShifts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_zonal_shifts::ListZonalShiftsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_zonal_shifts::ListZonalShiftsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_zonal_shifts::ListZonalShiftsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_zonal_shifts::paginator::ListZonalShiftsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_zonal_shifts::paginator::ListZonalShiftsPaginator {
        crate::operation::list_zonal_shifts::paginator::ListZonalShiftsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A status for a zonal shift.</p>
    /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE</b>: The zonal shift is started and active.</p> </li>
    /// <li> <p> <b>EXPIRED</b>: The zonal shift has expired (the expiry time was exceeded).</p> </li>
    /// <li> <p> <b>CANCELED</b>: The zonal shift was canceled.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ZonalShiftStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>A status for a zonal shift.</p>
    /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE</b>: The zonal shift is started and active.</p> </li>
    /// <li> <p> <b>EXPIRED</b>: The zonal shift has expired (the expiry time was exceeded).</p> </li>
    /// <li> <p> <b>CANCELED</b>: The zonal shift was canceled.</p> </li>
    /// </ul>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ZonalShiftStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The number of objects that you want to return with this call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The number of objects that you want to return with this call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
