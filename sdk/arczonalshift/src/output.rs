// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartZonalShiftOutput {
    /// <p>The identifier of a zonal shift.</p>
    #[doc(hidden)]
    pub zonal_shift_id: std::option::Option<std::string::String>,
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    #[doc(hidden)]
    pub resource_identifier: std::option::Option<std::string::String>,
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    #[doc(hidden)]
    pub away_from: std::option::Option<std::string::String>,
    /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
    /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
    #[doc(hidden)]
    pub expiry_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time (UTC) when the zonal shift is started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A status for a zonal shift.</p>
    /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
    /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
    /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ZonalShiftStatus>,
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
}
impl StartZonalShiftOutput {
    /// <p>The identifier of a zonal shift.</p>
    pub fn zonal_shift_id(&self) -> std::option::Option<&str> {
        self.zonal_shift_id.as_deref()
    }
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    pub fn resource_identifier(&self) -> std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    pub fn away_from(&self) -> std::option::Option<&str> {
        self.away_from.as_deref()
    }
    /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
    /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
    pub fn expiry_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiry_time.as_ref()
    }
    /// <p>The time (UTC) when the zonal shift is started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>A status for a zonal shift.</p>
    /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
    /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
    /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::model::ZonalShiftStatus> {
        self.status.as_ref()
    }
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
}
/// See [`StartZonalShiftOutput`](crate::output::StartZonalShiftOutput).
pub mod start_zonal_shift_output {

    /// A builder for [`StartZonalShiftOutput`](crate::output::StartZonalShiftOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) zonal_shift_id: std::option::Option<std::string::String>,
        pub(crate) resource_identifier: std::option::Option<std::string::String>,
        pub(crate) away_from: std::option::Option<std::string::String>,
        pub(crate) expiry_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status: std::option::Option<crate::model::ZonalShiftStatus>,
        pub(crate) comment: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of a zonal shift.</p>
        pub fn zonal_shift_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.zonal_shift_id = Some(input.into());
            self
        }
        /// <p>The identifier of a zonal shift.</p>
        pub fn set_zonal_shift_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.zonal_shift_id = input;
            self
        }
        /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
        /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
        pub fn resource_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_identifier = Some(input.into());
            self
        }
        /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
        /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
        pub fn set_resource_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_identifier = input;
            self
        }
        /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
        pub fn away_from(mut self, input: impl Into<std::string::String>) -> Self {
            self.away_from = Some(input.into());
            self
        }
        /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
        pub fn set_away_from(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.away_from = input;
            self
        }
        /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
        /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
        pub fn expiry_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.expiry_time = Some(input);
            self
        }
        /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
        /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
        pub fn set_expiry_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.expiry_time = input;
            self
        }
        /// <p>The time (UTC) when the zonal shift is started.</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The time (UTC) when the zonal shift is started.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        /// <p>A status for a zonal shift.</p>
        /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
        /// <ul>
        /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
        /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
        /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
        /// </ul>
        pub fn status(mut self, input: crate::model::ZonalShiftStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>A status for a zonal shift.</p>
        /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
        /// <ul>
        /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
        /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
        /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
        /// </ul>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ZonalShiftStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
        pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
            self.comment = Some(input.into());
            self
        }
        /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
        pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.comment = input;
            self
        }
        /// Consumes the builder and constructs a [`StartZonalShiftOutput`](crate::output::StartZonalShiftOutput).
        pub fn build(self) -> crate::output::StartZonalShiftOutput {
            crate::output::StartZonalShiftOutput {
                zonal_shift_id: self.zonal_shift_id,
                resource_identifier: self.resource_identifier,
                away_from: self.away_from,
                expiry_time: self.expiry_time,
                start_time: self.start_time,
                status: self.status,
                comment: self.comment,
            }
        }
    }
}
impl StartZonalShiftOutput {
    /// Creates a new builder-style object to manufacture [`StartZonalShiftOutput`](crate::output::StartZonalShiftOutput).
    pub fn builder() -> crate::output::start_zonal_shift_output::Builder {
        crate::output::start_zonal_shift_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListZonalShiftsOutput {
    /// <p>The items in the response list.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::ZonalShiftSummary>>,
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListZonalShiftsOutput {
    /// <p>The items in the response list.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::ZonalShiftSummary]> {
        self.items.as_deref()
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListZonalShiftsOutput`](crate::output::ListZonalShiftsOutput).
pub mod list_zonal_shifts_output {

    /// A builder for [`ListZonalShiftsOutput`](crate::output::ListZonalShiftsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) items: std::option::Option<std::vec::Vec<crate::model::ZonalShiftSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>The items in the response list.</p>
        pub fn items(mut self, input: crate::model::ZonalShiftSummary) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>The items in the response list.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ZonalShiftSummary>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListZonalShiftsOutput`](crate::output::ListZonalShiftsOutput).
        pub fn build(self) -> crate::output::ListZonalShiftsOutput {
            crate::output::ListZonalShiftsOutput {
                items: self.items,
                next_token: self.next_token,
            }
        }
    }
}
impl ListZonalShiftsOutput {
    /// Creates a new builder-style object to manufacture [`ListZonalShiftsOutput`](crate::output::ListZonalShiftsOutput).
    pub fn builder() -> crate::output::list_zonal_shifts_output::Builder {
        crate::output::list_zonal_shifts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateZonalShiftOutput {
    /// <p>The identifier of a zonal shift.</p>
    #[doc(hidden)]
    pub zonal_shift_id: std::option::Option<std::string::String>,
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    #[doc(hidden)]
    pub resource_identifier: std::option::Option<std::string::String>,
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    #[doc(hidden)]
    pub away_from: std::option::Option<std::string::String>,
    /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
    /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
    #[doc(hidden)]
    pub expiry_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time (UTC) when the zonal shift is started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A status for a zonal shift.</p>
    /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
    /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
    /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ZonalShiftStatus>,
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
}
impl UpdateZonalShiftOutput {
    /// <p>The identifier of a zonal shift.</p>
    pub fn zonal_shift_id(&self) -> std::option::Option<&str> {
        self.zonal_shift_id.as_deref()
    }
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    pub fn resource_identifier(&self) -> std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    pub fn away_from(&self) -> std::option::Option<&str> {
        self.away_from.as_deref()
    }
    /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
    /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
    pub fn expiry_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiry_time.as_ref()
    }
    /// <p>The time (UTC) when the zonal shift is started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>A status for a zonal shift.</p>
    /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
    /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
    /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::model::ZonalShiftStatus> {
        self.status.as_ref()
    }
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
}
/// See [`UpdateZonalShiftOutput`](crate::output::UpdateZonalShiftOutput).
pub mod update_zonal_shift_output {

    /// A builder for [`UpdateZonalShiftOutput`](crate::output::UpdateZonalShiftOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) zonal_shift_id: std::option::Option<std::string::String>,
        pub(crate) resource_identifier: std::option::Option<std::string::String>,
        pub(crate) away_from: std::option::Option<std::string::String>,
        pub(crate) expiry_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status: std::option::Option<crate::model::ZonalShiftStatus>,
        pub(crate) comment: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of a zonal shift.</p>
        pub fn zonal_shift_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.zonal_shift_id = Some(input.into());
            self
        }
        /// <p>The identifier of a zonal shift.</p>
        pub fn set_zonal_shift_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.zonal_shift_id = input;
            self
        }
        /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
        /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
        pub fn resource_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_identifier = Some(input.into());
            self
        }
        /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
        /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
        pub fn set_resource_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_identifier = input;
            self
        }
        /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
        pub fn away_from(mut self, input: impl Into<std::string::String>) -> Self {
            self.away_from = Some(input.into());
            self
        }
        /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
        pub fn set_away_from(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.away_from = input;
            self
        }
        /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
        /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
        pub fn expiry_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.expiry_time = Some(input);
            self
        }
        /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
        /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
        pub fn set_expiry_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.expiry_time = input;
            self
        }
        /// <p>The time (UTC) when the zonal shift is started.</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The time (UTC) when the zonal shift is started.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        /// <p>A status for a zonal shift.</p>
        /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
        /// <ul>
        /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
        /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
        /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
        /// </ul>
        pub fn status(mut self, input: crate::model::ZonalShiftStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>A status for a zonal shift.</p>
        /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
        /// <ul>
        /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
        /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
        /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
        /// </ul>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ZonalShiftStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
        pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
            self.comment = Some(input.into());
            self
        }
        /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
        pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.comment = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateZonalShiftOutput`](crate::output::UpdateZonalShiftOutput).
        pub fn build(self) -> crate::output::UpdateZonalShiftOutput {
            crate::output::UpdateZonalShiftOutput {
                zonal_shift_id: self.zonal_shift_id,
                resource_identifier: self.resource_identifier,
                away_from: self.away_from,
                expiry_time: self.expiry_time,
                start_time: self.start_time,
                status: self.status,
                comment: self.comment,
            }
        }
    }
}
impl UpdateZonalShiftOutput {
    /// Creates a new builder-style object to manufacture [`UpdateZonalShiftOutput`](crate::output::UpdateZonalShiftOutput).
    pub fn builder() -> crate::output::update_zonal_shift_output::Builder {
        crate::output::update_zonal_shift_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelZonalShiftOutput {
    /// <p>The identifier of a zonal shift.</p>
    #[doc(hidden)]
    pub zonal_shift_id: std::option::Option<std::string::String>,
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    #[doc(hidden)]
    pub resource_identifier: std::option::Option<std::string::String>,
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    #[doc(hidden)]
    pub away_from: std::option::Option<std::string::String>,
    /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
    /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
    #[doc(hidden)]
    pub expiry_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time (UTC) when the zonal shift is started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A status for a zonal shift.</p>
    /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
    /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
    /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ZonalShiftStatus>,
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
}
impl CancelZonalShiftOutput {
    /// <p>The identifier of a zonal shift.</p>
    pub fn zonal_shift_id(&self) -> std::option::Option<&str> {
        self.zonal_shift_id.as_deref()
    }
    /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
    /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
    pub fn resource_identifier(&self) -> std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
    pub fn away_from(&self) -> std::option::Option<&str> {
        self.away_from.as_deref()
    }
    /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
    /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
    pub fn expiry_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiry_time.as_ref()
    }
    /// <p>The time (UTC) when the zonal shift is started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>A status for a zonal shift.</p>
    /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
    /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
    /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::model::ZonalShiftStatus> {
        self.status.as_ref()
    }
    /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
}
/// See [`CancelZonalShiftOutput`](crate::output::CancelZonalShiftOutput).
pub mod cancel_zonal_shift_output {

    /// A builder for [`CancelZonalShiftOutput`](crate::output::CancelZonalShiftOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) zonal_shift_id: std::option::Option<std::string::String>,
        pub(crate) resource_identifier: std::option::Option<std::string::String>,
        pub(crate) away_from: std::option::Option<std::string::String>,
        pub(crate) expiry_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status: std::option::Option<crate::model::ZonalShiftStatus>,
        pub(crate) comment: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of a zonal shift.</p>
        pub fn zonal_shift_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.zonal_shift_id = Some(input.into());
            self
        }
        /// <p>The identifier of a zonal shift.</p>
        pub fn set_zonal_shift_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.zonal_shift_id = input;
            self
        }
        /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
        /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
        pub fn resource_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_identifier = Some(input.into());
            self
        }
        /// <p>The identifier for the resource to include in a zonal shift. The identifier is the Amazon Resource Name (ARN) for the resource.</p>
        /// <p>At this time, you can only start a zonal shift for Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.</p>
        pub fn set_resource_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_identifier = input;
            self
        }
        /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
        pub fn away_from(mut self, input: impl Into<std::string::String>) -> Self {
            self.away_from = Some(input.into());
            self
        }
        /// <p>The Availability Zone that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the AWS Region.</p>
        pub fn set_away_from(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.away_from = input;
            self
        }
        /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
        /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
        pub fn expiry_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.expiry_time = Some(input);
            self
        }
        /// <p>The expiry time (expiration time) for the zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time. </p>
        /// <p>When you start a zonal shift, you specify how long you want it to be active, which Route 53 ARC converts to an expiry time (expiration time). You can cancel a zonal shift, for example, if you're ready to restore traffic to the Availability Zone. Or you can update the zonal shift to specify another length of time to expire in.</p>
        pub fn set_expiry_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.expiry_time = input;
            self
        }
        /// <p>The time (UTC) when the zonal shift is started.</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The time (UTC) when the zonal shift is started.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        /// <p>A status for a zonal shift.</p>
        /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
        /// <ul>
        /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
        /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
        /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
        /// </ul>
        pub fn status(mut self, input: crate::model::ZonalShiftStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>A status for a zonal shift.</p>
        /// <p>The <code>Status</code> for a zonal shift can have one of the following values:</p>
        /// <ul>
        /// <li> <p> <b>ACTIVE:</b> The zonal shift is started and active.</p> </li>
        /// <li> <p> <b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p> </li>
        /// <li> <p> <b>CANCELED:</b> The zonal shift was canceled.</p> </li>
        /// </ul>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ZonalShiftStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
        pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
            self.comment = Some(input.into());
            self
        }
        /// <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
        pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.comment = input;
            self
        }
        /// Consumes the builder and constructs a [`CancelZonalShiftOutput`](crate::output::CancelZonalShiftOutput).
        pub fn build(self) -> crate::output::CancelZonalShiftOutput {
            crate::output::CancelZonalShiftOutput {
                zonal_shift_id: self.zonal_shift_id,
                resource_identifier: self.resource_identifier,
                away_from: self.away_from,
                expiry_time: self.expiry_time,
                start_time: self.start_time,
                status: self.status,
                comment: self.comment,
            }
        }
    }
}
impl CancelZonalShiftOutput {
    /// Creates a new builder-style object to manufacture [`CancelZonalShiftOutput`](crate::output::CancelZonalShiftOutput).
    pub fn builder() -> crate::output::cancel_zonal_shift_output::Builder {
        crate::output::cancel_zonal_shift_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListManagedResourcesOutput {
    /// <p>The items in the response list.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::ManagedResourceSummary>>,
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListManagedResourcesOutput {
    /// <p>The items in the response list.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::ManagedResourceSummary]> {
        self.items.as_deref()
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListManagedResourcesOutput`](crate::output::ListManagedResourcesOutput).
pub mod list_managed_resources_output {

    /// A builder for [`ListManagedResourcesOutput`](crate::output::ListManagedResourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) items: std::option::Option<std::vec::Vec<crate::model::ManagedResourceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>The items in the response list.</p>
        pub fn items(mut self, input: crate::model::ManagedResourceSummary) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>The items in the response list.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ManagedResourceSummary>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListManagedResourcesOutput`](crate::output::ListManagedResourcesOutput).
        pub fn build(self) -> crate::output::ListManagedResourcesOutput {
            crate::output::ListManagedResourcesOutput {
                items: self.items,
                next_token: self.next_token,
            }
        }
    }
}
impl ListManagedResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListManagedResourcesOutput`](crate::output::ListManagedResourcesOutput).
    pub fn builder() -> crate::output::list_managed_resources_output::Builder {
        crate::output::list_managed_resources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetManagedResourceOutput {
    /// <p>The Amazon Resource Name (ARN) for the resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A collection of key-value pairs that indicate whether resources are active in Availability Zones or not. The key name is the Availability Zone where the resource is deployed. The value is 1 or 0.</p>
    #[doc(hidden)]
    pub applied_weights: std::option::Option<std::collections::HashMap<std::string::String, f32>>,
    /// <p>The zonal shifts that are currently active for a resource. </p>
    #[doc(hidden)]
    pub zonal_shifts: std::option::Option<std::vec::Vec<crate::model::ZonalShiftInResource>>,
}
impl GetManagedResourceOutput {
    /// <p>The Amazon Resource Name (ARN) for the resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A collection of key-value pairs that indicate whether resources are active in Availability Zones or not. The key name is the Availability Zone where the resource is deployed. The value is 1 or 0.</p>
    pub fn applied_weights(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, f32>> {
        self.applied_weights.as_ref()
    }
    /// <p>The zonal shifts that are currently active for a resource. </p>
    pub fn zonal_shifts(&self) -> std::option::Option<&[crate::model::ZonalShiftInResource]> {
        self.zonal_shifts.as_deref()
    }
}
/// See [`GetManagedResourceOutput`](crate::output::GetManagedResourceOutput).
pub mod get_managed_resource_output {

    /// A builder for [`GetManagedResourceOutput`](crate::output::GetManagedResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) applied_weights:
            std::option::Option<std::collections::HashMap<std::string::String, f32>>,
        pub(crate) zonal_shifts:
            std::option::Option<std::vec::Vec<crate::model::ZonalShiftInResource>>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) for the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the resource.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the resource.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Adds a key-value pair to `applied_weights`.
        ///
        /// To override the contents of this collection use [`set_applied_weights`](Self::set_applied_weights).
        ///
        /// <p>A collection of key-value pairs that indicate whether resources are active in Availability Zones or not. The key name is the Availability Zone where the resource is deployed. The value is 1 or 0.</p>
        pub fn applied_weights(mut self, k: impl Into<std::string::String>, v: f32) -> Self {
            let mut hash_map = self.applied_weights.unwrap_or_default();
            hash_map.insert(k.into(), v);
            self.applied_weights = Some(hash_map);
            self
        }
        /// <p>A collection of key-value pairs that indicate whether resources are active in Availability Zones or not. The key name is the Availability Zone where the resource is deployed. The value is 1 or 0.</p>
        pub fn set_applied_weights(
            mut self,
            input: std::option::Option<std::collections::HashMap<std::string::String, f32>>,
        ) -> Self {
            self.applied_weights = input;
            self
        }
        /// Appends an item to `zonal_shifts`.
        ///
        /// To override the contents of this collection use [`set_zonal_shifts`](Self::set_zonal_shifts).
        ///
        /// <p>The zonal shifts that are currently active for a resource. </p>
        pub fn zonal_shifts(mut self, input: crate::model::ZonalShiftInResource) -> Self {
            let mut v = self.zonal_shifts.unwrap_or_default();
            v.push(input);
            self.zonal_shifts = Some(v);
            self
        }
        /// <p>The zonal shifts that are currently active for a resource. </p>
        pub fn set_zonal_shifts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ZonalShiftInResource>>,
        ) -> Self {
            self.zonal_shifts = input;
            self
        }
        /// Consumes the builder and constructs a [`GetManagedResourceOutput`](crate::output::GetManagedResourceOutput).
        pub fn build(self) -> crate::output::GetManagedResourceOutput {
            crate::output::GetManagedResourceOutput {
                arn: self.arn,
                name: self.name,
                applied_weights: self.applied_weights,
                zonal_shifts: self.zonal_shifts,
            }
        }
    }
}
impl GetManagedResourceOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedResourceOutput`](crate::output::GetManagedResourceOutput).
    pub fn builder() -> crate::output::get_managed_resource_output::Builder {
        crate::output::get_managed_resource_output::Builder::default()
    }
}
