// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CancelZonalShift`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`cancel_zonal_shift`](crate::client::fluent_builders::CancelZonalShift).
///
/// `ParseStrictResponse` impl for `CancelZonalShift`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CancelZonalShift {
    _private: (),
}
impl CancelZonalShift {
    /// Creates a new builder-style object to manufacture [`CancelZonalShiftInput`](crate::input::CancelZonalShiftInput).
    pub fn builder() -> crate::input::cancel_zonal_shift_input::Builder {
        crate::input::cancel_zonal_shift_input::Builder::default()
    }
    /// Creates a new `CancelZonalShift` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CancelZonalShift {
    type Output = std::result::Result<
        crate::output::CancelZonalShiftOutput,
        crate::error::CancelZonalShiftError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_zonal_shift_error(response)
        } else {
            crate::operation_deser::parse_cancel_zonal_shift_response(response)
        }
    }
}

/// Operation shape for `GetManagedResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_managed_resource`](crate::client::fluent_builders::GetManagedResource).
///
/// `ParseStrictResponse` impl for `GetManagedResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetManagedResource {
    _private: (),
}
impl GetManagedResource {
    /// Creates a new builder-style object to manufacture [`GetManagedResourceInput`](crate::input::GetManagedResourceInput).
    pub fn builder() -> crate::input::get_managed_resource_input::Builder {
        crate::input::get_managed_resource_input::Builder::default()
    }
    /// Creates a new `GetManagedResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetManagedResource {
    type Output = std::result::Result<
        crate::output::GetManagedResourceOutput,
        crate::error::GetManagedResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_managed_resource_error(response)
        } else {
            crate::operation_deser::parse_get_managed_resource_response(response)
        }
    }
}

/// Operation shape for `ListManagedResources`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_managed_resources`](crate::client::fluent_builders::ListManagedResources).
///
/// `ParseStrictResponse` impl for `ListManagedResources`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListManagedResources {
    _private: (),
}
impl ListManagedResources {
    /// Creates a new builder-style object to manufacture [`ListManagedResourcesInput`](crate::input::ListManagedResourcesInput).
    pub fn builder() -> crate::input::list_managed_resources_input::Builder {
        crate::input::list_managed_resources_input::Builder::default()
    }
    /// Creates a new `ListManagedResources` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListManagedResources {
    type Output = std::result::Result<
        crate::output::ListManagedResourcesOutput,
        crate::error::ListManagedResourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_managed_resources_error(response)
        } else {
            crate::operation_deser::parse_list_managed_resources_response(response)
        }
    }
}

/// Operation shape for `ListZonalShifts`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_zonal_shifts`](crate::client::fluent_builders::ListZonalShifts).
///
/// `ParseStrictResponse` impl for `ListZonalShifts`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListZonalShifts {
    _private: (),
}
impl ListZonalShifts {
    /// Creates a new builder-style object to manufacture [`ListZonalShiftsInput`](crate::input::ListZonalShiftsInput).
    pub fn builder() -> crate::input::list_zonal_shifts_input::Builder {
        crate::input::list_zonal_shifts_input::Builder::default()
    }
    /// Creates a new `ListZonalShifts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListZonalShifts {
    type Output = std::result::Result<
        crate::output::ListZonalShiftsOutput,
        crate::error::ListZonalShiftsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_zonal_shifts_error(response)
        } else {
            crate::operation_deser::parse_list_zonal_shifts_response(response)
        }
    }
}

/// Operation shape for `StartZonalShift`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_zonal_shift`](crate::client::fluent_builders::StartZonalShift).
///
/// `ParseStrictResponse` impl for `StartZonalShift`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartZonalShift {
    _private: (),
}
impl StartZonalShift {
    /// Creates a new builder-style object to manufacture [`StartZonalShiftInput`](crate::input::StartZonalShiftInput).
    pub fn builder() -> crate::input::start_zonal_shift_input::Builder {
        crate::input::start_zonal_shift_input::Builder::default()
    }
    /// Creates a new `StartZonalShift` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartZonalShift {
    type Output = std::result::Result<
        crate::output::StartZonalShiftOutput,
        crate::error::StartZonalShiftError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_start_zonal_shift_error(response)
        } else {
            crate::operation_deser::parse_start_zonal_shift_response(response)
        }
    }
}

/// Operation shape for `UpdateZonalShift`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_zonal_shift`](crate::client::fluent_builders::UpdateZonalShift).
///
/// `ParseStrictResponse` impl for `UpdateZonalShift`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateZonalShift {
    _private: (),
}
impl UpdateZonalShift {
    /// Creates a new builder-style object to manufacture [`UpdateZonalShiftInput`](crate::input::UpdateZonalShiftInput).
    pub fn builder() -> crate::input::update_zonal_shift_input::Builder {
        crate::input::update_zonal_shift_input::Builder::default()
    }
    /// Creates a new `UpdateZonalShift` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateZonalShift {
    type Output = std::result::Result<
        crate::output::UpdateZonalShiftOutput,
        crate::error::UpdateZonalShiftError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_zonal_shift_error(response)
        } else {
            crate::operation_deser::parse_update_zonal_shift_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
