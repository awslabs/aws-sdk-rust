// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a Slack workspace that you added to an Amazon Web Services account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlackWorkspaceConfiguration {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub team_id: ::std::string::String,
    /// <p>The name of the Slack workspace.</p>
    pub team_name: ::std::option::Option<::std::string::String>,
    /// <p>Whether to allow member accounts to authorize Slack workspaces. Member accounts must be part of an organization in Organizations.</p>
    pub allow_organization_member_account: ::std::option::Option<bool>,
}
impl SlackWorkspaceConfiguration {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn team_id(&self) -> &str {
        use std::ops::Deref;
        self.team_id.deref()
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn team_name(&self) -> ::std::option::Option<&str> {
        self.team_name.as_deref()
    }
    /// <p>Whether to allow member accounts to authorize Slack workspaces. Member accounts must be part of an organization in Organizations.</p>
    pub fn allow_organization_member_account(&self) -> ::std::option::Option<bool> {
        self.allow_organization_member_account
    }
}
impl SlackWorkspaceConfiguration {
    /// Creates a new builder-style object to manufacture [`SlackWorkspaceConfiguration`](crate::types::SlackWorkspaceConfiguration).
    pub fn builder() -> crate::types::builders::SlackWorkspaceConfigurationBuilder {
        crate::types::builders::SlackWorkspaceConfigurationBuilder::default()
    }
}

/// A builder for [`SlackWorkspaceConfiguration`](crate::types::SlackWorkspaceConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SlackWorkspaceConfigurationBuilder {
    pub(crate) team_id: ::std::option::Option<::std::string::String>,
    pub(crate) team_name: ::std::option::Option<::std::string::String>,
    pub(crate) allow_organization_member_account: ::std::option::Option<bool>,
}
impl SlackWorkspaceConfigurationBuilder {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    /// This field is required.
    pub fn team_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.team_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn set_team_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.team_id = input;
        self
    }
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn get_team_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.team_id
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn team_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.team_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn set_team_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.team_name = input;
        self
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn get_team_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.team_name
    }
    /// <p>Whether to allow member accounts to authorize Slack workspaces. Member accounts must be part of an organization in Organizations.</p>
    pub fn allow_organization_member_account(mut self, input: bool) -> Self {
        self.allow_organization_member_account = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to allow member accounts to authorize Slack workspaces. Member accounts must be part of an organization in Organizations.</p>
    pub fn set_allow_organization_member_account(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_organization_member_account = input;
        self
    }
    /// <p>Whether to allow member accounts to authorize Slack workspaces. Member accounts must be part of an organization in Organizations.</p>
    pub fn get_allow_organization_member_account(&self) -> &::std::option::Option<bool> {
        &self.allow_organization_member_account
    }
    /// Consumes the builder and constructs a [`SlackWorkspaceConfiguration`](crate::types::SlackWorkspaceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`team_id`](crate::types::builders::SlackWorkspaceConfigurationBuilder::team_id)
    pub fn build(self) -> ::std::result::Result<crate::types::SlackWorkspaceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SlackWorkspaceConfiguration {
            team_id: self.team_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "team_id",
                    "team_id was not specified but it is required when building SlackWorkspaceConfiguration",
                )
            })?,
            team_name: self.team_name,
            allow_organization_member_account: self.allow_organization_member_account,
        })
    }
}
