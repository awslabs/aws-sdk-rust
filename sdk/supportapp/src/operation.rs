// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateSlackChannelConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_slack_channel_configuration`](crate::client::fluent_builders::CreateSlackChannelConfiguration).
///
/// `ParseStrictResponse` impl for `CreateSlackChannelConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateSlackChannelConfiguration {
    _private: (),
}
impl CreateSlackChannelConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateSlackChannelConfigurationInput`](crate::input::CreateSlackChannelConfigurationInput).
    pub fn builder() -> crate::input::create_slack_channel_configuration_input::Builder {
        crate::input::create_slack_channel_configuration_input::Builder::default()
    }
    /// Creates a new `CreateSlackChannelConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSlackChannelConfiguration {
    type Output = std::result::Result<
        crate::output::CreateSlackChannelConfigurationOutput,
        crate::error::CreateSlackChannelConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_slack_channel_configuration_error(response)
        } else {
            crate::operation_deser::parse_create_slack_channel_configuration_response(response)
        }
    }
}

/// Operation shape for `DeleteAccountAlias`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_account_alias`](crate::client::fluent_builders::DeleteAccountAlias).
///
/// `ParseStrictResponse` impl for `DeleteAccountAlias`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAccountAlias {
    _private: (),
}
impl DeleteAccountAlias {
    /// Creates a new builder-style object to manufacture [`DeleteAccountAliasInput`](crate::input::DeleteAccountAliasInput).
    pub fn builder() -> crate::input::delete_account_alias_input::Builder {
        crate::input::delete_account_alias_input::Builder::default()
    }
    /// Creates a new `DeleteAccountAlias` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAccountAlias {
    type Output = std::result::Result<
        crate::output::DeleteAccountAliasOutput,
        crate::error::DeleteAccountAliasError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_account_alias_error(response)
        } else {
            crate::operation_deser::parse_delete_account_alias_response(response)
        }
    }
}

/// Operation shape for `DeleteSlackChannelConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_slack_channel_configuration`](crate::client::fluent_builders::DeleteSlackChannelConfiguration).
///
/// `ParseStrictResponse` impl for `DeleteSlackChannelConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSlackChannelConfiguration {
    _private: (),
}
impl DeleteSlackChannelConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteSlackChannelConfigurationInput`](crate::input::DeleteSlackChannelConfigurationInput).
    pub fn builder() -> crate::input::delete_slack_channel_configuration_input::Builder {
        crate::input::delete_slack_channel_configuration_input::Builder::default()
    }
    /// Creates a new `DeleteSlackChannelConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSlackChannelConfiguration {
    type Output = std::result::Result<
        crate::output::DeleteSlackChannelConfigurationOutput,
        crate::error::DeleteSlackChannelConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_slack_channel_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_slack_channel_configuration_response(response)
        }
    }
}

/// Operation shape for `DeleteSlackWorkspaceConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_slack_workspace_configuration`](crate::client::fluent_builders::DeleteSlackWorkspaceConfiguration).
///
/// `ParseStrictResponse` impl for `DeleteSlackWorkspaceConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSlackWorkspaceConfiguration {
    _private: (),
}
impl DeleteSlackWorkspaceConfiguration {
    /// Creates a new builder-style object to manufacture [`DeleteSlackWorkspaceConfigurationInput`](crate::input::DeleteSlackWorkspaceConfigurationInput).
    pub fn builder() -> crate::input::delete_slack_workspace_configuration_input::Builder {
        crate::input::delete_slack_workspace_configuration_input::Builder::default()
    }
    /// Creates a new `DeleteSlackWorkspaceConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSlackWorkspaceConfiguration {
    type Output = std::result::Result<
        crate::output::DeleteSlackWorkspaceConfigurationOutput,
        crate::error::DeleteSlackWorkspaceConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_slack_workspace_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_slack_workspace_configuration_response(response)
        }
    }
}

/// Operation shape for `GetAccountAlias`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_account_alias`](crate::client::fluent_builders::GetAccountAlias).
///
/// `ParseStrictResponse` impl for `GetAccountAlias`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAccountAlias {
    _private: (),
}
impl GetAccountAlias {
    /// Creates a new builder-style object to manufacture [`GetAccountAliasInput`](crate::input::GetAccountAliasInput).
    pub fn builder() -> crate::input::get_account_alias_input::Builder {
        crate::input::get_account_alias_input::Builder::default()
    }
    /// Creates a new `GetAccountAlias` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAccountAlias {
    type Output = std::result::Result<
        crate::output::GetAccountAliasOutput,
        crate::error::GetAccountAliasError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_account_alias_error(response)
        } else {
            crate::operation_deser::parse_get_account_alias_response(response)
        }
    }
}

/// Operation shape for `ListSlackChannelConfigurations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_slack_channel_configurations`](crate::client::fluent_builders::ListSlackChannelConfigurations).
///
/// `ParseStrictResponse` impl for `ListSlackChannelConfigurations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSlackChannelConfigurations {
    _private: (),
}
impl ListSlackChannelConfigurations {
    /// Creates a new builder-style object to manufacture [`ListSlackChannelConfigurationsInput`](crate::input::ListSlackChannelConfigurationsInput).
    pub fn builder() -> crate::input::list_slack_channel_configurations_input::Builder {
        crate::input::list_slack_channel_configurations_input::Builder::default()
    }
    /// Creates a new `ListSlackChannelConfigurations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSlackChannelConfigurations {
    type Output = std::result::Result<
        crate::output::ListSlackChannelConfigurationsOutput,
        crate::error::ListSlackChannelConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_slack_channel_configurations_error(response)
        } else {
            crate::operation_deser::parse_list_slack_channel_configurations_response(response)
        }
    }
}

/// Operation shape for `ListSlackWorkspaceConfigurations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_slack_workspace_configurations`](crate::client::fluent_builders::ListSlackWorkspaceConfigurations).
///
/// `ParseStrictResponse` impl for `ListSlackWorkspaceConfigurations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSlackWorkspaceConfigurations {
    _private: (),
}
impl ListSlackWorkspaceConfigurations {
    /// Creates a new builder-style object to manufacture [`ListSlackWorkspaceConfigurationsInput`](crate::input::ListSlackWorkspaceConfigurationsInput).
    pub fn builder() -> crate::input::list_slack_workspace_configurations_input::Builder {
        crate::input::list_slack_workspace_configurations_input::Builder::default()
    }
    /// Creates a new `ListSlackWorkspaceConfigurations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSlackWorkspaceConfigurations {
    type Output = std::result::Result<
        crate::output::ListSlackWorkspaceConfigurationsOutput,
        crate::error::ListSlackWorkspaceConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_slack_workspace_configurations_error(response)
        } else {
            crate::operation_deser::parse_list_slack_workspace_configurations_response(response)
        }
    }
}

/// Operation shape for `PutAccountAlias`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_account_alias`](crate::client::fluent_builders::PutAccountAlias).
///
/// `ParseStrictResponse` impl for `PutAccountAlias`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutAccountAlias {
    _private: (),
}
impl PutAccountAlias {
    /// Creates a new builder-style object to manufacture [`PutAccountAliasInput`](crate::input::PutAccountAliasInput).
    pub fn builder() -> crate::input::put_account_alias_input::Builder {
        crate::input::put_account_alias_input::Builder::default()
    }
    /// Creates a new `PutAccountAlias` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutAccountAlias {
    type Output = std::result::Result<
        crate::output::PutAccountAliasOutput,
        crate::error::PutAccountAliasError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_account_alias_error(response)
        } else {
            crate::operation_deser::parse_put_account_alias_response(response)
        }
    }
}

/// Operation shape for `RegisterSlackWorkspaceForOrganization`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`register_slack_workspace_for_organization`](crate::client::fluent_builders::RegisterSlackWorkspaceForOrganization).
///
/// `ParseStrictResponse` impl for `RegisterSlackWorkspaceForOrganization`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RegisterSlackWorkspaceForOrganization {
    _private: (),
}
impl RegisterSlackWorkspaceForOrganization {
    /// Creates a new builder-style object to manufacture [`RegisterSlackWorkspaceForOrganizationInput`](crate::input::RegisterSlackWorkspaceForOrganizationInput).
    pub fn builder() -> crate::input::register_slack_workspace_for_organization_input::Builder {
        crate::input::register_slack_workspace_for_organization_input::Builder::default()
    }
    /// Creates a new `RegisterSlackWorkspaceForOrganization` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RegisterSlackWorkspaceForOrganization {
    type Output = std::result::Result<
        crate::output::RegisterSlackWorkspaceForOrganizationOutput,
        crate::error::RegisterSlackWorkspaceForOrganizationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_slack_workspace_for_organization_error(response)
        } else {
            crate::operation_deser::parse_register_slack_workspace_for_organization_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateSlackChannelConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_slack_channel_configuration`](crate::client::fluent_builders::UpdateSlackChannelConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateSlackChannelConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateSlackChannelConfiguration {
    _private: (),
}
impl UpdateSlackChannelConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateSlackChannelConfigurationInput`](crate::input::UpdateSlackChannelConfigurationInput).
    pub fn builder() -> crate::input::update_slack_channel_configuration_input::Builder {
        crate::input::update_slack_channel_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateSlackChannelConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSlackChannelConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateSlackChannelConfigurationOutput,
        crate::error::UpdateSlackChannelConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_slack_channel_configuration_error(response)
        } else {
            crate::operation_deser::parse_update_slack_channel_configuration_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
