// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterSlackWorkspaceForOrganizationOutput {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    #[doc(hidden)]
    pub team_id: std::option::Option<std::string::String>,
    /// <p>The name of the Slack workspace.</p>
    #[doc(hidden)]
    pub team_name: std::option::Option<std::string::String>,
    /// <p>Whether the Amazon Web Services account is a management or member account that's part of an organization in Organizations.</p>
    #[doc(hidden)]
    pub account_type: std::option::Option<crate::types::AccountType>,
    _request_id: Option<String>,
}
impl RegisterSlackWorkspaceForOrganizationOutput {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn team_id(&self) -> std::option::Option<&str> {
        self.team_id.as_deref()
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn team_name(&self) -> std::option::Option<&str> {
        self.team_name.as_deref()
    }
    /// <p>Whether the Amazon Web Services account is a management or member account that's part of an organization in Organizations.</p>
    pub fn account_type(&self) -> std::option::Option<&crate::types::AccountType> {
        self.account_type.as_ref()
    }
}
impl aws_http::request_id::RequestId for RegisterSlackWorkspaceForOrganizationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterSlackWorkspaceForOrganizationOutput {
    /// Creates a new builder-style object to manufacture [`RegisterSlackWorkspaceForOrganizationOutput`](crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationOutput).
    pub fn builder() -> crate::operation::register_slack_workspace_for_organization::builders::RegisterSlackWorkspaceForOrganizationOutputBuilder{
        crate::operation::register_slack_workspace_for_organization::builders::RegisterSlackWorkspaceForOrganizationOutputBuilder::default()
    }
}

/// A builder for [`RegisterSlackWorkspaceForOrganizationOutput`](crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterSlackWorkspaceForOrganizationOutputBuilder {
    pub(crate) team_id: std::option::Option<std::string::String>,
    pub(crate) team_name: std::option::Option<std::string::String>,
    pub(crate) account_type: std::option::Option<crate::types::AccountType>,
    _request_id: Option<String>,
}
impl RegisterSlackWorkspaceForOrganizationOutputBuilder {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn team_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.team_id = Some(input.into());
        self
    }
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn set_team_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.team_id = input;
        self
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn team_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.team_name = Some(input.into());
        self
    }
    /// <p>The name of the Slack workspace.</p>
    pub fn set_team_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.team_name = input;
        self
    }
    /// <p>Whether the Amazon Web Services account is a management or member account that's part of an organization in Organizations.</p>
    pub fn account_type(mut self, input: crate::types::AccountType) -> Self {
        self.account_type = Some(input);
        self
    }
    /// <p>Whether the Amazon Web Services account is a management or member account that's part of an organization in Organizations.</p>
    pub fn set_account_type(
        mut self,
        input: std::option::Option<crate::types::AccountType>,
    ) -> Self {
        self.account_type = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RegisterSlackWorkspaceForOrganizationOutput`](crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationOutput).
    pub fn build(self) -> crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationOutput{
        crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationOutput {
            team_id: self.team_id
            ,
            team_name: self.team_name
            ,
            account_type: self.account_type
            ,
            _request_id: self._request_id,
        }
    }
}
