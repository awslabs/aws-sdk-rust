// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSlackChannelConfigurationInput {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub team_id: ::std::option::Option<::std::string::String>,
    /// <p>The channel ID in Slack. This ID identifies a channel within a Slack workspace.</p>
    pub channel_id: ::std::option::Option<::std::string::String>,
    /// <p>The Slack channel name that you want to update.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>Whether you want to get notified when a support case is created or reopened.</p>
    pub notify_on_create_or_reopen_case: ::std::option::Option<bool>,
    /// <p>Whether you want to get notified when a support case has a new correspondence.</p>
    pub notify_on_add_correspondence_to_case: ::std::option::Option<bool>,
    /// <p>Whether you want to get notified when a support case is resolved.</p>
    pub notify_on_resolve_case: ::std::option::Option<bool>,
    /// <p>The case severity for a support case that you want to receive notifications.</p>
    /// <p>If you specify <code>high</code> or <code>all</code>, at least one of the following parameters must be <code>true</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>none</code>, any of the following parameters that you specify in your request must be <code>false</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul> <note>
    /// <p>If you don't specify these parameters in your request, the Amazon Web Services Support App uses the current values by default.</p>
    /// </note>
    pub notify_on_case_severity: ::std::option::Option<crate::types::NotificationSeverityLevel>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
    pub channel_role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateSlackChannelConfigurationInput {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn team_id(&self) -> ::std::option::Option<&str> {
        self.team_id.as_deref()
    }
    /// <p>The channel ID in Slack. This ID identifies a channel within a Slack workspace.</p>
    pub fn channel_id(&self) -> ::std::option::Option<&str> {
        self.channel_id.as_deref()
    }
    /// <p>The Slack channel name that you want to update.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>Whether you want to get notified when a support case is created or reopened.</p>
    pub fn notify_on_create_or_reopen_case(&self) -> ::std::option::Option<bool> {
        self.notify_on_create_or_reopen_case
    }
    /// <p>Whether you want to get notified when a support case has a new correspondence.</p>
    pub fn notify_on_add_correspondence_to_case(&self) -> ::std::option::Option<bool> {
        self.notify_on_add_correspondence_to_case
    }
    /// <p>Whether you want to get notified when a support case is resolved.</p>
    pub fn notify_on_resolve_case(&self) -> ::std::option::Option<bool> {
        self.notify_on_resolve_case
    }
    /// <p>The case severity for a support case that you want to receive notifications.</p>
    /// <p>If you specify <code>high</code> or <code>all</code>, at least one of the following parameters must be <code>true</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>none</code>, any of the following parameters that you specify in your request must be <code>false</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul> <note>
    /// <p>If you don't specify these parameters in your request, the Amazon Web Services Support App uses the current values by default.</p>
    /// </note>
    pub fn notify_on_case_severity(&self) -> ::std::option::Option<&crate::types::NotificationSeverityLevel> {
        self.notify_on_case_severity.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
    pub fn channel_role_arn(&self) -> ::std::option::Option<&str> {
        self.channel_role_arn.as_deref()
    }
}
impl UpdateSlackChannelConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateSlackChannelConfigurationInput`](crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput).
    pub fn builder() -> crate::operation::update_slack_channel_configuration::builders::UpdateSlackChannelConfigurationInputBuilder {
        crate::operation::update_slack_channel_configuration::builders::UpdateSlackChannelConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateSlackChannelConfigurationInput`](crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSlackChannelConfigurationInputBuilder {
    pub(crate) team_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) notify_on_create_or_reopen_case: ::std::option::Option<bool>,
    pub(crate) notify_on_add_correspondence_to_case: ::std::option::Option<bool>,
    pub(crate) notify_on_resolve_case: ::std::option::Option<bool>,
    pub(crate) notify_on_case_severity: ::std::option::Option<crate::types::NotificationSeverityLevel>,
    pub(crate) channel_role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateSlackChannelConfigurationInputBuilder {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    /// This field is required.
    pub fn team_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.team_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn set_team_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.team_id = input;
        self
    }
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn get_team_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.team_id
    }
    /// <p>The channel ID in Slack. This ID identifies a channel within a Slack workspace.</p>
    /// This field is required.
    pub fn channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The channel ID in Slack. This ID identifies a channel within a Slack workspace.</p>
    pub fn set_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_id = input;
        self
    }
    /// <p>The channel ID in Slack. This ID identifies a channel within a Slack workspace.</p>
    pub fn get_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_id
    }
    /// <p>The Slack channel name that you want to update.</p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Slack channel name that you want to update.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The Slack channel name that you want to update.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>Whether you want to get notified when a support case is created or reopened.</p>
    pub fn notify_on_create_or_reopen_case(mut self, input: bool) -> Self {
        self.notify_on_create_or_reopen_case = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether you want to get notified when a support case is created or reopened.</p>
    pub fn set_notify_on_create_or_reopen_case(mut self, input: ::std::option::Option<bool>) -> Self {
        self.notify_on_create_or_reopen_case = input;
        self
    }
    /// <p>Whether you want to get notified when a support case is created or reopened.</p>
    pub fn get_notify_on_create_or_reopen_case(&self) -> &::std::option::Option<bool> {
        &self.notify_on_create_or_reopen_case
    }
    /// <p>Whether you want to get notified when a support case has a new correspondence.</p>
    pub fn notify_on_add_correspondence_to_case(mut self, input: bool) -> Self {
        self.notify_on_add_correspondence_to_case = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether you want to get notified when a support case has a new correspondence.</p>
    pub fn set_notify_on_add_correspondence_to_case(mut self, input: ::std::option::Option<bool>) -> Self {
        self.notify_on_add_correspondence_to_case = input;
        self
    }
    /// <p>Whether you want to get notified when a support case has a new correspondence.</p>
    pub fn get_notify_on_add_correspondence_to_case(&self) -> &::std::option::Option<bool> {
        &self.notify_on_add_correspondence_to_case
    }
    /// <p>Whether you want to get notified when a support case is resolved.</p>
    pub fn notify_on_resolve_case(mut self, input: bool) -> Self {
        self.notify_on_resolve_case = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether you want to get notified when a support case is resolved.</p>
    pub fn set_notify_on_resolve_case(mut self, input: ::std::option::Option<bool>) -> Self {
        self.notify_on_resolve_case = input;
        self
    }
    /// <p>Whether you want to get notified when a support case is resolved.</p>
    pub fn get_notify_on_resolve_case(&self) -> &::std::option::Option<bool> {
        &self.notify_on_resolve_case
    }
    /// <p>The case severity for a support case that you want to receive notifications.</p>
    /// <p>If you specify <code>high</code> or <code>all</code>, at least one of the following parameters must be <code>true</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>none</code>, any of the following parameters that you specify in your request must be <code>false</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul> <note>
    /// <p>If you don't specify these parameters in your request, the Amazon Web Services Support App uses the current values by default.</p>
    /// </note>
    pub fn notify_on_case_severity(mut self, input: crate::types::NotificationSeverityLevel) -> Self {
        self.notify_on_case_severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The case severity for a support case that you want to receive notifications.</p>
    /// <p>If you specify <code>high</code> or <code>all</code>, at least one of the following parameters must be <code>true</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>none</code>, any of the following parameters that you specify in your request must be <code>false</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul> <note>
    /// <p>If you don't specify these parameters in your request, the Amazon Web Services Support App uses the current values by default.</p>
    /// </note>
    pub fn set_notify_on_case_severity(mut self, input: ::std::option::Option<crate::types::NotificationSeverityLevel>) -> Self {
        self.notify_on_case_severity = input;
        self
    }
    /// <p>The case severity for a support case that you want to receive notifications.</p>
    /// <p>If you specify <code>high</code> or <code>all</code>, at least one of the following parameters must be <code>true</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>none</code>, any of the following parameters that you specify in your request must be <code>false</code>:</p>
    /// <ul>
    /// <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li>
    /// <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li>
    /// <li> <p> <code>notifyOnResolveCase</code> </p> </li>
    /// </ul> <note>
    /// <p>If you don't specify these parameters in your request, the Amazon Web Services Support App uses the current values by default.</p>
    /// </note>
    pub fn get_notify_on_case_severity(&self) -> &::std::option::Option<crate::types::NotificationSeverityLevel> {
        &self.notify_on_case_severity
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
    pub fn channel_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
    pub fn set_channel_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
    pub fn get_channel_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_role_arn
    }
    /// Consumes the builder and constructs a [`UpdateSlackChannelConfigurationInput`](crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationInput {
                team_id: self.team_id,
                channel_id: self.channel_id,
                channel_name: self.channel_name,
                notify_on_create_or_reopen_case: self.notify_on_create_or_reopen_case,
                notify_on_add_correspondence_to_case: self.notify_on_add_correspondence_to_case,
                notify_on_resolve_case: self.notify_on_resolve_case,
                notify_on_case_severity: self.notify_on_case_severity,
                channel_role_arn: self.channel_role_arn,
            },
        )
    }
}
