// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSlackChannelConfigurationOutput {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    #[doc(hidden)]
    pub team_id: std::option::Option<std::string::String>,
    /// <p>The channel ID in Slack. This ID identifies a channel within a Slack workspace.</p>
    #[doc(hidden)]
    pub channel_id: std::option::Option<std::string::String>,
    /// <p>The name of the Slack channel that you configure for the Amazon Web Services Support App.</p>
    #[doc(hidden)]
    pub channel_name: std::option::Option<std::string::String>,
    /// <p>Whether you want to get notified when a support case is created or reopened.</p>
    #[doc(hidden)]
    pub notify_on_create_or_reopen_case: std::option::Option<bool>,
    /// <p>Whether you want to get notified when a support case has a new correspondence.</p>
    #[doc(hidden)]
    pub notify_on_add_correspondence_to_case: std::option::Option<bool>,
    /// <p>Whether you want to get notified when a support case is resolved.</p>
    #[doc(hidden)]
    pub notify_on_resolve_case: std::option::Option<bool>,
    /// <p>The case severity for a support case that you want to receive notifications.</p>
    #[doc(hidden)]
    pub notify_on_case_severity: std::option::Option<crate::types::NotificationSeverityLevel>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
    #[doc(hidden)]
    pub channel_role_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateSlackChannelConfigurationOutput {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn team_id(&self) -> std::option::Option<&str> {
        self.team_id.as_deref()
    }
    /// <p>The channel ID in Slack. This ID identifies a channel within a Slack workspace.</p>
    pub fn channel_id(&self) -> std::option::Option<&str> {
        self.channel_id.as_deref()
    }
    /// <p>The name of the Slack channel that you configure for the Amazon Web Services Support App.</p>
    pub fn channel_name(&self) -> std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>Whether you want to get notified when a support case is created or reopened.</p>
    pub fn notify_on_create_or_reopen_case(&self) -> std::option::Option<bool> {
        self.notify_on_create_or_reopen_case
    }
    /// <p>Whether you want to get notified when a support case has a new correspondence.</p>
    pub fn notify_on_add_correspondence_to_case(&self) -> std::option::Option<bool> {
        self.notify_on_add_correspondence_to_case
    }
    /// <p>Whether you want to get notified when a support case is resolved.</p>
    pub fn notify_on_resolve_case(&self) -> std::option::Option<bool> {
        self.notify_on_resolve_case
    }
    /// <p>The case severity for a support case that you want to receive notifications.</p>
    pub fn notify_on_case_severity(
        &self,
    ) -> std::option::Option<&crate::types::NotificationSeverityLevel> {
        self.notify_on_case_severity.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
    pub fn channel_role_arn(&self) -> std::option::Option<&str> {
        self.channel_role_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateSlackChannelConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSlackChannelConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSlackChannelConfigurationOutput`](crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput).
    pub fn builder() -> crate::operation::update_slack_channel_configuration::builders::UpdateSlackChannelConfigurationOutputBuilder{
        crate::operation::update_slack_channel_configuration::builders::UpdateSlackChannelConfigurationOutputBuilder::default()
    }
}

/// A builder for [`UpdateSlackChannelConfigurationOutput`](crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateSlackChannelConfigurationOutputBuilder {
    pub(crate) team_id: std::option::Option<std::string::String>,
    pub(crate) channel_id: std::option::Option<std::string::String>,
    pub(crate) channel_name: std::option::Option<std::string::String>,
    pub(crate) notify_on_create_or_reopen_case: std::option::Option<bool>,
    pub(crate) notify_on_add_correspondence_to_case: std::option::Option<bool>,
    pub(crate) notify_on_resolve_case: std::option::Option<bool>,
    pub(crate) notify_on_case_severity:
        std::option::Option<crate::types::NotificationSeverityLevel>,
    pub(crate) channel_role_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateSlackChannelConfigurationOutputBuilder {
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn team_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.team_id = Some(input.into());
        self
    }
    /// <p>The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.</p>
    pub fn set_team_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.team_id = input;
        self
    }
    /// <p>The channel ID in Slack. This ID identifies a channel within a Slack workspace.</p>
    pub fn channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_id = Some(input.into());
        self
    }
    /// <p>The channel ID in Slack. This ID identifies a channel within a Slack workspace.</p>
    pub fn set_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_id = input;
        self
    }
    /// <p>The name of the Slack channel that you configure for the Amazon Web Services Support App.</p>
    pub fn channel_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_name = Some(input.into());
        self
    }
    /// <p>The name of the Slack channel that you configure for the Amazon Web Services Support App.</p>
    pub fn set_channel_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>Whether you want to get notified when a support case is created or reopened.</p>
    pub fn notify_on_create_or_reopen_case(mut self, input: bool) -> Self {
        self.notify_on_create_or_reopen_case = Some(input);
        self
    }
    /// <p>Whether you want to get notified when a support case is created or reopened.</p>
    pub fn set_notify_on_create_or_reopen_case(mut self, input: std::option::Option<bool>) -> Self {
        self.notify_on_create_or_reopen_case = input;
        self
    }
    /// <p>Whether you want to get notified when a support case has a new correspondence.</p>
    pub fn notify_on_add_correspondence_to_case(mut self, input: bool) -> Self {
        self.notify_on_add_correspondence_to_case = Some(input);
        self
    }
    /// <p>Whether you want to get notified when a support case has a new correspondence.</p>
    pub fn set_notify_on_add_correspondence_to_case(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.notify_on_add_correspondence_to_case = input;
        self
    }
    /// <p>Whether you want to get notified when a support case is resolved.</p>
    pub fn notify_on_resolve_case(mut self, input: bool) -> Self {
        self.notify_on_resolve_case = Some(input);
        self
    }
    /// <p>Whether you want to get notified when a support case is resolved.</p>
    pub fn set_notify_on_resolve_case(mut self, input: std::option::Option<bool>) -> Self {
        self.notify_on_resolve_case = input;
        self
    }
    /// <p>The case severity for a support case that you want to receive notifications.</p>
    pub fn notify_on_case_severity(
        mut self,
        input: crate::types::NotificationSeverityLevel,
    ) -> Self {
        self.notify_on_case_severity = Some(input);
        self
    }
    /// <p>The case severity for a support case that you want to receive notifications.</p>
    pub fn set_notify_on_case_severity(
        mut self,
        input: std::option::Option<crate::types::NotificationSeverityLevel>,
    ) -> Self {
        self.notify_on_case_severity = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
    pub fn channel_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
    pub fn set_channel_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_role_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateSlackChannelConfigurationOutput`](crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput).
    pub fn build(
        self,
    ) -> crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput
    {
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput {
            team_id: self.team_id
            ,
            channel_id: self.channel_id
            ,
            channel_name: self.channel_name
            ,
            notify_on_create_or_reopen_case: self.notify_on_create_or_reopen_case
            ,
            notify_on_add_correspondence_to_case: self.notify_on_add_correspondence_to_case
            ,
            notify_on_resolve_case: self.notify_on_resolve_case
            ,
            notify_on_case_severity: self.notify_on_case_severity
            ,
            channel_role_arn: self.channel_role_arn
            ,
            _request_id: self._request_id,
        }
    }
}
