// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient permission to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Your request has a conflict. For example, you might receive this error if you try the following:</p>
    /// <ul>
    /// <li> <p>Add, update, or delete a Slack channel configuration before you add a Slack workspace to your Amazon Web Services account.</p> </li>
    /// <li> <p>Add a Slack channel configuration that already exists in your Amazon Web Services account.</p> </li>
    /// <li> <p>Delete a Slack channel configuration for a live chat channel.</p> </li>
    /// <li> <p>Delete a Slack workspace from your Amazon Web Services account that has an active live chat channel.</p> </li>
    /// <li> <p>Call the <code>RegisterSlackWorkspaceForOrganization</code> API from an Amazon Web Services account that doesn't belong to an organization.</p> </li>
    /// <li> <p>Call the <code>RegisterSlackWorkspaceForOrganization</code> API from a member account, but the management account hasn't registered that workspace yet for the organization.</p> </li>
    /// </ul>
    ConflictException(crate::types::error::ConflictException),
    /// <p>We canâ€™t process your request right now because of a server issue. Try again later.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource is missing or doesn't exist, such as an account alias, Slack channel configuration, or Slack workspace configuration.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Your Service Quotas request exceeds the quota for the service. For example, your Service Quotas request to Amazon Web Services Support App might exceed the maximum number of workspaces or channels per account, or the maximum number of accounts per Slack channel.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Your request input doesn't meet the constraints that the Amazon Web Services Support App specifies.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError,
    ) -> Self {
        match err {
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_slack_channel_configuration::CreateSlackChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_account_alias::DeleteAccountAliasError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_account_alias::DeleteAccountAliasError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_account_alias::DeleteAccountAliasError> for Error {
    fn from(err: crate::operation::delete_account_alias::DeleteAccountAliasError) -> Self {
        match err {
            crate::operation::delete_account_alias::DeleteAccountAliasError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_account_alias::DeleteAccountAliasError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_account_alias::DeleteAccountAliasError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_account_alias::DeleteAccountAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError,
    ) -> Self {
        match err {
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_slack_channel_configuration::DeleteSlackChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError> for Error {
    fn from(err: crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError) -> Self {
        match err {
            crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_slack_workspace_configuration::DeleteSlackWorkspaceConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_account_alias::GetAccountAliasError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_account_alias::GetAccountAliasError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_account_alias::GetAccountAliasError> for Error {
    fn from(err: crate::operation::get_account_alias::GetAccountAliasError) -> Self {
        match err {
            crate::operation::get_account_alias::GetAccountAliasError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_account_alias::GetAccountAliasError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_slack_channel_configurations::ListSlackChannelConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_slack_channel_configurations::ListSlackChannelConfigurationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_slack_channel_configurations::ListSlackChannelConfigurationsError>
    for Error
{
    fn from(
        err: crate::operation::list_slack_channel_configurations::ListSlackChannelConfigurationsError,
    ) -> Self {
        match err {
            crate::operation::list_slack_channel_configurations::ListSlackChannelConfigurationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_slack_channel_configurations::ListSlackChannelConfigurationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_slack_channel_configurations::ListSlackChannelConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_slack_workspace_configurations::ListSlackWorkspaceConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_slack_workspace_configurations::ListSlackWorkspaceConfigurationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_slack_workspace_configurations::ListSlackWorkspaceConfigurationsError> for Error {
    fn from(err: crate::operation::list_slack_workspace_configurations::ListSlackWorkspaceConfigurationsError) -> Self {
        match err {
            crate::operation::list_slack_workspace_configurations::ListSlackWorkspaceConfigurationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_slack_workspace_configurations::ListSlackWorkspaceConfigurationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_slack_workspace_configurations::ListSlackWorkspaceConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_account_alias::PutAccountAliasError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_account_alias::PutAccountAliasError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_account_alias::PutAccountAliasError> for Error {
    fn from(err: crate::operation::put_account_alias::PutAccountAliasError) -> Self {
        match err {
            crate::operation::put_account_alias::PutAccountAliasError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::put_account_alias::PutAccountAliasError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::put_account_alias::PutAccountAliasError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::put_account_alias::PutAccountAliasError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError> for Error {
    fn from(err: crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError) -> Self {
        match err {
            crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::register_slack_workspace_for_organization::RegisterSlackWorkspaceForOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError,
    ) -> Self {
        match err {
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
