// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn list_realtime_contact_analysis_segments_output_correct_errors(
    mut builder: crate::operation::list_realtime_contact_analysis_segments::builders::ListRealtimeContactAnalysisSegmentsOutputBuilder,
) -> crate::operation::list_realtime_contact_analysis_segments::builders::ListRealtimeContactAnalysisSegmentsOutputBuilder {
    if builder.segments.is_none() {
        builder.segments = Some(Default::default())
    }
    builder
}

pub(crate) fn categories_correct_errors(mut builder: crate::types::builders::CategoriesBuilder) -> crate::types::builders::CategoriesBuilder {
    if builder.matched_categories.is_none() {
        builder.matched_categories = Some(Default::default())
    }
    if builder.matched_details.is_none() {
        builder.matched_details = Some(Default::default())
    }
    builder
}

pub(crate) fn transcript_correct_errors(mut builder: crate::types::builders::TranscriptBuilder) -> crate::types::builders::TranscriptBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.participant_id.is_none() {
        builder.participant_id = Some(Default::default())
    }
    if builder.participant_role.is_none() {
        builder.participant_role = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    if builder.begin_offset_millis.is_none() {
        builder.begin_offset_millis = Some(Default::default())
    }
    if builder.end_offset_millis.is_none() {
        builder.end_offset_millis = Some(Default::default())
    }
    if builder.sentiment.is_none() {
        builder.sentiment = "no value was set".parse::<crate::types::SentimentValue>().ok()
    }
    builder
}

pub(crate) fn category_details_correct_errors(
    mut builder: crate::types::builders::CategoryDetailsBuilder,
) -> crate::types::builders::CategoryDetailsBuilder {
    if builder.points_of_interest.is_none() {
        builder.points_of_interest = Some(Default::default())
    }
    builder
}

pub(crate) fn issue_detected_correct_errors(
    mut builder: crate::types::builders::IssueDetectedBuilder,
) -> crate::types::builders::IssueDetectedBuilder {
    if builder.character_offsets.is_none() {
        builder.character_offsets = {
            let builder = crate::types::builders::CharacterOffsetsBuilder::default();
            Some(crate::serde_util::character_offsets_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn character_offsets_correct_errors(
    mut builder: crate::types::builders::CharacterOffsetsBuilder,
) -> crate::types::builders::CharacterOffsetsBuilder {
    if builder.begin_offset_char.is_none() {
        builder.begin_offset_char = Some(Default::default())
    }
    if builder.end_offset_char.is_none() {
        builder.end_offset_char = Some(Default::default())
    }
    builder
}

pub(crate) fn point_of_interest_correct_errors(
    mut builder: crate::types::builders::PointOfInterestBuilder,
) -> crate::types::builders::PointOfInterestBuilder {
    if builder.begin_offset_millis.is_none() {
        builder.begin_offset_millis = Some(Default::default())
    }
    if builder.end_offset_millis.is_none() {
        builder.end_offset_millis = Some(Default::default())
    }
    builder
}
