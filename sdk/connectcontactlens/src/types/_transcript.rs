// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of messages in the session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Transcript {
    /// <p>The identifier of the transcript.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the participant.</p>
    pub participant_id: ::std::option::Option<::std::string::String>,
    /// <p>The role of participant. For example, is it a customer, agent, or system.</p>
    pub participant_role: ::std::option::Option<::std::string::String>,
    /// <p>The content of the transcript.</p>
    pub content: ::std::option::Option<::std::string::String>,
    /// <p>The beginning offset in the contact for this transcript.</p>
    pub begin_offset_millis: ::std::option::Option<i32>,
    /// <p>The end offset in the contact for this transcript.</p>
    pub end_offset_millis: ::std::option::Option<i32>,
    /// <p>The sentiment of the detected for this piece of transcript.</p>
    pub sentiment: ::std::option::Option<crate::types::SentimentValue>,
    /// <p>List of positions where issues were detected on the transcript.</p>
    pub issues_detected: ::std::option::Option<::std::vec::Vec<crate::types::IssueDetected>>,
}
impl Transcript {
    /// <p>The identifier of the transcript.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The identifier of the participant.</p>
    pub fn participant_id(&self) -> ::std::option::Option<&str> {
        self.participant_id.as_deref()
    }
    /// <p>The role of participant. For example, is it a customer, agent, or system.</p>
    pub fn participant_role(&self) -> ::std::option::Option<&str> {
        self.participant_role.as_deref()
    }
    /// <p>The content of the transcript.</p>
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The beginning offset in the contact for this transcript.</p>
    pub fn begin_offset_millis(&self) -> ::std::option::Option<i32> {
        self.begin_offset_millis
    }
    /// <p>The end offset in the contact for this transcript.</p>
    pub fn end_offset_millis(&self) -> ::std::option::Option<i32> {
        self.end_offset_millis
    }
    /// <p>The sentiment of the detected for this piece of transcript.</p>
    pub fn sentiment(&self) -> ::std::option::Option<&crate::types::SentimentValue> {
        self.sentiment.as_ref()
    }
    /// <p>List of positions where issues were detected on the transcript.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.issues_detected.is_none()`.
    pub fn issues_detected(&self) -> &[crate::types::IssueDetected] {
        self.issues_detected.as_deref().unwrap_or_default()
    }
}
impl Transcript {
    /// Creates a new builder-style object to manufacture [`Transcript`](crate::types::Transcript).
    pub fn builder() -> crate::types::builders::TranscriptBuilder {
        crate::types::builders::TranscriptBuilder::default()
    }
}

/// A builder for [`Transcript`](crate::types::Transcript).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TranscriptBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) participant_role: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) begin_offset_millis: ::std::option::Option<i32>,
    pub(crate) end_offset_millis: ::std::option::Option<i32>,
    pub(crate) sentiment: ::std::option::Option<crate::types::SentimentValue>,
    pub(crate) issues_detected: ::std::option::Option<::std::vec::Vec<crate::types::IssueDetected>>,
}
impl TranscriptBuilder {
    /// <p>The identifier of the transcript.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the transcript.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the transcript.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The identifier of the participant.</p>
    /// This field is required.
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the participant.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>The identifier of the participant.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>The role of participant. For example, is it a customer, agent, or system.</p>
    /// This field is required.
    pub fn participant_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The role of participant. For example, is it a customer, agent, or system.</p>
    pub fn set_participant_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_role = input;
        self
    }
    /// <p>The role of participant. For example, is it a customer, agent, or system.</p>
    pub fn get_participant_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_role
    }
    /// <p>The content of the transcript.</p>
    /// This field is required.
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content of the transcript.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of the transcript.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// <p>The beginning offset in the contact for this transcript.</p>
    /// This field is required.
    pub fn begin_offset_millis(mut self, input: i32) -> Self {
        self.begin_offset_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The beginning offset in the contact for this transcript.</p>
    pub fn set_begin_offset_millis(mut self, input: ::std::option::Option<i32>) -> Self {
        self.begin_offset_millis = input;
        self
    }
    /// <p>The beginning offset in the contact for this transcript.</p>
    pub fn get_begin_offset_millis(&self) -> &::std::option::Option<i32> {
        &self.begin_offset_millis
    }
    /// <p>The end offset in the contact for this transcript.</p>
    /// This field is required.
    pub fn end_offset_millis(mut self, input: i32) -> Self {
        self.end_offset_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end offset in the contact for this transcript.</p>
    pub fn set_end_offset_millis(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_offset_millis = input;
        self
    }
    /// <p>The end offset in the contact for this transcript.</p>
    pub fn get_end_offset_millis(&self) -> &::std::option::Option<i32> {
        &self.end_offset_millis
    }
    /// <p>The sentiment of the detected for this piece of transcript.</p>
    /// This field is required.
    pub fn sentiment(mut self, input: crate::types::SentimentValue) -> Self {
        self.sentiment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sentiment of the detected for this piece of transcript.</p>
    pub fn set_sentiment(mut self, input: ::std::option::Option<crate::types::SentimentValue>) -> Self {
        self.sentiment = input;
        self
    }
    /// <p>The sentiment of the detected for this piece of transcript.</p>
    pub fn get_sentiment(&self) -> &::std::option::Option<crate::types::SentimentValue> {
        &self.sentiment
    }
    /// Appends an item to `issues_detected`.
    ///
    /// To override the contents of this collection use [`set_issues_detected`](Self::set_issues_detected).
    ///
    /// <p>List of positions where issues were detected on the transcript.</p>
    pub fn issues_detected(mut self, input: crate::types::IssueDetected) -> Self {
        let mut v = self.issues_detected.unwrap_or_default();
        v.push(input);
        self.issues_detected = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of positions where issues were detected on the transcript.</p>
    pub fn set_issues_detected(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IssueDetected>>) -> Self {
        self.issues_detected = input;
        self
    }
    /// <p>List of positions where issues were detected on the transcript.</p>
    pub fn get_issues_detected(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IssueDetected>> {
        &self.issues_detected
    }
    /// Consumes the builder and constructs a [`Transcript`](crate::types::Transcript).
    pub fn build(self) -> crate::types::Transcript {
        crate::types::Transcript {
            id: self.id,
            participant_id: self.participant_id,
            participant_role: self.participant_role,
            content: self.content,
            begin_offset_millis: self.begin_offset_millis,
            end_offset_millis: self.end_offset_millis,
            sentiment: self.sentiment,
            issues_detected: self.issues_detected,
        }
    }
}
