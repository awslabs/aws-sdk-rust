// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An analyzed segment for a real-time analysis session.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RealtimeContactAnalysisSegment {
    /// <p>The analyzed transcript.</p>
    #[doc(hidden)]
    pub transcript: std::option::Option<crate::types::Transcript>,
    /// <p>The matched category rules.</p>
    #[doc(hidden)]
    pub categories: std::option::Option<crate::types::Categories>,
}
impl RealtimeContactAnalysisSegment {
    /// <p>The analyzed transcript.</p>
    pub fn transcript(&self) -> std::option::Option<&crate::types::Transcript> {
        self.transcript.as_ref()
    }
    /// <p>The matched category rules.</p>
    pub fn categories(&self) -> std::option::Option<&crate::types::Categories> {
        self.categories.as_ref()
    }
}
impl RealtimeContactAnalysisSegment {
    /// Creates a new builder-style object to manufacture [`RealtimeContactAnalysisSegment`](crate::types::RealtimeContactAnalysisSegment).
    pub fn builder() -> crate::types::builders::RealtimeContactAnalysisSegmentBuilder {
        crate::types::builders::RealtimeContactAnalysisSegmentBuilder::default()
    }
}

/// A builder for [`RealtimeContactAnalysisSegment`](crate::types::RealtimeContactAnalysisSegment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RealtimeContactAnalysisSegmentBuilder {
    pub(crate) transcript: std::option::Option<crate::types::Transcript>,
    pub(crate) categories: std::option::Option<crate::types::Categories>,
}
impl RealtimeContactAnalysisSegmentBuilder {
    /// <p>The analyzed transcript.</p>
    pub fn transcript(mut self, input: crate::types::Transcript) -> Self {
        self.transcript = Some(input);
        self
    }
    /// <p>The analyzed transcript.</p>
    pub fn set_transcript(mut self, input: std::option::Option<crate::types::Transcript>) -> Self {
        self.transcript = input;
        self
    }
    /// <p>The matched category rules.</p>
    pub fn categories(mut self, input: crate::types::Categories) -> Self {
        self.categories = Some(input);
        self
    }
    /// <p>The matched category rules.</p>
    pub fn set_categories(mut self, input: std::option::Option<crate::types::Categories>) -> Self {
        self.categories = input;
        self
    }
    /// Consumes the builder and constructs a [`RealtimeContactAnalysisSegment`](crate::types::RealtimeContactAnalysisSegment).
    pub fn build(self) -> crate::types::RealtimeContactAnalysisSegment {
        crate::types::RealtimeContactAnalysisSegment {
            transcript: self.transcript,
            categories: self.categories,
        }
    }
}
