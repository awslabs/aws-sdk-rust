// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_realtime_contact_analysis_segments_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListRealtimeContactAnalysisSegmentsOutput,
    crate::error::ListRealtimeContactAnalysisSegmentsError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListRealtimeContactAnalysisSegmentsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListRealtimeContactAnalysisSegmentsError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::error::ListRealtimeContactAnalysisSegmentsError { meta: generic, kind: crate::error::ListRealtimeContactAnalysisSegmentsErrorKind::AccessDeniedException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::access_denied_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_access_denied_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListRealtimeContactAnalysisSegmentsError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InternalServiceException" => crate::error::ListRealtimeContactAnalysisSegmentsError { meta: generic, kind: crate::error::ListRealtimeContactAnalysisSegmentsErrorKind::InternalServiceException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::internal_service_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_internal_service_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListRealtimeContactAnalysisSegmentsError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "InvalidRequestException" => crate::error::ListRealtimeContactAnalysisSegmentsError { meta: generic, kind: crate::error::ListRealtimeContactAnalysisSegmentsErrorKind::InvalidRequestException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListRealtimeContactAnalysisSegmentsError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "ResourceNotFoundException" => crate::error::ListRealtimeContactAnalysisSegmentsError { meta: generic, kind: crate::error::ListRealtimeContactAnalysisSegmentsErrorKind::ResourceNotFoundException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListRealtimeContactAnalysisSegmentsError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        "ThrottlingException" => crate::error::ListRealtimeContactAnalysisSegmentsError { meta: generic, kind: crate::error::ListRealtimeContactAnalysisSegmentsErrorKind::ThrottlingException({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::throttling_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_throttling_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListRealtimeContactAnalysisSegmentsError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::ListRealtimeContactAnalysisSegmentsError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_realtime_contact_analysis_segments_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListRealtimeContactAnalysisSegmentsOutput,
    crate::error::ListRealtimeContactAnalysisSegmentsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::list_realtime_contact_analysis_segments_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_realtime_contact_analysis_segments(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListRealtimeContactAnalysisSegmentsError::unhandled)?;
        output.build()
    })
}
