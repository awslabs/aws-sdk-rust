// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRotationShiftsInput {
    /// <p>The Amazon Resource Name (ARN) of the rotation to retrieve shift information about. </p>
    pub rotation_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time for the beginning of the time range to list shifts for.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time for the end of the time range to list shifts for.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListRotationShiftsInput {
    /// <p>The Amazon Resource Name (ARN) of the rotation to retrieve shift information about. </p>
    pub fn rotation_id(&self) -> ::std::option::Option<&str> {
        self.rotation_id.as_deref()
    }
    /// <p>The date and time for the beginning of the time range to list shifts for.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time for the end of the time range to list shifts for.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListRotationShiftsInput {
    /// Creates a new builder-style object to manufacture [`ListRotationShiftsInput`](crate::operation::list_rotation_shifts::ListRotationShiftsInput).
    pub fn builder() -> crate::operation::list_rotation_shifts::builders::ListRotationShiftsInputBuilder {
        crate::operation::list_rotation_shifts::builders::ListRotationShiftsInputBuilder::default()
    }
}

/// A builder for [`ListRotationShiftsInput`](crate::operation::list_rotation_shifts::ListRotationShiftsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListRotationShiftsInputBuilder {
    pub(crate) rotation_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListRotationShiftsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the rotation to retrieve shift information about. </p>
    /// This field is required.
    pub fn rotation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rotation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rotation to retrieve shift information about. </p>
    pub fn set_rotation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rotation_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rotation to retrieve shift information about. </p>
    pub fn get_rotation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rotation_id
    }
    /// <p>The date and time for the beginning of the time range to list shifts for.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time for the beginning of the time range to list shifts for.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time for the beginning of the time range to list shifts for.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The date and time for the end of the time range to list shifts for.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time for the end of the time range to list shifts for.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The date and time for the end of the time range to list shifts for.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListRotationShiftsInput`](crate::operation::list_rotation_shifts::ListRotationShiftsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_rotation_shifts::ListRotationShiftsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_rotation_shifts::ListRotationShiftsInput {
            rotation_id: self.rotation_id,
            start_time: self.start_time,
            end_time: self.end_time,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
