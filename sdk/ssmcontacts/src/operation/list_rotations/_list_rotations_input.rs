// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRotationsInput {
    /// <p>A filter to include rotations in list results based on their common prefix. For example, entering prod returns a list of all rotation names that begin with <code>prod</code>, such as <code>production</code> and <code>prod-1</code>.</p>
    pub rotation_name_prefix: ::std::option::Option<::std::string::String>,
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListRotationsInput {
    /// <p>A filter to include rotations in list results based on their common prefix. For example, entering prod returns a list of all rotation names that begin with <code>prod</code>, such as <code>production</code> and <code>prod-1</code>.</p>
    pub fn rotation_name_prefix(&self) -> ::std::option::Option<&str> {
        self.rotation_name_prefix.as_deref()
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListRotationsInput {
    /// Creates a new builder-style object to manufacture [`ListRotationsInput`](crate::operation::list_rotations::ListRotationsInput).
    pub fn builder() -> crate::operation::list_rotations::builders::ListRotationsInputBuilder {
        crate::operation::list_rotations::builders::ListRotationsInputBuilder::default()
    }
}

/// A builder for [`ListRotationsInput`](crate::operation::list_rotations::ListRotationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListRotationsInputBuilder {
    pub(crate) rotation_name_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListRotationsInputBuilder {
    /// <p>A filter to include rotations in list results based on their common prefix. For example, entering prod returns a list of all rotation names that begin with <code>prod</code>, such as <code>production</code> and <code>prod-1</code>.</p>
    pub fn rotation_name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rotation_name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter to include rotations in list results based on their common prefix. For example, entering prod returns a list of all rotation names that begin with <code>prod</code>, such as <code>production</code> and <code>prod-1</code>.</p>
    pub fn set_rotation_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rotation_name_prefix = input;
        self
    }
    /// <p>A filter to include rotations in list results based on their common prefix. For example, entering prod returns a list of all rotation names that begin with <code>prod</code>, such as <code>production</code> and <code>prod-1</code>.</p>
    pub fn get_rotation_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.rotation_name_prefix
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListRotationsInput`](crate::operation::list_rotations::ListRotationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_rotations::ListRotationsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_rotations::ListRotationsInput {
            rotation_name_prefix: self.rotation_name_prefix,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
