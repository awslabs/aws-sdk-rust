// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetContactOutput {
    /// <p>The ARN of the contact or escalation plan.</p>
    #[doc(hidden)]
    pub contact_arn: std::option::Option<std::string::String>,
    /// <p>The alias of the contact or escalation plan. The alias is unique and identifiable.</p>
    #[doc(hidden)]
    pub alias: std::option::Option<std::string::String>,
    /// <p>The full name of the contact or escalation plan.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The type of contact, either <code>PERSONAL</code> or <code>ESCALATION</code>. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ContactType>,
    /// <p>Details about the specific timing or stages and targets of the escalation plan or engagement plan.</p>
    #[doc(hidden)]
    pub plan: std::option::Option<crate::types::Plan>,
    _request_id: Option<String>,
}
impl GetContactOutput {
    /// <p>The ARN of the contact or escalation plan.</p>
    pub fn contact_arn(&self) -> std::option::Option<&str> {
        self.contact_arn.as_deref()
    }
    /// <p>The alias of the contact or escalation plan. The alias is unique and identifiable.</p>
    pub fn alias(&self) -> std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>The full name of the contact or escalation plan.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The type of contact, either <code>PERSONAL</code> or <code>ESCALATION</code>. </p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ContactType> {
        self.r#type.as_ref()
    }
    /// <p>Details about the specific timing or stages and targets of the escalation plan or engagement plan.</p>
    pub fn plan(&self) -> std::option::Option<&crate::types::Plan> {
        self.plan.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetContactOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetContactOutput {
    /// Creates a new builder-style object to manufacture [`GetContactOutput`](crate::operation::get_contact::GetContactOutput).
    pub fn builder() -> crate::operation::get_contact::builders::GetContactOutputBuilder {
        crate::operation::get_contact::builders::GetContactOutputBuilder::default()
    }
}

/// A builder for [`GetContactOutput`](crate::operation::get_contact::GetContactOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetContactOutputBuilder {
    pub(crate) contact_arn: std::option::Option<std::string::String>,
    pub(crate) alias: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ContactType>,
    pub(crate) plan: std::option::Option<crate::types::Plan>,
    _request_id: Option<String>,
}
impl GetContactOutputBuilder {
    /// <p>The ARN of the contact or escalation plan.</p>
    pub fn contact_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the contact or escalation plan.</p>
    pub fn set_contact_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.contact_arn = input;
        self
    }
    /// <p>The alias of the contact or escalation plan. The alias is unique and identifiable.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias = Some(input.into());
        self
    }
    /// <p>The alias of the contact or escalation plan. The alias is unique and identifiable.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The full name of the contact or escalation plan.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The full name of the contact or escalation plan.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The type of contact, either <code>PERSONAL</code> or <code>ESCALATION</code>. </p>
    pub fn r#type(mut self, input: crate::types::ContactType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of contact, either <code>PERSONAL</code> or <code>ESCALATION</code>. </p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ContactType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Details about the specific timing or stages and targets of the escalation plan or engagement plan.</p>
    pub fn plan(mut self, input: crate::types::Plan) -> Self {
        self.plan = Some(input);
        self
    }
    /// <p>Details about the specific timing or stages and targets of the escalation plan or engagement plan.</p>
    pub fn set_plan(mut self, input: std::option::Option<crate::types::Plan>) -> Self {
        self.plan = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetContactOutput`](crate::operation::get_contact::GetContactOutput).
    pub fn build(self) -> crate::operation::get_contact::GetContactOutput {
        crate::operation::get_contact::GetContactOutput {
            contact_arn: self.contact_arn,
            alias: self.alias,
            display_name: self.display_name,
            r#type: self.r#type,
            plan: self.plan,
            _request_id: self._request_id,
        }
    }
}
