// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEngagementsInput {
    /// <p>The pagination token to continue to the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of engagements per page of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the incident you're listing engagements for.</p>
    #[doc(hidden)]
    pub incident_id: std::option::Option<std::string::String>,
    /// <p>The time range to lists engagements for an incident.</p>
    #[doc(hidden)]
    pub time_range_value: std::option::Option<crate::types::TimeRange>,
}
impl ListEngagementsInput {
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of engagements per page of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The Amazon Resource Name (ARN) of the incident you're listing engagements for.</p>
    pub fn incident_id(&self) -> std::option::Option<&str> {
        self.incident_id.as_deref()
    }
    /// <p>The time range to lists engagements for an incident.</p>
    pub fn time_range_value(&self) -> std::option::Option<&crate::types::TimeRange> {
        self.time_range_value.as_ref()
    }
}
impl ListEngagementsInput {
    /// Creates a new builder-style object to manufacture [`ListEngagementsInput`](crate::operation::list_engagements::ListEngagementsInput).
    pub fn builder() -> crate::operation::list_engagements::builders::ListEngagementsInputBuilder {
        crate::operation::list_engagements::builders::ListEngagementsInputBuilder::default()
    }
}

/// A builder for [`ListEngagementsInput`](crate::operation::list_engagements::ListEngagementsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListEngagementsInputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) incident_id: std::option::Option<std::string::String>,
    pub(crate) time_range_value: std::option::Option<crate::types::TimeRange>,
}
impl ListEngagementsInputBuilder {
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of engagements per page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of engagements per page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident you're listing engagements for.</p>
    pub fn incident_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.incident_id = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident you're listing engagements for.</p>
    pub fn set_incident_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.incident_id = input;
        self
    }
    /// <p>The time range to lists engagements for an incident.</p>
    pub fn time_range_value(mut self, input: crate::types::TimeRange) -> Self {
        self.time_range_value = Some(input);
        self
    }
    /// <p>The time range to lists engagements for an incident.</p>
    pub fn set_time_range_value(
        mut self,
        input: std::option::Option<crate::types::TimeRange>,
    ) -> Self {
        self.time_range_value = input;
        self
    }
    /// Consumes the builder and constructs a [`ListEngagementsInput`](crate::operation::list_engagements::ListEngagementsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_engagements::ListEngagementsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_engagements::ListEngagementsInput {
            next_token: self.next_token,
            max_results: self.max_results,
            incident_id: self.incident_id,
            time_range_value: self.time_range_value,
        })
    }
}
