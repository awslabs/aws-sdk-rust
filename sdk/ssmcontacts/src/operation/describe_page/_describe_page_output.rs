// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribePageOutput {
    /// <p>The Amazon Resource Name (ARN) of the engagement to a contact channel.</p>
    pub page_arn: ::std::string::String,
    /// <p>The ARN of the engagement that engaged the contact channel.</p>
    pub engagement_arn: ::std::string::String,
    /// <p>The ARN of the contact that was engaged.</p>
    pub contact_arn: ::std::string::String,
    /// <p>The user that started the engagement.</p>
    pub sender: ::std::string::String,
    /// <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    pub subject: ::std::string::String,
    /// <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    pub content: ::std::string::String,
    /// <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub public_subject: ::std::option::Option<::std::string::String>,
    /// <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub public_content: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the incident that engaged the contact channel.</p>
    pub incident_id: ::std::option::Option<::std::string::String>,
    /// <p>The time the engagement was sent to the contact channel.</p>
    pub sent_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the contact channel acknowledged the engagement.</p>
    pub read_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the contact channel received the engagement.</p>
    pub delivery_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribePageOutput {
    /// <p>The Amazon Resource Name (ARN) of the engagement to a contact channel.</p>
    pub fn page_arn(&self) -> &str {
        use std::ops::Deref;
        self.page_arn.deref()
    }
    /// <p>The ARN of the engagement that engaged the contact channel.</p>
    pub fn engagement_arn(&self) -> &str {
        use std::ops::Deref;
        self.engagement_arn.deref()
    }
    /// <p>The ARN of the contact that was engaged.</p>
    pub fn contact_arn(&self) -> &str {
        use std::ops::Deref;
        self.contact_arn.deref()
    }
    /// <p>The user that started the engagement.</p>
    pub fn sender(&self) -> &str {
        use std::ops::Deref;
        self.sender.deref()
    }
    /// <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    pub fn subject(&self) -> &str {
        use std::ops::Deref;
        self.subject.deref()
    }
    /// <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    pub fn content(&self) -> &str {
        use std::ops::Deref;
        self.content.deref()
    }
    /// <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn public_subject(&self) -> ::std::option::Option<&str> {
        self.public_subject.as_deref()
    }
    /// <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn public_content(&self) -> ::std::option::Option<&str> {
        self.public_content.as_deref()
    }
    /// <p>The ARN of the incident that engaged the contact channel.</p>
    pub fn incident_id(&self) -> ::std::option::Option<&str> {
        self.incident_id.as_deref()
    }
    /// <p>The time the engagement was sent to the contact channel.</p>
    pub fn sent_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.sent_time.as_ref()
    }
    /// <p>The time that the contact channel acknowledged the engagement.</p>
    pub fn read_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.read_time.as_ref()
    }
    /// <p>The time that the contact channel received the engagement.</p>
    pub fn delivery_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.delivery_time.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribePageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribePageOutput {
    /// Creates a new builder-style object to manufacture [`DescribePageOutput`](crate::operation::describe_page::DescribePageOutput).
    pub fn builder() -> crate::operation::describe_page::builders::DescribePageOutputBuilder {
        crate::operation::describe_page::builders::DescribePageOutputBuilder::default()
    }
}

/// A builder for [`DescribePageOutput`](crate::operation::describe_page::DescribePageOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribePageOutputBuilder {
    pub(crate) page_arn: ::std::option::Option<::std::string::String>,
    pub(crate) engagement_arn: ::std::option::Option<::std::string::String>,
    pub(crate) contact_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sender: ::std::option::Option<::std::string::String>,
    pub(crate) subject: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) public_subject: ::std::option::Option<::std::string::String>,
    pub(crate) public_content: ::std::option::Option<::std::string::String>,
    pub(crate) incident_id: ::std::option::Option<::std::string::String>,
    pub(crate) sent_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) read_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) delivery_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribePageOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the engagement to a contact channel.</p>
    /// This field is required.
    pub fn page_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.page_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement to a contact channel.</p>
    pub fn set_page_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.page_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement to a contact channel.</p>
    pub fn get_page_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.page_arn
    }
    /// <p>The ARN of the engagement that engaged the contact channel.</p>
    /// This field is required.
    pub fn engagement_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engagement_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the engagement that engaged the contact channel.</p>
    pub fn set_engagement_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engagement_arn = input;
        self
    }
    /// <p>The ARN of the engagement that engaged the contact channel.</p>
    pub fn get_engagement_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.engagement_arn
    }
    /// <p>The ARN of the contact that was engaged.</p>
    /// This field is required.
    pub fn contact_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the contact that was engaged.</p>
    pub fn set_contact_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_arn = input;
        self
    }
    /// <p>The ARN of the contact that was engaged.</p>
    pub fn get_contact_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_arn
    }
    /// <p>The user that started the engagement.</p>
    /// This field is required.
    pub fn sender(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user that started the engagement.</p>
    pub fn set_sender(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender = input;
        self
    }
    /// <p>The user that started the engagement.</p>
    pub fn get_sender(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender
    }
    /// <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    /// This field is required.
    pub fn subject(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subject = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    pub fn get_subject(&self) -> &::std::option::Option<::std::string::String> {
        &self.subject
    }
    /// <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    /// This field is required.
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn public_subject(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_subject = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn set_public_subject(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_subject = input;
        self
    }
    /// <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn get_public_subject(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_subject
    }
    /// <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn public_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn set_public_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_content = input;
        self
    }
    /// <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn get_public_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_content
    }
    /// <p>The ARN of the incident that engaged the contact channel.</p>
    pub fn incident_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.incident_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the incident that engaged the contact channel.</p>
    pub fn set_incident_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.incident_id = input;
        self
    }
    /// <p>The ARN of the incident that engaged the contact channel.</p>
    pub fn get_incident_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.incident_id
    }
    /// <p>The time the engagement was sent to the contact channel.</p>
    pub fn sent_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.sent_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the engagement was sent to the contact channel.</p>
    pub fn set_sent_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.sent_time = input;
        self
    }
    /// <p>The time the engagement was sent to the contact channel.</p>
    pub fn get_sent_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.sent_time
    }
    /// <p>The time that the contact channel acknowledged the engagement.</p>
    pub fn read_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.read_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the contact channel acknowledged the engagement.</p>
    pub fn set_read_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.read_time = input;
        self
    }
    /// <p>The time that the contact channel acknowledged the engagement.</p>
    pub fn get_read_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.read_time
    }
    /// <p>The time that the contact channel received the engagement.</p>
    pub fn delivery_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.delivery_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the contact channel received the engagement.</p>
    pub fn set_delivery_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.delivery_time = input;
        self
    }
    /// <p>The time that the contact channel received the engagement.</p>
    pub fn get_delivery_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.delivery_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribePageOutput`](crate::operation::describe_page::DescribePageOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`page_arn`](crate::operation::describe_page::builders::DescribePageOutputBuilder::page_arn)
    /// - [`engagement_arn`](crate::operation::describe_page::builders::DescribePageOutputBuilder::engagement_arn)
    /// - [`contact_arn`](crate::operation::describe_page::builders::DescribePageOutputBuilder::contact_arn)
    /// - [`sender`](crate::operation::describe_page::builders::DescribePageOutputBuilder::sender)
    /// - [`subject`](crate::operation::describe_page::builders::DescribePageOutputBuilder::subject)
    /// - [`content`](crate::operation::describe_page::builders::DescribePageOutputBuilder::content)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_page::DescribePageOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_page::DescribePageOutput {
            page_arn: self.page_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "page_arn",
                    "page_arn was not specified but it is required when building DescribePageOutput",
                )
            })?,
            engagement_arn: self.engagement_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "engagement_arn",
                    "engagement_arn was not specified but it is required when building DescribePageOutput",
                )
            })?,
            contact_arn: self.contact_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "contact_arn",
                    "contact_arn was not specified but it is required when building DescribePageOutput",
                )
            })?,
            sender: self.sender.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sender",
                    "sender was not specified but it is required when building DescribePageOutput",
                )
            })?,
            subject: self.subject.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subject",
                    "subject was not specified but it is required when building DescribePageOutput",
                )
            })?,
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building DescribePageOutput",
                )
            })?,
            public_subject: self.public_subject,
            public_content: self.public_content,
            incident_id: self.incident_id,
            sent_time: self.sent_time,
            read_time: self.read_time,
            delivery_time: self.delivery_time,
            _request_id: self._request_id,
        })
    }
}
