// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateContactInput {
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan you're updating.</p>
    #[doc(hidden)]
    pub contact_id: std::option::Option<std::string::String>,
    /// <p>The full name of the contact or escalation plan.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>A list of stages. A contact has an engagement plan with stages for specified contact channels. An escalation plan uses these stages to contact specified contacts. </p>
    #[doc(hidden)]
    pub plan: std::option::Option<crate::types::Plan>,
}
impl UpdateContactInput {
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan you're updating.</p>
    pub fn contact_id(&self) -> std::option::Option<&str> {
        self.contact_id.as_deref()
    }
    /// <p>The full name of the contact or escalation plan.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A list of stages. A contact has an engagement plan with stages for specified contact channels. An escalation plan uses these stages to contact specified contacts. </p>
    pub fn plan(&self) -> std::option::Option<&crate::types::Plan> {
        self.plan.as_ref()
    }
}
impl UpdateContactInput {
    /// Creates a new builder-style object to manufacture [`UpdateContactInput`](crate::operation::update_contact::UpdateContactInput).
    pub fn builder() -> crate::operation::update_contact::builders::UpdateContactInputBuilder {
        crate::operation::update_contact::builders::UpdateContactInputBuilder::default()
    }
}

/// A builder for [`UpdateContactInput`](crate::operation::update_contact::UpdateContactInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateContactInputBuilder {
    pub(crate) contact_id: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) plan: std::option::Option<crate::types::Plan>,
}
impl UpdateContactInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan you're updating.</p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_id = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan you're updating.</p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.contact_id = input;
        self
    }
    /// <p>The full name of the contact or escalation plan.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The full name of the contact or escalation plan.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A list of stages. A contact has an engagement plan with stages for specified contact channels. An escalation plan uses these stages to contact specified contacts. </p>
    pub fn plan(mut self, input: crate::types::Plan) -> Self {
        self.plan = Some(input);
        self
    }
    /// <p>A list of stages. A contact has an engagement plan with stages for specified contact channels. An escalation plan uses these stages to contact specified contacts. </p>
    pub fn set_plan(mut self, input: std::option::Option<crate::types::Plan>) -> Self {
        self.plan = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateContactInput`](crate::operation::update_contact::UpdateContactInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_contact::UpdateContactInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_contact::UpdateContactInput {
            contact_id: self.contact_id,
            display_name: self.display_name,
            plan: self.plan,
        })
    }
}
