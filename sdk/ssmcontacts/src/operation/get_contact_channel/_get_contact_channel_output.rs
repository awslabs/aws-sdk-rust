// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetContactChannelOutput {
    /// <p>The ARN of the contact that the channel belongs to.</p>
    pub contact_arn: ::std::string::String,
    /// <p>The ARN of the contact channel.</p>
    pub contact_channel_arn: ::std::string::String,
    /// <p>The name of the contact channel</p>
    pub name: ::std::string::String,
    /// <p>The type of contact channel. The type is <code>SMS</code>, <code>VOICE</code>, or <code>EMAIL</code>.</p>
    pub r#type: crate::types::ChannelType,
    /// <p>The details that Incident Manager uses when trying to engage the contact channel.</p>
    pub delivery_address: ::std::option::Option<crate::types::ContactChannelAddress>,
    /// <p>A Boolean value indicating if the contact channel has been activated or not.</p>
    pub activation_status: ::std::option::Option<crate::types::ActivationStatus>,
    _request_id: Option<String>,
}
impl GetContactChannelOutput {
    /// <p>The ARN of the contact that the channel belongs to.</p>
    pub fn contact_arn(&self) -> &str {
        use std::ops::Deref;
        self.contact_arn.deref()
    }
    /// <p>The ARN of the contact channel.</p>
    pub fn contact_channel_arn(&self) -> &str {
        use std::ops::Deref;
        self.contact_channel_arn.deref()
    }
    /// <p>The name of the contact channel</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of contact channel. The type is <code>SMS</code>, <code>VOICE</code>, or <code>EMAIL</code>.</p>
    pub fn r#type(&self) -> &crate::types::ChannelType {
        &self.r#type
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel.</p>
    pub fn delivery_address(&self) -> ::std::option::Option<&crate::types::ContactChannelAddress> {
        self.delivery_address.as_ref()
    }
    /// <p>A Boolean value indicating if the contact channel has been activated or not.</p>
    pub fn activation_status(&self) -> ::std::option::Option<&crate::types::ActivationStatus> {
        self.activation_status.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetContactChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetContactChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetContactChannelOutput`](crate::operation::get_contact_channel::GetContactChannelOutput).
    pub fn builder() -> crate::operation::get_contact_channel::builders::GetContactChannelOutputBuilder {
        crate::operation::get_contact_channel::builders::GetContactChannelOutputBuilder::default()
    }
}

/// A builder for [`GetContactChannelOutput`](crate::operation::get_contact_channel::GetContactChannelOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetContactChannelOutputBuilder {
    pub(crate) contact_arn: ::std::option::Option<::std::string::String>,
    pub(crate) contact_channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ChannelType>,
    pub(crate) delivery_address: ::std::option::Option<crate::types::ContactChannelAddress>,
    pub(crate) activation_status: ::std::option::Option<crate::types::ActivationStatus>,
    _request_id: Option<String>,
}
impl GetContactChannelOutputBuilder {
    /// <p>The ARN of the contact that the channel belongs to.</p>
    /// This field is required.
    pub fn contact_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the contact that the channel belongs to.</p>
    pub fn set_contact_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_arn = input;
        self
    }
    /// <p>The ARN of the contact that the channel belongs to.</p>
    pub fn get_contact_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_arn
    }
    /// <p>The ARN of the contact channel.</p>
    /// This field is required.
    pub fn contact_channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the contact channel.</p>
    pub fn set_contact_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_channel_arn = input;
        self
    }
    /// <p>The ARN of the contact channel.</p>
    pub fn get_contact_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_channel_arn
    }
    /// <p>The name of the contact channel</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the contact channel</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the contact channel</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of contact channel. The type is <code>SMS</code>, <code>VOICE</code>, or <code>EMAIL</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ChannelType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of contact channel. The type is <code>SMS</code>, <code>VOICE</code>, or <code>EMAIL</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ChannelType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of contact channel. The type is <code>SMS</code>, <code>VOICE</code>, or <code>EMAIL</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ChannelType> {
        &self.r#type
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel.</p>
    /// This field is required.
    pub fn delivery_address(mut self, input: crate::types::ContactChannelAddress) -> Self {
        self.delivery_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel.</p>
    pub fn set_delivery_address(mut self, input: ::std::option::Option<crate::types::ContactChannelAddress>) -> Self {
        self.delivery_address = input;
        self
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel.</p>
    pub fn get_delivery_address(&self) -> &::std::option::Option<crate::types::ContactChannelAddress> {
        &self.delivery_address
    }
    /// <p>A Boolean value indicating if the contact channel has been activated or not.</p>
    pub fn activation_status(mut self, input: crate::types::ActivationStatus) -> Self {
        self.activation_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value indicating if the contact channel has been activated or not.</p>
    pub fn set_activation_status(mut self, input: ::std::option::Option<crate::types::ActivationStatus>) -> Self {
        self.activation_status = input;
        self
    }
    /// <p>A Boolean value indicating if the contact channel has been activated or not.</p>
    pub fn get_activation_status(&self) -> &::std::option::Option<crate::types::ActivationStatus> {
        &self.activation_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetContactChannelOutput`](crate::operation::get_contact_channel::GetContactChannelOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`contact_arn`](crate::operation::get_contact_channel::builders::GetContactChannelOutputBuilder::contact_arn)
    /// - [`contact_channel_arn`](crate::operation::get_contact_channel::builders::GetContactChannelOutputBuilder::contact_channel_arn)
    /// - [`name`](crate::operation::get_contact_channel::builders::GetContactChannelOutputBuilder::name)
    /// - [`r#type`](crate::operation::get_contact_channel::builders::GetContactChannelOutputBuilder::r#type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_contact_channel::GetContactChannelOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_contact_channel::GetContactChannelOutput {
            contact_arn: self.contact_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "contact_arn",
                    "contact_arn was not specified but it is required when building GetContactChannelOutput",
                )
            })?,
            contact_channel_arn: self.contact_channel_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "contact_channel_arn",
                    "contact_channel_arn was not specified but it is required when building GetContactChannelOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetContactChannelOutput",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building GetContactChannelOutput",
                )
            })?,
            delivery_address: self.delivery_address,
            activation_status: self.activation_status,
            _request_id: self._request_id,
        })
    }
}
