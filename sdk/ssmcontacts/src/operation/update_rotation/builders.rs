// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_rotation::_update_rotation_output::UpdateRotationOutputBuilder;

pub use crate::operation::update_rotation::_update_rotation_input::UpdateRotationInputBuilder;

impl crate::operation::update_rotation::builders::UpdateRotationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_rotation::UpdateRotationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_rotation::UpdateRotationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_rotation();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateRotation`.
///
/// <p>Updates the information specified for an on-call rotation.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateRotationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_rotation::builders::UpdateRotationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_rotation::UpdateRotationOutput,
        crate::operation::update_rotation::UpdateRotationError,
    > for UpdateRotationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_rotation::UpdateRotationOutput,
            crate::operation::update_rotation::UpdateRotationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateRotationFluentBuilder {
    /// Creates a new `UpdateRotation`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateRotation as a reference.
    pub fn as_input(&self) -> &crate::operation::update_rotation::builders::UpdateRotationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_rotation::UpdateRotationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_rotation::UpdateRotationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_rotation::UpdateRotation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_rotation::UpdateRotation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_rotation::UpdateRotationOutput,
        crate::operation::update_rotation::UpdateRotationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rotation to update.</p>
    pub fn rotation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.rotation_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rotation to update.</p>
    pub fn set_rotation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_rotation_id(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rotation to update.</p>
    pub fn get_rotation_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_rotation_id()
    }
    ///
    /// Appends an item to `ContactIds`.
    ///
    /// To override the contents of this collection use [`set_contact_ids`](Self::set_contact_ids).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the contacts to include in the updated rotation.</p>
    /// <p>The order in which you list the contacts is their shift order in the rotation schedule.</p>
    pub fn contact_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.contact_ids(input.into());
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the contacts to include in the updated rotation.</p>
    /// <p>The order in which you list the contacts is their shift order in the rotation schedule.</p>
    pub fn set_contact_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_contact_ids(input);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the contacts to include in the updated rotation.</p>
    /// <p>The order in which you list the contacts is their shift order in the rotation schedule.</p>
    pub fn get_contact_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_contact_ids()
    }
    /// <p>The date and time the rotation goes into effect.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>The date and time the rotation goes into effect.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>The date and time the rotation goes into effect.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_start_time()
    }
    /// <p>The time zone to base the updated rotation’s activity on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p><note>
    /// <p>Designators for time zones that don’t support Daylight Savings Time Rules, such as Pacific Standard Time (PST) and Pacific Daylight Time (PDT), aren't supported.</p>
    /// </note>
    pub fn time_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.time_zone_id(input.into());
        self
    }
    /// <p>The time zone to base the updated rotation’s activity on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p><note>
    /// <p>Designators for time zones that don’t support Daylight Savings Time Rules, such as Pacific Standard Time (PST) and Pacific Daylight Time (PDT), aren't supported.</p>
    /// </note>
    pub fn set_time_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_time_zone_id(input);
        self
    }
    /// <p>The time zone to base the updated rotation’s activity on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p><note>
    /// <p>Designators for time zones that don’t support Daylight Savings Time Rules, such as Pacific Standard Time (PST) and Pacific Daylight Time (PDT), aren't supported.</p>
    /// </note>
    pub fn get_time_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_time_zone_id()
    }
    /// <p>Information about how long the updated rotation lasts before restarting at the beginning of the shift order.</p>
    pub fn recurrence(mut self, input: crate::types::RecurrenceSettings) -> Self {
        self.inner = self.inner.recurrence(input);
        self
    }
    /// <p>Information about how long the updated rotation lasts before restarting at the beginning of the shift order.</p>
    pub fn set_recurrence(mut self, input: ::std::option::Option<crate::types::RecurrenceSettings>) -> Self {
        self.inner = self.inner.set_recurrence(input);
        self
    }
    /// <p>Information about how long the updated rotation lasts before restarting at the beginning of the shift order.</p>
    pub fn get_recurrence(&self) -> &::std::option::Option<crate::types::RecurrenceSettings> {
        self.inner.get_recurrence()
    }
}
