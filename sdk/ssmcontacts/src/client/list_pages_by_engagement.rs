// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListPagesByEngagement`](crate::client::fluent_builders::ListPagesByEngagement) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPagesByEngagement::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`engagement_id(impl Into<String>)`](crate::client::fluent_builders::ListPagesByEngagement::engagement_id) / [`set_engagement_id(Option<String>)`](crate::client::fluent_builders::ListPagesByEngagement::set_engagement_id): <p>The Amazon Resource Name (ARN) of the engagement.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPagesByEngagement::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPagesByEngagement::set_next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPagesByEngagement::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPagesByEngagement::set_max_results): <p>The maximum number of engagements to contact channels to list per page of results.</p>
    /// - On success, responds with [`ListPagesByEngagementOutput`](crate::output::ListPagesByEngagementOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListPagesByEngagementOutput::next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`pages(Option<Vec<Page>>)`](crate::output::ListPagesByEngagementOutput::pages): <p>The list of engagements to contact channels.</p>
    /// - On failure, responds with [`SdkError<ListPagesByEngagementError>`](crate::error::ListPagesByEngagementError)
    pub fn list_pages_by_engagement(
        &self,
    ) -> crate::client::fluent_builders::ListPagesByEngagement {
        crate::client::fluent_builders::ListPagesByEngagement::new(self.handle.clone())
    }
}
