// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `AcceptPage`.
///
/// <p>Used to acknowledge an engagement to a contact channel during an incident.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AcceptPage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::accept_page_input::Builder,
}
impl AcceptPage {
    /// Creates a new `AcceptPage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::AcceptPage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::AcceptPageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::AcceptPageOutput,
        aws_smithy_http::result::SdkError<crate::error::AcceptPageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement to a contact channel.</p>
    pub fn page_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.page_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement to a contact channel.</p>
    pub fn set_page_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_page_id(input);
        self
    }
    /// <p>The ARN of the contact channel.</p>
    pub fn contact_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_channel_id(input.into());
        self
    }
    /// <p>The ARN of the contact channel.</p>
    pub fn set_contact_channel_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_contact_channel_id(input);
        self
    }
    /// <p>The type indicates if the page was <code>DELIVERED</code> or <code>READ</code>.</p>
    pub fn accept_type(mut self, input: crate::model::AcceptType) -> Self {
        self.inner = self.inner.accept_type(input);
        self
    }
    /// <p>The type indicates if the page was <code>DELIVERED</code> or <code>READ</code>.</p>
    pub fn set_accept_type(mut self, input: std::option::Option<crate::model::AcceptType>) -> Self {
        self.inner = self.inner.set_accept_type(input);
        self
    }
    /// <p>Information provided by the user when the user acknowledges the page.</p>
    pub fn note(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.note(input.into());
        self
    }
    /// <p>Information provided by the user when the user acknowledges the page.</p>
    pub fn set_note(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_note(input);
        self
    }
    /// <p>The accept code is a 6-digit code used to acknowledge the page.</p>
    pub fn accept_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.accept_code(input.into());
        self
    }
    /// <p>The accept code is a 6-digit code used to acknowledge the page.</p>
    pub fn set_accept_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_accept_code(input);
        self
    }
    /// <p>An optional field that Incident Manager uses to <code>ENFORCE</code> <code>AcceptCode</code> validation when acknowledging an page. Acknowledgement can occur by replying to a page, or when entering the AcceptCode in the console. Enforcing AcceptCode validation causes Incident Manager to verify that the code entered by the user matches the code sent by Incident Manager with the page.</p>
    /// <p>Incident Manager can also <code>IGNORE</code> <code>AcceptCode</code> validation. Ignoring <code>AcceptCode</code> validation causes Incident Manager to accept any value entered for the <code>AcceptCode</code>.</p>
    pub fn accept_code_validation(mut self, input: crate::model::AcceptCodeValidation) -> Self {
        self.inner = self.inner.accept_code_validation(input);
        self
    }
    /// <p>An optional field that Incident Manager uses to <code>ENFORCE</code> <code>AcceptCode</code> validation when acknowledging an page. Acknowledgement can occur by replying to a page, or when entering the AcceptCode in the console. Enforcing AcceptCode validation causes Incident Manager to verify that the code entered by the user matches the code sent by Incident Manager with the page.</p>
    /// <p>Incident Manager can also <code>IGNORE</code> <code>AcceptCode</code> validation. Ignoring <code>AcceptCode</code> validation causes Incident Manager to accept any value entered for the <code>AcceptCode</code>.</p>
    pub fn set_accept_code_validation(
        mut self,
        input: std::option::Option<crate::model::AcceptCodeValidation>,
    ) -> Self {
        self.inner = self.inner.set_accept_code_validation(input);
        self
    }
}

/// Fluent builder constructing a request to `ActivateContactChannel`.
///
/// <p>Activates a contact's contact channel. Incident Manager can't engage a contact until the contact channel has been activated.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ActivateContactChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::activate_contact_channel_input::Builder,
}
impl ActivateContactChannel {
    /// Creates a new `ActivateContactChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ActivateContactChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ActivateContactChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ActivateContactChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::ActivateContactChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    pub fn contact_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_channel_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    pub fn set_contact_channel_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_contact_channel_id(input);
        self
    }
    /// <p>The code sent to the contact channel when it was created in the contact. </p>
    pub fn activation_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.activation_code(input.into());
        self
    }
    /// <p>The code sent to the contact channel when it was created in the contact. </p>
    pub fn set_activation_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_activation_code(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateContact`.
///
/// <p>Contacts are either the contacts that Incident Manager engages during an incident or the escalation plans that Incident Manager uses to engage contacts in phases during an incident. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateContact {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_contact_input::Builder,
}
impl CreateContact {
    /// Creates a new `CreateContact`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateContact,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateContactError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateContactOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateContactError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The short name to quickly identify a contact or escalation plan. The contact alias must be unique and identifiable. </p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>The short name to quickly identify a contact or escalation plan. The contact alias must be unique and identifiable. </p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
    /// <p>The full name of the contact or escalation plan. </p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The full name of the contact or escalation plan. </p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>To create an escalation plan use <code>ESCALATION</code>. To create a contact use <code>PERSONAL</code>.</p>
    pub fn r#type(mut self, input: crate::model::ContactType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>To create an escalation plan use <code>ESCALATION</code>. To create a contact use <code>PERSONAL</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::model::ContactType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>A list of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts. </p>
    pub fn plan(mut self, input: crate::model::Plan) -> Self {
        self.inner = self.inner.plan(input);
        self
    }
    /// <p>A list of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts. </p>
    pub fn set_plan(mut self, input: std::option::Option<crate::model::Plan>) -> Self {
        self.inner = self.inner.set_plan(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Adds a tag to the target. You can only tag resources created in the first Region of your replication set. </p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Adds a tag to the target. You can only tag resources created in the first Region of your replication set. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.idempotency_token(input.into());
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn set_idempotency_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_idempotency_token(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateContactChannel`.
///
/// <p>A contact channel is the method that Incident Manager uses to engage your contact.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateContactChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_contact_channel_input::Builder,
}
impl CreateContactChannel {
    /// Creates a new `CreateContactChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateContactChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateContactChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateContactChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateContactChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact you are adding the contact channel to.</p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact you are adding the contact channel to.</p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_id(input);
        self
    }
    /// <p>The name of the contact channel.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the contact channel.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Incident Manager supports three types of contact channels:</p>
    /// <ul>
    /// <li> <p> <code>SMS</code> </p> </li>
    /// <li> <p> <code>VOICE</code> </p> </li>
    /// <li> <p> <code>EMAIL</code> </p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::model::ChannelType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>Incident Manager supports three types of contact channels:</p>
    /// <ul>
    /// <li> <p> <code>SMS</code> </p> </li>
    /// <li> <p> <code>VOICE</code> </p> </li>
    /// <li> <p> <code>EMAIL</code> </p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<crate::model::ChannelType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel. The format is dependent on the type of the contact channel. The following are the expected formats:</p>
    /// <ul>
    /// <li> <p>SMS - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>VOICE - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>EMAIL - any standard email format</p> </li>
    /// </ul>
    pub fn delivery_address(mut self, input: crate::model::ContactChannelAddress) -> Self {
        self.inner = self.inner.delivery_address(input);
        self
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel. The format is dependent on the type of the contact channel. The following are the expected formats:</p>
    /// <ul>
    /// <li> <p>SMS - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>VOICE - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>EMAIL - any standard email format</p> </li>
    /// </ul>
    pub fn set_delivery_address(
        mut self,
        input: std::option::Option<crate::model::ContactChannelAddress>,
    ) -> Self {
        self.inner = self.inner.set_delivery_address(input);
        self
    }
    /// <p>If you want to activate the channel at a later time, you can choose to defer activation. Incident Manager can't engage your contact channel until it has been activated.</p>
    pub fn defer_activation(mut self, input: bool) -> Self {
        self.inner = self.inner.defer_activation(input);
        self
    }
    /// <p>If you want to activate the channel at a later time, you can choose to defer activation. Incident Manager can't engage your contact channel until it has been activated.</p>
    pub fn set_defer_activation(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_defer_activation(input);
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.idempotency_token(input.into());
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn set_idempotency_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_idempotency_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DeactivateContactChannel`.
///
/// <p>To no longer receive Incident Manager engagements to a contact channel, you can deactivate the channel.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeactivateContactChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::deactivate_contact_channel_input::Builder,
}
impl DeactivateContactChannel {
    /// Creates a new `DeactivateContactChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeactivateContactChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeactivateContactChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeactivateContactChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::DeactivateContactChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel you're deactivating.</p>
    pub fn contact_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_channel_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel you're deactivating.</p>
    pub fn set_contact_channel_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_contact_channel_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteContact`.
///
/// <p>To remove a contact from Incident Manager, you can delete the contact. Deleting a contact removes them from all escalation plans and related response plans. Deleting an escalation plan removes it from all related response plans. You will have to recreate the contact and its contact channels before you can use it again.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteContact {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_contact_input::Builder,
}
impl DeleteContact {
    /// Creates a new `DeleteContact`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteContact,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteContactError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteContactOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteContactError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact that you're deleting.</p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact that you're deleting.</p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteContactChannel`.
///
/// <p>To no longer receive engagements on a contact channel, you can delete the channel from a contact. Deleting the contact channel removes it from the contact's engagement plan. If you delete the only contact channel for a contact, you won't be able to engage that contact during an incident.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteContactChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_contact_channel_input::Builder,
}
impl DeleteContactChannel {
    /// Creates a new `DeleteContactChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteContactChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteContactChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteContactChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteContactChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    pub fn contact_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_channel_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    pub fn set_contact_channel_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_contact_channel_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeEngagement`.
///
/// <p>Incident Manager uses engagements to engage contacts and escalation plans during an incident. Use this command to describe the engagement that occurred during an incident.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEngagement {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_engagement_input::Builder,
}
impl DescribeEngagement {
    /// Creates a new `DescribeEngagement`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeEngagement,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeEngagementError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeEngagementOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeEngagementError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement you want the details of.</p>
    pub fn engagement_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engagement_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement you want the details of.</p>
    pub fn set_engagement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engagement_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribePage`.
///
/// <p>Lists details of the engagement to a contact channel.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribePage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_page_input::Builder,
}
impl DescribePage {
    /// Creates a new `DescribePage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribePage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribePageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribePageOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribePageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the engagement to a contact channel.</p>
    pub fn page_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.page_id(input.into());
        self
    }
    /// <p>The ID of the engagement to a contact channel.</p>
    pub fn set_page_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_page_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetContact`.
///
/// <p>Retrieves information about the specified contact or escalation plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetContact {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_contact_input::Builder,
}
impl GetContact {
    /// Creates a new `GetContact`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetContact,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetContactError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetContactOutput,
        aws_smithy_http::result::SdkError<crate::error::GetContactError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetContactChannel`.
///
/// <p>List details about a specific contact channel.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetContactChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_contact_channel_input::Builder,
}
impl GetContactChannel {
    /// Creates a new `GetContactChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetContactChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetContactChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetContactChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::GetContactChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel you want information about.</p>
    pub fn contact_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_channel_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel you want information about.</p>
    pub fn set_contact_channel_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_contact_channel_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetContactPolicy`.
///
/// <p>Retrieves the resource policies attached to the specified contact or escalation plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetContactPolicy {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_contact_policy_input::Builder,
}
impl GetContactPolicy {
    /// Creates a new `GetContactPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetContactPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetContactPolicyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetContactPolicyOutput,
        aws_smithy_http::result::SdkError<crate::error::GetContactPolicyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn contact_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn set_contact_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `ListContactChannels`.
///
/// <p>Lists all contact channels for the specified contact.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListContactChannels {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_contact_channels_input::Builder,
}
impl ListContactChannels {
    /// Creates a new `ListContactChannels`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListContactChannels,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListContactChannelsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListContactChannelsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListContactChannelsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListContactChannelsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListContactChannelsPaginator {
        crate::paginator::ListContactChannelsPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of the contact. </p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact. </p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_id(input);
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of contact channels per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of contact channels per page.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListContacts`.
///
/// <p>Lists all contacts and escalation plans in Incident Manager.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListContacts {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_contacts_input::Builder,
}
impl ListContacts {
    /// Creates a new `ListContacts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListContacts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListContactsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListContactsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListContactsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListContactsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListContactsPaginator {
        crate::paginator::ListContactsPaginator::new(self.handle, self.inner)
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of contacts and escalation plans per page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of contacts and escalation plans per page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Used to list only contacts who's aliases start with the specified prefix.</p>
    pub fn alias_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias_prefix(input.into());
        self
    }
    /// <p>Used to list only contacts who's aliases start with the specified prefix.</p>
    pub fn set_alias_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias_prefix(input);
        self
    }
    /// <p>The type of contact. A contact is type <code>PERSONAL</code> and an escalation plan is type <code>ESCALATION</code>.</p>
    pub fn r#type(mut self, input: crate::model::ContactType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of contact. A contact is type <code>PERSONAL</code> and an escalation plan is type <code>ESCALATION</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::model::ContactType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
}

/// Fluent builder constructing a request to `ListEngagements`.
///
/// <p>Lists all engagements that have happened in an incident.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListEngagements {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_engagements_input::Builder,
}
impl ListEngagements {
    /// Creates a new `ListEngagements`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListEngagements,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListEngagementsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListEngagementsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListEngagementsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListEngagementsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListEngagementsPaginator {
        crate::paginator::ListEngagementsPaginator::new(self.handle, self.inner)
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of engagements per page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of engagements per page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident you're listing engagements for.</p>
    pub fn incident_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.incident_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident you're listing engagements for.</p>
    pub fn set_incident_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_incident_id(input);
        self
    }
    /// <p>The time range to lists engagements for an incident.</p>
    pub fn time_range_value(mut self, input: crate::model::TimeRange) -> Self {
        self.inner = self.inner.time_range_value(input);
        self
    }
    /// <p>The time range to lists engagements for an incident.</p>
    pub fn set_time_range_value(
        mut self,
        input: std::option::Option<crate::model::TimeRange>,
    ) -> Self {
        self.inner = self.inner.set_time_range_value(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPageReceipts`.
///
/// <p>Lists all of the engagements to contact channels that have been acknowledged. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPageReceipts {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_page_receipts_input::Builder,
}
impl ListPageReceipts {
    /// Creates a new `ListPageReceipts`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPageReceipts,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPageReceiptsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPageReceiptsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPageReceiptsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPageReceiptsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPageReceiptsPaginator {
        crate::paginator::ListPageReceiptsPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement to a specific contact channel.</p>
    pub fn page_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.page_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement to a specific contact channel.</p>
    pub fn set_page_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_page_id(input);
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of acknowledgements per page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of acknowledgements per page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPagesByContact`.
///
/// <p>Lists the engagements to a contact's contact channels.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPagesByContact {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pages_by_contact_input::Builder,
}
impl ListPagesByContact {
    /// Creates a new `ListPagesByContact`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPagesByContact,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPagesByContactError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPagesByContactOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPagesByContactError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPagesByContactPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPagesByContactPaginator {
        crate::paginator::ListPagesByContactPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of the contact you are retrieving engagements for.</p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact you are retrieving engagements for.</p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_id(input);
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of engagements to contact channels to list per page of results. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of engagements to contact channels to list per page of results. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListPagesByEngagement`.
///
/// <p>Lists the engagements to contact channels that occurred by engaging a contact.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPagesByEngagement {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_pages_by_engagement_input::Builder,
}
impl ListPagesByEngagement {
    /// Creates a new `ListPagesByEngagement`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListPagesByEngagement,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListPagesByEngagementError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListPagesByEngagementOutput,
        aws_smithy_http::result::SdkError<crate::error::ListPagesByEngagementError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListPagesByEngagementPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListPagesByEngagementPaginator {
        crate::paginator::ListPagesByEngagementPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement.</p>
    pub fn engagement_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engagement_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement.</p>
    pub fn set_engagement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engagement_id(input);
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of engagements to contact channels to list per page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of engagements to contact channels to list per page of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p>Lists the tags of an escalation plan or contact.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `PutContactPolicy`.
///
/// <p>Adds a resource policy to the specified contact or escalation plan. The resource policy is used to share the contact or escalation plan using Resource Access Manager (RAM). For more information about cross-account sharing, see <a href="https://docs.aws.amazon.com/incident-manager/latest/userguide/xa.html">Setting up cross-account functionality</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutContactPolicy {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::put_contact_policy_input::Builder,
}
impl PutContactPolicy {
    /// Creates a new `PutContactPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::PutContactPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::PutContactPolicyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::PutContactPolicyOutput,
        aws_smithy_http::result::SdkError<crate::error::PutContactPolicyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn contact_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn set_contact_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_arn(input);
        self
    }
    /// <p>Details of the resource policy.</p>
    pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy(input.into());
        self
    }
    /// <p>Details of the resource policy.</p>
    pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_policy(input);
        self
    }
}

/// Fluent builder constructing a request to `SendActivationCode`.
///
/// <p>Sends an activation code to a contact channel. The contact can use this code to activate the contact channel in the console or with the <code>ActivateChannel</code> operation. Incident Manager can't engage a contact channel until it has been activated.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SendActivationCode {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::send_activation_code_input::Builder,
}
impl SendActivationCode {
    /// Creates a new `SendActivationCode`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::SendActivationCode,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::SendActivationCodeError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::SendActivationCodeOutput,
        aws_smithy_http::result::SdkError<crate::error::SendActivationCodeError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    pub fn contact_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_channel_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    pub fn set_contact_channel_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_contact_channel_id(input);
        self
    }
}

/// Fluent builder constructing a request to `StartEngagement`.
///
/// <p>Starts an engagement to a contact or escalation plan. The engagement engages each contact specified in the incident.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartEngagement {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_engagement_input::Builder,
}
impl StartEngagement {
    /// Creates a new `StartEngagement`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartEngagement,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartEngagementError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartEngagementOutput,
        aws_smithy_http::result::SdkError<crate::error::StartEngagementError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact being engaged.</p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact being engaged.</p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_id(input);
        self
    }
    /// <p>The user that started the engagement.</p>
    pub fn sender(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sender(input.into());
        self
    }
    /// <p>The user that started the engagement.</p>
    pub fn set_sender(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sender(input);
        self
    }
    /// <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> or <code>EMAIL</code>.</p>
    pub fn subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subject(input.into());
        self
    }
    /// <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> or <code>EMAIL</code>.</p>
    pub fn set_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_subject(input);
        self
    }
    /// <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> or <code>EMAIL</code>.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.content(input.into());
        self
    }
    /// <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> or <code>EMAIL</code>.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_content(input);
        self
    }
    /// <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn public_subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.public_subject(input.into());
        self
    }
    /// <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn set_public_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_public_subject(input);
        self
    }
    /// <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn public_content(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.public_content(input.into());
        self
    }
    /// <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    pub fn set_public_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_public_content(input);
        self
    }
    /// <p>The ARN of the incident that the engagement is part of.</p>
    pub fn incident_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.incident_id(input.into());
        self
    }
    /// <p>The ARN of the incident that the engagement is part of.</p>
    pub fn set_incident_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_incident_id(input);
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn idempotency_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.idempotency_token(input.into());
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn set_idempotency_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_idempotency_token(input);
        self
    }
}

/// Fluent builder constructing a request to `StopEngagement`.
///
/// <p>Stops an engagement before it finishes the final stage of the escalation plan or engagement plan. Further contacts aren't engaged.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopEngagement {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::stop_engagement_input::Builder,
}
impl StopEngagement {
    /// Creates a new `StopEngagement`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StopEngagement,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StopEngagementError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StopEngagementOutput,
        aws_smithy_http::result::SdkError<crate::error::StopEngagementError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement.</p>
    pub fn engagement_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engagement_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement.</p>
    pub fn set_engagement_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engagement_id(input);
        self
    }
    /// <p>The reason that you're stopping the engagement. </p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reason(input.into());
        self
    }
    /// <p>The reason that you're stopping the engagement. </p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reason(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p>Tags a contact or escalation plan. You can tag only contacts and escalation plans in the first region of your replication set. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags that you are adding to the contact or escalation plan.</p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags that you are adding to the contact or escalation plan.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p>Removes tags from the specified resource. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `TagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>The key of the tag that you want to remove.</p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p>The key of the tag that you want to remove.</p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateContact`.
///
/// <p>Updates the contact or escalation plan specified. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateContact {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_contact_input::Builder,
}
impl UpdateContact {
    /// Creates a new `UpdateContact`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateContact,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateContactError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateContactOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateContactError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan you're updating.</p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact or escalation plan you're updating.</p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_contact_id(input);
        self
    }
    /// <p>The full name of the contact or escalation plan.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The full name of the contact or escalation plan.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>A list of stages. A contact has an engagement plan with stages for specified contact channels. An escalation plan uses these stages to contact specified contacts. </p>
    pub fn plan(mut self, input: crate::model::Plan) -> Self {
        self.inner = self.inner.plan(input);
        self
    }
    /// <p>A list of stages. A contact has an engagement plan with stages for specified contact channels. An escalation plan uses these stages to contact specified contacts. </p>
    pub fn set_plan(mut self, input: std::option::Option<crate::model::Plan>) -> Self {
        self.inner = self.inner.set_plan(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateContactChannel`.
///
/// <p>Updates a contact's contact channel.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateContactChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_contact_channel_input::Builder,
}
impl UpdateContactChannel {
    /// Creates a new `UpdateContactChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateContactChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateContactChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateContactChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateContactChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel you want to update.</p>
    pub fn contact_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.contact_channel_id(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel you want to update.</p>
    pub fn set_contact_channel_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_contact_channel_id(input);
        self
    }
    /// <p>The name of the contact channel.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the contact channel.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel. </p>
    pub fn delivery_address(mut self, input: crate::model::ContactChannelAddress) -> Self {
        self.inner = self.inner.delivery_address(input);
        self
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel. </p>
    pub fn set_delivery_address(
        mut self,
        input: std::option::Option<crate::model::ContactChannelAddress>,
    ) -> Self {
        self.inner = self.inner.set_delivery_address(input);
        self
    }
}
