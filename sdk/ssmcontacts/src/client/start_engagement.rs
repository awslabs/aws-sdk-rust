// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartEngagement`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::contact_id) / [`set_contact_id(Option<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::set_contact_id):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the contact being engaged.</p><br>
    ///   - [`sender(impl Into<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::sender) / [`set_sender(Option<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::set_sender):<br>required: **true**<br><p>The user that started the engagement.</p><br>
    ///   - [`subject(impl Into<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::subject) / [`set_subject(Option<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::set_subject):<br>required: **true**<br><p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> or <code>EMAIL</code>.</p><br>
    ///   - [`content(impl Into<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::content) / [`set_content(Option<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::set_content):<br>required: **true**<br><p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> or <code>EMAIL</code>.</p><br>
    ///   - [`public_subject(impl Into<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::public_subject) / [`set_public_subject(Option<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::set_public_subject):<br>required: **false**<br><p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p><br>
    ///   - [`public_content(impl Into<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::public_content) / [`set_public_content(Option<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::set_public_content):<br>required: **false**<br><p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p><br>
    ///   - [`incident_id(impl Into<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::incident_id) / [`set_incident_id(Option<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::set_incident_id):<br>required: **false**<br><p>The ARN of the incident that the engagement is part of.</p><br>
    ///   - [`idempotency_token(impl Into<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::idempotency_token) / [`set_idempotency_token(Option<String>)`](crate::operation::start_engagement::builders::StartEngagementFluentBuilder::set_idempotency_token):<br>required: **false**<br><p>A token ensuring that the operation is called only once with the specified details.</p><br>
    /// - On success, responds with [`StartEngagementOutput`](crate::operation::start_engagement::StartEngagementOutput) with field(s):
    ///   - [`engagement_arn(String)`](crate::operation::start_engagement::StartEngagementOutput::engagement_arn): <p>The ARN of the engagement.</p>
    /// - On failure, responds with [`SdkError<StartEngagementError>`](crate::operation::start_engagement::StartEngagementError)
    pub fn start_engagement(&self) -> crate::operation::start_engagement::builders::StartEngagementFluentBuilder {
        crate::operation::start_engagement::builders::StartEngagementFluentBuilder::new(self.handle.clone())
    }
}
