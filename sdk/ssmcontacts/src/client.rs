// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Systems Manager Incident Manager Contacts
///
/// Client for invoking operations on AWS Systems Manager Incident Manager Contacts. Each operation on AWS Systems Manager Incident Manager Contacts is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_ssmcontacts::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_ssmcontacts::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_ssmcontacts::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AcceptPage`](crate::client::fluent_builders::AcceptPage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`page_id(impl Into<String>)`](crate::client::fluent_builders::AcceptPage::page_id) / [`set_page_id(Option<String>)`](crate::client::fluent_builders::AcceptPage::set_page_id): <p>The Amazon Resource Name (ARN) of the engagement to a contact channel.</p>
    ///   - [`contact_channel_id(impl Into<String>)`](crate::client::fluent_builders::AcceptPage::contact_channel_id) / [`set_contact_channel_id(Option<String>)`](crate::client::fluent_builders::AcceptPage::set_contact_channel_id): <p>The ARN of the contact channel.</p>
    ///   - [`accept_type(AcceptType)`](crate::client::fluent_builders::AcceptPage::accept_type) / [`set_accept_type(Option<AcceptType>)`](crate::client::fluent_builders::AcceptPage::set_accept_type): <p>The type indicates if the page was <code>DELIVERED</code> or <code>READ</code>.</p>
    ///   - [`note(impl Into<String>)`](crate::client::fluent_builders::AcceptPage::note) / [`set_note(Option<String>)`](crate::client::fluent_builders::AcceptPage::set_note): <p>Information provided by the user when the user acknowledges the page.</p>
    ///   - [`accept_code(impl Into<String>)`](crate::client::fluent_builders::AcceptPage::accept_code) / [`set_accept_code(Option<String>)`](crate::client::fluent_builders::AcceptPage::set_accept_code): <p>The accept code is a 6-digit code used to acknowledge the page.</p>
    ///   - [`accept_code_validation(AcceptCodeValidation)`](crate::client::fluent_builders::AcceptPage::accept_code_validation) / [`set_accept_code_validation(Option<AcceptCodeValidation>)`](crate::client::fluent_builders::AcceptPage::set_accept_code_validation): <p>An optional field that Incident Manager uses to <code>ENFORCE</code> <code>AcceptCode</code> validation when acknowledging an page. Acknowledgement can occur by replying to a page, or when entering the AcceptCode in the console. Enforcing AcceptCode validation causes Incident Manager to verify that the code entered by the user matches the code sent by Incident Manager with the page.</p>  <p>Incident Manager can also <code>IGNORE</code> <code>AcceptCode</code> validation. Ignoring <code>AcceptCode</code> validation causes Incident Manager to accept any value entered for the <code>AcceptCode</code>.</p>
    /// - On success, responds with [`AcceptPageOutput`](crate::output::AcceptPageOutput)

    /// - On failure, responds with [`SdkError<AcceptPageError>`](crate::error::AcceptPageError)
    pub fn accept_page(&self) -> crate::client::fluent_builders::AcceptPage {
        crate::client::fluent_builders::AcceptPage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ActivateContactChannel`](crate::client::fluent_builders::ActivateContactChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_channel_id(impl Into<String>)`](crate::client::fluent_builders::ActivateContactChannel::contact_channel_id) / [`set_contact_channel_id(Option<String>)`](crate::client::fluent_builders::ActivateContactChannel::set_contact_channel_id): <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    ///   - [`activation_code(impl Into<String>)`](crate::client::fluent_builders::ActivateContactChannel::activation_code) / [`set_activation_code(Option<String>)`](crate::client::fluent_builders::ActivateContactChannel::set_activation_code): <p>The code sent to the contact channel when it was created in the contact. </p>
    /// - On success, responds with [`ActivateContactChannelOutput`](crate::output::ActivateContactChannelOutput)

    /// - On failure, responds with [`SdkError<ActivateContactChannelError>`](crate::error::ActivateContactChannelError)
    pub fn activate_contact_channel(
        &self,
    ) -> crate::client::fluent_builders::ActivateContactChannel {
        crate::client::fluent_builders::ActivateContactChannel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateContact`](crate::client::fluent_builders::CreateContact) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`alias(impl Into<String>)`](crate::client::fluent_builders::CreateContact::alias) / [`set_alias(Option<String>)`](crate::client::fluent_builders::CreateContact::set_alias): <p>The short name to quickly identify a contact or escalation plan. The contact alias must be unique and identifiable. </p>
    ///   - [`display_name(impl Into<String>)`](crate::client::fluent_builders::CreateContact::display_name) / [`set_display_name(Option<String>)`](crate::client::fluent_builders::CreateContact::set_display_name): <p>The full name of the contact or escalation plan. </p>
    ///   - [`r#type(ContactType)`](crate::client::fluent_builders::CreateContact::type) / [`set_type(Option<ContactType>)`](crate::client::fluent_builders::CreateContact::set_type): <p>To create an escalation plan use <code>ESCALATION</code>. To create a contact use <code>PERSONAL</code>.</p>
    ///   - [`plan(Plan)`](crate::client::fluent_builders::CreateContact::plan) / [`set_plan(Option<Plan>)`](crate::client::fluent_builders::CreateContact::set_plan): <p>A list of stages. A contact has an engagement plan with stages that contact specified contact channels. An escalation plan uses stages that contact specified contacts. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateContact::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateContact::set_tags): <p>Adds a tag to the target. You can only tag resources created in the first Region of your replication set. </p>
    ///   - [`idempotency_token(impl Into<String>)`](crate::client::fluent_builders::CreateContact::idempotency_token) / [`set_idempotency_token(Option<String>)`](crate::client::fluent_builders::CreateContact::set_idempotency_token): <p>A token ensuring that the operation is called only once with the specified details.</p>
    /// - On success, responds with [`CreateContactOutput`](crate::output::CreateContactOutput) with field(s):
    ///   - [`contact_arn(Option<String>)`](crate::output::CreateContactOutput::contact_arn): <p>The Amazon Resource Name (ARN) of the created contact or escalation plan.</p>
    /// - On failure, responds with [`SdkError<CreateContactError>`](crate::error::CreateContactError)
    pub fn create_contact(&self) -> crate::client::fluent_builders::CreateContact {
        crate::client::fluent_builders::CreateContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateContactChannel`](crate::client::fluent_builders::CreateContactChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::client::fluent_builders::CreateContactChannel::contact_id) / [`set_contact_id(Option<String>)`](crate::client::fluent_builders::CreateContactChannel::set_contact_id): <p>The Amazon Resource Name (ARN) of the contact you are adding the contact channel to.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateContactChannel::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateContactChannel::set_name): <p>The name of the contact channel.</p>
    ///   - [`r#type(ChannelType)`](crate::client::fluent_builders::CreateContactChannel::type) / [`set_type(Option<ChannelType>)`](crate::client::fluent_builders::CreateContactChannel::set_type): <p>Incident Manager supports three types of contact channels:</p>  <ul>   <li> <p> <code>SMS</code> </p> </li>   <li> <p> <code>VOICE</code> </p> </li>   <li> <p> <code>EMAIL</code> </p> </li>  </ul>
    ///   - [`delivery_address(ContactChannelAddress)`](crate::client::fluent_builders::CreateContactChannel::delivery_address) / [`set_delivery_address(Option<ContactChannelAddress>)`](crate::client::fluent_builders::CreateContactChannel::set_delivery_address): <p>The details that Incident Manager uses when trying to engage the contact channel. The format is dependent on the type of the contact channel. The following are the expected formats:</p>  <ul>   <li> <p>SMS - '+' followed by the country code and phone number</p> </li>   <li> <p>VOICE - '+' followed by the country code and phone number</p> </li>   <li> <p>EMAIL - any standard email format</p> </li>  </ul>
    ///   - [`defer_activation(bool)`](crate::client::fluent_builders::CreateContactChannel::defer_activation) / [`set_defer_activation(Option<bool>)`](crate::client::fluent_builders::CreateContactChannel::set_defer_activation): <p>If you want to activate the channel at a later time, you can choose to defer activation. Incident Manager can't engage your contact channel until it has been activated.</p>
    ///   - [`idempotency_token(impl Into<String>)`](crate::client::fluent_builders::CreateContactChannel::idempotency_token) / [`set_idempotency_token(Option<String>)`](crate::client::fluent_builders::CreateContactChannel::set_idempotency_token): <p>A token ensuring that the operation is called only once with the specified details.</p>
    /// - On success, responds with [`CreateContactChannelOutput`](crate::output::CreateContactChannelOutput) with field(s):
    ///   - [`contact_channel_arn(Option<String>)`](crate::output::CreateContactChannelOutput::contact_channel_arn): <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    /// - On failure, responds with [`SdkError<CreateContactChannelError>`](crate::error::CreateContactChannelError)
    pub fn create_contact_channel(&self) -> crate::client::fluent_builders::CreateContactChannel {
        crate::client::fluent_builders::CreateContactChannel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeactivateContactChannel`](crate::client::fluent_builders::DeactivateContactChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_channel_id(impl Into<String>)`](crate::client::fluent_builders::DeactivateContactChannel::contact_channel_id) / [`set_contact_channel_id(Option<String>)`](crate::client::fluent_builders::DeactivateContactChannel::set_contact_channel_id): <p>The Amazon Resource Name (ARN) of the contact channel you're deactivating.</p>
    /// - On success, responds with [`DeactivateContactChannelOutput`](crate::output::DeactivateContactChannelOutput)

    /// - On failure, responds with [`SdkError<DeactivateContactChannelError>`](crate::error::DeactivateContactChannelError)
    pub fn deactivate_contact_channel(
        &self,
    ) -> crate::client::fluent_builders::DeactivateContactChannel {
        crate::client::fluent_builders::DeactivateContactChannel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteContact`](crate::client::fluent_builders::DeleteContact) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::client::fluent_builders::DeleteContact::contact_id) / [`set_contact_id(Option<String>)`](crate::client::fluent_builders::DeleteContact::set_contact_id): <p>The Amazon Resource Name (ARN) of the contact that you're deleting.</p>
    /// - On success, responds with [`DeleteContactOutput`](crate::output::DeleteContactOutput)

    /// - On failure, responds with [`SdkError<DeleteContactError>`](crate::error::DeleteContactError)
    pub fn delete_contact(&self) -> crate::client::fluent_builders::DeleteContact {
        crate::client::fluent_builders::DeleteContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteContactChannel`](crate::client::fluent_builders::DeleteContactChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_channel_id(impl Into<String>)`](crate::client::fluent_builders::DeleteContactChannel::contact_channel_id) / [`set_contact_channel_id(Option<String>)`](crate::client::fluent_builders::DeleteContactChannel::set_contact_channel_id): <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    /// - On success, responds with [`DeleteContactChannelOutput`](crate::output::DeleteContactChannelOutput)

    /// - On failure, responds with [`SdkError<DeleteContactChannelError>`](crate::error::DeleteContactChannelError)
    pub fn delete_contact_channel(&self) -> crate::client::fluent_builders::DeleteContactChannel {
        crate::client::fluent_builders::DeleteContactChannel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeEngagement`](crate::client::fluent_builders::DescribeEngagement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`engagement_id(impl Into<String>)`](crate::client::fluent_builders::DescribeEngagement::engagement_id) / [`set_engagement_id(Option<String>)`](crate::client::fluent_builders::DescribeEngagement::set_engagement_id): <p>The Amazon Resource Name (ARN) of the engagement you want the details of.</p>
    /// - On success, responds with [`DescribeEngagementOutput`](crate::output::DescribeEngagementOutput) with field(s):
    ///   - [`contact_arn(Option<String>)`](crate::output::DescribeEngagementOutput::contact_arn): <p>The ARN of the escalation plan or contacts involved in the engagement.</p>
    ///   - [`engagement_arn(Option<String>)`](crate::output::DescribeEngagementOutput::engagement_arn): <p>The ARN of the engagement.</p>
    ///   - [`sender(Option<String>)`](crate::output::DescribeEngagementOutput::sender): <p>The user that started the engagement.</p>
    ///   - [`subject(Option<String>)`](crate::output::DescribeEngagementOutput::subject): <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    ///   - [`content(Option<String>)`](crate::output::DescribeEngagementOutput::content): <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    ///   - [`public_subject(Option<String>)`](crate::output::DescribeEngagementOutput::public_subject): <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    ///   - [`public_content(Option<String>)`](crate::output::DescribeEngagementOutput::public_content): <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    ///   - [`incident_id(Option<String>)`](crate::output::DescribeEngagementOutput::incident_id): <p>The ARN of the incident in which the engagement occurred.</p>
    ///   - [`start_time(Option<DateTime>)`](crate::output::DescribeEngagementOutput::start_time): <p>The time that the engagement started.</p>
    ///   - [`stop_time(Option<DateTime>)`](crate::output::DescribeEngagementOutput::stop_time): <p>The time that the engagement ended.</p>
    /// - On failure, responds with [`SdkError<DescribeEngagementError>`](crate::error::DescribeEngagementError)
    pub fn describe_engagement(&self) -> crate::client::fluent_builders::DescribeEngagement {
        crate::client::fluent_builders::DescribeEngagement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePage`](crate::client::fluent_builders::DescribePage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`page_id(impl Into<String>)`](crate::client::fluent_builders::DescribePage::page_id) / [`set_page_id(Option<String>)`](crate::client::fluent_builders::DescribePage::set_page_id): <p>The ID of the engagement to a contact channel.</p>
    /// - On success, responds with [`DescribePageOutput`](crate::output::DescribePageOutput) with field(s):
    ///   - [`page_arn(Option<String>)`](crate::output::DescribePageOutput::page_arn): <p>The Amazon Resource Name (ARN) of the engagement to a contact channel.</p>
    ///   - [`engagement_arn(Option<String>)`](crate::output::DescribePageOutput::engagement_arn): <p>The ARN of the engagement that engaged the contact channel.</p>
    ///   - [`contact_arn(Option<String>)`](crate::output::DescribePageOutput::contact_arn): <p>The ARN of the contact that was engaged.</p>
    ///   - [`sender(Option<String>)`](crate::output::DescribePageOutput::sender): <p>The user that started the engagement.</p>
    ///   - [`subject(Option<String>)`](crate::output::DescribePageOutput::subject): <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    ///   - [`content(Option<String>)`](crate::output::DescribePageOutput::content): <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> and <code>EMAIL</code>.</p>
    ///   - [`public_subject(Option<String>)`](crate::output::DescribePageOutput::public_subject): <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    ///   - [`public_content(Option<String>)`](crate::output::DescribePageOutput::public_content): <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    ///   - [`incident_id(Option<String>)`](crate::output::DescribePageOutput::incident_id): <p>The ARN of the incident that engaged the contact channel.</p>
    ///   - [`sent_time(Option<DateTime>)`](crate::output::DescribePageOutput::sent_time): <p>The time the engagement was sent to the contact channel.</p>
    ///   - [`read_time(Option<DateTime>)`](crate::output::DescribePageOutput::read_time): <p>The time that the contact channel acknowledged the engagement.</p>
    ///   - [`delivery_time(Option<DateTime>)`](crate::output::DescribePageOutput::delivery_time): <p>The time that the contact channel received the engagement.</p>
    /// - On failure, responds with [`SdkError<DescribePageError>`](crate::error::DescribePageError)
    pub fn describe_page(&self) -> crate::client::fluent_builders::DescribePage {
        crate::client::fluent_builders::DescribePage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetContact`](crate::client::fluent_builders::GetContact) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::client::fluent_builders::GetContact::contact_id) / [`set_contact_id(Option<String>)`](crate::client::fluent_builders::GetContact::set_contact_id): <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    /// - On success, responds with [`GetContactOutput`](crate::output::GetContactOutput) with field(s):
    ///   - [`contact_arn(Option<String>)`](crate::output::GetContactOutput::contact_arn): <p>The ARN of the contact or escalation plan.</p>
    ///   - [`alias(Option<String>)`](crate::output::GetContactOutput::alias): <p>The alias of the contact or escalation plan. The alias is unique and identifiable.</p>
    ///   - [`display_name(Option<String>)`](crate::output::GetContactOutput::display_name): <p>The full name of the contact or escalation plan.</p>
    ///   - [`r#type(Option<ContactType>)`](crate::output::GetContactOutput::type): <p>The type of contact, either <code>PERSONAL</code> or <code>ESCALATION</code>. </p>
    ///   - [`plan(Option<Plan>)`](crate::output::GetContactOutput::plan): <p>Details about the specific timing or stages and targets of the escalation plan or engagement plan.</p>
    /// - On failure, responds with [`SdkError<GetContactError>`](crate::error::GetContactError)
    pub fn get_contact(&self) -> crate::client::fluent_builders::GetContact {
        crate::client::fluent_builders::GetContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetContactChannel`](crate::client::fluent_builders::GetContactChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_channel_id(impl Into<String>)`](crate::client::fluent_builders::GetContactChannel::contact_channel_id) / [`set_contact_channel_id(Option<String>)`](crate::client::fluent_builders::GetContactChannel::set_contact_channel_id): <p>The Amazon Resource Name (ARN) of the contact channel you want information about.</p>
    /// - On success, responds with [`GetContactChannelOutput`](crate::output::GetContactChannelOutput) with field(s):
    ///   - [`contact_arn(Option<String>)`](crate::output::GetContactChannelOutput::contact_arn): <p>The ARN of the contact that the channel belongs to.</p>
    ///   - [`contact_channel_arn(Option<String>)`](crate::output::GetContactChannelOutput::contact_channel_arn): <p>The ARN of the contact channel.</p>
    ///   - [`name(Option<String>)`](crate::output::GetContactChannelOutput::name): <p>The name of the contact channel</p>
    ///   - [`r#type(Option<ChannelType>)`](crate::output::GetContactChannelOutput::type): <p>The type of contact channel. The type is <code>SMS</code>, <code>VOICE</code>, or <code>EMAIL</code>.</p>
    ///   - [`delivery_address(Option<ContactChannelAddress>)`](crate::output::GetContactChannelOutput::delivery_address): <p>The details that Incident Manager uses when trying to engage the contact channel. </p>
    ///   - [`activation_status(Option<ActivationStatus>)`](crate::output::GetContactChannelOutput::activation_status): <p>A Boolean value indicating if the contact channel has been activated or not.</p>
    /// - On failure, responds with [`SdkError<GetContactChannelError>`](crate::error::GetContactChannelError)
    pub fn get_contact_channel(&self) -> crate::client::fluent_builders::GetContactChannel {
        crate::client::fluent_builders::GetContactChannel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetContactPolicy`](crate::client::fluent_builders::GetContactPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_arn(impl Into<String>)`](crate::client::fluent_builders::GetContactPolicy::contact_arn) / [`set_contact_arn(Option<String>)`](crate::client::fluent_builders::GetContactPolicy::set_contact_arn): <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    /// - On success, responds with [`GetContactPolicyOutput`](crate::output::GetContactPolicyOutput) with field(s):
    ///   - [`contact_arn(Option<String>)`](crate::output::GetContactPolicyOutput::contact_arn): <p>The ARN of the contact or escalation plan.</p>
    ///   - [`policy(Option<String>)`](crate::output::GetContactPolicyOutput::policy): <p>Details about the resource policy attached to the contact or escalation plan.</p>
    /// - On failure, responds with [`SdkError<GetContactPolicyError>`](crate::error::GetContactPolicyError)
    pub fn get_contact_policy(&self) -> crate::client::fluent_builders::GetContactPolicy {
        crate::client::fluent_builders::GetContactPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListContactChannels`](crate::client::fluent_builders::ListContactChannels) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListContactChannels::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::client::fluent_builders::ListContactChannels::contact_id) / [`set_contact_id(Option<String>)`](crate::client::fluent_builders::ListContactChannels::set_contact_id): <p>The Amazon Resource Name (ARN) of the contact. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListContactChannels::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListContactChannels::set_next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListContactChannels::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListContactChannels::set_max_results): <p>The maximum number of contact channels per page.</p>
    /// - On success, responds with [`ListContactChannelsOutput`](crate::output::ListContactChannelsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListContactChannelsOutput::next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`contact_channels(Option<Vec<ContactChannel>>)`](crate::output::ListContactChannelsOutput::contact_channels): <p>A list of contact channels related to the specified contact.</p>
    /// - On failure, responds with [`SdkError<ListContactChannelsError>`](crate::error::ListContactChannelsError)
    pub fn list_contact_channels(&self) -> crate::client::fluent_builders::ListContactChannels {
        crate::client::fluent_builders::ListContactChannels::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListContacts`](crate::client::fluent_builders::ListContacts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListContacts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListContacts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListContacts::set_next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListContacts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListContacts::set_max_results): <p>The maximum number of contacts and escalation plans per page of results.</p>
    ///   - [`alias_prefix(impl Into<String>)`](crate::client::fluent_builders::ListContacts::alias_prefix) / [`set_alias_prefix(Option<String>)`](crate::client::fluent_builders::ListContacts::set_alias_prefix): <p>Used to list only contacts who's aliases start with the specified prefix.</p>
    ///   - [`r#type(ContactType)`](crate::client::fluent_builders::ListContacts::type) / [`set_type(Option<ContactType>)`](crate::client::fluent_builders::ListContacts::set_type): <p>The type of contact. A contact is type <code>PERSONAL</code> and an escalation plan is type <code>ESCALATION</code>.</p>
    /// - On success, responds with [`ListContactsOutput`](crate::output::ListContactsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListContactsOutput::next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`contacts(Option<Vec<Contact>>)`](crate::output::ListContactsOutput::contacts): <p>A list of the contacts and escalation plans in your Incident Manager account.</p>
    /// - On failure, responds with [`SdkError<ListContactsError>`](crate::error::ListContactsError)
    pub fn list_contacts(&self) -> crate::client::fluent_builders::ListContacts {
        crate::client::fluent_builders::ListContacts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEngagements`](crate::client::fluent_builders::ListEngagements) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEngagements::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEngagements::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEngagements::set_next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEngagements::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEngagements::set_max_results): <p>The maximum number of engagements per page of results.</p>
    ///   - [`incident_id(impl Into<String>)`](crate::client::fluent_builders::ListEngagements::incident_id) / [`set_incident_id(Option<String>)`](crate::client::fluent_builders::ListEngagements::set_incident_id): <p>The Amazon Resource Name (ARN) of the incident you're listing engagements for.</p>
    ///   - [`time_range_value(TimeRange)`](crate::client::fluent_builders::ListEngagements::time_range_value) / [`set_time_range_value(Option<TimeRange>)`](crate::client::fluent_builders::ListEngagements::set_time_range_value): <p>The time range to lists engagements for an incident.</p>
    /// - On success, responds with [`ListEngagementsOutput`](crate::output::ListEngagementsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListEngagementsOutput::next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`engagements(Option<Vec<Engagement>>)`](crate::output::ListEngagementsOutput::engagements): <p>A list of each engagement that occurred during the specified time range of an incident.</p>
    /// - On failure, responds with [`SdkError<ListEngagementsError>`](crate::error::ListEngagementsError)
    pub fn list_engagements(&self) -> crate::client::fluent_builders::ListEngagements {
        crate::client::fluent_builders::ListEngagements::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPageReceipts`](crate::client::fluent_builders::ListPageReceipts) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPageReceipts::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`page_id(impl Into<String>)`](crate::client::fluent_builders::ListPageReceipts::page_id) / [`set_page_id(Option<String>)`](crate::client::fluent_builders::ListPageReceipts::set_page_id): <p>The Amazon Resource Name (ARN) of the engagement to a specific contact channel.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPageReceipts::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPageReceipts::set_next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPageReceipts::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPageReceipts::set_max_results): <p>The maximum number of acknowledgements per page of results.</p>
    /// - On success, responds with [`ListPageReceiptsOutput`](crate::output::ListPageReceiptsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListPageReceiptsOutput::next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`receipts(Option<Vec<Receipt>>)`](crate::output::ListPageReceiptsOutput::receipts): <p>A list of each acknowledgement.</p>
    /// - On failure, responds with [`SdkError<ListPageReceiptsError>`](crate::error::ListPageReceiptsError)
    pub fn list_page_receipts(&self) -> crate::client::fluent_builders::ListPageReceipts {
        crate::client::fluent_builders::ListPageReceipts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPagesByContact`](crate::client::fluent_builders::ListPagesByContact) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPagesByContact::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::client::fluent_builders::ListPagesByContact::contact_id) / [`set_contact_id(Option<String>)`](crate::client::fluent_builders::ListPagesByContact::set_contact_id): <p>The Amazon Resource Name (ARN) of the contact you are retrieving engagements for.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPagesByContact::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPagesByContact::set_next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPagesByContact::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPagesByContact::set_max_results): <p>The maximum number of engagements to contact channels to list per page of results. </p>
    /// - On success, responds with [`ListPagesByContactOutput`](crate::output::ListPagesByContactOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListPagesByContactOutput::next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`pages(Option<Vec<Page>>)`](crate::output::ListPagesByContactOutput::pages): <p>The list of engagements to a contact's contact channel.</p>
    /// - On failure, responds with [`SdkError<ListPagesByContactError>`](crate::error::ListPagesByContactError)
    pub fn list_pages_by_contact(&self) -> crate::client::fluent_builders::ListPagesByContact {
        crate::client::fluent_builders::ListPagesByContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPagesByEngagement`](crate::client::fluent_builders::ListPagesByEngagement) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPagesByEngagement::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`engagement_id(impl Into<String>)`](crate::client::fluent_builders::ListPagesByEngagement::engagement_id) / [`set_engagement_id(Option<String>)`](crate::client::fluent_builders::ListPagesByEngagement::set_engagement_id): <p>The Amazon Resource Name (ARN) of the engagement.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPagesByEngagement::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPagesByEngagement::set_next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPagesByEngagement::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPagesByEngagement::set_max_results): <p>The maximum number of engagements to contact channels to list per page of results.</p>
    /// - On success, responds with [`ListPagesByEngagementOutput`](crate::output::ListPagesByEngagementOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListPagesByEngagementOutput::next_token): <p>The pagination token to continue to the next page of results.</p>
    ///   - [`pages(Option<Vec<Page>>)`](crate::output::ListPagesByEngagementOutput::pages): <p>The list of engagements to contact channels.</p>
    /// - On failure, responds with [`SdkError<ListPagesByEngagementError>`](crate::error::ListPagesByEngagementError)
    pub fn list_pages_by_engagement(
        &self,
    ) -> crate::client::fluent_builders::ListPagesByEngagement {
        crate::client::fluent_builders::ListPagesByEngagement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags related to the contact or escalation plan.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutContactPolicy`](crate::client::fluent_builders::PutContactPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_arn(impl Into<String>)`](crate::client::fluent_builders::PutContactPolicy::contact_arn) / [`set_contact_arn(Option<String>)`](crate::client::fluent_builders::PutContactPolicy::set_contact_arn): <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    ///   - [`policy(impl Into<String>)`](crate::client::fluent_builders::PutContactPolicy::policy) / [`set_policy(Option<String>)`](crate::client::fluent_builders::PutContactPolicy::set_policy): <p>Details of the resource policy.</p>
    /// - On success, responds with [`PutContactPolicyOutput`](crate::output::PutContactPolicyOutput)

    /// - On failure, responds with [`SdkError<PutContactPolicyError>`](crate::error::PutContactPolicyError)
    pub fn put_contact_policy(&self) -> crate::client::fluent_builders::PutContactPolicy {
        crate::client::fluent_builders::PutContactPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SendActivationCode`](crate::client::fluent_builders::SendActivationCode) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_channel_id(impl Into<String>)`](crate::client::fluent_builders::SendActivationCode::contact_channel_id) / [`set_contact_channel_id(Option<String>)`](crate::client::fluent_builders::SendActivationCode::set_contact_channel_id): <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    /// - On success, responds with [`SendActivationCodeOutput`](crate::output::SendActivationCodeOutput)

    /// - On failure, responds with [`SdkError<SendActivationCodeError>`](crate::error::SendActivationCodeError)
    pub fn send_activation_code(&self) -> crate::client::fluent_builders::SendActivationCode {
        crate::client::fluent_builders::SendActivationCode::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartEngagement`](crate::client::fluent_builders::StartEngagement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::client::fluent_builders::StartEngagement::contact_id) / [`set_contact_id(Option<String>)`](crate::client::fluent_builders::StartEngagement::set_contact_id): <p>The Amazon Resource Name (ARN) of the contact being engaged.</p>
    ///   - [`sender(impl Into<String>)`](crate::client::fluent_builders::StartEngagement::sender) / [`set_sender(Option<String>)`](crate::client::fluent_builders::StartEngagement::set_sender): <p>The user that started the engagement.</p>
    ///   - [`subject(impl Into<String>)`](crate::client::fluent_builders::StartEngagement::subject) / [`set_subject(Option<String>)`](crate::client::fluent_builders::StartEngagement::set_subject): <p>The secure subject of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> or <code>EMAIL</code>.</p>
    ///   - [`content(impl Into<String>)`](crate::client::fluent_builders::StartEngagement::content) / [`set_content(Option<String>)`](crate::client::fluent_builders::StartEngagement::set_content): <p>The secure content of the message that was sent to the contact. Use this field for engagements to <code>VOICE</code> or <code>EMAIL</code>.</p>
    ///   - [`public_subject(impl Into<String>)`](crate::client::fluent_builders::StartEngagement::public_subject) / [`set_public_subject(Option<String>)`](crate::client::fluent_builders::StartEngagement::set_public_subject): <p>The insecure subject of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    ///   - [`public_content(impl Into<String>)`](crate::client::fluent_builders::StartEngagement::public_content) / [`set_public_content(Option<String>)`](crate::client::fluent_builders::StartEngagement::set_public_content): <p>The insecure content of the message that was sent to the contact. Use this field for engagements to <code>SMS</code>.</p>
    ///   - [`incident_id(impl Into<String>)`](crate::client::fluent_builders::StartEngagement::incident_id) / [`set_incident_id(Option<String>)`](crate::client::fluent_builders::StartEngagement::set_incident_id): <p>The ARN of the incident that the engagement is part of.</p>
    ///   - [`idempotency_token(impl Into<String>)`](crate::client::fluent_builders::StartEngagement::idempotency_token) / [`set_idempotency_token(Option<String>)`](crate::client::fluent_builders::StartEngagement::set_idempotency_token): <p>A token ensuring that the operation is called only once with the specified details.</p>
    /// - On success, responds with [`StartEngagementOutput`](crate::output::StartEngagementOutput) with field(s):
    ///   - [`engagement_arn(Option<String>)`](crate::output::StartEngagementOutput::engagement_arn): <p>The ARN of the engagement.</p>
    /// - On failure, responds with [`SdkError<StartEngagementError>`](crate::error::StartEngagementError)
    pub fn start_engagement(&self) -> crate::client::fluent_builders::StartEngagement {
        crate::client::fluent_builders::StartEngagement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopEngagement`](crate::client::fluent_builders::StopEngagement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`engagement_id(impl Into<String>)`](crate::client::fluent_builders::StopEngagement::engagement_id) / [`set_engagement_id(Option<String>)`](crate::client::fluent_builders::StopEngagement::set_engagement_id): <p>The Amazon Resource Name (ARN) of the engagement.</p>
    ///   - [`reason(impl Into<String>)`](crate::client::fluent_builders::StopEngagement::reason) / [`set_reason(Option<String>)`](crate::client::fluent_builders::StopEngagement::set_reason): <p>The reason that you're stopping the engagement. </p>
    /// - On success, responds with [`StopEngagementOutput`](crate::output::StopEngagementOutput)

    /// - On failure, responds with [`SdkError<StopEngagementError>`](crate::error::StopEngagementError)
    pub fn stop_engagement(&self) -> crate::client::fluent_builders::StopEngagement {
        crate::client::fluent_builders::StopEngagement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>A list of tags that you are adding to the contact or escalation plan.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the contact or escalation plan.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The key of the tag that you want to remove.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateContact`](crate::client::fluent_builders::UpdateContact) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_id(impl Into<String>)`](crate::client::fluent_builders::UpdateContact::contact_id) / [`set_contact_id(Option<String>)`](crate::client::fluent_builders::UpdateContact::set_contact_id): <p>The Amazon Resource Name (ARN) of the contact or escalation plan you're updating.</p>
    ///   - [`display_name(impl Into<String>)`](crate::client::fluent_builders::UpdateContact::display_name) / [`set_display_name(Option<String>)`](crate::client::fluent_builders::UpdateContact::set_display_name): <p>The full name of the contact or escalation plan.</p>
    ///   - [`plan(Plan)`](crate::client::fluent_builders::UpdateContact::plan) / [`set_plan(Option<Plan>)`](crate::client::fluent_builders::UpdateContact::set_plan): <p>A list of stages. A contact has an engagement plan with stages for specified contact channels. An escalation plan uses these stages to contact specified contacts. </p>
    /// - On success, responds with [`UpdateContactOutput`](crate::output::UpdateContactOutput)

    /// - On failure, responds with [`SdkError<UpdateContactError>`](crate::error::UpdateContactError)
    pub fn update_contact(&self) -> crate::client::fluent_builders::UpdateContact {
        crate::client::fluent_builders::UpdateContact::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateContactChannel`](crate::client::fluent_builders::UpdateContactChannel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`contact_channel_id(impl Into<String>)`](crate::client::fluent_builders::UpdateContactChannel::contact_channel_id) / [`set_contact_channel_id(Option<String>)`](crate::client::fluent_builders::UpdateContactChannel::set_contact_channel_id): <p>The Amazon Resource Name (ARN) of the contact channel you want to update.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateContactChannel::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateContactChannel::set_name): <p>The name of the contact channel.</p>
    ///   - [`delivery_address(ContactChannelAddress)`](crate::client::fluent_builders::UpdateContactChannel::delivery_address) / [`set_delivery_address(Option<ContactChannelAddress>)`](crate::client::fluent_builders::UpdateContactChannel::set_delivery_address): <p>The details that Incident Manager uses when trying to engage the contact channel. </p>
    /// - On success, responds with [`UpdateContactChannelOutput`](crate::output::UpdateContactChannelOutput)

    /// - On failure, responds with [`SdkError<UpdateContactChannelError>`](crate::error::UpdateContactChannelError)
    pub fn update_contact_channel(&self) -> crate::client::fluent_builders::UpdateContactChannel {
        crate::client::fluent_builders::UpdateContactChannel::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
