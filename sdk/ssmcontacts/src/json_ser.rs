// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_accept_page_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptPageInput,
) {
    if let Some(var_1) = &input.page_id {
        object.key("PageId").string(var_1);
    }
    if let Some(var_2) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_2);
    }
    if let Some(var_3) = &input.accept_type {
        object.key("AcceptType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.note {
        object.key("Note").string(var_4);
    }
    if let Some(var_5) = &input.accept_code {
        object.key("AcceptCode").string(var_5);
    }
}

pub fn serialize_structure_activate_contact_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ActivateContactChannelInput,
) {
    if let Some(var_6) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_6);
    }
    if let Some(var_7) = &input.activation_code {
        object.key("ActivationCode").string(var_7);
    }
}

pub fn serialize_structure_create_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactInput,
) {
    if let Some(var_8) = &input.alias {
        object.key("Alias").string(var_8);
    }
    if let Some(var_9) = &input.display_name {
        object.key("DisplayName").string(var_9);
    }
    if let Some(var_10) = &input.r#type {
        object.key("Type").string(var_10.as_str());
    }
    if let Some(var_11) = &input.plan {
        let mut object_12 = object.key("Plan").start_object();
        crate::json_ser::serialize_structure_plan(&mut object_12, var_11);
        object_12.finish();
    }
    if let Some(var_13) = &input.tags {
        let mut array_14 = object.key("Tags").start_array();
        for item_15 in var_13 {
            {
                let mut object_16 = array_14.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_16, item_15);
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_17);
    }
}

pub fn serialize_structure_create_contact_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactChannelInput,
) {
    if let Some(var_18) = &input.contact_id {
        object.key("ContactId").string(var_18);
    }
    if let Some(var_19) = &input.name {
        object.key("Name").string(var_19);
    }
    if let Some(var_20) = &input.r#type {
        object.key("Type").string(var_20.as_str());
    }
    if let Some(var_21) = &input.delivery_address {
        let mut object_22 = object.key("DeliveryAddress").start_object();
        crate::json_ser::serialize_structure_contact_channel_address(&mut object_22, var_21);
        object_22.finish();
    }
    if let Some(var_23) = &input.defer_activation {
        object.key("DeferActivation").boolean(*var_23);
    }
    if let Some(var_24) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_24);
    }
}

pub fn serialize_structure_deactivate_contact_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeactivateContactChannelInput,
) {
    if let Some(var_25) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_25);
    }
}

pub fn serialize_structure_delete_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContactInput,
) {
    if let Some(var_26) = &input.contact_id {
        object.key("ContactId").string(var_26);
    }
}

pub fn serialize_structure_delete_contact_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContactChannelInput,
) {
    if let Some(var_27) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_27);
    }
}

pub fn serialize_structure_describe_engagement_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEngagementInput,
) {
    if let Some(var_28) = &input.engagement_id {
        object.key("EngagementId").string(var_28);
    }
}

pub fn serialize_structure_describe_page_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePageInput,
) {
    if let Some(var_29) = &input.page_id {
        object.key("PageId").string(var_29);
    }
}

pub fn serialize_structure_get_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContactInput,
) {
    if let Some(var_30) = &input.contact_id {
        object.key("ContactId").string(var_30);
    }
}

pub fn serialize_structure_get_contact_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContactChannelInput,
) {
    if let Some(var_31) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_31);
    }
}

pub fn serialize_structure_get_contact_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContactPolicyInput,
) {
    if let Some(var_32) = &input.contact_arn {
        object.key("ContactArn").string(var_32);
    }
}

pub fn serialize_structure_list_contact_channels_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContactChannelsInput,
) {
    if let Some(var_33) = &input.contact_id {
        object.key("ContactId").string(var_33);
    }
    if let Some(var_34) = &input.next_token {
        object.key("NextToken").string(var_34);
    }
    if let Some(var_35) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_35).into()),
        );
    }
}

pub fn serialize_structure_list_contacts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContactsInput,
) {
    if let Some(var_36) = &input.next_token {
        object.key("NextToken").string(var_36);
    }
    if let Some(var_37) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    if let Some(var_38) = &input.alias_prefix {
        object.key("AliasPrefix").string(var_38);
    }
    if let Some(var_39) = &input.r#type {
        object.key("Type").string(var_39.as_str());
    }
}

pub fn serialize_structure_list_engagements_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEngagementsInput,
) {
    if let Some(var_40) = &input.next_token {
        object.key("NextToken").string(var_40);
    }
    if let Some(var_41) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_41).into()),
        );
    }
    if let Some(var_42) = &input.incident_id {
        object.key("IncidentId").string(var_42);
    }
    if let Some(var_43) = &input.time_range_value {
        let mut object_44 = object.key("TimeRangeValue").start_object();
        crate::json_ser::serialize_structure_time_range(&mut object_44, var_43);
        object_44.finish();
    }
}

pub fn serialize_structure_list_page_receipts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPageReceiptsInput,
) {
    if let Some(var_45) = &input.page_id {
        object.key("PageId").string(var_45);
    }
    if let Some(var_46) = &input.next_token {
        object.key("NextToken").string(var_46);
    }
    if let Some(var_47) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_47).into()),
        );
    }
}

pub fn serialize_structure_list_pages_by_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPagesByContactInput,
) {
    if let Some(var_48) = &input.contact_id {
        object.key("ContactId").string(var_48);
    }
    if let Some(var_49) = &input.next_token {
        object.key("NextToken").string(var_49);
    }
    if let Some(var_50) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_50).into()),
        );
    }
}

pub fn serialize_structure_list_pages_by_engagement_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPagesByEngagementInput,
) {
    if let Some(var_51) = &input.engagement_id {
        object.key("EngagementId").string(var_51);
    }
    if let Some(var_52) = &input.next_token {
        object.key("NextToken").string(var_52);
    }
    if let Some(var_53) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_53).into()),
        );
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_54) = &input.resource_arn {
        object.key("ResourceARN").string(var_54);
    }
}

pub fn serialize_structure_put_contact_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutContactPolicyInput,
) {
    if let Some(var_55) = &input.contact_arn {
        object.key("ContactArn").string(var_55);
    }
    if let Some(var_56) = &input.policy {
        object.key("Policy").string(var_56);
    }
}

pub fn serialize_structure_send_activation_code_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendActivationCodeInput,
) {
    if let Some(var_57) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_57);
    }
}

pub fn serialize_structure_start_engagement_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartEngagementInput,
) {
    if let Some(var_58) = &input.contact_id {
        object.key("ContactId").string(var_58);
    }
    if let Some(var_59) = &input.sender {
        object.key("Sender").string(var_59);
    }
    if let Some(var_60) = &input.subject {
        object.key("Subject").string(var_60);
    }
    if let Some(var_61) = &input.content {
        object.key("Content").string(var_61);
    }
    if let Some(var_62) = &input.public_subject {
        object.key("PublicSubject").string(var_62);
    }
    if let Some(var_63) = &input.public_content {
        object.key("PublicContent").string(var_63);
    }
    if let Some(var_64) = &input.incident_id {
        object.key("IncidentId").string(var_64);
    }
    if let Some(var_65) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_65);
    }
}

pub fn serialize_structure_stop_engagement_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEngagementInput,
) {
    if let Some(var_66) = &input.engagement_id {
        object.key("EngagementId").string(var_66);
    }
    if let Some(var_67) = &input.reason {
        object.key("Reason").string(var_67);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_68) = &input.resource_arn {
        object.key("ResourceARN").string(var_68);
    }
    if let Some(var_69) = &input.tags {
        let mut array_70 = object.key("Tags").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_72, item_71);
                object_72.finish();
            }
        }
        array_70.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_73) = &input.resource_arn {
        object.key("ResourceARN").string(var_73);
    }
    if let Some(var_74) = &input.tag_keys {
        let mut array_75 = object.key("TagKeys").start_array();
        for item_76 in var_74 {
            {
                array_75.value().string(item_76);
            }
        }
        array_75.finish();
    }
}

pub fn serialize_structure_update_contact_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactInput,
) {
    if let Some(var_77) = &input.contact_id {
        object.key("ContactId").string(var_77);
    }
    if let Some(var_78) = &input.display_name {
        object.key("DisplayName").string(var_78);
    }
    if let Some(var_79) = &input.plan {
        let mut object_80 = object.key("Plan").start_object();
        crate::json_ser::serialize_structure_plan(&mut object_80, var_79);
        object_80.finish();
    }
}

pub fn serialize_structure_update_contact_channel_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactChannelInput,
) {
    if let Some(var_81) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_81);
    }
    if let Some(var_82) = &input.name {
        object.key("Name").string(var_82);
    }
    if let Some(var_83) = &input.delivery_address {
        let mut object_84 = object.key("DeliveryAddress").start_object();
        crate::json_ser::serialize_structure_contact_channel_address(&mut object_84, var_83);
        object_84.finish();
    }
}

pub fn serialize_structure_plan(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Plan,
) {
    if let Some(var_85) = &input.stages {
        let mut array_86 = object.key("Stages").start_array();
        for item_87 in var_85 {
            {
                let mut object_88 = array_86.value().start_object();
                crate::json_ser::serialize_structure_stage(&mut object_88, item_87);
                object_88.finish();
            }
        }
        array_86.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_89) = &input.key {
        object.key("Key").string(var_89);
    }
    if let Some(var_90) = &input.value {
        object.key("Value").string(var_90);
    }
}

pub fn serialize_structure_contact_channel_address(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContactChannelAddress,
) {
    if let Some(var_91) = &input.simple_address {
        object.key("SimpleAddress").string(var_91);
    }
}

pub fn serialize_structure_time_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) {
    if let Some(var_92) = &input.start_time {
        object
            .key("StartTime")
            .instant(var_92, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_93) = &input.end_time {
        object
            .key("EndTime")
            .instant(var_93, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_stage(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Stage,
) {
    if let Some(var_94) = &input.duration_in_minutes {
        object.key("DurationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    if let Some(var_95) = &input.targets {
        let mut array_96 = object.key("Targets").start_array();
        for item_97 in var_95 {
            {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_98, item_97);
                object_98.finish();
            }
        }
        array_96.finish();
    }
}

pub fn serialize_structure_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Target,
) {
    if let Some(var_99) = &input.channel_target_info {
        let mut object_100 = object.key("ChannelTargetInfo").start_object();
        crate::json_ser::serialize_structure_channel_target_info(&mut object_100, var_99);
        object_100.finish();
    }
    if let Some(var_101) = &input.contact_target_info {
        let mut object_102 = object.key("ContactTargetInfo").start_object();
        crate::json_ser::serialize_structure_contact_target_info(&mut object_102, var_101);
        object_102.finish();
    }
}

pub fn serialize_structure_channel_target_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelTargetInfo,
) {
    if let Some(var_103) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_103);
    }
    if let Some(var_104) = &input.retry_interval_in_minutes {
        object.key("RetryIntervalInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_104).into()),
        );
    }
}

pub fn serialize_structure_contact_target_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContactTargetInfo,
) {
    if let Some(var_105) = &input.contact_id {
        object.key("ContactId").string(var_105);
    }
    if let Some(var_106) = &input.is_essential {
        object.key("IsEssential").boolean(*var_106);
    }
}
