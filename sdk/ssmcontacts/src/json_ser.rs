// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_page_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptPageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.page_id {
        object.key("PageId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.accept_type {
        object.key("AcceptType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.note {
        object.key("Note").string(var_4.as_str());
    }
    if let Some(var_5) = &input.accept_code {
        object.key("AcceptCode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.accept_code_validation {
        object.key("AcceptCodeValidation").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_activate_contact_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ActivateContactChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.activation_code {
        object.key("ActivationCode").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.alias {
        object.key("Alias").string(var_9.as_str());
    }
    if let Some(var_10) = &input.display_name {
        object.key("DisplayName").string(var_10.as_str());
    }
    if let Some(var_11) = &input.r#type {
        object.key("Type").string(var_11.as_str());
    }
    if let Some(var_12) = &input.plan {
        let mut object_13 = object.key("Plan").start_object();
        crate::json_ser::serialize_structure_crate_model_plan(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("Tags").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_contact_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContactChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.contact_id {
        object.key("ContactId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.name {
        object.key("Name").string(var_20.as_str());
    }
    if let Some(var_21) = &input.r#type {
        object.key("Type").string(var_21.as_str());
    }
    if let Some(var_22) = &input.delivery_address {
        let mut object_23 = object.key("DeliveryAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_channel_address(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.defer_activation {
        object.key("DeferActivation").boolean(*var_24);
    }
    if let Some(var_25) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_25.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deactivate_contact_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeactivateContactChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.contact_id {
        object.key("ContactId").string(var_27.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_contact_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteContactChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_28.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_engagement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEngagementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.engagement_id {
        object.key("EngagementId").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_page_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.page_id {
        object.key("PageId").string(var_30.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.contact_id {
        object.key("ContactId").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_contact_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContactChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_contact_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetContactPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.contact_arn {
        object.key("ContactArn").string(var_33.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_contact_channels_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContactChannelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.contact_id {
        object.key("ContactId").string(var_34.as_str());
    }
    if let Some(var_35) = &input.next_token {
        object.key("NextToken").string(var_35.as_str());
    }
    if let Some(var_36) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_36).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_contacts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContactsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_37) = &input.next_token {
        object.key("NextToken").string(var_37.as_str());
    }
    if let Some(var_38) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_38).into()),
        );
    }
    if let Some(var_39) = &input.alias_prefix {
        object.key("AliasPrefix").string(var_39.as_str());
    }
    if let Some(var_40) = &input.r#type {
        object.key("Type").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_engagements_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEngagementsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.next_token {
        object.key("NextToken").string(var_41.as_str());
    }
    if let Some(var_42) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_42).into()),
        );
    }
    if let Some(var_43) = &input.incident_id {
        object.key("IncidentId").string(var_43.as_str());
    }
    if let Some(var_44) = &input.time_range_value {
        let mut object_45 = object.key("TimeRangeValue").start_object();
        crate::json_ser::serialize_structure_crate_model_time_range(&mut object_45, var_44)?;
        object_45.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_page_receipts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPageReceiptsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.page_id {
        object.key("PageId").string(var_46.as_str());
    }
    if let Some(var_47) = &input.next_token {
        object.key("NextToken").string(var_47.as_str());
    }
    if let Some(var_48) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_48).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pages_by_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPagesByContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.contact_id {
        object.key("ContactId").string(var_49.as_str());
    }
    if let Some(var_50) = &input.next_token {
        object.key("NextToken").string(var_50.as_str());
    }
    if let Some(var_51) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pages_by_engagement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPagesByEngagementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.engagement_id {
        object.key("EngagementId").string(var_52.as_str());
    }
    if let Some(var_53) = &input.next_token {
        object.key("NextToken").string(var_53.as_str());
    }
    if let Some(var_54) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_54).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.resource_arn {
        object.key("ResourceARN").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_contact_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutContactPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.contact_arn {
        object.key("ContactArn").string(var_56.as_str());
    }
    if let Some(var_57) = &input.policy {
        object.key("Policy").string(var_57.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_activation_code_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendActivationCodeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_58.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_engagement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartEngagementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.contact_id {
        object.key("ContactId").string(var_59.as_str());
    }
    if let Some(var_60) = &input.sender {
        object.key("Sender").string(var_60.as_str());
    }
    if let Some(var_61) = &input.subject {
        object.key("Subject").string(var_61.as_str());
    }
    if let Some(var_62) = &input.content {
        object.key("Content").string(var_62.as_str());
    }
    if let Some(var_63) = &input.public_subject {
        object.key("PublicSubject").string(var_63.as_str());
    }
    if let Some(var_64) = &input.public_content {
        object.key("PublicContent").string(var_64.as_str());
    }
    if let Some(var_65) = &input.incident_id {
        object.key("IncidentId").string(var_65.as_str());
    }
    if let Some(var_66) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_66.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_engagement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopEngagementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.engagement_id {
        object.key("EngagementId").string(var_67.as_str());
    }
    if let Some(var_68) = &input.reason {
        object.key("Reason").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.resource_arn {
        object.key("ResourceARN").string(var_69.as_str());
    }
    if let Some(var_70) = &input.tags {
        let mut array_71 = object.key("Tags").start_array();
        for item_72 in var_70 {
            {
                let mut object_73 = array_71.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_73, item_72)?;
                object_73.finish();
            }
        }
        array_71.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.resource_arn {
        object.key("ResourceARN").string(var_74.as_str());
    }
    if let Some(var_75) = &input.tag_keys {
        let mut array_76 = object.key("TagKeys").start_array();
        for item_77 in var_75 {
            {
                array_76.value().string(item_77.as_str());
            }
        }
        array_76.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.contact_id {
        object.key("ContactId").string(var_78.as_str());
    }
    if let Some(var_79) = &input.display_name {
        object.key("DisplayName").string(var_79.as_str());
    }
    if let Some(var_80) = &input.plan {
        let mut object_81 = object.key("Plan").start_object();
        crate::json_ser::serialize_structure_crate_model_plan(&mut object_81, var_80)?;
        object_81.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contact_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContactChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_82.as_str());
    }
    if let Some(var_83) = &input.name {
        object.key("Name").string(var_83.as_str());
    }
    if let Some(var_84) = &input.delivery_address {
        let mut object_85 = object.key("DeliveryAddress").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_channel_address(
            &mut object_85,
            var_84,
        )?;
        object_85.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_plan(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Plan,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.stages {
        let mut array_87 = object.key("Stages").start_array();
        for item_88 in var_86 {
            {
                let mut object_89 = array_87.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stage(&mut object_89, item_88)?;
                object_89.finish();
            }
        }
        array_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.key {
        object.key("Key").string(var_90.as_str());
    }
    if let Some(var_91) = &input.value {
        object.key("Value").string(var_91.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_contact_channel_address(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContactChannelAddress,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.simple_address {
        object.key("SimpleAddress").string(var_92.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_93, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_94) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_94, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stage(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Stage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.duration_in_minutes {
        object.key("DurationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_95).into()),
        );
    }
    if let Some(var_96) = &input.targets {
        let mut array_97 = object.key("Targets").start_array();
        for item_98 in var_96 {
            {
                let mut object_99 = array_97.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_99, item_98)?;
                object_99.finish();
            }
        }
        array_97.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.channel_target_info {
        let mut object_101 = object.key("ChannelTargetInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_channel_target_info(
            &mut object_101,
            var_100,
        )?;
        object_101.finish();
    }
    if let Some(var_102) = &input.contact_target_info {
        let mut object_103 = object.key("ContactTargetInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_contact_target_info(
            &mut object_103,
            var_102,
        )?;
        object_103.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel_target_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelTargetInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.contact_channel_id {
        object.key("ContactChannelId").string(var_104.as_str());
    }
    if let Some(var_105) = &input.retry_interval_in_minutes {
        object.key("RetryIntervalInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_105).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_contact_target_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContactTargetInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.contact_id {
        object.key("ContactId").string(var_106.as_str());
    }
    if let Some(var_107) = &input.is_essential {
        object.key("IsEssential").boolean(*var_107);
    }
    Ok(())
}
