// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Incident Manager reaching out to a contact or escalation plan to engage contact during an incident.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Engagement {
    /// <p>The Amazon Resource Name (ARN) of the engagement.</p>
    #[doc(hidden)]
    pub engagement_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the escalation plan or contact that Incident Manager is engaging.</p>
    #[doc(hidden)]
    pub contact_arn: std::option::Option<std::string::String>,
    /// <p>The user that started the engagement.</p>
    #[doc(hidden)]
    pub sender: std::option::Option<std::string::String>,
    /// <p>The ARN of the incident that's engaging the contact.</p>
    #[doc(hidden)]
    pub incident_id: std::option::Option<std::string::String>,
    /// <p>The time that the engagement began.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time that the engagement ended.</p>
    #[doc(hidden)]
    pub stop_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl Engagement {
    /// <p>The Amazon Resource Name (ARN) of the engagement.</p>
    pub fn engagement_arn(&self) -> std::option::Option<&str> {
        self.engagement_arn.as_deref()
    }
    /// <p>The ARN of the escalation plan or contact that Incident Manager is engaging.</p>
    pub fn contact_arn(&self) -> std::option::Option<&str> {
        self.contact_arn.as_deref()
    }
    /// <p>The user that started the engagement.</p>
    pub fn sender(&self) -> std::option::Option<&str> {
        self.sender.as_deref()
    }
    /// <p>The ARN of the incident that's engaging the contact.</p>
    pub fn incident_id(&self) -> std::option::Option<&str> {
        self.incident_id.as_deref()
    }
    /// <p>The time that the engagement began.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time that the engagement ended.</p>
    pub fn stop_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.stop_time.as_ref()
    }
}
impl Engagement {
    /// Creates a new builder-style object to manufacture [`Engagement`](crate::types::Engagement).
    pub fn builder() -> crate::types::builders::EngagementBuilder {
        crate::types::builders::EngagementBuilder::default()
    }
}

/// A builder for [`Engagement`](crate::types::Engagement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EngagementBuilder {
    pub(crate) engagement_arn: std::option::Option<std::string::String>,
    pub(crate) contact_arn: std::option::Option<std::string::String>,
    pub(crate) sender: std::option::Option<std::string::String>,
    pub(crate) incident_id: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) stop_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl EngagementBuilder {
    /// <p>The Amazon Resource Name (ARN) of the engagement.</p>
    pub fn engagement_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.engagement_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the engagement.</p>
    pub fn set_engagement_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engagement_arn = input;
        self
    }
    /// <p>The ARN of the escalation plan or contact that Incident Manager is engaging.</p>
    pub fn contact_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the escalation plan or contact that Incident Manager is engaging.</p>
    pub fn set_contact_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.contact_arn = input;
        self
    }
    /// <p>The user that started the engagement.</p>
    pub fn sender(mut self, input: impl Into<std::string::String>) -> Self {
        self.sender = Some(input.into());
        self
    }
    /// <p>The user that started the engagement.</p>
    pub fn set_sender(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sender = input;
        self
    }
    /// <p>The ARN of the incident that's engaging the contact.</p>
    pub fn incident_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.incident_id = Some(input.into());
        self
    }
    /// <p>The ARN of the incident that's engaging the contact.</p>
    pub fn set_incident_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.incident_id = input;
        self
    }
    /// <p>The time that the engagement began.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time that the engagement began.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time that the engagement ended.</p>
    pub fn stop_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.stop_time = Some(input);
        self
    }
    /// <p>The time that the engagement ended.</p>
    pub fn set_stop_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.stop_time = input;
        self
    }
    /// Consumes the builder and constructs a [`Engagement`](crate::types::Engagement).
    pub fn build(self) -> crate::types::Engagement {
        crate::types::Engagement {
            engagement_arn: self.engagement_arn,
            contact_arn: self.contact_arn,
            sender: self.sender,
            incident_id: self.incident_id,
            start_time: self.start_time,
            stop_time: self.stop_time,
        }
    }
}
