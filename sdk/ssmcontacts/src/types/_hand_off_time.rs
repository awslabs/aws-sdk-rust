// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about when an on-call rotation shift begins or ends.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HandOffTime {
    /// <p>The hour when an on-call rotation shift begins or ends.</p>
    pub hour_of_day: i32,
    /// <p>The minute when an on-call rotation shift begins or ends.</p>
    pub minute_of_hour: i32,
}
impl HandOffTime {
    /// <p>The hour when an on-call rotation shift begins or ends.</p>
    pub fn hour_of_day(&self) -> i32 {
        self.hour_of_day
    }
    /// <p>The minute when an on-call rotation shift begins or ends.</p>
    pub fn minute_of_hour(&self) -> i32 {
        self.minute_of_hour
    }
}
impl HandOffTime {
    /// Creates a new builder-style object to manufacture [`HandOffTime`](crate::types::HandOffTime).
    pub fn builder() -> crate::types::builders::HandOffTimeBuilder {
        crate::types::builders::HandOffTimeBuilder::default()
    }
}

/// A builder for [`HandOffTime`](crate::types::HandOffTime).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HandOffTimeBuilder {
    pub(crate) hour_of_day: ::std::option::Option<i32>,
    pub(crate) minute_of_hour: ::std::option::Option<i32>,
}
impl HandOffTimeBuilder {
    /// <p>The hour when an on-call rotation shift begins or ends.</p>
    /// This field is required.
    pub fn hour_of_day(mut self, input: i32) -> Self {
        self.hour_of_day = ::std::option::Option::Some(input);
        self
    }
    /// <p>The hour when an on-call rotation shift begins or ends.</p>
    pub fn set_hour_of_day(mut self, input: ::std::option::Option<i32>) -> Self {
        self.hour_of_day = input;
        self
    }
    /// <p>The hour when an on-call rotation shift begins or ends.</p>
    pub fn get_hour_of_day(&self) -> &::std::option::Option<i32> {
        &self.hour_of_day
    }
    /// <p>The minute when an on-call rotation shift begins or ends.</p>
    /// This field is required.
    pub fn minute_of_hour(mut self, input: i32) -> Self {
        self.minute_of_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minute when an on-call rotation shift begins or ends.</p>
    pub fn set_minute_of_hour(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minute_of_hour = input;
        self
    }
    /// <p>The minute when an on-call rotation shift begins or ends.</p>
    pub fn get_minute_of_hour(&self) -> &::std::option::Option<i32> {
        &self.minute_of_hour
    }
    /// Consumes the builder and constructs a [`HandOffTime`](crate::types::HandOffTime).
    pub fn build(self) -> crate::types::HandOffTime {
        crate::types::HandOffTime {
            hour_of_day: self.hour_of_day.unwrap_or_default(),
            minute_of_hour: self.minute_of_hour.unwrap_or_default(),
        }
    }
}
