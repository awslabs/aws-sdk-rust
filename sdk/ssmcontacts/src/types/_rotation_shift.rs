// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a shift that belongs to an on-call rotation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RotationShift {
    /// <p>The Amazon Resource Names (ARNs) of the contacts who are part of the shift rotation. </p>
    pub contact_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The time a shift rotation begins.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>The time a shift rotation ends.</p>
    pub end_time: ::aws_smithy_types::DateTime,
    /// <p>The type of shift rotation.</p>
    pub r#type: ::std::option::Option<crate::types::ShiftType>,
    /// <p>Additional information about an on-call rotation shift.</p>
    pub shift_details: ::std::option::Option<crate::types::ShiftDetails>,
}
impl RotationShift {
    /// <p>The Amazon Resource Names (ARNs) of the contacts who are part of the shift rotation. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contact_ids.is_none()`.
    pub fn contact_ids(&self) -> &[::std::string::String] {
        self.contact_ids.as_deref().unwrap_or_default()
    }
    /// <p>The time a shift rotation begins.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>The time a shift rotation ends.</p>
    pub fn end_time(&self) -> &::aws_smithy_types::DateTime {
        &self.end_time
    }
    /// <p>The type of shift rotation.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ShiftType> {
        self.r#type.as_ref()
    }
    /// <p>Additional information about an on-call rotation shift.</p>
    pub fn shift_details(&self) -> ::std::option::Option<&crate::types::ShiftDetails> {
        self.shift_details.as_ref()
    }
}
impl RotationShift {
    /// Creates a new builder-style object to manufacture [`RotationShift`](crate::types::RotationShift).
    pub fn builder() -> crate::types::builders::RotationShiftBuilder {
        crate::types::builders::RotationShiftBuilder::default()
    }
}

/// A builder for [`RotationShift`](crate::types::RotationShift).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RotationShiftBuilder {
    pub(crate) contact_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) r#type: ::std::option::Option<crate::types::ShiftType>,
    pub(crate) shift_details: ::std::option::Option<crate::types::ShiftDetails>,
}
impl RotationShiftBuilder {
    /// Appends an item to `contact_ids`.
    ///
    /// To override the contents of this collection use [`set_contact_ids`](Self::set_contact_ids).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the contacts who are part of the shift rotation. </p>
    pub fn contact_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.contact_ids.unwrap_or_default();
        v.push(input.into());
        self.contact_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the contacts who are part of the shift rotation. </p>
    pub fn set_contact_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.contact_ids = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the contacts who are part of the shift rotation. </p>
    pub fn get_contact_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.contact_ids
    }
    /// <p>The time a shift rotation begins.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time a shift rotation begins.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time a shift rotation begins.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time a shift rotation ends.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time a shift rotation ends.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time a shift rotation ends.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The type of shift rotation.</p>
    pub fn r#type(mut self, input: crate::types::ShiftType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of shift rotation.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ShiftType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of shift rotation.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ShiftType> {
        &self.r#type
    }
    /// <p>Additional information about an on-call rotation shift.</p>
    pub fn shift_details(mut self, input: crate::types::ShiftDetails) -> Self {
        self.shift_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional information about an on-call rotation shift.</p>
    pub fn set_shift_details(mut self, input: ::std::option::Option<crate::types::ShiftDetails>) -> Self {
        self.shift_details = input;
        self
    }
    /// <p>Additional information about an on-call rotation shift.</p>
    pub fn get_shift_details(&self) -> &::std::option::Option<crate::types::ShiftDetails> {
        &self.shift_details
    }
    /// Consumes the builder and constructs a [`RotationShift`](crate::types::RotationShift).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_time`](crate::types::builders::RotationShiftBuilder::start_time)
    /// - [`end_time`](crate::types::builders::RotationShiftBuilder::end_time)
    pub fn build(self) -> ::std::result::Result<crate::types::RotationShift, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RotationShift {
            contact_ids: self.contact_ids,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building RotationShift",
                )
            })?,
            end_time: self.end_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_time",
                    "end_time was not specified but it is required when building RotationShift",
                )
            })?,
            r#type: self.r#type,
            shift_details: self.shift_details,
        })
    }
}
