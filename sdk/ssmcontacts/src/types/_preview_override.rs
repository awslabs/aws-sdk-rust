// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about contacts and times that an on-call override replaces.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PreviewOverride {
    /// <p>Information about contacts to add to an on-call rotation override.</p>
    pub new_members: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Information about the time a rotation override would begin.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the time a rotation override would end.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PreviewOverride {
    /// <p>Information about contacts to add to an on-call rotation override.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.new_members.is_none()`.
    pub fn new_members(&self) -> &[::std::string::String] {
        self.new_members.as_deref().unwrap_or_default()
    }
    /// <p>Information about the time a rotation override would begin.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>Information about the time a rotation override would end.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl PreviewOverride {
    /// Creates a new builder-style object to manufacture [`PreviewOverride`](crate::types::PreviewOverride).
    pub fn builder() -> crate::types::builders::PreviewOverrideBuilder {
        crate::types::builders::PreviewOverrideBuilder::default()
    }
}

/// A builder for [`PreviewOverride`](crate::types::PreviewOverride).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PreviewOverrideBuilder {
    pub(crate) new_members: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PreviewOverrideBuilder {
    /// Appends an item to `new_members`.
    ///
    /// To override the contents of this collection use [`set_new_members`](Self::set_new_members).
    ///
    /// <p>Information about contacts to add to an on-call rotation override.</p>
    pub fn new_members(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.new_members.unwrap_or_default();
        v.push(input.into());
        self.new_members = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about contacts to add to an on-call rotation override.</p>
    pub fn set_new_members(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.new_members = input;
        self
    }
    /// <p>Information about contacts to add to an on-call rotation override.</p>
    pub fn get_new_members(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.new_members
    }
    /// <p>Information about the time a rotation override would begin.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the time a rotation override would begin.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>Information about the time a rotation override would begin.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>Information about the time a rotation override would end.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the time a rotation override would end.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>Information about the time a rotation override would end.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`PreviewOverride`](crate::types::PreviewOverride).
    pub fn build(self) -> crate::types::PreviewOverride {
        crate::types::PreviewOverride {
            new_members: self.new_members,
            start_time: self.start_time,
            end_time: self.end_time,
        }
    }
}
