// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an override specified for an on-call rotation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RotationOverride {
    /// <p>The Amazon Resource Name (ARN) of the override to an on-call rotation.</p>
    pub rotation_override_id: ::std::string::String,
    /// <p>The Amazon Resource Names (ARNs) of the contacts assigned to the override of the on-call rotation.</p>
    pub new_contact_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>The time a rotation override begins.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>The time a rotation override ends.</p>
    pub end_time: ::aws_smithy_types::DateTime,
    /// <p>The time a rotation override was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
}
impl RotationOverride {
    /// <p>The Amazon Resource Name (ARN) of the override to an on-call rotation.</p>
    pub fn rotation_override_id(&self) -> &str {
        use std::ops::Deref;
        self.rotation_override_id.deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the contacts assigned to the override of the on-call rotation.</p>
    pub fn new_contact_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.new_contact_ids.deref()
    }
    /// <p>The time a rotation override begins.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>The time a rotation override ends.</p>
    pub fn end_time(&self) -> &::aws_smithy_types::DateTime {
        &self.end_time
    }
    /// <p>The time a rotation override was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
}
impl RotationOverride {
    /// Creates a new builder-style object to manufacture [`RotationOverride`](crate::types::RotationOverride).
    pub fn builder() -> crate::types::builders::RotationOverrideBuilder {
        crate::types::builders::RotationOverrideBuilder::default()
    }
}

/// A builder for [`RotationOverride`](crate::types::RotationOverride).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RotationOverrideBuilder {
    pub(crate) rotation_override_id: ::std::option::Option<::std::string::String>,
    pub(crate) new_contact_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RotationOverrideBuilder {
    /// <p>The Amazon Resource Name (ARN) of the override to an on-call rotation.</p>
    /// This field is required.
    pub fn rotation_override_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rotation_override_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the override to an on-call rotation.</p>
    pub fn set_rotation_override_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rotation_override_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the override to an on-call rotation.</p>
    pub fn get_rotation_override_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rotation_override_id
    }
    /// Appends an item to `new_contact_ids`.
    ///
    /// To override the contents of this collection use [`set_new_contact_ids`](Self::set_new_contact_ids).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the contacts assigned to the override of the on-call rotation.</p>
    pub fn new_contact_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.new_contact_ids.unwrap_or_default();
        v.push(input.into());
        self.new_contact_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the contacts assigned to the override of the on-call rotation.</p>
    pub fn set_new_contact_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.new_contact_ids = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the contacts assigned to the override of the on-call rotation.</p>
    pub fn get_new_contact_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.new_contact_ids
    }
    /// <p>The time a rotation override begins.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time a rotation override begins.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time a rotation override begins.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time a rotation override ends.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time a rotation override ends.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time a rotation override ends.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The time a rotation override was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time a rotation override was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time a rotation override was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// Consumes the builder and constructs a [`RotationOverride`](crate::types::RotationOverride).
    /// This method will fail if any of the following fields are not set:
    /// - [`rotation_override_id`](crate::types::builders::RotationOverrideBuilder::rotation_override_id)
    /// - [`new_contact_ids`](crate::types::builders::RotationOverrideBuilder::new_contact_ids)
    /// - [`start_time`](crate::types::builders::RotationOverrideBuilder::start_time)
    /// - [`end_time`](crate::types::builders::RotationOverrideBuilder::end_time)
    /// - [`create_time`](crate::types::builders::RotationOverrideBuilder::create_time)
    pub fn build(self) -> ::std::result::Result<crate::types::RotationOverride, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RotationOverride {
            rotation_override_id: self.rotation_override_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rotation_override_id",
                    "rotation_override_id was not specified but it is required when building RotationOverride",
                )
            })?,
            new_contact_ids: self.new_contact_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "new_contact_ids",
                    "new_contact_ids was not specified but it is required when building RotationOverride",
                )
            })?,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building RotationOverride",
                )
            })?,
            end_time: self.end_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_time",
                    "end_time was not specified but it is required when building RotationOverride",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building RotationOverride",
                )
            })?,
        })
    }
}
