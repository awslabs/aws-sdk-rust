// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the stages and on-call rotation teams associated with an escalation plan or engagement plan. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Plan {
    /// <p>A list of stages that the escalation plan or engagement plan uses to engage contacts and contact methods.</p>
    pub stages: ::std::option::Option<::std::vec::Vec<crate::types::Stage>>,
    /// <p>The Amazon Resource Names (ARNs) of the on-call rotations associated with the plan. </p>
    pub rotation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Plan {
    /// <p>A list of stages that the escalation plan or engagement plan uses to engage contacts and contact methods.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stages.is_none()`.
    pub fn stages(&self) -> &[crate::types::Stage] {
        self.stages.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Names (ARNs) of the on-call rotations associated with the plan. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rotation_ids.is_none()`.
    pub fn rotation_ids(&self) -> &[::std::string::String] {
        self.rotation_ids.as_deref().unwrap_or_default()
    }
}
impl Plan {
    /// Creates a new builder-style object to manufacture [`Plan`](crate::types::Plan).
    pub fn builder() -> crate::types::builders::PlanBuilder {
        crate::types::builders::PlanBuilder::default()
    }
}

/// A builder for [`Plan`](crate::types::Plan).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PlanBuilder {
    pub(crate) stages: ::std::option::Option<::std::vec::Vec<crate::types::Stage>>,
    pub(crate) rotation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PlanBuilder {
    /// Appends an item to `stages`.
    ///
    /// To override the contents of this collection use [`set_stages`](Self::set_stages).
    ///
    /// <p>A list of stages that the escalation plan or engagement plan uses to engage contacts and contact methods.</p>
    pub fn stages(mut self, input: crate::types::Stage) -> Self {
        let mut v = self.stages.unwrap_or_default();
        v.push(input);
        self.stages = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of stages that the escalation plan or engagement plan uses to engage contacts and contact methods.</p>
    pub fn set_stages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Stage>>) -> Self {
        self.stages = input;
        self
    }
    /// <p>A list of stages that the escalation plan or engagement plan uses to engage contacts and contact methods.</p>
    pub fn get_stages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Stage>> {
        &self.stages
    }
    /// Appends an item to `rotation_ids`.
    ///
    /// To override the contents of this collection use [`set_rotation_ids`](Self::set_rotation_ids).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the on-call rotations associated with the plan. </p>
    pub fn rotation_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.rotation_ids.unwrap_or_default();
        v.push(input.into());
        self.rotation_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the on-call rotations associated with the plan. </p>
    pub fn set_rotation_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.rotation_ids = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the on-call rotations associated with the plan. </p>
    pub fn get_rotation_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.rotation_ids
    }
    /// Consumes the builder and constructs a [`Plan`](crate::types::Plan).
    pub fn build(self) -> crate::types::Plan {
        crate::types::Plan {
            stages: self.stages,
            rotation_ids: self.rotation_ids,
        }
    }
}
