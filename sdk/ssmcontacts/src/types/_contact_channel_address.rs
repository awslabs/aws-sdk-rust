// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details that Incident Manager uses when trying to engage the contact channel. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContactChannelAddress {
    /// <p>The format is dependent on the type of the contact channel. The following are the expected formats:</p>
    /// <ul>
    /// <li> <p>SMS - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>VOICE - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>EMAIL - any standard email format</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub simple_address: std::option::Option<std::string::String>,
}
impl ContactChannelAddress {
    /// <p>The format is dependent on the type of the contact channel. The following are the expected formats:</p>
    /// <ul>
    /// <li> <p>SMS - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>VOICE - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>EMAIL - any standard email format</p> </li>
    /// </ul>
    pub fn simple_address(&self) -> std::option::Option<&str> {
        self.simple_address.as_deref()
    }
}
impl ContactChannelAddress {
    /// Creates a new builder-style object to manufacture [`ContactChannelAddress`](crate::types::ContactChannelAddress).
    pub fn builder() -> crate::types::builders::ContactChannelAddressBuilder {
        crate::types::builders::ContactChannelAddressBuilder::default()
    }
}

/// A builder for [`ContactChannelAddress`](crate::types::ContactChannelAddress).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContactChannelAddressBuilder {
    pub(crate) simple_address: std::option::Option<std::string::String>,
}
impl ContactChannelAddressBuilder {
    /// <p>The format is dependent on the type of the contact channel. The following are the expected formats:</p>
    /// <ul>
    /// <li> <p>SMS - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>VOICE - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>EMAIL - any standard email format</p> </li>
    /// </ul>
    pub fn simple_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.simple_address = Some(input.into());
        self
    }
    /// <p>The format is dependent on the type of the contact channel. The following are the expected formats:</p>
    /// <ul>
    /// <li> <p>SMS - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>VOICE - '+' followed by the country code and phone number</p> </li>
    /// <li> <p>EMAIL - any standard email format</p> </li>
    /// </ul>
    pub fn set_simple_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.simple_address = input;
        self
    }
    /// Consumes the builder and constructs a [`ContactChannelAddress`](crate::types::ContactChannelAddress).
    pub fn build(self) -> crate::types::ContactChannelAddress {
        crate::types::ContactChannelAddress {
            simple_address: self.simple_address,
        }
    }
}
