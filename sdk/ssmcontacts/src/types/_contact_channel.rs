// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The method that Incident Manager uses to engage a contact.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContactChannel {
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    #[doc(hidden)]
    pub contact_channel_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the contact that contains the contact channel.</p>
    #[doc(hidden)]
    pub contact_arn: std::option::Option<std::string::String>,
    /// <p>The name of the contact channel.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of the contact channel. Incident Manager supports three contact methods:</p>
    /// <ul>
    /// <li> <p>SMS</p> </li>
    /// <li> <p>VOICE</p> </li>
    /// <li> <p>EMAIL</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ChannelType>,
    /// <p>The details that Incident Manager uses when trying to engage the contact channel.</p>
    #[doc(hidden)]
    pub delivery_address: std::option::Option<crate::types::ContactChannelAddress>,
    /// <p>A Boolean value describing if the contact channel has been activated or not. If the contact channel isn't activated, Incident Manager can't engage the contact through it. </p>
    #[doc(hidden)]
    pub activation_status: std::option::Option<crate::types::ActivationStatus>,
}
impl ContactChannel {
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    pub fn contact_channel_arn(&self) -> std::option::Option<&str> {
        self.contact_channel_arn.as_deref()
    }
    /// <p>The ARN of the contact that contains the contact channel.</p>
    pub fn contact_arn(&self) -> std::option::Option<&str> {
        self.contact_arn.as_deref()
    }
    /// <p>The name of the contact channel.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of the contact channel. Incident Manager supports three contact methods:</p>
    /// <ul>
    /// <li> <p>SMS</p> </li>
    /// <li> <p>VOICE</p> </li>
    /// <li> <p>EMAIL</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ChannelType> {
        self.r#type.as_ref()
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel.</p>
    pub fn delivery_address(&self) -> std::option::Option<&crate::types::ContactChannelAddress> {
        self.delivery_address.as_ref()
    }
    /// <p>A Boolean value describing if the contact channel has been activated or not. If the contact channel isn't activated, Incident Manager can't engage the contact through it. </p>
    pub fn activation_status(&self) -> std::option::Option<&crate::types::ActivationStatus> {
        self.activation_status.as_ref()
    }
}
impl ContactChannel {
    /// Creates a new builder-style object to manufacture [`ContactChannel`](crate::types::ContactChannel).
    pub fn builder() -> crate::types::builders::ContactChannelBuilder {
        crate::types::builders::ContactChannelBuilder::default()
    }
}

/// A builder for [`ContactChannel`](crate::types::ContactChannel).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContactChannelBuilder {
    pub(crate) contact_channel_arn: std::option::Option<std::string::String>,
    pub(crate) contact_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ChannelType>,
    pub(crate) delivery_address: std::option::Option<crate::types::ContactChannelAddress>,
    pub(crate) activation_status: std::option::Option<crate::types::ActivationStatus>,
}
impl ContactChannelBuilder {
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    pub fn contact_channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_channel_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact channel.</p>
    pub fn set_contact_channel_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.contact_channel_arn = input;
        self
    }
    /// <p>The ARN of the contact that contains the contact channel.</p>
    pub fn contact_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the contact that contains the contact channel.</p>
    pub fn set_contact_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.contact_arn = input;
        self
    }
    /// <p>The name of the contact channel.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the contact channel.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of the contact channel. Incident Manager supports three contact methods:</p>
    /// <ul>
    /// <li> <p>SMS</p> </li>
    /// <li> <p>VOICE</p> </li>
    /// <li> <p>EMAIL</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::ChannelType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the contact channel. Incident Manager supports three contact methods:</p>
    /// <ul>
    /// <li> <p>SMS</p> </li>
    /// <li> <p>VOICE</p> </li>
    /// <li> <p>EMAIL</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ChannelType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel.</p>
    pub fn delivery_address(mut self, input: crate::types::ContactChannelAddress) -> Self {
        self.delivery_address = Some(input);
        self
    }
    /// <p>The details that Incident Manager uses when trying to engage the contact channel.</p>
    pub fn set_delivery_address(
        mut self,
        input: std::option::Option<crate::types::ContactChannelAddress>,
    ) -> Self {
        self.delivery_address = input;
        self
    }
    /// <p>A Boolean value describing if the contact channel has been activated or not. If the contact channel isn't activated, Incident Manager can't engage the contact through it. </p>
    pub fn activation_status(mut self, input: crate::types::ActivationStatus) -> Self {
        self.activation_status = Some(input);
        self
    }
    /// <p>A Boolean value describing if the contact channel has been activated or not. If the contact channel isn't activated, Incident Manager can't engage the contact through it. </p>
    pub fn set_activation_status(
        mut self,
        input: std::option::Option<crate::types::ActivationStatus>,
    ) -> Self {
        self.activation_status = input;
        self
    }
    /// Consumes the builder and constructs a [`ContactChannel`](crate::types::ContactChannel).
    pub fn build(self) -> crate::types::ContactChannel {
        crate::types::ContactChannel {
            contact_channel_arn: self.contact_channel_arn,
            contact_arn: self.contact_arn,
            name: self.name,
            r#type: self.r#type,
            delivery_address: self.delivery_address,
            activation_status: self.activation_status,
        }
    }
}
