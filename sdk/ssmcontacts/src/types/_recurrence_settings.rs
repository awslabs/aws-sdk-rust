// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about when an on-call rotation is in effect and how long the rotation period lasts.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecurrenceSettings {
    /// <p>Information about on-call rotations that recur monthly.</p>
    pub monthly_settings: ::std::option::Option<::std::vec::Vec<crate::types::MonthlySetting>>,
    /// <p>Information about on-call rotations that recur weekly.</p>
    pub weekly_settings: ::std::option::Option<::std::vec::Vec<crate::types::WeeklySetting>>,
    /// <p>Information about on-call rotations that recur daily.</p>
    pub daily_settings: ::std::option::Option<::std::vec::Vec<crate::types::HandOffTime>>,
    /// <p>The number of contacts, or shift team members designated to be on call concurrently during a shift. For example, in an on-call schedule containing ten contacts, a value of <code>2</code> designates that two of them are on call at any given time.</p>
    pub number_of_on_calls: i32,
    /// <p>Information about the days of the week included in on-call rotation coverage.</p>
    pub shift_coverages: ::std::option::Option<::std::collections::HashMap<crate::types::DayOfWeek, ::std::vec::Vec<crate::types::CoverageTime>>>,
    /// <p>The number of days, weeks, or months a single rotation lasts.</p>
    pub recurrence_multiplier: i32,
}
impl RecurrenceSettings {
    /// <p>Information about on-call rotations that recur monthly.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.monthly_settings.is_none()`.
    pub fn monthly_settings(&self) -> &[crate::types::MonthlySetting] {
        self.monthly_settings.as_deref().unwrap_or_default()
    }
    /// <p>Information about on-call rotations that recur weekly.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.weekly_settings.is_none()`.
    pub fn weekly_settings(&self) -> &[crate::types::WeeklySetting] {
        self.weekly_settings.as_deref().unwrap_or_default()
    }
    /// <p>Information about on-call rotations that recur daily.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.daily_settings.is_none()`.
    pub fn daily_settings(&self) -> &[crate::types::HandOffTime] {
        self.daily_settings.as_deref().unwrap_or_default()
    }
    /// <p>The number of contacts, or shift team members designated to be on call concurrently during a shift. For example, in an on-call schedule containing ten contacts, a value of <code>2</code> designates that two of them are on call at any given time.</p>
    pub fn number_of_on_calls(&self) -> i32 {
        self.number_of_on_calls
    }
    /// <p>Information about the days of the week included in on-call rotation coverage.</p>
    pub fn shift_coverages(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<crate::types::DayOfWeek, ::std::vec::Vec<crate::types::CoverageTime>>> {
        self.shift_coverages.as_ref()
    }
    /// <p>The number of days, weeks, or months a single rotation lasts.</p>
    pub fn recurrence_multiplier(&self) -> i32 {
        self.recurrence_multiplier
    }
}
impl RecurrenceSettings {
    /// Creates a new builder-style object to manufacture [`RecurrenceSettings`](crate::types::RecurrenceSettings).
    pub fn builder() -> crate::types::builders::RecurrenceSettingsBuilder {
        crate::types::builders::RecurrenceSettingsBuilder::default()
    }
}

/// A builder for [`RecurrenceSettings`](crate::types::RecurrenceSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecurrenceSettingsBuilder {
    pub(crate) monthly_settings: ::std::option::Option<::std::vec::Vec<crate::types::MonthlySetting>>,
    pub(crate) weekly_settings: ::std::option::Option<::std::vec::Vec<crate::types::WeeklySetting>>,
    pub(crate) daily_settings: ::std::option::Option<::std::vec::Vec<crate::types::HandOffTime>>,
    pub(crate) number_of_on_calls: ::std::option::Option<i32>,
    pub(crate) shift_coverages:
        ::std::option::Option<::std::collections::HashMap<crate::types::DayOfWeek, ::std::vec::Vec<crate::types::CoverageTime>>>,
    pub(crate) recurrence_multiplier: ::std::option::Option<i32>,
}
impl RecurrenceSettingsBuilder {
    /// Appends an item to `monthly_settings`.
    ///
    /// To override the contents of this collection use [`set_monthly_settings`](Self::set_monthly_settings).
    ///
    /// <p>Information about on-call rotations that recur monthly.</p>
    pub fn monthly_settings(mut self, input: crate::types::MonthlySetting) -> Self {
        let mut v = self.monthly_settings.unwrap_or_default();
        v.push(input);
        self.monthly_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about on-call rotations that recur monthly.</p>
    pub fn set_monthly_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonthlySetting>>) -> Self {
        self.monthly_settings = input;
        self
    }
    /// <p>Information about on-call rotations that recur monthly.</p>
    pub fn get_monthly_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonthlySetting>> {
        &self.monthly_settings
    }
    /// Appends an item to `weekly_settings`.
    ///
    /// To override the contents of this collection use [`set_weekly_settings`](Self::set_weekly_settings).
    ///
    /// <p>Information about on-call rotations that recur weekly.</p>
    pub fn weekly_settings(mut self, input: crate::types::WeeklySetting) -> Self {
        let mut v = self.weekly_settings.unwrap_or_default();
        v.push(input);
        self.weekly_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about on-call rotations that recur weekly.</p>
    pub fn set_weekly_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WeeklySetting>>) -> Self {
        self.weekly_settings = input;
        self
    }
    /// <p>Information about on-call rotations that recur weekly.</p>
    pub fn get_weekly_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WeeklySetting>> {
        &self.weekly_settings
    }
    /// Appends an item to `daily_settings`.
    ///
    /// To override the contents of this collection use [`set_daily_settings`](Self::set_daily_settings).
    ///
    /// <p>Information about on-call rotations that recur daily.</p>
    pub fn daily_settings(mut self, input: crate::types::HandOffTime) -> Self {
        let mut v = self.daily_settings.unwrap_or_default();
        v.push(input);
        self.daily_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about on-call rotations that recur daily.</p>
    pub fn set_daily_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HandOffTime>>) -> Self {
        self.daily_settings = input;
        self
    }
    /// <p>Information about on-call rotations that recur daily.</p>
    pub fn get_daily_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HandOffTime>> {
        &self.daily_settings
    }
    /// <p>The number of contacts, or shift team members designated to be on call concurrently during a shift. For example, in an on-call schedule containing ten contacts, a value of <code>2</code> designates that two of them are on call at any given time.</p>
    /// This field is required.
    pub fn number_of_on_calls(mut self, input: i32) -> Self {
        self.number_of_on_calls = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of contacts, or shift team members designated to be on call concurrently during a shift. For example, in an on-call schedule containing ten contacts, a value of <code>2</code> designates that two of them are on call at any given time.</p>
    pub fn set_number_of_on_calls(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_on_calls = input;
        self
    }
    /// <p>The number of contacts, or shift team members designated to be on call concurrently during a shift. For example, in an on-call schedule containing ten contacts, a value of <code>2</code> designates that two of them are on call at any given time.</p>
    pub fn get_number_of_on_calls(&self) -> &::std::option::Option<i32> {
        &self.number_of_on_calls
    }
    /// Adds a key-value pair to `shift_coverages`.
    ///
    /// To override the contents of this collection use [`set_shift_coverages`](Self::set_shift_coverages).
    ///
    /// <p>Information about the days of the week included in on-call rotation coverage.</p>
    pub fn shift_coverages(mut self, k: crate::types::DayOfWeek, v: ::std::vec::Vec<crate::types::CoverageTime>) -> Self {
        let mut hash_map = self.shift_coverages.unwrap_or_default();
        hash_map.insert(k, v);
        self.shift_coverages = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Information about the days of the week included in on-call rotation coverage.</p>
    pub fn set_shift_coverages(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::DayOfWeek, ::std::vec::Vec<crate::types::CoverageTime>>>,
    ) -> Self {
        self.shift_coverages = input;
        self
    }
    /// <p>Information about the days of the week included in on-call rotation coverage.</p>
    pub fn get_shift_coverages(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::DayOfWeek, ::std::vec::Vec<crate::types::CoverageTime>>> {
        &self.shift_coverages
    }
    /// <p>The number of days, weeks, or months a single rotation lasts.</p>
    /// This field is required.
    pub fn recurrence_multiplier(mut self, input: i32) -> Self {
        self.recurrence_multiplier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days, weeks, or months a single rotation lasts.</p>
    pub fn set_recurrence_multiplier(mut self, input: ::std::option::Option<i32>) -> Self {
        self.recurrence_multiplier = input;
        self
    }
    /// <p>The number of days, weeks, or months a single rotation lasts.</p>
    pub fn get_recurrence_multiplier(&self) -> &::std::option::Option<i32> {
        &self.recurrence_multiplier
    }
    /// Consumes the builder and constructs a [`RecurrenceSettings`](crate::types::RecurrenceSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`number_of_on_calls`](crate::types::builders::RecurrenceSettingsBuilder::number_of_on_calls)
    /// - [`recurrence_multiplier`](crate::types::builders::RecurrenceSettingsBuilder::recurrence_multiplier)
    pub fn build(self) -> ::std::result::Result<crate::types::RecurrenceSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RecurrenceSettings {
            monthly_settings: self.monthly_settings,
            weekly_settings: self.weekly_settings,
            daily_settings: self.daily_settings,
            number_of_on_calls: self.number_of_on_calls.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "number_of_on_calls",
                    "number_of_on_calls was not specified but it is required when building RecurrenceSettings",
                )
            })?,
            shift_coverages: self.shift_coverages,
            recurrence_multiplier: self.recurrence_multiplier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "recurrence_multiplier",
                    "recurrence_multiplier was not specified but it is required when building RecurrenceSettings",
                )
            })?,
        })
    }
}
