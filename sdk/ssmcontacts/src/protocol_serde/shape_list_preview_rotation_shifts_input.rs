// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_preview_rotation_shifts_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_preview_rotation_shifts::ListPreviewRotationShiftsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.rotation_start_time {
        object
            .key("RotationStartTime")
            .date_time(var_1, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_2, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_3) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_3, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_4) = &input.members {
        let mut array_5 = object.key("Members").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.time_zone_id {
        object.key("TimeZoneId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.recurrence {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Recurrence").start_object();
        crate::protocol_serde::shape_recurrence_settings::ser_recurrence_settings(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.overrides {
        let mut array_11 = object.key("Overrides").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_preview_override::ser_preview_override(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.next_token {
        object.key("NextToken").string(var_14.as_str());
    }
    if let Some(var_15) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    Ok(())
}
