// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn data_encryption_exception_correct_errors(
    mut builder: crate::types::error::builders::DataEncryptionExceptionBuilder,
) -> crate::types::error::builders::DataEncryptionExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    builder
}

pub(crate) fn create_contact_output_correct_errors(
    mut builder: crate::operation::create_contact::builders::CreateContactOutputBuilder,
) -> crate::operation::create_contact::builders::CreateContactOutputBuilder {
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_contact_channel_output_correct_errors(
    mut builder: crate::operation::create_contact_channel::builders::CreateContactChannelOutputBuilder,
) -> crate::operation::create_contact_channel::builders::CreateContactChannelOutputBuilder {
    if builder.contact_channel_arn.is_none() {
        builder.contact_channel_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_rotation_output_correct_errors(
    mut builder: crate::operation::create_rotation::builders::CreateRotationOutputBuilder,
) -> crate::operation::create_rotation::builders::CreateRotationOutputBuilder {
    if builder.rotation_arn.is_none() {
        builder.rotation_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_rotation_override_output_correct_errors(
    mut builder: crate::operation::create_rotation_override::builders::CreateRotationOverrideOutputBuilder,
) -> crate::operation::create_rotation_override::builders::CreateRotationOverrideOutputBuilder {
    if builder.rotation_override_id.is_none() {
        builder.rotation_override_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_engagement_output_correct_errors(
    mut builder: crate::operation::describe_engagement::builders::DescribeEngagementOutputBuilder,
) -> crate::operation::describe_engagement::builders::DescribeEngagementOutputBuilder {
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    if builder.engagement_arn.is_none() {
        builder.engagement_arn = Some(Default::default())
    }
    if builder.sender.is_none() {
        builder.sender = Some(Default::default())
    }
    if builder.subject.is_none() {
        builder.subject = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_page_output_correct_errors(
    mut builder: crate::operation::describe_page::builders::DescribePageOutputBuilder,
) -> crate::operation::describe_page::builders::DescribePageOutputBuilder {
    if builder.page_arn.is_none() {
        builder.page_arn = Some(Default::default())
    }
    if builder.engagement_arn.is_none() {
        builder.engagement_arn = Some(Default::default())
    }
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    if builder.sender.is_none() {
        builder.sender = Some(Default::default())
    }
    if builder.subject.is_none() {
        builder.subject = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    builder
}

pub(crate) fn get_contact_output_correct_errors(
    mut builder: crate::operation::get_contact::builders::GetContactOutputBuilder,
) -> crate::operation::get_contact::builders::GetContactOutputBuilder {
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    if builder.alias.is_none() {
        builder.alias = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ContactType>().ok()
    }
    if builder.plan.is_none() {
        builder.plan = {
            let builder = crate::types::builders::PlanBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_contact_channel_output_correct_errors(
    mut builder: crate::operation::get_contact_channel::builders::GetContactChannelOutputBuilder,
) -> crate::operation::get_contact_channel::builders::GetContactChannelOutputBuilder {
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    if builder.contact_channel_arn.is_none() {
        builder.contact_channel_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ChannelType>().ok()
    }
    if builder.delivery_address.is_none() {
        builder.delivery_address = {
            let builder = crate::types::builders::ContactChannelAddressBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_rotation_output_correct_errors(
    mut builder: crate::operation::get_rotation::builders::GetRotationOutputBuilder,
) -> crate::operation::get_rotation::builders::GetRotationOutputBuilder {
    if builder.rotation_arn.is_none() {
        builder.rotation_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.contact_ids.is_none() {
        builder.contact_ids = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.time_zone_id.is_none() {
        builder.time_zone_id = Some(Default::default())
    }
    if builder.recurrence.is_none() {
        builder.recurrence = {
            let builder = crate::types::builders::RecurrenceSettingsBuilder::default();
            crate::serde_util::recurrence_settings_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_contact_channels_output_correct_errors(
    mut builder: crate::operation::list_contact_channels::builders::ListContactChannelsOutputBuilder,
) -> crate::operation::list_contact_channels::builders::ListContactChannelsOutputBuilder {
    if builder.contact_channels.is_none() {
        builder.contact_channels = Some(Default::default())
    }
    builder
}

pub(crate) fn list_engagements_output_correct_errors(
    mut builder: crate::operation::list_engagements::builders::ListEngagementsOutputBuilder,
) -> crate::operation::list_engagements::builders::ListEngagementsOutputBuilder {
    if builder.engagements.is_none() {
        builder.engagements = Some(Default::default())
    }
    builder
}

pub(crate) fn list_page_resolutions_output_correct_errors(
    mut builder: crate::operation::list_page_resolutions::builders::ListPageResolutionsOutputBuilder,
) -> crate::operation::list_page_resolutions::builders::ListPageResolutionsOutputBuilder {
    if builder.page_resolutions.is_none() {
        builder.page_resolutions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_pages_by_contact_output_correct_errors(
    mut builder: crate::operation::list_pages_by_contact::builders::ListPagesByContactOutputBuilder,
) -> crate::operation::list_pages_by_contact::builders::ListPagesByContactOutputBuilder {
    if builder.pages.is_none() {
        builder.pages = Some(Default::default())
    }
    builder
}

pub(crate) fn list_pages_by_engagement_output_correct_errors(
    mut builder: crate::operation::list_pages_by_engagement::builders::ListPagesByEngagementOutputBuilder,
) -> crate::operation::list_pages_by_engagement::builders::ListPagesByEngagementOutputBuilder {
    if builder.pages.is_none() {
        builder.pages = Some(Default::default())
    }
    builder
}

pub(crate) fn list_rotations_output_correct_errors(
    mut builder: crate::operation::list_rotations::builders::ListRotationsOutputBuilder,
) -> crate::operation::list_rotations::builders::ListRotationsOutputBuilder {
    if builder.rotations.is_none() {
        builder.rotations = Some(Default::default())
    }
    builder
}

pub(crate) fn start_engagement_output_correct_errors(
    mut builder: crate::operation::start_engagement::builders::StartEngagementOutputBuilder,
) -> crate::operation::start_engagement::builders::StartEngagementOutputBuilder {
    if builder.engagement_arn.is_none() {
        builder.engagement_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn recurrence_settings_correct_errors(
    mut builder: crate::types::builders::RecurrenceSettingsBuilder,
) -> crate::types::builders::RecurrenceSettingsBuilder {
    if builder.number_of_on_calls.is_none() {
        builder.number_of_on_calls = Some(Default::default())
    }
    if builder.recurrence_multiplier.is_none() {
        builder.recurrence_multiplier = Some(Default::default())
    }
    builder
}

pub(crate) fn contact_correct_errors(mut builder: crate::types::builders::ContactBuilder) -> crate::types::builders::ContactBuilder {
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    if builder.alias.is_none() {
        builder.alias = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ContactType>().ok()
    }
    builder
}

pub(crate) fn contact_channel_correct_errors(
    mut builder: crate::types::builders::ContactChannelBuilder,
) -> crate::types::builders::ContactChannelBuilder {
    if builder.contact_channel_arn.is_none() {
        builder.contact_channel_arn = Some(Default::default())
    }
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.delivery_address.is_none() {
        builder.delivery_address = {
            let builder = crate::types::builders::ContactChannelAddressBuilder::default();
            Some(builder.build())
        }
    }
    if builder.activation_status.is_none() {
        builder.activation_status = "no value was set".parse::<crate::types::ActivationStatus>().ok()
    }
    builder
}

pub(crate) fn dependent_entity_correct_errors(
    mut builder: crate::types::builders::DependentEntityBuilder,
) -> crate::types::builders::DependentEntityBuilder {
    if builder.relation_type.is_none() {
        builder.relation_type = Some(Default::default())
    }
    if builder.dependent_resource_ids.is_none() {
        builder.dependent_resource_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn engagement_correct_errors(mut builder: crate::types::builders::EngagementBuilder) -> crate::types::builders::EngagementBuilder {
    if builder.engagement_arn.is_none() {
        builder.engagement_arn = Some(Default::default())
    }
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    if builder.sender.is_none() {
        builder.sender = Some(Default::default())
    }
    builder
}

pub(crate) fn page_correct_errors(mut builder: crate::types::builders::PageBuilder) -> crate::types::builders::PageBuilder {
    if builder.page_arn.is_none() {
        builder.page_arn = Some(Default::default())
    }
    if builder.engagement_arn.is_none() {
        builder.engagement_arn = Some(Default::default())
    }
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    if builder.sender.is_none() {
        builder.sender = Some(Default::default())
    }
    builder
}

pub(crate) fn receipt_correct_errors(mut builder: crate::types::builders::ReceiptBuilder) -> crate::types::builders::ReceiptBuilder {
    if builder.receipt_type.is_none() {
        builder.receipt_type = "no value was set".parse::<crate::types::ReceiptType>().ok()
    }
    if builder.receipt_time.is_none() {
        builder.receipt_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn resolution_contact_correct_errors(
    mut builder: crate::types::builders::ResolutionContactBuilder,
) -> crate::types::builders::ResolutionContactBuilder {
    if builder.contact_arn.is_none() {
        builder.contact_arn = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ContactType>().ok()
    }
    builder
}

pub(crate) fn rotation_correct_errors(mut builder: crate::types::builders::RotationBuilder) -> crate::types::builders::RotationBuilder {
    if builder.rotation_arn.is_none() {
        builder.rotation_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn rotation_override_correct_errors(
    mut builder: crate::types::builders::RotationOverrideBuilder,
) -> crate::types::builders::RotationOverrideBuilder {
    if builder.rotation_override_id.is_none() {
        builder.rotation_override_id = Some(Default::default())
    }
    if builder.new_contact_ids.is_none() {
        builder.new_contact_ids = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn rotation_shift_correct_errors(
    mut builder: crate::types::builders::RotationShiftBuilder,
) -> crate::types::builders::RotationShiftBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn hand_off_time_correct_errors(mut builder: crate::types::builders::HandOffTimeBuilder) -> crate::types::builders::HandOffTimeBuilder {
    if builder.hour_of_day.is_none() {
        builder.hour_of_day = Some(Default::default())
    }
    if builder.minute_of_hour.is_none() {
        builder.minute_of_hour = Some(Default::default())
    }
    builder
}

pub(crate) fn monthly_setting_correct_errors(
    mut builder: crate::types::builders::MonthlySettingBuilder,
) -> crate::types::builders::MonthlySettingBuilder {
    if builder.day_of_month.is_none() {
        builder.day_of_month = Some(Default::default())
    }
    if builder.hand_off_time.is_none() {
        builder.hand_off_time = {
            let builder = crate::types::builders::HandOffTimeBuilder::default();
            Some(crate::serde_util::hand_off_time_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn shift_details_correct_errors(mut builder: crate::types::builders::ShiftDetailsBuilder) -> crate::types::builders::ShiftDetailsBuilder {
    if builder.overridden_contact_ids.is_none() {
        builder.overridden_contact_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn stage_correct_errors(mut builder: crate::types::builders::StageBuilder) -> crate::types::builders::StageBuilder {
    if builder.duration_in_minutes.is_none() {
        builder.duration_in_minutes = Some(Default::default())
    }
    if builder.targets.is_none() {
        builder.targets = Some(Default::default())
    }
    builder
}

pub(crate) fn weekly_setting_correct_errors(
    mut builder: crate::types::builders::WeeklySettingBuilder,
) -> crate::types::builders::WeeklySettingBuilder {
    if builder.day_of_week.is_none() {
        builder.day_of_week = "no value was set".parse::<crate::types::DayOfWeek>().ok()
    }
    if builder.hand_off_time.is_none() {
        builder.hand_off_time = {
            let builder = crate::types::builders::HandOffTimeBuilder::default();
            Some(crate::serde_util::hand_off_time_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn channel_target_info_correct_errors(
    mut builder: crate::types::builders::ChannelTargetInfoBuilder,
) -> crate::types::builders::ChannelTargetInfoBuilder {
    if builder.contact_channel_id.is_none() {
        builder.contact_channel_id = Some(Default::default())
    }
    builder
}

pub(crate) fn contact_target_info_correct_errors(
    mut builder: crate::types::builders::ContactTargetInfoBuilder,
) -> crate::types::builders::ContactTargetInfoBuilder {
    if builder.is_essential.is_none() {
        builder.is_essential = Some(Default::default())
    }
    builder
}
