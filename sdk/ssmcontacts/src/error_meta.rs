// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient access to perform this operation.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Updating or deleting a resource causes an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The operation failed to due an encryption key error.</p>
    DataEncryptionException(crate::types::error::DataEncryptionException),
    /// <p>Unexpected error occurred while processing the request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Request references a resource that doesn't exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DataEncryptionException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::accept_page::AcceptPageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::accept_page::AcceptPageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::accept_page::AcceptPageError> for Error {
    fn from(err: crate::operation::accept_page::AcceptPageError) -> Self {
        match err {
            crate::operation::accept_page::AcceptPageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::accept_page::AcceptPageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::accept_page::AcceptPageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::accept_page::AcceptPageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::accept_page::AcceptPageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::accept_page::AcceptPageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::activate_contact_channel::ActivateContactChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::activate_contact_channel::ActivateContactChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::activate_contact_channel::ActivateContactChannelError> for Error {
    fn from(err: crate::operation::activate_contact_channel::ActivateContactChannelError) -> Self {
        match err {
            crate::operation::activate_contact_channel::ActivateContactChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::activate_contact_channel::ActivateContactChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::activate_contact_channel::ActivateContactChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::activate_contact_channel::ActivateContactChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::activate_contact_channel::ActivateContactChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::activate_contact_channel::ActivateContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_contact::CreateContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_contact::CreateContactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_contact::CreateContactError> for Error {
    fn from(err: crate::operation::create_contact::CreateContactError) -> Self {
        match err {
            crate::operation::create_contact::CreateContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_contact::CreateContactError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_contact::CreateContactError::DataEncryptionException(
                inner,
            ) => Error::DataEncryptionException(inner),
            crate::operation::create_contact::CreateContactError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_contact::CreateContactError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_contact::CreateContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_contact::CreateContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_contact::CreateContactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_contact_channel::CreateContactChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_contact_channel::CreateContactChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_contact_channel::CreateContactChannelError> for Error {
    fn from(err: crate::operation::create_contact_channel::CreateContactChannelError) -> Self {
        match err {
            crate::operation::create_contact_channel::CreateContactChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_contact_channel::CreateContactChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_contact_channel::CreateContactChannelError::DataEncryptionException(inner) => Error::DataEncryptionException(inner),
            crate::operation::create_contact_channel::CreateContactChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_contact_channel::CreateContactChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_contact_channel::CreateContactChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_contact_channel::CreateContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::deactivate_contact_channel::DeactivateContactChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::deactivate_contact_channel::DeactivateContactChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deactivate_contact_channel::DeactivateContactChannelError> for Error {
    fn from(
        err: crate::operation::deactivate_contact_channel::DeactivateContactChannelError,
    ) -> Self {
        match err {
            crate::operation::deactivate_contact_channel::DeactivateContactChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::deactivate_contact_channel::DeactivateContactChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::deactivate_contact_channel::DeactivateContactChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::deactivate_contact_channel::DeactivateContactChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::deactivate_contact_channel::DeactivateContactChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::deactivate_contact_channel::DeactivateContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_contact::DeleteContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_contact::DeleteContactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_contact::DeleteContactError> for Error {
    fn from(err: crate::operation::delete_contact::DeleteContactError) -> Self {
        match err {
            crate::operation::delete_contact::DeleteContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_contact::DeleteContactError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_contact::DeleteContactError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_contact::DeleteContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_contact::DeleteContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_contact::DeleteContactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_contact_channel::DeleteContactChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_contact_channel::DeleteContactChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_contact_channel::DeleteContactChannelError> for Error {
    fn from(err: crate::operation::delete_contact_channel::DeleteContactChannelError) -> Self {
        match err {
            crate::operation::delete_contact_channel::DeleteContactChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_contact_channel::DeleteContactChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_contact_channel::DeleteContactChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_contact_channel::DeleteContactChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_contact_channel::DeleteContactChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_contact_channel::DeleteContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_engagement::DescribeEngagementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_engagement::DescribeEngagementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_engagement::DescribeEngagementError> for Error {
    fn from(err: crate::operation::describe_engagement::DescribeEngagementError) -> Self {
        match err {
            crate::operation::describe_engagement::DescribeEngagementError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_engagement::DescribeEngagementError::DataEncryptionException(inner) => Error::DataEncryptionException(inner),
            crate::operation::describe_engagement::DescribeEngagementError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_engagement::DescribeEngagementError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_engagement::DescribeEngagementError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_engagement::DescribeEngagementError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_engagement::DescribeEngagementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_page::DescribePageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_page::DescribePageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_page::DescribePageError> for Error {
    fn from(err: crate::operation::describe_page::DescribePageError) -> Self {
        match err {
            crate::operation::describe_page::DescribePageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_page::DescribePageError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::operation::describe_page::DescribePageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_page::DescribePageError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_page::DescribePageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_page::DescribePageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_page::DescribePageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_contact::GetContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_contact::GetContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_contact::GetContactError> for Error {
    fn from(err: crate::operation::get_contact::GetContactError) -> Self {
        match err {
            crate::operation::get_contact::GetContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_contact::GetContactError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::operation::get_contact::GetContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_contact::GetContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_contact::GetContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_contact::GetContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_contact::GetContactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_contact_channel::GetContactChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_contact_channel::GetContactChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_contact_channel::GetContactChannelError> for Error {
    fn from(err: crate::operation::get_contact_channel::GetContactChannelError) -> Self {
        match err {
            crate::operation::get_contact_channel::GetContactChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_contact_channel::GetContactChannelError::DataEncryptionException(inner) => Error::DataEncryptionException(inner),
            crate::operation::get_contact_channel::GetContactChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_contact_channel::GetContactChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_contact_channel::GetContactChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_contact_channel::GetContactChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_contact_channel::GetContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_contact_policy::GetContactPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_contact_policy::GetContactPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_contact_policy::GetContactPolicyError> for Error {
    fn from(err: crate::operation::get_contact_policy::GetContactPolicyError) -> Self {
        match err {
            crate::operation::get_contact_policy::GetContactPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_contact_policy::GetContactPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_contact_policy::GetContactPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_contact_policy::GetContactPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_contact_policy::GetContactPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_contact_policy::GetContactPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_contact_channels::ListContactChannelsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_contact_channels::ListContactChannelsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_contact_channels::ListContactChannelsError> for Error {
    fn from(err: crate::operation::list_contact_channels::ListContactChannelsError) -> Self {
        match err {
            crate::operation::list_contact_channels::ListContactChannelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_contact_channels::ListContactChannelsError::DataEncryptionException(inner) => Error::DataEncryptionException(inner),
            crate::operation::list_contact_channels::ListContactChannelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_contact_channels::ListContactChannelsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_contact_channels::ListContactChannelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_contact_channels::ListContactChannelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_contact_channels::ListContactChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_contacts::ListContactsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_contacts::ListContactsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_contacts::ListContactsError> for Error {
    fn from(err: crate::operation::list_contacts::ListContactsError) -> Self {
        match err {
            crate::operation::list_contacts::ListContactsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_contacts::ListContactsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_contacts::ListContactsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_contacts::ListContactsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_contacts::ListContactsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_engagements::ListEngagementsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_engagements::ListEngagementsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_engagements::ListEngagementsError> for Error {
    fn from(err: crate::operation::list_engagements::ListEngagementsError) -> Self {
        match err {
            crate::operation::list_engagements::ListEngagementsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_engagements::ListEngagementsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_engagements::ListEngagementsError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::list_engagements::ListEngagementsError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::list_engagements::ListEngagementsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_page_receipts::ListPageReceiptsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_page_receipts::ListPageReceiptsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_page_receipts::ListPageReceiptsError> for Error {
    fn from(err: crate::operation::list_page_receipts::ListPageReceiptsError) -> Self {
        match err {
            crate::operation::list_page_receipts::ListPageReceiptsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_page_receipts::ListPageReceiptsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_page_receipts::ListPageReceiptsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_page_receipts::ListPageReceiptsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_page_receipts::ListPageReceiptsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_page_receipts::ListPageReceiptsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_pages_by_contact::ListPagesByContactError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_pages_by_contact::ListPagesByContactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_pages_by_contact::ListPagesByContactError> for Error {
    fn from(err: crate::operation::list_pages_by_contact::ListPagesByContactError) -> Self {
        match err {
            crate::operation::list_pages_by_contact::ListPagesByContactError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_pages_by_contact::ListPagesByContactError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_pages_by_contact::ListPagesByContactError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_pages_by_contact::ListPagesByContactError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_pages_by_contact::ListPagesByContactError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_pages_by_contact::ListPagesByContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_pages_by_engagement::ListPagesByEngagementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_pages_by_engagement::ListPagesByEngagementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_pages_by_engagement::ListPagesByEngagementError> for Error {
    fn from(err: crate::operation::list_pages_by_engagement::ListPagesByEngagementError) -> Self {
        match err {
            crate::operation::list_pages_by_engagement::ListPagesByEngagementError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_pages_by_engagement::ListPagesByEngagementError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_pages_by_engagement::ListPagesByEngagementError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_pages_by_engagement::ListPagesByEngagementError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_pages_by_engagement::ListPagesByEngagementError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_pages_by_engagement::ListPagesByEngagementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_contact_policy::PutContactPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_contact_policy::PutContactPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_contact_policy::PutContactPolicyError> for Error {
    fn from(err: crate::operation::put_contact_policy::PutContactPolicyError) -> Self {
        match err {
            crate::operation::put_contact_policy::PutContactPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_contact_policy::PutContactPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_contact_policy::PutContactPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_contact_policy::PutContactPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_contact_policy::PutContactPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_contact_policy::PutContactPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_contact_policy::PutContactPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::send_activation_code::SendActivationCodeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_activation_code::SendActivationCodeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_activation_code::SendActivationCodeError> for Error {
    fn from(err: crate::operation::send_activation_code::SendActivationCodeError) -> Self {
        match err {
            crate::operation::send_activation_code::SendActivationCodeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::send_activation_code::SendActivationCodeError::DataEncryptionException(inner) => Error::DataEncryptionException(inner),
            crate::operation::send_activation_code::SendActivationCodeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::send_activation_code::SendActivationCodeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::send_activation_code::SendActivationCodeError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::send_activation_code::SendActivationCodeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::send_activation_code::SendActivationCodeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::send_activation_code::SendActivationCodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_engagement::StartEngagementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_engagement::StartEngagementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_engagement::StartEngagementError> for Error {
    fn from(err: crate::operation::start_engagement::StartEngagementError) -> Self {
        match err {
            crate::operation::start_engagement::StartEngagementError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::start_engagement::StartEngagementError::DataEncryptionException(
                inner,
            ) => Error::DataEncryptionException(inner),
            crate::operation::start_engagement::StartEngagementError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::start_engagement::StartEngagementError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::start_engagement::StartEngagementError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::start_engagement::StartEngagementError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::start_engagement::StartEngagementError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_engagement::StopEngagementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_engagement::StopEngagementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_engagement::StopEngagementError> for Error {
    fn from(err: crate::operation::stop_engagement::StopEngagementError) -> Self {
        match err {
            crate::operation::stop_engagement::StopEngagementError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::stop_engagement::StopEngagementError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::stop_engagement::StopEngagementError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_engagement::StopEngagementError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::stop_engagement::StopEngagementError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::stop_engagement::StopEngagementError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_contact::UpdateContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_contact::UpdateContactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_contact::UpdateContactError> for Error {
    fn from(err: crate::operation::update_contact::UpdateContactError) -> Self {
        match err {
            crate::operation::update_contact::UpdateContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_contact::UpdateContactError::DataEncryptionException(
                inner,
            ) => Error::DataEncryptionException(inner),
            crate::operation::update_contact::UpdateContactError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_contact::UpdateContactError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_contact::UpdateContactError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_contact::UpdateContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_contact::UpdateContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_contact::UpdateContactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_contact_channel::UpdateContactChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_contact_channel::UpdateContactChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_contact_channel::UpdateContactChannelError> for Error {
    fn from(err: crate::operation::update_contact_channel::UpdateContactChannelError) -> Self {
        match err {
            crate::operation::update_contact_channel::UpdateContactChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_contact_channel::UpdateContactChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_contact_channel::UpdateContactChannelError::DataEncryptionException(inner) => Error::DataEncryptionException(inner),
            crate::operation::update_contact_channel::UpdateContactChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_contact_channel::UpdateContactChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_contact_channel::UpdateContactChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_contact_channel::UpdateContactChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_contact_channel::UpdateContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DataEncryptionException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
