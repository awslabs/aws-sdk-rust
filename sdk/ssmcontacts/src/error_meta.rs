// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient access to perform this operation.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Updating or deleting a resource causes an inconsistent state.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The operation failed to due an encryption key error.</p>
    DataEncryptionException(crate::error::DataEncryptionException),
    /// <p>Unexpected error occurred while processing the request.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>Request references a resource that doesn't exist.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>Request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DataEncryptionException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptPageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AcceptPageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptPageError> for Error {
    fn from(err: crate::error::AcceptPageError) -> Self {
        match err {
            crate::error::AcceptPageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AcceptPageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AcceptPageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AcceptPageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AcceptPageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AcceptPageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ActivateContactChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ActivateContactChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ActivateContactChannelError> for Error {
    fn from(err: crate::error::ActivateContactChannelError) -> Self {
        match err {
            crate::error::ActivateContactChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ActivateContactChannelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ActivateContactChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ActivateContactChannelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ActivateContactChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ActivateContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateContactError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContactError> for Error {
    fn from(err: crate::error::CreateContactError) -> Self {
        match err {
            crate::error::CreateContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateContactError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateContactError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::CreateContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateContactError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateContactChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateContactChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContactChannelError> for Error {
    fn from(err: crate::error::CreateContactChannelError) -> Self {
        match err {
            crate::error::CreateContactChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateContactChannelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateContactChannelError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::CreateContactChannelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateContactChannelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateContactChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeactivateContactChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeactivateContactChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeactivateContactChannelError> for Error {
    fn from(err: crate::error::DeactivateContactChannelError) -> Self {
        match err {
            crate::error::DeactivateContactChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeactivateContactChannelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeactivateContactChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeactivateContactChannelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeactivateContactChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeactivateContactChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteContactError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContactError> for Error {
    fn from(err: crate::error::DeleteContactError) -> Self {
        match err {
            crate::error::DeleteContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContactChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteContactChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContactChannelError> for Error {
    fn from(err: crate::error::DeleteContactChannelError) -> Self {
        match err {
            crate::error::DeleteContactChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteContactChannelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteContactChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteContactChannelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteContactChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEngagementError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEngagementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEngagementError> for Error {
    fn from(err: crate::error::DescribeEngagementError) -> Self {
        match err {
            crate::error::DescribeEngagementError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeEngagementError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::DescribeEngagementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeEngagementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeEngagementError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeEngagementError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeEngagementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribePageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePageError> for Error {
    fn from(err: crate::error::DescribePageError) -> Self {
        match err {
            crate::error::DescribePageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePageError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::DescribePageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribePageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetContactError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContactError> for Error {
    fn from(err: crate::error::GetContactError) -> Self {
        match err {
            crate::error::GetContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContactError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::GetContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContactChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContactChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContactChannelError> for Error {
    fn from(err: crate::error::GetContactChannelError) -> Self {
        match err {
            crate::error::GetContactChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContactChannelError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::GetContactChannelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetContactChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetContactChannelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetContactChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContactPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContactPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContactPolicyError> for Error {
    fn from(err: crate::error::GetContactPolicyError) -> Self {
        match err {
            crate::error::GetContactPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContactPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetContactPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetContactPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetContactPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetContactPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListContactChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListContactChannelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListContactChannelsError> for Error {
    fn from(err: crate::error::ListContactChannelsError) -> Self {
        match err {
            crate::error::ListContactChannelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListContactChannelsError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::ListContactChannelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListContactChannelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListContactChannelsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListContactChannelsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListContactChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListContactsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListContactsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListContactsError> for Error {
    fn from(err: crate::error::ListContactsError) -> Self {
        match err {
            crate::error::ListContactsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListContactsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListContactsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListContactsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListContactsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEngagementsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListEngagementsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEngagementsError> for Error {
    fn from(err: crate::error::ListEngagementsError) -> Self {
        match err {
            crate::error::ListEngagementsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListEngagementsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEngagementsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListEngagementsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEngagementsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPageReceiptsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPageReceiptsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPageReceiptsError> for Error {
    fn from(err: crate::error::ListPageReceiptsError) -> Self {
        match err {
            crate::error::ListPageReceiptsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPageReceiptsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPageReceiptsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPageReceiptsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPageReceiptsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPageReceiptsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPagesByContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPagesByContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPagesByContactError> for Error {
    fn from(err: crate::error::ListPagesByContactError) -> Self {
        match err {
            crate::error::ListPagesByContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPagesByContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPagesByContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPagesByContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPagesByContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPagesByContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPagesByEngagementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPagesByEngagementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPagesByEngagementError> for Error {
    fn from(err: crate::error::ListPagesByEngagementError) -> Self {
        match err {
            crate::error::ListPagesByEngagementError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPagesByEngagementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPagesByEngagementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPagesByEngagementError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPagesByEngagementError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPagesByEngagementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutContactPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutContactPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutContactPolicyError> for Error {
    fn from(err: crate::error::PutContactPolicyError) -> Self {
        match err {
            crate::error::PutContactPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutContactPolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutContactPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutContactPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutContactPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutContactPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutContactPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendActivationCodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SendActivationCodeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendActivationCodeError> for Error {
    fn from(err: crate::error::SendActivationCodeError) -> Self {
        match err {
            crate::error::SendActivationCodeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SendActivationCodeError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::SendActivationCodeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SendActivationCodeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SendActivationCodeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::SendActivationCodeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SendActivationCodeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SendActivationCodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartEngagementError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartEngagementError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartEngagementError> for Error {
    fn from(err: crate::error::StartEngagementError) -> Self {
        match err {
            crate::error::StartEngagementError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartEngagementError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::StartEngagementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartEngagementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartEngagementError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartEngagementError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartEngagementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopEngagementError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopEngagementError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopEngagementError> for Error {
    fn from(err: crate::error::StopEngagementError) -> Self {
        match err {
            crate::error::StopEngagementError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StopEngagementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopEngagementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopEngagementError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StopEngagementError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StopEngagementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateContactError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactError> for Error {
    fn from(err: crate::error::UpdateContactError) -> Self {
        match err {
            crate::error::UpdateContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateContactError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::UpdateContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateContactError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateContactError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateContactChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateContactChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateContactChannelError> for Error {
    fn from(err: crate::error::UpdateContactChannelError) -> Self {
        match err {
            crate::error::UpdateContactChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateContactChannelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateContactChannelError::DataEncryptionException(inner) => {
                Error::DataEncryptionException(inner)
            }
            crate::error::UpdateContactChannelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateContactChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateContactChannelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateContactChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateContactChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DataEncryptionException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
