// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_contact_channels_output_next_token(
    input: &crate::output::ListContactChannelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_contacts_output_next_token(
    input: &crate::output::ListContactsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_engagements_output_next_token(
    input: &crate::output::ListEngagementsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_page_receipts_output_next_token(
    input: &crate::output::ListPageReceiptsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_pages_by_contact_output_next_token(
    input: &crate::output::ListPagesByContactOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_pages_by_engagement_output_next_token(
    input: &crate::output::ListPagesByEngagementOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_contact_channels_output_contact_channels(
    input: crate::output::ListContactChannelsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ContactChannel>> {
    let input = match input.contact_channels {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_contacts_output_contacts(
    input: crate::output::ListContactsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Contact>> {
    let input = match input.contacts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_engagements_output_engagements(
    input: crate::output::ListEngagementsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Engagement>> {
    let input = match input.engagements {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_page_receipts_output_receipts(
    input: crate::output::ListPageReceiptsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Receipt>> {
    let input = match input.receipts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_pages_by_contact_output_pages(
    input: crate::output::ListPagesByContactOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Page>> {
    let input = match input.pages {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_pages_by_engagement_output_pages(
    input: crate::output::ListPagesByEngagementOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Page>> {
    let input = match input.pages {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
