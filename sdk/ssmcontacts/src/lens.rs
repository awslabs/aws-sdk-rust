// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_contact_channels_output_next_token(
    input: &crate::operation::list_contact_channels::ListContactChannelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_contacts_output_next_token(
    input: &crate::operation::list_contacts::ListContactsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_engagements_output_next_token(
    input: &crate::operation::list_engagements::ListEngagementsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_page_receipts_output_next_token(
    input: &crate::operation::list_page_receipts::ListPageReceiptsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_page_resolutions_output_next_token(
    input: &crate::operation::list_page_resolutions::ListPageResolutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_pages_by_contact_output_next_token(
    input: &crate::operation::list_pages_by_contact::ListPagesByContactOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_pages_by_engagement_output_next_token(
    input: &crate::operation::list_pages_by_engagement::ListPagesByEngagementOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_preview_rotation_shifts_output_next_token(
    input: &crate::operation::list_preview_rotation_shifts::ListPreviewRotationShiftsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_rotation_overrides_output_next_token(
    input: &crate::operation::list_rotation_overrides::ListRotationOverridesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_rotation_shifts_output_next_token(
    input: &crate::operation::list_rotation_shifts::ListRotationShiftsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_rotations_output_next_token(
    input: &crate::operation::list_rotations::ListRotationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_contact_channels_output_contact_channels(
    input: crate::operation::list_contact_channels::ListContactChannelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ContactChannel>> {
    let input = input.contact_channels;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_contacts_output_contacts(
    input: crate::operation::list_contacts::ListContactsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Contact>> {
    let input = match input.contacts {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_engagements_output_engagements(
    input: crate::operation::list_engagements::ListEngagementsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Engagement>> {
    let input = input.engagements;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_page_receipts_output_receipts(
    input: crate::operation::list_page_receipts::ListPageReceiptsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Receipt>> {
    let input = match input.receipts {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_page_resolutions_output_page_resolutions(
    input: crate::operation::list_page_resolutions::ListPageResolutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ResolutionContact>> {
    let input = input.page_resolutions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_pages_by_contact_output_pages(
    input: crate::operation::list_pages_by_contact::ListPagesByContactOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Page>> {
    let input = input.pages;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_pages_by_engagement_output_pages(
    input: crate::operation::list_pages_by_engagement::ListPagesByEngagementOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Page>> {
    let input = input.pages;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_preview_rotation_shifts_output_rotation_shifts(
    input: crate::operation::list_preview_rotation_shifts::ListPreviewRotationShiftsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RotationShift>> {
    let input = match input.rotation_shifts {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_rotation_overrides_output_rotation_overrides(
    input: crate::operation::list_rotation_overrides::ListRotationOverridesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RotationOverride>> {
    let input = match input.rotation_overrides {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_rotation_shifts_output_rotation_shifts(
    input: crate::operation::list_rotation_shifts::ListRotationShiftsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RotationShift>> {
    let input = match input.rotation_shifts {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_rotations_output_rotations(
    input: crate::operation::list_rotations::ListRotationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Rotation>> {
    let input = input.rotations;
    ::std::option::Option::Some(input)
}
