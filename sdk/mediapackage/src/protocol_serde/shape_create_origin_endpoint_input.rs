// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_origin_endpoint_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_origin_endpoint::CreateOriginEndpointInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.authorization {
        #[allow(unused_mut)]
        let mut object_2 = object.key("authorization").start_object();
        crate::protocol_serde::shape_authorization::ser_authorization(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.channel_id {
        object.key("channelId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.cmaf_package {
        #[allow(unused_mut)]
        let mut object_5 = object.key("cmafPackage").start_object();
        crate::protocol_serde::shape_cmaf_package_create_or_update_parameters::ser_cmaf_package_create_or_update_parameters(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.dash_package {
        #[allow(unused_mut)]
        let mut object_7 = object.key("dashPackage").start_object();
        crate::protocol_serde::shape_dash_package::ser_dash_package(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.hls_package {
        #[allow(unused_mut)]
        let mut object_10 = object.key("hlsPackage").start_object();
        crate::protocol_serde::shape_hls_package::ser_hls_package(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.id {
        object.key("id").string(var_11.as_str());
    }
    if let Some(var_12) = &input.manifest_name {
        object.key("manifestName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.mss_package {
        #[allow(unused_mut)]
        let mut object_14 = object.key("mssPackage").start_object();
        crate::protocol_serde::shape_mss_package::ser_mss_package(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.origination {
        object.key("origination").string(var_15.as_str());
    }
    if input.startover_window_seconds != 0 {
        object.key("startoverWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.startover_window_seconds).into()),
        );
    }
    if let Some(var_16) = &input.tags {
        #[allow(unused_mut)]
        let mut object_17 = object.key("tags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if input.time_delay_seconds != 0 {
        object.key("timeDelaySeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.time_delay_seconds).into()),
        );
    }
    if let Some(var_20) = &input.whitelist {
        let mut array_21 = object.key("whitelist").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    Ok(())
}
