// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_dash_package<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::DashPackage>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DashPackageBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "adTriggers" => {
                                builder = builder.set_ad_triggers(
                                    crate::protocol_serde::shape_ad_triggers::de_ad_triggers(
                                        tokens,
                                    )?,
                                );
                            }
                            "adsOnDeliveryRestrictions" => {
                                builder = builder.set_ads_on_delivery_restrictions(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AdsOnDeliveryRestrictions::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "encryption" => {
                                builder = builder.set_encryption(
                                    crate::protocol_serde::shape_dash_encryption::de_dash_encryption(tokens)?
                                );
                            }
                            "includeIframeOnlyStream" => {
                                builder = builder.set_include_iframe_only_stream(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "manifestLayout" => {
                                builder = builder.set_manifest_layout(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::ManifestLayout::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "manifestWindowSeconds" => {
                                builder = builder.set_manifest_window_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "minBufferTimeSeconds" => {
                                builder = builder.set_min_buffer_time_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "minUpdatePeriodSeconds" => {
                                builder = builder.set_min_update_period_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "periodTriggers" => {
                                builder = builder.set_period_triggers(
                                    crate::protocol_serde::shape___list_of__period_triggers_element::de___list_of__period_triggers_element(tokens)?
                                );
                            }
                            "profile" => {
                                builder = builder.set_profile(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::Profile::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "segmentDurationSeconds" => {
                                builder = builder.set_segment_duration_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "segmentTemplateFormat" => {
                                builder = builder.set_segment_template_format(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::SegmentTemplateFormat::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "streamSelection" => {
                                builder = builder.set_stream_selection(
                                    crate::protocol_serde::shape_stream_selection::de_stream_selection(tokens)?
                                );
                            }
                            "suggestedPresentationDelaySeconds" => {
                                builder = builder.set_suggested_presentation_delay_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "utcTiming" => {
                                builder = builder.set_utc_timing(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::UtcTiming::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "utcTimingUri" => {
                                builder = builder.set_utc_timing_uri(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_dash_package(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DashPackage,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.ad_triggers {
        let mut array_2 = object.key("adTriggers").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.ads_on_delivery_restrictions {
        object
            .key("adsOnDeliveryRestrictions")
            .string(var_4.as_str());
    }
    if let Some(var_5) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_6 = object.key("encryption").start_object();
        crate::protocol_serde::shape_dash_encryption::ser_dash_encryption(&mut object_6, var_5)?;
        object_6.finish();
    }
    if input.include_iframe_only_stream {
        object
            .key("includeIframeOnlyStream")
            .boolean(input.include_iframe_only_stream);
    }
    if let Some(var_7) = &input.manifest_layout {
        object.key("manifestLayout").string(var_7.as_str());
    }
    if input.manifest_window_seconds != 0 {
        object.key("manifestWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.manifest_window_seconds).into()),
        );
    }
    if input.min_buffer_time_seconds != 0 {
        object.key("minBufferTimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.min_buffer_time_seconds).into()),
        );
    }
    if input.min_update_period_seconds != 0 {
        object.key("minUpdatePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.min_update_period_seconds).into()),
        );
    }
    if let Some(var_8) = &input.period_triggers {
        let mut array_9 = object.key("periodTriggers").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.profile {
        object.key("profile").string(var_11.as_str());
    }
    if input.segment_duration_seconds != 0 {
        object.key("segmentDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.segment_duration_seconds).into()),
        );
    }
    if let Some(var_12) = &input.segment_template_format {
        object.key("segmentTemplateFormat").string(var_12.as_str());
    }
    if let Some(var_13) = &input.stream_selection {
        #[allow(unused_mut)]
        let mut object_14 = object.key("streamSelection").start_object();
        crate::protocol_serde::shape_stream_selection::ser_stream_selection(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if input.suggested_presentation_delay_seconds != 0 {
        object.key("suggestedPresentationDelaySeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.suggested_presentation_delay_seconds).into()),
        );
    }
    if let Some(var_15) = &input.utc_timing {
        object.key("utcTiming").string(var_15.as_str());
    }
    if let Some(var_16) = &input.utc_timing_uri {
        object.key("utcTimingUri").string(var_16.as_str());
    }
    Ok(())
}
