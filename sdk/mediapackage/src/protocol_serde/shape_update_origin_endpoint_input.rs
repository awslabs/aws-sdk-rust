// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_origin_endpoint_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_origin_endpoint::UpdateOriginEndpointInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.authorization {
        #[allow(unused_mut)]
        let mut object_2 = object.key("authorization").start_object();
        crate::protocol_serde::shape_authorization::ser_authorization(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.cmaf_package {
        #[allow(unused_mut)]
        let mut object_4 = object.key("cmafPackage").start_object();
        crate::protocol_serde::shape_cmaf_package_create_or_update_parameters::ser_cmaf_package_create_or_update_parameters(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.dash_package {
        #[allow(unused_mut)]
        let mut object_6 = object.key("dashPackage").start_object();
        crate::protocol_serde::shape_dash_package::ser_dash_package(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.description {
        object.key("description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.hls_package {
        #[allow(unused_mut)]
        let mut object_9 = object.key("hlsPackage").start_object();
        crate::protocol_serde::shape_hls_package::ser_hls_package(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.manifest_name {
        object.key("manifestName").string(var_10.as_str());
    }
    if let Some(var_11) = &input.mss_package {
        #[allow(unused_mut)]
        let mut object_12 = object.key("mssPackage").start_object();
        crate::protocol_serde::shape_mss_package::ser_mss_package(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.origination {
        object.key("origination").string(var_13.as_str());
    }
    if let Some(var_14) = &input.startover_window_seconds {
        object.key("startoverWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.time_delay_seconds {
        object.key("timeDelaySeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.whitelist {
        let mut array_17 = object.key("whitelist").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    Ok(())
}
