// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_cmaf_package_create_or_update_parameters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CmafPackageCreateOrUpdateParameters,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_2 = object.key("encryption").start_object();
        crate::protocol_serde::shape_cmaf_encryption::ser_cmaf_encryption(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.hls_manifests {
        let mut array_4 = object.key("hlsManifests").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_hls_manifest_create_or_update_parameters::ser_hls_manifest_create_or_update_parameters(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.segment_duration_seconds {
        object.key("segmentDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.segment_prefix {
        object.key("segmentPrefix").string(var_8.as_str());
    }
    if let Some(var_9) = &input.stream_selection {
        #[allow(unused_mut)]
        let mut object_10 = object.key("streamSelection").start_object();
        crate::protocol_serde::shape_stream_selection::ser_stream_selection(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
