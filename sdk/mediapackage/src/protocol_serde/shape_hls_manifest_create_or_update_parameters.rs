// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_hls_manifest_create_or_update_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::HlsManifestCreateOrUpdateParameters,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.ad_markers {
        object.key("adMarkers").string(var_1.as_str());
    }
    if let Some(var_2) = &input.ad_triggers {
        let mut array_3 = object.key("adTriggers").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.ads_on_delivery_restrictions {
        object
            .key("adsOnDeliveryRestrictions")
            .string(var_5.as_str());
    }
    if let Some(var_6) = &input.id {
        object.key("id").string(var_6.as_str());
    }
    if input.include_iframe_only_stream {
        object
            .key("includeIframeOnlyStream")
            .boolean(input.include_iframe_only_stream);
    }
    if let Some(var_7) = &input.manifest_name {
        object.key("manifestName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.playlist_type {
        object.key("playlistType").string(var_8.as_str());
    }
    if input.playlist_window_seconds != 0 {
        object.key("playlistWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.playlist_window_seconds).into()),
        );
    }
    if input.program_date_time_interval_seconds != 0 {
        object.key("programDateTimeIntervalSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.program_date_time_interval_seconds).into()),
        );
    }
    Ok(())
}
