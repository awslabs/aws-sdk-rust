// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_configure_logs;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_create_channel;

pub(crate) mod shape_create_harvest_job;

pub(crate) mod shape_create_origin_endpoint;

pub(crate) mod shape_delete_channel;

pub(crate) mod shape_delete_origin_endpoint;

pub(crate) mod shape_describe_channel;

pub(crate) mod shape_describe_harvest_job;

pub(crate) mod shape_describe_origin_endpoint;

pub(crate) mod shape_list_channels;

pub(crate) mod shape_list_harvest_jobs;

pub(crate) mod shape_list_origin_endpoints;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_rotate_channel_credentials;

pub(crate) mod shape_rotate_ingest_endpoint_credentials;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_channel;

pub(crate) mod shape_update_origin_endpoint;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_configure_logs_input;

pub(crate) mod shape_create_channel_input;

pub(crate) mod shape_create_harvest_job_input;

pub(crate) mod shape_create_origin_endpoint_input;

pub(crate) mod shape_forbidden_exception;

pub(crate) mod shape_internal_server_error_exception;

pub(crate) mod shape_not_found_exception;

pub(crate) mod shape_service_unavailable_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_too_many_requests_exception;

pub(crate) mod shape_unprocessable_entity_exception;

pub(crate) mod shape_update_channel_input;

pub(crate) mod shape_update_origin_endpoint_input;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of__string;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_channel;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_harvest_job;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_origin_endpoint;

#[allow(non_snake_case)]
pub(crate) mod shape___map_of__string;

pub(crate) mod shape_authorization;

pub(crate) mod shape_cmaf_package;

pub(crate) mod shape_cmaf_package_create_or_update_parameters;

pub(crate) mod shape_dash_package;

pub(crate) mod shape_egress_access_logs;

pub(crate) mod shape_hls_ingest;

pub(crate) mod shape_hls_package;

pub(crate) mod shape_ingress_access_logs;

pub(crate) mod shape_mss_package;

pub(crate) mod shape_s3_destination;

pub(crate) mod shape_tags;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of__period_triggers_element;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_hls_manifest;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_ingest_endpoint;

pub(crate) mod shape_ad_triggers;

pub(crate) mod shape_channel;

pub(crate) mod shape_cmaf_encryption;

pub(crate) mod shape_dash_encryption;

pub(crate) mod shape_harvest_job;

pub(crate) mod shape_hls_encryption;

pub(crate) mod shape_hls_manifest_create_or_update_parameters;

pub(crate) mod shape_mss_encryption;

pub(crate) mod shape_origin_endpoint;

pub(crate) mod shape_stream_selection;

pub(crate) mod shape_hls_manifest;

pub(crate) mod shape_ingest_endpoint;

pub(crate) mod shape_speke_key_provider;

pub(crate) mod shape_encryption_contract_configuration;
