// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_configure_logs_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ConfigureLogsOutput, crate::error::ConfigureLogsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ConfigureLogsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ConfigureLogsError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::ConfigureLogsError {
            meta: generic,
            kind: crate::error::ConfigureLogsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ConfigureLogsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ConfigureLogsError {
            meta: generic,
            kind: crate::error::ConfigureLogsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ConfigureLogsError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::ConfigureLogsError {
            meta: generic,
            kind: crate::error::ConfigureLogsErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ConfigureLogsError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::ConfigureLogsError {
            meta: generic,
            kind: crate::error::ConfigureLogsErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ConfigureLogsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ConfigureLogsError {
            meta: generic,
            kind: crate::error::ConfigureLogsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ConfigureLogsError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::ConfigureLogsError {
            meta: generic,
            kind: crate::error::ConfigureLogsErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ConfigureLogsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ConfigureLogsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_configure_logs_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ConfigureLogsOutput, crate::error::ConfigureLogsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::configure_logs_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::configure_logs_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::ConfigureLogsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateChannelOutput, crate::error::CreateChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::CreateChannelError {
            meta: generic,
            kind: crate::error::CreateChannelErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateChannelOutput, crate::error::CreateChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_channel_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::create_channel_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::CreateChannelError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_harvest_job_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHarvestJobOutput, crate::error::CreateHarvestJobError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateHarvestJobError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateHarvestJobError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::CreateHarvestJobError {
            meta: generic,
            kind: crate::error::CreateHarvestJobErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreateHarvestJobError {
            meta: generic,
            kind: crate::error::CreateHarvestJobErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::CreateHarvestJobError {
            meta: generic,
            kind: crate::error::CreateHarvestJobErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::CreateHarvestJobError {
            meta: generic,
            kind: crate::error::CreateHarvestJobErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CreateHarvestJobError {
            meta: generic,
            kind: crate::error::CreateHarvestJobErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::CreateHarvestJobError {
            meta: generic,
            kind: crate::error::CreateHarvestJobErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateHarvestJobError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_harvest_job_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHarvestJobOutput, crate::error::CreateHarvestJobError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_harvest_job_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::create_harvest_job_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::CreateHarvestJobError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_origin_endpoint_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateOriginEndpointOutput,
    crate::error::CreateOriginEndpointError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateOriginEndpointError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateOriginEndpointError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::CreateOriginEndpointError {
            meta: generic,
            kind: crate::error::CreateOriginEndpointErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::CreateOriginEndpointError {
            meta: generic,
            kind: crate::error::CreateOriginEndpointErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::CreateOriginEndpointError {
            meta: generic,
            kind: crate::error::CreateOriginEndpointErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::CreateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::CreateOriginEndpointError {
            meta: generic,
            kind: crate::error::CreateOriginEndpointErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::CreateOriginEndpointError {
            meta: generic,
            kind: crate::error::CreateOriginEndpointErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::CreateOriginEndpointError {
            meta: generic,
            kind: crate::error::CreateOriginEndpointErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateOriginEndpointError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_origin_endpoint_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateOriginEndpointOutput,
    crate::error::CreateOriginEndpointError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_origin_endpoint_output::Builder::default();
        let _ = response;
        output = crate::json_deser::create_origin_endpoint_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateOriginEndpointError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteChannelOutput, crate::error::DeleteChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::DeleteChannelError {
            meta: generic,
            kind: crate::error::DeleteChannelErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteChannelOutput, crate::error::DeleteChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_channel_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_origin_endpoint_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteOriginEndpointOutput,
    crate::error::DeleteOriginEndpointError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteOriginEndpointError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteOriginEndpointError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::DeleteOriginEndpointError {
            meta: generic,
            kind: crate::error::DeleteOriginEndpointErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DeleteOriginEndpointError {
            meta: generic,
            kind: crate::error::DeleteOriginEndpointErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DeleteOriginEndpointError {
            meta: generic,
            kind: crate::error::DeleteOriginEndpointErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::DeleteOriginEndpointError {
            meta: generic,
            kind: crate::error::DeleteOriginEndpointErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DeleteOriginEndpointError {
            meta: generic,
            kind: crate::error::DeleteOriginEndpointErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::DeleteOriginEndpointError {
            meta: generic,
            kind: crate::error::DeleteOriginEndpointErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteOriginEndpointError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_origin_endpoint_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DeleteOriginEndpointOutput,
    crate::error::DeleteOriginEndpointError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_origin_endpoint_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeChannelOutput, crate::error::DescribeChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::DescribeChannelError {
            meta: generic,
            kind: crate::error::DescribeChannelErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeChannelOutput, crate::error::DescribeChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_channel_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::describe_channel_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DescribeChannelError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_harvest_job_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeHarvestJobOutput,
    crate::error::DescribeHarvestJobError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeHarvestJobError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeHarvestJobError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::DescribeHarvestJobError {
            meta: generic,
            kind: crate::error::DescribeHarvestJobErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeHarvestJobError {
            meta: generic,
            kind: crate::error::DescribeHarvestJobErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeHarvestJobError {
            meta: generic,
            kind: crate::error::DescribeHarvestJobErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::DescribeHarvestJobError {
            meta: generic,
            kind: crate::error::DescribeHarvestJobErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeHarvestJobError {
            meta: generic,
            kind: crate::error::DescribeHarvestJobErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::DescribeHarvestJobError {
            meta: generic,
            kind: crate::error::DescribeHarvestJobErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeHarvestJobError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeHarvestJobError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_harvest_job_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeHarvestJobOutput,
    crate::error::DescribeHarvestJobError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_harvest_job_output::Builder::default();
        let _ = response;
        output = crate::json_deser::describe_harvest_job_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeHarvestJobError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_origin_endpoint_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeOriginEndpointOutput,
    crate::error::DescribeOriginEndpointError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeOriginEndpointError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeOriginEndpointError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::DescribeOriginEndpointError {
            meta: generic,
            kind: crate::error::DescribeOriginEndpointErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::DescribeOriginEndpointError {
            meta: generic,
            kind: crate::error::DescribeOriginEndpointErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::DescribeOriginEndpointError {
            meta: generic,
            kind: crate::error::DescribeOriginEndpointErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::DescribeOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::DescribeOriginEndpointError {
            meta: generic,
            kind: crate::error::DescribeOriginEndpointErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::DescribeOriginEndpointError {
            meta: generic,
            kind: crate::error::DescribeOriginEndpointErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::DescribeOriginEndpointError {
            meta: generic,
            kind: crate::error::DescribeOriginEndpointErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeOriginEndpointError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_origin_endpoint_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeOriginEndpointOutput,
    crate::error::DescribeOriginEndpointError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_origin_endpoint_output::Builder::default();
        let _ = response;
        output = crate::json_deser::describe_origin_endpoint_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeOriginEndpointError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_channels_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListChannelsOutput, crate::error::ListChannelsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListChannelsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListChannelsError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::ListChannelsError {
            meta: generic,
            kind: crate::error::ListChannelsErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListChannelsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListChannelsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_channels_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListChannelsOutput, crate::error::ListChannelsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_channels_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_channels_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::ListChannelsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_harvest_jobs_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHarvestJobsOutput, crate::error::ListHarvestJobsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListHarvestJobsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListHarvestJobsError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::ListHarvestJobsError {
            meta: generic,
            kind: crate::error::ListHarvestJobsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListHarvestJobsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListHarvestJobsError {
            meta: generic,
            kind: crate::error::ListHarvestJobsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListHarvestJobsError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::ListHarvestJobsError {
            meta: generic,
            kind: crate::error::ListHarvestJobsErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListHarvestJobsError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::ListHarvestJobsError {
            meta: generic,
            kind: crate::error::ListHarvestJobsErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListHarvestJobsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListHarvestJobsError {
            meta: generic,
            kind: crate::error::ListHarvestJobsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListHarvestJobsError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::ListHarvestJobsError {
            meta: generic,
            kind: crate::error::ListHarvestJobsErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListHarvestJobsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListHarvestJobsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_harvest_jobs_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHarvestJobsOutput, crate::error::ListHarvestJobsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_harvest_jobs_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::list_harvest_jobs_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::ListHarvestJobsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_origin_endpoints_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListOriginEndpointsOutput,
    crate::error::ListOriginEndpointsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListOriginEndpointsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListOriginEndpointsError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::ListOriginEndpointsError {
            meta: generic,
            kind: crate::error::ListOriginEndpointsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListOriginEndpointsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::ListOriginEndpointsError {
            meta: generic,
            kind: crate::error::ListOriginEndpointsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListOriginEndpointsError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::ListOriginEndpointsError {
            meta: generic,
            kind: crate::error::ListOriginEndpointsErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::ListOriginEndpointsError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::ListOriginEndpointsError {
            meta: generic,
            kind: crate::error::ListOriginEndpointsErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListOriginEndpointsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::ListOriginEndpointsError {
            meta: generic,
            kind: crate::error::ListOriginEndpointsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListOriginEndpointsError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::ListOriginEndpointsError {
            meta: generic,
            kind: crate::error::ListOriginEndpointsErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListOriginEndpointsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListOriginEndpointsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_origin_endpoints_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListOriginEndpointsOutput,
    crate::error::ListOriginEndpointsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_origin_endpoints_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_origin_endpoints_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListOriginEndpointsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    Err(crate::error::ListTagsForResourceError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_tags_for_resource_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_rotate_channel_credentials_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RotateChannelCredentialsOutput,
    crate::error::RotateChannelCredentialsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RotateChannelCredentialsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RotateChannelCredentialsError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::RotateChannelCredentialsError {
            meta: generic,
            kind: crate::error::RotateChannelCredentialsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RotateChannelCredentialsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::RotateChannelCredentialsError {
            meta: generic,
            kind: crate::error::RotateChannelCredentialsErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RotateChannelCredentialsError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::RotateChannelCredentialsError {
            meta: generic,
            kind: crate::error::RotateChannelCredentialsErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RotateChannelCredentialsError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::RotateChannelCredentialsError {
            meta: generic,
            kind: crate::error::RotateChannelCredentialsErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RotateChannelCredentialsError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::RotateChannelCredentialsError {
            meta: generic,
            kind: crate::error::RotateChannelCredentialsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RotateChannelCredentialsError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::RotateChannelCredentialsError {
            meta: generic,
            kind: crate::error::RotateChannelCredentialsErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RotateChannelCredentialsError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::RotateChannelCredentialsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_rotate_channel_credentials_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RotateChannelCredentialsOutput,
    crate::error::RotateChannelCredentialsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::rotate_channel_credentials_output::Builder::default();
        let _ = response;
        output = crate::json_deser::rotate_channel_credentials_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RotateChannelCredentialsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_rotate_ingest_endpoint_credentials_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RotateIngestEndpointCredentialsOutput,
    crate::error::RotateIngestEndpointCredentialsError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::RotateIngestEndpointCredentialsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::RotateIngestEndpointCredentialsError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::RotateIngestEndpointCredentialsError {
            meta: generic,
            kind: crate::error::RotateIngestEndpointCredentialsErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RotateIngestEndpointCredentialsError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::RotateIngestEndpointCredentialsError {
            meta: generic,
            kind: crate::error::RotateIngestEndpointCredentialsErrorKind::InternalServerErrorError(
                {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::internal_server_error_exception(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RotateIngestEndpointCredentialsError::unhandled)?;
                    output.build()
                },
            ),
        },
        "NotFoundException" => crate::error::RotateIngestEndpointCredentialsError {
            meta: generic,
            kind: crate::error::RotateIngestEndpointCredentialsErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::RotateIngestEndpointCredentialsError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::RotateIngestEndpointCredentialsError {
            meta: generic,
            kind: crate::error::RotateIngestEndpointCredentialsErrorKind::ServiceUnavailableError(
                {
                    #[allow(unused_mut)]
                    let mut output = crate::error::service_unavailable_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::service_unavailable_exception(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RotateIngestEndpointCredentialsError::unhandled)?;
                    output.build()
                },
            ),
        },
        "TooManyRequestsException" => crate::error::RotateIngestEndpointCredentialsError {
            meta: generic,
            kind: crate::error::RotateIngestEndpointCredentialsErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::RotateIngestEndpointCredentialsError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::RotateIngestEndpointCredentialsError {
            meta: generic,
            kind: crate::error::RotateIngestEndpointCredentialsErrorKind::UnprocessableEntityError(
                {
                    #[allow(unused_mut)]
                    let mut output = crate::error::unprocessable_entity_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::unprocessable_entity_exception(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RotateIngestEndpointCredentialsError::unhandled)?;
                    output.build()
                },
            ),
        },
        _ => crate::error::RotateIngestEndpointCredentialsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_rotate_ingest_endpoint_credentials_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RotateIngestEndpointCredentialsOutput,
    crate::error::RotateIngestEndpointCredentialsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::rotate_ingest_endpoint_credentials_output::Builder::default();
        let _ = response;
        output = crate::json_deser::rotate_ingest_endpoint_credentials_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RotateIngestEndpointCredentialsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::TagResourceError::unhandled)?;
    Err(crate::error::TagResourceError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::tag_resource_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UntagResourceError::unhandled)?;
    Err(crate::error::UntagResourceError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::untag_resource_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_channel_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateChannelOutput, crate::error::UpdateChannelError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateChannelError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateChannelError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::UpdateChannelError {
            meta: generic,
            kind: crate::error::UpdateChannelErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateChannelError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateChannelError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_channel_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::UpdateChannelOutput, crate::error::UpdateChannelError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_channel_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::update_channel_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::UpdateChannelError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_origin_endpoint_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateOriginEndpointOutput,
    crate::error::UpdateOriginEndpointError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateOriginEndpointError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateOriginEndpointError::unhandled(generic)),
    };
    Err(match error_code {
        "ForbiddenException" => crate::error::UpdateOriginEndpointError {
            meta: generic,
            kind: crate::error::UpdateOriginEndpointErrorKind::ForbiddenError({
                #[allow(unused_mut)]
                let mut output = crate::error::forbidden_error::Builder::default();
                let _ = response;
                output = crate::json_deser::forbidden_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "InternalServerErrorException" => crate::error::UpdateOriginEndpointError {
            meta: generic,
            kind: crate::error::UpdateOriginEndpointErrorKind::InternalServerErrorError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_server_error_error::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_server_error_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "NotFoundException" => crate::error::UpdateOriginEndpointError {
            meta: generic,
            kind: crate::error::UpdateOriginEndpointErrorKind::NotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::not_found_exception(response.body().as_ref(), output)
                    .map_err(crate::error::UpdateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailableException" => crate::error::UpdateOriginEndpointError {
            meta: generic,
            kind: crate::error::UpdateOriginEndpointErrorKind::ServiceUnavailableError({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable_error::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "TooManyRequestsException" => crate::error::UpdateOriginEndpointError {
            meta: generic,
            kind: crate::error::UpdateOriginEndpointErrorKind::TooManyRequestsError({
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_requests_error::Builder::default();
                let _ = response;
                output = crate::json_deser::too_many_requests_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        "UnprocessableEntityException" => crate::error::UpdateOriginEndpointError {
            meta: generic,
            kind: crate::error::UpdateOriginEndpointErrorKind::UnprocessableEntityError({
                #[allow(unused_mut)]
                let mut output = crate::error::unprocessable_entity_error::Builder::default();
                let _ = response;
                output = crate::json_deser::unprocessable_entity_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateOriginEndpointError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateOriginEndpointError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_origin_endpoint_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::UpdateOriginEndpointOutput,
    crate::error::UpdateOriginEndpointError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_origin_endpoint_output::Builder::default();
        let _ = response;
        output = crate::json_deser::update_origin_endpoint_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateOriginEndpointError::unhandled)?;
        output.build()
    })
}
