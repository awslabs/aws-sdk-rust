// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A Channel resource configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Channel {
    /// The Amazon Resource Name (ARN) assigned to the Channel.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// A short text description of the Channel.
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// Configure egress access logging.
    #[doc(hidden)]
    pub egress_access_logs: std::option::Option<crate::types::EgressAccessLogs>,
    /// An HTTP Live Streaming (HLS) ingest resource configuration.
    #[doc(hidden)]
    pub hls_ingest: std::option::Option<crate::types::HlsIngest>,
    /// The ID of the Channel.
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// Configure ingress access logging.
    #[doc(hidden)]
    pub ingress_access_logs: std::option::Option<crate::types::IngressAccessLogs>,
    /// A collection of tags associated with a resource
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl Channel {
    /// The Amazon Resource Name (ARN) assigned to the Channel.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// A short text description of the Channel.
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// Configure egress access logging.
    pub fn egress_access_logs(&self) -> std::option::Option<&crate::types::EgressAccessLogs> {
        self.egress_access_logs.as_ref()
    }
    /// An HTTP Live Streaming (HLS) ingest resource configuration.
    pub fn hls_ingest(&self) -> std::option::Option<&crate::types::HlsIngest> {
        self.hls_ingest.as_ref()
    }
    /// The ID of the Channel.
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// Configure ingress access logging.
    pub fn ingress_access_logs(&self) -> std::option::Option<&crate::types::IngressAccessLogs> {
        self.ingress_access_logs.as_ref()
    }
    /// A collection of tags associated with a resource
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl Channel {
    /// Creates a new builder-style object to manufacture [`Channel`](crate::types::Channel).
    pub fn builder() -> crate::types::builders::ChannelBuilder {
        crate::types::builders::ChannelBuilder::default()
    }
}

/// A builder for [`Channel`](crate::types::Channel).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChannelBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) egress_access_logs: std::option::Option<crate::types::EgressAccessLogs>,
    pub(crate) hls_ingest: std::option::Option<crate::types::HlsIngest>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) ingress_access_logs: std::option::Option<crate::types::IngressAccessLogs>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ChannelBuilder {
    /// The Amazon Resource Name (ARN) assigned to the Channel.
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) assigned to the Channel.
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// A short text description of the Channel.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// A short text description of the Channel.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Configure egress access logging.
    pub fn egress_access_logs(mut self, input: crate::types::EgressAccessLogs) -> Self {
        self.egress_access_logs = Some(input);
        self
    }
    /// Configure egress access logging.
    pub fn set_egress_access_logs(
        mut self,
        input: std::option::Option<crate::types::EgressAccessLogs>,
    ) -> Self {
        self.egress_access_logs = input;
        self
    }
    /// An HTTP Live Streaming (HLS) ingest resource configuration.
    pub fn hls_ingest(mut self, input: crate::types::HlsIngest) -> Self {
        self.hls_ingest = Some(input);
        self
    }
    /// An HTTP Live Streaming (HLS) ingest resource configuration.
    pub fn set_hls_ingest(mut self, input: std::option::Option<crate::types::HlsIngest>) -> Self {
        self.hls_ingest = input;
        self
    }
    /// The ID of the Channel.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// The ID of the Channel.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Configure ingress access logging.
    pub fn ingress_access_logs(mut self, input: crate::types::IngressAccessLogs) -> Self {
        self.ingress_access_logs = Some(input);
        self
    }
    /// Configure ingress access logging.
    pub fn set_ingress_access_logs(
        mut self,
        input: std::option::Option<crate::types::IngressAccessLogs>,
    ) -> Self {
        self.ingress_access_logs = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A collection of tags associated with a resource
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// A collection of tags associated with a resource
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`Channel`](crate::types::Channel).
    pub fn build(self) -> crate::types::Channel {
        crate::types::Channel {
            arn: self.arn,
            description: self.description,
            egress_access_logs: self.egress_access_logs,
            hls_ingest: self.hls_ingest,
            id: self.id,
            ingress_access_logs: self.ingress_access_logs,
            tags: self.tags,
        }
    }
}
