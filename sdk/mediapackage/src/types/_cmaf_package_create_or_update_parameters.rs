// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A Common Media Application Format (CMAF) packaging configuration.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CmafPackageCreateOrUpdateParameters {
    /// A Common Media Application Format (CMAF) encryption configuration.
    pub encryption: ::std::option::Option<crate::types::CmafEncryption>,
    /// A list of HLS manifest configurations
    pub hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HlsManifestCreateOrUpdateParameters>>,
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub segment_duration_seconds: ::std::option::Option<i32>,
    /// An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
    pub segment_prefix: ::std::option::Option<::std::string::String>,
    /// A StreamSelection configuration.
    pub stream_selection: ::std::option::Option<crate::types::StreamSelection>,
}
impl CmafPackageCreateOrUpdateParameters {
    /// A Common Media Application Format (CMAF) encryption configuration.
    pub fn encryption(&self) -> ::std::option::Option<&crate::types::CmafEncryption> {
        self.encryption.as_ref()
    }
    /// A list of HLS manifest configurations
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hls_manifests.is_none()`.
    pub fn hls_manifests(&self) -> &[crate::types::HlsManifestCreateOrUpdateParameters] {
        self.hls_manifests.as_deref().unwrap_or_default()
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn segment_duration_seconds(&self) -> ::std::option::Option<i32> {
        self.segment_duration_seconds
    }
    /// An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
    pub fn segment_prefix(&self) -> ::std::option::Option<&str> {
        self.segment_prefix.as_deref()
    }
    /// A StreamSelection configuration.
    pub fn stream_selection(&self) -> ::std::option::Option<&crate::types::StreamSelection> {
        self.stream_selection.as_ref()
    }
}
impl CmafPackageCreateOrUpdateParameters {
    /// Creates a new builder-style object to manufacture [`CmafPackageCreateOrUpdateParameters`](crate::types::CmafPackageCreateOrUpdateParameters).
    pub fn builder() -> crate::types::builders::CmafPackageCreateOrUpdateParametersBuilder {
        crate::types::builders::CmafPackageCreateOrUpdateParametersBuilder::default()
    }
}

/// A builder for [`CmafPackageCreateOrUpdateParameters`](crate::types::CmafPackageCreateOrUpdateParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CmafPackageCreateOrUpdateParametersBuilder {
    pub(crate) encryption: ::std::option::Option<crate::types::CmafEncryption>,
    pub(crate) hls_manifests: ::std::option::Option<::std::vec::Vec<crate::types::HlsManifestCreateOrUpdateParameters>>,
    pub(crate) segment_duration_seconds: ::std::option::Option<i32>,
    pub(crate) segment_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) stream_selection: ::std::option::Option<crate::types::StreamSelection>,
}
impl CmafPackageCreateOrUpdateParametersBuilder {
    /// A Common Media Application Format (CMAF) encryption configuration.
    pub fn encryption(mut self, input: crate::types::CmafEncryption) -> Self {
        self.encryption = ::std::option::Option::Some(input);
        self
    }
    /// A Common Media Application Format (CMAF) encryption configuration.
    pub fn set_encryption(mut self, input: ::std::option::Option<crate::types::CmafEncryption>) -> Self {
        self.encryption = input;
        self
    }
    /// A Common Media Application Format (CMAF) encryption configuration.
    pub fn get_encryption(&self) -> &::std::option::Option<crate::types::CmafEncryption> {
        &self.encryption
    }
    /// Appends an item to `hls_manifests`.
    ///
    /// To override the contents of this collection use [`set_hls_manifests`](Self::set_hls_manifests).
    ///
    /// A list of HLS manifest configurations
    pub fn hls_manifests(mut self, input: crate::types::HlsManifestCreateOrUpdateParameters) -> Self {
        let mut v = self.hls_manifests.unwrap_or_default();
        v.push(input);
        self.hls_manifests = ::std::option::Option::Some(v);
        self
    }
    /// A list of HLS manifest configurations
    pub fn set_hls_manifests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HlsManifestCreateOrUpdateParameters>>) -> Self {
        self.hls_manifests = input;
        self
    }
    /// A list of HLS manifest configurations
    pub fn get_hls_manifests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HlsManifestCreateOrUpdateParameters>> {
        &self.hls_manifests
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn segment_duration_seconds(mut self, input: i32) -> Self {
        self.segment_duration_seconds = ::std::option::Option::Some(input);
        self
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn set_segment_duration_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.segment_duration_seconds = input;
        self
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn get_segment_duration_seconds(&self) -> &::std::option::Option<i32> {
        &self.segment_duration_seconds
    }
    /// An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
    pub fn segment_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
    pub fn set_segment_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_prefix = input;
        self
    }
    /// An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
    pub fn get_segment_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_prefix
    }
    /// A StreamSelection configuration.
    pub fn stream_selection(mut self, input: crate::types::StreamSelection) -> Self {
        self.stream_selection = ::std::option::Option::Some(input);
        self
    }
    /// A StreamSelection configuration.
    pub fn set_stream_selection(mut self, input: ::std::option::Option<crate::types::StreamSelection>) -> Self {
        self.stream_selection = input;
        self
    }
    /// A StreamSelection configuration.
    pub fn get_stream_selection(&self) -> &::std::option::Option<crate::types::StreamSelection> {
        &self.stream_selection
    }
    /// Consumes the builder and constructs a [`CmafPackageCreateOrUpdateParameters`](crate::types::CmafPackageCreateOrUpdateParameters).
    pub fn build(self) -> crate::types::CmafPackageCreateOrUpdateParameters {
        crate::types::CmafPackageCreateOrUpdateParameters {
            encryption: self.encryption,
            hls_manifests: self.hls_manifests,
            segment_duration_seconds: self.segment_duration_seconds,
            segment_prefix: self.segment_prefix,
            stream_selection: self.stream_selection,
        }
    }
}
