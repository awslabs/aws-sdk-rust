// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A Common Media Application Format (CMAF) packaging configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CmafPackage {
    /// A Common Media Application Format (CMAF) encryption configuration.
    #[doc(hidden)]
    pub encryption: std::option::Option<crate::types::CmafEncryption>,
    /// A list of HLS manifest configurations
    #[doc(hidden)]
    pub hls_manifests: std::option::Option<std::vec::Vec<crate::types::HlsManifest>>,
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    #[doc(hidden)]
    pub segment_duration_seconds: i32,
    /// An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
    #[doc(hidden)]
    pub segment_prefix: std::option::Option<std::string::String>,
    /// A StreamSelection configuration.
    #[doc(hidden)]
    pub stream_selection: std::option::Option<crate::types::StreamSelection>,
}
impl CmafPackage {
    /// A Common Media Application Format (CMAF) encryption configuration.
    pub fn encryption(&self) -> std::option::Option<&crate::types::CmafEncryption> {
        self.encryption.as_ref()
    }
    /// A list of HLS manifest configurations
    pub fn hls_manifests(&self) -> std::option::Option<&[crate::types::HlsManifest]> {
        self.hls_manifests.as_deref()
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn segment_duration_seconds(&self) -> i32 {
        self.segment_duration_seconds
    }
    /// An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
    pub fn segment_prefix(&self) -> std::option::Option<&str> {
        self.segment_prefix.as_deref()
    }
    /// A StreamSelection configuration.
    pub fn stream_selection(&self) -> std::option::Option<&crate::types::StreamSelection> {
        self.stream_selection.as_ref()
    }
}
impl CmafPackage {
    /// Creates a new builder-style object to manufacture [`CmafPackage`](crate::types::CmafPackage).
    pub fn builder() -> crate::types::builders::CmafPackageBuilder {
        crate::types::builders::CmafPackageBuilder::default()
    }
}

/// A builder for [`CmafPackage`](crate::types::CmafPackage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CmafPackageBuilder {
    pub(crate) encryption: std::option::Option<crate::types::CmafEncryption>,
    pub(crate) hls_manifests: std::option::Option<std::vec::Vec<crate::types::HlsManifest>>,
    pub(crate) segment_duration_seconds: std::option::Option<i32>,
    pub(crate) segment_prefix: std::option::Option<std::string::String>,
    pub(crate) stream_selection: std::option::Option<crate::types::StreamSelection>,
}
impl CmafPackageBuilder {
    /// A Common Media Application Format (CMAF) encryption configuration.
    pub fn encryption(mut self, input: crate::types::CmafEncryption) -> Self {
        self.encryption = Some(input);
        self
    }
    /// A Common Media Application Format (CMAF) encryption configuration.
    pub fn set_encryption(
        mut self,
        input: std::option::Option<crate::types::CmafEncryption>,
    ) -> Self {
        self.encryption = input;
        self
    }
    /// Appends an item to `hls_manifests`.
    ///
    /// To override the contents of this collection use [`set_hls_manifests`](Self::set_hls_manifests).
    ///
    /// A list of HLS manifest configurations
    pub fn hls_manifests(mut self, input: crate::types::HlsManifest) -> Self {
        let mut v = self.hls_manifests.unwrap_or_default();
        v.push(input);
        self.hls_manifests = Some(v);
        self
    }
    /// A list of HLS manifest configurations
    pub fn set_hls_manifests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HlsManifest>>,
    ) -> Self {
        self.hls_manifests = input;
        self
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn segment_duration_seconds(mut self, input: i32) -> Self {
        self.segment_duration_seconds = Some(input);
        self
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn set_segment_duration_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.segment_duration_seconds = input;
        self
    }
    /// An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
    pub fn segment_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.segment_prefix = Some(input.into());
        self
    }
    /// An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
    pub fn set_segment_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.segment_prefix = input;
        self
    }
    /// A StreamSelection configuration.
    pub fn stream_selection(mut self, input: crate::types::StreamSelection) -> Self {
        self.stream_selection = Some(input);
        self
    }
    /// A StreamSelection configuration.
    pub fn set_stream_selection(
        mut self,
        input: std::option::Option<crate::types::StreamSelection>,
    ) -> Self {
        self.stream_selection = input;
        self
    }
    /// Consumes the builder and constructs a [`CmafPackage`](crate::types::CmafPackage).
    pub fn build(self) -> crate::types::CmafPackage {
        crate::types::CmafPackage {
            encryption: self.encryption,
            hls_manifests: self.hls_manifests,
            segment_duration_seconds: self.segment_duration_seconds.unwrap_or_default(),
            segment_prefix: self.segment_prefix,
            stream_selection: self.stream_selection,
        }
    }
}
