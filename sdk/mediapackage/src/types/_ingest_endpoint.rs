// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// An endpoint for ingesting source content for a Channel.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IngestEndpoint {
    /// The system generated unique identifier for the IngestEndpoint
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// The system generated password for ingest authentication.
    #[doc(hidden)]
    pub password: std::option::Option<std::string::String>,
    /// The ingest URL to which the source stream should be sent.
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// The system generated username for ingest authentication.
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
}
impl IngestEndpoint {
    /// The system generated unique identifier for the IngestEndpoint
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The system generated password for ingest authentication.
    pub fn password(&self) -> std::option::Option<&str> {
        self.password.as_deref()
    }
    /// The ingest URL to which the source stream should be sent.
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// The system generated username for ingest authentication.
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
}
impl IngestEndpoint {
    /// Creates a new builder-style object to manufacture [`IngestEndpoint`](crate::types::IngestEndpoint).
    pub fn builder() -> crate::types::builders::IngestEndpointBuilder {
        crate::types::builders::IngestEndpointBuilder::default()
    }
}

/// A builder for [`IngestEndpoint`](crate::types::IngestEndpoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IngestEndpointBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) password: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
}
impl IngestEndpointBuilder {
    /// The system generated unique identifier for the IngestEndpoint
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// The system generated unique identifier for the IngestEndpoint
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The system generated password for ingest authentication.
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.password = Some(input.into());
        self
    }
    /// The system generated password for ingest authentication.
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// The ingest URL to which the source stream should be sent.
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// The ingest URL to which the source stream should be sent.
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// The system generated username for ingest authentication.
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// The system generated username for ingest authentication.
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// Consumes the builder and constructs a [`IngestEndpoint`](crate::types::IngestEndpoint).
    pub fn build(self) -> crate::types::IngestEndpoint {
        crate::types::IngestEndpoint {
            id: self.id,
            password: self.password,
            url: self.url,
            username: self.username,
        }
    }
}
