// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashPackage {
    /// A list of SCTE-35 message types that are treated as ad markers in the output. If empty, no ad markers are output. Specify multiple items to create ad markers for all of the included message types.
    pub ad_triggers: ::std::option::Option<::std::vec::Vec<crate::types::AdTriggersElement>>,
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad. Choosing "NONE" means no SCTE-35 messages become ads. Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads. Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads. Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads. Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    pub ads_on_delivery_restrictions: ::std::option::Option<crate::types::AdsOnDeliveryRestrictions>,
    /// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
    pub encryption: ::std::option::Option<crate::types::DashEncryption>,
    /// When enabled, an I-Frame only stream will be included in the output.
    pub include_iframe_only_stream: ::std::option::Option<bool>,
    /// Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
    pub manifest_layout: ::std::option::Option<crate::types::ManifestLayout>,
    /// Time window (in seconds) contained in each manifest.
    pub manifest_window_seconds: ::std::option::Option<i32>,
    /// Minimum duration (in seconds) that a player will buffer media before starting the presentation.
    pub min_buffer_time_seconds: ::std::option::Option<i32>,
    /// Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
    pub min_update_period_seconds: ::std::option::Option<i32>,
    /// A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
    pub period_triggers: ::std::option::Option<::std::vec::Vec<crate::types::PeriodTriggersElement>>,
    /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled. When set to "DVB-DASH_2014", DVB-DASH 2014 compliant output is enabled.
    pub profile: ::std::option::Option<crate::types::Profile>,
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub segment_duration_seconds: ::std::option::Option<i32>,
    /// Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
    pub segment_template_format: ::std::option::Option<crate::types::SegmentTemplateFormat>,
    /// A StreamSelection configuration.
    pub stream_selection: ::std::option::Option<crate::types::StreamSelection>,
    /// Duration (in seconds) to delay live content before presentation.
    pub suggested_presentation_delay_seconds: ::std::option::Option<i32>,
    /// Determines the type of UTCTiming included in the Media Presentation Description (MPD)
    pub utc_timing: ::std::option::Option<crate::types::UtcTiming>,
    /// Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
    pub utc_timing_uri: ::std::option::Option<::std::string::String>,
}
impl DashPackage {
    /// A list of SCTE-35 message types that are treated as ad markers in the output. If empty, no ad markers are output. Specify multiple items to create ad markers for all of the included message types.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ad_triggers.is_none()`.
    pub fn ad_triggers(&self) -> &[crate::types::AdTriggersElement] {
        self.ad_triggers.as_deref().unwrap_or_default()
    }
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad. Choosing "NONE" means no SCTE-35 messages become ads. Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads. Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads. Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads. Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    pub fn ads_on_delivery_restrictions(&self) -> ::std::option::Option<&crate::types::AdsOnDeliveryRestrictions> {
        self.ads_on_delivery_restrictions.as_ref()
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
    pub fn encryption(&self) -> ::std::option::Option<&crate::types::DashEncryption> {
        self.encryption.as_ref()
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn include_iframe_only_stream(&self) -> ::std::option::Option<bool> {
        self.include_iframe_only_stream
    }
    /// Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
    pub fn manifest_layout(&self) -> ::std::option::Option<&crate::types::ManifestLayout> {
        self.manifest_layout.as_ref()
    }
    /// Time window (in seconds) contained in each manifest.
    pub fn manifest_window_seconds(&self) -> ::std::option::Option<i32> {
        self.manifest_window_seconds
    }
    /// Minimum duration (in seconds) that a player will buffer media before starting the presentation.
    pub fn min_buffer_time_seconds(&self) -> ::std::option::Option<i32> {
        self.min_buffer_time_seconds
    }
    /// Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
    pub fn min_update_period_seconds(&self) -> ::std::option::Option<i32> {
        self.min_update_period_seconds
    }
    /// A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.period_triggers.is_none()`.
    pub fn period_triggers(&self) -> &[crate::types::PeriodTriggersElement] {
        self.period_triggers.as_deref().unwrap_or_default()
    }
    /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled. When set to "DVB-DASH_2014", DVB-DASH 2014 compliant output is enabled.
    pub fn profile(&self) -> ::std::option::Option<&crate::types::Profile> {
        self.profile.as_ref()
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn segment_duration_seconds(&self) -> ::std::option::Option<i32> {
        self.segment_duration_seconds
    }
    /// Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
    pub fn segment_template_format(&self) -> ::std::option::Option<&crate::types::SegmentTemplateFormat> {
        self.segment_template_format.as_ref()
    }
    /// A StreamSelection configuration.
    pub fn stream_selection(&self) -> ::std::option::Option<&crate::types::StreamSelection> {
        self.stream_selection.as_ref()
    }
    /// Duration (in seconds) to delay live content before presentation.
    pub fn suggested_presentation_delay_seconds(&self) -> ::std::option::Option<i32> {
        self.suggested_presentation_delay_seconds
    }
    /// Determines the type of UTCTiming included in the Media Presentation Description (MPD)
    pub fn utc_timing(&self) -> ::std::option::Option<&crate::types::UtcTiming> {
        self.utc_timing.as_ref()
    }
    /// Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
    pub fn utc_timing_uri(&self) -> ::std::option::Option<&str> {
        self.utc_timing_uri.as_deref()
    }
}
impl DashPackage {
    /// Creates a new builder-style object to manufacture [`DashPackage`](crate::types::DashPackage).
    pub fn builder() -> crate::types::builders::DashPackageBuilder {
        crate::types::builders::DashPackageBuilder::default()
    }
}

/// A builder for [`DashPackage`](crate::types::DashPackage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DashPackageBuilder {
    pub(crate) ad_triggers: ::std::option::Option<::std::vec::Vec<crate::types::AdTriggersElement>>,
    pub(crate) ads_on_delivery_restrictions: ::std::option::Option<crate::types::AdsOnDeliveryRestrictions>,
    pub(crate) encryption: ::std::option::Option<crate::types::DashEncryption>,
    pub(crate) include_iframe_only_stream: ::std::option::Option<bool>,
    pub(crate) manifest_layout: ::std::option::Option<crate::types::ManifestLayout>,
    pub(crate) manifest_window_seconds: ::std::option::Option<i32>,
    pub(crate) min_buffer_time_seconds: ::std::option::Option<i32>,
    pub(crate) min_update_period_seconds: ::std::option::Option<i32>,
    pub(crate) period_triggers: ::std::option::Option<::std::vec::Vec<crate::types::PeriodTriggersElement>>,
    pub(crate) profile: ::std::option::Option<crate::types::Profile>,
    pub(crate) segment_duration_seconds: ::std::option::Option<i32>,
    pub(crate) segment_template_format: ::std::option::Option<crate::types::SegmentTemplateFormat>,
    pub(crate) stream_selection: ::std::option::Option<crate::types::StreamSelection>,
    pub(crate) suggested_presentation_delay_seconds: ::std::option::Option<i32>,
    pub(crate) utc_timing: ::std::option::Option<crate::types::UtcTiming>,
    pub(crate) utc_timing_uri: ::std::option::Option<::std::string::String>,
}
impl DashPackageBuilder {
    /// Appends an item to `ad_triggers`.
    ///
    /// To override the contents of this collection use [`set_ad_triggers`](Self::set_ad_triggers).
    ///
    /// A list of SCTE-35 message types that are treated as ad markers in the output. If empty, no ad markers are output. Specify multiple items to create ad markers for all of the included message types.
    pub fn ad_triggers(mut self, input: crate::types::AdTriggersElement) -> Self {
        let mut v = self.ad_triggers.unwrap_or_default();
        v.push(input);
        self.ad_triggers = ::std::option::Option::Some(v);
        self
    }
    /// A list of SCTE-35 message types that are treated as ad markers in the output. If empty, no ad markers are output. Specify multiple items to create ad markers for all of the included message types.
    pub fn set_ad_triggers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdTriggersElement>>) -> Self {
        self.ad_triggers = input;
        self
    }
    /// A list of SCTE-35 message types that are treated as ad markers in the output. If empty, no ad markers are output. Specify multiple items to create ad markers for all of the included message types.
    pub fn get_ad_triggers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdTriggersElement>> {
        &self.ad_triggers
    }
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad. Choosing "NONE" means no SCTE-35 messages become ads. Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads. Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads. Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads. Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    pub fn ads_on_delivery_restrictions(mut self, input: crate::types::AdsOnDeliveryRestrictions) -> Self {
        self.ads_on_delivery_restrictions = ::std::option::Option::Some(input);
        self
    }
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad. Choosing "NONE" means no SCTE-35 messages become ads. Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads. Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads. Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads. Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    pub fn set_ads_on_delivery_restrictions(mut self, input: ::std::option::Option<crate::types::AdsOnDeliveryRestrictions>) -> Self {
        self.ads_on_delivery_restrictions = input;
        self
    }
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad. Choosing "NONE" means no SCTE-35 messages become ads. Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads. Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads. Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads. Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    pub fn get_ads_on_delivery_restrictions(&self) -> &::std::option::Option<crate::types::AdsOnDeliveryRestrictions> {
        &self.ads_on_delivery_restrictions
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
    pub fn encryption(mut self, input: crate::types::DashEncryption) -> Self {
        self.encryption = ::std::option::Option::Some(input);
        self
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
    pub fn set_encryption(mut self, input: ::std::option::Option<crate::types::DashEncryption>) -> Self {
        self.encryption = input;
        self
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
    pub fn get_encryption(&self) -> &::std::option::Option<crate::types::DashEncryption> {
        &self.encryption
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn include_iframe_only_stream(mut self, input: bool) -> Self {
        self.include_iframe_only_stream = ::std::option::Option::Some(input);
        self
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn set_include_iframe_only_stream(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_iframe_only_stream = input;
        self
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn get_include_iframe_only_stream(&self) -> &::std::option::Option<bool> {
        &self.include_iframe_only_stream
    }
    /// Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
    pub fn manifest_layout(mut self, input: crate::types::ManifestLayout) -> Self {
        self.manifest_layout = ::std::option::Option::Some(input);
        self
    }
    /// Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
    pub fn set_manifest_layout(mut self, input: ::std::option::Option<crate::types::ManifestLayout>) -> Self {
        self.manifest_layout = input;
        self
    }
    /// Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
    pub fn get_manifest_layout(&self) -> &::std::option::Option<crate::types::ManifestLayout> {
        &self.manifest_layout
    }
    /// Time window (in seconds) contained in each manifest.
    pub fn manifest_window_seconds(mut self, input: i32) -> Self {
        self.manifest_window_seconds = ::std::option::Option::Some(input);
        self
    }
    /// Time window (in seconds) contained in each manifest.
    pub fn set_manifest_window_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.manifest_window_seconds = input;
        self
    }
    /// Time window (in seconds) contained in each manifest.
    pub fn get_manifest_window_seconds(&self) -> &::std::option::Option<i32> {
        &self.manifest_window_seconds
    }
    /// Minimum duration (in seconds) that a player will buffer media before starting the presentation.
    pub fn min_buffer_time_seconds(mut self, input: i32) -> Self {
        self.min_buffer_time_seconds = ::std::option::Option::Some(input);
        self
    }
    /// Minimum duration (in seconds) that a player will buffer media before starting the presentation.
    pub fn set_min_buffer_time_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_buffer_time_seconds = input;
        self
    }
    /// Minimum duration (in seconds) that a player will buffer media before starting the presentation.
    pub fn get_min_buffer_time_seconds(&self) -> &::std::option::Option<i32> {
        &self.min_buffer_time_seconds
    }
    /// Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
    pub fn min_update_period_seconds(mut self, input: i32) -> Self {
        self.min_update_period_seconds = ::std::option::Option::Some(input);
        self
    }
    /// Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
    pub fn set_min_update_period_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_update_period_seconds = input;
        self
    }
    /// Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
    pub fn get_min_update_period_seconds(&self) -> &::std::option::Option<i32> {
        &self.min_update_period_seconds
    }
    /// Appends an item to `period_triggers`.
    ///
    /// To override the contents of this collection use [`set_period_triggers`](Self::set_period_triggers).
    ///
    /// A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
    pub fn period_triggers(mut self, input: crate::types::PeriodTriggersElement) -> Self {
        let mut v = self.period_triggers.unwrap_or_default();
        v.push(input);
        self.period_triggers = ::std::option::Option::Some(v);
        self
    }
    /// A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
    pub fn set_period_triggers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PeriodTriggersElement>>) -> Self {
        self.period_triggers = input;
        self
    }
    /// A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
    pub fn get_period_triggers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PeriodTriggersElement>> {
        &self.period_triggers
    }
    /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled. When set to "DVB-DASH_2014", DVB-DASH 2014 compliant output is enabled.
    pub fn profile(mut self, input: crate::types::Profile) -> Self {
        self.profile = ::std::option::Option::Some(input);
        self
    }
    /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled. When set to "DVB-DASH_2014", DVB-DASH 2014 compliant output is enabled.
    pub fn set_profile(mut self, input: ::std::option::Option<crate::types::Profile>) -> Self {
        self.profile = input;
        self
    }
    /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled. When set to "DVB-DASH_2014", DVB-DASH 2014 compliant output is enabled.
    pub fn get_profile(&self) -> &::std::option::Option<crate::types::Profile> {
        &self.profile
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn segment_duration_seconds(mut self, input: i32) -> Self {
        self.segment_duration_seconds = ::std::option::Option::Some(input);
        self
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn set_segment_duration_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.segment_duration_seconds = input;
        self
    }
    /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
    pub fn get_segment_duration_seconds(&self) -> &::std::option::Option<i32> {
        &self.segment_duration_seconds
    }
    /// Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
    pub fn segment_template_format(mut self, input: crate::types::SegmentTemplateFormat) -> Self {
        self.segment_template_format = ::std::option::Option::Some(input);
        self
    }
    /// Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
    pub fn set_segment_template_format(mut self, input: ::std::option::Option<crate::types::SegmentTemplateFormat>) -> Self {
        self.segment_template_format = input;
        self
    }
    /// Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
    pub fn get_segment_template_format(&self) -> &::std::option::Option<crate::types::SegmentTemplateFormat> {
        &self.segment_template_format
    }
    /// A StreamSelection configuration.
    pub fn stream_selection(mut self, input: crate::types::StreamSelection) -> Self {
        self.stream_selection = ::std::option::Option::Some(input);
        self
    }
    /// A StreamSelection configuration.
    pub fn set_stream_selection(mut self, input: ::std::option::Option<crate::types::StreamSelection>) -> Self {
        self.stream_selection = input;
        self
    }
    /// A StreamSelection configuration.
    pub fn get_stream_selection(&self) -> &::std::option::Option<crate::types::StreamSelection> {
        &self.stream_selection
    }
    /// Duration (in seconds) to delay live content before presentation.
    pub fn suggested_presentation_delay_seconds(mut self, input: i32) -> Self {
        self.suggested_presentation_delay_seconds = ::std::option::Option::Some(input);
        self
    }
    /// Duration (in seconds) to delay live content before presentation.
    pub fn set_suggested_presentation_delay_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.suggested_presentation_delay_seconds = input;
        self
    }
    /// Duration (in seconds) to delay live content before presentation.
    pub fn get_suggested_presentation_delay_seconds(&self) -> &::std::option::Option<i32> {
        &self.suggested_presentation_delay_seconds
    }
    /// Determines the type of UTCTiming included in the Media Presentation Description (MPD)
    pub fn utc_timing(mut self, input: crate::types::UtcTiming) -> Self {
        self.utc_timing = ::std::option::Option::Some(input);
        self
    }
    /// Determines the type of UTCTiming included in the Media Presentation Description (MPD)
    pub fn set_utc_timing(mut self, input: ::std::option::Option<crate::types::UtcTiming>) -> Self {
        self.utc_timing = input;
        self
    }
    /// Determines the type of UTCTiming included in the Media Presentation Description (MPD)
    pub fn get_utc_timing(&self) -> &::std::option::Option<crate::types::UtcTiming> {
        &self.utc_timing
    }
    /// Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
    pub fn utc_timing_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.utc_timing_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
    pub fn set_utc_timing_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.utc_timing_uri = input;
        self
    }
    /// Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
    pub fn get_utc_timing_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.utc_timing_uri
    }
    /// Consumes the builder and constructs a [`DashPackage`](crate::types::DashPackage).
    pub fn build(self) -> crate::types::DashPackage {
        crate::types::DashPackage {
            ad_triggers: self.ad_triggers,
            ads_on_delivery_restrictions: self.ads_on_delivery_restrictions,
            encryption: self.encryption,
            include_iframe_only_stream: self.include_iframe_only_stream,
            manifest_layout: self.manifest_layout,
            manifest_window_seconds: self.manifest_window_seconds,
            min_buffer_time_seconds: self.min_buffer_time_seconds,
            min_update_period_seconds: self.min_update_period_seconds,
            period_triggers: self.period_triggers,
            profile: self.profile,
            segment_duration_seconds: self.segment_duration_seconds,
            segment_template_format: self.segment_template_format,
            stream_selection: self.stream_selection,
            suggested_presentation_delay_seconds: self.suggested_presentation_delay_seconds,
            utc_timing: self.utc_timing,
            utc_timing_uri: self.utc_timing_uri,
        }
    }
}
