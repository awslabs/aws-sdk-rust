// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A Microsoft Smooth Streaming (MSS) encryption configuration.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MssEncryption {
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    pub speke_key_provider: ::std::option::Option<crate::types::SpekeKeyProvider>,
}
impl MssEncryption {
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    pub fn speke_key_provider(&self) -> ::std::option::Option<&crate::types::SpekeKeyProvider> {
        self.speke_key_provider.as_ref()
    }
}
impl MssEncryption {
    /// Creates a new builder-style object to manufacture [`MssEncryption`](crate::types::MssEncryption).
    pub fn builder() -> crate::types::builders::MssEncryptionBuilder {
        crate::types::builders::MssEncryptionBuilder::default()
    }
}

/// A builder for [`MssEncryption`](crate::types::MssEncryption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MssEncryptionBuilder {
    pub(crate) speke_key_provider: ::std::option::Option<crate::types::SpekeKeyProvider>,
}
impl MssEncryptionBuilder {
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    /// This field is required.
    pub fn speke_key_provider(mut self, input: crate::types::SpekeKeyProvider) -> Self {
        self.speke_key_provider = ::std::option::Option::Some(input);
        self
    }
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    pub fn set_speke_key_provider(mut self, input: ::std::option::Option<crate::types::SpekeKeyProvider>) -> Self {
        self.speke_key_provider = input;
        self
    }
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    pub fn get_speke_key_provider(&self) -> &::std::option::Option<crate::types::SpekeKeyProvider> {
        &self.speke_key_provider
    }
    /// Consumes the builder and constructs a [`MssEncryption`](crate::types::MssEncryption).
    pub fn build(self) -> crate::types::MssEncryption {
        crate::types::MssEncryption {
            speke_key_provider: self.speke_key_provider,
        }
    }
}
