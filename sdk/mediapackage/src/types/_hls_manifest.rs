// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A HTTP Live Streaming (HLS) manifest configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HlsManifest {
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
    #[doc(hidden)]
    pub ad_markers: std::option::Option<crate::types::AdMarkers>,
    /// The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// When enabled, an I-Frame only stream will be included in the output.
    #[doc(hidden)]
    pub include_iframe_only_stream: bool,
    /// An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
    #[doc(hidden)]
    pub manifest_name: std::option::Option<std::string::String>,
    /// The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
    #[doc(hidden)]
    pub playlist_type: std::option::Option<crate::types::PlaylistType>,
    /// Time window (in seconds) contained in each parent manifest.
    #[doc(hidden)]
    pub playlist_window_seconds: i32,
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
    #[doc(hidden)]
    pub program_date_time_interval_seconds: i32,
    /// The URL of the packaged OriginEndpoint for consumption.
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// A list of SCTE-35 message types that are treated as ad markers in the output. If empty, no ad markers are output. Specify multiple items to create ad markers for all of the included message types.
    #[doc(hidden)]
    pub ad_triggers: std::option::Option<std::vec::Vec<crate::types::AdTriggersElement>>,
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad. Choosing "NONE" means no SCTE-35 messages become ads. Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads. Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads. Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads. Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    #[doc(hidden)]
    pub ads_on_delivery_restrictions: std::option::Option<crate::types::AdsOnDeliveryRestrictions>,
}
impl HlsManifest {
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
    pub fn ad_markers(&self) -> std::option::Option<&crate::types::AdMarkers> {
        self.ad_markers.as_ref()
    }
    /// The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn include_iframe_only_stream(&self) -> bool {
        self.include_iframe_only_stream
    }
    /// An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
    pub fn manifest_name(&self) -> std::option::Option<&str> {
        self.manifest_name.as_deref()
    }
    /// The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
    pub fn playlist_type(&self) -> std::option::Option<&crate::types::PlaylistType> {
        self.playlist_type.as_ref()
    }
    /// Time window (in seconds) contained in each parent manifest.
    pub fn playlist_window_seconds(&self) -> i32 {
        self.playlist_window_seconds
    }
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
    pub fn program_date_time_interval_seconds(&self) -> i32 {
        self.program_date_time_interval_seconds
    }
    /// The URL of the packaged OriginEndpoint for consumption.
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// A list of SCTE-35 message types that are treated as ad markers in the output. If empty, no ad markers are output. Specify multiple items to create ad markers for all of the included message types.
    pub fn ad_triggers(&self) -> std::option::Option<&[crate::types::AdTriggersElement]> {
        self.ad_triggers.as_deref()
    }
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad. Choosing "NONE" means no SCTE-35 messages become ads. Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads. Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads. Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads. Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    pub fn ads_on_delivery_restrictions(
        &self,
    ) -> std::option::Option<&crate::types::AdsOnDeliveryRestrictions> {
        self.ads_on_delivery_restrictions.as_ref()
    }
}
impl HlsManifest {
    /// Creates a new builder-style object to manufacture [`HlsManifest`](crate::types::HlsManifest).
    pub fn builder() -> crate::types::builders::HlsManifestBuilder {
        crate::types::builders::HlsManifestBuilder::default()
    }
}

/// A builder for [`HlsManifest`](crate::types::HlsManifest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HlsManifestBuilder {
    pub(crate) ad_markers: std::option::Option<crate::types::AdMarkers>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) include_iframe_only_stream: std::option::Option<bool>,
    pub(crate) manifest_name: std::option::Option<std::string::String>,
    pub(crate) playlist_type: std::option::Option<crate::types::PlaylistType>,
    pub(crate) playlist_window_seconds: std::option::Option<i32>,
    pub(crate) program_date_time_interval_seconds: std::option::Option<i32>,
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) ad_triggers: std::option::Option<std::vec::Vec<crate::types::AdTriggersElement>>,
    pub(crate) ads_on_delivery_restrictions:
        std::option::Option<crate::types::AdsOnDeliveryRestrictions>,
}
impl HlsManifestBuilder {
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
    pub fn ad_markers(mut self, input: crate::types::AdMarkers) -> Self {
        self.ad_markers = Some(input);
        self
    }
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
    pub fn set_ad_markers(mut self, input: std::option::Option<crate::types::AdMarkers>) -> Self {
        self.ad_markers = input;
        self
    }
    /// The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn include_iframe_only_stream(mut self, input: bool) -> Self {
        self.include_iframe_only_stream = Some(input);
        self
    }
    /// When enabled, an I-Frame only stream will be included in the output.
    pub fn set_include_iframe_only_stream(mut self, input: std::option::Option<bool>) -> Self {
        self.include_iframe_only_stream = input;
        self
    }
    /// An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
    pub fn manifest_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.manifest_name = Some(input.into());
        self
    }
    /// An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
    pub fn set_manifest_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.manifest_name = input;
        self
    }
    /// The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
    pub fn playlist_type(mut self, input: crate::types::PlaylistType) -> Self {
        self.playlist_type = Some(input);
        self
    }
    /// The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
    pub fn set_playlist_type(
        mut self,
        input: std::option::Option<crate::types::PlaylistType>,
    ) -> Self {
        self.playlist_type = input;
        self
    }
    /// Time window (in seconds) contained in each parent manifest.
    pub fn playlist_window_seconds(mut self, input: i32) -> Self {
        self.playlist_window_seconds = Some(input);
        self
    }
    /// Time window (in seconds) contained in each parent manifest.
    pub fn set_playlist_window_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.playlist_window_seconds = input;
        self
    }
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
    pub fn program_date_time_interval_seconds(mut self, input: i32) -> Self {
        self.program_date_time_interval_seconds = Some(input);
        self
    }
    /// The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
    pub fn set_program_date_time_interval_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.program_date_time_interval_seconds = input;
        self
    }
    /// The URL of the packaged OriginEndpoint for consumption.
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// The URL of the packaged OriginEndpoint for consumption.
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// Appends an item to `ad_triggers`.
    ///
    /// To override the contents of this collection use [`set_ad_triggers`](Self::set_ad_triggers).
    ///
    /// A list of SCTE-35 message types that are treated as ad markers in the output. If empty, no ad markers are output. Specify multiple items to create ad markers for all of the included message types.
    pub fn ad_triggers(mut self, input: crate::types::AdTriggersElement) -> Self {
        let mut v = self.ad_triggers.unwrap_or_default();
        v.push(input);
        self.ad_triggers = Some(v);
        self
    }
    /// A list of SCTE-35 message types that are treated as ad markers in the output. If empty, no ad markers are output. Specify multiple items to create ad markers for all of the included message types.
    pub fn set_ad_triggers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AdTriggersElement>>,
    ) -> Self {
        self.ad_triggers = input;
        self
    }
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad. Choosing "NONE" means no SCTE-35 messages become ads. Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads. Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads. Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads. Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    pub fn ads_on_delivery_restrictions(
        mut self,
        input: crate::types::AdsOnDeliveryRestrictions,
    ) -> Self {
        self.ads_on_delivery_restrictions = Some(input);
        self
    }
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad. Choosing "NONE" means no SCTE-35 messages become ads. Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads. Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads. Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads. Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    pub fn set_ads_on_delivery_restrictions(
        mut self,
        input: std::option::Option<crate::types::AdsOnDeliveryRestrictions>,
    ) -> Self {
        self.ads_on_delivery_restrictions = input;
        self
    }
    /// Consumes the builder and constructs a [`HlsManifest`](crate::types::HlsManifest).
    pub fn build(self) -> crate::types::HlsManifest {
        crate::types::HlsManifest {
            ad_markers: self.ad_markers,
            id: self.id,
            include_iframe_only_stream: self.include_iframe_only_stream.unwrap_or_default(),
            manifest_name: self.manifest_name,
            playlist_type: self.playlist_type,
            playlist_window_seconds: self.playlist_window_seconds.unwrap_or_default(),
            program_date_time_interval_seconds: self
                .program_date_time_interval_seconds
                .unwrap_or_default(),
            url: self.url,
            ad_triggers: self.ad_triggers,
            ads_on_delivery_restrictions: self.ads_on_delivery_restrictions,
        }
    }
}
