// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListHarvestJobsInput {
    /// When specified, the request will return only HarvestJobs associated with the given Channel ID.
    #[doc(hidden)]
    pub include_channel_id: std::option::Option<std::string::String>,
    /// When specified, the request will return only HarvestJobs in the given status.
    #[doc(hidden)]
    pub include_status: std::option::Option<std::string::String>,
    /// The upper bound on the number of records to return.
    #[doc(hidden)]
    pub max_results: i32,
    /// A token used to resume pagination from the end of a previous request.
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListHarvestJobsInput {
    /// When specified, the request will return only HarvestJobs associated with the given Channel ID.
    pub fn include_channel_id(&self) -> std::option::Option<&str> {
        self.include_channel_id.as_deref()
    }
    /// When specified, the request will return only HarvestJobs in the given status.
    pub fn include_status(&self) -> std::option::Option<&str> {
        self.include_status.as_deref()
    }
    /// The upper bound on the number of records to return.
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// A token used to resume pagination from the end of a previous request.
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListHarvestJobsInput {
    /// Creates a new builder-style object to manufacture [`ListHarvestJobsInput`](crate::operation::list_harvest_jobs::ListHarvestJobsInput).
    pub fn builder() -> crate::operation::list_harvest_jobs::builders::ListHarvestJobsInputBuilder {
        crate::operation::list_harvest_jobs::builders::ListHarvestJobsInputBuilder::default()
    }
}

/// A builder for [`ListHarvestJobsInput`](crate::operation::list_harvest_jobs::ListHarvestJobsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListHarvestJobsInputBuilder {
    pub(crate) include_channel_id: std::option::Option<std::string::String>,
    pub(crate) include_status: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListHarvestJobsInputBuilder {
    /// When specified, the request will return only HarvestJobs associated with the given Channel ID.
    pub fn include_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.include_channel_id = Some(input.into());
        self
    }
    /// When specified, the request will return only HarvestJobs associated with the given Channel ID.
    pub fn set_include_channel_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.include_channel_id = input;
        self
    }
    /// When specified, the request will return only HarvestJobs in the given status.
    pub fn include_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.include_status = Some(input.into());
        self
    }
    /// When specified, the request will return only HarvestJobs in the given status.
    pub fn set_include_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.include_status = input;
        self
    }
    /// The upper bound on the number of records to return.
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// The upper bound on the number of records to return.
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// A token used to resume pagination from the end of a previous request.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// A token used to resume pagination from the end of a previous request.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListHarvestJobsInput`](crate::operation::list_harvest_jobs::ListHarvestJobsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_harvest_jobs::ListHarvestJobsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_harvest_jobs::ListHarvestJobsInput {
            include_channel_id: self.include_channel_id,
            include_status: self.include_status,
            max_results: self.max_results.unwrap_or_default(),
            next_token: self.next_token,
        })
    }
}
