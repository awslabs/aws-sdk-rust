// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Configuration parameters used to create a new HarvestJob.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateHarvestJobInput {
    /// The end of the time-window which will be harvested
    #[doc(hidden)]
    pub end_time: std::option::Option<std::string::String>,
    /// The ID of the HarvestJob. The ID must be unique within the region and it cannot be changed after the HarvestJob is submitted
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// The ID of the OriginEndpoint that the HarvestJob will harvest from. This cannot be changed after the HarvestJob is submitted.
    #[doc(hidden)]
    pub origin_endpoint_id: std::option::Option<std::string::String>,
    /// Configuration parameters for where in an S3 bucket to place the harvested content
    #[doc(hidden)]
    pub s3_destination: std::option::Option<crate::types::S3Destination>,
    /// The start of the time-window which will be harvested
    #[doc(hidden)]
    pub start_time: std::option::Option<std::string::String>,
}
impl CreateHarvestJobInput {
    /// The end of the time-window which will be harvested
    pub fn end_time(&self) -> std::option::Option<&str> {
        self.end_time.as_deref()
    }
    /// The ID of the HarvestJob. The ID must be unique within the region and it cannot be changed after the HarvestJob is submitted
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// The ID of the OriginEndpoint that the HarvestJob will harvest from. This cannot be changed after the HarvestJob is submitted.
    pub fn origin_endpoint_id(&self) -> std::option::Option<&str> {
        self.origin_endpoint_id.as_deref()
    }
    /// Configuration parameters for where in an S3 bucket to place the harvested content
    pub fn s3_destination(&self) -> std::option::Option<&crate::types::S3Destination> {
        self.s3_destination.as_ref()
    }
    /// The start of the time-window which will be harvested
    pub fn start_time(&self) -> std::option::Option<&str> {
        self.start_time.as_deref()
    }
}
impl CreateHarvestJobInput {
    /// Creates a new builder-style object to manufacture [`CreateHarvestJobInput`](crate::operation::create_harvest_job::CreateHarvestJobInput).
    pub fn builder() -> crate::operation::create_harvest_job::builders::CreateHarvestJobInputBuilder
    {
        crate::operation::create_harvest_job::builders::CreateHarvestJobInputBuilder::default()
    }
}

/// A builder for [`CreateHarvestJobInput`](crate::operation::create_harvest_job::CreateHarvestJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateHarvestJobInputBuilder {
    pub(crate) end_time: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) origin_endpoint_id: std::option::Option<std::string::String>,
    pub(crate) s3_destination: std::option::Option<crate::types::S3Destination>,
    pub(crate) start_time: std::option::Option<std::string::String>,
}
impl CreateHarvestJobInputBuilder {
    /// The end of the time-window which will be harvested
    pub fn end_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.end_time = Some(input.into());
        self
    }
    /// The end of the time-window which will be harvested
    pub fn set_end_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.end_time = input;
        self
    }
    /// The ID of the HarvestJob. The ID must be unique within the region and it cannot be changed after the HarvestJob is submitted
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// The ID of the HarvestJob. The ID must be unique within the region and it cannot be changed after the HarvestJob is submitted
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// The ID of the OriginEndpoint that the HarvestJob will harvest from. This cannot be changed after the HarvestJob is submitted.
    pub fn origin_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.origin_endpoint_id = Some(input.into());
        self
    }
    /// The ID of the OriginEndpoint that the HarvestJob will harvest from. This cannot be changed after the HarvestJob is submitted.
    pub fn set_origin_endpoint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.origin_endpoint_id = input;
        self
    }
    /// Configuration parameters for where in an S3 bucket to place the harvested content
    pub fn s3_destination(mut self, input: crate::types::S3Destination) -> Self {
        self.s3_destination = Some(input);
        self
    }
    /// Configuration parameters for where in an S3 bucket to place the harvested content
    pub fn set_s3_destination(
        mut self,
        input: std::option::Option<crate::types::S3Destination>,
    ) -> Self {
        self.s3_destination = input;
        self
    }
    /// The start of the time-window which will be harvested
    pub fn start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_time = Some(input.into());
        self
    }
    /// The start of the time-window which will be harvested
    pub fn set_start_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateHarvestJobInput`](crate::operation::create_harvest_job::CreateHarvestJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_harvest_job::CreateHarvestJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_harvest_job::CreateHarvestJobInput {
                end_time: self.end_time,
                id: self.id,
                origin_endpoint_id: self.origin_endpoint_id,
                s3_destination: self.s3_destination,
                start_time: self.start_time,
            },
        )
    }
}
