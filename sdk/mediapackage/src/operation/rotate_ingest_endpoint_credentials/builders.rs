// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::rotate_ingest_endpoint_credentials::_rotate_ingest_endpoint_credentials_output::RotateIngestEndpointCredentialsOutputBuilder;

pub use crate::operation::rotate_ingest_endpoint_credentials::_rotate_ingest_endpoint_credentials_input::RotateIngestEndpointCredentialsInputBuilder;

/// Fluent builder constructing a request to `RotateIngestEndpointCredentials`.
///
/// Rotate the IngestEndpoint's username and password, as specified by the IngestEndpoint's id.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RotateIngestEndpointCredentialsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::rotate_ingest_endpoint_credentials::builders::RotateIngestEndpointCredentialsInputBuilder
            }
impl RotateIngestEndpointCredentialsFluentBuilder {
    /// Creates a new `RotateIngestEndpointCredentials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::rotate_ingest_endpoint_credentials::RotateIngestEndpointCredentials, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::rotate_ingest_endpoint_credentials::RotateIngestEndpointCredentialsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::rotate_ingest_endpoint_credentials::RotateIngestEndpointCredentialsOutput, aws_smithy_http::result::SdkError<crate::operation::rotate_ingest_endpoint_credentials::RotateIngestEndpointCredentialsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ID of the channel the IngestEndpoint is on.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the channel the IngestEndpoint is on.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// The id of the IngestEndpoint whose credentials should be rotated
    pub fn ingest_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ingest_endpoint_id(input.into());
        self
    }
    /// The id of the IngestEndpoint whose credentials should be rotated
    pub fn set_ingest_endpoint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_ingest_endpoint_id(input);
        self
    }
}
