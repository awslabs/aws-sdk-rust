// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_origin_endpoint::_create_origin_endpoint_output::CreateOriginEndpointOutputBuilder;

pub use crate::operation::create_origin_endpoint::_create_origin_endpoint_input::CreateOriginEndpointInputBuilder;

/// Fluent builder constructing a request to `CreateOriginEndpoint`.
///
/// Creates a new OriginEndpoint record.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateOriginEndpointFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_origin_endpoint::builders::CreateOriginEndpointInputBuilder,
}
impl CreateOriginEndpointFluentBuilder {
    /// Creates a new `CreateOriginEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_origin_endpoint::CreateOriginEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_origin_endpoint::CreateOriginEndpointError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_origin_endpoint::CreateOriginEndpointOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_origin_endpoint::CreateOriginEndpointError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// CDN Authorization credentials
    pub fn authorization(mut self, input: crate::types::Authorization) -> Self {
        self.inner = self.inner.authorization(input);
        self
    }
    /// CDN Authorization credentials
    pub fn set_authorization(
        mut self,
        input: std::option::Option<crate::types::Authorization>,
    ) -> Self {
        self.inner = self.inner.set_authorization(input);
        self
    }
    /// The ID of the Channel that the OriginEndpoint will be associated with. This cannot be changed after the OriginEndpoint is created.
    pub fn channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.channel_id(input.into());
        self
    }
    /// The ID of the Channel that the OriginEndpoint will be associated with. This cannot be changed after the OriginEndpoint is created.
    pub fn set_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_channel_id(input);
        self
    }
    /// A Common Media Application Format (CMAF) packaging configuration.
    pub fn cmaf_package(
        mut self,
        input: crate::types::CmafPackageCreateOrUpdateParameters,
    ) -> Self {
        self.inner = self.inner.cmaf_package(input);
        self
    }
    /// A Common Media Application Format (CMAF) packaging configuration.
    pub fn set_cmaf_package(
        mut self,
        input: std::option::Option<crate::types::CmafPackageCreateOrUpdateParameters>,
    ) -> Self {
        self.inner = self.inner.set_cmaf_package(input);
        self
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    pub fn dash_package(mut self, input: crate::types::DashPackage) -> Self {
        self.inner = self.inner.dash_package(input);
        self
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    pub fn set_dash_package(
        mut self,
        input: std::option::Option<crate::types::DashPackage>,
    ) -> Self {
        self.inner = self.inner.set_dash_package(input);
        self
    }
    /// A short text description of the OriginEndpoint.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// A short text description of the OriginEndpoint.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// An HTTP Live Streaming (HLS) packaging configuration.
    pub fn hls_package(mut self, input: crate::types::HlsPackage) -> Self {
        self.inner = self.inner.hls_package(input);
        self
    }
    /// An HTTP Live Streaming (HLS) packaging configuration.
    pub fn set_hls_package(mut self, input: std::option::Option<crate::types::HlsPackage>) -> Self {
        self.inner = self.inner.set_hls_package(input);
        self
    }
    /// The ID of the OriginEndpoint. The ID must be unique within the region and it cannot be changed after the OriginEndpoint is created.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the OriginEndpoint. The ID must be unique within the region and it cannot be changed after the OriginEndpoint is created.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// A short string that will be used as the filename of the OriginEndpoint URL (defaults to "index").
    pub fn manifest_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.manifest_name(input.into());
        self
    }
    /// A short string that will be used as the filename of the OriginEndpoint URL (defaults to "index").
    pub fn set_manifest_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_manifest_name(input);
        self
    }
    /// A Microsoft Smooth Streaming (MSS) packaging configuration.
    pub fn mss_package(mut self, input: crate::types::MssPackage) -> Self {
        self.inner = self.inner.mss_package(input);
        self
    }
    /// A Microsoft Smooth Streaming (MSS) packaging configuration.
    pub fn set_mss_package(mut self, input: std::option::Option<crate::types::MssPackage>) -> Self {
        self.inner = self.inner.set_mss_package(input);
        self
    }
    /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
    pub fn origination(mut self, input: crate::types::Origination) -> Self {
        self.inner = self.inner.origination(input);
        self
    }
    /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
    pub fn set_origination(
        mut self,
        input: std::option::Option<crate::types::Origination>,
    ) -> Self {
        self.inner = self.inner.set_origination(input);
        self
    }
    /// Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
    pub fn startover_window_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.startover_window_seconds(input);
        self
    }
    /// Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
    pub fn set_startover_window_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_startover_window_seconds(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A collection of tags associated with a resource
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// A collection of tags associated with a resource
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
    pub fn time_delay_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.time_delay_seconds(input);
        self
    }
    /// Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
    pub fn set_time_delay_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_time_delay_seconds(input);
        self
    }
    /// Appends an item to `Whitelist`.
    ///
    /// To override the contents of this collection use [`set_whitelist`](Self::set_whitelist).
    ///
    /// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
    pub fn whitelist(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.whitelist(input.into());
        self
    }
    /// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
    pub fn set_whitelist(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_whitelist(input);
        self
    }
}
