// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `ConfigureLogs`.
///
/// Changes the Channel's properities to configure log subscription
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ConfigureLogs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::configure_logs_input::Builder,
}
impl ConfigureLogs {
    /// Creates a new `ConfigureLogs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ConfigureLogs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ConfigureLogsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ConfigureLogsOutput,
        aws_smithy_http::result::SdkError<crate::error::ConfigureLogsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Configure egress access logging.
    pub fn egress_access_logs(mut self, input: crate::model::EgressAccessLogs) -> Self {
        self.inner = self.inner.egress_access_logs(input);
        self
    }
    /// Configure egress access logging.
    pub fn set_egress_access_logs(
        mut self,
        input: std::option::Option<crate::model::EgressAccessLogs>,
    ) -> Self {
        self.inner = self.inner.set_egress_access_logs(input);
        self
    }
    /// The ID of the channel to log subscription.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the channel to log subscription.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// Configure ingress access logging.
    pub fn ingress_access_logs(mut self, input: crate::model::IngressAccessLogs) -> Self {
        self.inner = self.inner.ingress_access_logs(input);
        self
    }
    /// Configure ingress access logging.
    pub fn set_ingress_access_logs(
        mut self,
        input: std::option::Option<crate::model::IngressAccessLogs>,
    ) -> Self {
        self.inner = self.inner.set_ingress_access_logs(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateChannel`.
///
/// Creates a new Channel.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_channel_input::Builder,
}
impl CreateChannel {
    /// Creates a new `CreateChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// A short text description of the Channel.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// A short text description of the Channel.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// The ID of the Channel. The ID must be unique within the region and it cannot be changed after a Channel is created.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the Channel. The ID must be unique within the region and it cannot be changed after a Channel is created.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A collection of tags associated with a resource
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// A collection of tags associated with a resource
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateHarvestJob`.
///
/// Creates a new HarvestJob record.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateHarvestJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_harvest_job_input::Builder,
}
impl CreateHarvestJob {
    /// Creates a new `CreateHarvestJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateHarvestJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateHarvestJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateHarvestJobOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateHarvestJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The end of the time-window which will be harvested
    pub fn end_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.end_time(input.into());
        self
    }
    /// The end of the time-window which will be harvested
    pub fn set_end_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// The ID of the HarvestJob. The ID must be unique within the region and it cannot be changed after the HarvestJob is submitted
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the HarvestJob. The ID must be unique within the region and it cannot be changed after the HarvestJob is submitted
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// The ID of the OriginEndpoint that the HarvestJob will harvest from. This cannot be changed after the HarvestJob is submitted.
    pub fn origin_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.origin_endpoint_id(input.into());
        self
    }
    /// The ID of the OriginEndpoint that the HarvestJob will harvest from. This cannot be changed after the HarvestJob is submitted.
    pub fn set_origin_endpoint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_origin_endpoint_id(input);
        self
    }
    /// Configuration parameters for where in an S3 bucket to place the harvested content
    pub fn s3_destination(mut self, input: crate::model::S3Destination) -> Self {
        self.inner = self.inner.s3_destination(input);
        self
    }
    /// Configuration parameters for where in an S3 bucket to place the harvested content
    pub fn set_s3_destination(
        mut self,
        input: std::option::Option<crate::model::S3Destination>,
    ) -> Self {
        self.inner = self.inner.set_s3_destination(input);
        self
    }
    /// The start of the time-window which will be harvested
    pub fn start_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.start_time(input.into());
        self
    }
    /// The start of the time-window which will be harvested
    pub fn set_start_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateOriginEndpoint`.
///
/// Creates a new OriginEndpoint record.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateOriginEndpoint {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_origin_endpoint_input::Builder,
}
impl CreateOriginEndpoint {
    /// Creates a new `CreateOriginEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateOriginEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateOriginEndpointError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateOriginEndpointOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateOriginEndpointError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// CDN Authorization credentials
    pub fn authorization(mut self, input: crate::model::Authorization) -> Self {
        self.inner = self.inner.authorization(input);
        self
    }
    /// CDN Authorization credentials
    pub fn set_authorization(
        mut self,
        input: std::option::Option<crate::model::Authorization>,
    ) -> Self {
        self.inner = self.inner.set_authorization(input);
        self
    }
    /// The ID of the Channel that the OriginEndpoint will be associated with. This cannot be changed after the OriginEndpoint is created.
    pub fn channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.channel_id(input.into());
        self
    }
    /// The ID of the Channel that the OriginEndpoint will be associated with. This cannot be changed after the OriginEndpoint is created.
    pub fn set_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_channel_id(input);
        self
    }
    /// A Common Media Application Format (CMAF) packaging configuration.
    pub fn cmaf_package(
        mut self,
        input: crate::model::CmafPackageCreateOrUpdateParameters,
    ) -> Self {
        self.inner = self.inner.cmaf_package(input);
        self
    }
    /// A Common Media Application Format (CMAF) packaging configuration.
    pub fn set_cmaf_package(
        mut self,
        input: std::option::Option<crate::model::CmafPackageCreateOrUpdateParameters>,
    ) -> Self {
        self.inner = self.inner.set_cmaf_package(input);
        self
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    pub fn dash_package(mut self, input: crate::model::DashPackage) -> Self {
        self.inner = self.inner.dash_package(input);
        self
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    pub fn set_dash_package(
        mut self,
        input: std::option::Option<crate::model::DashPackage>,
    ) -> Self {
        self.inner = self.inner.set_dash_package(input);
        self
    }
    /// A short text description of the OriginEndpoint.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// A short text description of the OriginEndpoint.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// An HTTP Live Streaming (HLS) packaging configuration.
    pub fn hls_package(mut self, input: crate::model::HlsPackage) -> Self {
        self.inner = self.inner.hls_package(input);
        self
    }
    /// An HTTP Live Streaming (HLS) packaging configuration.
    pub fn set_hls_package(mut self, input: std::option::Option<crate::model::HlsPackage>) -> Self {
        self.inner = self.inner.set_hls_package(input);
        self
    }
    /// The ID of the OriginEndpoint. The ID must be unique within the region and it cannot be changed after the OriginEndpoint is created.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the OriginEndpoint. The ID must be unique within the region and it cannot be changed after the OriginEndpoint is created.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// A short string that will be used as the filename of the OriginEndpoint URL (defaults to "index").
    pub fn manifest_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.manifest_name(input.into());
        self
    }
    /// A short string that will be used as the filename of the OriginEndpoint URL (defaults to "index").
    pub fn set_manifest_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_manifest_name(input);
        self
    }
    /// A Microsoft Smooth Streaming (MSS) packaging configuration.
    pub fn mss_package(mut self, input: crate::model::MssPackage) -> Self {
        self.inner = self.inner.mss_package(input);
        self
    }
    /// A Microsoft Smooth Streaming (MSS) packaging configuration.
    pub fn set_mss_package(mut self, input: std::option::Option<crate::model::MssPackage>) -> Self {
        self.inner = self.inner.set_mss_package(input);
        self
    }
    /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
    pub fn origination(mut self, input: crate::model::Origination) -> Self {
        self.inner = self.inner.origination(input);
        self
    }
    /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
    pub fn set_origination(
        mut self,
        input: std::option::Option<crate::model::Origination>,
    ) -> Self {
        self.inner = self.inner.set_origination(input);
        self
    }
    /// Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
    pub fn startover_window_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.startover_window_seconds(input);
        self
    }
    /// Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
    pub fn set_startover_window_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_startover_window_seconds(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// A collection of tags associated with a resource
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// A collection of tags associated with a resource
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
    pub fn time_delay_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.time_delay_seconds(input);
        self
    }
    /// Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
    pub fn set_time_delay_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_time_delay_seconds(input);
        self
    }
    /// Appends an item to `Whitelist`.
    ///
    /// To override the contents of this collection use [`set_whitelist`](Self::set_whitelist).
    ///
    /// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
    pub fn whitelist(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.whitelist(input.into());
        self
    }
    /// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
    pub fn set_whitelist(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_whitelist(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteChannel`.
///
/// Deletes an existing Channel.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_channel_input::Builder,
}
impl DeleteChannel {
    /// Creates a new `DeleteChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ID of the Channel to delete.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the Channel to delete.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteOriginEndpoint`.
///
/// Deletes an existing OriginEndpoint.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteOriginEndpoint {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_origin_endpoint_input::Builder,
}
impl DeleteOriginEndpoint {
    /// Creates a new `DeleteOriginEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteOriginEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteOriginEndpointError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteOriginEndpointOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteOriginEndpointError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ID of the OriginEndpoint to delete.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the OriginEndpoint to delete.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeChannel`.
///
/// Gets details about a Channel.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_channel_input::Builder,
}
impl DescribeChannel {
    /// Creates a new `DescribeChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ID of a Channel.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of a Channel.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeHarvestJob`.
///
/// Gets details about an existing HarvestJob.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHarvestJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_harvest_job_input::Builder,
}
impl DescribeHarvestJob {
    /// Creates a new `DescribeHarvestJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeHarvestJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeHarvestJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeHarvestJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeHarvestJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ID of the HarvestJob.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the HarvestJob.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeOriginEndpoint`.
///
/// Gets details about an existing OriginEndpoint.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOriginEndpoint {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_origin_endpoint_input::Builder,
}
impl DescribeOriginEndpoint {
    /// Creates a new `DescribeOriginEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeOriginEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeOriginEndpointError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeOriginEndpointOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeOriginEndpointError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ID of the OriginEndpoint.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the OriginEndpoint.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `ListChannels`.
///
/// Returns a collection of Channels.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListChannels {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_channels_input::Builder,
}
impl ListChannels {
    /// Creates a new `ListChannels`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListChannels,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListChannelsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListChannelsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListChannelsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListChannelsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListChannelsPaginator {
        crate::paginator::ListChannelsPaginator::new(self.handle, self.inner)
    }
    /// Upper bound on number of records to return.
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// Upper bound on number of records to return.
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// A token used to resume pagination from the end of a previous request.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// A token used to resume pagination from the end of a previous request.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListHarvestJobs`.
///
/// Returns a collection of HarvestJob records.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListHarvestJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_harvest_jobs_input::Builder,
}
impl ListHarvestJobs {
    /// Creates a new `ListHarvestJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListHarvestJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListHarvestJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListHarvestJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListHarvestJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListHarvestJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListHarvestJobsPaginator {
        crate::paginator::ListHarvestJobsPaginator::new(self.handle, self.inner)
    }
    /// When specified, the request will return only HarvestJobs associated with the given Channel ID.
    pub fn include_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.include_channel_id(input.into());
        self
    }
    /// When specified, the request will return only HarvestJobs associated with the given Channel ID.
    pub fn set_include_channel_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_include_channel_id(input);
        self
    }
    /// When specified, the request will return only HarvestJobs in the given status.
    pub fn include_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.include_status(input.into());
        self
    }
    /// When specified, the request will return only HarvestJobs in the given status.
    pub fn set_include_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_include_status(input);
        self
    }
    /// The upper bound on the number of records to return.
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// The upper bound on the number of records to return.
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// A token used to resume pagination from the end of a previous request.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// A token used to resume pagination from the end of a previous request.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListOriginEndpoints`.
///
/// Returns a collection of OriginEndpoint records.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListOriginEndpoints {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_origin_endpoints_input::Builder,
}
impl ListOriginEndpoints {
    /// Creates a new `ListOriginEndpoints`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListOriginEndpoints,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListOriginEndpointsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListOriginEndpointsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListOriginEndpointsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListOriginEndpointsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListOriginEndpointsPaginator {
        crate::paginator::ListOriginEndpointsPaginator::new(self.handle, self.inner)
    }
    /// When specified, the request will return only OriginEndpoints associated with the given Channel ID.
    pub fn channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.channel_id(input.into());
        self
    }
    /// When specified, the request will return only OriginEndpoints associated with the given Channel ID.
    pub fn set_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_channel_id(input);
        self
    }
    /// The upper bound on the number of records to return.
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// The upper bound on the number of records to return.
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// A token used to resume pagination from the end of a previous request.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// A token used to resume pagination from the end of a previous request.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `RotateChannelCredentials`.
///
/// Changes the Channel's first IngestEndpoint's username and password. WARNING - This API is deprecated. Please use RotateIngestEndpointCredentials instead
#[deprecated(note = "This API is deprecated. Please use RotateIngestEndpointCredentials instead")]
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RotateChannelCredentials {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::rotate_channel_credentials_input::Builder,
}
impl RotateChannelCredentials {
    /// Creates a new `RotateChannelCredentials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RotateChannelCredentials,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RotateChannelCredentialsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RotateChannelCredentialsOutput,
        aws_smithy_http::result::SdkError<crate::error::RotateChannelCredentialsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ID of the channel to update.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the channel to update.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `RotateIngestEndpointCredentials`.
///
/// Rotate the IngestEndpoint's username and password, as specified by the IngestEndpoint's id.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RotateIngestEndpointCredentials {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::rotate_ingest_endpoint_credentials_input::Builder,
}
impl RotateIngestEndpointCredentials {
    /// Creates a new `RotateIngestEndpointCredentials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RotateIngestEndpointCredentials,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RotateIngestEndpointCredentialsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RotateIngestEndpointCredentialsOutput,
        aws_smithy_http::result::SdkError<crate::error::RotateIngestEndpointCredentialsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The ID of the channel the IngestEndpoint is on.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the channel the IngestEndpoint is on.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// The id of the IngestEndpoint whose credentials should be rotated
    pub fn ingest_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ingest_endpoint_id(input.into());
        self
    }
    /// The id of the IngestEndpoint whose credentials should be rotated
    pub fn set_ingest_endpoint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_ingest_endpoint_id(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    #[allow(missing_docs)] // documentation missing in model
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `TagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// The key(s) of tag to be deleted
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// The key(s) of tag to be deleted
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateChannel`.
///
/// Updates an existing Channel.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateChannel {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_channel_input::Builder,
}
impl UpdateChannel {
    /// Creates a new `UpdateChannel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateChannel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateChannelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateChannelOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateChannelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// A short text description of the Channel.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// A short text description of the Channel.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// The ID of the Channel to update.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the Channel to update.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateOriginEndpoint`.
///
/// Updates an existing OriginEndpoint.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateOriginEndpoint {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_origin_endpoint_input::Builder,
}
impl UpdateOriginEndpoint {
    /// Creates a new `UpdateOriginEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateOriginEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateOriginEndpointError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateOriginEndpointOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateOriginEndpointError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// CDN Authorization credentials
    pub fn authorization(mut self, input: crate::model::Authorization) -> Self {
        self.inner = self.inner.authorization(input);
        self
    }
    /// CDN Authorization credentials
    pub fn set_authorization(
        mut self,
        input: std::option::Option<crate::model::Authorization>,
    ) -> Self {
        self.inner = self.inner.set_authorization(input);
        self
    }
    /// A Common Media Application Format (CMAF) packaging configuration.
    pub fn cmaf_package(
        mut self,
        input: crate::model::CmafPackageCreateOrUpdateParameters,
    ) -> Self {
        self.inner = self.inner.cmaf_package(input);
        self
    }
    /// A Common Media Application Format (CMAF) packaging configuration.
    pub fn set_cmaf_package(
        mut self,
        input: std::option::Option<crate::model::CmafPackageCreateOrUpdateParameters>,
    ) -> Self {
        self.inner = self.inner.set_cmaf_package(input);
        self
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    pub fn dash_package(mut self, input: crate::model::DashPackage) -> Self {
        self.inner = self.inner.dash_package(input);
        self
    }
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    pub fn set_dash_package(
        mut self,
        input: std::option::Option<crate::model::DashPackage>,
    ) -> Self {
        self.inner = self.inner.set_dash_package(input);
        self
    }
    /// A short text description of the OriginEndpoint.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// A short text description of the OriginEndpoint.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// An HTTP Live Streaming (HLS) packaging configuration.
    pub fn hls_package(mut self, input: crate::model::HlsPackage) -> Self {
        self.inner = self.inner.hls_package(input);
        self
    }
    /// An HTTP Live Streaming (HLS) packaging configuration.
    pub fn set_hls_package(mut self, input: std::option::Option<crate::model::HlsPackage>) -> Self {
        self.inner = self.inner.set_hls_package(input);
        self
    }
    /// The ID of the OriginEndpoint to update.
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// The ID of the OriginEndpoint to update.
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// A short string that will be appended to the end of the Endpoint URL.
    pub fn manifest_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.manifest_name(input.into());
        self
    }
    /// A short string that will be appended to the end of the Endpoint URL.
    pub fn set_manifest_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_manifest_name(input);
        self
    }
    /// A Microsoft Smooth Streaming (MSS) packaging configuration.
    pub fn mss_package(mut self, input: crate::model::MssPackage) -> Self {
        self.inner = self.inner.mss_package(input);
        self
    }
    /// A Microsoft Smooth Streaming (MSS) packaging configuration.
    pub fn set_mss_package(mut self, input: std::option::Option<crate::model::MssPackage>) -> Self {
        self.inner = self.inner.set_mss_package(input);
        self
    }
    /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
    pub fn origination(mut self, input: crate::model::Origination) -> Self {
        self.inner = self.inner.origination(input);
        self
    }
    /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
    pub fn set_origination(
        mut self,
        input: std::option::Option<crate::model::Origination>,
    ) -> Self {
        self.inner = self.inner.set_origination(input);
        self
    }
    /// Maximum duration (in seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
    pub fn startover_window_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.startover_window_seconds(input);
        self
    }
    /// Maximum duration (in seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
    pub fn set_startover_window_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_startover_window_seconds(input);
        self
    }
    /// Amount of delay (in seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
    pub fn time_delay_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.time_delay_seconds(input);
        self
    }
    /// Amount of delay (in seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
    pub fn set_time_delay_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_time_delay_seconds(input);
        self
    }
    /// Appends an item to `Whitelist`.
    ///
    /// To override the contents of this collection use [`set_whitelist`](Self::set_whitelist).
    ///
    /// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
    pub fn whitelist(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.whitelist(input.into());
        self
    }
    /// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
    pub fn set_whitelist(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_whitelist(input);
        self
    }
}
