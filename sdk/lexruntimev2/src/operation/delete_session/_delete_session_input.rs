// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSessionInput {
    /// <p>The identifier of the bot that contains the session data.</p>
    #[doc(hidden)]
    pub bot_id: std::option::Option<std::string::String>,
    /// <p>The alias identifier in use for the bot that contains the session data.</p>
    #[doc(hidden)]
    pub bot_alias_id: std::option::Option<std::string::String>,
    /// <p>The locale where the session is in use.</p>
    #[doc(hidden)]
    pub locale_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the session to delete.</p>
    #[doc(hidden)]
    pub session_id: std::option::Option<std::string::String>,
}
impl DeleteSessionInput {
    /// <p>The identifier of the bot that contains the session data.</p>
    pub fn bot_id(&self) -> std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The alias identifier in use for the bot that contains the session data.</p>
    pub fn bot_alias_id(&self) -> std::option::Option<&str> {
        self.bot_alias_id.as_deref()
    }
    /// <p>The locale where the session is in use.</p>
    pub fn locale_id(&self) -> std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>The identifier of the session to delete.</p>
    pub fn session_id(&self) -> std::option::Option<&str> {
        self.session_id.as_deref()
    }
}
impl DeleteSessionInput {
    /// Creates a new builder-style object to manufacture [`DeleteSessionInput`](crate::operation::delete_session::DeleteSessionInput).
    pub fn builder() -> crate::operation::delete_session::builders::DeleteSessionInputBuilder {
        crate::operation::delete_session::builders::DeleteSessionInputBuilder::default()
    }
}

/// A builder for [`DeleteSessionInput`](crate::operation::delete_session::DeleteSessionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteSessionInputBuilder {
    pub(crate) bot_id: std::option::Option<std::string::String>,
    pub(crate) bot_alias_id: std::option::Option<std::string::String>,
    pub(crate) locale_id: std::option::Option<std::string::String>,
    pub(crate) session_id: std::option::Option<std::string::String>,
}
impl DeleteSessionInputBuilder {
    /// <p>The identifier of the bot that contains the session data.</p>
    pub fn bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_id = Some(input.into());
        self
    }
    /// <p>The identifier of the bot that contains the session data.</p>
    pub fn set_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The alias identifier in use for the bot that contains the session data.</p>
    pub fn bot_alias_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_alias_id = Some(input.into());
        self
    }
    /// <p>The alias identifier in use for the bot that contains the session data.</p>
    pub fn set_bot_alias_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_alias_id = input;
        self
    }
    /// <p>The locale where the session is in use.</p>
    pub fn locale_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale_id = Some(input.into());
        self
    }
    /// <p>The locale where the session is in use.</p>
    pub fn set_locale_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The identifier of the session to delete.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_id = Some(input.into());
        self
    }
    /// <p>The identifier of the session to delete.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteSessionInput`](crate::operation::delete_session::DeleteSessionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_session::DeleteSessionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_session::DeleteSessionInput {
            bot_id: self.bot_id,
            bot_alias_id: self.bot_alias_id,
            locale_id: self.locale_id,
            session_id: self.session_id,
        })
    }
}
