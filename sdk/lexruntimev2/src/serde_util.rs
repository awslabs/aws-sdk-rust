// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn bad_gateway_exception_correct_errors(
    mut builder: crate::types::error::builders::BadGatewayExceptionBuilder,
) -> crate::types::error::builders::BadGatewayExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn dependency_failed_exception_correct_errors(
    mut builder: crate::types::error::builders::DependencyFailedExceptionBuilder,
) -> crate::types::error::builders::DependencyFailedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn recognized_bot_member_correct_errors(
    mut builder: crate::types::builders::RecognizedBotMemberBuilder,
) -> crate::types::builders::RecognizedBotMemberBuilder {
    if builder.bot_id.is_none() {
        builder.bot_id = Some(Default::default())
    }
    builder
}

pub(crate) fn dialog_action_correct_errors(mut builder: crate::types::builders::DialogActionBuilder) -> crate::types::builders::DialogActionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DialogActionType>().ok()
    }
    builder
}

pub(crate) fn intent_correct_errors(mut builder: crate::types::builders::IntentBuilder) -> crate::types::builders::IntentBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn message_correct_errors(mut builder: crate::types::builders::MessageBuilder) -> crate::types::builders::MessageBuilder {
    if builder.content_type.is_none() {
        builder.content_type = "no value was set".parse::<crate::types::MessageContentType>().ok()
    }
    builder
}

pub(crate) fn active_context_correct_errors(
    mut builder: crate::types::builders::ActiveContextBuilder,
) -> crate::types::builders::ActiveContextBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.time_to_live.is_none() {
        builder.time_to_live = {
            let builder = crate::types::builders::ActiveContextTimeToLiveBuilder::default();
            crate::serde_util::active_context_time_to_live_correct_errors(builder).build().ok()
        }
    }
    if builder.context_attributes.is_none() {
        builder.context_attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn elicit_sub_slot_correct_errors(
    mut builder: crate::types::builders::ElicitSubSlotBuilder,
) -> crate::types::builders::ElicitSubSlotBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn image_response_card_correct_errors(
    mut builder: crate::types::builders::ImageResponseCardBuilder,
) -> crate::types::builders::ImageResponseCardBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn active_context_time_to_live_correct_errors(
    mut builder: crate::types::builders::ActiveContextTimeToLiveBuilder,
) -> crate::types::builders::ActiveContextTimeToLiveBuilder {
    if builder.time_to_live_in_seconds.is_none() {
        builder.time_to_live_in_seconds = Some(Default::default())
    }
    if builder.turns_to_live.is_none() {
        builder.turns_to_live = Some(Default::default())
    }
    builder
}

pub(crate) fn button_correct_errors(mut builder: crate::types::builders::ButtonBuilder) -> crate::types::builders::ButtonBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn value_correct_errors(mut builder: crate::types::builders::ValueBuilder) -> crate::types::builders::ValueBuilder {
    if builder.interpreted_value.is_none() {
        builder.interpreted_value = Some(Default::default())
    }
    builder
}

pub(crate) fn runtime_hint_value_correct_errors(
    mut builder: crate::types::builders::RuntimeHintValueBuilder,
) -> crate::types::builders::RuntimeHintValueBuilder {
    if builder.phrase.is_none() {
        builder.phrase = Some(Default::default())
    }
    builder
}
