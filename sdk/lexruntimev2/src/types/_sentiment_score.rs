// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The individual sentiment responses for the utterance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SentimentScore {
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.</p>
    #[doc(hidden)]
    pub positive: f64,
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.</p>
    #[doc(hidden)]
    pub negative: f64,
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.</p>
    #[doc(hidden)]
    pub neutral: f64,
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.</p>
    #[doc(hidden)]
    pub mixed: f64,
}
impl SentimentScore {
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.</p>
    pub fn positive(&self) -> f64 {
        self.positive
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.</p>
    pub fn negative(&self) -> f64 {
        self.negative
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.</p>
    pub fn neutral(&self) -> f64 {
        self.neutral
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.</p>
    pub fn mixed(&self) -> f64 {
        self.mixed
    }
}
impl SentimentScore {
    /// Creates a new builder-style object to manufacture [`SentimentScore`](crate::types::SentimentScore).
    pub fn builder() -> crate::types::builders::SentimentScoreBuilder {
        crate::types::builders::SentimentScoreBuilder::default()
    }
}

/// A builder for [`SentimentScore`](crate::types::SentimentScore).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SentimentScoreBuilder {
    pub(crate) positive: std::option::Option<f64>,
    pub(crate) negative: std::option::Option<f64>,
    pub(crate) neutral: std::option::Option<f64>,
    pub(crate) mixed: std::option::Option<f64>,
}
impl SentimentScoreBuilder {
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.</p>
    pub fn positive(mut self, input: f64) -> Self {
        self.positive = Some(input);
        self
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>POSITIVE</code> sentiment.</p>
    pub fn set_positive(mut self, input: std::option::Option<f64>) -> Self {
        self.positive = input;
        self
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.</p>
    pub fn negative(mut self, input: f64) -> Self {
        self.negative = Some(input);
        self
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEGATIVE</code> sentiment.</p>
    pub fn set_negative(mut self, input: std::option::Option<f64>) -> Self {
        self.negative = input;
        self
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.</p>
    pub fn neutral(mut self, input: f64) -> Self {
        self.neutral = Some(input);
        self
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>NEUTRAL</code> sentiment.</p>
    pub fn set_neutral(mut self, input: std::option::Option<f64>) -> Self {
        self.neutral = input;
        self
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.</p>
    pub fn mixed(mut self, input: f64) -> Self {
        self.mixed = Some(input);
        self
    }
    /// <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of the <code>MIXED</code> sentiment.</p>
    pub fn set_mixed(mut self, input: std::option::Option<f64>) -> Self {
        self.mixed = input;
        self
    }
    /// Consumes the builder and constructs a [`SentimentScore`](crate::types::SentimentScore).
    pub fn build(self) -> crate::types::SentimentScore {
        crate::types::SentimentScore {
            positive: self.positive.unwrap_or_default(),
            negative: self.negative.unwrap_or_default(),
            neutral: self.neutral.unwrap_or_default(),
            mixed: self.mixed.unwrap_or_default(),
        }
    }
}
