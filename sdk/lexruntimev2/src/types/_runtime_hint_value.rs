// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the phrase that Amazon Lex V2 should look for in the user's input to the bot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RuntimeHintValue {
    /// <p>The phrase that Amazon Lex V2 should look for in the user's input to the bot.</p>
    #[doc(hidden)]
    pub phrase: std::option::Option<std::string::String>,
}
impl RuntimeHintValue {
    /// <p>The phrase that Amazon Lex V2 should look for in the user's input to the bot.</p>
    pub fn phrase(&self) -> std::option::Option<&str> {
        self.phrase.as_deref()
    }
}
impl RuntimeHintValue {
    /// Creates a new builder-style object to manufacture [`RuntimeHintValue`](crate::types::RuntimeHintValue).
    pub fn builder() -> crate::types::builders::RuntimeHintValueBuilder {
        crate::types::builders::RuntimeHintValueBuilder::default()
    }
}

/// A builder for [`RuntimeHintValue`](crate::types::RuntimeHintValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RuntimeHintValueBuilder {
    pub(crate) phrase: std::option::Option<std::string::String>,
}
impl RuntimeHintValueBuilder {
    /// <p>The phrase that Amazon Lex V2 should look for in the user's input to the bot.</p>
    pub fn phrase(mut self, input: impl Into<std::string::String>) -> Self {
        self.phrase = Some(input.into());
        self
    }
    /// <p>The phrase that Amazon Lex V2 should look for in the user's input to the bot.</p>
    pub fn set_phrase(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phrase = input;
        self
    }
    /// Consumes the builder and constructs a [`RuntimeHintValue`](crate::types::RuntimeHintValue).
    pub fn build(self) -> crate::types::RuntimeHintValue {
        crate::types::RuntimeHintValue {
            phrase: self.phrase,
        }
    }
}
