// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The specific constituent sub slot of the composite slot to elicit in dialog action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ElicitSubSlot {
    /// <p>The name of the slot that should be elicited from the user.</p>
    pub name: ::std::string::String,
    /// <p>The field is not supported.</p>
    pub sub_slot_to_elicit: ::std::option::Option<::std::boxed::Box<crate::types::ElicitSubSlot>>,
}
impl ElicitSubSlot {
    /// <p>The name of the slot that should be elicited from the user.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The field is not supported.</p>
    pub fn sub_slot_to_elicit(&self) -> ::std::option::Option<&crate::types::ElicitSubSlot> {
        self.sub_slot_to_elicit.as_deref()
    }
}
impl ElicitSubSlot {
    /// Creates a new builder-style object to manufacture [`ElicitSubSlot`](crate::types::ElicitSubSlot).
    pub fn builder() -> crate::types::builders::ElicitSubSlotBuilder {
        crate::types::builders::ElicitSubSlotBuilder::default()
    }
}

/// A builder for [`ElicitSubSlot`](crate::types::ElicitSubSlot).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ElicitSubSlotBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) sub_slot_to_elicit: ::std::option::Option<::std::boxed::Box<crate::types::ElicitSubSlot>>,
}
impl ElicitSubSlotBuilder {
    /// <p>The name of the slot that should be elicited from the user.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the slot that should be elicited from the user.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the slot that should be elicited from the user.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The field is not supported.</p>
    pub fn sub_slot_to_elicit(mut self, input: impl ::std::convert::Into<::std::boxed::Box<crate::types::ElicitSubSlot>>) -> Self {
        self.sub_slot_to_elicit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field is not supported.</p>
    pub fn set_sub_slot_to_elicit(mut self, input: ::std::option::Option<::std::boxed::Box<crate::types::ElicitSubSlot>>) -> Self {
        self.sub_slot_to_elicit = input;
        self
    }
    /// <p>The field is not supported.</p>
    pub fn get_sub_slot_to_elicit(&self) -> &::std::option::Option<::std::boxed::Box<crate::types::ElicitSubSlot>> {
        &self.sub_slot_to_elicit
    }
    /// Consumes the builder and constructs a [`ElicitSubSlot`](crate::types::ElicitSubSlot).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ElicitSubSlotBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::ElicitSubSlot, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ElicitSubSlot {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ElicitSubSlot",
                )
            })?,
            sub_slot_to_elicit: self.sub_slot_to_elicit,
        })
    }
}
