// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The state of the user's session with Amazon Lex V2.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SessionState {
    /// <p>The next step that Amazon Lex V2 should take in the conversation with a user.</p>
    #[doc(hidden)]
    pub dialog_action: std::option::Option<crate::types::DialogAction>,
    /// <p>The active intent that Amazon Lex V2 is processing.</p>
    #[doc(hidden)]
    pub intent: std::option::Option<crate::types::Intent>,
    /// <p>One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.</p>
    #[doc(hidden)]
    pub active_contexts: std::option::Option<std::vec::Vec<crate::types::ActiveContext>>,
    /// <p>Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.</p>
    #[doc(hidden)]
    pub session_attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A unique identifier for a specific request.</p>
    #[doc(hidden)]
    pub originating_request_id: std::option::Option<std::string::String>,
    /// <p>Hints for phrases that a customer is likely to use for a slot. Amazon Lex V2 uses the hints to help determine the correct value of a slot.</p>
    #[doc(hidden)]
    pub runtime_hints: std::option::Option<crate::types::RuntimeHints>,
}
impl SessionState {
    /// <p>The next step that Amazon Lex V2 should take in the conversation with a user.</p>
    pub fn dialog_action(&self) -> std::option::Option<&crate::types::DialogAction> {
        self.dialog_action.as_ref()
    }
    /// <p>The active intent that Amazon Lex V2 is processing.</p>
    pub fn intent(&self) -> std::option::Option<&crate::types::Intent> {
        self.intent.as_ref()
    }
    /// <p>One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.</p>
    pub fn active_contexts(&self) -> std::option::Option<&[crate::types::ActiveContext]> {
        self.active_contexts.as_deref()
    }
    /// <p>Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.</p>
    pub fn session_attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.session_attributes.as_ref()
    }
    /// <p>A unique identifier for a specific request.</p>
    pub fn originating_request_id(&self) -> std::option::Option<&str> {
        self.originating_request_id.as_deref()
    }
    /// <p>Hints for phrases that a customer is likely to use for a slot. Amazon Lex V2 uses the hints to help determine the correct value of a slot.</p>
    pub fn runtime_hints(&self) -> std::option::Option<&crate::types::RuntimeHints> {
        self.runtime_hints.as_ref()
    }
}
impl SessionState {
    /// Creates a new builder-style object to manufacture [`SessionState`](crate::types::SessionState).
    pub fn builder() -> crate::types::builders::SessionStateBuilder {
        crate::types::builders::SessionStateBuilder::default()
    }
}

/// A builder for [`SessionState`](crate::types::SessionState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SessionStateBuilder {
    pub(crate) dialog_action: std::option::Option<crate::types::DialogAction>,
    pub(crate) intent: std::option::Option<crate::types::Intent>,
    pub(crate) active_contexts: std::option::Option<std::vec::Vec<crate::types::ActiveContext>>,
    pub(crate) session_attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) originating_request_id: std::option::Option<std::string::String>,
    pub(crate) runtime_hints: std::option::Option<crate::types::RuntimeHints>,
}
impl SessionStateBuilder {
    /// <p>The next step that Amazon Lex V2 should take in the conversation with a user.</p>
    pub fn dialog_action(mut self, input: crate::types::DialogAction) -> Self {
        self.dialog_action = Some(input);
        self
    }
    /// <p>The next step that Amazon Lex V2 should take in the conversation with a user.</p>
    pub fn set_dialog_action(
        mut self,
        input: std::option::Option<crate::types::DialogAction>,
    ) -> Self {
        self.dialog_action = input;
        self
    }
    /// <p>The active intent that Amazon Lex V2 is processing.</p>
    pub fn intent(mut self, input: crate::types::Intent) -> Self {
        self.intent = Some(input);
        self
    }
    /// <p>The active intent that Amazon Lex V2 is processing.</p>
    pub fn set_intent(mut self, input: std::option::Option<crate::types::Intent>) -> Self {
        self.intent = input;
        self
    }
    /// Appends an item to `active_contexts`.
    ///
    /// To override the contents of this collection use [`set_active_contexts`](Self::set_active_contexts).
    ///
    /// <p>One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.</p>
    pub fn active_contexts(mut self, input: crate::types::ActiveContext) -> Self {
        let mut v = self.active_contexts.unwrap_or_default();
        v.push(input);
        self.active_contexts = Some(v);
        self
    }
    /// <p>One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.</p>
    pub fn set_active_contexts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ActiveContext>>,
    ) -> Self {
        self.active_contexts = input;
        self
    }
    /// Adds a key-value pair to `session_attributes`.
    ///
    /// To override the contents of this collection use [`set_session_attributes`](Self::set_session_attributes).
    ///
    /// <p>Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.</p>
    pub fn session_attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.session_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.session_attributes = Some(hash_map);
        self
    }
    /// <p>Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.</p>
    pub fn set_session_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.session_attributes = input;
        self
    }
    /// <p>A unique identifier for a specific request.</p>
    pub fn originating_request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.originating_request_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for a specific request.</p>
    pub fn set_originating_request_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.originating_request_id = input;
        self
    }
    /// <p>Hints for phrases that a customer is likely to use for a slot. Amazon Lex V2 uses the hints to help determine the correct value of a slot.</p>
    pub fn runtime_hints(mut self, input: crate::types::RuntimeHints) -> Self {
        self.runtime_hints = Some(input);
        self
    }
    /// <p>Hints for phrases that a customer is likely to use for a slot. Amazon Lex V2 uses the hints to help determine the correct value of a slot.</p>
    pub fn set_runtime_hints(
        mut self,
        input: std::option::Option<crate::types::RuntimeHints>,
    ) -> Self {
        self.runtime_hints = input;
        self
    }
    /// Consumes the builder and constructs a [`SessionState`](crate::types::SessionState).
    pub fn build(self) -> crate::types::SessionState {
        crate::types::SessionState {
            dialog_action: self.dialog_action,
            intent: self.intent,
            active_contexts: self.active_contexts,
            session_attributes: self.session_attributes,
            originating_request_id: self.originating_request_id,
            runtime_hints: self.runtime_hints,
        }
    }
}
