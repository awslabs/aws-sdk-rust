// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p></p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p></p>
    BadGatewayException(crate::error::BadGatewayException),
    /// <p></p>
    ConflictException(crate::error::ConflictException),
    /// <p></p>
    DependencyFailedException(crate::error::DependencyFailedException),
    /// <p></p>
    InternalServerException(crate::error::InternalServerException),
    /// <p></p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p></p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p></p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadGatewayException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DependencyFailedException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSessionError> for Error {
    fn from(err: crate::error::DeleteSessionError) -> Self {
        match err {
            crate::error::DeleteSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSessionError> for Error {
    fn from(err: crate::error::GetSessionError) -> Self {
        match err {
            crate::error::GetSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutSessionError> for Error {
    fn from(err: crate::error::PutSessionError) -> Self {
        match err {
            crate::error::PutSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutSessionError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::error::PutSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutSessionError::DependencyFailedException(inner) => {
                Error::DependencyFailedException(inner)
            }
            crate::error::PutSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RecognizeTextError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RecognizeTextError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RecognizeTextError> for Error {
    fn from(err: crate::error::RecognizeTextError) -> Self {
        match err {
            crate::error::RecognizeTextError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RecognizeTextError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RecognizeTextError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RecognizeTextError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::error::RecognizeTextError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RecognizeTextError::DependencyFailedException(inner) => {
                Error::DependencyFailedException(inner)
            }
            crate::error::RecognizeTextError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RecognizeTextError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RecognizeTextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RecognizeUtteranceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RecognizeUtteranceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RecognizeUtteranceError> for Error {
    fn from(err: crate::error::RecognizeUtteranceError) -> Self {
        match err {
            crate::error::RecognizeUtteranceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RecognizeUtteranceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RecognizeUtteranceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RecognizeUtteranceError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::error::RecognizeUtteranceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RecognizeUtteranceError::DependencyFailedException(inner) => {
                Error::DependencyFailedException(inner)
            }
            crate::error::RecognizeUtteranceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RecognizeUtteranceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RecognizeUtteranceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadGatewayException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DependencyFailedException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
