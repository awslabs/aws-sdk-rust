// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_put_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.messages {
        let mut array_2 = object.key("messages").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_message(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.request_attributes {
        let mut object_6 = object.key("requestAttributes").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7).string(value_8);
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.session_state {
        let mut object_10 = object.key("sessionState").start_object();
        crate::json_ser::serialize_structure_crate_model_session_state(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_recognize_text_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RecognizeTextInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.request_attributes {
        let mut object_12 = object.key("requestAttributes").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14);
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.session_state {
        let mut object_16 = object.key("sessionState").start_object();
        crate::json_ser::serialize_structure_crate_model_session_state(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.text {
        object.key("text").string(var_17);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Message,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.content {
        object.key("content").string(var_18);
    }
    if let Some(var_19) = &input.content_type {
        object.key("contentType").string(var_19.as_str());
    }
    if let Some(var_20) = &input.image_response_card {
        let mut object_21 = object.key("imageResponseCard").start_object();
        crate::json_ser::serialize_structure_crate_model_image_response_card(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_state(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionState,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_22) = &input.dialog_action {
        let mut object_23 = object.key("dialogAction").start_object();
        crate::json_ser::serialize_structure_crate_model_dialog_action(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.intent {
        let mut object_25 = object.key("intent").start_object();
        crate::json_ser::serialize_structure_crate_model_intent(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.active_contexts {
        let mut array_27 = object.key("activeContexts").start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_crate_model_active_context(
                    &mut object_29,
                    item_28,
                )?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.session_attributes {
        let mut object_31 = object.key("sessionAttributes").start_object();
        for (key_32, value_33) in var_30 {
            {
                object_31.key(key_32).string(value_33);
            }
        }
        object_31.finish();
    }
    if let Some(var_34) = &input.originating_request_id {
        object.key("originatingRequestId").string(var_34);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_response_card(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageResponseCard,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.title {
        object.key("title").string(var_35);
    }
    if let Some(var_36) = &input.subtitle {
        object.key("subtitle").string(var_36);
    }
    if let Some(var_37) = &input.image_url {
        object.key("imageUrl").string(var_37);
    }
    if let Some(var_38) = &input.buttons {
        let mut array_39 = object.key("buttons").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_button(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dialog_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DialogAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.r#type {
        object.key("type").string(var_42.as_str());
    }
    if let Some(var_43) = &input.slot_to_elicit {
        object.key("slotToElicit").string(var_43);
    }
    if let Some(var_44) = &input.slot_elicitation_style {
        object.key("slotElicitationStyle").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_intent(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Intent,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.name {
        object.key("name").string(var_45);
    }
    if let Some(var_46) = &input.slots {
        let mut object_47 = object.key("slots").start_object();
        for (key_48, value_49) in var_46 {
            {
                let mut object_50 = object_47.key(key_48).start_object();
                crate::json_ser::serialize_structure_crate_model_slot(&mut object_50, value_49)?;
                object_50.finish();
            }
        }
        object_47.finish();
    }
    if let Some(var_51) = &input.state {
        object.key("state").string(var_51.as_str());
    }
    if let Some(var_52) = &input.confirmation_state {
        object.key("confirmationState").string(var_52.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_active_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActiveContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.name {
        object.key("name").string(var_53);
    }
    if let Some(var_54) = &input.time_to_live {
        let mut object_55 = object.key("timeToLive").start_object();
        crate::json_ser::serialize_structure_crate_model_active_context_time_to_live(
            &mut object_55,
            var_54,
        )?;
        object_55.finish();
    }
    if let Some(var_56) = &input.context_attributes {
        let mut object_57 = object.key("contextAttributes").start_object();
        for (key_58, value_59) in var_56 {
            {
                object_57.key(key_58).string(value_59);
            }
        }
        object_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_button(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Button,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.text {
        object.key("text").string(var_60);
    }
    if let Some(var_61) = &input.value {
        object.key("value").string(var_61);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_slot(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Slot,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.value {
        let mut object_63 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_value(&mut object_63, var_62)?;
        object_63.finish();
    }
    if let Some(var_64) = &input.shape {
        object.key("shape").string(var_64.as_str());
    }
    if let Some(var_65) = &input.values {
        let mut array_66 = object.key("values").start_array();
        for item_67 in var_65 {
            {
                let mut object_68 = array_66.value().start_object();
                crate::json_ser::serialize_structure_crate_model_slot(&mut object_68, item_67)?;
                object_68.finish();
            }
        }
        array_66.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_active_context_time_to_live(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ActiveContextTimeToLive,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.time_to_live_in_seconds {
        object.key("timeToLiveInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_69).into()),
        );
    }
    if let Some(var_70) = &input.turns_to_live {
        object.key("turnsToLive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_70).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Value,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.original_value {
        object.key("originalValue").string(var_71);
    }
    if let Some(var_72) = &input.interpreted_value {
        object.key("interpretedValue").string(var_72);
    }
    if let Some(var_73) = &input.resolved_values {
        let mut array_74 = object.key("resolvedValues").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75);
            }
        }
        array_74.finish();
    }
    Ok(())
}
