// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_cases_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::describe_cases::DescribeCasesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.case_id_list {
        let mut array_2 = object.key("caseIdList").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.display_id {
        object.key("displayId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.after_time {
        object.key("afterTime").string(var_5.as_str());
    }
    if let Some(var_6) = &input.before_time {
        object.key("beforeTime").string(var_6.as_str());
    }
    if let Some(var_7) = &input.include_resolved_cases {
        object.key("includeResolvedCases").boolean(*var_7);
    }
    if let Some(var_8) = &input.next_token {
        object.key("nextToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.language {
        object.key("language").string(var_10.as_str());
    }
    if let Some(var_11) = &input.include_communications {
        object.key("includeCommunications").boolean(*var_11);
    }
    Ok(())
}
