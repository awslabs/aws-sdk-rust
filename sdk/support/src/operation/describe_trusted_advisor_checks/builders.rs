// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_trusted_advisor_checks::_describe_trusted_advisor_checks_output::DescribeTrustedAdvisorChecksOutputBuilder;

pub use crate::operation::describe_trusted_advisor_checks::_describe_trusted_advisor_checks_input::DescribeTrustedAdvisorChecksInputBuilder;

/// Fluent builder constructing a request to `DescribeTrustedAdvisorChecks`.
///
/// <p>Returns information about all available Trusted Advisor checks, including the name, ID, category, description, and metadata. You must specify a language code.</p>
/// <p>The response contains a <code>TrustedAdvisorCheckDescription</code> object for each check. You must set the Amazon Web Services Region to us-east-1.</p> <note>
/// <ul>
/// <li> <p>You must have a Business, Enterprise On-Ramp, or Enterprise Support plan to use the Amazon Web Services Support API. </p> </li>
/// <li> <p>If you call the Amazon Web Services Support API from an account that doesn't have a Business, Enterprise On-Ramp, or Enterprise Support plan, the <code>SubscriptionRequiredException</code> error message appears. For information about changing your support plan, see <a href="http://aws.amazon.com/premiumsupport/">Amazon Web Services Support</a>.</p> </li>
/// <li> <p>The names and descriptions for Trusted Advisor checks are subject to change. We recommend that you specify the check ID in your code to uniquely identify a check.</p> </li>
/// </ul>
/// </note>
/// <p>To call the Trusted Advisor operations in the Amazon Web Services Support API, you must use the US East (N. Virginia) endpoint. Currently, the US West (Oregon) and Europe (Ireland) endpoints don't support the Trusted Advisor operations. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/about-support-api.html#endpoint">About the Amazon Web Services Support API</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrustedAdvisorChecksFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_trusted_advisor_checks::builders::DescribeTrustedAdvisorChecksInputBuilder
            }
impl DescribeTrustedAdvisorChecksFluentBuilder {
    /// Creates a new `DescribeTrustedAdvisorChecks`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_trusted_advisor_checks::DescribeTrustedAdvisorChecks,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_trusted_advisor_checks::DescribeTrustedAdvisorChecksError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_trusted_advisor_checks::DescribeTrustedAdvisorChecksOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_trusted_advisor_checks::DescribeTrustedAdvisorChecksError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ISO 639-1 code for the language that you want your checks to appear in.</p>
    /// <p>The Amazon Web Services Support API currently supports the following languages for Trusted Advisor:</p>
    /// <ul>
    /// <li> <p>Chinese, Simplified - <code>zh</code> </p> </li>
    /// <li> <p>Chinese, Traditional - <code>zh_TW</code> </p> </li>
    /// <li> <p>English - <code>en</code> </p> </li>
    /// <li> <p>French - <code>fr</code> </p> </li>
    /// <li> <p>German - <code>de</code> </p> </li>
    /// <li> <p>Indonesian - <code>id</code> </p> </li>
    /// <li> <p>Italian - <code>it</code> </p> </li>
    /// <li> <p>Japanese - <code>ja</code> </p> </li>
    /// <li> <p>Korean - <code>ko</code> </p> </li>
    /// <li> <p>Portuguese, Brazilian - <code>pt_BR</code> </p> </li>
    /// <li> <p>Spanish - <code>es</code> </p> </li>
    /// </ul>
    pub fn language(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.language(input.into());
        self
    }
    /// <p>The ISO 639-1 code for the language that you want your checks to appear in.</p>
    /// <p>The Amazon Web Services Support API currently supports the following languages for Trusted Advisor:</p>
    /// <ul>
    /// <li> <p>Chinese, Simplified - <code>zh</code> </p> </li>
    /// <li> <p>Chinese, Traditional - <code>zh_TW</code> </p> </li>
    /// <li> <p>English - <code>en</code> </p> </li>
    /// <li> <p>French - <code>fr</code> </p> </li>
    /// <li> <p>German - <code>de</code> </p> </li>
    /// <li> <p>Indonesian - <code>id</code> </p> </li>
    /// <li> <p>Italian - <code>it</code> </p> </li>
    /// <li> <p>Japanese - <code>ja</code> </p> </li>
    /// <li> <p>Korean - <code>ko</code> </p> </li>
    /// <li> <p>Portuguese, Brazilian - <code>pt_BR</code> </p> </li>
    /// <li> <p>Spanish - <code>es</code> </p> </li>
    /// </ul>
    pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_language(input);
        self
    }
}
