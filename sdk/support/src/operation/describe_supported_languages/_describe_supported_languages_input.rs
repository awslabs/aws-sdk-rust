// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeSupportedLanguagesInput {
    /// <p>The type of issue for the case. You can specify <code>customer-service</code> or <code>technical</code>.</p>
    pub issue_type: ::std::option::Option<::std::string::String>,
    /// <p>The code for the Amazon Web Services service. You can use the <code>DescribeServices</code> operation to get the possible <code>serviceCode</code> values.</p>
    pub service_code: ::std::option::Option<::std::string::String>,
    /// <p>The category of problem for the support case. You also use the <code>DescribeServices</code> operation to get the category code for a service. Each Amazon Web Services service defines its own set of category codes.</p>
    pub category_code: ::std::option::Option<::std::string::String>,
}
impl DescribeSupportedLanguagesInput {
    /// <p>The type of issue for the case. You can specify <code>customer-service</code> or <code>technical</code>.</p>
    pub fn issue_type(&self) -> ::std::option::Option<&str> {
        self.issue_type.as_deref()
    }
    /// <p>The code for the Amazon Web Services service. You can use the <code>DescribeServices</code> operation to get the possible <code>serviceCode</code> values.</p>
    pub fn service_code(&self) -> ::std::option::Option<&str> {
        self.service_code.as_deref()
    }
    /// <p>The category of problem for the support case. You also use the <code>DescribeServices</code> operation to get the category code for a service. Each Amazon Web Services service defines its own set of category codes.</p>
    pub fn category_code(&self) -> ::std::option::Option<&str> {
        self.category_code.as_deref()
    }
}
impl DescribeSupportedLanguagesInput {
    /// Creates a new builder-style object to manufacture [`DescribeSupportedLanguagesInput`](crate::operation::describe_supported_languages::DescribeSupportedLanguagesInput).
    pub fn builder() -> crate::operation::describe_supported_languages::builders::DescribeSupportedLanguagesInputBuilder {
        crate::operation::describe_supported_languages::builders::DescribeSupportedLanguagesInputBuilder::default()
    }
}

/// A builder for [`DescribeSupportedLanguagesInput`](crate::operation::describe_supported_languages::DescribeSupportedLanguagesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeSupportedLanguagesInputBuilder {
    pub(crate) issue_type: ::std::option::Option<::std::string::String>,
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) category_code: ::std::option::Option<::std::string::String>,
}
impl DescribeSupportedLanguagesInputBuilder {
    /// <p>The type of issue for the case. You can specify <code>customer-service</code> or <code>technical</code>.</p>
    /// This field is required.
    pub fn issue_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.issue_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of issue for the case. You can specify <code>customer-service</code> or <code>technical</code>.</p>
    pub fn set_issue_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.issue_type = input;
        self
    }
    /// <p>The type of issue for the case. You can specify <code>customer-service</code> or <code>technical</code>.</p>
    pub fn get_issue_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.issue_type
    }
    /// <p>The code for the Amazon Web Services service. You can use the <code>DescribeServices</code> operation to get the possible <code>serviceCode</code> values.</p>
    /// This field is required.
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code for the Amazon Web Services service. You can use the <code>DescribeServices</code> operation to get the possible <code>serviceCode</code> values.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The code for the Amazon Web Services service. You can use the <code>DescribeServices</code> operation to get the possible <code>serviceCode</code> values.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>The category of problem for the support case. You also use the <code>DescribeServices</code> operation to get the category code for a service. Each Amazon Web Services service defines its own set of category codes.</p>
    /// This field is required.
    pub fn category_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category of problem for the support case. You also use the <code>DescribeServices</code> operation to get the category code for a service. Each Amazon Web Services service defines its own set of category codes.</p>
    pub fn set_category_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category_code = input;
        self
    }
    /// <p>The category of problem for the support case. You also use the <code>DescribeServices</code> operation to get the category code for a service. Each Amazon Web Services service defines its own set of category codes.</p>
    pub fn get_category_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.category_code
    }
    /// Consumes the builder and constructs a [`DescribeSupportedLanguagesInput`](crate::operation::describe_supported_languages::DescribeSupportedLanguagesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_supported_languages::DescribeSupportedLanguagesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_supported_languages::DescribeSupportedLanguagesInput {
            issue_type: self.issue_type,
            service_code: self.service_code,
            category_code: self.category_code,
        })
    }
}
