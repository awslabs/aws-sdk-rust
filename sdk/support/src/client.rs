// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `AWSSupport_20130415`.
///
/// This client allows ergonomic access to a `AWSSupport_20130415`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn add_attachments_to_set(&self) -> fluent_builders::AddAttachmentsToSet<C, M, R> {
        fluent_builders::AddAttachmentsToSet::new(self.handle.clone())
    }
    pub fn add_communication_to_case(&self) -> fluent_builders::AddCommunicationToCase<C, M, R> {
        fluent_builders::AddCommunicationToCase::new(self.handle.clone())
    }
    pub fn create_case(&self) -> fluent_builders::CreateCase<C, M, R> {
        fluent_builders::CreateCase::new(self.handle.clone())
    }
    pub fn describe_attachment(&self) -> fluent_builders::DescribeAttachment<C, M, R> {
        fluent_builders::DescribeAttachment::new(self.handle.clone())
    }
    pub fn describe_cases(&self) -> fluent_builders::DescribeCases<C, M, R> {
        fluent_builders::DescribeCases::new(self.handle.clone())
    }
    pub fn describe_communications(&self) -> fluent_builders::DescribeCommunications<C, M, R> {
        fluent_builders::DescribeCommunications::new(self.handle.clone())
    }
    pub fn describe_services(&self) -> fluent_builders::DescribeServices<C, M, R> {
        fluent_builders::DescribeServices::new(self.handle.clone())
    }
    pub fn describe_severity_levels(&self) -> fluent_builders::DescribeSeverityLevels<C, M, R> {
        fluent_builders::DescribeSeverityLevels::new(self.handle.clone())
    }
    pub fn describe_trusted_advisor_check_refresh_statuses(
        &self,
    ) -> fluent_builders::DescribeTrustedAdvisorCheckRefreshStatuses<C, M, R> {
        fluent_builders::DescribeTrustedAdvisorCheckRefreshStatuses::new(self.handle.clone())
    }
    pub fn describe_trusted_advisor_check_result(
        &self,
    ) -> fluent_builders::DescribeTrustedAdvisorCheckResult<C, M, R> {
        fluent_builders::DescribeTrustedAdvisorCheckResult::new(self.handle.clone())
    }
    pub fn describe_trusted_advisor_checks(
        &self,
    ) -> fluent_builders::DescribeTrustedAdvisorChecks<C, M, R> {
        fluent_builders::DescribeTrustedAdvisorChecks::new(self.handle.clone())
    }
    pub fn describe_trusted_advisor_check_summaries(
        &self,
    ) -> fluent_builders::DescribeTrustedAdvisorCheckSummaries<C, M, R> {
        fluent_builders::DescribeTrustedAdvisorCheckSummaries::new(self.handle.clone())
    }
    pub fn refresh_trusted_advisor_check(
        &self,
    ) -> fluent_builders::RefreshTrustedAdvisorCheck<C, M, R> {
        fluent_builders::RefreshTrustedAdvisorCheck::new(self.handle.clone())
    }
    pub fn resolve_case(&self) -> fluent_builders::ResolveCase<C, M, R> {
        fluent_builders::ResolveCase::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AddAttachmentsToSet<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_attachments_to_set_input::Builder,
    }
    impl<C, M, R> AddAttachmentsToSet<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddAttachmentsToSetOutput,
            smithy_http::result::SdkError<crate::error::AddAttachmentsToSetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddAttachmentsToSetInputOperationOutputAlias,
                crate::output::AddAttachmentsToSetOutput,
                crate::error::AddAttachmentsToSetError,
                crate::input::AddAttachmentsToSetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the attachment set. If an <code>attachmentSetId</code> is not specified, a
        /// new attachment set is created, and the ID of the set is returned in the response. If an
        /// <code>attachmentSetId</code> is specified, the attachments are added to the
        /// specified set, if it exists.</p>
        pub fn attachment_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attachment_set_id(inp);
            self
        }
        pub fn set_attachment_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attachment_set_id(input);
            self
        }
        /// Appends an item to `attachments`.
        ///
        /// To override the contents of this collection use [`set_attachments`](Self::set_attachments).
        /// <p>One or more attachments to add to the set. You can add up to three attachments per
        /// set. The size limit is 5 MB per attachment.</p>
        /// <p>In the <code>Attachment</code> object, use the <code>data</code> parameter to specify
        /// the contents of the attachment file. In the previous request syntax, the value for
        /// <code>data</code> appear as <code>blob</code>, which is represented as a
        /// base64-encoded string. The value for <code>fileName</code> is the name of the
        /// attachment, such as <code>troubleshoot-screenshot.png</code>.</p>
        pub fn attachments(mut self, inp: impl Into<crate::model::Attachment>) -> Self {
            self.inner = self.inner.attachments(inp);
            self
        }
        pub fn set_attachments(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Attachment>>,
        ) -> Self {
            self.inner = self.inner.set_attachments(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddCommunicationToCase<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_communication_to_case_input::Builder,
    }
    impl<C, M, R> AddCommunicationToCase<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddCommunicationToCaseOutput,
            smithy_http::result::SdkError<crate::error::AddCommunicationToCaseError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddCommunicationToCaseInputOperationOutputAlias,
                crate::output::AddCommunicationToCaseOutput,
                crate::error::AddCommunicationToCaseError,
                crate::input::AddCommunicationToCaseInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The support case ID requested or returned in the call. The case ID is an
        /// alphanumeric string formatted as shown in this example:
        /// case-<i>12345678910-2013-c4c1d2bf33c5cf47</i>
        /// </p>
        pub fn case_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.case_id(inp);
            self
        }
        pub fn set_case_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_case_id(input);
            self
        }
        /// <p>The body of an email communication to add to the support case.</p>
        pub fn communication_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.communication_body(inp);
            self
        }
        pub fn set_communication_body(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_communication_body(input);
            self
        }
        /// Appends an item to `ccEmailAddresses`.
        ///
        /// To override the contents of this collection use [`set_cc_email_addresses`](Self::set_cc_email_addresses).
        /// <p>The email addresses in the CC line of an email to be added to the support case.</p>
        pub fn cc_email_addresses(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cc_email_addresses(inp);
            self
        }
        pub fn set_cc_email_addresses(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_cc_email_addresses(input);
            self
        }
        /// <p>The ID of a set of one or more attachments for the communication to add to the case.
        /// Create the set by calling <a>AddAttachmentsToSet</a>
        /// </p>
        pub fn attachment_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attachment_set_id(inp);
            self
        }
        pub fn set_attachment_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attachment_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateCase<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_case_input::Builder,
    }
    impl<C, M, R> CreateCase<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateCaseOutput,
            smithy_http::result::SdkError<crate::error::CreateCaseError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateCaseInputOperationOutputAlias,
                crate::output::CreateCaseOutput,
                crate::error::CreateCaseError,
                crate::input::CreateCaseInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The title of the support case. The title appears in the <b>Subject</b> field on the AWS Support Center <a href="https://console.aws.amazon.com/support/home#/case/create">Create Case</a> page.</p>
        pub fn subject(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subject(inp);
            self
        }
        pub fn set_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_subject(input);
            self
        }
        /// <p>The code for the AWS service. You can use the <a>DescribeServices</a>
        /// operation to get the possible <code>serviceCode</code> values.</p>
        pub fn service_code(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_code(inp);
            self
        }
        pub fn set_service_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_service_code(input);
            self
        }
        /// <p>A value that indicates the urgency of the case. This value determines the response
        /// time according to your service level agreement with AWS Support. You can use the <a>DescribeSeverityLevels</a> operation to get the possible values for
        /// <code>severityCode</code>. </p>
        /// <p>For more information, see <a>SeverityLevel</a> and <a href="https://docs.aws.amazon.com/awssupport/latest/user/getting-started.html#choosing-severity">Choosing a
        /// Severity</a> in the <i>AWS Support User Guide</i>.</p>
        /// <note>
        /// <p>The availability of severity levels depends on the support plan for the AWS
        /// account.</p>
        /// </note>
        pub fn severity_code(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.severity_code(inp);
            self
        }
        pub fn set_severity_code(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_severity_code(input);
            self
        }
        /// <p>The category of problem for the support case. You also use the <a>DescribeServices</a> operation to get the category code for a service. Each
        /// AWS service defines its own set of category codes.</p>
        pub fn category_code(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.category_code(inp);
            self
        }
        pub fn set_category_code(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_category_code(input);
            self
        }
        /// <p>The communication body text that describes the issue. This text appears in the
        /// <b>Description</b> field on the AWS Support Center <a href="https://console.aws.amazon.com/support/home#/case/create">Create Case</a> page.</p>
        pub fn communication_body(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.communication_body(inp);
            self
        }
        pub fn set_communication_body(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_communication_body(input);
            self
        }
        /// Appends an item to `ccEmailAddresses`.
        ///
        /// To override the contents of this collection use [`set_cc_email_addresses`](Self::set_cc_email_addresses).
        /// <p>A list of email addresses that AWS Support copies on case correspondence. AWS Support
        /// identifies the account that creates the case when you specify your AWS credentials in an
        /// HTTP POST method or use the <a href="http://aws.amazon.com/tools/">AWS SDKs</a>.
        /// </p>
        pub fn cc_email_addresses(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cc_email_addresses(inp);
            self
        }
        pub fn set_cc_email_addresses(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_cc_email_addresses(input);
            self
        }
        /// <p>The language in which AWS Support handles the case. You must specify the ISO 639-1
        /// code for the <code>language</code> parameter if you want support in that language.
        /// Currently, English ("en") and Japanese ("ja") are supported.</p>
        pub fn language(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.language(inp);
            self
        }
        pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_language(input);
            self
        }
        /// <p>The type of issue for the case. You can specify <code>customer-service</code> or
        /// <code>technical</code>. If you don't specify a value, the default is
        /// <code>technical</code>.</p>
        pub fn issue_type(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.issue_type(inp);
            self
        }
        pub fn set_issue_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_issue_type(input);
            self
        }
        /// <p>The ID of a set of one or more attachments for the case. Create the set by using the
        /// <a>AddAttachmentsToSet</a> operation.</p>
        pub fn attachment_set_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attachment_set_id(inp);
            self
        }
        pub fn set_attachment_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attachment_set_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeAttachment<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_attachment_input::Builder,
    }
    impl<C, M, R> DescribeAttachment<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeAttachmentOutput,
            smithy_http::result::SdkError<crate::error::DescribeAttachmentError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeAttachmentInputOperationOutputAlias,
                crate::output::DescribeAttachmentOutput,
                crate::error::DescribeAttachmentError,
                crate::input::DescribeAttachmentInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the attachment to return. Attachment IDs are returned by the <a>DescribeCommunications</a> operation.</p>
        pub fn attachment_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attachment_id(inp);
            self
        }
        pub fn set_attachment_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attachment_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeCases<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_cases_input::Builder,
    }
    impl<C, M, R> DescribeCases<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeCasesOutput,
            smithy_http::result::SdkError<crate::error::DescribeCasesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeCasesInputOperationOutputAlias,
                crate::output::DescribeCasesOutput,
                crate::error::DescribeCasesError,
                crate::input::DescribeCasesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `caseIdList`.
        ///
        /// To override the contents of this collection use [`set_case_id_list`](Self::set_case_id_list).
        /// <p>A list of ID numbers of the support cases you want returned. The maximum number of
        /// cases is 100.</p>
        pub fn case_id_list(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.case_id_list(inp);
            self
        }
        pub fn set_case_id_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_case_id_list(input);
            self
        }
        /// <p>The ID displayed for a case in the AWS Support Center user interface.</p>
        pub fn display_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.display_id(inp);
            self
        }
        pub fn set_display_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_display_id(input);
            self
        }
        /// <p>The start date for a filtered date search on support case communications. Case
        /// communications are available for 12 months after creation.</p>
        pub fn after_time(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.after_time(inp);
            self
        }
        pub fn set_after_time(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_after_time(input);
            self
        }
        /// <p>The end date for a filtered date search on support case communications. Case
        /// communications are available for 12 months after creation.</p>
        pub fn before_time(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.before_time(inp);
            self
        }
        pub fn set_before_time(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_before_time(input);
            self
        }
        /// <p>Specifies whether to include resolved support cases in the <code>DescribeCases</code>
        /// response. By default, resolved cases aren't included.</p>
        pub fn include_resolved_cases(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_resolved_cases(inp);
            self
        }
        pub fn set_include_resolved_cases(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_resolved_cases(input);
            self
        }
        /// <p>A resumption point for pagination.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return before paginating.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The ISO 639-1 code for the language in which AWS provides support. AWS Support
        /// currently supports English ("en") and Japanese ("ja"). Language parameters must be
        /// passed explicitly for operations that take them.</p>
        pub fn language(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.language(inp);
            self
        }
        pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_language(input);
            self
        }
        /// <p>Specifies whether to include communications in the <code>DescribeCases</code>
        /// response. By default, communications are included.</p>
        pub fn include_communications(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_communications(inp);
            self
        }
        pub fn set_include_communications(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_communications(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeCommunications<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_communications_input::Builder,
    }
    impl<C, M, R> DescribeCommunications<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeCommunicationsOutput,
            smithy_http::result::SdkError<crate::error::DescribeCommunicationsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeCommunicationsInputOperationOutputAlias,
                crate::output::DescribeCommunicationsOutput,
                crate::error::DescribeCommunicationsError,
                crate::input::DescribeCommunicationsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The support case ID requested or returned in the call. The case ID is an
        /// alphanumeric string formatted as shown in this example:
        /// case-<i>12345678910-2013-c4c1d2bf33c5cf47</i>
        /// </p>
        pub fn case_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.case_id(inp);
            self
        }
        pub fn set_case_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_case_id(input);
            self
        }
        /// <p>The end date for a filtered date search on support case communications. Case
        /// communications are available for 12 months after creation.</p>
        pub fn before_time(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.before_time(inp);
            self
        }
        pub fn set_before_time(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_before_time(input);
            self
        }
        /// <p>The start date for a filtered date search on support case communications. Case
        /// communications are available for 12 months after creation.</p>
        pub fn after_time(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.after_time(inp);
            self
        }
        pub fn set_after_time(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_after_time(input);
            self
        }
        /// <p>A resumption point for pagination.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results to return before paginating.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeServices<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_services_input::Builder,
    }
    impl<C, M, R> DescribeServices<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeServicesOutput,
            smithy_http::result::SdkError<crate::error::DescribeServicesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeServicesInputOperationOutputAlias,
                crate::output::DescribeServicesOutput,
                crate::error::DescribeServicesError,
                crate::input::DescribeServicesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `serviceCodeList`.
        ///
        /// To override the contents of this collection use [`set_service_code_list`](Self::set_service_code_list).
        /// <p>A JSON-formatted list of service codes available for AWS services.</p>
        pub fn service_code_list(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_code_list(inp);
            self
        }
        pub fn set_service_code_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_service_code_list(input);
            self
        }
        /// <p>The ISO 639-1 code for the language in which AWS provides support. AWS Support
        /// currently supports English ("en") and Japanese ("ja"). Language parameters must be
        /// passed explicitly for operations that take them.</p>
        pub fn language(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.language(inp);
            self
        }
        pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeSeverityLevels<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_severity_levels_input::Builder,
    }
    impl<C, M, R> DescribeSeverityLevels<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeSeverityLevelsOutput,
            smithy_http::result::SdkError<crate::error::DescribeSeverityLevelsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeSeverityLevelsInputOperationOutputAlias,
                crate::output::DescribeSeverityLevelsOutput,
                crate::error::DescribeSeverityLevelsError,
                crate::input::DescribeSeverityLevelsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ISO 639-1 code for the language in which AWS provides support. AWS Support
        /// currently supports English ("en") and Japanese ("ja"). Language parameters must be
        /// passed explicitly for operations that take them.</p>
        pub fn language(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.language(inp);
            self
        }
        pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTrustedAdvisorCheckRefreshStatuses<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_trusted_advisor_check_refresh_statuses_input::Builder,
    }
    impl<C, M, R> DescribeTrustedAdvisorCheckRefreshStatuses<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeTrustedAdvisorCheckRefreshStatusesOutput,
            smithy_http::result::SdkError<
                crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeTrustedAdvisorCheckRefreshStatusesInputOperationOutputAlias,
                crate::output::DescribeTrustedAdvisorCheckRefreshStatusesOutput,
                crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError,
                crate::input::DescribeTrustedAdvisorCheckRefreshStatusesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `checkIds`.
        ///
        /// To override the contents of this collection use [`set_check_ids`](Self::set_check_ids).
        /// <p>The IDs of the Trusted Advisor checks to get the status.</p>
        /// <note>
        /// <p>If you specify the check ID of a check that is automatically refreshed, you might
        /// see an <code>InvalidParameterValue</code> error.</p>
        /// </note>
        pub fn check_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.check_ids(inp);
            self
        }
        pub fn set_check_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_check_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTrustedAdvisorCheckResult<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_trusted_advisor_check_result_input::Builder,
    }
    impl<C, M, R> DescribeTrustedAdvisorCheckResult<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeTrustedAdvisorCheckResultOutput,
            smithy_http::result::SdkError<crate::error::DescribeTrustedAdvisorCheckResultError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeTrustedAdvisorCheckResultInputOperationOutputAlias,
                crate::output::DescribeTrustedAdvisorCheckResultOutput,
                crate::error::DescribeTrustedAdvisorCheckResultError,
                crate::input::DescribeTrustedAdvisorCheckResultInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier for the Trusted Advisor check.</p>
        pub fn check_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.check_id(inp);
            self
        }
        pub fn set_check_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_check_id(input);
            self
        }
        /// <p>The ISO 639-1 code for the language in which AWS provides support. AWS Support
        /// currently supports English ("en") and Japanese ("ja"). Language parameters must be
        /// passed explicitly for operations that take them.</p>
        pub fn language(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.language(inp);
            self
        }
        pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTrustedAdvisorChecks<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_trusted_advisor_checks_input::Builder,
    }
    impl<C, M, R> DescribeTrustedAdvisorChecks<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeTrustedAdvisorChecksOutput,
            smithy_http::result::SdkError<crate::error::DescribeTrustedAdvisorChecksError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeTrustedAdvisorChecksInputOperationOutputAlias,
                crate::output::DescribeTrustedAdvisorChecksOutput,
                crate::error::DescribeTrustedAdvisorChecksError,
                crate::input::DescribeTrustedAdvisorChecksInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ISO 639-1 code for the language in which AWS provides support. AWS Support
        /// currently supports English ("en") and Japanese ("ja"). Language parameters must be
        /// passed explicitly for operations that take them.</p>
        pub fn language(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.language(inp);
            self
        }
        pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_language(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTrustedAdvisorCheckSummaries<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_trusted_advisor_check_summaries_input::Builder,
    }
    impl<C, M, R> DescribeTrustedAdvisorCheckSummaries<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeTrustedAdvisorCheckSummariesOutput,
            smithy_http::result::SdkError<crate::error::DescribeTrustedAdvisorCheckSummariesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeTrustedAdvisorCheckSummariesInputOperationOutputAlias,
                crate::output::DescribeTrustedAdvisorCheckSummariesOutput,
                crate::error::DescribeTrustedAdvisorCheckSummariesError,
                crate::input::DescribeTrustedAdvisorCheckSummariesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `checkIds`.
        ///
        /// To override the contents of this collection use [`set_check_ids`](Self::set_check_ids).
        /// <p>The IDs of the Trusted Advisor checks.</p>
        pub fn check_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.check_ids(inp);
            self
        }
        pub fn set_check_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_check_ids(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RefreshTrustedAdvisorCheck<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::refresh_trusted_advisor_check_input::Builder,
    }
    impl<C, M, R> RefreshTrustedAdvisorCheck<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RefreshTrustedAdvisorCheckOutput,
            smithy_http::result::SdkError<crate::error::RefreshTrustedAdvisorCheckError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RefreshTrustedAdvisorCheckInputOperationOutputAlias,
                crate::output::RefreshTrustedAdvisorCheckOutput,
                crate::error::RefreshTrustedAdvisorCheckError,
                crate::input::RefreshTrustedAdvisorCheckInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier for the Trusted Advisor check to refresh.</p>     
        /// <note>
        /// <p>Specifying the check ID of a check that is automatically refreshed
        /// causes an <code>InvalidParameterValue</code> error.</p>
        /// </note>
        pub fn check_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.check_id(inp);
            self
        }
        pub fn set_check_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_check_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ResolveCase<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::resolve_case_input::Builder,
    }
    impl<C, M, R> ResolveCase<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ResolveCaseOutput,
            smithy_http::result::SdkError<crate::error::ResolveCaseError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ResolveCaseInputOperationOutputAlias,
                crate::output::ResolveCaseOutput,
                crate::error::ResolveCaseError,
                crate::input::ResolveCaseInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The support case ID requested or returned in the call. The case ID is an
        /// alphanumeric string formatted as shown in this example:
        /// case-<i>12345678910-2013-c4c1d2bf33c5cf47</i>
        /// </p>
        pub fn case_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.case_id(inp);
            self
        }
        pub fn set_case_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_case_id(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::new(conn).with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::https().with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
