// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A communication associated with a support case. The communication consists of the case ID, the message body, attachment information, the submitter of the communication, and the date and time of the communication.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Communication {
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub case_id: ::std::option::Option<::std::string::String>,
    /// <p>The text of the communication between the customer and Amazon Web Services Support.</p>
    pub body: ::std::option::Option<::std::string::String>,
    /// <p>The identity of the account that submitted, or responded to, the support case. Customer entries include the IAM role as well as the email address (for example, "AdminRole (Role) <janedoe@example.com>
    /// ). Entries from the Amazon Web Services Support team display "Amazon Web Services," and don't show an email address.
    /// </janedoe@example.com></p>
    pub submitted_by: ::std::option::Option<::std::string::String>,
    /// <p>The time the communication was created.</p>
    pub time_created: ::std::option::Option<::std::string::String>,
    /// <p>Information about the attachments to the case communication.</p>
    pub attachment_set: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentDetails>>,
}
impl Communication {
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub fn case_id(&self) -> ::std::option::Option<&str> {
        self.case_id.as_deref()
    }
    /// <p>The text of the communication between the customer and Amazon Web Services Support.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>The identity of the account that submitted, or responded to, the support case. Customer entries include the IAM role as well as the email address (for example, "AdminRole (Role) <janedoe@example.com>
    /// ). Entries from the Amazon Web Services Support team display "Amazon Web Services," and don't show an email address.
    /// </janedoe@example.com></p>
    pub fn submitted_by(&self) -> ::std::option::Option<&str> {
        self.submitted_by.as_deref()
    }
    /// <p>The time the communication was created.</p>
    pub fn time_created(&self) -> ::std::option::Option<&str> {
        self.time_created.as_deref()
    }
    /// <p>Information about the attachments to the case communication.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attachment_set.is_none()`.
    pub fn attachment_set(&self) -> &[crate::types::AttachmentDetails] {
        self.attachment_set.as_deref().unwrap_or_default()
    }
}
impl Communication {
    /// Creates a new builder-style object to manufacture [`Communication`](crate::types::Communication).
    pub fn builder() -> crate::types::builders::CommunicationBuilder {
        crate::types::builders::CommunicationBuilder::default()
    }
}

/// A builder for [`Communication`](crate::types::Communication).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CommunicationBuilder {
    pub(crate) case_id: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
    pub(crate) submitted_by: ::std::option::Option<::std::string::String>,
    pub(crate) time_created: ::std::option::Option<::std::string::String>,
    pub(crate) attachment_set: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentDetails>>,
}
impl CommunicationBuilder {
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub fn case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub fn set_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_id = input;
        self
    }
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub fn get_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_id
    }
    /// <p>The text of the communication between the customer and Amazon Web Services Support.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text of the communication between the customer and Amazon Web Services Support.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The text of the communication between the customer and Amazon Web Services Support.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// <p>The identity of the account that submitted, or responded to, the support case. Customer entries include the IAM role as well as the email address (for example, "AdminRole (Role) <janedoe@example.com>
    /// ). Entries from the Amazon Web Services Support team display "Amazon Web Services," and don't show an email address.
    /// </janedoe@example.com></p>
    pub fn submitted_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.submitted_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identity of the account that submitted, or responded to, the support case. Customer entries include the IAM role as well as the email address (for example, "AdminRole (Role) <janedoe@example.com>
    /// ). Entries from the Amazon Web Services Support team display "Amazon Web Services," and don't show an email address.
    /// </janedoe@example.com></p>
    pub fn set_submitted_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.submitted_by = input;
        self
    }
    /// <p>The identity of the account that submitted, or responded to, the support case. Customer entries include the IAM role as well as the email address (for example, "AdminRole (Role) <janedoe@example.com>
    /// ). Entries from the Amazon Web Services Support team display "Amazon Web Services," and don't show an email address.
    /// </janedoe@example.com></p>
    pub fn get_submitted_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.submitted_by
    }
    /// <p>The time the communication was created.</p>
    pub fn time_created(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_created = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time the communication was created.</p>
    pub fn set_time_created(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_created = input;
        self
    }
    /// <p>The time the communication was created.</p>
    pub fn get_time_created(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_created
    }
    /// Appends an item to `attachment_set`.
    ///
    /// To override the contents of this collection use [`set_attachment_set`](Self::set_attachment_set).
    ///
    /// <p>Information about the attachments to the case communication.</p>
    pub fn attachment_set(mut self, input: crate::types::AttachmentDetails) -> Self {
        let mut v = self.attachment_set.unwrap_or_default();
        v.push(input);
        self.attachment_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the attachments to the case communication.</p>
    pub fn set_attachment_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentDetails>>) -> Self {
        self.attachment_set = input;
        self
    }
    /// <p>Information about the attachments to the case communication.</p>
    pub fn get_attachment_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttachmentDetails>> {
        &self.attachment_set
    }
    /// Consumes the builder and constructs a [`Communication`](crate::types::Communication).
    pub fn build(self) -> crate::types::Communication {
        crate::types::Communication {
            case_id: self.case_id,
            body: self.body,
            submitted_by: self.submitted_by,
            time_created: self.time_created,
            attachment_set: self.attachment_set,
        }
    }
}
