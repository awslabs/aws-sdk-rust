// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON-formatted object that contains the metadata for a support case. It is contained in the response from a <code>DescribeCases</code> request. <b>CaseDetails</b> contains the following fields:</p>
/// <ul>
/// <li> <p> <b>caseId</b> - The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i>.</p> </li>
/// <li> <p> <b>categoryCode</b> - The category of problem for the support case. Corresponds to the <code>CategoryCode</code> values returned by a call to <code>DescribeServices</code>.</p> </li>
/// <li> <p> <b>displayId</b> - The identifier for the case on pages in the Amazon Web Services Support Center.</p> </li>
/// <li> <p> <b>language</b> - The language in which Amazon Web Services Support handles the case. Amazon Web Services Support currently supports Chinese (“zh”), English ("en"), Japanese ("ja") and Korean (“ko”). You must specify the ISO 639-1 code for the <code>language</code> parameter if you want support in that language.</p> </li>
/// <li> <p> <b>nextToken</b> - A resumption point for pagination.</p> </li>
/// <li> <p> <b>recentCommunications</b> - One or more <code>Communication</code> objects. Fields of these objects are <code>attachments</code>, <code>body</code>, <code>caseId</code>, <code>submittedBy</code>, and <code>timeCreated</code>.</p> </li>
/// <li> <p> <b>serviceCode</b> - The identifier for the Amazon Web Services service that corresponds to the service code defined in the call to <code>DescribeServices</code>.</p> </li>
/// <li> <p> <b>severityCode</b> - The severity code assigned to the case. Contains one of the values returned by the call to <code>DescribeSeverityLevels</code>. The possible values are: <code>low</code>, <code>normal</code>, <code>high</code>, <code>urgent</code>, and <code>critical</code>.</p> </li>
/// <li> <p> <b>status</b> - The status of the case in the Amazon Web Services Support Center. Valid values:</p>
/// <ul>
/// <li> <p> <code>opened</code> </p> </li>
/// <li> <p> <code>pending-customer-action</code> </p> </li>
/// <li> <p> <code>reopened</code> </p> </li>
/// <li> <p> <code>resolved</code> </p> </li>
/// <li> <p> <code>unassigned</code> </p> </li>
/// <li> <p> <code>work-in-progress</code> </p> </li>
/// </ul> </li>
/// <li> <p> <b>subject</b> - The subject line of the case.</p> </li>
/// <li> <p> <b>submittedBy</b> - The email address of the account that submitted the case.</p> </li>
/// <li> <p> <b>timeCreated</b> - The time the case was created, in ISO-8601 format.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CaseDetails {
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub case_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID displayed for the case in the Amazon Web Services Support Center. This is a numeric string.</p>
    pub display_id: ::std::option::Option<::std::string::String>,
    /// <p>The subject line for the case in the Amazon Web Services Support Center.</p>
    pub subject: ::std::option::Option<::std::string::String>,
    /// <p>The status of the case.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>opened</code> </p> </li>
    /// <li> <p> <code>pending-customer-action</code> </p> </li>
    /// <li> <p> <code>reopened</code> </p> </li>
    /// <li> <p> <code>resolved</code> </p> </li>
    /// <li> <p> <code>unassigned</code> </p> </li>
    /// <li> <p> <code>work-in-progress</code> </p> </li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The code for the Amazon Web Services service. You can get a list of codes and the corresponding service names by calling <code>DescribeServices</code>.</p>
    pub service_code: ::std::option::Option<::std::string::String>,
    /// <p>The category of problem for the support case.</p>
    pub category_code: ::std::option::Option<::std::string::String>,
    /// <p>The code for the severity level returned by the call to <code>DescribeSeverityLevels</code>.</p>
    pub severity_code: ::std::option::Option<::std::string::String>,
    /// <p>The email address of the account that submitted the case.</p>
    pub submitted_by: ::std::option::Option<::std::string::String>,
    /// <p>The time that the case was created in the Amazon Web Services Support Center.</p>
    pub time_created: ::std::option::Option<::std::string::String>,
    /// <p>The five most recent communications between you and Amazon Web Services Support Center, including the IDs of any attachments to the communications. Also includes a <code>nextToken</code> that you can use to retrieve earlier communications.</p>
    pub recent_communications: ::std::option::Option<crate::types::RecentCaseCommunications>,
    /// <p>The email addresses that receive copies of communication about the case.</p>
    pub cc_email_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The language in which Amazon Web Services Support handles the case. Amazon Web Services Support currently supports Chinese (“zh”), English ("en"), Japanese ("ja") and Korean (“ko”). You must specify the ISO 639-1 code for the <code>language</code> parameter if you want support in that language.</p>
    pub language: ::std::option::Option<::std::string::String>,
}
impl CaseDetails {
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub fn case_id(&self) -> ::std::option::Option<&str> {
        self.case_id.as_deref()
    }
    /// <p>The ID displayed for the case in the Amazon Web Services Support Center. This is a numeric string.</p>
    pub fn display_id(&self) -> ::std::option::Option<&str> {
        self.display_id.as_deref()
    }
    /// <p>The subject line for the case in the Amazon Web Services Support Center.</p>
    pub fn subject(&self) -> ::std::option::Option<&str> {
        self.subject.as_deref()
    }
    /// <p>The status of the case.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>opened</code> </p> </li>
    /// <li> <p> <code>pending-customer-action</code> </p> </li>
    /// <li> <p> <code>reopened</code> </p> </li>
    /// <li> <p> <code>resolved</code> </p> </li>
    /// <li> <p> <code>unassigned</code> </p> </li>
    /// <li> <p> <code>work-in-progress</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The code for the Amazon Web Services service. You can get a list of codes and the corresponding service names by calling <code>DescribeServices</code>.</p>
    pub fn service_code(&self) -> ::std::option::Option<&str> {
        self.service_code.as_deref()
    }
    /// <p>The category of problem for the support case.</p>
    pub fn category_code(&self) -> ::std::option::Option<&str> {
        self.category_code.as_deref()
    }
    /// <p>The code for the severity level returned by the call to <code>DescribeSeverityLevels</code>.</p>
    pub fn severity_code(&self) -> ::std::option::Option<&str> {
        self.severity_code.as_deref()
    }
    /// <p>The email address of the account that submitted the case.</p>
    pub fn submitted_by(&self) -> ::std::option::Option<&str> {
        self.submitted_by.as_deref()
    }
    /// <p>The time that the case was created in the Amazon Web Services Support Center.</p>
    pub fn time_created(&self) -> ::std::option::Option<&str> {
        self.time_created.as_deref()
    }
    /// <p>The five most recent communications between you and Amazon Web Services Support Center, including the IDs of any attachments to the communications. Also includes a <code>nextToken</code> that you can use to retrieve earlier communications.</p>
    pub fn recent_communications(&self) -> ::std::option::Option<&crate::types::RecentCaseCommunications> {
        self.recent_communications.as_ref()
    }
    /// <p>The email addresses that receive copies of communication about the case.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cc_email_addresses.is_none()`.
    pub fn cc_email_addresses(&self) -> &[::std::string::String] {
        self.cc_email_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The language in which Amazon Web Services Support handles the case. Amazon Web Services Support currently supports Chinese (“zh”), English ("en"), Japanese ("ja") and Korean (“ko”). You must specify the ISO 639-1 code for the <code>language</code> parameter if you want support in that language.</p>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
}
impl CaseDetails {
    /// Creates a new builder-style object to manufacture [`CaseDetails`](crate::types::CaseDetails).
    pub fn builder() -> crate::types::builders::CaseDetailsBuilder {
        crate::types::builders::CaseDetailsBuilder::default()
    }
}

/// A builder for [`CaseDetails`](crate::types::CaseDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CaseDetailsBuilder {
    pub(crate) case_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_id: ::std::option::Option<::std::string::String>,
    pub(crate) subject: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) category_code: ::std::option::Option<::std::string::String>,
    pub(crate) severity_code: ::std::option::Option<::std::string::String>,
    pub(crate) submitted_by: ::std::option::Option<::std::string::String>,
    pub(crate) time_created: ::std::option::Option<::std::string::String>,
    pub(crate) recent_communications: ::std::option::Option<crate::types::RecentCaseCommunications>,
    pub(crate) cc_email_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
}
impl CaseDetailsBuilder {
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub fn case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub fn set_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_id = input;
        self
    }
    /// <p>The support case ID requested or returned in the call. The case ID is an alphanumeric string formatted as shown in this example: case-<i>12345678910-2013-c4c1d2bf33c5cf47</i> </p>
    pub fn get_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_id
    }
    /// <p>The ID displayed for the case in the Amazon Web Services Support Center. This is a numeric string.</p>
    pub fn display_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID displayed for the case in the Amazon Web Services Support Center. This is a numeric string.</p>
    pub fn set_display_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_id = input;
        self
    }
    /// <p>The ID displayed for the case in the Amazon Web Services Support Center. This is a numeric string.</p>
    pub fn get_display_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_id
    }
    /// <p>The subject line for the case in the Amazon Web Services Support Center.</p>
    pub fn subject(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subject = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subject line for the case in the Amazon Web Services Support Center.</p>
    pub fn set_subject(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subject = input;
        self
    }
    /// <p>The subject line for the case in the Amazon Web Services Support Center.</p>
    pub fn get_subject(&self) -> &::std::option::Option<::std::string::String> {
        &self.subject
    }
    /// <p>The status of the case.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>opened</code> </p> </li>
    /// <li> <p> <code>pending-customer-action</code> </p> </li>
    /// <li> <p> <code>reopened</code> </p> </li>
    /// <li> <p> <code>resolved</code> </p> </li>
    /// <li> <p> <code>unassigned</code> </p> </li>
    /// <li> <p> <code>work-in-progress</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the case.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>opened</code> </p> </li>
    /// <li> <p> <code>pending-customer-action</code> </p> </li>
    /// <li> <p> <code>reopened</code> </p> </li>
    /// <li> <p> <code>resolved</code> </p> </li>
    /// <li> <p> <code>unassigned</code> </p> </li>
    /// <li> <p> <code>work-in-progress</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the case.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>opened</code> </p> </li>
    /// <li> <p> <code>pending-customer-action</code> </p> </li>
    /// <li> <p> <code>reopened</code> </p> </li>
    /// <li> <p> <code>resolved</code> </p> </li>
    /// <li> <p> <code>unassigned</code> </p> </li>
    /// <li> <p> <code>work-in-progress</code> </p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The code for the Amazon Web Services service. You can get a list of codes and the corresponding service names by calling <code>DescribeServices</code>.</p>
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code for the Amazon Web Services service. You can get a list of codes and the corresponding service names by calling <code>DescribeServices</code>.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The code for the Amazon Web Services service. You can get a list of codes and the corresponding service names by calling <code>DescribeServices</code>.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>The category of problem for the support case.</p>
    pub fn category_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category of problem for the support case.</p>
    pub fn set_category_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category_code = input;
        self
    }
    /// <p>The category of problem for the support case.</p>
    pub fn get_category_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.category_code
    }
    /// <p>The code for the severity level returned by the call to <code>DescribeSeverityLevels</code>.</p>
    pub fn severity_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.severity_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code for the severity level returned by the call to <code>DescribeSeverityLevels</code>.</p>
    pub fn set_severity_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.severity_code = input;
        self
    }
    /// <p>The code for the severity level returned by the call to <code>DescribeSeverityLevels</code>.</p>
    pub fn get_severity_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.severity_code
    }
    /// <p>The email address of the account that submitted the case.</p>
    pub fn submitted_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.submitted_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address of the account that submitted the case.</p>
    pub fn set_submitted_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.submitted_by = input;
        self
    }
    /// <p>The email address of the account that submitted the case.</p>
    pub fn get_submitted_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.submitted_by
    }
    /// <p>The time that the case was created in the Amazon Web Services Support Center.</p>
    pub fn time_created(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_created = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time that the case was created in the Amazon Web Services Support Center.</p>
    pub fn set_time_created(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_created = input;
        self
    }
    /// <p>The time that the case was created in the Amazon Web Services Support Center.</p>
    pub fn get_time_created(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_created
    }
    /// <p>The five most recent communications between you and Amazon Web Services Support Center, including the IDs of any attachments to the communications. Also includes a <code>nextToken</code> that you can use to retrieve earlier communications.</p>
    pub fn recent_communications(mut self, input: crate::types::RecentCaseCommunications) -> Self {
        self.recent_communications = ::std::option::Option::Some(input);
        self
    }
    /// <p>The five most recent communications between you and Amazon Web Services Support Center, including the IDs of any attachments to the communications. Also includes a <code>nextToken</code> that you can use to retrieve earlier communications.</p>
    pub fn set_recent_communications(mut self, input: ::std::option::Option<crate::types::RecentCaseCommunications>) -> Self {
        self.recent_communications = input;
        self
    }
    /// <p>The five most recent communications between you and Amazon Web Services Support Center, including the IDs of any attachments to the communications. Also includes a <code>nextToken</code> that you can use to retrieve earlier communications.</p>
    pub fn get_recent_communications(&self) -> &::std::option::Option<crate::types::RecentCaseCommunications> {
        &self.recent_communications
    }
    /// Appends an item to `cc_email_addresses`.
    ///
    /// To override the contents of this collection use [`set_cc_email_addresses`](Self::set_cc_email_addresses).
    ///
    /// <p>The email addresses that receive copies of communication about the case.</p>
    pub fn cc_email_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cc_email_addresses.unwrap_or_default();
        v.push(input.into());
        self.cc_email_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The email addresses that receive copies of communication about the case.</p>
    pub fn set_cc_email_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cc_email_addresses = input;
        self
    }
    /// <p>The email addresses that receive copies of communication about the case.</p>
    pub fn get_cc_email_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cc_email_addresses
    }
    /// <p>The language in which Amazon Web Services Support handles the case. Amazon Web Services Support currently supports Chinese (“zh”), English ("en"), Japanese ("ja") and Korean (“ko”). You must specify the ISO 639-1 code for the <code>language</code> parameter if you want support in that language.</p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language in which Amazon Web Services Support handles the case. Amazon Web Services Support currently supports Chinese (“zh”), English ("en"), Japanese ("ja") and Korean (“ko”). You must specify the ISO 639-1 code for the <code>language</code> parameter if you want support in that language.</p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>The language in which Amazon Web Services Support handles the case. Amazon Web Services Support currently supports Chinese (“zh”), English ("en"), Japanese ("ja") and Korean (“ko”). You must specify the ISO 639-1 code for the <code>language</code> parameter if you want support in that language.</p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// Consumes the builder and constructs a [`CaseDetails`](crate::types::CaseDetails).
    pub fn build(self) -> crate::types::CaseDetails {
        crate::types::CaseDetails {
            case_id: self.case_id,
            display_id: self.display_id,
            subject: self.subject,
            status: self.status,
            service_code: self.service_code,
            category_code: self.category_code,
            severity_code: self.severity_code,
            submitted_by: self.submitted_by,
            time_created: self.time_created,
            recent_communications: self.recent_communications,
            cc_email_addresses: self.cc_email_addresses,
            language: self.language,
        }
    }
}
