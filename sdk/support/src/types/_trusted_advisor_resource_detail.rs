// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a resource identified by a Trusted Advisor check.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrustedAdvisorResourceDetail {
    /// <p>The status code for the resource identified in the Trusted Advisor check.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region in which the identified resource is located.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the identified resource.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether the Amazon Web Services resource was ignored by Trusted Advisor because it was marked as suppressed by the user.</p>
    #[doc(hidden)]
    pub is_suppressed: bool,
    /// <p>Additional information about the identified resource. The exact metadata and its order can be obtained by inspecting the <code>TrustedAdvisorCheckDescription</code> object returned by the call to <code>DescribeTrustedAdvisorChecks</code>. <b>Metadata</b> contains all the data that is shown in the Excel download, even in those cases where the UI shows just summary data.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TrustedAdvisorResourceDetail {
    /// <p>The status code for the resource identified in the Trusted Advisor check.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The Amazon Web Services Region in which the identified resource is located.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The unique identifier for the identified resource.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>Specifies whether the Amazon Web Services resource was ignored by Trusted Advisor because it was marked as suppressed by the user.</p>
    pub fn is_suppressed(&self) -> bool {
        self.is_suppressed
    }
    /// <p>Additional information about the identified resource. The exact metadata and its order can be obtained by inspecting the <code>TrustedAdvisorCheckDescription</code> object returned by the call to <code>DescribeTrustedAdvisorChecks</code>. <b>Metadata</b> contains all the data that is shown in the Excel download, even in those cases where the UI shows just summary data.</p>
    pub fn metadata(&self) -> std::option::Option<&[std::string::String]> {
        self.metadata.as_deref()
    }
}
impl TrustedAdvisorResourceDetail {
    /// Creates a new builder-style object to manufacture [`TrustedAdvisorResourceDetail`](crate::types::TrustedAdvisorResourceDetail).
    pub fn builder() -> crate::types::builders::TrustedAdvisorResourceDetailBuilder {
        crate::types::builders::TrustedAdvisorResourceDetailBuilder::default()
    }
}

/// A builder for [`TrustedAdvisorResourceDetail`](crate::types::TrustedAdvisorResourceDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrustedAdvisorResourceDetailBuilder {
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) is_suppressed: std::option::Option<bool>,
    pub(crate) metadata: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TrustedAdvisorResourceDetailBuilder {
    /// <p>The status code for the resource identified in the Trusted Advisor check.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status code for the resource identified in the Trusted Advisor check.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Web Services Region in which the identified resource is located.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region in which the identified resource is located.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The unique identifier for the identified resource.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the identified resource.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>Specifies whether the Amazon Web Services resource was ignored by Trusted Advisor because it was marked as suppressed by the user.</p>
    pub fn is_suppressed(mut self, input: bool) -> Self {
        self.is_suppressed = Some(input);
        self
    }
    /// <p>Specifies whether the Amazon Web Services resource was ignored by Trusted Advisor because it was marked as suppressed by the user.</p>
    pub fn set_is_suppressed(mut self, input: std::option::Option<bool>) -> Self {
        self.is_suppressed = input;
        self
    }
    /// Appends an item to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>Additional information about the identified resource. The exact metadata and its order can be obtained by inspecting the <code>TrustedAdvisorCheckDescription</code> object returned by the call to <code>DescribeTrustedAdvisorChecks</code>. <b>Metadata</b> contains all the data that is shown in the Excel download, even in those cases where the UI shows just summary data.</p>
    pub fn metadata(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.metadata.unwrap_or_default();
        v.push(input.into());
        self.metadata = Some(v);
        self
    }
    /// <p>Additional information about the identified resource. The exact metadata and its order can be obtained by inspecting the <code>TrustedAdvisorCheckDescription</code> object returned by the call to <code>DescribeTrustedAdvisorChecks</code>. <b>Metadata</b> contains all the data that is shown in the Excel download, even in those cases where the UI shows just summary data.</p>
    pub fn set_metadata(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`TrustedAdvisorResourceDetail`](crate::types::TrustedAdvisorResourceDetail).
    pub fn build(self) -> crate::types::TrustedAdvisorResourceDetail {
        crate::types::TrustedAdvisorResourceDetail {
            status: self.status,
            region: self.region,
            resource_id: self.resource_id,
            is_suppressed: self.is_suppressed.unwrap_or_default(),
            metadata: self.metadata,
        }
    }
}
