// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an Amazon Web Services service returned by the <code>DescribeServices</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Service {
    /// <p>The code for an Amazon Web Services service returned by the <code>DescribeServices</code> response. The <code>name</code> element contains the corresponding friendly name.</p>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>The friendly name for an Amazon Web Services service. The <code>code</code> element contains the corresponding code.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A list of categories that describe the type of support issue a case describes. Categories consist of a category name and a category code. Category names and codes are passed to Amazon Web Services Support when you call <code>CreateCase</code>.</p>
    #[doc(hidden)]
    pub categories: std::option::Option<std::vec::Vec<crate::types::Category>>,
}
impl Service {
    /// <p>The code for an Amazon Web Services service returned by the <code>DescribeServices</code> response. The <code>name</code> element contains the corresponding friendly name.</p>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>The friendly name for an Amazon Web Services service. The <code>code</code> element contains the corresponding code.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A list of categories that describe the type of support issue a case describes. Categories consist of a category name and a category code. Category names and codes are passed to Amazon Web Services Support when you call <code>CreateCase</code>.</p>
    pub fn categories(&self) -> std::option::Option<&[crate::types::Category]> {
        self.categories.as_deref()
    }
}
impl Service {
    /// Creates a new builder-style object to manufacture [`Service`](crate::types::Service).
    pub fn builder() -> crate::types::builders::ServiceBuilder {
        crate::types::builders::ServiceBuilder::default()
    }
}

/// A builder for [`Service`](crate::types::Service).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceBuilder {
    pub(crate) code: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) categories: std::option::Option<std::vec::Vec<crate::types::Category>>,
}
impl ServiceBuilder {
    /// <p>The code for an Amazon Web Services service returned by the <code>DescribeServices</code> response. The <code>name</code> element contains the corresponding friendly name.</p>
    pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
        self.code = Some(input.into());
        self
    }
    /// <p>The code for an Amazon Web Services service returned by the <code>DescribeServices</code> response. The <code>name</code> element contains the corresponding friendly name.</p>
    pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The friendly name for an Amazon Web Services service. The <code>code</code> element contains the corresponding code.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The friendly name for an Amazon Web Services service. The <code>code</code> element contains the corresponding code.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `categories`.
    ///
    /// To override the contents of this collection use [`set_categories`](Self::set_categories).
    ///
    /// <p>A list of categories that describe the type of support issue a case describes. Categories consist of a category name and a category code. Category names and codes are passed to Amazon Web Services Support when you call <code>CreateCase</code>.</p>
    pub fn categories(mut self, input: crate::types::Category) -> Self {
        let mut v = self.categories.unwrap_or_default();
        v.push(input);
        self.categories = Some(v);
        self
    }
    /// <p>A list of categories that describe the type of support issue a case describes. Categories consist of a category name and a category code. Category names and codes are passed to Amazon Web Services Support when you call <code>CreateCase</code>.</p>
    pub fn set_categories(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Category>>,
    ) -> Self {
        self.categories = input;
        self
    }
    /// Consumes the builder and constructs a [`Service`](crate::types::Service).
    pub fn build(self) -> crate::types::Service {
        crate::types::Service {
            code: self.code,
            name: self.name,
            categories: self.categories,
        }
    }
}
