// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON-formatted name/value pair that represents the category name and category code of the problem, selected from the <code>DescribeServices</code> response for each Amazon Web Services service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Category {
    /// <p>The category code for the support case.</p>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>The category name for the support case.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl Category {
    /// <p>The category code for the support case.</p>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>The category name for the support case.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl Category {
    /// Creates a new builder-style object to manufacture [`Category`](crate::types::Category).
    pub fn builder() -> crate::types::builders::CategoryBuilder {
        crate::types::builders::CategoryBuilder::default()
    }
}

/// A builder for [`Category`](crate::types::Category).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CategoryBuilder {
    pub(crate) code: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl CategoryBuilder {
    /// <p>The category code for the support case.</p>
    pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
        self.code = Some(input.into());
        self
    }
    /// <p>The category code for the support case.</p>
    pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The category name for the support case.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The category name for the support case.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`Category`](crate::types::Category).
    pub fn build(self) -> crate::types::Category {
        crate::types::Category {
            code: self.code,
            name: self.name,
        }
    }
}
