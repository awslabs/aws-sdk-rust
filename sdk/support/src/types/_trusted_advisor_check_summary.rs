// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a Trusted Advisor check result, including the alert status, last refresh, and number of resources examined.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrustedAdvisorCheckSummary {
    /// <p>The unique identifier for the Trusted Advisor check.</p>
    pub check_id: ::std::string::String,
    /// <p>The time of the last refresh of the check.</p>
    pub timestamp: ::std::string::String,
    /// <p>The alert status of the check: "ok" (green), "warning" (yellow), "error" (red), or "not_available".</p>
    pub status: ::std::string::String,
    /// <p>Specifies whether the Trusted Advisor check has flagged resources.</p>
    pub has_flagged_resources: bool,
    /// <p>Details about Amazon Web Services resources that were analyzed in a call to Trusted Advisor <code>DescribeTrustedAdvisorCheckSummaries</code>.</p>
    pub resources_summary: ::std::option::Option<crate::types::TrustedAdvisorResourcesSummary>,
    /// <p>Summary information that relates to the category of the check. Cost Optimizing is the only category that is currently supported.</p>
    pub category_specific_summary: ::std::option::Option<crate::types::TrustedAdvisorCategorySpecificSummary>,
}
impl TrustedAdvisorCheckSummary {
    /// <p>The unique identifier for the Trusted Advisor check.</p>
    pub fn check_id(&self) -> &str {
        use std::ops::Deref;
        self.check_id.deref()
    }
    /// <p>The time of the last refresh of the check.</p>
    pub fn timestamp(&self) -> &str {
        use std::ops::Deref;
        self.timestamp.deref()
    }
    /// <p>The alert status of the check: "ok" (green), "warning" (yellow), "error" (red), or "not_available".</p>
    pub fn status(&self) -> &str {
        use std::ops::Deref;
        self.status.deref()
    }
    /// <p>Specifies whether the Trusted Advisor check has flagged resources.</p>
    pub fn has_flagged_resources(&self) -> bool {
        self.has_flagged_resources
    }
    /// <p>Details about Amazon Web Services resources that were analyzed in a call to Trusted Advisor <code>DescribeTrustedAdvisorCheckSummaries</code>.</p>
    pub fn resources_summary(&self) -> ::std::option::Option<&crate::types::TrustedAdvisorResourcesSummary> {
        self.resources_summary.as_ref()
    }
    /// <p>Summary information that relates to the category of the check. Cost Optimizing is the only category that is currently supported.</p>
    pub fn category_specific_summary(&self) -> ::std::option::Option<&crate::types::TrustedAdvisorCategorySpecificSummary> {
        self.category_specific_summary.as_ref()
    }
}
impl TrustedAdvisorCheckSummary {
    /// Creates a new builder-style object to manufacture [`TrustedAdvisorCheckSummary`](crate::types::TrustedAdvisorCheckSummary).
    pub fn builder() -> crate::types::builders::TrustedAdvisorCheckSummaryBuilder {
        crate::types::builders::TrustedAdvisorCheckSummaryBuilder::default()
    }
}

/// A builder for [`TrustedAdvisorCheckSummary`](crate::types::TrustedAdvisorCheckSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TrustedAdvisorCheckSummaryBuilder {
    pub(crate) check_id: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) has_flagged_resources: ::std::option::Option<bool>,
    pub(crate) resources_summary: ::std::option::Option<crate::types::TrustedAdvisorResourcesSummary>,
    pub(crate) category_specific_summary: ::std::option::Option<crate::types::TrustedAdvisorCategorySpecificSummary>,
}
impl TrustedAdvisorCheckSummaryBuilder {
    /// <p>The unique identifier for the Trusted Advisor check.</p>
    /// This field is required.
    pub fn check_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.check_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the Trusted Advisor check.</p>
    pub fn set_check_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.check_id = input;
        self
    }
    /// <p>The unique identifier for the Trusted Advisor check.</p>
    pub fn get_check_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.check_id
    }
    /// <p>The time of the last refresh of the check.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timestamp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time of the last refresh of the check.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The time of the last refresh of the check.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::std::string::String> {
        &self.timestamp
    }
    /// <p>The alert status of the check: "ok" (green), "warning" (yellow), "error" (red), or "not_available".</p>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alert status of the check: "ok" (green), "warning" (yellow), "error" (red), or "not_available".</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The alert status of the check: "ok" (green), "warning" (yellow), "error" (red), or "not_available".</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Specifies whether the Trusted Advisor check has flagged resources.</p>
    pub fn has_flagged_resources(mut self, input: bool) -> Self {
        self.has_flagged_resources = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the Trusted Advisor check has flagged resources.</p>
    pub fn set_has_flagged_resources(mut self, input: ::std::option::Option<bool>) -> Self {
        self.has_flagged_resources = input;
        self
    }
    /// <p>Specifies whether the Trusted Advisor check has flagged resources.</p>
    pub fn get_has_flagged_resources(&self) -> &::std::option::Option<bool> {
        &self.has_flagged_resources
    }
    /// <p>Details about Amazon Web Services resources that were analyzed in a call to Trusted Advisor <code>DescribeTrustedAdvisorCheckSummaries</code>.</p>
    /// This field is required.
    pub fn resources_summary(mut self, input: crate::types::TrustedAdvisorResourcesSummary) -> Self {
        self.resources_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about Amazon Web Services resources that were analyzed in a call to Trusted Advisor <code>DescribeTrustedAdvisorCheckSummaries</code>.</p>
    pub fn set_resources_summary(mut self, input: ::std::option::Option<crate::types::TrustedAdvisorResourcesSummary>) -> Self {
        self.resources_summary = input;
        self
    }
    /// <p>Details about Amazon Web Services resources that were analyzed in a call to Trusted Advisor <code>DescribeTrustedAdvisorCheckSummaries</code>.</p>
    pub fn get_resources_summary(&self) -> &::std::option::Option<crate::types::TrustedAdvisorResourcesSummary> {
        &self.resources_summary
    }
    /// <p>Summary information that relates to the category of the check. Cost Optimizing is the only category that is currently supported.</p>
    /// This field is required.
    pub fn category_specific_summary(mut self, input: crate::types::TrustedAdvisorCategorySpecificSummary) -> Self {
        self.category_specific_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Summary information that relates to the category of the check. Cost Optimizing is the only category that is currently supported.</p>
    pub fn set_category_specific_summary(mut self, input: ::std::option::Option<crate::types::TrustedAdvisorCategorySpecificSummary>) -> Self {
        self.category_specific_summary = input;
        self
    }
    /// <p>Summary information that relates to the category of the check. Cost Optimizing is the only category that is currently supported.</p>
    pub fn get_category_specific_summary(&self) -> &::std::option::Option<crate::types::TrustedAdvisorCategorySpecificSummary> {
        &self.category_specific_summary
    }
    /// Consumes the builder and constructs a [`TrustedAdvisorCheckSummary`](crate::types::TrustedAdvisorCheckSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`check_id`](crate::types::builders::TrustedAdvisorCheckSummaryBuilder::check_id)
    /// - [`timestamp`](crate::types::builders::TrustedAdvisorCheckSummaryBuilder::timestamp)
    /// - [`status`](crate::types::builders::TrustedAdvisorCheckSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::TrustedAdvisorCheckSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TrustedAdvisorCheckSummary {
            check_id: self.check_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "check_id",
                    "check_id was not specified but it is required when building TrustedAdvisorCheckSummary",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building TrustedAdvisorCheckSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building TrustedAdvisorCheckSummary",
                )
            })?,
            has_flagged_resources: self.has_flagged_resources.unwrap_or_default(),
            resources_summary: self.resources_summary,
            category_specific_summary: self.category_specific_summary,
        })
    }
}
