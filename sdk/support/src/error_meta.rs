// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An attachment with the specified ID could not be found.</p>
    AttachmentIdNotFound(crate::error::AttachmentIdNotFound),
    /// <p>The limit for the number of attachment sets created in a short period of time has been exceeded.</p>
    AttachmentLimitExceeded(crate::error::AttachmentLimitExceeded),
    /// <p>The expiration time of the attachment set has passed. The set expires 1 hour after it is created.</p>
    AttachmentSetExpired(crate::error::AttachmentSetExpired),
    /// <p>An attachment set with the specified ID could not be found.</p>
    AttachmentSetIdNotFound(crate::error::AttachmentSetIdNotFound),
    /// <p>A limit for the size of an attachment set has been exceeded. The limits are three attachments and 5 MB per attachment.</p>
    AttachmentSetSizeLimitExceeded(crate::error::AttachmentSetSizeLimitExceeded),
    /// <p>The case creation limit for the account has been exceeded.</p>
    CaseCreationLimitExceeded(crate::error::CaseCreationLimitExceeded),
    /// <p>The requested <code>caseId</code> couldn't be located.</p>
    CaseIdNotFound(crate::error::CaseIdNotFound),
    /// <p>The limit for the number of <code>DescribeAttachment</code> requests in a short period of time has been exceeded.</p>
    DescribeAttachmentLimitExceeded(crate::error::DescribeAttachmentLimitExceeded),
    /// <p>An internal server error occurred.</p>
    InternalServerError(crate::error::InternalServerError),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AttachmentIdNotFound(inner) => inner.fmt(f),
            Error::AttachmentLimitExceeded(inner) => inner.fmt(f),
            Error::AttachmentSetExpired(inner) => inner.fmt(f),
            Error::AttachmentSetIdNotFound(inner) => inner.fmt(f),
            Error::AttachmentSetSizeLimitExceeded(inner) => inner.fmt(f),
            Error::CaseCreationLimitExceeded(inner) => inner.fmt(f),
            Error::CaseIdNotFound(inner) => inner.fmt(f),
            Error::DescribeAttachmentLimitExceeded(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddAttachmentsToSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddAttachmentsToSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddAttachmentsToSetError> for Error {
    fn from(err: crate::error::AddAttachmentsToSetError) -> Self {
        match err {
            crate::error::AddAttachmentsToSetError::AttachmentLimitExceeded(inner) => {
                Error::AttachmentLimitExceeded(inner)
            }
            crate::error::AddAttachmentsToSetError::AttachmentSetExpired(inner) => {
                Error::AttachmentSetExpired(inner)
            }
            crate::error::AddAttachmentsToSetError::AttachmentSetIdNotFound(inner) => {
                Error::AttachmentSetIdNotFound(inner)
            }
            crate::error::AddAttachmentsToSetError::AttachmentSetSizeLimitExceeded(inner) => {
                Error::AttachmentSetSizeLimitExceeded(inner)
            }
            crate::error::AddAttachmentsToSetError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AddAttachmentsToSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddCommunicationToCaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddCommunicationToCaseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddCommunicationToCaseError> for Error {
    fn from(err: crate::error::AddCommunicationToCaseError) -> Self {
        match err {
            crate::error::AddCommunicationToCaseError::AttachmentSetExpired(inner) => {
                Error::AttachmentSetExpired(inner)
            }
            crate::error::AddCommunicationToCaseError::AttachmentSetIdNotFound(inner) => {
                Error::AttachmentSetIdNotFound(inner)
            }
            crate::error::AddCommunicationToCaseError::CaseIdNotFound(inner) => {
                Error::CaseIdNotFound(inner)
            }
            crate::error::AddCommunicationToCaseError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AddCommunicationToCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateCaseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCaseError> for Error {
    fn from(err: crate::error::CreateCaseError) -> Self {
        match err {
            crate::error::CreateCaseError::AttachmentSetExpired(inner) => {
                Error::AttachmentSetExpired(inner)
            }
            crate::error::CreateCaseError::AttachmentSetIdNotFound(inner) => {
                Error::AttachmentSetIdNotFound(inner)
            }
            crate::error::CreateCaseError::CaseCreationLimitExceeded(inner) => {
                Error::CaseCreationLimitExceeded(inner)
            }
            crate::error::CreateCaseError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAttachmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAttachmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAttachmentError> for Error {
    fn from(err: crate::error::DescribeAttachmentError) -> Self {
        match err {
            crate::error::DescribeAttachmentError::AttachmentIdNotFound(inner) => {
                Error::AttachmentIdNotFound(inner)
            }
            crate::error::DescribeAttachmentError::DescribeAttachmentLimitExceeded(inner) => {
                Error::DescribeAttachmentLimitExceeded(inner)
            }
            crate::error::DescribeAttachmentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeCasesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCasesError> for Error {
    fn from(err: crate::error::DescribeCasesError) -> Self {
        match err {
            crate::error::DescribeCasesError::CaseIdNotFound(inner) => Error::CaseIdNotFound(inner),
            crate::error::DescribeCasesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeCasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCommunicationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCommunicationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCommunicationsError> for Error {
    fn from(err: crate::error::DescribeCommunicationsError) -> Self {
        match err {
            crate::error::DescribeCommunicationsError::CaseIdNotFound(inner) => {
                Error::CaseIdNotFound(inner)
            }
            crate::error::DescribeCommunicationsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeCommunicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeServicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeServicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeServicesError> for Error {
    fn from(err: crate::error::DescribeServicesError) -> Self {
        match err {
            crate::error::DescribeServicesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeServicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSeverityLevelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSeverityLevelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSeverityLevelsError> for Error {
    fn from(err: crate::error::DescribeSeverityLevelsError) -> Self {
        match err {
            crate::error::DescribeSeverityLevelsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeSeverityLevelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError> for Error {
    fn from(err: crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError) -> Self {
        match err {
            crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeTrustedAdvisorCheckResultError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeTrustedAdvisorCheckResultError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTrustedAdvisorCheckResultError> for Error {
    fn from(err: crate::error::DescribeTrustedAdvisorCheckResultError) -> Self {
        match err {
            crate::error::DescribeTrustedAdvisorCheckResultError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeTrustedAdvisorCheckResultError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTrustedAdvisorChecksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTrustedAdvisorChecksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTrustedAdvisorChecksError> for Error {
    fn from(err: crate::error::DescribeTrustedAdvisorChecksError) -> Self {
        match err {
            crate::error::DescribeTrustedAdvisorChecksError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeTrustedAdvisorChecksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeTrustedAdvisorCheckSummariesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeTrustedAdvisorCheckSummariesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTrustedAdvisorCheckSummariesError> for Error {
    fn from(err: crate::error::DescribeTrustedAdvisorCheckSummariesError) -> Self {
        match err {
            crate::error::DescribeTrustedAdvisorCheckSummariesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeTrustedAdvisorCheckSummariesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RefreshTrustedAdvisorCheckError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RefreshTrustedAdvisorCheckError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RefreshTrustedAdvisorCheckError> for Error {
    fn from(err: crate::error::RefreshTrustedAdvisorCheckError) -> Self {
        match err {
            crate::error::RefreshTrustedAdvisorCheckError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::RefreshTrustedAdvisorCheckError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResolveCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ResolveCaseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResolveCaseError> for Error {
    fn from(err: crate::error::ResolveCaseError) -> Self {
        match err {
            crate::error::ResolveCaseError::CaseIdNotFound(inner) => Error::CaseIdNotFound(inner),
            crate::error::ResolveCaseError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ResolveCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AttachmentIdNotFound(e) => e.request_id(),
            Self::AttachmentLimitExceeded(e) => e.request_id(),
            Self::AttachmentSetExpired(e) => e.request_id(),
            Self::AttachmentSetIdNotFound(e) => e.request_id(),
            Self::AttachmentSetSizeLimitExceeded(e) => e.request_id(),
            Self::CaseCreationLimitExceeded(e) => e.request_id(),
            Self::CaseIdNotFound(e) => e.request_id(),
            Self::DescribeAttachmentLimitExceeded(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
