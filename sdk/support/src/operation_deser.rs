// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_add_attachments_to_set_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AddAttachmentsToSetOutput,
    crate::error::AddAttachmentsToSetError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::AddAttachmentsToSetError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::AddAttachmentsToSetError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AttachmentLimitExceeded" => crate::error::AddAttachmentsToSetError {
            meta: generic,
            kind: crate::error::AddAttachmentsToSetErrorKind::AttachmentLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::attachment_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_attachment_limit_exceededjson_err(response.body().as_ref(), output).map_err(crate::error::AddAttachmentsToSetError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "AttachmentSetExpired" => crate::error::AddAttachmentsToSetError {
            meta: generic,
            kind: crate::error::AddAttachmentsToSetErrorKind::AttachmentSetExpired({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::attachment_set_expired::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_attachment_set_expiredjson_err(response.body().as_ref(), output).map_err(crate::error::AddAttachmentsToSetError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "AttachmentSetIdNotFound" => crate::error::AddAttachmentsToSetError {
            meta: generic,
            kind: crate::error::AddAttachmentsToSetErrorKind::AttachmentSetIdNotFound({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::attachment_set_id_not_found::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_attachment_set_id_not_foundjson_err(response.body().as_ref(), output).map_err(crate::error::AddAttachmentsToSetError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "AttachmentSetSizeLimitExceeded" => crate::error::AddAttachmentsToSetError {
            meta: generic,
            kind: crate::error::AddAttachmentsToSetErrorKind::AttachmentSetSizeLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::attachment_set_size_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_attachment_set_size_limit_exceededjson_err(response.body().as_ref(), output).map_err(crate::error::AddAttachmentsToSetError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerError" => crate::error::AddAttachmentsToSetError {
            meta: generic,
            kind: crate::error::AddAttachmentsToSetErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::AddAttachmentsToSetError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::AddAttachmentsToSetError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_add_attachments_to_set_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AddAttachmentsToSetOutput,
    crate::error::AddAttachmentsToSetError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::add_attachments_to_set_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_add_attachments_to_set(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::AddAttachmentsToSetError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_add_communication_to_case_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AddCommunicationToCaseOutput,
    crate::error::AddCommunicationToCaseError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::AddCommunicationToCaseError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::AddCommunicationToCaseError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AttachmentSetExpired" => crate::error::AddCommunicationToCaseError {
            meta: generic,
            kind: crate::error::AddCommunicationToCaseErrorKind::AttachmentSetExpired({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::attachment_set_expired::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_attachment_set_expiredjson_err(response.body().as_ref(), output).map_err(crate::error::AddCommunicationToCaseError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "AttachmentSetIdNotFound" => crate::error::AddCommunicationToCaseError {
            meta: generic,
            kind: crate::error::AddCommunicationToCaseErrorKind::AttachmentSetIdNotFound({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::attachment_set_id_not_found::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_attachment_set_id_not_foundjson_err(response.body().as_ref(), output).map_err(crate::error::AddCommunicationToCaseError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "CaseIdNotFound" => {
            crate::error::AddCommunicationToCaseError {
                meta: generic,
                kind: crate::error::AddCommunicationToCaseErrorKind::CaseIdNotFound({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::case_id_not_found::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_case_id_not_foundjson_err(response.body().as_ref(), output).map_err(crate::error::AddCommunicationToCaseError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerError" => crate::error::AddCommunicationToCaseError {
            meta: generic,
            kind: crate::error::AddCommunicationToCaseErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::AddCommunicationToCaseError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::AddCommunicationToCaseError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_add_communication_to_case_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::AddCommunicationToCaseOutput,
    crate::error::AddCommunicationToCaseError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::add_communication_to_case_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_add_communication_to_case(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::AddCommunicationToCaseError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_case_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateCaseOutput, crate::error::CreateCaseError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateCaseError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateCaseError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AttachmentSetExpired" => crate::error::CreateCaseError {
            meta: generic,
            kind: crate::error::CreateCaseErrorKind::AttachmentSetExpired({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::attachment_set_expired::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_attachment_set_expiredjson_err(response.body().as_ref(), output).map_err(crate::error::CreateCaseError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "AttachmentSetIdNotFound" => crate::error::CreateCaseError {
            meta: generic,
            kind: crate::error::CreateCaseErrorKind::AttachmentSetIdNotFound({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::attachment_set_id_not_found::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_attachment_set_id_not_foundjson_err(response.body().as_ref(), output).map_err(crate::error::CreateCaseError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "CaseCreationLimitExceeded" => crate::error::CreateCaseError {
            meta: generic,
            kind: crate::error::CreateCaseErrorKind::CaseCreationLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::case_creation_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_case_creation_limit_exceededjson_err(response.body().as_ref(), output).map_err(crate::error::CreateCaseError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerError" => crate::error::CreateCaseError {
            meta: generic,
            kind: crate::error::CreateCaseErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::CreateCaseError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CreateCaseError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_case_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateCaseOutput, crate::error::CreateCaseError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_case_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_create_case(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateCaseError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_attachment_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeAttachmentOutput,
    crate::error::DescribeAttachmentError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeAttachmentError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeAttachmentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AttachmentIdNotFound" => crate::error::DescribeAttachmentError {
            meta: generic,
            kind: crate::error::DescribeAttachmentErrorKind::AttachmentIdNotFound({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::attachment_id_not_found::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_attachment_id_not_foundjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeAttachmentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "DescribeAttachmentLimitExceeded" => crate::error::DescribeAttachmentError {
            meta: generic,
            kind: crate::error::DescribeAttachmentErrorKind::DescribeAttachmentLimitExceeded({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::describe_attachment_limit_exceeded::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_describe_attachment_limit_exceededjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeAttachmentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InternalServerError" => crate::error::DescribeAttachmentError {
            meta: generic,
            kind: crate::error::DescribeAttachmentErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeAttachmentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeAttachmentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_attachment_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeAttachmentOutput,
    crate::error::DescribeAttachmentError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_attachment_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_attachment(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeAttachmentError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_cases_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeCasesOutput, crate::error::DescribeCasesError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeCasesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeCasesError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CaseIdNotFound" => {
            crate::error::DescribeCasesError {
                meta: generic,
                kind: crate::error::DescribeCasesErrorKind::CaseIdNotFound({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::case_id_not_found::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_case_id_not_foundjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeCasesError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerError" => crate::error::DescribeCasesError {
            meta: generic,
            kind: crate::error::DescribeCasesErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeCasesError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeCasesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_cases_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeCasesOutput, crate::error::DescribeCasesError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_cases_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_cases(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeCasesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_communications_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeCommunicationsOutput,
    crate::error::DescribeCommunicationsError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeCommunicationsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeCommunicationsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CaseIdNotFound" => {
            crate::error::DescribeCommunicationsError {
                meta: generic,
                kind: crate::error::DescribeCommunicationsErrorKind::CaseIdNotFound({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::case_id_not_found::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_case_id_not_foundjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeCommunicationsError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerError" => crate::error::DescribeCommunicationsError {
            meta: generic,
            kind: crate::error::DescribeCommunicationsErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeCommunicationsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeCommunicationsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_communications_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeCommunicationsOutput,
    crate::error::DescribeCommunicationsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_communications_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_communications(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeCommunicationsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_services_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeServicesOutput, crate::error::DescribeServicesError>
{
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeServicesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeServicesError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::error::DescribeServicesError {
            meta: generic,
            kind: crate::error::DescribeServicesErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeServicesError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeServicesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_services_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeServicesOutput, crate::error::DescribeServicesError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_services_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_services(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeServicesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_severity_levels_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeSeverityLevelsOutput,
    crate::error::DescribeSeverityLevelsError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeSeverityLevelsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeSeverityLevelsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::error::DescribeSeverityLevelsError {
            meta: generic,
            kind: crate::error::DescribeSeverityLevelsErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeSeverityLevelsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeSeverityLevelsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_severity_levels_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeSeverityLevelsOutput,
    crate::error::DescribeSeverityLevelsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_severity_levels_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_severity_levels(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeSeverityLevelsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_trusted_advisor_check_refresh_statuses_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeTrustedAdvisorCheckRefreshStatusesOutput,
    crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError { meta: generic, kind: crate::error::DescribeTrustedAdvisorCheckRefreshStatusesErrorKind::InternalServerError({
            #[allow(unused_mut)]let mut tmp =
                 {
                    #[allow(unused_mut)]let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError::unhandled)?;
                    output.build()
                }
            ;
            if (&tmp.message).is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        })},
        _ => crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_trusted_advisor_check_refresh_statuses_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeTrustedAdvisorCheckRefreshStatusesOutput,
    crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::describe_trusted_advisor_check_refresh_statuses_output::Builder::default(
            );
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_trusted_advisor_check_refresh_statuses(response.body().as_ref(), output).map_err(crate::error::DescribeTrustedAdvisorCheckRefreshStatusesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_trusted_advisor_check_result_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeTrustedAdvisorCheckResultOutput,
    crate::error::DescribeTrustedAdvisorCheckResultError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeTrustedAdvisorCheckResultError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeTrustedAdvisorCheckResultError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::error::DescribeTrustedAdvisorCheckResultError {
            meta: generic,
            kind: crate::error::DescribeTrustedAdvisorCheckResultErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeTrustedAdvisorCheckResultError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeTrustedAdvisorCheckResultError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_trusted_advisor_check_result_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeTrustedAdvisorCheckResultOutput,
    crate::error::DescribeTrustedAdvisorCheckResultError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::describe_trusted_advisor_check_result_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_trusted_advisor_check_result(response.body().as_ref(), output).map_err(crate::error::DescribeTrustedAdvisorCheckResultError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_trusted_advisor_checks_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeTrustedAdvisorChecksOutput,
    crate::error::DescribeTrustedAdvisorChecksError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeTrustedAdvisorChecksError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeTrustedAdvisorChecksError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::error::DescribeTrustedAdvisorChecksError {
            meta: generic,
            kind: crate::error::DescribeTrustedAdvisorChecksErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeTrustedAdvisorChecksError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeTrustedAdvisorChecksError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_trusted_advisor_checks_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeTrustedAdvisorChecksOutput,
    crate::error::DescribeTrustedAdvisorChecksError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_trusted_advisor_checks_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_crate_operation_describe_trusted_advisor_checks(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::DescribeTrustedAdvisorChecksError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_trusted_advisor_check_summaries_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeTrustedAdvisorCheckSummariesOutput,
    crate::error::DescribeTrustedAdvisorCheckSummariesError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeTrustedAdvisorCheckSummariesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeTrustedAdvisorCheckSummariesError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::error::DescribeTrustedAdvisorCheckSummariesError {
            meta: generic,
            kind: crate::error::DescribeTrustedAdvisorCheckSummariesErrorKind::InternalServerError(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::internal_server_error::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeTrustedAdvisorCheckSummariesError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            ),
        },
        _ => crate::error::DescribeTrustedAdvisorCheckSummariesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_trusted_advisor_check_summaries_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeTrustedAdvisorCheckSummariesOutput,
    crate::error::DescribeTrustedAdvisorCheckSummariesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::describe_trusted_advisor_check_summaries_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_describe_trusted_advisor_check_summaries(response.body().as_ref(), output).map_err(crate::error::DescribeTrustedAdvisorCheckSummariesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_refresh_trusted_advisor_check_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RefreshTrustedAdvisorCheckOutput,
    crate::error::RefreshTrustedAdvisorCheckError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::RefreshTrustedAdvisorCheckError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RefreshTrustedAdvisorCheckError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::error::RefreshTrustedAdvisorCheckError {
            meta: generic,
            kind: crate::error::RefreshTrustedAdvisorCheckErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::RefreshTrustedAdvisorCheckError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RefreshTrustedAdvisorCheckError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_refresh_trusted_advisor_check_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RefreshTrustedAdvisorCheckOutput,
    crate::error::RefreshTrustedAdvisorCheckError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::refresh_trusted_advisor_check_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_refresh_trusted_advisor_check(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RefreshTrustedAdvisorCheckError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resolve_case_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ResolveCaseOutput, crate::error::ResolveCaseError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ResolveCaseError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ResolveCaseError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CaseIdNotFound" => {
            crate::error::ResolveCaseError {
                meta: generic,
                kind: crate::error::ResolveCaseErrorKind::CaseIdNotFound({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::case_id_not_found::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_case_id_not_foundjson_err(response.body().as_ref(), output).map_err(crate::error::ResolveCaseError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InternalServerError" => crate::error::ResolveCaseError {
            meta: generic,
            kind: crate::error::ResolveCaseErrorKind::InternalServerError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::internal_server_error::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_internal_server_errorjson_err(response.body().as_ref(), output).map_err(crate::error::ResolveCaseError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ResolveCaseError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_resolve_case_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ResolveCaseOutput, crate::error::ResolveCaseError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::resolve_case_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_crate_operation_resolve_case(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ResolveCaseError::unhandled)?;
        output.build()
    })
}
