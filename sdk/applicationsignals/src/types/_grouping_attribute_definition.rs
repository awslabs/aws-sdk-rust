// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines how services should be grouped based on specific attributes. This allows logical organization of services in dashboards and service maps.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GroupingAttributeDefinition {
    /// <p>The name of the grouping attribute, such as "Environment", "Team", or "Application".</p>
    pub grouping_name: ::std::string::String,
    /// <p>An array of source attribute keys that will be used to determine the grouping value for each service. These keys correspond to service metadata or tags.</p>
    pub grouping_source_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The default value to use for grouping when a service doesn't have any of the specified source keys, such as "Unknown" or "Unassigned".</p>
    pub default_grouping_value: ::std::option::Option<::std::string::String>,
}
impl GroupingAttributeDefinition {
    /// <p>The name of the grouping attribute, such as "Environment", "Team", or "Application".</p>
    pub fn grouping_name(&self) -> &str {
        use std::ops::Deref;
        self.grouping_name.deref()
    }
    /// <p>An array of source attribute keys that will be used to determine the grouping value for each service. These keys correspond to service metadata or tags.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.grouping_source_keys.is_none()`.
    pub fn grouping_source_keys(&self) -> &[::std::string::String] {
        self.grouping_source_keys.as_deref().unwrap_or_default()
    }
    /// <p>The default value to use for grouping when a service doesn't have any of the specified source keys, such as "Unknown" or "Unassigned".</p>
    pub fn default_grouping_value(&self) -> ::std::option::Option<&str> {
        self.default_grouping_value.as_deref()
    }
}
impl GroupingAttributeDefinition {
    /// Creates a new builder-style object to manufacture [`GroupingAttributeDefinition`](crate::types::GroupingAttributeDefinition).
    pub fn builder() -> crate::types::builders::GroupingAttributeDefinitionBuilder {
        crate::types::builders::GroupingAttributeDefinitionBuilder::default()
    }
}

/// A builder for [`GroupingAttributeDefinition`](crate::types::GroupingAttributeDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GroupingAttributeDefinitionBuilder {
    pub(crate) grouping_name: ::std::option::Option<::std::string::String>,
    pub(crate) grouping_source_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) default_grouping_value: ::std::option::Option<::std::string::String>,
}
impl GroupingAttributeDefinitionBuilder {
    /// <p>The name of the grouping attribute, such as "Environment", "Team", or "Application".</p>
    /// This field is required.
    pub fn grouping_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.grouping_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the grouping attribute, such as "Environment", "Team", or "Application".</p>
    pub fn set_grouping_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.grouping_name = input;
        self
    }
    /// <p>The name of the grouping attribute, such as "Environment", "Team", or "Application".</p>
    pub fn get_grouping_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.grouping_name
    }
    /// Appends an item to `grouping_source_keys`.
    ///
    /// To override the contents of this collection use [`set_grouping_source_keys`](Self::set_grouping_source_keys).
    ///
    /// <p>An array of source attribute keys that will be used to determine the grouping value for each service. These keys correspond to service metadata or tags.</p>
    pub fn grouping_source_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.grouping_source_keys.unwrap_or_default();
        v.push(input.into());
        self.grouping_source_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of source attribute keys that will be used to determine the grouping value for each service. These keys correspond to service metadata or tags.</p>
    pub fn set_grouping_source_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.grouping_source_keys = input;
        self
    }
    /// <p>An array of source attribute keys that will be used to determine the grouping value for each service. These keys correspond to service metadata or tags.</p>
    pub fn get_grouping_source_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.grouping_source_keys
    }
    /// <p>The default value to use for grouping when a service doesn't have any of the specified source keys, such as "Unknown" or "Unassigned".</p>
    pub fn default_grouping_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_grouping_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value to use for grouping when a service doesn't have any of the specified source keys, such as "Unknown" or "Unassigned".</p>
    pub fn set_default_grouping_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_grouping_value = input;
        self
    }
    /// <p>The default value to use for grouping when a service doesn't have any of the specified source keys, such as "Unknown" or "Unassigned".</p>
    pub fn get_default_grouping_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_grouping_value
    }
    /// Consumes the builder and constructs a [`GroupingAttributeDefinition`](crate::types::GroupingAttributeDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`grouping_name`](crate::types::builders::GroupingAttributeDefinitionBuilder::grouping_name)
    pub fn build(self) -> ::std::result::Result<crate::types::GroupingAttributeDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GroupingAttributeDefinition {
            grouping_name: self.grouping_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "grouping_name",
                    "grouping_name was not specified but it is required when building GroupingAttributeDefinition",
                )
            })?,
            grouping_source_keys: self.grouping_source_keys,
            default_grouping_value: self.default_grouping_value,
        })
    }
}
