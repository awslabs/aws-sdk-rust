// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A union type that represents different types of entities that can be audited, such as services, SLOs, service operations, or canaries.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AuditTargetEntity {
    /// <p>Canary entity information when the audit target is a CloudWatch Synthetics canary.</p>
    Canary(crate::types::CanaryEntity),
    /// <p>Service entity information when the audit target is a service.</p>
    Service(crate::types::ServiceEntity),
    /// <p>Service operation entity information when the audit target is a specific operation within a service.</p>
    ServiceOperation(crate::types::ServiceOperationEntity),
    /// <p>Service Level Objective entity information when the audit target is an SLO.</p>
    Slo(crate::types::ServiceLevelObjectiveEntity),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AuditTargetEntity {
    /// Tries to convert the enum instance into [`Canary`](crate::types::AuditTargetEntity::Canary), extracting the inner [`CanaryEntity`](crate::types::CanaryEntity).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_canary(&self) -> ::std::result::Result<&crate::types::CanaryEntity, &Self> {
        if let AuditTargetEntity::Canary(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Canary`](crate::types::AuditTargetEntity::Canary).
    pub fn is_canary(&self) -> bool {
        self.as_canary().is_ok()
    }
    /// Tries to convert the enum instance into [`Service`](crate::types::AuditTargetEntity::Service), extracting the inner [`ServiceEntity`](crate::types::ServiceEntity).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_service(&self) -> ::std::result::Result<&crate::types::ServiceEntity, &Self> {
        if let AuditTargetEntity::Service(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Service`](crate::types::AuditTargetEntity::Service).
    pub fn is_service(&self) -> bool {
        self.as_service().is_ok()
    }
    /// Tries to convert the enum instance into [`ServiceOperation`](crate::types::AuditTargetEntity::ServiceOperation), extracting the inner [`ServiceOperationEntity`](crate::types::ServiceOperationEntity).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_service_operation(&self) -> ::std::result::Result<&crate::types::ServiceOperationEntity, &Self> {
        if let AuditTargetEntity::ServiceOperation(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ServiceOperation`](crate::types::AuditTargetEntity::ServiceOperation).
    pub fn is_service_operation(&self) -> bool {
        self.as_service_operation().is_ok()
    }
    /// Tries to convert the enum instance into [`Slo`](crate::types::AuditTargetEntity::Slo), extracting the inner [`ServiceLevelObjectiveEntity`](crate::types::ServiceLevelObjectiveEntity).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_slo(&self) -> ::std::result::Result<&crate::types::ServiceLevelObjectiveEntity, &Self> {
        if let AuditTargetEntity::Slo(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Slo`](crate::types::AuditTargetEntity::Slo).
    pub fn is_slo(&self) -> bool {
        self.as_slo().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
