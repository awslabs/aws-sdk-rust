// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this structure to specify the information for the metric that a period-based SLO will monitor.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceLevelIndicatorMetricConfig {
    /// <p>If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>If the SLO is to monitor a specific operation of the service, use this field to specify the name of that operation.</p>
    pub operation_name: ::std::option::Option<::std::string::String>,
    /// <p>If the SLO is to monitor either the <code>LATENCY</code> or <code>AVAILABILITY</code> metric that Application Signals collects, use this field to specify which of those metrics is used.</p>
    pub metric_type: ::std::option::Option<crate::types::ServiceLevelIndicatorMetricType>,
    /// <p>The name of the CloudWatch metric used as a service level indicator (SLI) for measuring service performance.</p>
    pub metric_name: ::std::option::Option<::std::string::String>,
    /// <p>The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic. For more information about statistics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html">CloudWatch statistics definitions</a>.</p>
    pub statistic: ::std::option::Option<::std::string::String>,
    /// <p>The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.</p>
    pub period_seconds: ::std::option::Option<i32>,
    /// <p>If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.</p>
    pub metric_data_queries: ::std::option::Option<::std::vec::Vec<crate::types::MetricDataQuery>>,
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub dependency_config: ::std::option::Option<crate::types::DependencyConfig>,
}
impl ServiceLevelIndicatorMetricConfig {
    /// <p>If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.key_attributes.as_ref()
    }
    /// <p>If the SLO is to monitor a specific operation of the service, use this field to specify the name of that operation.</p>
    pub fn operation_name(&self) -> ::std::option::Option<&str> {
        self.operation_name.as_deref()
    }
    /// <p>If the SLO is to monitor either the <code>LATENCY</code> or <code>AVAILABILITY</code> metric that Application Signals collects, use this field to specify which of those metrics is used.</p>
    pub fn metric_type(&self) -> ::std::option::Option<&crate::types::ServiceLevelIndicatorMetricType> {
        self.metric_type.as_ref()
    }
    /// <p>The name of the CloudWatch metric used as a service level indicator (SLI) for measuring service performance.</p>
    pub fn metric_name(&self) -> ::std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic. For more information about statistics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html">CloudWatch statistics definitions</a>.</p>
    pub fn statistic(&self) -> ::std::option::Option<&str> {
        self.statistic.as_deref()
    }
    /// <p>The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.</p>
    pub fn period_seconds(&self) -> ::std::option::Option<i32> {
        self.period_seconds
    }
    /// <p>If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_data_queries.is_none()`.
    pub fn metric_data_queries(&self) -> &[crate::types::MetricDataQuery] {
        self.metric_data_queries.as_deref().unwrap_or_default()
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn dependency_config(&self) -> ::std::option::Option<&crate::types::DependencyConfig> {
        self.dependency_config.as_ref()
    }
}
impl ServiceLevelIndicatorMetricConfig {
    /// Creates a new builder-style object to manufacture [`ServiceLevelIndicatorMetricConfig`](crate::types::ServiceLevelIndicatorMetricConfig).
    pub fn builder() -> crate::types::builders::ServiceLevelIndicatorMetricConfigBuilder {
        crate::types::builders::ServiceLevelIndicatorMetricConfigBuilder::default()
    }
}

/// A builder for [`ServiceLevelIndicatorMetricConfig`](crate::types::ServiceLevelIndicatorMetricConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceLevelIndicatorMetricConfigBuilder {
    pub(crate) key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) operation_name: ::std::option::Option<::std::string::String>,
    pub(crate) metric_type: ::std::option::Option<crate::types::ServiceLevelIndicatorMetricType>,
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) statistic: ::std::option::Option<::std::string::String>,
    pub(crate) period_seconds: ::std::option::Option<i32>,
    pub(crate) metric_data_queries: ::std::option::Option<::std::vec::Vec<crate::types::MetricDataQuery>>,
    pub(crate) dependency_config: ::std::option::Option<crate::types::DependencyConfig>,
}
impl ServiceLevelIndicatorMetricConfigBuilder {
    /// Adds a key-value pair to `key_attributes`.
    ///
    /// To override the contents of this collection use [`set_key_attributes`](Self::set_key_attributes).
    ///
    /// <p>If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.key_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.key_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn set_key_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>If this SLO is related to a metric collected by Application Signals, you must use this field to specify which service the SLO metric is related to. To do so, you must specify at least the <code>Type</code>, <code>Name</code>, and <code>Environment</code> attributes.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn get_key_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.key_attributes
    }
    /// <p>If the SLO is to monitor a specific operation of the service, use this field to specify the name of that operation.</p>
    pub fn operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the SLO is to monitor a specific operation of the service, use this field to specify the name of that operation.</p>
    pub fn set_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_name = input;
        self
    }
    /// <p>If the SLO is to monitor a specific operation of the service, use this field to specify the name of that operation.</p>
    pub fn get_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_name
    }
    /// <p>If the SLO is to monitor either the <code>LATENCY</code> or <code>AVAILABILITY</code> metric that Application Signals collects, use this field to specify which of those metrics is used.</p>
    pub fn metric_type(mut self, input: crate::types::ServiceLevelIndicatorMetricType) -> Self {
        self.metric_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the SLO is to monitor either the <code>LATENCY</code> or <code>AVAILABILITY</code> metric that Application Signals collects, use this field to specify which of those metrics is used.</p>
    pub fn set_metric_type(mut self, input: ::std::option::Option<crate::types::ServiceLevelIndicatorMetricType>) -> Self {
        self.metric_type = input;
        self
    }
    /// <p>If the SLO is to monitor either the <code>LATENCY</code> or <code>AVAILABILITY</code> metric that Application Signals collects, use this field to specify which of those metrics is used.</p>
    pub fn get_metric_type(&self) -> &::std::option::Option<crate::types::ServiceLevelIndicatorMetricType> {
        &self.metric_type
    }
    /// <p>The name of the CloudWatch metric used as a service level indicator (SLI) for measuring service performance.</p>
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the CloudWatch metric used as a service level indicator (SLI) for measuring service performance.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the CloudWatch metric used as a service level indicator (SLI) for measuring service performance.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// <p>The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic. For more information about statistics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html">CloudWatch statistics definitions</a>.</p>
    pub fn statistic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statistic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic. For more information about statistics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html">CloudWatch statistics definitions</a>.</p>
    pub fn set_statistic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statistic = input;
        self
    }
    /// <p>The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic. For more information about statistics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html">CloudWatch statistics definitions</a>.</p>
    pub fn get_statistic(&self) -> &::std::option::Option<::std::string::String> {
        &self.statistic
    }
    /// <p>The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.</p>
    pub fn period_seconds(mut self, input: i32) -> Self {
        self.period_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.</p>
    pub fn set_period_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.period_seconds = input;
        self
    }
    /// <p>The number of seconds to use as the period for SLO evaluation. Your application's performance is compared to the SLI during each period. For each period, the application is determined to have either achieved or not achieved the necessary performance.</p>
    pub fn get_period_seconds(&self) -> &::std::option::Option<i32> {
        &self.period_seconds
    }
    /// Appends an item to `metric_data_queries`.
    ///
    /// To override the contents of this collection use [`set_metric_data_queries`](Self::set_metric_data_queries).
    ///
    /// <p>If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.</p>
    pub fn metric_data_queries(mut self, input: crate::types::MetricDataQuery) -> Self {
        let mut v = self.metric_data_queries.unwrap_or_default();
        v.push(input);
        self.metric_data_queries = ::std::option::Option::Some(v);
        self
    }
    /// <p>If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.</p>
    pub fn set_metric_data_queries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricDataQuery>>) -> Self {
        self.metric_data_queries = input;
        self
    }
    /// <p>If this SLO monitors a CloudWatch metric or the result of a CloudWatch metric math expression, use this structure to specify that metric or expression.</p>
    pub fn get_metric_data_queries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricDataQuery>> {
        &self.metric_data_queries
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn dependency_config(mut self, input: crate::types::DependencyConfig) -> Self {
        self.dependency_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn set_dependency_config(mut self, input: ::std::option::Option<crate::types::DependencyConfig>) -> Self {
        self.dependency_config = input;
        self
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn get_dependency_config(&self) -> &::std::option::Option<crate::types::DependencyConfig> {
        &self.dependency_config
    }
    /// Consumes the builder and constructs a [`ServiceLevelIndicatorMetricConfig`](crate::types::ServiceLevelIndicatorMetricConfig).
    pub fn build(self) -> crate::types::ServiceLevelIndicatorMetricConfig {
        crate::types::ServiceLevelIndicatorMetricConfig {
            key_attributes: self.key_attributes,
            operation_name: self.operation_name,
            metric_type: self.metric_type,
            metric_name: self.metric_name,
            statistic: self.statistic,
            period_seconds: self.period_seconds,
            metric_data_queries: self.metric_data_queries,
            dependency_config: self.dependency_config,
        }
    }
}
