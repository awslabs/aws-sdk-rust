// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about one of your services that was discovered by Application Signals</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceSummary {
    /// <p>This is a string-to-string map that help identify the objects discovered by Application Signals. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub key_attributes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>This structure contains one or more string-to-string maps that help identify this service. It can include <i>platform attributes</i>, <i>application attributes</i>, and <i>telemetry attributes</i>.</p>
    /// <p>Platform attributes contain information the service's platform.</p>
    /// <ul>
    /// <li>
    /// <p><code>PlatformType</code> defines the hosted-in platform.</p></li>
    /// <li>
    /// <p><code>EKS.Cluster</code> is the name of the Amazon EKS cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Cluster</code> is the name of the self-hosted Kubernetes cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Namespace</code> is the name of the Kubernetes namespace in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Workload</code> is the name of the Kubernetes workload in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Node</code> is the name of the Kubernetes node in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Pod</code> is the name of the Kubernetes pod in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>EC2.AutoScalingGroup</code> is the name of the Amazon EC2 Auto Scaling group.</p></li>
    /// <li>
    /// <p><code>EC2.InstanceId</code> is the ID of the Amazon EC2 instance.</p></li>
    /// <li>
    /// <p><code>Host</code> is the name of the host, for all platform types.</p></li>
    /// </ul>
    /// <p>Application attributes contain information about the application.</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS.Application</code> is the application's name in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// <li>
    /// <p><code>AWS.Application.ARN</code> is the application's ARN in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// </ul>
    /// <p>Telemetry attributes contain telemetry information.</p>
    /// <ul>
    /// <li>
    /// <p><code>Telemetry.SDK</code> is the fingerprint of the OpenTelemetry SDK version for instrumented services.</p></li>
    /// <li>
    /// <p><code>Telemetry.Agent</code> is the fingerprint of the agent used to collect and send telemetry data.</p></li>
    /// <li>
    /// <p><code>Telemetry.Source</code> Specifies the point of application where the telemetry was collected or specifies what was used for the source of telemetry data.</p></li>
    /// </ul>
    pub attribute_maps: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>>,
    /// <p>An array of structures that each contain information about one metric associated with this service.</p>
    pub metric_references: ::std::vec::Vec<crate::types::MetricReference>,
    /// <p>An array of service groups that this service belongs to, providing a summary view of the service's organizational context.</p>
    pub service_groups: ::std::option::Option<::std::vec::Vec<crate::types::ServiceGroup>>,
}
impl ServiceSummary {
    /// <p>This is a string-to-string map that help identify the objects discovered by Application Signals. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.key_attributes
    }
    /// <p>This structure contains one or more string-to-string maps that help identify this service. It can include <i>platform attributes</i>, <i>application attributes</i>, and <i>telemetry attributes</i>.</p>
    /// <p>Platform attributes contain information the service's platform.</p>
    /// <ul>
    /// <li>
    /// <p><code>PlatformType</code> defines the hosted-in platform.</p></li>
    /// <li>
    /// <p><code>EKS.Cluster</code> is the name of the Amazon EKS cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Cluster</code> is the name of the self-hosted Kubernetes cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Namespace</code> is the name of the Kubernetes namespace in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Workload</code> is the name of the Kubernetes workload in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Node</code> is the name of the Kubernetes node in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Pod</code> is the name of the Kubernetes pod in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>EC2.AutoScalingGroup</code> is the name of the Amazon EC2 Auto Scaling group.</p></li>
    /// <li>
    /// <p><code>EC2.InstanceId</code> is the ID of the Amazon EC2 instance.</p></li>
    /// <li>
    /// <p><code>Host</code> is the name of the host, for all platform types.</p></li>
    /// </ul>
    /// <p>Application attributes contain information about the application.</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS.Application</code> is the application's name in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// <li>
    /// <p><code>AWS.Application.ARN</code> is the application's ARN in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// </ul>
    /// <p>Telemetry attributes contain telemetry information.</p>
    /// <ul>
    /// <li>
    /// <p><code>Telemetry.SDK</code> is the fingerprint of the OpenTelemetry SDK version for instrumented services.</p></li>
    /// <li>
    /// <p><code>Telemetry.Agent</code> is the fingerprint of the agent used to collect and send telemetry data.</p></li>
    /// <li>
    /// <p><code>Telemetry.Source</code> Specifies the point of application where the telemetry was collected or specifies what was used for the source of telemetry data.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_maps.is_none()`.
    pub fn attribute_maps(&self) -> &[::std::collections::HashMap<::std::string::String, ::std::string::String>] {
        self.attribute_maps.as_deref().unwrap_or_default()
    }
    /// <p>An array of structures that each contain information about one metric associated with this service.</p>
    pub fn metric_references(&self) -> &[crate::types::MetricReference] {
        use std::ops::Deref;
        self.metric_references.deref()
    }
    /// <p>An array of service groups that this service belongs to, providing a summary view of the service's organizational context.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.service_groups.is_none()`.
    pub fn service_groups(&self) -> &[crate::types::ServiceGroup] {
        self.service_groups.as_deref().unwrap_or_default()
    }
}
impl ServiceSummary {
    /// Creates a new builder-style object to manufacture [`ServiceSummary`](crate::types::ServiceSummary).
    pub fn builder() -> crate::types::builders::ServiceSummaryBuilder {
        crate::types::builders::ServiceSummaryBuilder::default()
    }
}

/// A builder for [`ServiceSummary`](crate::types::ServiceSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceSummaryBuilder {
    pub(crate) key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) attribute_maps: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>>,
    pub(crate) metric_references: ::std::option::Option<::std::vec::Vec<crate::types::MetricReference>>,
    pub(crate) service_groups: ::std::option::Option<::std::vec::Vec<crate::types::ServiceGroup>>,
}
impl ServiceSummaryBuilder {
    /// Adds a key-value pair to `key_attributes`.
    ///
    /// To override the contents of this collection use [`set_key_attributes`](Self::set_key_attributes).
    ///
    /// <p>This is a string-to-string map that help identify the objects discovered by Application Signals. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.key_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.key_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>This is a string-to-string map that help identify the objects discovered by Application Signals. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn set_key_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>This is a string-to-string map that help identify the objects discovered by Application Signals. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn get_key_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.key_attributes
    }
    /// Appends an item to `attribute_maps`.
    ///
    /// To override the contents of this collection use [`set_attribute_maps`](Self::set_attribute_maps).
    ///
    /// <p>This structure contains one or more string-to-string maps that help identify this service. It can include <i>platform attributes</i>, <i>application attributes</i>, and <i>telemetry attributes</i>.</p>
    /// <p>Platform attributes contain information the service's platform.</p>
    /// <ul>
    /// <li>
    /// <p><code>PlatformType</code> defines the hosted-in platform.</p></li>
    /// <li>
    /// <p><code>EKS.Cluster</code> is the name of the Amazon EKS cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Cluster</code> is the name of the self-hosted Kubernetes cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Namespace</code> is the name of the Kubernetes namespace in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Workload</code> is the name of the Kubernetes workload in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Node</code> is the name of the Kubernetes node in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Pod</code> is the name of the Kubernetes pod in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>EC2.AutoScalingGroup</code> is the name of the Amazon EC2 Auto Scaling group.</p></li>
    /// <li>
    /// <p><code>EC2.InstanceId</code> is the ID of the Amazon EC2 instance.</p></li>
    /// <li>
    /// <p><code>Host</code> is the name of the host, for all platform types.</p></li>
    /// </ul>
    /// <p>Application attributes contain information about the application.</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS.Application</code> is the application's name in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// <li>
    /// <p><code>AWS.Application.ARN</code> is the application's ARN in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// </ul>
    /// <p>Telemetry attributes contain telemetry information.</p>
    /// <ul>
    /// <li>
    /// <p><code>Telemetry.SDK</code> is the fingerprint of the OpenTelemetry SDK version for instrumented services.</p></li>
    /// <li>
    /// <p><code>Telemetry.Agent</code> is the fingerprint of the agent used to collect and send telemetry data.</p></li>
    /// <li>
    /// <p><code>Telemetry.Source</code> Specifies the point of application where the telemetry was collected or specifies what was used for the source of telemetry data.</p></li>
    /// </ul>
    pub fn attribute_maps(mut self, input: ::std::collections::HashMap<::std::string::String, ::std::string::String>) -> Self {
        let mut v = self.attribute_maps.unwrap_or_default();
        v.push(input);
        self.attribute_maps = ::std::option::Option::Some(v);
        self
    }
    /// <p>This structure contains one or more string-to-string maps that help identify this service. It can include <i>platform attributes</i>, <i>application attributes</i>, and <i>telemetry attributes</i>.</p>
    /// <p>Platform attributes contain information the service's platform.</p>
    /// <ul>
    /// <li>
    /// <p><code>PlatformType</code> defines the hosted-in platform.</p></li>
    /// <li>
    /// <p><code>EKS.Cluster</code> is the name of the Amazon EKS cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Cluster</code> is the name of the self-hosted Kubernetes cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Namespace</code> is the name of the Kubernetes namespace in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Workload</code> is the name of the Kubernetes workload in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Node</code> is the name of the Kubernetes node in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Pod</code> is the name of the Kubernetes pod in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>EC2.AutoScalingGroup</code> is the name of the Amazon EC2 Auto Scaling group.</p></li>
    /// <li>
    /// <p><code>EC2.InstanceId</code> is the ID of the Amazon EC2 instance.</p></li>
    /// <li>
    /// <p><code>Host</code> is the name of the host, for all platform types.</p></li>
    /// </ul>
    /// <p>Application attributes contain information about the application.</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS.Application</code> is the application's name in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// <li>
    /// <p><code>AWS.Application.ARN</code> is the application's ARN in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// </ul>
    /// <p>Telemetry attributes contain telemetry information.</p>
    /// <ul>
    /// <li>
    /// <p><code>Telemetry.SDK</code> is the fingerprint of the OpenTelemetry SDK version for instrumented services.</p></li>
    /// <li>
    /// <p><code>Telemetry.Agent</code> is the fingerprint of the agent used to collect and send telemetry data.</p></li>
    /// <li>
    /// <p><code>Telemetry.Source</code> Specifies the point of application where the telemetry was collected or specifies what was used for the source of telemetry data.</p></li>
    /// </ul>
    pub fn set_attribute_maps(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>>,
    ) -> Self {
        self.attribute_maps = input;
        self
    }
    /// <p>This structure contains one or more string-to-string maps that help identify this service. It can include <i>platform attributes</i>, <i>application attributes</i>, and <i>telemetry attributes</i>.</p>
    /// <p>Platform attributes contain information the service's platform.</p>
    /// <ul>
    /// <li>
    /// <p><code>PlatformType</code> defines the hosted-in platform.</p></li>
    /// <li>
    /// <p><code>EKS.Cluster</code> is the name of the Amazon EKS cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Cluster</code> is the name of the self-hosted Kubernetes cluster.</p></li>
    /// <li>
    /// <p><code>K8s.Namespace</code> is the name of the Kubernetes namespace in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Workload</code> is the name of the Kubernetes workload in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Node</code> is the name of the Kubernetes node in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>K8s.Pod</code> is the name of the Kubernetes pod in either Amazon EKS or Kubernetes clusters.</p></li>
    /// <li>
    /// <p><code>EC2.AutoScalingGroup</code> is the name of the Amazon EC2 Auto Scaling group.</p></li>
    /// <li>
    /// <p><code>EC2.InstanceId</code> is the ID of the Amazon EC2 instance.</p></li>
    /// <li>
    /// <p><code>Host</code> is the name of the host, for all platform types.</p></li>
    /// </ul>
    /// <p>Application attributes contain information about the application.</p>
    /// <ul>
    /// <li>
    /// <p><code>AWS.Application</code> is the application's name in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// <li>
    /// <p><code>AWS.Application.ARN</code> is the application's ARN in Amazon Web Services Service Catalog AppRegistry.</p></li>
    /// </ul>
    /// <p>Telemetry attributes contain telemetry information.</p>
    /// <ul>
    /// <li>
    /// <p><code>Telemetry.SDK</code> is the fingerprint of the OpenTelemetry SDK version for instrumented services.</p></li>
    /// <li>
    /// <p><code>Telemetry.Agent</code> is the fingerprint of the agent used to collect and send telemetry data.</p></li>
    /// <li>
    /// <p><code>Telemetry.Source</code> Specifies the point of application where the telemetry was collected or specifies what was used for the source of telemetry data.</p></li>
    /// </ul>
    pub fn get_attribute_maps(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>> {
        &self.attribute_maps
    }
    /// Appends an item to `metric_references`.
    ///
    /// To override the contents of this collection use [`set_metric_references`](Self::set_metric_references).
    ///
    /// <p>An array of structures that each contain information about one metric associated with this service.</p>
    pub fn metric_references(mut self, input: crate::types::MetricReference) -> Self {
        let mut v = self.metric_references.unwrap_or_default();
        v.push(input);
        self.metric_references = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures that each contain information about one metric associated with this service.</p>
    pub fn set_metric_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricReference>>) -> Self {
        self.metric_references = input;
        self
    }
    /// <p>An array of structures that each contain information about one metric associated with this service.</p>
    pub fn get_metric_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricReference>> {
        &self.metric_references
    }
    /// Appends an item to `service_groups`.
    ///
    /// To override the contents of this collection use [`set_service_groups`](Self::set_service_groups).
    ///
    /// <p>An array of service groups that this service belongs to, providing a summary view of the service's organizational context.</p>
    pub fn service_groups(mut self, input: crate::types::ServiceGroup) -> Self {
        let mut v = self.service_groups.unwrap_or_default();
        v.push(input);
        self.service_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of service groups that this service belongs to, providing a summary view of the service's organizational context.</p>
    pub fn set_service_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceGroup>>) -> Self {
        self.service_groups = input;
        self
    }
    /// <p>An array of service groups that this service belongs to, providing a summary view of the service's organizational context.</p>
    pub fn get_service_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceGroup>> {
        &self.service_groups
    }
    /// Consumes the builder and constructs a [`ServiceSummary`](crate::types::ServiceSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_attributes`](crate::types::builders::ServiceSummaryBuilder::key_attributes)
    /// - [`metric_references`](crate::types::builders::ServiceSummaryBuilder::metric_references)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceSummary {
            key_attributes: self.key_attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_attributes",
                    "key_attributes was not specified but it is required when building ServiceSummary",
                )
            })?,
            attribute_maps: self.attribute_maps,
            metric_references: self.metric_references.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_references",
                    "metric_references was not specified but it is required when building ServiceSummary",
                )
            })?,
            service_groups: self.service_groups,
        })
    }
}
