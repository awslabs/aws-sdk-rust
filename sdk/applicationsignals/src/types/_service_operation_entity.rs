// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a specific operation within a service that can be monitored and audited independently.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceOperationEntity {
    /// <p>The service entity that contains this operation.</p>
    pub service: ::std::option::Option<crate::types::ServiceEntity>,
    /// <p>The name of the specific operation within the service.</p>
    pub operation: ::std::option::Option<::std::string::String>,
    /// <p>The type of metric associated with this service operation, such as "Latency", "ErrorRate", or "Throughput".</p>
    pub metric_type: ::std::option::Option<::std::string::String>,
}
impl ServiceOperationEntity {
    /// <p>The service entity that contains this operation.</p>
    pub fn service(&self) -> ::std::option::Option<&crate::types::ServiceEntity> {
        self.service.as_ref()
    }
    /// <p>The name of the specific operation within the service.</p>
    pub fn operation(&self) -> ::std::option::Option<&str> {
        self.operation.as_deref()
    }
    /// <p>The type of metric associated with this service operation, such as "Latency", "ErrorRate", or "Throughput".</p>
    pub fn metric_type(&self) -> ::std::option::Option<&str> {
        self.metric_type.as_deref()
    }
}
impl ServiceOperationEntity {
    /// Creates a new builder-style object to manufacture [`ServiceOperationEntity`](crate::types::ServiceOperationEntity).
    pub fn builder() -> crate::types::builders::ServiceOperationEntityBuilder {
        crate::types::builders::ServiceOperationEntityBuilder::default()
    }
}

/// A builder for [`ServiceOperationEntity`](crate::types::ServiceOperationEntity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceOperationEntityBuilder {
    pub(crate) service: ::std::option::Option<crate::types::ServiceEntity>,
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) metric_type: ::std::option::Option<::std::string::String>,
}
impl ServiceOperationEntityBuilder {
    /// <p>The service entity that contains this operation.</p>
    pub fn service(mut self, input: crate::types::ServiceEntity) -> Self {
        self.service = ::std::option::Option::Some(input);
        self
    }
    /// <p>The service entity that contains this operation.</p>
    pub fn set_service(mut self, input: ::std::option::Option<crate::types::ServiceEntity>) -> Self {
        self.service = input;
        self
    }
    /// <p>The service entity that contains this operation.</p>
    pub fn get_service(&self) -> &::std::option::Option<crate::types::ServiceEntity> {
        &self.service
    }
    /// <p>The name of the specific operation within the service.</p>
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the specific operation within the service.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The name of the specific operation within the service.</p>
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// <p>The type of metric associated with this service operation, such as "Latency", "ErrorRate", or "Throughput".</p>
    pub fn metric_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of metric associated with this service operation, such as "Latency", "ErrorRate", or "Throughput".</p>
    pub fn set_metric_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_type = input;
        self
    }
    /// <p>The type of metric associated with this service operation, such as "Latency", "ErrorRate", or "Throughput".</p>
    pub fn get_metric_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_type
    }
    /// Consumes the builder and constructs a [`ServiceOperationEntity`](crate::types::ServiceOperationEntity).
    pub fn build(self) -> crate::types::ServiceOperationEntity {
        crate::types::ServiceOperationEntity {
            service: self.service,
            operation: self.operation,
            metric_type: self.metric_type,
        }
    }
}
