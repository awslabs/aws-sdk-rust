// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the current state and health information for a service monitored by Application Signals.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceState {
    /// <p>The attribute filters that were applied when retrieving this service state.</p>
    pub attribute_filters: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>,
    /// <p>The service entity information for this service state.</p>
    pub service: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>An array of the most recent change events that may have affected this service, such as deployments or configuration changes.</p>
    pub latest_change_events: ::std::vec::Vec<crate::types::ChangeEvent>,
}
impl ServiceState {
    /// <p>The attribute filters that were applied when retrieving this service state.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_filters.is_none()`.
    pub fn attribute_filters(&self) -> &[crate::types::AttributeFilter] {
        self.attribute_filters.as_deref().unwrap_or_default()
    }
    /// <p>The service entity information for this service state.</p>
    pub fn service(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.service
    }
    /// <p>An array of the most recent change events that may have affected this service, such as deployments or configuration changes.</p>
    pub fn latest_change_events(&self) -> &[crate::types::ChangeEvent] {
        use std::ops::Deref;
        self.latest_change_events.deref()
    }
}
impl ServiceState {
    /// Creates a new builder-style object to manufacture [`ServiceState`](crate::types::ServiceState).
    pub fn builder() -> crate::types::builders::ServiceStateBuilder {
        crate::types::builders::ServiceStateBuilder::default()
    }
}

/// A builder for [`ServiceState`](crate::types::ServiceState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceStateBuilder {
    pub(crate) attribute_filters: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>,
    pub(crate) service: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) latest_change_events: ::std::option::Option<::std::vec::Vec<crate::types::ChangeEvent>>,
}
impl ServiceStateBuilder {
    /// Appends an item to `attribute_filters`.
    ///
    /// To override the contents of this collection use [`set_attribute_filters`](Self::set_attribute_filters).
    ///
    /// <p>The attribute filters that were applied when retrieving this service state.</p>
    pub fn attribute_filters(mut self, input: crate::types::AttributeFilter) -> Self {
        let mut v = self.attribute_filters.unwrap_or_default();
        v.push(input);
        self.attribute_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The attribute filters that were applied when retrieving this service state.</p>
    pub fn set_attribute_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>) -> Self {
        self.attribute_filters = input;
        self
    }
    /// <p>The attribute filters that were applied when retrieving this service state.</p>
    pub fn get_attribute_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>> {
        &self.attribute_filters
    }
    /// Adds a key-value pair to `service`.
    ///
    /// To override the contents of this collection use [`set_service`](Self::set_service).
    ///
    /// <p>The service entity information for this service state.</p>
    pub fn service(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.service.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.service = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The service entity information for this service state.</p>
    pub fn set_service(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.service = input;
        self
    }
    /// <p>The service entity information for this service state.</p>
    pub fn get_service(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.service
    }
    /// Appends an item to `latest_change_events`.
    ///
    /// To override the contents of this collection use [`set_latest_change_events`](Self::set_latest_change_events).
    ///
    /// <p>An array of the most recent change events that may have affected this service, such as deployments or configuration changes.</p>
    pub fn latest_change_events(mut self, input: crate::types::ChangeEvent) -> Self {
        let mut v = self.latest_change_events.unwrap_or_default();
        v.push(input);
        self.latest_change_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of the most recent change events that may have affected this service, such as deployments or configuration changes.</p>
    pub fn set_latest_change_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ChangeEvent>>) -> Self {
        self.latest_change_events = input;
        self
    }
    /// <p>An array of the most recent change events that may have affected this service, such as deployments or configuration changes.</p>
    pub fn get_latest_change_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ChangeEvent>> {
        &self.latest_change_events
    }
    /// Consumes the builder and constructs a [`ServiceState`](crate::types::ServiceState).
    /// This method will fail if any of the following fields are not set:
    /// - [`service`](crate::types::builders::ServiceStateBuilder::service)
    /// - [`latest_change_events`](crate::types::builders::ServiceStateBuilder::latest_change_events)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceState, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceState {
            attribute_filters: self.attribute_filters,
            service: self.service.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service",
                    "service was not specified but it is required when building ServiceState",
                )
            })?,
            latest_change_events: self.latest_change_events.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "latest_change_events",
                    "latest_change_events was not specified but it is required when building ServiceState",
                )
            })?,
        })
    }
}
