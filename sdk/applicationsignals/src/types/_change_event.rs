// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a change event that occurred in the system, such as deployments, configuration changes, or other operational events that may impact service performance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChangeEvent {
    /// <p>The timestamp when the change event occurred, expressed as the number of milliseconds since January 1, 1970, 00:00:00 UTC.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The AWS account ID where the change event occurred.</p>
    pub account_id: ::std::string::String,
    /// <p>The AWS region where the change event occurred.</p>
    pub region: ::std::string::String,
    /// <p>The entity or resource that was changed, such as a service, deployment, or configuration.</p>
    pub entity: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The type of change that occurred, such as "Deployment", "Configuration", or "Infrastructure".</p>
    pub change_event_type: crate::types::ChangeEventType,
    /// <p>A unique identifier for the change event.</p>
    pub event_id: ::std::string::String,
    /// <p>The name of the user or system that initiated the change event.</p>
    pub user_name: ::std::option::Option<::std::string::String>,
    /// <p>A descriptive name for the change event that provides context about what changed.</p>
    pub event_name: ::std::option::Option<::std::string::String>,
}
impl ChangeEvent {
    /// <p>The timestamp when the change event occurred, expressed as the number of milliseconds since January 1, 1970, 00:00:00 UTC.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The AWS account ID where the change event occurred.</p>
    pub fn account_id(&self) -> &str {
        use std::ops::Deref;
        self.account_id.deref()
    }
    /// <p>The AWS region where the change event occurred.</p>
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
    /// <p>The entity or resource that was changed, such as a service, deployment, or configuration.</p>
    pub fn entity(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.entity
    }
    /// <p>The type of change that occurred, such as "Deployment", "Configuration", or "Infrastructure".</p>
    pub fn change_event_type(&self) -> &crate::types::ChangeEventType {
        &self.change_event_type
    }
    /// <p>A unique identifier for the change event.</p>
    pub fn event_id(&self) -> &str {
        use std::ops::Deref;
        self.event_id.deref()
    }
    /// <p>The name of the user or system that initiated the change event.</p>
    pub fn user_name(&self) -> ::std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>A descriptive name for the change event that provides context about what changed.</p>
    pub fn event_name(&self) -> ::std::option::Option<&str> {
        self.event_name.as_deref()
    }
}
impl ChangeEvent {
    /// Creates a new builder-style object to manufacture [`ChangeEvent`](crate::types::ChangeEvent).
    pub fn builder() -> crate::types::builders::ChangeEventBuilder {
        crate::types::builders::ChangeEventBuilder::default()
    }
}

/// A builder for [`ChangeEvent`](crate::types::ChangeEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChangeEventBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) entity: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) change_event_type: ::std::option::Option<crate::types::ChangeEventType>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) event_name: ::std::option::Option<::std::string::String>,
}
impl ChangeEventBuilder {
    /// <p>The timestamp when the change event occurred, expressed as the number of milliseconds since January 1, 1970, 00:00:00 UTC.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the change event occurred, expressed as the number of milliseconds since January 1, 1970, 00:00:00 UTC.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The timestamp when the change event occurred, expressed as the number of milliseconds since January 1, 1970, 00:00:00 UTC.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The AWS account ID where the change event occurred.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID where the change event occurred.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The AWS account ID where the change event occurred.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The AWS region where the change event occurred.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS region where the change event occurred.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The AWS region where the change event occurred.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Adds a key-value pair to `entity`.
    ///
    /// To override the contents of this collection use [`set_entity`](Self::set_entity).
    ///
    /// <p>The entity or resource that was changed, such as a service, deployment, or configuration.</p>
    pub fn entity(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.entity.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.entity = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The entity or resource that was changed, such as a service, deployment, or configuration.</p>
    pub fn set_entity(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.entity = input;
        self
    }
    /// <p>The entity or resource that was changed, such as a service, deployment, or configuration.</p>
    pub fn get_entity(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.entity
    }
    /// <p>The type of change that occurred, such as "Deployment", "Configuration", or "Infrastructure".</p>
    /// This field is required.
    pub fn change_event_type(mut self, input: crate::types::ChangeEventType) -> Self {
        self.change_event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of change that occurred, such as "Deployment", "Configuration", or "Infrastructure".</p>
    pub fn set_change_event_type(mut self, input: ::std::option::Option<crate::types::ChangeEventType>) -> Self {
        self.change_event_type = input;
        self
    }
    /// <p>The type of change that occurred, such as "Deployment", "Configuration", or "Infrastructure".</p>
    pub fn get_change_event_type(&self) -> &::std::option::Option<crate::types::ChangeEventType> {
        &self.change_event_type
    }
    /// <p>A unique identifier for the change event.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the change event.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>A unique identifier for the change event.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The name of the user or system that initiated the change event.</p>
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user or system that initiated the change event.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The name of the user or system that initiated the change event.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>A descriptive name for the change event that provides context about what changed.</p>
    pub fn event_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive name for the change event that provides context about what changed.</p>
    pub fn set_event_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_name = input;
        self
    }
    /// <p>A descriptive name for the change event that provides context about what changed.</p>
    pub fn get_event_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_name
    }
    /// Consumes the builder and constructs a [`ChangeEvent`](crate::types::ChangeEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`timestamp`](crate::types::builders::ChangeEventBuilder::timestamp)
    /// - [`account_id`](crate::types::builders::ChangeEventBuilder::account_id)
    /// - [`region`](crate::types::builders::ChangeEventBuilder::region)
    /// - [`entity`](crate::types::builders::ChangeEventBuilder::entity)
    /// - [`change_event_type`](crate::types::builders::ChangeEventBuilder::change_event_type)
    /// - [`event_id`](crate::types::builders::ChangeEventBuilder::event_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ChangeEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ChangeEvent {
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building ChangeEvent",
                )
            })?,
            account_id: self.account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_id",
                    "account_id was not specified but it is required when building ChangeEvent",
                )
            })?,
            region: self.region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region",
                    "region was not specified but it is required when building ChangeEvent",
                )
            })?,
            entity: self.entity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entity",
                    "entity was not specified but it is required when building ChangeEvent",
                )
            })?,
            change_event_type: self.change_event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "change_event_type",
                    "change_event_type was not specified but it is required when building ChangeEvent",
                )
            })?,
            event_id: self.event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_id",
                    "event_id was not specified but it is required when building ChangeEvent",
                )
            })?,
            user_name: self.user_name,
            event_name: self.event_name,
        })
    }
}
