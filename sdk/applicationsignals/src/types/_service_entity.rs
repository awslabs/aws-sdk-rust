// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a service entity that is monitored by Application Signals.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceEntity {
    /// <p>The type of service, such as "WebService", "Database", "Queue", or "Function".</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service as identified by Application Signals.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The environment where the service is deployed, such as "Production", "Staging", or "Development".</p>
    pub environment: ::std::option::Option<::std::string::String>,
    /// <p>The AWS account ID where the service is deployed.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
}
impl ServiceEntity {
    /// <p>The type of service, such as "WebService", "Database", "Queue", or "Function".</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The name of the service as identified by Application Signals.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The environment where the service is deployed, such as "Production", "Staging", or "Development".</p>
    pub fn environment(&self) -> ::std::option::Option<&str> {
        self.environment.as_deref()
    }
    /// <p>The AWS account ID where the service is deployed.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
}
impl ServiceEntity {
    /// Creates a new builder-style object to manufacture [`ServiceEntity`](crate::types::ServiceEntity).
    pub fn builder() -> crate::types::builders::ServiceEntityBuilder {
        crate::types::builders::ServiceEntityBuilder::default()
    }
}

/// A builder for [`ServiceEntity`](crate::types::ServiceEntity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceEntityBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) environment: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
}
impl ServiceEntityBuilder {
    /// <p>The type of service, such as "WebService", "Database", "Queue", or "Function".</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of service, such as "WebService", "Database", "Queue", or "Function".</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of service, such as "WebService", "Database", "Queue", or "Function".</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The name of the service as identified by Application Signals.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service as identified by Application Signals.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the service as identified by Application Signals.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The environment where the service is deployed, such as "Production", "Staging", or "Development".</p>
    pub fn environment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment where the service is deployed, such as "Production", "Staging", or "Development".</p>
    pub fn set_environment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment = input;
        self
    }
    /// <p>The environment where the service is deployed, such as "Production", "Staging", or "Development".</p>
    pub fn get_environment(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment
    }
    /// <p>The AWS account ID where the service is deployed.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID where the service is deployed.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The AWS account ID where the service is deployed.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// Consumes the builder and constructs a [`ServiceEntity`](crate::types::ServiceEntity).
    pub fn build(self) -> crate::types::ServiceEntity {
        crate::types::ServiceEntity {
            r#type: self.r#type,
            name: self.name,
            environment: self.environment,
            aws_account_id: self.aws_account_id,
        }
    }
}
