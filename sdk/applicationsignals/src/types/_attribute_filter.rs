// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a filter for service attributes. Used to narrow down results based on specific attribute names and values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttributeFilter {
    /// <p>The name of the attribute to filter on. This corresponds to service metadata attributes such as environment, team, or custom tags.</p>
    pub attribute_filter_name: ::std::string::String,
    /// <p>An array of values to match against the specified attribute. Services with attribute values matching any of these values will be included in the results.</p>
    pub attribute_filter_values: ::std::vec::Vec<::std::string::String>,
}
impl AttributeFilter {
    /// <p>The name of the attribute to filter on. This corresponds to service metadata attributes such as environment, team, or custom tags.</p>
    pub fn attribute_filter_name(&self) -> &str {
        use std::ops::Deref;
        self.attribute_filter_name.deref()
    }
    /// <p>An array of values to match against the specified attribute. Services with attribute values matching any of these values will be included in the results.</p>
    pub fn attribute_filter_values(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.attribute_filter_values.deref()
    }
}
impl AttributeFilter {
    /// Creates a new builder-style object to manufacture [`AttributeFilter`](crate::types::AttributeFilter).
    pub fn builder() -> crate::types::builders::AttributeFilterBuilder {
        crate::types::builders::AttributeFilterBuilder::default()
    }
}

/// A builder for [`AttributeFilter`](crate::types::AttributeFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttributeFilterBuilder {
    pub(crate) attribute_filter_name: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_filter_values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AttributeFilterBuilder {
    /// <p>The name of the attribute to filter on. This corresponds to service metadata attributes such as environment, team, or custom tags.</p>
    /// This field is required.
    pub fn attribute_filter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_filter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute to filter on. This corresponds to service metadata attributes such as environment, team, or custom tags.</p>
    pub fn set_attribute_filter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_filter_name = input;
        self
    }
    /// <p>The name of the attribute to filter on. This corresponds to service metadata attributes such as environment, team, or custom tags.</p>
    pub fn get_attribute_filter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_filter_name
    }
    /// Appends an item to `attribute_filter_values`.
    ///
    /// To override the contents of this collection use [`set_attribute_filter_values`](Self::set_attribute_filter_values).
    ///
    /// <p>An array of values to match against the specified attribute. Services with attribute values matching any of these values will be included in the results.</p>
    pub fn attribute_filter_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.attribute_filter_values.unwrap_or_default();
        v.push(input.into());
        self.attribute_filter_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of values to match against the specified attribute. Services with attribute values matching any of these values will be included in the results.</p>
    pub fn set_attribute_filter_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.attribute_filter_values = input;
        self
    }
    /// <p>An array of values to match against the specified attribute. Services with attribute values matching any of these values will be included in the results.</p>
    pub fn get_attribute_filter_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.attribute_filter_values
    }
    /// Consumes the builder and constructs a [`AttributeFilter`](crate::types::AttributeFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`attribute_filter_name`](crate::types::builders::AttributeFilterBuilder::attribute_filter_name)
    /// - [`attribute_filter_values`](crate::types::builders::AttributeFilterBuilder::attribute_filter_values)
    pub fn build(self) -> ::std::result::Result<crate::types::AttributeFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AttributeFilter {
            attribute_filter_name: self.attribute_filter_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute_filter_name",
                    "attribute_filter_name was not specified but it is required when building AttributeFilter",
                )
            })?,
            attribute_filter_values: self.attribute_filter_values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute_filter_values",
                    "attribute_filter_values was not specified but it is required when building AttributeFilter",
                )
            })?,
        })
    }
}
