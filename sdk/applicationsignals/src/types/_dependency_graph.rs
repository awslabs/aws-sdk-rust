// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a graph showing the dependencies between services and components in your application architecture.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DependencyGraph {
    /// <p>An array of nodes in the dependency graph, where each node represents a service or component.</p>
    pub nodes: ::std::option::Option<::std::vec::Vec<crate::types::Node>>,
    /// <p>An array of edges in the dependency graph, where each edge represents a connection or dependency between two nodes.</p>
    pub edges: ::std::option::Option<::std::vec::Vec<crate::types::Edge>>,
}
impl DependencyGraph {
    /// <p>An array of nodes in the dependency graph, where each node represents a service or component.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.nodes.is_none()`.
    pub fn nodes(&self) -> &[crate::types::Node] {
        self.nodes.as_deref().unwrap_or_default()
    }
    /// <p>An array of edges in the dependency graph, where each edge represents a connection or dependency between two nodes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.edges.is_none()`.
    pub fn edges(&self) -> &[crate::types::Edge] {
        self.edges.as_deref().unwrap_or_default()
    }
}
impl DependencyGraph {
    /// Creates a new builder-style object to manufacture [`DependencyGraph`](crate::types::DependencyGraph).
    pub fn builder() -> crate::types::builders::DependencyGraphBuilder {
        crate::types::builders::DependencyGraphBuilder::default()
    }
}

/// A builder for [`DependencyGraph`](crate::types::DependencyGraph).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DependencyGraphBuilder {
    pub(crate) nodes: ::std::option::Option<::std::vec::Vec<crate::types::Node>>,
    pub(crate) edges: ::std::option::Option<::std::vec::Vec<crate::types::Edge>>,
}
impl DependencyGraphBuilder {
    /// Appends an item to `nodes`.
    ///
    /// To override the contents of this collection use [`set_nodes`](Self::set_nodes).
    ///
    /// <p>An array of nodes in the dependency graph, where each node represents a service or component.</p>
    pub fn nodes(mut self, input: crate::types::Node) -> Self {
        let mut v = self.nodes.unwrap_or_default();
        v.push(input);
        self.nodes = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of nodes in the dependency graph, where each node represents a service or component.</p>
    pub fn set_nodes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Node>>) -> Self {
        self.nodes = input;
        self
    }
    /// <p>An array of nodes in the dependency graph, where each node represents a service or component.</p>
    pub fn get_nodes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Node>> {
        &self.nodes
    }
    /// Appends an item to `edges`.
    ///
    /// To override the contents of this collection use [`set_edges`](Self::set_edges).
    ///
    /// <p>An array of edges in the dependency graph, where each edge represents a connection or dependency between two nodes.</p>
    pub fn edges(mut self, input: crate::types::Edge) -> Self {
        let mut v = self.edges.unwrap_or_default();
        v.push(input);
        self.edges = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of edges in the dependency graph, where each edge represents a connection or dependency between two nodes.</p>
    pub fn set_edges(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Edge>>) -> Self {
        self.edges = input;
        self
    }
    /// <p>An array of edges in the dependency graph, where each edge represents a connection or dependency between two nodes.</p>
    pub fn get_edges(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Edge>> {
        &self.edges
    }
    /// Consumes the builder and constructs a [`DependencyGraph`](crate::types::DependencyGraph).
    pub fn build(self) -> crate::types::DependencyGraph {
        crate::types::DependencyGraph {
            nodes: self.nodes,
            edges: self.edges,
        }
    }
}
