// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the result of an audit performed by a specific auditor on a resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuditorResult {
    /// <p>The name or identifier of the auditor that performed the examination and generated this result.</p>
    pub auditor: ::std::option::Option<::std::string::String>,
    /// <p>A detailed description of what the auditor found, including any recommendations for remediation or further investigation.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The severity level of the finding, such as "Critical", "High", "Medium", or "Low". This helps prioritize remediation efforts.</p>
    pub severity: ::std::option::Option<crate::types::Severity>,
}
impl AuditorResult {
    /// <p>The name or identifier of the auditor that performed the examination and generated this result.</p>
    pub fn auditor(&self) -> ::std::option::Option<&str> {
        self.auditor.as_deref()
    }
    /// <p>A detailed description of what the auditor found, including any recommendations for remediation or further investigation.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The severity level of the finding, such as "Critical", "High", "Medium", or "Low". This helps prioritize remediation efforts.</p>
    pub fn severity(&self) -> ::std::option::Option<&crate::types::Severity> {
        self.severity.as_ref()
    }
}
impl AuditorResult {
    /// Creates a new builder-style object to manufacture [`AuditorResult`](crate::types::AuditorResult).
    pub fn builder() -> crate::types::builders::AuditorResultBuilder {
        crate::types::builders::AuditorResultBuilder::default()
    }
}

/// A builder for [`AuditorResult`](crate::types::AuditorResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuditorResultBuilder {
    pub(crate) auditor: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<crate::types::Severity>,
}
impl AuditorResultBuilder {
    /// <p>The name or identifier of the auditor that performed the examination and generated this result.</p>
    pub fn auditor(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auditor = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or identifier of the auditor that performed the examination and generated this result.</p>
    pub fn set_auditor(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auditor = input;
        self
    }
    /// <p>The name or identifier of the auditor that performed the examination and generated this result.</p>
    pub fn get_auditor(&self) -> &::std::option::Option<::std::string::String> {
        &self.auditor
    }
    /// <p>A detailed description of what the auditor found, including any recommendations for remediation or further investigation.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed description of what the auditor found, including any recommendations for remediation or further investigation.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A detailed description of what the auditor found, including any recommendations for remediation or further investigation.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The severity level of the finding, such as "Critical", "High", "Medium", or "Low". This helps prioritize remediation efforts.</p>
    pub fn severity(mut self, input: crate::types::Severity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The severity level of the finding, such as "Critical", "High", "Medium", or "Low". This helps prioritize remediation efforts.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::Severity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The severity level of the finding, such as "Critical", "High", "Medium", or "Low". This helps prioritize remediation efforts.</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::Severity> {
        &self.severity
    }
    /// Consumes the builder and constructs a [`AuditorResult`](crate::types::AuditorResult).
    pub fn build(self) -> crate::types::AuditorResult {
        crate::types::AuditorResult {
            auditor: self.auditor,
            description: self.description,
            severity: self.severity,
        }
    }
}
