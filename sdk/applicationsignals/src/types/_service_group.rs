// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a logical grouping of services based on shared attributes or characteristics.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceGroup {
    /// <p>The name of the group, such as "Environment", "Team", or "Application".</p>
    pub group_name: ::std::string::String,
    /// <p>The specific value for this group, such as "Production", "TeamA", or "WebApp".</p>
    pub group_value: ::std::string::String,
    /// <p>The source of the grouping information, such as "Tag", "Attribute", or "Manual".</p>
    pub group_source: ::std::string::String,
    /// <p>A unique identifier for the group within the grouping configuration.</p>
    pub group_identifier: ::std::string::String,
}
impl ServiceGroup {
    /// <p>The name of the group, such as "Environment", "Team", or "Application".</p>
    pub fn group_name(&self) -> &str {
        use std::ops::Deref;
        self.group_name.deref()
    }
    /// <p>The specific value for this group, such as "Production", "TeamA", or "WebApp".</p>
    pub fn group_value(&self) -> &str {
        use std::ops::Deref;
        self.group_value.deref()
    }
    /// <p>The source of the grouping information, such as "Tag", "Attribute", or "Manual".</p>
    pub fn group_source(&self) -> &str {
        use std::ops::Deref;
        self.group_source.deref()
    }
    /// <p>A unique identifier for the group within the grouping configuration.</p>
    pub fn group_identifier(&self) -> &str {
        use std::ops::Deref;
        self.group_identifier.deref()
    }
}
impl ServiceGroup {
    /// Creates a new builder-style object to manufacture [`ServiceGroup`](crate::types::ServiceGroup).
    pub fn builder() -> crate::types::builders::ServiceGroupBuilder {
        crate::types::builders::ServiceGroupBuilder::default()
    }
}

/// A builder for [`ServiceGroup`](crate::types::ServiceGroup).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceGroupBuilder {
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    pub(crate) group_value: ::std::option::Option<::std::string::String>,
    pub(crate) group_source: ::std::option::Option<::std::string::String>,
    pub(crate) group_identifier: ::std::option::Option<::std::string::String>,
}
impl ServiceGroupBuilder {
    /// <p>The name of the group, such as "Environment", "Team", or "Application".</p>
    /// This field is required.
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the group, such as "Environment", "Team", or "Application".</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The name of the group, such as "Environment", "Team", or "Application".</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    /// <p>The specific value for this group, such as "Production", "TeamA", or "WebApp".</p>
    /// This field is required.
    pub fn group_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specific value for this group, such as "Production", "TeamA", or "WebApp".</p>
    pub fn set_group_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_value = input;
        self
    }
    /// <p>The specific value for this group, such as "Production", "TeamA", or "WebApp".</p>
    pub fn get_group_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_value
    }
    /// <p>The source of the grouping information, such as "Tag", "Attribute", or "Manual".</p>
    /// This field is required.
    pub fn group_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source of the grouping information, such as "Tag", "Attribute", or "Manual".</p>
    pub fn set_group_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_source = input;
        self
    }
    /// <p>The source of the grouping information, such as "Tag", "Attribute", or "Manual".</p>
    pub fn get_group_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_source
    }
    /// <p>A unique identifier for the group within the grouping configuration.</p>
    /// This field is required.
    pub fn group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the group within the grouping configuration.</p>
    pub fn set_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_identifier = input;
        self
    }
    /// <p>A unique identifier for the group within the grouping configuration.</p>
    pub fn get_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_identifier
    }
    /// Consumes the builder and constructs a [`ServiceGroup`](crate::types::ServiceGroup).
    /// This method will fail if any of the following fields are not set:
    /// - [`group_name`](crate::types::builders::ServiceGroupBuilder::group_name)
    /// - [`group_value`](crate::types::builders::ServiceGroupBuilder::group_value)
    /// - [`group_source`](crate::types::builders::ServiceGroupBuilder::group_source)
    /// - [`group_identifier`](crate::types::builders::ServiceGroupBuilder::group_identifier)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceGroup, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceGroup {
            group_name: self.group_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "group_name",
                    "group_name was not specified but it is required when building ServiceGroup",
                )
            })?,
            group_value: self.group_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "group_value",
                    "group_value was not specified but it is required when building ServiceGroup",
                )
            })?,
            group_source: self.group_source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "group_source",
                    "group_source was not specified but it is required when building ServiceGroup",
                )
            })?,
            group_identifier: self.group_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "group_identifier",
                    "group_identifier was not specified but it is required when building ServiceGroup",
                )
            })?,
        })
    }
}
