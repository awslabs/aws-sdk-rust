// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn app_sync_runtime_correct_errors(
    mut builder: crate::types::builders::AppSyncRuntimeBuilder,
) -> crate::types::builders::AppSyncRuntimeBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::RuntimeName>().ok()
    }
    if builder.runtime_version.is_none() {
        builder.runtime_version = Some(Default::default())
    }
    builder
}

pub(crate) fn caching_config_correct_errors(
    mut builder: crate::types::builders::CachingConfigBuilder,
) -> crate::types::builders::CachingConfigBuilder {
    if builder.ttl.is_none() {
        builder.ttl = Some(Default::default())
    }
    builder
}

pub(crate) fn dynamodb_data_source_config_correct_errors(
    mut builder: crate::types::builders::DynamodbDataSourceConfigBuilder,
) -> crate::types::builders::DynamodbDataSourceConfigBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.aws_region.is_none() {
        builder.aws_region = Some(Default::default())
    }
    builder
}

pub(crate) fn elasticsearch_data_source_config_correct_errors(
    mut builder: crate::types::builders::ElasticsearchDataSourceConfigBuilder,
) -> crate::types::builders::ElasticsearchDataSourceConfigBuilder {
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    if builder.aws_region.is_none() {
        builder.aws_region = Some(Default::default())
    }
    builder
}

pub(crate) fn event_bridge_data_source_config_correct_errors(
    mut builder: crate::types::builders::EventBridgeDataSourceConfigBuilder,
) -> crate::types::builders::EventBridgeDataSourceConfigBuilder {
    if builder.event_bus_arn.is_none() {
        builder.event_bus_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_authorizer_config_correct_errors(
    mut builder: crate::types::builders::LambdaAuthorizerConfigBuilder,
) -> crate::types::builders::LambdaAuthorizerConfigBuilder {
    if builder.authorizer_uri.is_none() {
        builder.authorizer_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_data_source_config_correct_errors(
    mut builder: crate::types::builders::LambdaDataSourceConfigBuilder,
) -> crate::types::builders::LambdaDataSourceConfigBuilder {
    if builder.lambda_function_arn.is_none() {
        builder.lambda_function_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn log_config_correct_errors(mut builder: crate::types::builders::LogConfigBuilder) -> crate::types::builders::LogConfigBuilder {
    if builder.field_log_level.is_none() {
        builder.field_log_level = "no value was set".parse::<crate::types::FieldLogLevel>().ok()
    }
    if builder.cloud_watch_logs_role_arn.is_none() {
        builder.cloud_watch_logs_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn open_id_connect_config_correct_errors(
    mut builder: crate::types::builders::OpenIdConnectConfigBuilder,
) -> crate::types::builders::OpenIdConnectConfigBuilder {
    if builder.issuer.is_none() {
        builder.issuer = Some(Default::default())
    }
    builder
}

pub(crate) fn open_search_service_data_source_config_correct_errors(
    mut builder: crate::types::builders::OpenSearchServiceDataSourceConfigBuilder,
) -> crate::types::builders::OpenSearchServiceDataSourceConfigBuilder {
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    if builder.aws_region.is_none() {
        builder.aws_region = Some(Default::default())
    }
    builder
}

pub(crate) fn user_pool_config_correct_errors(
    mut builder: crate::types::builders::UserPoolConfigBuilder,
) -> crate::types::builders::UserPoolConfigBuilder {
    if builder.user_pool_id.is_none() {
        builder.user_pool_id = Some(Default::default())
    }
    if builder.aws_region.is_none() {
        builder.aws_region = Some(Default::default())
    }
    if builder.default_action.is_none() {
        builder.default_action = "no value was set".parse::<crate::types::DefaultAction>().ok()
    }
    builder
}

pub(crate) fn authorization_config_correct_errors(
    mut builder: crate::types::builders::AuthorizationConfigBuilder,
) -> crate::types::builders::AuthorizationConfigBuilder {
    if builder.authorization_type.is_none() {
        builder.authorization_type = "no value was set".parse::<crate::types::AuthorizationType>().ok()
    }
    builder
}

pub(crate) fn cognito_user_pool_config_correct_errors(
    mut builder: crate::types::builders::CognitoUserPoolConfigBuilder,
) -> crate::types::builders::CognitoUserPoolConfigBuilder {
    if builder.user_pool_id.is_none() {
        builder.user_pool_id = Some(Default::default())
    }
    if builder.aws_region.is_none() {
        builder.aws_region = Some(Default::default())
    }
    builder
}
