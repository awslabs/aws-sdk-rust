// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_data_source::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.dynamodb_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("dynamodbConfig").start_object();
        crate::protocol_serde::shape_dynamodb_data_source_config::ser_dynamodb_data_source_config(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.elasticsearch_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("elasticsearchConfig").start_object();
        crate::protocol_serde::shape_elasticsearch_data_source_config::ser_elasticsearch_data_source_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.http_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("httpConfig").start_object();
        crate::protocol_serde::shape_http_data_source_config::ser_http_data_source_config(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.lambda_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("lambdaConfig").start_object();
        crate::protocol_serde::shape_lambda_data_source_config::ser_lambda_data_source_config(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.open_search_service_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("openSearchServiceConfig").start_object();
        crate::protocol_serde::shape_open_search_service_data_source_config::ser_open_search_service_data_source_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.relational_database_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("relationalDatabaseConfig").start_object();
        crate::protocol_serde::shape_relational_database_data_source_config::ser_relational_database_data_source_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.service_role_arn {
        object.key("serviceRoleArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.r#type {
        object.key("type").string(var_15.as_str());
    }
    Ok(())
}
