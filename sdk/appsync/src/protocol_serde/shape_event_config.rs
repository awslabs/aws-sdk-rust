// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_event_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::EventConfig,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("authProviders").start_array();
        for item_2 in &input.auth_providers {
            {
                #[allow(unused_mut)]
                let mut object_3 = array_1.value().start_object();
                crate::protocol_serde::shape_auth_provider::ser_auth_provider(&mut object_3, item_2)?;
                object_3.finish();
            }
        }
        array_1.finish();
    }
    {
        let mut array_4 = object.key("connectionAuthModes").start_array();
        for item_5 in &input.connection_auth_modes {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_auth_mode::ser_auth_mode(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    {
        let mut array_7 = object.key("defaultPublishAuthModes").start_array();
        for item_8 in &input.default_publish_auth_modes {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_auth_mode::ser_auth_mode(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    {
        let mut array_10 = object.key("defaultSubscribeAuthModes").start_array();
        for item_11 in &input.default_subscribe_auth_modes {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_auth_mode::ser_auth_mode(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.log_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("logConfig").start_object();
        crate::protocol_serde::shape_event_log_config::ser_event_log_config(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_event_config<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::EventConfig>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::EventConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "authProviders" => {
                            builder = builder.set_auth_providers(crate::protocol_serde::shape_auth_providers::de_auth_providers(tokens)?);
                        }
                        "connectionAuthModes" => {
                            builder = builder.set_connection_auth_modes(crate::protocol_serde::shape_auth_modes::de_auth_modes(tokens)?);
                        }
                        "defaultPublishAuthModes" => {
                            builder = builder.set_default_publish_auth_modes(crate::protocol_serde::shape_auth_modes::de_auth_modes(tokens)?);
                        }
                        "defaultSubscribeAuthModes" => {
                            builder = builder.set_default_subscribe_auth_modes(crate::protocol_serde::shape_auth_modes::de_auth_modes(tokens)?);
                        }
                        "logConfig" => {
                            builder = builder.set_log_config(crate::protocol_serde::shape_event_log_config::de_event_log_config(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::event_config_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
