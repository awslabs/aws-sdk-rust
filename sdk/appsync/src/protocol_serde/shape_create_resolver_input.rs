// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_resolver_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_resolver::CreateResolverInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.caching_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("cachingConfig").start_object();
        crate::protocol_serde::shape_caching_config::ser_caching_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.code {
        object.key("code").string(var_3.as_str());
    }
    if let Some(var_4) = &input.data_source_name {
        object.key("dataSourceName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.field_name {
        object.key("fieldName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.kind {
        object.key("kind").string(var_6.as_str());
    }
    if let Some(var_7) = &input.max_batch_size {
        object.key("maxBatchSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.pipeline_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("pipelineConfig").start_object();
        crate::protocol_serde::shape_pipeline_config::ser_pipeline_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_10.as_str());
    }
    if let Some(var_11) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_11.as_str());
    }
    if let Some(var_12) = &input.runtime {
        #[allow(unused_mut)]
        let mut object_13 = object.key("runtime").start_object();
        crate::protocol_serde::shape_app_sync_runtime::ser_app_sync_runtime(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.sync_config {
        #[allow(unused_mut)]
        let mut object_15 = object.key("syncConfig").start_object();
        crate::protocol_serde::shape_sync_config::ser_sync_config(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
