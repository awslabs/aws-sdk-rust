// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_graphql_api_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_graphql_api::UpdateGraphqlApiInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.additional_authentication_providers {
        let mut array_2 = object
            .key("additionalAuthenticationProviders")
            .start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_additional_authentication_provider::ser_additional_authentication_provider(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.authentication_type {
        object.key("authenticationType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.lambda_authorizer_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("lambdaAuthorizerConfig").start_object();
        crate::protocol_serde::shape_lambda_authorizer_config::ser_lambda_authorizer_config(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.log_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("logConfig").start_object();
        crate::protocol_serde::shape_log_config::ser_log_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.name {
        object.key("name").string(var_10.as_str());
    }
    if let Some(var_11) = &input.open_id_connect_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("openIDConnectConfig").start_object();
        crate::protocol_serde::shape_open_id_connect_config::ser_open_id_connect_config(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.user_pool_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("userPoolConfig").start_object();
        crate::protocol_serde::shape_user_pool_config::ser_user_pool_config(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if input.xray_enabled {
        object.key("xrayEnabled").boolean(input.xray_enabled);
    }
    Ok(())
}
