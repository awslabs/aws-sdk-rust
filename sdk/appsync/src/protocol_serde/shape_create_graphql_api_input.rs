// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_graphql_api_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_graphql_api::CreateGraphqlApiInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_authentication_providers {
        let mut array_2 = object.key("additionalAuthenticationProviders").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_additional_authentication_provider::ser_additional_authentication_provider(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.api_type {
        object.key("apiType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.authentication_type {
        object.key("authenticationType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.introspection_config {
        object.key("introspectionConfig").string(var_7.as_str());
    }
    if let Some(var_8) = &input.lambda_authorizer_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("lambdaAuthorizerConfig").start_object();
        crate::protocol_serde::shape_lambda_authorizer_config::ser_lambda_authorizer_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.log_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("logConfig").start_object();
        crate::protocol_serde::shape_log_config::ser_log_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.merged_api_execution_role_arn {
        object.key("mergedApiExecutionRoleArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.name {
        object.key("name").string(var_13.as_str());
    }
    if let Some(var_14) = &input.open_id_connect_config {
        #[allow(unused_mut)]
        let mut object_15 = object.key("openIDConnectConfig").start_object();
        crate::protocol_serde::shape_open_id_connect_config::ser_open_id_connect_config(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.owner_contact {
        object.key("ownerContact").string(var_16.as_str());
    }
    if let Some(var_17) = &input.query_depth_limit {
        object.key("queryDepthLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.resolver_count_limit {
        object.key("resolverCountLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.tags {
        #[allow(unused_mut)]
        let mut object_20 = object.key("tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21.as_str()).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.user_pool_config {
        #[allow(unused_mut)]
        let mut object_24 = object.key("userPoolConfig").start_object();
        crate::protocol_serde::shape_user_pool_config::ser_user_pool_config(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.visibility {
        object.key("visibility").string(var_25.as_str());
    }
    if let Some(var_26) = &input.xray_enabled {
        object.key("xrayEnabled").boolean(*var_26);
    }
    Ok(())
}
