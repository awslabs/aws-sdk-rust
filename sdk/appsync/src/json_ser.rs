// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_api_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApiCacheInput,
) {
    if let Some(var_1) = &input.api_caching_behavior {
        object.key("apiCachingBehavior").string(var_1.as_str());
    }
    if input.at_rest_encryption_enabled {
        object
            .key("atRestEncryptionEnabled")
            .boolean(input.at_rest_encryption_enabled);
    }
    if input.transit_encryption_enabled {
        object
            .key("transitEncryptionEnabled")
            .boolean(input.transit_encryption_enabled);
    }
    {
        object.key("ttl").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.ttl).into()),
        );
    }
    if let Some(var_2) = &input.r#type {
        object.key("type").string(var_2.as_str());
    }
}

pub fn serialize_structure_create_api_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApiKeyInput,
) {
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3);
    }
    if input.expires != 0 {
        object.key("expires").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.expires).into()),
        );
    }
}

pub fn serialize_structure_create_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) {
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4);
    }
    if let Some(var_5) = &input.dynamodb_config {
        let mut object_6 = object.key("dynamodbConfig").start_object();
        crate::json_ser::serialize_structure_dynamodb_data_source_config(&mut object_6, var_5);
        object_6.finish();
    }
    if let Some(var_7) = &input.elasticsearch_config {
        let mut object_8 = object.key("elasticsearchConfig").start_object();
        crate::json_ser::serialize_structure_elasticsearch_data_source_config(&mut object_8, var_7);
        object_8.finish();
    }
    if let Some(var_9) = &input.http_config {
        let mut object_10 = object.key("httpConfig").start_object();
        crate::json_ser::serialize_structure_http_data_source_config(&mut object_10, var_9);
        object_10.finish();
    }
    if let Some(var_11) = &input.lambda_config {
        let mut object_12 = object.key("lambdaConfig").start_object();
        crate::json_ser::serialize_structure_lambda_data_source_config(&mut object_12, var_11);
        object_12.finish();
    }
    if let Some(var_13) = &input.name {
        object.key("name").string(var_13);
    }
    if let Some(var_14) = &input.relational_database_config {
        let mut object_15 = object.key("relationalDatabaseConfig").start_object();
        crate::json_ser::serialize_structure_relational_database_data_source_config(
            &mut object_15,
            var_14,
        );
        object_15.finish();
    }
    if let Some(var_16) = &input.service_role_arn {
        object.key("serviceRoleArn").string(var_16);
    }
    if let Some(var_17) = &input.r#type {
        object.key("type").string(var_17.as_str());
    }
}

pub fn serialize_structure_create_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFunctionInput,
) {
    if let Some(var_18) = &input.data_source_name {
        object.key("dataSourceName").string(var_18);
    }
    if let Some(var_19) = &input.description {
        object.key("description").string(var_19);
    }
    if let Some(var_20) = &input.function_version {
        object.key("functionVersion").string(var_20);
    }
    if let Some(var_21) = &input.name {
        object.key("name").string(var_21);
    }
    if let Some(var_22) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_22);
    }
    if let Some(var_23) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_23);
    }
    if let Some(var_24) = &input.sync_config {
        let mut object_25 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_sync_config(&mut object_25, var_24);
        object_25.finish();
    }
}

pub fn serialize_structure_create_graphql_api_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGraphqlApiInput,
) {
    if let Some(var_26) = &input.additional_authentication_providers {
        let mut array_27 = object
            .key("additionalAuthenticationProviders")
            .start_array();
        for item_28 in var_26 {
            {
                let mut object_29 = array_27.value().start_object();
                crate::json_ser::serialize_structure_additional_authentication_provider(
                    &mut object_29,
                    item_28,
                );
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.authentication_type {
        object.key("authenticationType").string(var_30.as_str());
    }
    if let Some(var_31) = &input.log_config {
        let mut object_32 = object.key("logConfig").start_object();
        crate::json_ser::serialize_structure_log_config(&mut object_32, var_31);
        object_32.finish();
    }
    if let Some(var_33) = &input.name {
        object.key("name").string(var_33);
    }
    if let Some(var_34) = &input.open_id_connect_config {
        let mut object_35 = object.key("openIDConnectConfig").start_object();
        crate::json_ser::serialize_structure_open_id_connect_config(&mut object_35, var_34);
        object_35.finish();
    }
    if let Some(var_36) = &input.tags {
        let mut object_37 = object.key("tags").start_object();
        for (key_38, value_39) in var_36 {
            {
                object_37.key(key_38).string(value_39);
            }
        }
        object_37.finish();
    }
    if let Some(var_40) = &input.user_pool_config {
        let mut object_41 = object.key("userPoolConfig").start_object();
        crate::json_ser::serialize_structure_user_pool_config(&mut object_41, var_40);
        object_41.finish();
    }
    if input.xray_enabled {
        object.key("xrayEnabled").boolean(input.xray_enabled);
    }
}

pub fn serialize_structure_create_resolver_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResolverInput,
) {
    if let Some(var_42) = &input.caching_config {
        let mut object_43 = object.key("cachingConfig").start_object();
        crate::json_ser::serialize_structure_caching_config(&mut object_43, var_42);
        object_43.finish();
    }
    if let Some(var_44) = &input.data_source_name {
        object.key("dataSourceName").string(var_44);
    }
    if let Some(var_45) = &input.field_name {
        object.key("fieldName").string(var_45);
    }
    if let Some(var_46) = &input.kind {
        object.key("kind").string(var_46.as_str());
    }
    if let Some(var_47) = &input.pipeline_config {
        let mut object_48 = object.key("pipelineConfig").start_object();
        crate::json_ser::serialize_structure_pipeline_config(&mut object_48, var_47);
        object_48.finish();
    }
    if let Some(var_49) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_49);
    }
    if let Some(var_50) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_50);
    }
    if let Some(var_51) = &input.sync_config {
        let mut object_52 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_sync_config(&mut object_52, var_51);
        object_52.finish();
    }
}

pub fn serialize_structure_create_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTypeInput,
) {
    if let Some(var_53) = &input.definition {
        object.key("definition").string(var_53);
    }
    if let Some(var_54) = &input.format {
        object.key("format").string(var_54.as_str());
    }
}

pub fn serialize_structure_start_schema_creation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSchemaCreationInput,
) {
    if let Some(var_55) = &input.definition {
        object
            .key("definition")
            .string_unchecked(&smithy_types::base64::encode(var_55));
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_56) = &input.tags {
        let mut object_57 = object.key("tags").start_object();
        for (key_58, value_59) in var_56 {
            {
                object_57.key(key_58).string(value_59);
            }
        }
        object_57.finish();
    }
}

pub fn serialize_structure_update_api_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApiCacheInput,
) {
    if let Some(var_60) = &input.api_caching_behavior {
        object.key("apiCachingBehavior").string(var_60.as_str());
    }
    {
        object.key("ttl").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.ttl).into()),
        );
    }
    if let Some(var_61) = &input.r#type {
        object.key("type").string(var_61.as_str());
    }
}

pub fn serialize_structure_update_api_key_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApiKeyInput,
) {
    if let Some(var_62) = &input.description {
        object.key("description").string(var_62);
    }
    if input.expires != 0 {
        object.key("expires").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.expires).into()),
        );
    }
}

pub fn serialize_structure_update_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) {
    if let Some(var_63) = &input.description {
        object.key("description").string(var_63);
    }
    if let Some(var_64) = &input.dynamodb_config {
        let mut object_65 = object.key("dynamodbConfig").start_object();
        crate::json_ser::serialize_structure_dynamodb_data_source_config(&mut object_65, var_64);
        object_65.finish();
    }
    if let Some(var_66) = &input.elasticsearch_config {
        let mut object_67 = object.key("elasticsearchConfig").start_object();
        crate::json_ser::serialize_structure_elasticsearch_data_source_config(
            &mut object_67,
            var_66,
        );
        object_67.finish();
    }
    if let Some(var_68) = &input.http_config {
        let mut object_69 = object.key("httpConfig").start_object();
        crate::json_ser::serialize_structure_http_data_source_config(&mut object_69, var_68);
        object_69.finish();
    }
    if let Some(var_70) = &input.lambda_config {
        let mut object_71 = object.key("lambdaConfig").start_object();
        crate::json_ser::serialize_structure_lambda_data_source_config(&mut object_71, var_70);
        object_71.finish();
    }
    if let Some(var_72) = &input.relational_database_config {
        let mut object_73 = object.key("relationalDatabaseConfig").start_object();
        crate::json_ser::serialize_structure_relational_database_data_source_config(
            &mut object_73,
            var_72,
        );
        object_73.finish();
    }
    if let Some(var_74) = &input.service_role_arn {
        object.key("serviceRoleArn").string(var_74);
    }
    if let Some(var_75) = &input.r#type {
        object.key("type").string(var_75.as_str());
    }
}

pub fn serialize_structure_update_function_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFunctionInput,
) {
    if let Some(var_76) = &input.data_source_name {
        object.key("dataSourceName").string(var_76);
    }
    if let Some(var_77) = &input.description {
        object.key("description").string(var_77);
    }
    if let Some(var_78) = &input.function_version {
        object.key("functionVersion").string(var_78);
    }
    if let Some(var_79) = &input.name {
        object.key("name").string(var_79);
    }
    if let Some(var_80) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_80);
    }
    if let Some(var_81) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_81);
    }
    if let Some(var_82) = &input.sync_config {
        let mut object_83 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_sync_config(&mut object_83, var_82);
        object_83.finish();
    }
}

pub fn serialize_structure_update_graphql_api_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGraphqlApiInput,
) {
    if let Some(var_84) = &input.additional_authentication_providers {
        let mut array_85 = object
            .key("additionalAuthenticationProviders")
            .start_array();
        for item_86 in var_84 {
            {
                let mut object_87 = array_85.value().start_object();
                crate::json_ser::serialize_structure_additional_authentication_provider(
                    &mut object_87,
                    item_86,
                );
                object_87.finish();
            }
        }
        array_85.finish();
    }
    if let Some(var_88) = &input.authentication_type {
        object.key("authenticationType").string(var_88.as_str());
    }
    if let Some(var_89) = &input.log_config {
        let mut object_90 = object.key("logConfig").start_object();
        crate::json_ser::serialize_structure_log_config(&mut object_90, var_89);
        object_90.finish();
    }
    if let Some(var_91) = &input.name {
        object.key("name").string(var_91);
    }
    if let Some(var_92) = &input.open_id_connect_config {
        let mut object_93 = object.key("openIDConnectConfig").start_object();
        crate::json_ser::serialize_structure_open_id_connect_config(&mut object_93, var_92);
        object_93.finish();
    }
    if let Some(var_94) = &input.user_pool_config {
        let mut object_95 = object.key("userPoolConfig").start_object();
        crate::json_ser::serialize_structure_user_pool_config(&mut object_95, var_94);
        object_95.finish();
    }
    if input.xray_enabled {
        object.key("xrayEnabled").boolean(input.xray_enabled);
    }
}

pub fn serialize_structure_update_resolver_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResolverInput,
) {
    if let Some(var_96) = &input.caching_config {
        let mut object_97 = object.key("cachingConfig").start_object();
        crate::json_ser::serialize_structure_caching_config(&mut object_97, var_96);
        object_97.finish();
    }
    if let Some(var_98) = &input.data_source_name {
        object.key("dataSourceName").string(var_98);
    }
    if let Some(var_99) = &input.kind {
        object.key("kind").string(var_99.as_str());
    }
    if let Some(var_100) = &input.pipeline_config {
        let mut object_101 = object.key("pipelineConfig").start_object();
        crate::json_ser::serialize_structure_pipeline_config(&mut object_101, var_100);
        object_101.finish();
    }
    if let Some(var_102) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_102);
    }
    if let Some(var_103) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_103);
    }
    if let Some(var_104) = &input.sync_config {
        let mut object_105 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_sync_config(&mut object_105, var_104);
        object_105.finish();
    }
}

pub fn serialize_structure_update_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTypeInput,
) {
    if let Some(var_106) = &input.definition {
        object.key("definition").string(var_106);
    }
    if let Some(var_107) = &input.format {
        object.key("format").string(var_107.as_str());
    }
}

pub fn serialize_structure_dynamodb_data_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamodbDataSourceConfig,
) {
    if let Some(var_108) = &input.table_name {
        object.key("tableName").string(var_108);
    }
    if let Some(var_109) = &input.aws_region {
        object.key("awsRegion").string(var_109);
    }
    if input.use_caller_credentials {
        object
            .key("useCallerCredentials")
            .boolean(input.use_caller_credentials);
    }
    if let Some(var_110) = &input.delta_sync_config {
        let mut object_111 = object.key("deltaSyncConfig").start_object();
        crate::json_ser::serialize_structure_delta_sync_config(&mut object_111, var_110);
        object_111.finish();
    }
    if input.versioned {
        object.key("versioned").boolean(input.versioned);
    }
}

pub fn serialize_structure_elasticsearch_data_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchDataSourceConfig,
) {
    if let Some(var_112) = &input.endpoint {
        object.key("endpoint").string(var_112);
    }
    if let Some(var_113) = &input.aws_region {
        object.key("awsRegion").string(var_113);
    }
}

pub fn serialize_structure_http_data_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpDataSourceConfig,
) {
    if let Some(var_114) = &input.endpoint {
        object.key("endpoint").string(var_114);
    }
    if let Some(var_115) = &input.authorization_config {
        let mut object_116 = object.key("authorizationConfig").start_object();
        crate::json_ser::serialize_structure_authorization_config(&mut object_116, var_115);
        object_116.finish();
    }
}

pub fn serialize_structure_lambda_data_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaDataSourceConfig,
) {
    if let Some(var_117) = &input.lambda_function_arn {
        object.key("lambdaFunctionArn").string(var_117);
    }
}

pub fn serialize_structure_relational_database_data_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalDatabaseDataSourceConfig,
) {
    if let Some(var_118) = &input.relational_database_source_type {
        object
            .key("relationalDatabaseSourceType")
            .string(var_118.as_str());
    }
    if let Some(var_119) = &input.rds_http_endpoint_config {
        let mut object_120 = object.key("rdsHttpEndpointConfig").start_object();
        crate::json_ser::serialize_structure_rds_http_endpoint_config(&mut object_120, var_119);
        object_120.finish();
    }
}

pub fn serialize_structure_sync_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SyncConfig,
) {
    if let Some(var_121) = &input.conflict_handler {
        object.key("conflictHandler").string(var_121.as_str());
    }
    if let Some(var_122) = &input.conflict_detection {
        object.key("conflictDetection").string(var_122.as_str());
    }
    if let Some(var_123) = &input.lambda_conflict_handler_config {
        let mut object_124 = object.key("lambdaConflictHandlerConfig").start_object();
        crate::json_ser::serialize_structure_lambda_conflict_handler_config(
            &mut object_124,
            var_123,
        );
        object_124.finish();
    }
}

pub fn serialize_structure_additional_authentication_provider(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdditionalAuthenticationProvider,
) {
    if let Some(var_125) = &input.authentication_type {
        object.key("authenticationType").string(var_125.as_str());
    }
    if let Some(var_126) = &input.open_id_connect_config {
        let mut object_127 = object.key("openIDConnectConfig").start_object();
        crate::json_ser::serialize_structure_open_id_connect_config(&mut object_127, var_126);
        object_127.finish();
    }
    if let Some(var_128) = &input.user_pool_config {
        let mut object_129 = object.key("userPoolConfig").start_object();
        crate::json_ser::serialize_structure_cognito_user_pool_config(&mut object_129, var_128);
        object_129.finish();
    }
}

pub fn serialize_structure_log_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogConfig,
) {
    if let Some(var_130) = &input.field_log_level {
        object.key("fieldLogLevel").string(var_130.as_str());
    }
    if let Some(var_131) = &input.cloud_watch_logs_role_arn {
        object.key("cloudWatchLogsRoleArn").string(var_131);
    }
    if input.exclude_verbose_content {
        object
            .key("excludeVerboseContent")
            .boolean(input.exclude_verbose_content);
    }
}

pub fn serialize_structure_open_id_connect_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenIdConnectConfig,
) {
    if let Some(var_132) = &input.issuer {
        object.key("issuer").string(var_132);
    }
    if let Some(var_133) = &input.client_id {
        object.key("clientId").string(var_133);
    }
    if input.iat_ttl != 0 {
        object.key("iatTTL").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.iat_ttl).into()),
        );
    }
    if input.auth_ttl != 0 {
        object.key("authTTL").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.auth_ttl).into()),
        );
    }
}

pub fn serialize_structure_user_pool_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserPoolConfig,
) {
    if let Some(var_134) = &input.user_pool_id {
        object.key("userPoolId").string(var_134);
    }
    if let Some(var_135) = &input.aws_region {
        object.key("awsRegion").string(var_135);
    }
    if let Some(var_136) = &input.default_action {
        object.key("defaultAction").string(var_136.as_str());
    }
    if let Some(var_137) = &input.app_id_client_regex {
        object.key("appIdClientRegex").string(var_137);
    }
}

pub fn serialize_structure_caching_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CachingConfig,
) {
    if input.ttl != 0 {
        object.key("ttl").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.ttl).into()),
        );
    }
    if let Some(var_138) = &input.caching_keys {
        let mut array_139 = object.key("cachingKeys").start_array();
        for item_140 in var_138 {
            {
                array_139.value().string(item_140);
            }
        }
        array_139.finish();
    }
}

pub fn serialize_structure_pipeline_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PipelineConfig,
) {
    if let Some(var_141) = &input.functions {
        let mut array_142 = object.key("functions").start_array();
        for item_143 in var_141 {
            {
                array_142.value().string(item_143);
            }
        }
        array_142.finish();
    }
}

pub fn serialize_structure_delta_sync_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeltaSyncConfig,
) {
    if input.base_table_ttl != 0 {
        object.key("baseTableTTL").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.base_table_ttl).into()),
        );
    }
    if let Some(var_144) = &input.delta_sync_table_name {
        object.key("deltaSyncTableName").string(var_144);
    }
    if input.delta_sync_table_ttl != 0 {
        object.key("deltaSyncTableTTL").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.delta_sync_table_ttl).into()),
        );
    }
}

pub fn serialize_structure_authorization_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthorizationConfig,
) {
    if let Some(var_145) = &input.authorization_type {
        object.key("authorizationType").string(var_145.as_str());
    }
    if let Some(var_146) = &input.aws_iam_config {
        let mut object_147 = object.key("awsIamConfig").start_object();
        crate::json_ser::serialize_structure_aws_iam_config(&mut object_147, var_146);
        object_147.finish();
    }
}

pub fn serialize_structure_rds_http_endpoint_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsHttpEndpointConfig,
) {
    if let Some(var_148) = &input.aws_region {
        object.key("awsRegion").string(var_148);
    }
    if let Some(var_149) = &input.db_cluster_identifier {
        object.key("dbClusterIdentifier").string(var_149);
    }
    if let Some(var_150) = &input.database_name {
        object.key("databaseName").string(var_150);
    }
    if let Some(var_151) = &input.schema {
        object.key("schema").string(var_151);
    }
    if let Some(var_152) = &input.aws_secret_store_arn {
        object.key("awsSecretStoreArn").string(var_152);
    }
}

pub fn serialize_structure_lambda_conflict_handler_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaConflictHandlerConfig,
) {
    if let Some(var_153) = &input.lambda_conflict_handler_arn {
        object.key("lambdaConflictHandlerArn").string(var_153);
    }
}

pub fn serialize_structure_cognito_user_pool_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoUserPoolConfig,
) {
    if let Some(var_154) = &input.user_pool_id {
        object.key("userPoolId").string(var_154);
    }
    if let Some(var_155) = &input.aws_region {
        object.key("awsRegion").string(var_155);
    }
    if let Some(var_156) = &input.app_id_client_regex {
        object.key("appIdClientRegex").string(var_156);
    }
}

pub fn serialize_structure_aws_iam_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamConfig,
) {
    if let Some(var_157) = &input.signing_region {
        object.key("signingRegion").string(var_157);
    }
    if let Some(var_158) = &input.signing_service_name {
        object.key("signingServiceName").string(var_158);
    }
}
