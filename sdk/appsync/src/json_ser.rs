// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_api_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApiInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.api_id {
        object.key("apiId").string(var_1);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_api_cache_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApiCacheInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.api_caching_behavior {
        object.key("apiCachingBehavior").string(var_2.as_str());
    }
    if input.at_rest_encryption_enabled {
        object
            .key("atRestEncryptionEnabled")
            .boolean(input.at_rest_encryption_enabled);
    }
    if input.transit_encryption_enabled {
        object
            .key("transitEncryptionEnabled")
            .boolean(input.transit_encryption_enabled);
    }
    {
        object.key("ttl").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.ttl).into()),
        );
    }
    if let Some(var_3) = &input.r#type {
        object.key("type").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_api_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApiKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4);
    }
    if input.expires != 0 {
        object.key("expires").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.expires).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5);
    }
    if let Some(var_6) = &input.dynamodb_config {
        let mut object_7 = object.key("dynamodbConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamodb_data_source_config(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.elasticsearch_config {
        let mut object_9 = object.key("elasticsearchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_data_source_config(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.http_config {
        let mut object_11 = object.key("httpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_http_data_source_config(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.lambda_config {
        let mut object_13 = object.key("lambdaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_data_source_config(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.name {
        object.key("name").string(var_14);
    }
    if let Some(var_15) = &input.open_search_service_config {
        let mut object_16 = object.key("openSearchServiceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_search_service_data_source_config(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.relational_database_config {
        let mut object_18 = object.key("relationalDatabaseConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_relational_database_data_source_config(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.service_role_arn {
        object.key("serviceRoleArn").string(var_19);
    }
    if let Some(var_20) = &input.r#type {
        object.key("type").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.certificate_arn {
        object.key("certificateArn").string(var_21);
    }
    if let Some(var_22) = &input.description {
        object.key("description").string(var_22);
    }
    if let Some(var_23) = &input.domain_name {
        object.key("domainName").string(var_23);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.data_source_name {
        object.key("dataSourceName").string(var_24);
    }
    if let Some(var_25) = &input.description {
        object.key("description").string(var_25);
    }
    if let Some(var_26) = &input.function_version {
        object.key("functionVersion").string(var_26);
    }
    if let Some(var_27) = &input.name {
        object.key("name").string(var_27);
    }
    if let Some(var_28) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_28);
    }
    if let Some(var_29) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_29);
    }
    if let Some(var_30) = &input.sync_config {
        let mut object_31 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sync_config(&mut object_31, var_30)?;
        object_31.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_graphql_api_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGraphqlApiInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.additional_authentication_providers {
        let mut array_33 = object
            .key("additionalAuthenticationProviders")
            .start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_authentication_provider(&mut object_35, item_34)?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.authentication_type {
        object.key("authenticationType").string(var_36.as_str());
    }
    if let Some(var_37) = &input.lambda_authorizer_config {
        let mut object_38 = object.key("lambdaAuthorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_authorizer_config(
            &mut object_38,
            var_37,
        )?;
        object_38.finish();
    }
    if let Some(var_39) = &input.log_config {
        let mut object_40 = object.key("logConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_log_config(&mut object_40, var_39)?;
        object_40.finish();
    }
    if let Some(var_41) = &input.name {
        object.key("name").string(var_41);
    }
    if let Some(var_42) = &input.open_id_connect_config {
        let mut object_43 = object.key("openIDConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_id_connect_config(
            &mut object_43,
            var_42,
        )?;
        object_43.finish();
    }
    if let Some(var_44) = &input.tags {
        let mut object_45 = object.key("tags").start_object();
        for (key_46, value_47) in var_44 {
            {
                object_45.key(key_46).string(value_47);
            }
        }
        object_45.finish();
    }
    if let Some(var_48) = &input.user_pool_config {
        let mut object_49 = object.key("userPoolConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_config(&mut object_49, var_48)?;
        object_49.finish();
    }
    if input.xray_enabled {
        object.key("xrayEnabled").boolean(input.xray_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resolver_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResolverInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.caching_config {
        let mut object_51 = object.key("cachingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_caching_config(&mut object_51, var_50)?;
        object_51.finish();
    }
    if let Some(var_52) = &input.data_source_name {
        object.key("dataSourceName").string(var_52);
    }
    if let Some(var_53) = &input.field_name {
        object.key("fieldName").string(var_53);
    }
    if let Some(var_54) = &input.kind {
        object.key("kind").string(var_54.as_str());
    }
    if let Some(var_55) = &input.pipeline_config {
        let mut object_56 = object.key("pipelineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_config(&mut object_56, var_55)?;
        object_56.finish();
    }
    if let Some(var_57) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_57);
    }
    if let Some(var_58) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_58);
    }
    if let Some(var_59) = &input.sync_config {
        let mut object_60 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sync_config(&mut object_60, var_59)?;
        object_60.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.definition {
        object.key("definition").string(var_61);
    }
    if let Some(var_62) = &input.format {
        object.key("format").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_schema_creation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSchemaCreationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.definition {
        object
            .key("definition")
            .string_unchecked(&aws_smithy_types::base64::encode(var_63));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.tags {
        let mut object_65 = object.key("tags").start_object();
        for (key_66, value_67) in var_64 {
            {
                object_65.key(key_66).string(value_67);
            }
        }
        object_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_api_cache_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApiCacheInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.api_caching_behavior {
        object.key("apiCachingBehavior").string(var_68.as_str());
    }
    {
        object.key("ttl").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.ttl).into()),
        );
    }
    if let Some(var_69) = &input.r#type {
        object.key("type").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_api_key_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApiKeyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.description {
        object.key("description").string(var_70);
    }
    if input.expires != 0 {
        object.key("expires").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.expires).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_source_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.description {
        object.key("description").string(var_71);
    }
    if let Some(var_72) = &input.dynamodb_config {
        let mut object_73 = object.key("dynamodbConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamodb_data_source_config(
            &mut object_73,
            var_72,
        )?;
        object_73.finish();
    }
    if let Some(var_74) = &input.elasticsearch_config {
        let mut object_75 = object.key("elasticsearchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_data_source_config(
            &mut object_75,
            var_74,
        )?;
        object_75.finish();
    }
    if let Some(var_76) = &input.http_config {
        let mut object_77 = object.key("httpConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_http_data_source_config(
            &mut object_77,
            var_76,
        )?;
        object_77.finish();
    }
    if let Some(var_78) = &input.lambda_config {
        let mut object_79 = object.key("lambdaConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_data_source_config(
            &mut object_79,
            var_78,
        )?;
        object_79.finish();
    }
    if let Some(var_80) = &input.open_search_service_config {
        let mut object_81 = object.key("openSearchServiceConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_search_service_data_source_config(
            &mut object_81,
            var_80,
        )?;
        object_81.finish();
    }
    if let Some(var_82) = &input.relational_database_config {
        let mut object_83 = object.key("relationalDatabaseConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_relational_database_data_source_config(
            &mut object_83,
            var_82,
        )?;
        object_83.finish();
    }
    if let Some(var_84) = &input.service_role_arn {
        object.key("serviceRoleArn").string(var_84);
    }
    if let Some(var_85) = &input.r#type {
        object.key("type").string(var_85.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_name_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainNameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.description {
        object.key("description").string(var_86);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_function_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFunctionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.data_source_name {
        object.key("dataSourceName").string(var_87);
    }
    if let Some(var_88) = &input.description {
        object.key("description").string(var_88);
    }
    if let Some(var_89) = &input.function_version {
        object.key("functionVersion").string(var_89);
    }
    if let Some(var_90) = &input.name {
        object.key("name").string(var_90);
    }
    if let Some(var_91) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_91);
    }
    if let Some(var_92) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_92);
    }
    if let Some(var_93) = &input.sync_config {
        let mut object_94 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sync_config(&mut object_94, var_93)?;
        object_94.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_graphql_api_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGraphqlApiInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.additional_authentication_providers {
        let mut array_96 = object
            .key("additionalAuthenticationProviders")
            .start_array();
        for item_97 in var_95 {
            {
                let mut object_98 = array_96.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_authentication_provider(&mut object_98, item_97)?;
                object_98.finish();
            }
        }
        array_96.finish();
    }
    if let Some(var_99) = &input.authentication_type {
        object.key("authenticationType").string(var_99.as_str());
    }
    if let Some(var_100) = &input.lambda_authorizer_config {
        let mut object_101 = object.key("lambdaAuthorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_authorizer_config(
            &mut object_101,
            var_100,
        )?;
        object_101.finish();
    }
    if let Some(var_102) = &input.log_config {
        let mut object_103 = object.key("logConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_log_config(&mut object_103, var_102)?;
        object_103.finish();
    }
    if let Some(var_104) = &input.name {
        object.key("name").string(var_104);
    }
    if let Some(var_105) = &input.open_id_connect_config {
        let mut object_106 = object.key("openIDConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_id_connect_config(
            &mut object_106,
            var_105,
        )?;
        object_106.finish();
    }
    if let Some(var_107) = &input.user_pool_config {
        let mut object_108 = object.key("userPoolConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_user_pool_config(
            &mut object_108,
            var_107,
        )?;
        object_108.finish();
    }
    if input.xray_enabled {
        object.key("xrayEnabled").boolean(input.xray_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resolver_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResolverInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.caching_config {
        let mut object_110 = object.key("cachingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_caching_config(&mut object_110, var_109)?;
        object_110.finish();
    }
    if let Some(var_111) = &input.data_source_name {
        object.key("dataSourceName").string(var_111);
    }
    if let Some(var_112) = &input.kind {
        object.key("kind").string(var_112.as_str());
    }
    if let Some(var_113) = &input.pipeline_config {
        let mut object_114 = object.key("pipelineConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_pipeline_config(&mut object_114, var_113)?;
        object_114.finish();
    }
    if let Some(var_115) = &input.request_mapping_template {
        object.key("requestMappingTemplate").string(var_115);
    }
    if let Some(var_116) = &input.response_mapping_template {
        object.key("responseMappingTemplate").string(var_116);
    }
    if let Some(var_117) = &input.sync_config {
        let mut object_118 = object.key("syncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_sync_config(&mut object_118, var_117)?;
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.definition {
        object.key("definition").string(var_119);
    }
    if let Some(var_120) = &input.format {
        object.key("format").string(var_120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamodb_data_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamodbDataSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.table_name {
        object.key("tableName").string(var_121);
    }
    if let Some(var_122) = &input.aws_region {
        object.key("awsRegion").string(var_122);
    }
    if input.use_caller_credentials {
        object
            .key("useCallerCredentials")
            .boolean(input.use_caller_credentials);
    }
    if let Some(var_123) = &input.delta_sync_config {
        let mut object_124 = object.key("deltaSyncConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_delta_sync_config(
            &mut object_124,
            var_123,
        )?;
        object_124.finish();
    }
    if input.versioned {
        object.key("versioned").boolean(input.versioned);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_elasticsearch_data_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchDataSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.endpoint {
        object.key("endpoint").string(var_125);
    }
    if let Some(var_126) = &input.aws_region {
        object.key("awsRegion").string(var_126);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_data_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpDataSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.endpoint {
        object.key("endpoint").string(var_127);
    }
    if let Some(var_128) = &input.authorization_config {
        let mut object_129 = object.key("authorizationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_authorization_config(
            &mut object_129,
            var_128,
        )?;
        object_129.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_data_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaDataSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.lambda_function_arn {
        object.key("lambdaFunctionArn").string(var_130);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_search_service_data_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenSearchServiceDataSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.endpoint {
        object.key("endpoint").string(var_131);
    }
    if let Some(var_132) = &input.aws_region {
        object.key("awsRegion").string(var_132);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relational_database_data_source_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationalDatabaseDataSourceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.relational_database_source_type {
        object
            .key("relationalDatabaseSourceType")
            .string(var_133.as_str());
    }
    if let Some(var_134) = &input.rds_http_endpoint_config {
        let mut object_135 = object.key("rdsHttpEndpointConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_rds_http_endpoint_config(
            &mut object_135,
            var_134,
        )?;
        object_135.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sync_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SyncConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.conflict_handler {
        object.key("conflictHandler").string(var_136.as_str());
    }
    if let Some(var_137) = &input.conflict_detection {
        object.key("conflictDetection").string(var_137.as_str());
    }
    if let Some(var_138) = &input.lambda_conflict_handler_config {
        let mut object_139 = object.key("lambdaConflictHandlerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_conflict_handler_config(
            &mut object_139,
            var_138,
        )?;
        object_139.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_additional_authentication_provider(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdditionalAuthenticationProvider,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.authentication_type {
        object.key("authenticationType").string(var_140.as_str());
    }
    if let Some(var_141) = &input.open_id_connect_config {
        let mut object_142 = object.key("openIDConnectConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_open_id_connect_config(
            &mut object_142,
            var_141,
        )?;
        object_142.finish();
    }
    if let Some(var_143) = &input.user_pool_config {
        let mut object_144 = object.key("userPoolConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cognito_user_pool_config(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    if let Some(var_145) = &input.lambda_authorizer_config {
        let mut object_146 = object.key("lambdaAuthorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_authorizer_config(
            &mut object_146,
            var_145,
        )?;
        object_146.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_authorizer_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaAuthorizerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.authorizer_result_ttl_in_seconds != 0 {
        object.key("authorizerResultTtlInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.authorizer_result_ttl_in_seconds).into()),
        );
    }
    if let Some(var_147) = &input.authorizer_uri {
        object.key("authorizerUri").string(var_147);
    }
    if let Some(var_148) = &input.identity_validation_expression {
        object.key("identityValidationExpression").string(var_148);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.field_log_level {
        object.key("fieldLogLevel").string(var_149.as_str());
    }
    if let Some(var_150) = &input.cloud_watch_logs_role_arn {
        object.key("cloudWatchLogsRoleArn").string(var_150);
    }
    if input.exclude_verbose_content {
        object
            .key("excludeVerboseContent")
            .boolean(input.exclude_verbose_content);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_id_connect_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenIdConnectConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.issuer {
        object.key("issuer").string(var_151);
    }
    if let Some(var_152) = &input.client_id {
        object.key("clientId").string(var_152);
    }
    if input.iat_ttl != 0 {
        object.key("iatTTL").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iat_ttl).into()),
        );
    }
    if input.auth_ttl != 0 {
        object.key("authTTL").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.auth_ttl).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_pool_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserPoolConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.user_pool_id {
        object.key("userPoolId").string(var_153);
    }
    if let Some(var_154) = &input.aws_region {
        object.key("awsRegion").string(var_154);
    }
    if let Some(var_155) = &input.default_action {
        object.key("defaultAction").string(var_155.as_str());
    }
    if let Some(var_156) = &input.app_id_client_regex {
        object.key("appIdClientRegex").string(var_156);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_caching_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CachingConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.ttl != 0 {
        object.key("ttl").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.ttl).into()),
        );
    }
    if let Some(var_157) = &input.caching_keys {
        let mut array_158 = object.key("cachingKeys").start_array();
        for item_159 in var_157 {
            {
                array_158.value().string(item_159);
            }
        }
        array_158.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pipeline_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PipelineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.functions {
        let mut array_161 = object.key("functions").start_array();
        for item_162 in var_160 {
            {
                array_161.value().string(item_162);
            }
        }
        array_161.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delta_sync_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeltaSyncConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.base_table_ttl != 0 {
        object.key("baseTableTTL").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.base_table_ttl).into()),
        );
    }
    if let Some(var_163) = &input.delta_sync_table_name {
        object.key("deltaSyncTableName").string(var_163);
    }
    if input.delta_sync_table_ttl != 0 {
        object.key("deltaSyncTableTTL").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.delta_sync_table_ttl).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authorization_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthorizationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_164) = &input.authorization_type {
        object.key("authorizationType").string(var_164.as_str());
    }
    if let Some(var_165) = &input.aws_iam_config {
        let mut object_166 = object.key("awsIamConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_iam_config(&mut object_166, var_165)?;
        object_166.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rds_http_endpoint_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RdsHttpEndpointConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.aws_region {
        object.key("awsRegion").string(var_167);
    }
    if let Some(var_168) = &input.db_cluster_identifier {
        object.key("dbClusterIdentifier").string(var_168);
    }
    if let Some(var_169) = &input.database_name {
        object.key("databaseName").string(var_169);
    }
    if let Some(var_170) = &input.schema {
        object.key("schema").string(var_170);
    }
    if let Some(var_171) = &input.aws_secret_store_arn {
        object.key("awsSecretStoreArn").string(var_171);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_conflict_handler_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaConflictHandlerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.lambda_conflict_handler_arn {
        object.key("lambdaConflictHandlerArn").string(var_172);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cognito_user_pool_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CognitoUserPoolConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.user_pool_id {
        object.key("userPoolId").string(var_173);
    }
    if let Some(var_174) = &input.aws_region {
        object.key("awsRegion").string(var_174);
    }
    if let Some(var_175) = &input.app_id_client_regex {
        object.key("appIdClientRegex").string(var_175);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_iam_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsIamConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.signing_region {
        object.key("signingRegion").string(var_176);
    }
    if let Some(var_177) = &input.signing_service_name {
        object.key("signingServiceName").string(var_177);
    }
    Ok(())
}
