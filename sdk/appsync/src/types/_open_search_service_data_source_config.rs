// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an OpenSearch data source configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenSearchServiceDataSourceConfig {
    /// <p>The endpoint.</p>
    pub endpoint: ::std::string::String,
    /// <p>The Amazon Web Services Region.</p>
    pub aws_region: ::std::string::String,
}
impl OpenSearchServiceDataSourceConfig {
    /// <p>The endpoint.</p>
    pub fn endpoint(&self) -> &str {
        use std::ops::Deref;
        self.endpoint.deref()
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn aws_region(&self) -> &str {
        use std::ops::Deref;
        self.aws_region.deref()
    }
}
impl OpenSearchServiceDataSourceConfig {
    /// Creates a new builder-style object to manufacture [`OpenSearchServiceDataSourceConfig`](crate::types::OpenSearchServiceDataSourceConfig).
    pub fn builder() -> crate::types::builders::OpenSearchServiceDataSourceConfigBuilder {
        crate::types::builders::OpenSearchServiceDataSourceConfigBuilder::default()
    }
}

/// A builder for [`OpenSearchServiceDataSourceConfig`](crate::types::OpenSearchServiceDataSourceConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OpenSearchServiceDataSourceConfigBuilder {
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) aws_region: ::std::option::Option<::std::string::String>,
}
impl OpenSearchServiceDataSourceConfigBuilder {
    /// <p>The endpoint.</p>
    /// This field is required.
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The endpoint.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The Amazon Web Services Region.</p>
    /// This field is required.
    pub fn aws_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_region
    }
    /// Consumes the builder and constructs a [`OpenSearchServiceDataSourceConfig`](crate::types::OpenSearchServiceDataSourceConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`endpoint`](crate::types::builders::OpenSearchServiceDataSourceConfigBuilder::endpoint)
    /// - [`aws_region`](crate::types::builders::OpenSearchServiceDataSourceConfigBuilder::aws_region)
    pub fn build(self) -> ::std::result::Result<crate::types::OpenSearchServiceDataSourceConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OpenSearchServiceDataSourceConfig {
            endpoint: self.endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint",
                    "endpoint was not specified but it is required when building OpenSearchServiceDataSourceConfig",
                )
            })?,
            aws_region: self.aws_region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aws_region",
                    "aws_region was not specified but it is required when building OpenSearchServiceDataSourceConfig",
                )
            })?,
        })
    }
}
