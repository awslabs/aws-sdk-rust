// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an API key.</p>
/// <p>Customers invoke AppSync GraphQL API operations with API keys as an identity mechanism. There are two key versions:</p>
/// <p> <b>da1</b>: We introduced this version at launch in November 2017. These keys always expire after 7 days. Amazon DynamoDB TTL manages key expiration. These keys ceased to be valid after February 21, 2018, and they should no longer be used.</p>
/// <ul>
/// <li> <p> <code>ListApiKeys</code> returns the expiration time in milliseconds.</p> </li>
/// <li> <p> <code>CreateApiKey</code> returns the expiration time in milliseconds.</p> </li>
/// <li> <p> <code>UpdateApiKey</code> is not available for this key version.</p> </li>
/// <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li>
/// <li> <p>Expiration is stored in DynamoDB as milliseconds. This results in a bug where keys are not automatically deleted because DynamoDB expects the TTL to be stored in seconds. As a one-time action, we deleted these keys from the table on February 21, 2018.</p> </li>
/// </ul>
/// <p> <b>da2</b>: We introduced this version in February 2018 when AppSync added support to extend key expiration.</p>
/// <ul>
/// <li> <p> <code>ListApiKeys</code> returns the expiration time and deletion time in seconds.</p> </li>
/// <li> <p> <code>CreateApiKey</code> returns the expiration time and deletion time in seconds and accepts a user-provided expiration time in seconds.</p> </li>
/// <li> <p> <code>UpdateApiKey</code> returns the expiration time and and deletion time in seconds and accepts a user-provided expiration time in seconds. Expired API keys are kept for 60 days after the expiration time. You can update the key expiration time as long as the key isn't deleted.</p> </li>
/// <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li>
/// <li> <p>Expiration is stored in DynamoDB as seconds. After the expiration time, using the key to authenticate will fail. However, you can reinstate the key before deletion.</p> </li>
/// <li> <p>Deletion is stored in DynamoDB as seconds. The key is deleted after deletion time.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApiKey {
    /// <p>The API key ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>A description of the purpose of the API key.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>
    #[doc(hidden)]
    pub expires: i64,
    /// <p>The time after which the API key is deleted. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>
    #[doc(hidden)]
    pub deletes: i64,
}
impl ApiKey {
    /// <p>The API key ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A description of the purpose of the API key.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>
    pub fn expires(&self) -> i64 {
        self.expires
    }
    /// <p>The time after which the API key is deleted. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>
    pub fn deletes(&self) -> i64 {
        self.deletes
    }
}
impl ApiKey {
    /// Creates a new builder-style object to manufacture [`ApiKey`](crate::types::ApiKey).
    pub fn builder() -> crate::types::builders::ApiKeyBuilder {
        crate::types::builders::ApiKeyBuilder::default()
    }
}

/// A builder for [`ApiKey`](crate::types::ApiKey).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApiKeyBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) expires: std::option::Option<i64>,
    pub(crate) deletes: std::option::Option<i64>,
}
impl ApiKeyBuilder {
    /// <p>The API key ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The API key ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A description of the purpose of the API key.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the purpose of the API key.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>
    pub fn expires(mut self, input: i64) -> Self {
        self.expires = Some(input);
        self
    }
    /// <p>The time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>
    pub fn set_expires(mut self, input: std::option::Option<i64>) -> Self {
        self.expires = input;
        self
    }
    /// <p>The time after which the API key is deleted. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>
    pub fn deletes(mut self, input: i64) -> Self {
        self.deletes = Some(input);
        self
    }
    /// <p>The time after which the API key is deleted. The date is represented as seconds since the epoch, rounded down to the nearest hour.</p>
    pub fn set_deletes(mut self, input: std::option::Option<i64>) -> Self {
        self.deletes = input;
        self
    }
    /// Consumes the builder and constructs a [`ApiKey`](crate::types::ApiKey).
    pub fn build(self) -> crate::types::ApiKey {
        crate::types::ApiKey {
            id: self.id,
            description: self.description,
            expires: self.expires.unwrap_or_default(),
            deletes: self.deletes.unwrap_or_default(),
        }
    }
}
