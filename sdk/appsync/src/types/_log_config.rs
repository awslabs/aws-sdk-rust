// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon CloudWatch Logs configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogConfig {
    /// <p>The field logging level. Values can be NONE, ERROR, or ALL.</p>
    /// <ul>
    /// <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li>
    /// <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p>
    /// <ul>
    /// <li> <p>The error section in the server response.</p> </li>
    /// <li> <p>Field-level errors.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for error fields.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p>
    /// <ul>
    /// <li> <p>Field-level tracing information.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for each field.</p> </li>
    /// </ul> </li>
    /// </ul>
    pub field_log_level: crate::types::FieldLogLevel,
    /// <p>The service role that AppSync assumes to publish to CloudWatch logs in your account.</p>
    pub cloud_watch_logs_role_arn: ::std::string::String,
    /// <p>Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.</p>
    pub exclude_verbose_content: bool,
}
impl LogConfig {
    /// <p>The field logging level. Values can be NONE, ERROR, or ALL.</p>
    /// <ul>
    /// <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li>
    /// <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p>
    /// <ul>
    /// <li> <p>The error section in the server response.</p> </li>
    /// <li> <p>Field-level errors.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for error fields.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p>
    /// <ul>
    /// <li> <p>Field-level tracing information.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for each field.</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn field_log_level(&self) -> &crate::types::FieldLogLevel {
        &self.field_log_level
    }
    /// <p>The service role that AppSync assumes to publish to CloudWatch logs in your account.</p>
    pub fn cloud_watch_logs_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.cloud_watch_logs_role_arn.deref()
    }
    /// <p>Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.</p>
    pub fn exclude_verbose_content(&self) -> bool {
        self.exclude_verbose_content
    }
}
impl LogConfig {
    /// Creates a new builder-style object to manufacture [`LogConfig`](crate::types::LogConfig).
    pub fn builder() -> crate::types::builders::LogConfigBuilder {
        crate::types::builders::LogConfigBuilder::default()
    }
}

/// A builder for [`LogConfig`](crate::types::LogConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LogConfigBuilder {
    pub(crate) field_log_level: ::std::option::Option<crate::types::FieldLogLevel>,
    pub(crate) cloud_watch_logs_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) exclude_verbose_content: ::std::option::Option<bool>,
}
impl LogConfigBuilder {
    /// <p>The field logging level. Values can be NONE, ERROR, or ALL.</p>
    /// <ul>
    /// <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li>
    /// <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p>
    /// <ul>
    /// <li> <p>The error section in the server response.</p> </li>
    /// <li> <p>Field-level errors.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for error fields.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p>
    /// <ul>
    /// <li> <p>Field-level tracing information.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for each field.</p> </li>
    /// </ul> </li>
    /// </ul>
    /// This field is required.
    pub fn field_log_level(mut self, input: crate::types::FieldLogLevel) -> Self {
        self.field_log_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field logging level. Values can be NONE, ERROR, or ALL.</p>
    /// <ul>
    /// <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li>
    /// <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p>
    /// <ul>
    /// <li> <p>The error section in the server response.</p> </li>
    /// <li> <p>Field-level errors.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for error fields.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p>
    /// <ul>
    /// <li> <p>Field-level tracing information.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for each field.</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn set_field_log_level(mut self, input: ::std::option::Option<crate::types::FieldLogLevel>) -> Self {
        self.field_log_level = input;
        self
    }
    /// <p>The field logging level. Values can be NONE, ERROR, or ALL.</p>
    /// <ul>
    /// <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li>
    /// <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p>
    /// <ul>
    /// <li> <p>The error section in the server response.</p> </li>
    /// <li> <p>Field-level errors.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for error fields.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p>
    /// <ul>
    /// <li> <p>Field-level tracing information.</p> </li>
    /// <li> <p>The generated request/response functions that got resolved for each field.</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn get_field_log_level(&self) -> &::std::option::Option<crate::types::FieldLogLevel> {
        &self.field_log_level
    }
    /// <p>The service role that AppSync assumes to publish to CloudWatch logs in your account.</p>
    /// This field is required.
    pub fn cloud_watch_logs_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_watch_logs_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service role that AppSync assumes to publish to CloudWatch logs in your account.</p>
    pub fn set_cloud_watch_logs_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_watch_logs_role_arn = input;
        self
    }
    /// <p>The service role that AppSync assumes to publish to CloudWatch logs in your account.</p>
    pub fn get_cloud_watch_logs_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_watch_logs_role_arn
    }
    /// <p>Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.</p>
    pub fn exclude_verbose_content(mut self, input: bool) -> Self {
        self.exclude_verbose_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.</p>
    pub fn set_exclude_verbose_content(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exclude_verbose_content = input;
        self
    }
    /// <p>Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.</p>
    pub fn get_exclude_verbose_content(&self) -> &::std::option::Option<bool> {
        &self.exclude_verbose_content
    }
    /// Consumes the builder and constructs a [`LogConfig`](crate::types::LogConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`field_log_level`](crate::types::builders::LogConfigBuilder::field_log_level)
    /// - [`cloud_watch_logs_role_arn`](crate::types::builders::LogConfigBuilder::cloud_watch_logs_role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::LogConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LogConfig {
            field_log_level: self.field_log_level.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_log_level",
                    "field_log_level was not specified but it is required when building LogConfig",
                )
            })?,
            cloud_watch_logs_role_arn: self.cloud_watch_logs_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cloud_watch_logs_role_arn",
                    "cloud_watch_logs_role_arn was not specified but it is required when building LogConfig",
                )
            })?,
            exclude_verbose_content: self.exclude_verbose_content.unwrap_or_default(),
        })
    }
}
