// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon Cognito user pool configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CognitoUserPoolConfig {
    /// <p>The user pool ID.</p>
    #[doc(hidden)]
    pub user_pool_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region in which the user pool was created.</p>
    #[doc(hidden)]
    pub aws_region: std::option::Option<std::string::String>,
    /// <p>A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.</p>
    #[doc(hidden)]
    pub app_id_client_regex: std::option::Option<std::string::String>,
}
impl CognitoUserPoolConfig {
    /// <p>The user pool ID.</p>
    pub fn user_pool_id(&self) -> std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The Amazon Web Services Region in which the user pool was created.</p>
    pub fn aws_region(&self) -> std::option::Option<&str> {
        self.aws_region.as_deref()
    }
    /// <p>A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.</p>
    pub fn app_id_client_regex(&self) -> std::option::Option<&str> {
        self.app_id_client_regex.as_deref()
    }
}
impl CognitoUserPoolConfig {
    /// Creates a new builder-style object to manufacture [`CognitoUserPoolConfig`](crate::types::CognitoUserPoolConfig).
    pub fn builder() -> crate::types::builders::CognitoUserPoolConfigBuilder {
        crate::types::builders::CognitoUserPoolConfigBuilder::default()
    }
}

/// A builder for [`CognitoUserPoolConfig`](crate::types::CognitoUserPoolConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CognitoUserPoolConfigBuilder {
    pub(crate) user_pool_id: std::option::Option<std::string::String>,
    pub(crate) aws_region: std::option::Option<std::string::String>,
    pub(crate) app_id_client_regex: std::option::Option<std::string::String>,
}
impl CognitoUserPoolConfigBuilder {
    /// <p>The user pool ID.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool_id = Some(input.into());
        self
    }
    /// <p>The user pool ID.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The Amazon Web Services Region in which the user pool was created.</p>
    pub fn aws_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region in which the user pool was created.</p>
    pub fn set_aws_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.</p>
    pub fn app_id_client_regex(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_id_client_regex = Some(input.into());
        self
    }
    /// <p>A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied.</p>
    pub fn set_app_id_client_regex(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.app_id_client_regex = input;
        self
    }
    /// Consumes the builder and constructs a [`CognitoUserPoolConfig`](crate::types::CognitoUserPoolConfig).
    pub fn build(self) -> crate::types::CognitoUserPoolConfig {
        crate::types::CognitoUserPoolConfig {
            user_pool_id: self.user_pool_id,
            aws_region: self.aws_region,
            app_id_client_regex: self.app_id_client_regex,
        }
    }
}
