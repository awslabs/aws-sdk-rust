// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon DynamoDB data source configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamodbDataSourceConfig {
    /// <p>The table name.</p>
    pub table_name: ::std::string::String,
    /// <p>The Amazon Web Services Region.</p>
    pub aws_region: ::std::string::String,
    /// <p>Set to TRUE to use Amazon Cognito credentials with this data source.</p>
    pub use_caller_credentials: bool,
    /// <p>The <code>DeltaSyncConfig</code> for a versioned data source.</p>
    pub delta_sync_config: ::std::option::Option<crate::types::DeltaSyncConfig>,
    /// <p>Set to TRUE to use Conflict Detection and Resolution with this data source.</p>
    pub versioned: bool,
}
impl DynamodbDataSourceConfig {
    /// <p>The table name.</p>
    pub fn table_name(&self) -> &str {
        use std::ops::Deref;
        self.table_name.deref()
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn aws_region(&self) -> &str {
        use std::ops::Deref;
        self.aws_region.deref()
    }
    /// <p>Set to TRUE to use Amazon Cognito credentials with this data source.</p>
    pub fn use_caller_credentials(&self) -> bool {
        self.use_caller_credentials
    }
    /// <p>The <code>DeltaSyncConfig</code> for a versioned data source.</p>
    pub fn delta_sync_config(&self) -> ::std::option::Option<&crate::types::DeltaSyncConfig> {
        self.delta_sync_config.as_ref()
    }
    /// <p>Set to TRUE to use Conflict Detection and Resolution with this data source.</p>
    pub fn versioned(&self) -> bool {
        self.versioned
    }
}
impl DynamodbDataSourceConfig {
    /// Creates a new builder-style object to manufacture [`DynamodbDataSourceConfig`](crate::types::DynamodbDataSourceConfig).
    pub fn builder() -> crate::types::builders::DynamodbDataSourceConfigBuilder {
        crate::types::builders::DynamodbDataSourceConfigBuilder::default()
    }
}

/// A builder for [`DynamodbDataSourceConfig`](crate::types::DynamodbDataSourceConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DynamodbDataSourceConfigBuilder {
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) aws_region: ::std::option::Option<::std::string::String>,
    pub(crate) use_caller_credentials: ::std::option::Option<bool>,
    pub(crate) delta_sync_config: ::std::option::Option<crate::types::DeltaSyncConfig>,
    pub(crate) versioned: ::std::option::Option<bool>,
}
impl DynamodbDataSourceConfigBuilder {
    /// <p>The table name.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The table name.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The table name.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The Amazon Web Services Region.</p>
    /// This field is required.
    pub fn aws_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The Amazon Web Services Region.</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_region
    }
    /// <p>Set to TRUE to use Amazon Cognito credentials with this data source.</p>
    pub fn use_caller_credentials(mut self, input: bool) -> Self {
        self.use_caller_credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to TRUE to use Amazon Cognito credentials with this data source.</p>
    pub fn set_use_caller_credentials(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_caller_credentials = input;
        self
    }
    /// <p>Set to TRUE to use Amazon Cognito credentials with this data source.</p>
    pub fn get_use_caller_credentials(&self) -> &::std::option::Option<bool> {
        &self.use_caller_credentials
    }
    /// <p>The <code>DeltaSyncConfig</code> for a versioned data source.</p>
    pub fn delta_sync_config(mut self, input: crate::types::DeltaSyncConfig) -> Self {
        self.delta_sync_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>DeltaSyncConfig</code> for a versioned data source.</p>
    pub fn set_delta_sync_config(mut self, input: ::std::option::Option<crate::types::DeltaSyncConfig>) -> Self {
        self.delta_sync_config = input;
        self
    }
    /// <p>The <code>DeltaSyncConfig</code> for a versioned data source.</p>
    pub fn get_delta_sync_config(&self) -> &::std::option::Option<crate::types::DeltaSyncConfig> {
        &self.delta_sync_config
    }
    /// <p>Set to TRUE to use Conflict Detection and Resolution with this data source.</p>
    pub fn versioned(mut self, input: bool) -> Self {
        self.versioned = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to TRUE to use Conflict Detection and Resolution with this data source.</p>
    pub fn set_versioned(mut self, input: ::std::option::Option<bool>) -> Self {
        self.versioned = input;
        self
    }
    /// <p>Set to TRUE to use Conflict Detection and Resolution with this data source.</p>
    pub fn get_versioned(&self) -> &::std::option::Option<bool> {
        &self.versioned
    }
    /// Consumes the builder and constructs a [`DynamodbDataSourceConfig`](crate::types::DynamodbDataSourceConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`table_name`](crate::types::builders::DynamodbDataSourceConfigBuilder::table_name)
    /// - [`aws_region`](crate::types::builders::DynamodbDataSourceConfigBuilder::aws_region)
    pub fn build(self) -> ::std::result::Result<crate::types::DynamodbDataSourceConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DynamodbDataSourceConfig {
            table_name: self.table_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_name",
                    "table_name was not specified but it is required when building DynamodbDataSourceConfig",
                )
            })?,
            aws_region: self.aws_region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aws_region",
                    "aws_region was not specified but it is required when building DynamodbDataSourceConfig",
                )
            })?,
            use_caller_credentials: self.use_caller_credentials.unwrap_or_default(),
            delta_sync_config: self.delta_sync_config,
            versioned: self.versioned.unwrap_or_default(),
        })
    }
}
