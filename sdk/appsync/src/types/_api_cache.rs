// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The <code>ApiCache</code> object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApiCache {
    /// <p>TTL in seconds for cache entries.</p>
    /// <p>Valid values are 1–3,600 seconds.</p>
    #[doc(hidden)]
    pub ttl: i64,
    /// <p>Caching behavior.</p>
    /// <ul>
    /// <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li>
    /// <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub api_caching_behavior: std::option::Option<crate::types::ApiCachingBehavior>,
    /// <p>Transit encryption flag when connecting to cache. You cannot update this setting after creation.</p>
    #[doc(hidden)]
    pub transit_encryption_enabled: bool,
    /// <p>At-rest encryption flag for cache. You cannot update this setting after creation.</p>
    #[doc(hidden)]
    pub at_rest_encryption_enabled: bool,
    /// <p>The cache instance type. Valid values are </p>
    /// <ul>
    /// <li> <p> <code>SMALL</code> </p> </li>
    /// <li> <p> <code>MEDIUM</code> </p> </li>
    /// <li> <p> <code>LARGE</code> </p> </li>
    /// <li> <p> <code>XLARGE</code> </p> </li>
    /// <li> <p> <code>LARGE_2X</code> </p> </li>
    /// <li> <p> <code>LARGE_4X</code> </p> </li>
    /// <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li>
    /// <li> <p> <code>LARGE_12X</code> </p> </li>
    /// </ul>
    /// <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p>
    /// <p>The following legacy instance types are available, but their use is discouraged:</p>
    /// <ul>
    /// <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li>
    /// <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li>
    /// <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li>
    /// <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ApiCacheType>,
    /// <p>The cache instance status.</p>
    /// <ul>
    /// <li> <p> <b>AVAILABLE</b>: The instance is available for use.</p> </li>
    /// <li> <p> <b>CREATING</b>: The instance is currently creating.</p> </li>
    /// <li> <p> <b>DELETING</b>: The instance is currently deleting.</p> </li>
    /// <li> <p> <b>MODIFYING</b>: The instance is currently modifying.</p> </li>
    /// <li> <p> <b>FAILED</b>: The instance has failed creation.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ApiCacheStatus>,
}
impl ApiCache {
    /// <p>TTL in seconds for cache entries.</p>
    /// <p>Valid values are 1–3,600 seconds.</p>
    pub fn ttl(&self) -> i64 {
        self.ttl
    }
    /// <p>Caching behavior.</p>
    /// <ul>
    /// <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li>
    /// <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li>
    /// </ul>
    pub fn api_caching_behavior(&self) -> std::option::Option<&crate::types::ApiCachingBehavior> {
        self.api_caching_behavior.as_ref()
    }
    /// <p>Transit encryption flag when connecting to cache. You cannot update this setting after creation.</p>
    pub fn transit_encryption_enabled(&self) -> bool {
        self.transit_encryption_enabled
    }
    /// <p>At-rest encryption flag for cache. You cannot update this setting after creation.</p>
    pub fn at_rest_encryption_enabled(&self) -> bool {
        self.at_rest_encryption_enabled
    }
    /// <p>The cache instance type. Valid values are </p>
    /// <ul>
    /// <li> <p> <code>SMALL</code> </p> </li>
    /// <li> <p> <code>MEDIUM</code> </p> </li>
    /// <li> <p> <code>LARGE</code> </p> </li>
    /// <li> <p> <code>XLARGE</code> </p> </li>
    /// <li> <p> <code>LARGE_2X</code> </p> </li>
    /// <li> <p> <code>LARGE_4X</code> </p> </li>
    /// <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li>
    /// <li> <p> <code>LARGE_12X</code> </p> </li>
    /// </ul>
    /// <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p>
    /// <p>The following legacy instance types are available, but their use is discouraged:</p>
    /// <ul>
    /// <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li>
    /// <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li>
    /// <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li>
    /// <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ApiCacheType> {
        self.r#type.as_ref()
    }
    /// <p>The cache instance status.</p>
    /// <ul>
    /// <li> <p> <b>AVAILABLE</b>: The instance is available for use.</p> </li>
    /// <li> <p> <b>CREATING</b>: The instance is currently creating.</p> </li>
    /// <li> <p> <b>DELETING</b>: The instance is currently deleting.</p> </li>
    /// <li> <p> <b>MODIFYING</b>: The instance is currently modifying.</p> </li>
    /// <li> <p> <b>FAILED</b>: The instance has failed creation.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::ApiCacheStatus> {
        self.status.as_ref()
    }
}
impl ApiCache {
    /// Creates a new builder-style object to manufacture [`ApiCache`](crate::types::ApiCache).
    pub fn builder() -> crate::types::builders::ApiCacheBuilder {
        crate::types::builders::ApiCacheBuilder::default()
    }
}

/// A builder for [`ApiCache`](crate::types::ApiCache).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApiCacheBuilder {
    pub(crate) ttl: std::option::Option<i64>,
    pub(crate) api_caching_behavior: std::option::Option<crate::types::ApiCachingBehavior>,
    pub(crate) transit_encryption_enabled: std::option::Option<bool>,
    pub(crate) at_rest_encryption_enabled: std::option::Option<bool>,
    pub(crate) r#type: std::option::Option<crate::types::ApiCacheType>,
    pub(crate) status: std::option::Option<crate::types::ApiCacheStatus>,
}
impl ApiCacheBuilder {
    /// <p>TTL in seconds for cache entries.</p>
    /// <p>Valid values are 1–3,600 seconds.</p>
    pub fn ttl(mut self, input: i64) -> Self {
        self.ttl = Some(input);
        self
    }
    /// <p>TTL in seconds for cache entries.</p>
    /// <p>Valid values are 1–3,600 seconds.</p>
    pub fn set_ttl(mut self, input: std::option::Option<i64>) -> Self {
        self.ttl = input;
        self
    }
    /// <p>Caching behavior.</p>
    /// <ul>
    /// <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li>
    /// <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li>
    /// </ul>
    pub fn api_caching_behavior(mut self, input: crate::types::ApiCachingBehavior) -> Self {
        self.api_caching_behavior = Some(input);
        self
    }
    /// <p>Caching behavior.</p>
    /// <ul>
    /// <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li>
    /// <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li>
    /// </ul>
    pub fn set_api_caching_behavior(
        mut self,
        input: std::option::Option<crate::types::ApiCachingBehavior>,
    ) -> Self {
        self.api_caching_behavior = input;
        self
    }
    /// <p>Transit encryption flag when connecting to cache. You cannot update this setting after creation.</p>
    pub fn transit_encryption_enabled(mut self, input: bool) -> Self {
        self.transit_encryption_enabled = Some(input);
        self
    }
    /// <p>Transit encryption flag when connecting to cache. You cannot update this setting after creation.</p>
    pub fn set_transit_encryption_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.transit_encryption_enabled = input;
        self
    }
    /// <p>At-rest encryption flag for cache. You cannot update this setting after creation.</p>
    pub fn at_rest_encryption_enabled(mut self, input: bool) -> Self {
        self.at_rest_encryption_enabled = Some(input);
        self
    }
    /// <p>At-rest encryption flag for cache. You cannot update this setting after creation.</p>
    pub fn set_at_rest_encryption_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.at_rest_encryption_enabled = input;
        self
    }
    /// <p>The cache instance type. Valid values are </p>
    /// <ul>
    /// <li> <p> <code>SMALL</code> </p> </li>
    /// <li> <p> <code>MEDIUM</code> </p> </li>
    /// <li> <p> <code>LARGE</code> </p> </li>
    /// <li> <p> <code>XLARGE</code> </p> </li>
    /// <li> <p> <code>LARGE_2X</code> </p> </li>
    /// <li> <p> <code>LARGE_4X</code> </p> </li>
    /// <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li>
    /// <li> <p> <code>LARGE_12X</code> </p> </li>
    /// </ul>
    /// <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p>
    /// <p>The following legacy instance types are available, but their use is discouraged:</p>
    /// <ul>
    /// <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li>
    /// <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li>
    /// <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li>
    /// <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::ApiCacheType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The cache instance type. Valid values are </p>
    /// <ul>
    /// <li> <p> <code>SMALL</code> </p> </li>
    /// <li> <p> <code>MEDIUM</code> </p> </li>
    /// <li> <p> <code>LARGE</code> </p> </li>
    /// <li> <p> <code>XLARGE</code> </p> </li>
    /// <li> <p> <code>LARGE_2X</code> </p> </li>
    /// <li> <p> <code>LARGE_4X</code> </p> </li>
    /// <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li>
    /// <li> <p> <code>LARGE_12X</code> </p> </li>
    /// </ul>
    /// <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p>
    /// <p>The following legacy instance types are available, but their use is discouraged:</p>
    /// <ul>
    /// <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li>
    /// <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li>
    /// <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li>
    /// <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li>
    /// <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ApiCacheType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The cache instance status.</p>
    /// <ul>
    /// <li> <p> <b>AVAILABLE</b>: The instance is available for use.</p> </li>
    /// <li> <p> <b>CREATING</b>: The instance is currently creating.</p> </li>
    /// <li> <p> <b>DELETING</b>: The instance is currently deleting.</p> </li>
    /// <li> <p> <b>MODIFYING</b>: The instance is currently modifying.</p> </li>
    /// <li> <p> <b>FAILED</b>: The instance has failed creation.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ApiCacheStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The cache instance status.</p>
    /// <ul>
    /// <li> <p> <b>AVAILABLE</b>: The instance is available for use.</p> </li>
    /// <li> <p> <b>CREATING</b>: The instance is currently creating.</p> </li>
    /// <li> <p> <b>DELETING</b>: The instance is currently deleting.</p> </li>
    /// <li> <p> <b>MODIFYING</b>: The instance is currently modifying.</p> </li>
    /// <li> <p> <b>FAILED</b>: The instance has failed creation.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ApiCacheStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ApiCache`](crate::types::ApiCache).
    pub fn build(self) -> crate::types::ApiCache {
        crate::types::ApiCache {
            ttl: self.ttl.unwrap_or_default(),
            api_caching_behavior: self.api_caching_behavior,
            transit_encryption_enabled: self.transit_encryption_enabled.unwrap_or_default(),
            at_rest_encryption_enabled: self.at_rest_encryption_enabled.unwrap_or_default(),
            r#type: self.r#type,
            status: self.status,
        }
    }
}
