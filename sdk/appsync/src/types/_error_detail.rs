// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the list of errors generated. When using JavaScript, this will apply to the request or response function evaluation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ErrorDetail {
    /// <p>The error payload.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl ErrorDetail {
    /// <p>The error payload.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ErrorDetail {
    /// Creates a new builder-style object to manufacture [`ErrorDetail`](crate::types::ErrorDetail).
    pub fn builder() -> crate::types::builders::ErrorDetailBuilder {
        crate::types::builders::ErrorDetailBuilder::default()
    }
}

/// A builder for [`ErrorDetail`](crate::types::ErrorDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ErrorDetailBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
}
impl ErrorDetailBuilder {
    /// <p>The error payload.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>The error payload.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`ErrorDetail`](crate::types::ErrorDetail).
    pub fn build(self) -> crate::types::ErrorDetail {
        crate::types::ErrorDetail {
            message: self.message,
        }
    }
}
