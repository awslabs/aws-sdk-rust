// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The caching configuration for a resolver that has caching activated.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CachingConfig {
    /// <p>The TTL in seconds for a resolver that has caching activated.</p>
    /// <p>Valid values are 1–3,600 seconds.</p>
    #[doc(hidden)]
    pub ttl: i64,
    /// <p>The caching keys for a resolver that has caching activated.</p>
    /// <p>Valid values are entries from the <code>$context.arguments</code>, <code>$context.source</code>, and <code>$context.identity</code> maps.</p>
    #[doc(hidden)]
    pub caching_keys: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CachingConfig {
    /// <p>The TTL in seconds for a resolver that has caching activated.</p>
    /// <p>Valid values are 1–3,600 seconds.</p>
    pub fn ttl(&self) -> i64 {
        self.ttl
    }
    /// <p>The caching keys for a resolver that has caching activated.</p>
    /// <p>Valid values are entries from the <code>$context.arguments</code>, <code>$context.source</code>, and <code>$context.identity</code> maps.</p>
    pub fn caching_keys(&self) -> std::option::Option<&[std::string::String]> {
        self.caching_keys.as_deref()
    }
}
impl CachingConfig {
    /// Creates a new builder-style object to manufacture [`CachingConfig`](crate::types::CachingConfig).
    pub fn builder() -> crate::types::builders::CachingConfigBuilder {
        crate::types::builders::CachingConfigBuilder::default()
    }
}

/// A builder for [`CachingConfig`](crate::types::CachingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CachingConfigBuilder {
    pub(crate) ttl: std::option::Option<i64>,
    pub(crate) caching_keys: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CachingConfigBuilder {
    /// <p>The TTL in seconds for a resolver that has caching activated.</p>
    /// <p>Valid values are 1–3,600 seconds.</p>
    pub fn ttl(mut self, input: i64) -> Self {
        self.ttl = Some(input);
        self
    }
    /// <p>The TTL in seconds for a resolver that has caching activated.</p>
    /// <p>Valid values are 1–3,600 seconds.</p>
    pub fn set_ttl(mut self, input: std::option::Option<i64>) -> Self {
        self.ttl = input;
        self
    }
    /// Appends an item to `caching_keys`.
    ///
    /// To override the contents of this collection use [`set_caching_keys`](Self::set_caching_keys).
    ///
    /// <p>The caching keys for a resolver that has caching activated.</p>
    /// <p>Valid values are entries from the <code>$context.arguments</code>, <code>$context.source</code>, and <code>$context.identity</code> maps.</p>
    pub fn caching_keys(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.caching_keys.unwrap_or_default();
        v.push(input.into());
        self.caching_keys = Some(v);
        self
    }
    /// <p>The caching keys for a resolver that has caching activated.</p>
    /// <p>Valid values are entries from the <code>$context.arguments</code>, <code>$context.source</code>, and <code>$context.identity</code> maps.</p>
    pub fn set_caching_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.caching_keys = input;
        self
    }
    /// Consumes the builder and constructs a [`CachingConfig`](crate::types::CachingConfig).
    pub fn build(self) -> crate::types::CachingConfig {
        crate::types::CachingConfig {
            ttl: self.ttl.unwrap_or_default(),
            caching_keys: self.caching_keys,
        }
    }
}
