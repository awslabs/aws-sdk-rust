// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AppSyncRuntime {
    /// <p>The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::RuntimeName>,
    /// <p>The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.</p>
    #[doc(hidden)]
    pub runtime_version: std::option::Option<std::string::String>,
}
impl AppSyncRuntime {
    /// <p>The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::RuntimeName> {
        self.name.as_ref()
    }
    /// <p>The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.</p>
    pub fn runtime_version(&self) -> std::option::Option<&str> {
        self.runtime_version.as_deref()
    }
}
impl AppSyncRuntime {
    /// Creates a new builder-style object to manufacture [`AppSyncRuntime`](crate::types::AppSyncRuntime).
    pub fn builder() -> crate::types::builders::AppSyncRuntimeBuilder {
        crate::types::builders::AppSyncRuntimeBuilder::default()
    }
}

/// A builder for [`AppSyncRuntime`](crate::types::AppSyncRuntime).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AppSyncRuntimeBuilder {
    pub(crate) name: std::option::Option<crate::types::RuntimeName>,
    pub(crate) runtime_version: std::option::Option<std::string::String>,
}
impl AppSyncRuntimeBuilder {
    /// <p>The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.</p>
    pub fn name(mut self, input: crate::types::RuntimeName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The <code>name</code> of the runtime to use. Currently, the only allowed value is <code>APPSYNC_JS</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<crate::types::RuntimeName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.</p>
    pub fn runtime_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.runtime_version = Some(input.into());
        self
    }
    /// <p>The <code>version</code> of the runtime to use. Currently, the only allowed version is <code>1.0.0</code>.</p>
    pub fn set_runtime_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.runtime_version = input;
        self
    }
    /// Consumes the builder and constructs a [`AppSyncRuntime`](crate::types::AppSyncRuntime).
    pub fn build(self) -> crate::types::AppSyncRuntime {
        crate::types::AppSyncRuntime {
            name: self.name,
            runtime_version: self.runtime_version,
        }
    }
}
