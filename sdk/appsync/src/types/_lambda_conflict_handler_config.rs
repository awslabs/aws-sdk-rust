// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The <code>LambdaConflictHandlerConfig</code> object when configuring <code>LAMBDA</code> as the Conflict Handler.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaConflictHandlerConfig {
    /// <p>The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.</p>
    #[doc(hidden)]
    pub lambda_conflict_handler_arn: std::option::Option<std::string::String>,
}
impl LambdaConflictHandlerConfig {
    /// <p>The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.</p>
    pub fn lambda_conflict_handler_arn(&self) -> std::option::Option<&str> {
        self.lambda_conflict_handler_arn.as_deref()
    }
}
impl LambdaConflictHandlerConfig {
    /// Creates a new builder-style object to manufacture [`LambdaConflictHandlerConfig`](crate::types::LambdaConflictHandlerConfig).
    pub fn builder() -> crate::types::builders::LambdaConflictHandlerConfigBuilder {
        crate::types::builders::LambdaConflictHandlerConfigBuilder::default()
    }
}

/// A builder for [`LambdaConflictHandlerConfig`](crate::types::LambdaConflictHandlerConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaConflictHandlerConfigBuilder {
    pub(crate) lambda_conflict_handler_arn: std::option::Option<std::string::String>,
}
impl LambdaConflictHandlerConfigBuilder {
    /// <p>The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.</p>
    pub fn lambda_conflict_handler_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.lambda_conflict_handler_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.</p>
    pub fn set_lambda_conflict_handler_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lambda_conflict_handler_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaConflictHandlerConfig`](crate::types::LambdaConflictHandlerConfig).
    pub fn build(self) -> crate::types::LambdaConflictHandlerConfig {
        crate::types::LambdaConflictHandlerConfig {
            lambda_conflict_handler_arn: self.lambda_conflict_handler_arn,
        }
    }
}
