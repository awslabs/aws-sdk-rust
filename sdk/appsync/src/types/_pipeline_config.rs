// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The pipeline configuration for a resolver of kind <code>PIPELINE</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PipelineConfig {
    /// <p>A list of <code>Function</code> objects.</p>
    #[doc(hidden)]
    pub functions: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PipelineConfig {
    /// <p>A list of <code>Function</code> objects.</p>
    pub fn functions(&self) -> std::option::Option<&[std::string::String]> {
        self.functions.as_deref()
    }
}
impl PipelineConfig {
    /// Creates a new builder-style object to manufacture [`PipelineConfig`](crate::types::PipelineConfig).
    pub fn builder() -> crate::types::builders::PipelineConfigBuilder {
        crate::types::builders::PipelineConfigBuilder::default()
    }
}

/// A builder for [`PipelineConfig`](crate::types::PipelineConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PipelineConfigBuilder {
    pub(crate) functions: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PipelineConfigBuilder {
    /// Appends an item to `functions`.
    ///
    /// To override the contents of this collection use [`set_functions`](Self::set_functions).
    ///
    /// <p>A list of <code>Function</code> objects.</p>
    pub fn functions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.functions.unwrap_or_default();
        v.push(input.into());
        self.functions = Some(v);
        self
    }
    /// <p>A list of <code>Function</code> objects.</p>
    pub fn set_functions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.functions = input;
        self
    }
    /// Consumes the builder and constructs a [`PipelineConfig`](crate::types::PipelineConfig).
    pub fn build(self) -> crate::types::PipelineConfig {
        crate::types::PipelineConfig {
            functions: self.functions,
        }
    }
}
