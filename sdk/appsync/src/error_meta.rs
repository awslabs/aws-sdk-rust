// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have access to perform this operation on this resource.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The API key exceeded a limit. Try your request again.</p>
    ApiKeyLimitExceededException(crate::types::error::ApiKeyLimitExceededException),
    /// <p>The API key expiration must be set to a value between 1 and 365 days from creation (for <code>CreateApiKey</code>) or from update (for <code>UpdateApiKey</code>).</p>
    ApiKeyValidityOutOfBoundsException(crate::types::error::ApiKeyValidityOutOfBoundsException),
    /// <p>The GraphQL API exceeded a limit. Try your request again.</p>
    ApiLimitExceededException(crate::types::error::ApiLimitExceededException),
    /// <p>The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>Another modification is in progress at this time and it must complete before you can make your change.</p>
    ConcurrentModificationException(crate::types::error::ConcurrentModificationException),
    /// <p>The GraphQL schema is not valid.</p>
    GraphQlSchemaException(crate::types::error::GraphQlSchemaException),
    /// <p>An internal AppSync error occurred. Try your request again.</p>
    InternalFailureException(crate::types::error::InternalFailureException),
    /// <p>The request exceeded a limit. Try your request again.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The resource specified in the request was not found. Check the resource, and then try again.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>You aren't authorized to perform this operation.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ApiKeyLimitExceededException(inner) => inner.fmt(f),
            Error::ApiKeyValidityOutOfBoundsException(inner) => inner.fmt(f),
            Error::ApiLimitExceededException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::GraphQlSchemaException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_api::AssociateApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_api::AssociateApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_api::AssociateApiError> for Error {
    fn from(err: crate::operation::associate_api::AssociateApiError) -> Self {
        match err {
            crate::operation::associate_api::AssociateApiError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_api::AssociateApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::associate_api::AssociateApiError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::associate_api::AssociateApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::associate_api::AssociateApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError> for Error {
    fn from(err: crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError) -> Self {
        match err {
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError> for Error {
    fn from(err: crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError) -> Self {
        match err {
            crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::associate_source_graphql_api::AssociateSourceGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_api_cache::CreateApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_api_cache::CreateApiCacheError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_api_cache::CreateApiCacheError> for Error {
    fn from(err: crate::operation::create_api_cache::CreateApiCacheError) -> Self {
        match err {
            crate::operation::create_api_cache::CreateApiCacheError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_api_cache::CreateApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::create_api_cache::CreateApiCacheError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_api_cache::CreateApiCacheError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_api_cache::CreateApiCacheError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_api_cache::CreateApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_api_key::CreateApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_api_key::CreateApiKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_api_key::CreateApiKeyError> for Error {
    fn from(err: crate::operation::create_api_key::CreateApiKeyError) -> Self {
        match err {
            crate::operation::create_api_key::CreateApiKeyError::ApiKeyLimitExceededException(inner) => Error::ApiKeyLimitExceededException(inner),
            crate::operation::create_api_key::CreateApiKeyError::ApiKeyValidityOutOfBoundsException(inner) => {
                Error::ApiKeyValidityOutOfBoundsException(inner)
            }
            crate::operation::create_api_key::CreateApiKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_api_key::CreateApiKeyError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_api_key::CreateApiKeyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_api_key::CreateApiKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_api_key::CreateApiKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_api_key::CreateApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_source::CreateDataSourceError> for Error {
    fn from(err: crate::operation::create_data_source::CreateDataSourceError) -> Self {
        match err {
            crate::operation::create_data_source::CreateDataSourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::create_data_source::CreateDataSourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_data_source::CreateDataSourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_data_source::CreateDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_data_source::CreateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain_name::CreateDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain_name::CreateDomainNameError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_domain_name::CreateDomainNameError> for Error {
    fn from(err: crate::operation::create_domain_name::CreateDomainNameError) -> Self {
        match err {
            crate::operation::create_domain_name::CreateDomainNameError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_domain_name::CreateDomainNameError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_domain_name::CreateDomainNameError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_domain_name::CreateDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_function::CreateFunctionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_function::CreateFunctionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_function::CreateFunctionError> for Error {
    fn from(err: crate::operation::create_function::CreateFunctionError) -> Self {
        match err {
            crate::operation::create_function::CreateFunctionError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::create_function::CreateFunctionError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_function::CreateFunctionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_function::CreateFunctionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_function::CreateFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_graphql_api::CreateGraphqlApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_graphql_api::CreateGraphqlApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_graphql_api::CreateGraphqlApiError> for Error {
    fn from(err: crate::operation::create_graphql_api::CreateGraphqlApiError) -> Self {
        match err {
            crate::operation::create_graphql_api::CreateGraphqlApiError::ApiLimitExceededException(inner) => Error::ApiLimitExceededException(inner),
            crate::operation::create_graphql_api::CreateGraphqlApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_graphql_api::CreateGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::create_graphql_api::CreateGraphqlApiError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_graphql_api::CreateGraphqlApiError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_graphql_api::CreateGraphqlApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_graphql_api::CreateGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_resolver::CreateResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_resolver::CreateResolverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_resolver::CreateResolverError> for Error {
    fn from(err: crate::operation::create_resolver::CreateResolverError) -> Self {
        match err {
            crate::operation::create_resolver::CreateResolverError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_resolver::CreateResolverError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::create_resolver::CreateResolverError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_resolver::CreateResolverError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_resolver::CreateResolverError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_resolver::CreateResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_type::CreateTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_type::CreateTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_type::CreateTypeError> for Error {
    fn from(err: crate::operation::create_type::CreateTypeError) -> Self {
        match err {
            crate::operation::create_type::CreateTypeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_type::CreateTypeError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::create_type::CreateTypeError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_type::CreateTypeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_type::CreateTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_type::CreateTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_api_cache::DeleteApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_api_cache::DeleteApiCacheError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_api_cache::DeleteApiCacheError> for Error {
    fn from(err: crate::operation::delete_api_cache::DeleteApiCacheError) -> Self {
        match err {
            crate::operation::delete_api_cache::DeleteApiCacheError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_api_cache::DeleteApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::delete_api_cache::DeleteApiCacheError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_api_cache::DeleteApiCacheError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_api_cache::DeleteApiCacheError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_api_cache::DeleteApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_api_key::DeleteApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_api_key::DeleteApiKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_api_key::DeleteApiKeyError> for Error {
    fn from(err: crate::operation::delete_api_key::DeleteApiKeyError) -> Self {
        match err {
            crate::operation::delete_api_key::DeleteApiKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_api_key::DeleteApiKeyError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_api_key::DeleteApiKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_api_key::DeleteApiKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_api_key::DeleteApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_data_source::DeleteDataSourceError> for Error {
    fn from(err: crate::operation::delete_data_source::DeleteDataSourceError) -> Self {
        match err {
            crate::operation::delete_data_source::DeleteDataSourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::delete_data_source::DeleteDataSourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain_name::DeleteDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain_name::DeleteDomainNameError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_domain_name::DeleteDomainNameError> for Error {
    fn from(err: crate::operation::delete_domain_name::DeleteDomainNameError) -> Self {
        match err {
            crate::operation::delete_domain_name::DeleteDomainNameError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_domain_name::DeleteDomainNameError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_domain_name::DeleteDomainNameError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::delete_domain_name::DeleteDomainNameError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_domain_name::DeleteDomainNameError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_domain_name::DeleteDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_function::DeleteFunctionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_function::DeleteFunctionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_function::DeleteFunctionError> for Error {
    fn from(err: crate::operation::delete_function::DeleteFunctionError) -> Self {
        match err {
            crate::operation::delete_function::DeleteFunctionError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::delete_function::DeleteFunctionError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_function::DeleteFunctionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_function::DeleteFunctionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_function::DeleteFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_graphql_api::DeleteGraphqlApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_graphql_api::DeleteGraphqlApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_graphql_api::DeleteGraphqlApiError> for Error {
    fn from(err: crate::operation::delete_graphql_api::DeleteGraphqlApiError) -> Self {
        match err {
            crate::operation::delete_graphql_api::DeleteGraphqlApiError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_graphql_api::DeleteGraphqlApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_graphql_api::DeleteGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::delete_graphql_api::DeleteGraphqlApiError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_graphql_api::DeleteGraphqlApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_graphql_api::DeleteGraphqlApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_graphql_api::DeleteGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resolver::DeleteResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resolver::DeleteResolverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resolver::DeleteResolverError> for Error {
    fn from(err: crate::operation::delete_resolver::DeleteResolverError) -> Self {
        match err {
            crate::operation::delete_resolver::DeleteResolverError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_resolver::DeleteResolverError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::delete_resolver::DeleteResolverError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_resolver::DeleteResolverError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_resolver::DeleteResolverError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_resolver::DeleteResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_type::DeleteTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_type::DeleteTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_type::DeleteTypeError> for Error {
    fn from(err: crate::operation::delete_type::DeleteTypeError) -> Self {
        match err {
            crate::operation::delete_type::DeleteTypeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_type::DeleteTypeError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_type::DeleteTypeError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_type::DeleteTypeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_type::DeleteTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_type::DeleteTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_api::DisassociateApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_api::DisassociateApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_api::DisassociateApiError> for Error {
    fn from(err: crate::operation::disassociate_api::DisassociateApiError) -> Self {
        match err {
            crate::operation::disassociate_api::DisassociateApiError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_api::DisassociateApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::disassociate_api::DisassociateApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::disassociate_api::DisassociateApiError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::disassociate_api::DisassociateApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::disassociate_api::DisassociateApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError> for Error {
    fn from(err: crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError) -> Self {
        match err {
            crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::disassociate_merged_graphql_api::DisassociateMergedGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError> for Error {
    fn from(err: crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError) -> Self {
        match err {
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::evaluate_code::EvaluateCodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::evaluate_code::EvaluateCodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::evaluate_code::EvaluateCodeError> for Error {
    fn from(err: crate::operation::evaluate_code::EvaluateCodeError) -> Self {
        match err {
            crate::operation::evaluate_code::EvaluateCodeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::evaluate_code::EvaluateCodeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::evaluate_code::EvaluateCodeError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::evaluate_code::EvaluateCodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::evaluate_mapping_template::EvaluateMappingTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::evaluate_mapping_template::EvaluateMappingTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::evaluate_mapping_template::EvaluateMappingTemplateError> for Error {
    fn from(err: crate::operation::evaluate_mapping_template::EvaluateMappingTemplateError) -> Self {
        match err {
            crate::operation::evaluate_mapping_template::EvaluateMappingTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::evaluate_mapping_template::EvaluateMappingTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::evaluate_mapping_template::EvaluateMappingTemplateError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::evaluate_mapping_template::EvaluateMappingTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::flush_api_cache::FlushApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::flush_api_cache::FlushApiCacheError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::flush_api_cache::FlushApiCacheError> for Error {
    fn from(err: crate::operation::flush_api_cache::FlushApiCacheError) -> Self {
        match err {
            crate::operation::flush_api_cache::FlushApiCacheError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::flush_api_cache::FlushApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::flush_api_cache::FlushApiCacheError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::flush_api_cache::FlushApiCacheError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::flush_api_cache::FlushApiCacheError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::flush_api_cache::FlushApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_api_association::GetApiAssociationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_api_association::GetApiAssociationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_api_association::GetApiAssociationError> for Error {
    fn from(err: crate::operation::get_api_association::GetApiAssociationError) -> Self {
        match err {
            crate::operation::get_api_association::GetApiAssociationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_api_association::GetApiAssociationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_api_association::GetApiAssociationError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::get_api_association::GetApiAssociationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_api_association::GetApiAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_api_cache::GetApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_api_cache::GetApiCacheError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_api_cache::GetApiCacheError> for Error {
    fn from(err: crate::operation::get_api_cache::GetApiCacheError) -> Self {
        match err {
            crate::operation::get_api_cache::GetApiCacheError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_api_cache::GetApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::get_api_cache::GetApiCacheError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::get_api_cache::GetApiCacheError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_api_cache::GetApiCacheError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_api_cache::GetApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_data_source::GetDataSourceError> for Error {
    fn from(err: crate::operation::get_data_source::GetDataSourceError) -> Self {
        match err {
            crate::operation::get_data_source::GetDataSourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_data_source::GetDataSourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::get_data_source::GetDataSourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::get_data_source::GetDataSourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_data_source::GetDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_data_source::GetDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain_name::GetDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain_name::GetDomainNameError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_domain_name::GetDomainNameError> for Error {
    fn from(err: crate::operation::get_domain_name::GetDomainNameError) -> Self {
        match err {
            crate::operation::get_domain_name::GetDomainNameError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_domain_name::GetDomainNameError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_domain_name::GetDomainNameError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::get_domain_name::GetDomainNameError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_domain_name::GetDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_function::GetFunctionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_function::GetFunctionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_function::GetFunctionError> for Error {
    fn from(err: crate::operation::get_function::GetFunctionError) -> Self {
        match err {
            crate::operation::get_function::GetFunctionError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::get_function::GetFunctionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_function::GetFunctionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_function::GetFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_graphql_api::GetGraphqlApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_graphql_api::GetGraphqlApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_graphql_api::GetGraphqlApiError> for Error {
    fn from(err: crate::operation::get_graphql_api::GetGraphqlApiError) -> Self {
        match err {
            crate::operation::get_graphql_api::GetGraphqlApiError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_graphql_api::GetGraphqlApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_graphql_api::GetGraphqlApiError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::get_graphql_api::GetGraphqlApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_graphql_api::GetGraphqlApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_graphql_api::GetGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_introspection_schema::GetIntrospectionSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_introspection_schema::GetIntrospectionSchemaError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_introspection_schema::GetIntrospectionSchemaError> for Error {
    fn from(err: crate::operation::get_introspection_schema::GetIntrospectionSchemaError) -> Self {
        match err {
            crate::operation::get_introspection_schema::GetIntrospectionSchemaError::GraphQlSchemaException(inner) => {
                Error::GraphQlSchemaException(inner)
            }
            crate::operation::get_introspection_schema::GetIntrospectionSchemaError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_introspection_schema::GetIntrospectionSchemaError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_introspection_schema::GetIntrospectionSchemaError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_introspection_schema::GetIntrospectionSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver::GetResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver::GetResolverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver::GetResolverError> for Error {
    fn from(err: crate::operation::get_resolver::GetResolverError) -> Self {
        match err {
            crate::operation::get_resolver::GetResolverError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::get_resolver::GetResolverError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_resolver::GetResolverError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_resolver::GetResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema_creation_status::GetSchemaCreationStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema_creation_status::GetSchemaCreationStatusError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_schema_creation_status::GetSchemaCreationStatusError> for Error {
    fn from(err: crate::operation::get_schema_creation_status::GetSchemaCreationStatusError) -> Self {
        match err {
            crate::operation::get_schema_creation_status::GetSchemaCreationStatusError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_schema_creation_status::GetSchemaCreationStatusError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_schema_creation_status::GetSchemaCreationStatusError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_schema_creation_status::GetSchemaCreationStatusError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_schema_creation_status::GetSchemaCreationStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_source_api_association::GetSourceApiAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_source_api_association::GetSourceApiAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_source_api_association::GetSourceApiAssociationError> for Error {
    fn from(err: crate::operation::get_source_api_association::GetSourceApiAssociationError) -> Self {
        match err {
            crate::operation::get_source_api_association::GetSourceApiAssociationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_source_api_association::GetSourceApiAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_source_api_association::GetSourceApiAssociationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_source_api_association::GetSourceApiAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_source_api_association::GetSourceApiAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_type::GetTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_type::GetTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_type::GetTypeError> for Error {
    fn from(err: crate::operation::get_type::GetTypeError) -> Self {
        match err {
            crate::operation::get_type::GetTypeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_type::GetTypeError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::get_type::GetTypeError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::get_type::GetTypeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_type::GetTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_type::GetTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_api_keys::ListApiKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_api_keys::ListApiKeysError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_api_keys::ListApiKeysError> for Error {
    fn from(err: crate::operation::list_api_keys::ListApiKeysError) -> Self {
        match err {
            crate::operation::list_api_keys::ListApiKeysError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_api_keys::ListApiKeysError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_api_keys::ListApiKeysError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_api_keys::ListApiKeysError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_api_keys::ListApiKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_sources::ListDataSourcesError> for Error {
    fn from(err: crate::operation::list_data_sources::ListDataSourcesError) -> Self {
        match err {
            crate::operation::list_data_sources::ListDataSourcesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_domain_names::ListDomainNamesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_domain_names::ListDomainNamesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_domain_names::ListDomainNamesError> for Error {
    fn from(err: crate::operation::list_domain_names::ListDomainNamesError) -> Self {
        match err {
            crate::operation::list_domain_names::ListDomainNamesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_domain_names::ListDomainNamesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_domain_names::ListDomainNamesError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_domain_names::ListDomainNamesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_functions::ListFunctionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_functions::ListFunctionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_functions::ListFunctionsError> for Error {
    fn from(err: crate::operation::list_functions::ListFunctionsError) -> Self {
        match err {
            crate::operation::list_functions::ListFunctionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_functions::ListFunctionsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_functions::ListFunctionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_functions::ListFunctionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_functions::ListFunctionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_graphql_apis::ListGraphqlApisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_graphql_apis::ListGraphqlApisError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_graphql_apis::ListGraphqlApisError> for Error {
    fn from(err: crate::operation::list_graphql_apis::ListGraphqlApisError) -> Self {
        match err {
            crate::operation::list_graphql_apis::ListGraphqlApisError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_graphql_apis::ListGraphqlApisError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_graphql_apis::ListGraphqlApisError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_graphql_apis::ListGraphqlApisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolvers::ListResolversError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolvers::ListResolversError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolvers::ListResolversError> for Error {
    fn from(err: crate::operation::list_resolvers::ListResolversError) -> Self {
        match err {
            crate::operation::list_resolvers::ListResolversError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_resolvers::ListResolversError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_resolvers::ListResolversError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_resolvers::ListResolversError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_resolvers::ListResolversError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolvers_by_function::ListResolversByFunctionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolvers_by_function::ListResolversByFunctionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolvers_by_function::ListResolversByFunctionError> for Error {
    fn from(err: crate::operation::list_resolvers_by_function::ListResolversByFunctionError) -> Self {
        match err {
            crate::operation::list_resolvers_by_function::ListResolversByFunctionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_resolvers_by_function::ListResolversByFunctionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_resolvers_by_function::ListResolversByFunctionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_resolvers_by_function::ListResolversByFunctionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_resolvers_by_function::ListResolversByFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_source_api_associations::ListSourceApiAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_source_api_associations::ListSourceApiAssociationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_source_api_associations::ListSourceApiAssociationsError> for Error {
    fn from(err: crate::operation::list_source_api_associations::ListSourceApiAssociationsError) -> Self {
        match err {
            crate::operation::list_source_api_associations::ListSourceApiAssociationsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_source_api_associations::ListSourceApiAssociationsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_source_api_associations::ListSourceApiAssociationsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_source_api_associations::ListSourceApiAssociationsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_source_api_associations::ListSourceApiAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_types::ListTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_types::ListTypesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_types::ListTypesError> for Error {
    fn from(err: crate::operation::list_types::ListTypesError) -> Self {
        match err {
            crate::operation::list_types::ListTypesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_types::ListTypesError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::list_types::ListTypesError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_types::ListTypesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_types::ListTypesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_types::ListTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_types_by_association::ListTypesByAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_types_by_association::ListTypesByAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_types_by_association::ListTypesByAssociationError> for Error {
    fn from(err: crate::operation::list_types_by_association::ListTypesByAssociationError) -> Self {
        match err {
            crate::operation::list_types_by_association::ListTypesByAssociationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_types_by_association::ListTypesByAssociationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::list_types_by_association::ListTypesByAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_types_by_association::ListTypesByAssociationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_types_by_association::ListTypesByAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_types_by_association::ListTypesByAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_schema_creation::StartSchemaCreationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_schema_creation::StartSchemaCreationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_schema_creation::StartSchemaCreationError> for Error {
    fn from(err: crate::operation::start_schema_creation::StartSchemaCreationError) -> Self {
        match err {
            crate::operation::start_schema_creation::StartSchemaCreationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_schema_creation::StartSchemaCreationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::start_schema_creation::StartSchemaCreationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::start_schema_creation::StartSchemaCreationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_schema_creation::StartSchemaCreationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_schema_creation::StartSchemaCreationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_schema_merge::StartSchemaMergeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_schema_merge::StartSchemaMergeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_schema_merge::StartSchemaMergeError> for Error {
    fn from(err: crate::operation::start_schema_merge::StartSchemaMergeError) -> Self {
        match err {
            crate::operation::start_schema_merge::StartSchemaMergeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_schema_merge::StartSchemaMergeError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::start_schema_merge::StartSchemaMergeError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::start_schema_merge::StartSchemaMergeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_schema_merge::StartSchemaMergeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_schema_merge::StartSchemaMergeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::tag_resource::TagResourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::tag_resource::TagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_resource::TagResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::untag_resource::UntagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::untag_resource::UntagResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_api_cache::UpdateApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_api_cache::UpdateApiCacheError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_api_cache::UpdateApiCacheError> for Error {
    fn from(err: crate::operation::update_api_cache::UpdateApiCacheError) -> Self {
        match err {
            crate::operation::update_api_cache::UpdateApiCacheError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_api_cache::UpdateApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::update_api_cache::UpdateApiCacheError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_api_cache::UpdateApiCacheError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_api_cache::UpdateApiCacheError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_api_cache::UpdateApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_api_key::UpdateApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_api_key::UpdateApiKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_api_key::UpdateApiKeyError> for Error {
    fn from(err: crate::operation::update_api_key::UpdateApiKeyError) -> Self {
        match err {
            crate::operation::update_api_key::UpdateApiKeyError::ApiKeyValidityOutOfBoundsException(inner) => {
                Error::ApiKeyValidityOutOfBoundsException(inner)
            }
            crate::operation::update_api_key::UpdateApiKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_data_source::UpdateDataSourceError> for Error {
    fn from(err: crate::operation::update_data_source::UpdateDataSourceError) -> Self {
        match err {
            crate::operation::update_data_source::UpdateDataSourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::update_data_source::UpdateDataSourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain_name::UpdateDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain_name::UpdateDomainNameError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_domain_name::UpdateDomainNameError> for Error {
    fn from(err: crate::operation::update_domain_name::UpdateDomainNameError) -> Self {
        match err {
            crate::operation::update_domain_name::UpdateDomainNameError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::update_domain_name::UpdateDomainNameError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_function::UpdateFunctionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_function::UpdateFunctionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_function::UpdateFunctionError> for Error {
    fn from(err: crate::operation::update_function::UpdateFunctionError) -> Self {
        match err {
            crate::operation::update_function::UpdateFunctionError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::update_function::UpdateFunctionError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_function::UpdateFunctionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_function::UpdateFunctionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_function::UpdateFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_graphql_api::UpdateGraphqlApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_graphql_api::UpdateGraphqlApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_graphql_api::UpdateGraphqlApiError> for Error {
    fn from(err: crate::operation::update_graphql_api::UpdateGraphqlApiError) -> Self {
        match err {
            crate::operation::update_graphql_api::UpdateGraphqlApiError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_graphql_api::UpdateGraphqlApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_graphql_api::UpdateGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::update_graphql_api::UpdateGraphqlApiError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_graphql_api::UpdateGraphqlApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_graphql_api::UpdateGraphqlApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_graphql_api::UpdateGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver::UpdateResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver::UpdateResolverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_resolver::UpdateResolverError> for Error {
    fn from(err: crate::operation::update_resolver::UpdateResolverError) -> Self {
        match err {
            crate::operation::update_resolver::UpdateResolverError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_resolver::UpdateResolverError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::update_resolver::UpdateResolverError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_resolver::UpdateResolverError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_resolver::UpdateResolverError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_resolver::UpdateResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_source_api_association::UpdateSourceApiAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_source_api_association::UpdateSourceApiAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_source_api_association::UpdateSourceApiAssociationError> for Error {
    fn from(err: crate::operation::update_source_api_association::UpdateSourceApiAssociationError) -> Self {
        match err {
            crate::operation::update_source_api_association::UpdateSourceApiAssociationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_source_api_association::UpdateSourceApiAssociationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::update_source_api_association::UpdateSourceApiAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::update_source_api_association::UpdateSourceApiAssociationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_source_api_association::UpdateSourceApiAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_source_api_association::UpdateSourceApiAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_type::UpdateTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_type::UpdateTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_type::UpdateTypeError> for Error {
    fn from(err: crate::operation::update_type::UpdateTypeError) -> Self {
        match err {
            crate::operation::update_type::UpdateTypeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_type::UpdateTypeError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::update_type::UpdateTypeError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_type::UpdateTypeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_type::UpdateTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_type::UpdateTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ApiKeyLimitExceededException(inner) => inner.source(),
            Error::ApiKeyValidityOutOfBoundsException(inner) => inner.source(),
            Error::ApiLimitExceededException(inner) => inner.source(),
            Error::BadRequestException(inner) => inner.source(),
            Error::ConcurrentModificationException(inner) => inner.source(),
            Error::GraphQlSchemaException(inner) => inner.source(),
            Error::InternalFailureException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ApiKeyLimitExceededException(e) => e.request_id(),
            Self::ApiKeyValidityOutOfBoundsException(e) => e.request_id(),
            Self::ApiLimitExceededException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::GraphQlSchemaException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
