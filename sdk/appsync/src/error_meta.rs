// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have access to perform this operation on this resource.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The API key exceeded a limit. Try your request again.</p>
    ApiKeyLimitExceededException(crate::error::ApiKeyLimitExceededException),
    /// <p>The API key expiration must be set to a value between 1 and 365 days from creation (for <code>CreateApiKey</code>) or from update (for <code>UpdateApiKey</code>).</p>
    ApiKeyValidityOutOfBoundsException(crate::error::ApiKeyValidityOutOfBoundsException),
    /// <p>The GraphQL API exceeded a limit. Try your request again.</p>
    ApiLimitExceededException(crate::error::ApiLimitExceededException),
    /// <p>The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and then try again.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>Another modification is in progress at this time and it must complete before you can make your change.</p>
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    /// <p>The GraphQL schema is not valid.</p>
    GraphQlSchemaException(crate::error::GraphQlSchemaException),
    /// <p>An internal AppSync error occurred. Try your request again.</p>
    InternalFailureException(crate::error::InternalFailureException),
    /// <p>The request exceeded a limit. Try your request again.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The resource specified in the request was not found. Check the resource, and then try again.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>You aren't authorized to perform this operation.</p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ApiKeyLimitExceededException(inner) => inner.fmt(f),
            Error::ApiKeyValidityOutOfBoundsException(inner) => inner.fmt(f),
            Error::ApiLimitExceededException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::GraphQlSchemaException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociateApiError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateApiError> for Error {
    fn from(err: crate::error::AssociateApiError) -> Self {
        match err {
            crate::error::AssociateApiError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::AssociateApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::AssociateApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::AssociateApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateApiCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateApiCacheError> for Error {
    fn from(err: crate::error::CreateApiCacheError) -> Self {
        match err {
            crate::error::CreateApiCacheError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateApiCacheError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateApiCacheError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateApiCacheError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateApiKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateApiKeyError> for Error {
    fn from(err: crate::error::CreateApiKeyError) -> Self {
        match err {
            crate::error::CreateApiKeyError::ApiKeyLimitExceededException(inner) => {
                Error::ApiKeyLimitExceededException(inner)
            }
            crate::error::CreateApiKeyError::ApiKeyValidityOutOfBoundsException(inner) => {
                Error::ApiKeyValidityOutOfBoundsException(inner)
            }
            crate::error::CreateApiKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateApiKeyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateApiKeyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateApiKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateApiKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDataSourceError> for Error {
    fn from(err: crate::error::CreateDataSourceError) -> Self {
        match err {
            crate::error::CreateDataSourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateDataSourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateDataSourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateDataSourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDataSourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDomainNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDomainNameError> for Error {
    fn from(err: crate::error::CreateDomainNameError) -> Self {
        match err {
            crate::error::CreateDomainNameError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateDomainNameError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateDomainNameError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFunctionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateFunctionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFunctionError> for Error {
    fn from(err: crate::error::CreateFunctionError) -> Self {
        match err {
            crate::error::CreateFunctionError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateFunctionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateFunctionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateFunctionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGraphqlApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGraphqlApiError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGraphqlApiError> for Error {
    fn from(err: crate::error::CreateGraphqlApiError) -> Self {
        match err {
            crate::error::CreateGraphqlApiError::ApiLimitExceededException(inner) => {
                Error::ApiLimitExceededException(inner)
            }
            crate::error::CreateGraphqlApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateGraphqlApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateGraphqlApiError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateGraphqlApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateResolverError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResolverError> for Error {
    fn from(err: crate::error::CreateResolverError) -> Self {
        match err {
            crate::error::CreateResolverError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateResolverError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateResolverError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateResolverError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateResolverError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTypeError> for Error {
    fn from(err: crate::error::CreateTypeError) -> Self {
        match err {
            crate::error::CreateTypeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateTypeError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::CreateTypeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateTypeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateTypeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteApiCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteApiCacheError> for Error {
    fn from(err: crate::error::DeleteApiCacheError) -> Self {
        match err {
            crate::error::DeleteApiCacheError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteApiCacheError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteApiCacheError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteApiCacheError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteApiKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteApiKeyError> for Error {
    fn from(err: crate::error::DeleteApiKeyError) -> Self {
        match err {
            crate::error::DeleteApiKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteApiKeyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteApiKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteApiKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDataSourceError> for Error {
    fn from(err: crate::error::DeleteDataSourceError) -> Self {
        match err {
            crate::error::DeleteDataSourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteDataSourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteDataSourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteDataSourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDataSourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDomainNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDomainNameError> for Error {
    fn from(err: crate::error::DeleteDomainNameError) -> Self {
        match err {
            crate::error::DeleteDomainNameError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDomainNameError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteDomainNameError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteDomainNameError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteDomainNameError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFunctionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteFunctionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFunctionError> for Error {
    fn from(err: crate::error::DeleteFunctionError) -> Self {
        match err {
            crate::error::DeleteFunctionError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteFunctionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteFunctionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteFunctionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGraphqlApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGraphqlApiError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGraphqlApiError> for Error {
    fn from(err: crate::error::DeleteGraphqlApiError) -> Self {
        match err {
            crate::error::DeleteGraphqlApiError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteGraphqlApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteGraphqlApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteGraphqlApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteGraphqlApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteResolverError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResolverError> for Error {
    fn from(err: crate::error::DeleteResolverError) -> Self {
        match err {
            crate::error::DeleteResolverError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteResolverError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteResolverError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteResolverError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteResolverError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTypeError> for Error {
    fn from(err: crate::error::DeleteTypeError) -> Self {
        match err {
            crate::error::DeleteTypeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteTypeError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteTypeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteTypeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteTypeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisassociateApiError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateApiError> for Error {
    fn from(err: crate::error::DisassociateApiError) -> Self {
        match err {
            crate::error::DisassociateApiError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DisassociateApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DisassociateApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DisassociateApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DisassociateApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EvaluateCodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::EvaluateCodeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EvaluateCodeError> for Error {
    fn from(err: crate::error::EvaluateCodeError) -> Self {
        match err {
            crate::error::EvaluateCodeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::EvaluateCodeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::EvaluateCodeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::EvaluateCodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EvaluateMappingTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::EvaluateMappingTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EvaluateMappingTemplateError> for Error {
    fn from(err: crate::error::EvaluateMappingTemplateError) -> Self {
        match err {
            crate::error::EvaluateMappingTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::EvaluateMappingTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::EvaluateMappingTemplateError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::EvaluateMappingTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::FlushApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::FlushApiCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FlushApiCacheError> for Error {
    fn from(err: crate::error::FlushApiCacheError) -> Self {
        match err {
            crate::error::FlushApiCacheError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::FlushApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::FlushApiCacheError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::FlushApiCacheError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::FlushApiCacheError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::FlushApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApiAssociationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetApiAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApiAssociationError> for Error {
    fn from(err: crate::error::GetApiAssociationError) -> Self {
        match err {
            crate::error::GetApiAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetApiAssociationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApiAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetApiAssociationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApiAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetApiCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApiCacheError> for Error {
    fn from(err: crate::error::GetApiCacheError) -> Self {
        match err {
            crate::error::GetApiCacheError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::GetApiCacheError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetApiCacheError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApiCacheError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDataSourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDataSourceError> for Error {
    fn from(err: crate::error::GetDataSourceError) -> Self {
        match err {
            crate::error::GetDataSourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDataSourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::GetDataSourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetDataSourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDataSourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDomainNameError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDomainNameError> for Error {
    fn from(err: crate::error::GetDomainNameError) -> Self {
        match err {
            crate::error::GetDomainNameError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDomainNameError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDomainNameError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetDomainNameError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFunctionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetFunctionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFunctionError> for Error {
    fn from(err: crate::error::GetFunctionError) -> Self {
        match err {
            crate::error::GetFunctionError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::GetFunctionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetFunctionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGraphqlApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGraphqlApiError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGraphqlApiError> for Error {
    fn from(err: crate::error::GetGraphqlApiError) -> Self {
        match err {
            crate::error::GetGraphqlApiError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetGraphqlApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetGraphqlApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetGraphqlApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetGraphqlApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIntrospectionSchemaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetIntrospectionSchemaError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIntrospectionSchemaError> for Error {
    fn from(err: crate::error::GetIntrospectionSchemaError) -> Self {
        match err {
            crate::error::GetIntrospectionSchemaError::GraphQlSchemaException(inner) => {
                Error::GraphQlSchemaException(inner)
            }
            crate::error::GetIntrospectionSchemaError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetIntrospectionSchemaError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetIntrospectionSchemaError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetIntrospectionSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetResolverError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverError> for Error {
    fn from(err: crate::error::GetResolverError) -> Self {
        match err {
            crate::error::GetResolverError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::GetResolverError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetResolverError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSchemaCreationStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSchemaCreationStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSchemaCreationStatusError> for Error {
    fn from(err: crate::error::GetSchemaCreationStatusError) -> Self {
        match err {
            crate::error::GetSchemaCreationStatusError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSchemaCreationStatusError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetSchemaCreationStatusError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSchemaCreationStatusError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetSchemaCreationStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTypeError> for Error {
    fn from(err: crate::error::GetTypeError) -> Self {
        match err {
            crate::error::GetTypeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetTypeError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::GetTypeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetTypeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetTypeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListApiKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListApiKeysError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListApiKeysError> for Error {
    fn from(err: crate::error::ListApiKeysError) -> Self {
        match err {
            crate::error::ListApiKeysError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListApiKeysError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListApiKeysError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListApiKeysError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListApiKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDataSourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDataSourcesError> for Error {
    fn from(err: crate::error::ListDataSourcesError) -> Self {
        match err {
            crate::error::ListDataSourcesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListDataSourcesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListDataSourcesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListDataSourcesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainNamesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDomainNamesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainNamesError> for Error {
    fn from(err: crate::error::ListDomainNamesError) -> Self {
        match err {
            crate::error::ListDomainNamesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDomainNamesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListDomainNamesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListDomainNamesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFunctionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFunctionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFunctionsError> for Error {
    fn from(err: crate::error::ListFunctionsError) -> Self {
        match err {
            crate::error::ListFunctionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListFunctionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListFunctionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListFunctionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListFunctionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGraphqlApisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGraphqlApisError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGraphqlApisError> for Error {
    fn from(err: crate::error::ListGraphqlApisError) -> Self {
        match err {
            crate::error::ListGraphqlApisError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListGraphqlApisError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListGraphqlApisError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListGraphqlApisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResolversError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListResolversError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolversError> for Error {
    fn from(err: crate::error::ListResolversError) -> Self {
        match err {
            crate::error::ListResolversError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListResolversError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListResolversError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListResolversError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListResolversError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResolversByFunctionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResolversByFunctionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolversByFunctionError> for Error {
    fn from(err: crate::error::ListResolversByFunctionError) -> Self {
        match err {
            crate::error::ListResolversByFunctionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListResolversByFunctionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListResolversByFunctionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListResolversByFunctionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListResolversByFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTagsForResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListTagsForResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListTagsForResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTypesError> for Error {
    fn from(err: crate::error::ListTypesError) -> Self {
        match err {
            crate::error::ListTypesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTypesError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::ListTypesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListTypesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTypesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartSchemaCreationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartSchemaCreationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartSchemaCreationError> for Error {
    fn from(err: crate::error::StartSchemaCreationError) -> Self {
        match err {
            crate::error::StartSchemaCreationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::StartSchemaCreationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::StartSchemaCreationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::StartSchemaCreationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartSchemaCreationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::StartSchemaCreationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::TagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagResourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UntagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagResourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApiCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateApiCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApiCacheError> for Error {
    fn from(err: crate::error::UpdateApiCacheError) -> Self {
        match err {
            crate::error::UpdateApiCacheError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateApiCacheError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateApiCacheError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateApiCacheError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateApiCacheError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateApiCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateApiKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApiKeyError> for Error {
    fn from(err: crate::error::UpdateApiKeyError) -> Self {
        match err {
            crate::error::UpdateApiKeyError::ApiKeyValidityOutOfBoundsException(inner) => {
                Error::ApiKeyValidityOutOfBoundsException(inner)
            }
            crate::error::UpdateApiKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateApiKeyError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateApiKeyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateApiKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateApiKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDataSourceError> for Error {
    fn from(err: crate::error::UpdateDataSourceError) -> Self {
        match err {
            crate::error::UpdateDataSourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateDataSourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateDataSourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDataSourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDataSourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDomainNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDomainNameError> for Error {
    fn from(err: crate::error::UpdateDomainNameError) -> Self {
        match err {
            crate::error::UpdateDomainNameError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateDomainNameError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateDomainNameError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateDomainNameError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateDomainNameError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFunctionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateFunctionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFunctionError> for Error {
    fn from(err: crate::error::UpdateFunctionError) -> Self {
        match err {
            crate::error::UpdateFunctionError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateFunctionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateFunctionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateFunctionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateFunctionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGraphqlApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGraphqlApiError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGraphqlApiError> for Error {
    fn from(err: crate::error::UpdateGraphqlApiError) -> Self {
        match err {
            crate::error::UpdateGraphqlApiError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateGraphqlApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateGraphqlApiError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateGraphqlApiError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateGraphqlApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGraphqlApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateGraphqlApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateResolverError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResolverError> for Error {
    fn from(err: crate::error::UpdateResolverError) -> Self {
        match err {
            crate::error::UpdateResolverError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateResolverError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateResolverError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateResolverError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateResolverError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTypeError> for Error {
    fn from(err: crate::error::UpdateTypeError) -> Self {
        match err {
            crate::error::UpdateTypeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateTypeError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateTypeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UpdateTypeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateTypeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ApiKeyLimitExceededException(e) => e.request_id(),
            Self::ApiKeyValidityOutOfBoundsException(e) => e.request_id(),
            Self::ApiLimitExceededException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::GraphQlSchemaException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
