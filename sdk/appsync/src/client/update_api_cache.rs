// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateApiCache`](crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`api_id(impl Into<String>)`](crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder::api_id) / [`set_api_id(Option<String>)`](crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder::set_api_id):<br>required: **true**<br><p>The GraphQL API ID.</p><br>
    ///   - [`ttl(i64)`](crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder::ttl) / [`set_ttl(Option<i64>)`](crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder::set_ttl):<br>required: **true**<br><p>TTL in seconds for cache entries.</p>  <p>Valid values are 1â€“3,600 seconds.</p><br>
    ///   - [`api_caching_behavior(ApiCachingBehavior)`](crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder::api_caching_behavior) / [`set_api_caching_behavior(Option<ApiCachingBehavior>)`](crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder::set_api_caching_behavior):<br>required: **true**<br><p>Caching behavior.</p>  <ul>   <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li>   <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resolvers that you specify are cached.</p> </li>  </ul><br>
    ///   - [`r#type(ApiCacheType)`](crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder::type) / [`set_type(Option<ApiCacheType>)`](crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder::set_type):<br>required: **true**<br><p>The cache instance type. Valid values are </p>  <ul>   <li> <p> <code>SMALL</code> </p> </li>   <li> <p> <code>MEDIUM</code> </p> </li>   <li> <p> <code>LARGE</code> </p> </li>   <li> <p> <code>XLARGE</code> </p> </li>   <li> <p> <code>LARGE_2X</code> </p> </li>   <li> <p> <code>LARGE_4X</code> </p> </li>   <li> <p> <code>LARGE_8X</code> (not available in all regions)</p> </li>   <li> <p> <code>LARGE_12X</code> </p> </li>  </ul>  <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p>  <p>The following legacy instance types are available, but their use is discouraged:</p>  <ul>   <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li>   <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li>   <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li>   <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li>   <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li>   <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li>   <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li>  </ul><br>
    /// - On success, responds with [`UpdateApiCacheOutput`](crate::operation::update_api_cache::UpdateApiCacheOutput) with field(s):
    ///   - [`api_cache(Option<ApiCache>)`](crate::operation::update_api_cache::UpdateApiCacheOutput::api_cache): <p>The <code>ApiCache</code> object.</p>
    /// - On failure, responds with [`SdkError<UpdateApiCacheError>`](crate::operation::update_api_cache::UpdateApiCacheError)
    pub fn update_api_cache(&self) -> crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder {
        crate::operation::update_api_cache::builders::UpdateApiCacheFluentBuilder::new(self.handle.clone())
    }
}
