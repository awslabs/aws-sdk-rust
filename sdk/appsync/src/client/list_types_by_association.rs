// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListTypesByAssociation`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`merged_api_identifier(impl Into<String>)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::merged_api_identifier) / [`set_merged_api_identifier(Option<String>)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::set_merged_api_identifier):<br>required: **true**<br><p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p><br>
    ///   - [`association_id(impl Into<String>)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::association_id) / [`set_association_id(Option<String>)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::set_association_id):<br>required: **true**<br><p>The ID generated by the AppSync service for the source API association.</p><br>
    ///   - [`format(TypeDefinitionFormat)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::format) / [`set_format(Option<TypeDefinitionFormat>)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::set_format):<br>required: **true**<br><p>The format type.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::set_next_token):<br>required: **false**<br><p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results that you want the request to return.</p><br>
    /// - On success, responds with [`ListTypesByAssociationOutput`](crate::operation::list_types_by_association::ListTypesByAssociationOutput) with field(s):
    ///   - [`types(Option<Vec::<Type>>)`](crate::operation::list_types_by_association::ListTypesByAssociationOutput::types): <p>The <code>Type</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_types_by_association::ListTypesByAssociationOutput::next_token): <p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>
    /// - On failure, responds with [`SdkError<ListTypesByAssociationError>`](crate::operation::list_types_by_association::ListTypesByAssociationError)
    pub fn list_types_by_association(&self) -> crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder {
        crate::operation::list_types_by_association::builders::ListTypesByAssociationFluentBuilder::new(self.handle.clone())
    }
}
