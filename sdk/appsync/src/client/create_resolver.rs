// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateResolver`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`api_id(impl Into<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::api_id) / [`set_api_id(Option<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_api_id): <p>The ID for the GraphQL API for which the resolver is being created.</p>
    ///   - [`type_name(impl Into<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::type_name) / [`set_type_name(Option<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_type_name): <p>The name of the <code>Type</code>.</p>
    ///   - [`field_name(impl Into<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::field_name) / [`set_field_name(Option<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_field_name): <p>The name of the field to attach the resolver to.</p>
    ///   - [`data_source_name(impl Into<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::data_source_name) / [`set_data_source_name(Option<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_data_source_name): <p>The name of the data source for which the resolver is being created.</p>
    ///   - [`request_mapping_template(impl Into<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::request_mapping_template) / [`set_request_mapping_template(Option<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_request_mapping_template): <p>The mapping template to use for requests.</p>  <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p>  <p>VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.</p>
    ///   - [`response_mapping_template(impl Into<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::response_mapping_template) / [`set_response_mapping_template(Option<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_response_mapping_template): <p>The mapping template to use for responses from the data source.</p>
    ///   - [`kind(ResolverKind)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::kind) / [`set_kind(Option<ResolverKind>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_kind): <p>The resolver type.</p>  <ul>   <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.</p> </li>   <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.</p> </li>  </ul>
    ///   - [`pipeline_config(PipelineConfig)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::pipeline_config) / [`set_pipeline_config(Option<PipelineConfig>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_pipeline_config): <p>The <code>PipelineConfig</code>.</p>
    ///   - [`sync_config(SyncConfig)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::sync_config) / [`set_sync_config(Option<SyncConfig>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_sync_config): <p>The <code>SyncConfig</code> for a resolver attached to a versioned data source.</p>
    ///   - [`caching_config(CachingConfig)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::caching_config) / [`set_caching_config(Option<CachingConfig>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_caching_config): <p>The caching configuration for the resolver.</p>
    ///   - [`max_batch_size(i32)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::max_batch_size) / [`set_max_batch_size(i32)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_max_batch_size): <p>The maximum batching size for a resolver.</p>
    ///   - [`runtime(AppSyncRuntime)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::runtime) / [`set_runtime(Option<AppSyncRuntime>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_runtime): <p>Describes a runtime used by an Amazon Web Services AppSync pipeline resolver or Amazon Web Services AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.</p>
    ///   - [`code(impl Into<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::code) / [`set_code(Option<String>)`](crate::operation::create_resolver::builders::CreateResolverFluentBuilder::set_code): <p>The <code>resolver</code> code that contains the request and response functions. When code is used, the <code>runtime</code> is required. The <code>runtime</code> value must be <code>APPSYNC_JS</code>.</p>
    /// - On success, responds with [`CreateResolverOutput`](crate::operation::create_resolver::CreateResolverOutput) with field(s):
    ///   - [`resolver(Option<Resolver>)`](crate::operation::create_resolver::CreateResolverOutput::resolver): <p>The <code>Resolver</code> object.</p>
    /// - On failure, responds with [`SdkError<CreateResolverError>`](crate::operation::create_resolver::CreateResolverError)
    pub fn create_resolver(
        &self,
    ) -> crate::operation::create_resolver::builders::CreateResolverFluentBuilder {
        crate::operation::create_resolver::builders::CreateResolverFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
