// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTypeInput {
    /// <p>The API ID.</p>
    pub api_id: ::std::option::Option<::std::string::String>,
    /// <p>The new type name.</p>
    pub type_name: ::std::option::Option<::std::string::String>,
    /// <p>The new definition.</p>
    pub definition: ::std::option::Option<::std::string::String>,
    /// <p>The new type format: SDL or JSON.</p>
    pub format: ::std::option::Option<crate::types::TypeDefinitionFormat>,
}
impl UpdateTypeInput {
    /// <p>The API ID.</p>
    pub fn api_id(&self) -> ::std::option::Option<&str> {
        self.api_id.as_deref()
    }
    /// <p>The new type name.</p>
    pub fn type_name(&self) -> ::std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The new definition.</p>
    pub fn definition(&self) -> ::std::option::Option<&str> {
        self.definition.as_deref()
    }
    /// <p>The new type format: SDL or JSON.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::TypeDefinitionFormat> {
        self.format.as_ref()
    }
}
impl UpdateTypeInput {
    /// Creates a new builder-style object to manufacture [`UpdateTypeInput`](crate::operation::update_type::UpdateTypeInput).
    pub fn builder() -> crate::operation::update_type::builders::UpdateTypeInputBuilder {
        crate::operation::update_type::builders::UpdateTypeInputBuilder::default()
    }
}

/// A builder for [`UpdateTypeInput`](crate::operation::update_type::UpdateTypeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTypeInputBuilder {
    pub(crate) api_id: ::std::option::Option<::std::string::String>,
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) definition: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::TypeDefinitionFormat>,
}
impl UpdateTypeInputBuilder {
    /// <p>The API ID.</p>
    /// This field is required.
    pub fn api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The API ID.</p>
    pub fn set_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_id = input;
        self
    }
    /// <p>The API ID.</p>
    pub fn get_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_id
    }
    /// <p>The new type name.</p>
    /// This field is required.
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new type name.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The new type name.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// <p>The new definition.</p>
    pub fn definition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.definition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new definition.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The new definition.</p>
    pub fn get_definition(&self) -> &::std::option::Option<::std::string::String> {
        &self.definition
    }
    /// <p>The new type format: SDL or JSON.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::TypeDefinitionFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new type format: SDL or JSON.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::TypeDefinitionFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The new type format: SDL or JSON.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::TypeDefinitionFormat> {
        &self.format
    }
    /// Consumes the builder and constructs a [`UpdateTypeInput`](crate::operation::update_type::UpdateTypeInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_type::UpdateTypeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_type::UpdateTypeInput {
            api_id: self.api_id,
            type_name: self.type_name,
            definition: self.definition,
            format: self.format,
        })
    }
}
