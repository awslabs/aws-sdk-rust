// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSourceApiAssociationInput {
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub merged_api_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The description field.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub source_api_association_config: ::std::option::Option<crate::types::SourceApiAssociationConfig>,
}
impl UpdateSourceApiAssociationInput {
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn merged_api_identifier(&self) -> ::std::option::Option<&str> {
        self.merged_api_identifier.as_deref()
    }
    /// <p>The description field.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn source_api_association_config(&self) -> ::std::option::Option<&crate::types::SourceApiAssociationConfig> {
        self.source_api_association_config.as_ref()
    }
}
impl UpdateSourceApiAssociationInput {
    /// Creates a new builder-style object to manufacture [`UpdateSourceApiAssociationInput`](crate::operation::update_source_api_association::UpdateSourceApiAssociationInput).
    pub fn builder() -> crate::operation::update_source_api_association::builders::UpdateSourceApiAssociationInputBuilder {
        crate::operation::update_source_api_association::builders::UpdateSourceApiAssociationInputBuilder::default()
    }
}

/// A builder for [`UpdateSourceApiAssociationInput`](crate::operation::update_source_api_association::UpdateSourceApiAssociationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSourceApiAssociationInputBuilder {
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) merged_api_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) source_api_association_config: ::std::option::Option<crate::types::SourceApiAssociationConfig>,
}
impl UpdateSourceApiAssociationInputBuilder {
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    /// This field is required.
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    /// This field is required.
    pub fn merged_api_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.merged_api_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn set_merged_api_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.merged_api_identifier = input;
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn get_merged_api_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.merged_api_identifier
    }
    /// <p>The description field.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description field.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description field.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn source_api_association_config(mut self, input: crate::types::SourceApiAssociationConfig) -> Self {
        self.source_api_association_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn set_source_api_association_config(mut self, input: ::std::option::Option<crate::types::SourceApiAssociationConfig>) -> Self {
        self.source_api_association_config = input;
        self
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn get_source_api_association_config(&self) -> &::std::option::Option<crate::types::SourceApiAssociationConfig> {
        &self.source_api_association_config
    }
    /// Consumes the builder and constructs a [`UpdateSourceApiAssociationInput`](crate::operation::update_source_api_association::UpdateSourceApiAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_source_api_association::UpdateSourceApiAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_source_api_association::UpdateSourceApiAssociationInput {
            association_id: self.association_id,
            merged_api_identifier: self.merged_api_identifier,
            description: self.description,
            source_api_association_config: self.source_api_association_config,
        })
    }
}
