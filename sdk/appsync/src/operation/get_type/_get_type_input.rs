// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTypeInput {
    /// <p>The API ID.</p>
    #[doc(hidden)]
    pub api_id: std::option::Option<std::string::String>,
    /// <p>The type name.</p>
    #[doc(hidden)]
    pub type_name: std::option::Option<std::string::String>,
    /// <p>The type format: SDL or JSON.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::TypeDefinitionFormat>,
}
impl GetTypeInput {
    /// <p>The API ID.</p>
    pub fn api_id(&self) -> std::option::Option<&str> {
        self.api_id.as_deref()
    }
    /// <p>The type name.</p>
    pub fn type_name(&self) -> std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The type format: SDL or JSON.</p>
    pub fn format(&self) -> std::option::Option<&crate::types::TypeDefinitionFormat> {
        self.format.as_ref()
    }
}
impl GetTypeInput {
    /// Creates a new builder-style object to manufacture [`GetTypeInput`](crate::operation::get_type::GetTypeInput).
    pub fn builder() -> crate::operation::get_type::builders::GetTypeInputBuilder {
        crate::operation::get_type::builders::GetTypeInputBuilder::default()
    }
}

/// A builder for [`GetTypeInput`](crate::operation::get_type::GetTypeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetTypeInputBuilder {
    pub(crate) api_id: std::option::Option<std::string::String>,
    pub(crate) type_name: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::TypeDefinitionFormat>,
}
impl GetTypeInputBuilder {
    /// <p>The API ID.</p>
    pub fn api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_id = Some(input.into());
        self
    }
    /// <p>The API ID.</p>
    pub fn set_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.api_id = input;
        self
    }
    /// <p>The type name.</p>
    pub fn type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_name = Some(input.into());
        self
    }
    /// <p>The type name.</p>
    pub fn set_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The type format: SDL or JSON.</p>
    pub fn format(mut self, input: crate::types::TypeDefinitionFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>The type format: SDL or JSON.</p>
    pub fn set_format(
        mut self,
        input: std::option::Option<crate::types::TypeDefinitionFormat>,
    ) -> Self {
        self.format = input;
        self
    }
    /// Consumes the builder and constructs a [`GetTypeInput`](crate::operation::get_type::GetTypeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_type::GetTypeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_type::GetTypeInput {
            api_id: self.api_id,
            type_name: self.type_name,
            format: self.format,
        })
    }
}
