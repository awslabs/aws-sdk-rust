// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_source_graphql_api::_disassociate_source_graphql_api_output::DisassociateSourceGraphqlApiOutputBuilder;

pub use crate::operation::disassociate_source_graphql_api::_disassociate_source_graphql_api_input::DisassociateSourceGraphqlApiInputBuilder;

impl DisassociateSourceGraphqlApiInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.disassociate_source_graphql_api();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DisassociateSourceGraphqlApi`.
///
/// <p>Deletes an association between a Merged API and source API using the Merged API's identifier and the association ID.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DisassociateSourceGraphqlApiFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::disassociate_source_graphql_api::builders::DisassociateSourceGraphqlApiInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiOutput,
        crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError,
    > for DisassociateSourceGraphqlApiFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiOutput,
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DisassociateSourceGraphqlApiFluentBuilder {
    /// Creates a new `DisassociateSourceGraphqlApi`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DisassociateSourceGraphqlApi as a reference.
    pub fn as_input(&self) -> &crate::operation::disassociate_source_graphql_api::builders::DisassociateSourceGraphqlApiInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApi::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApi::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiOutput,
        crate::operation::disassociate_source_graphql_api::DisassociateSourceGraphqlApiError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn merged_api_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.merged_api_identifier(input.into());
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn set_merged_api_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_merged_api_identifier(input);
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn get_merged_api_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_merged_api_identifier()
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.association_id(input.into());
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_association_id(input);
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_association_id()
    }
}
