// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EvaluateCodeOutput {
    /// <p>The result of the evaluation operation.</p>
    #[doc(hidden)]
    pub evaluation_result: std::option::Option<std::string::String>,
    /// <p>Contains the payload of the response error.</p>
    #[doc(hidden)]
    pub error: std::option::Option<crate::types::EvaluateCodeErrorDetail>,
    /// <p>A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.</p>
    #[doc(hidden)]
    pub logs: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl EvaluateCodeOutput {
    /// <p>The result of the evaluation operation.</p>
    pub fn evaluation_result(&self) -> std::option::Option<&str> {
        self.evaluation_result.as_deref()
    }
    /// <p>Contains the payload of the response error.</p>
    pub fn error(&self) -> std::option::Option<&crate::types::EvaluateCodeErrorDetail> {
        self.error.as_ref()
    }
    /// <p>A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.</p>
    pub fn logs(&self) -> std::option::Option<&[std::string::String]> {
        self.logs.as_deref()
    }
}
impl aws_http::request_id::RequestId for EvaluateCodeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl EvaluateCodeOutput {
    /// Creates a new builder-style object to manufacture [`EvaluateCodeOutput`](crate::operation::evaluate_code::EvaluateCodeOutput).
    pub fn builder() -> crate::operation::evaluate_code::builders::EvaluateCodeOutputBuilder {
        crate::operation::evaluate_code::builders::EvaluateCodeOutputBuilder::default()
    }
}

/// A builder for [`EvaluateCodeOutput`](crate::operation::evaluate_code::EvaluateCodeOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EvaluateCodeOutputBuilder {
    pub(crate) evaluation_result: std::option::Option<std::string::String>,
    pub(crate) error: std::option::Option<crate::types::EvaluateCodeErrorDetail>,
    pub(crate) logs: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl EvaluateCodeOutputBuilder {
    /// <p>The result of the evaluation operation.</p>
    pub fn evaluation_result(mut self, input: impl Into<std::string::String>) -> Self {
        self.evaluation_result = Some(input.into());
        self
    }
    /// <p>The result of the evaluation operation.</p>
    pub fn set_evaluation_result(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.evaluation_result = input;
        self
    }
    /// <p>Contains the payload of the response error.</p>
    pub fn error(mut self, input: crate::types::EvaluateCodeErrorDetail) -> Self {
        self.error = Some(input);
        self
    }
    /// <p>Contains the payload of the response error.</p>
    pub fn set_error(
        mut self,
        input: std::option::Option<crate::types::EvaluateCodeErrorDetail>,
    ) -> Self {
        self.error = input;
        self
    }
    /// Appends an item to `logs`.
    ///
    /// To override the contents of this collection use [`set_logs`](Self::set_logs).
    ///
    /// <p>A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.</p>
    pub fn logs(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.logs.unwrap_or_default();
        v.push(input.into());
        self.logs = Some(v);
        self
    }
    /// <p>A list of logs that were generated by calls to <code>util.log.info</code> and <code>util.log.error</code> in the evaluated code.</p>
    pub fn set_logs(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.logs = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`EvaluateCodeOutput`](crate::operation::evaluate_code::EvaluateCodeOutput).
    pub fn build(self) -> crate::operation::evaluate_code::EvaluateCodeOutput {
        crate::operation::evaluate_code::EvaluateCodeOutput {
            evaluation_result: self.evaluation_result,
            error: self.error,
            logs: self.logs,
            _request_id: self._request_id,
        }
    }
}
