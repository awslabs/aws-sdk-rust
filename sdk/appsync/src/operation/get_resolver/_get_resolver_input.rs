// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetResolverInput {
    /// <p>The API ID.</p>
    #[doc(hidden)]
    pub api_id: std::option::Option<std::string::String>,
    /// <p>The resolver type name.</p>
    #[doc(hidden)]
    pub type_name: std::option::Option<std::string::String>,
    /// <p>The resolver field name.</p>
    #[doc(hidden)]
    pub field_name: std::option::Option<std::string::String>,
}
impl GetResolverInput {
    /// <p>The API ID.</p>
    pub fn api_id(&self) -> std::option::Option<&str> {
        self.api_id.as_deref()
    }
    /// <p>The resolver type name.</p>
    pub fn type_name(&self) -> std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The resolver field name.</p>
    pub fn field_name(&self) -> std::option::Option<&str> {
        self.field_name.as_deref()
    }
}
impl GetResolverInput {
    /// Creates a new builder-style object to manufacture [`GetResolverInput`](crate::operation::get_resolver::GetResolverInput).
    pub fn builder() -> crate::operation::get_resolver::builders::GetResolverInputBuilder {
        crate::operation::get_resolver::builders::GetResolverInputBuilder::default()
    }
}

/// A builder for [`GetResolverInput`](crate::operation::get_resolver::GetResolverInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetResolverInputBuilder {
    pub(crate) api_id: std::option::Option<std::string::String>,
    pub(crate) type_name: std::option::Option<std::string::String>,
    pub(crate) field_name: std::option::Option<std::string::String>,
}
impl GetResolverInputBuilder {
    /// <p>The API ID.</p>
    pub fn api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.api_id = Some(input.into());
        self
    }
    /// <p>The API ID.</p>
    pub fn set_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.api_id = input;
        self
    }
    /// <p>The resolver type name.</p>
    pub fn type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_name = Some(input.into());
        self
    }
    /// <p>The resolver type name.</p>
    pub fn set_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The resolver field name.</p>
    pub fn field_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_name = Some(input.into());
        self
    }
    /// <p>The resolver field name.</p>
    pub fn set_field_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetResolverInput`](crate::operation::get_resolver::GetResolverInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_resolver::GetResolverInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_resolver::GetResolverInput {
            api_id: self.api_id,
            type_name: self.type_name,
            field_name: self.field_name,
        })
    }
}
