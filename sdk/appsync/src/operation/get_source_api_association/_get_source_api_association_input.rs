// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSourceApiAssociationInput {
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub merged_api_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
}
impl GetSourceApiAssociationInput {
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn merged_api_identifier(&self) -> ::std::option::Option<&str> {
        self.merged_api_identifier.as_deref()
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
}
impl GetSourceApiAssociationInput {
    /// Creates a new builder-style object to manufacture [`GetSourceApiAssociationInput`](crate::operation::get_source_api_association::GetSourceApiAssociationInput).
    pub fn builder() -> crate::operation::get_source_api_association::builders::GetSourceApiAssociationInputBuilder {
        crate::operation::get_source_api_association::builders::GetSourceApiAssociationInputBuilder::default()
    }
}

/// A builder for [`GetSourceApiAssociationInput`](crate::operation::get_source_api_association::GetSourceApiAssociationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSourceApiAssociationInputBuilder {
    pub(crate) merged_api_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
}
impl GetSourceApiAssociationInputBuilder {
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    /// This field is required.
    pub fn merged_api_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.merged_api_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn set_merged_api_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.merged_api_identifier = input;
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn get_merged_api_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.merged_api_identifier
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    /// This field is required.
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// Consumes the builder and constructs a [`GetSourceApiAssociationInput`](crate::operation::get_source_api_association::GetSourceApiAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_source_api_association::GetSourceApiAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_source_api_association::GetSourceApiAssociationInput {
            merged_api_identifier: self.merged_api_identifier,
            association_id: self.association_id,
        })
    }
}
