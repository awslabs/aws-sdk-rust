// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSchemaCreationStatusOutput {
    /// <p>The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SchemaStatus>,
    /// <p>Detailed information about the status of the schema creation operation.</p>
    #[doc(hidden)]
    pub details: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetSchemaCreationStatusOutput {
    /// <p>The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SchemaStatus> {
        self.status.as_ref()
    }
    /// <p>Detailed information about the status of the schema creation operation.</p>
    pub fn details(&self) -> std::option::Option<&str> {
        self.details.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSchemaCreationStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSchemaCreationStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetSchemaCreationStatusOutput`](crate::operation::get_schema_creation_status::GetSchemaCreationStatusOutput).
    pub fn builder(
    ) -> crate::operation::get_schema_creation_status::builders::GetSchemaCreationStatusOutputBuilder
    {
        crate::operation::get_schema_creation_status::builders::GetSchemaCreationStatusOutputBuilder::default()
    }
}

/// A builder for [`GetSchemaCreationStatusOutput`](crate::operation::get_schema_creation_status::GetSchemaCreationStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSchemaCreationStatusOutputBuilder {
    pub(crate) status: std::option::Option<crate::types::SchemaStatus>,
    pub(crate) details: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetSchemaCreationStatusOutputBuilder {
    /// <p>The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.</p>
    pub fn status(mut self, input: crate::types::SchemaStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SchemaStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Detailed information about the status of the schema creation operation.</p>
    pub fn details(mut self, input: impl Into<std::string::String>) -> Self {
        self.details = Some(input.into());
        self
    }
    /// <p>Detailed information about the status of the schema creation operation.</p>
    pub fn set_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.details = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSchemaCreationStatusOutput`](crate::operation::get_schema_creation_status::GetSchemaCreationStatusOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_schema_creation_status::GetSchemaCreationStatusOutput {
        crate::operation::get_schema_creation_status::GetSchemaCreationStatusOutput {
            status: self.status,
            details: self.details,
            _request_id: self._request_id,
        }
    }
}
