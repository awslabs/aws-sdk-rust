// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTypesByAssociationInput {
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub merged_api_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The format type.</p>
    pub format: ::std::option::Option<crate::types::TypeDefinitionFormat>,
    /// <p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results that you want the request to return.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListTypesByAssociationInput {
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn merged_api_identifier(&self) -> ::std::option::Option<&str> {
        self.merged_api_identifier.as_deref()
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The format type.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::TypeDefinitionFormat> {
        self.format.as_ref()
    }
    /// <p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results that you want the request to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListTypesByAssociationInput {
    /// Creates a new builder-style object to manufacture [`ListTypesByAssociationInput`](crate::operation::list_types_by_association::ListTypesByAssociationInput).
    pub fn builder() -> crate::operation::list_types_by_association::builders::ListTypesByAssociationInputBuilder {
        crate::operation::list_types_by_association::builders::ListTypesByAssociationInputBuilder::default()
    }
}

/// A builder for [`ListTypesByAssociationInput`](crate::operation::list_types_by_association::ListTypesByAssociationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTypesByAssociationInputBuilder {
    pub(crate) merged_api_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::TypeDefinitionFormat>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListTypesByAssociationInputBuilder {
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    /// This field is required.
    pub fn merged_api_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.merged_api_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn set_merged_api_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.merged_api_identifier = input;
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn get_merged_api_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.merged_api_identifier
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    /// This field is required.
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>The format type.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::TypeDefinitionFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format type.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::TypeDefinitionFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format type.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::TypeDefinitionFormat> {
        &self.format
    }
    /// <p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results that you want the request to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results that you want the request to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results that you want the request to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListTypesByAssociationInput`](crate::operation::list_types_by_association::ListTypesByAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_types_by_association::ListTypesByAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_types_by_association::ListTypesByAssociationInput {
            merged_api_identifier: self.merged_api_identifier,
            association_id: self.association_id,
            format: self.format,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
