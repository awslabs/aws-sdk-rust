// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_data_source_introspection::_get_data_source_introspection_output::GetDataSourceIntrospectionOutputBuilder;

pub use crate::operation::get_data_source_introspection::_get_data_source_introspection_input::GetDataSourceIntrospectionInputBuilder;

impl crate::operation::get_data_source_introspection::builders::GetDataSourceIntrospectionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_data_source_introspection::GetDataSourceIntrospectionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_data_source_introspection();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetDataSourceIntrospection`.
///
/// <p>Retrieves the record of an existing introspection. If the retrieval is successful, the result of the instrospection will also be returned. If the retrieval fails the operation, an error message will be returned instead.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetDataSourceIntrospectionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_data_source_introspection::builders::GetDataSourceIntrospectionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput,
        crate::operation::get_data_source_introspection::GetDataSourceIntrospectionError,
    > for GetDataSourceIntrospectionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput,
            crate::operation::get_data_source_introspection::GetDataSourceIntrospectionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetDataSourceIntrospectionFluentBuilder {
    /// Creates a new `GetDataSourceIntrospection`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetDataSourceIntrospection as a reference.
    pub fn as_input(&self) -> &crate::operation::get_data_source_introspection::builders::GetDataSourceIntrospectionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_data_source_introspection::GetDataSourceIntrospectionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_data_source_introspection::GetDataSourceIntrospection::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_data_source_introspection::GetDataSourceIntrospection::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_data_source_introspection::GetDataSourceIntrospectionOutput,
        crate::operation::get_data_source_introspection::GetDataSourceIntrospectionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn introspection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.introspection_id(input.into());
        self
    }
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn set_introspection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_introspection_id(input);
        self
    }
    /// <p>The introspection ID. Each introspection contains a unique ID that can be used to reference the instrospection record.</p>
    pub fn get_introspection_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_introspection_id()
    }
    /// <p>A boolean flag that determines whether SDL should be generated for introspected types or not. If set to <code>true</code>, each model will contain an <code>sdl</code> property that contains the SDL for that type. The SDL only contains the type data and no additional metadata or directives.</p>
    pub fn include_models_sdl(mut self, input: bool) -> Self {
        self.inner = self.inner.include_models_sdl(input);
        self
    }
    /// <p>A boolean flag that determines whether SDL should be generated for introspected types or not. If set to <code>true</code>, each model will contain an <code>sdl</code> property that contains the SDL for that type. The SDL only contains the type data and no additional metadata or directives.</p>
    pub fn set_include_models_sdl(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_models_sdl(input);
        self
    }
    /// <p>A boolean flag that determines whether SDL should be generated for introspected types or not. If set to <code>true</code>, each model will contain an <code>sdl</code> property that contains the SDL for that type. The SDL only contains the type data and no additional metadata or directives.</p>
    pub fn get_include_models_sdl(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_models_sdl()
    }
    /// <p>Determines the number of types to be returned in a single response before paginating. This value is typically taken from <code>nextToken</code> value from the previous response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Determines the number of types to be returned in a single response before paginating. This value is typically taken from <code>nextToken</code> value from the previous response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Determines the number of types to be returned in a single response before paginating. This value is typically taken from <code>nextToken</code> value from the previous response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of introspected types that will be returned in a single response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of introspected types that will be returned in a single response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of introspected types that will be returned in a single response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
