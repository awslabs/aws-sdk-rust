// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_merged_graphql_api::_associate_merged_graphql_api_output::AssociateMergedGraphqlApiOutputBuilder;

pub use crate::operation::associate_merged_graphql_api::_associate_merged_graphql_api_input::AssociateMergedGraphqlApiInputBuilder;

impl crate::operation::associate_merged_graphql_api::builders::AssociateMergedGraphqlApiInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.associate_merged_graphql_api();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AssociateMergedGraphqlApi`.
///
/// <p>Creates an association between a Merged API and source API using the source API's identifier.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AssociateMergedGraphqlApiFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::associate_merged_graphql_api::builders::AssociateMergedGraphqlApiInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiOutput,
        crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError,
    > for AssociateMergedGraphqlApiFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiOutput,
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl AssociateMergedGraphqlApiFluentBuilder {
    /// Creates a new `AssociateMergedGraphqlApi`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AssociateMergedGraphqlApi as a reference.
    pub fn as_input(&self) -> &crate::operation::associate_merged_graphql_api::builders::AssociateMergedGraphqlApiInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApi::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApi::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiOutput,
        crate::operation::associate_merged_graphql_api::AssociateMergedGraphqlApiError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the AppSync Source API. This is generated by the AppSync service. In most cases, source APIs (especially in your account) only require the API ID value or ARN of the source API. However, source APIs from other accounts (cross-account use cases) strictly require the full resource ARN of the source API.</p>
    pub fn source_api_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_api_identifier(input.into());
        self
    }
    /// <p>The identifier of the AppSync Source API. This is generated by the AppSync service. In most cases, source APIs (especially in your account) only require the API ID value or ARN of the source API. However, source APIs from other accounts (cross-account use cases) strictly require the full resource ARN of the source API.</p>
    pub fn set_source_api_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_api_identifier(input);
        self
    }
    /// <p>The identifier of the AppSync Source API. This is generated by the AppSync service. In most cases, source APIs (especially in your account) only require the API ID value or ARN of the source API. However, source APIs from other accounts (cross-account use cases) strictly require the full resource ARN of the source API.</p>
    pub fn get_source_api_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_api_identifier()
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn merged_api_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.merged_api_identifier(input.into());
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn set_merged_api_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_merged_api_identifier(input);
        self
    }
    /// <p>The identifier of the AppSync Merged API. This is generated by the AppSync service. In most cases, Merged APIs (especially in your account) only require the API ID value or ARN of the merged API. However, Merged APIs in other accounts (cross-account use cases) strictly require the full resource ARN of the merged API.</p>
    pub fn get_merged_api_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_merged_api_identifier()
    }
    /// <p>The description field.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description field.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description field.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn source_api_association_config(mut self, input: crate::types::SourceApiAssociationConfig) -> Self {
        self.inner = self.inner.source_api_association_config(input);
        self
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn set_source_api_association_config(mut self, input: ::std::option::Option<crate::types::SourceApiAssociationConfig>) -> Self {
        self.inner = self.inner.set_source_api_association_config(input);
        self
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn get_source_api_association_config(&self) -> &::std::option::Option<crate::types::SourceApiAssociationConfig> {
        self.inner.get_source_api_association_config()
    }
}
