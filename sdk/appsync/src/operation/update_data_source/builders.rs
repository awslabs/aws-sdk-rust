// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_data_source::_update_data_source_output::UpdateDataSourceOutputBuilder;

pub use crate::operation::update_data_source::_update_data_source_input::UpdateDataSourceInputBuilder;

impl crate::operation::update_data_source::builders::UpdateDataSourceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_data_source::UpdateDataSourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_data_source::UpdateDataSourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_data_source();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateDataSource`.
///
/// <p>Updates a <code>DataSource</code> object.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateDataSourceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_data_source::builders::UpdateDataSourceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_data_source::UpdateDataSourceOutput,
        crate::operation::update_data_source::UpdateDataSourceError,
    > for UpdateDataSourceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_data_source::UpdateDataSourceOutput,
            crate::operation::update_data_source::UpdateDataSourceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateDataSourceFluentBuilder {
    /// Creates a new `UpdateDataSource`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateDataSource as a reference.
    pub fn as_input(&self) -> &crate::operation::update_data_source::builders::UpdateDataSourceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_data_source::UpdateDataSourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_data_source::UpdateDataSourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_data_source::UpdateDataSource::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_data_source::UpdateDataSource::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_data_source::UpdateDataSourceOutput,
        crate::operation::update_data_source::UpdateDataSourceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The API ID.</p>
    pub fn api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.api_id(input.into());
        self
    }
    /// <p>The API ID.</p>
    pub fn set_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_api_id(input);
        self
    }
    /// <p>The API ID.</p>
    pub fn get_api_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_api_id()
    }
    /// <p>The new name for the data source.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The new name for the data source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The new name for the data source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The new description for the data source.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The new description for the data source.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The new description for the data source.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The new data source type.</p>
    pub fn r#type(mut self, input: crate::types::DataSourceType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The new data source type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DataSourceType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The new data source type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DataSourceType> {
        self.inner.get_type()
    }
    /// <p>The new service role Amazon Resource Name (ARN) for the data source.</p>
    pub fn service_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_role_arn(input.into());
        self
    }
    /// <p>The new service role Amazon Resource Name (ARN) for the data source.</p>
    pub fn set_service_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_role_arn(input);
        self
    }
    /// <p>The new service role Amazon Resource Name (ARN) for the data source.</p>
    pub fn get_service_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_role_arn()
    }
    /// <p>The new Amazon DynamoDB configuration.</p>
    pub fn dynamodb_config(mut self, input: crate::types::DynamodbDataSourceConfig) -> Self {
        self.inner = self.inner.dynamodb_config(input);
        self
    }
    /// <p>The new Amazon DynamoDB configuration.</p>
    pub fn set_dynamodb_config(mut self, input: ::std::option::Option<crate::types::DynamodbDataSourceConfig>) -> Self {
        self.inner = self.inner.set_dynamodb_config(input);
        self
    }
    /// <p>The new Amazon DynamoDB configuration.</p>
    pub fn get_dynamodb_config(&self) -> &::std::option::Option<crate::types::DynamodbDataSourceConfig> {
        self.inner.get_dynamodb_config()
    }
    /// <p>The new Lambda configuration.</p>
    pub fn lambda_config(mut self, input: crate::types::LambdaDataSourceConfig) -> Self {
        self.inner = self.inner.lambda_config(input);
        self
    }
    /// <p>The new Lambda configuration.</p>
    pub fn set_lambda_config(mut self, input: ::std::option::Option<crate::types::LambdaDataSourceConfig>) -> Self {
        self.inner = self.inner.set_lambda_config(input);
        self
    }
    /// <p>The new Lambda configuration.</p>
    pub fn get_lambda_config(&self) -> &::std::option::Option<crate::types::LambdaDataSourceConfig> {
        self.inner.get_lambda_config()
    }
    /// <p>The new OpenSearch configuration.</p>
    /// <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. Instead, use <code>UpdateDataSourceRequest$openSearchServiceConfig</code> to update an OpenSearch data source.</p>
    pub fn elasticsearch_config(mut self, input: crate::types::ElasticsearchDataSourceConfig) -> Self {
        self.inner = self.inner.elasticsearch_config(input);
        self
    }
    /// <p>The new OpenSearch configuration.</p>
    /// <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. Instead, use <code>UpdateDataSourceRequest$openSearchServiceConfig</code> to update an OpenSearch data source.</p>
    pub fn set_elasticsearch_config(mut self, input: ::std::option::Option<crate::types::ElasticsearchDataSourceConfig>) -> Self {
        self.inner = self.inner.set_elasticsearch_config(input);
        self
    }
    /// <p>The new OpenSearch configuration.</p>
    /// <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. Instead, use <code>UpdateDataSourceRequest$openSearchServiceConfig</code> to update an OpenSearch data source.</p>
    pub fn get_elasticsearch_config(&self) -> &::std::option::Option<crate::types::ElasticsearchDataSourceConfig> {
        self.inner.get_elasticsearch_config()
    }
    /// <p>The new OpenSearch configuration.</p>
    pub fn open_search_service_config(mut self, input: crate::types::OpenSearchServiceDataSourceConfig) -> Self {
        self.inner = self.inner.open_search_service_config(input);
        self
    }
    /// <p>The new OpenSearch configuration.</p>
    pub fn set_open_search_service_config(mut self, input: ::std::option::Option<crate::types::OpenSearchServiceDataSourceConfig>) -> Self {
        self.inner = self.inner.set_open_search_service_config(input);
        self
    }
    /// <p>The new OpenSearch configuration.</p>
    pub fn get_open_search_service_config(&self) -> &::std::option::Option<crate::types::OpenSearchServiceDataSourceConfig> {
        self.inner.get_open_search_service_config()
    }
    /// <p>The new HTTP endpoint configuration.</p>
    pub fn http_config(mut self, input: crate::types::HttpDataSourceConfig) -> Self {
        self.inner = self.inner.http_config(input);
        self
    }
    /// <p>The new HTTP endpoint configuration.</p>
    pub fn set_http_config(mut self, input: ::std::option::Option<crate::types::HttpDataSourceConfig>) -> Self {
        self.inner = self.inner.set_http_config(input);
        self
    }
    /// <p>The new HTTP endpoint configuration.</p>
    pub fn get_http_config(&self) -> &::std::option::Option<crate::types::HttpDataSourceConfig> {
        self.inner.get_http_config()
    }
    /// <p>The new relational database configuration.</p>
    pub fn relational_database_config(mut self, input: crate::types::RelationalDatabaseDataSourceConfig) -> Self {
        self.inner = self.inner.relational_database_config(input);
        self
    }
    /// <p>The new relational database configuration.</p>
    pub fn set_relational_database_config(mut self, input: ::std::option::Option<crate::types::RelationalDatabaseDataSourceConfig>) -> Self {
        self.inner = self.inner.set_relational_database_config(input);
        self
    }
    /// <p>The new relational database configuration.</p>
    pub fn get_relational_database_config(&self) -> &::std::option::Option<crate::types::RelationalDatabaseDataSourceConfig> {
        self.inner.get_relational_database_config()
    }
    /// <p>The new Amazon EventBridge settings.</p>
    pub fn event_bridge_config(mut self, input: crate::types::EventBridgeDataSourceConfig) -> Self {
        self.inner = self.inner.event_bridge_config(input);
        self
    }
    /// <p>The new Amazon EventBridge settings.</p>
    pub fn set_event_bridge_config(mut self, input: ::std::option::Option<crate::types::EventBridgeDataSourceConfig>) -> Self {
        self.inner = self.inner.set_event_bridge_config(input);
        self
    }
    /// <p>The new Amazon EventBridge settings.</p>
    pub fn get_event_bridge_config(&self) -> &::std::option::Option<crate::types::EventBridgeDataSourceConfig> {
        self.inner.get_event_bridge_config()
    }
    /// <p>Enables or disables enhanced data source metrics for specified data sources. Note that <code>metricsConfig</code> won't be used unless the <code>dataSourceLevelMetricsBehavior</code> value is set to <code>PER_DATA_SOURCE_METRICS</code>. If the <code>dataSourceLevelMetricsBehavior</code> is set to <code>FULL_REQUEST_DATA_SOURCE_METRICS</code> instead, <code>metricsConfig</code> will be ignored. However, you can still set its value.</p>
    /// <p><code>metricsConfig</code> can be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn metrics_config(mut self, input: crate::types::DataSourceLevelMetricsConfig) -> Self {
        self.inner = self.inner.metrics_config(input);
        self
    }
    /// <p>Enables or disables enhanced data source metrics for specified data sources. Note that <code>metricsConfig</code> won't be used unless the <code>dataSourceLevelMetricsBehavior</code> value is set to <code>PER_DATA_SOURCE_METRICS</code>. If the <code>dataSourceLevelMetricsBehavior</code> is set to <code>FULL_REQUEST_DATA_SOURCE_METRICS</code> instead, <code>metricsConfig</code> will be ignored. However, you can still set its value.</p>
    /// <p><code>metricsConfig</code> can be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn set_metrics_config(mut self, input: ::std::option::Option<crate::types::DataSourceLevelMetricsConfig>) -> Self {
        self.inner = self.inner.set_metrics_config(input);
        self
    }
    /// <p>Enables or disables enhanced data source metrics for specified data sources. Note that <code>metricsConfig</code> won't be used unless the <code>dataSourceLevelMetricsBehavior</code> value is set to <code>PER_DATA_SOURCE_METRICS</code>. If the <code>dataSourceLevelMetricsBehavior</code> is set to <code>FULL_REQUEST_DATA_SOURCE_METRICS</code> instead, <code>metricsConfig</code> will be ignored. However, you can still set its value.</p>
    /// <p><code>metricsConfig</code> can be <code>ENABLED</code> or <code>DISABLED</code>.</p>
    pub fn get_metrics_config(&self) -> &::std::option::Option<crate::types::DataSourceLevelMetricsConfig> {
        self.inner.get_metrics_config()
    }
}
