// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_graphql_api::_create_graphql_api_output::CreateGraphqlApiOutputBuilder;

pub use crate::operation::create_graphql_api::_create_graphql_api_input::CreateGraphqlApiInputBuilder;

/// Fluent builder constructing a request to `CreateGraphqlApi`.
///
/// <p>Creates a <code>GraphqlApi</code> object.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateGraphqlApiFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_graphql_api::builders::CreateGraphqlApiInputBuilder,
}
impl CreateGraphqlApiFluentBuilder {
    /// Creates a new `CreateGraphqlApi`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_graphql_api::CreateGraphqlApi,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_graphql_api::CreateGraphqlApiError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_graphql_api::CreateGraphqlApiOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_graphql_api::CreateGraphqlApiError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A user-supplied name for the <code>GraphqlApi</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A user-supplied name for the <code>GraphqlApi</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The Amazon CloudWatch Logs configuration.</p>
    pub fn log_config(mut self, input: crate::types::LogConfig) -> Self {
        self.inner = self.inner.log_config(input);
        self
    }
    /// <p>The Amazon CloudWatch Logs configuration.</p>
    pub fn set_log_config(mut self, input: std::option::Option<crate::types::LogConfig>) -> Self {
        self.inner = self.inner.set_log_config(input);
        self
    }
    /// <p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.inner = self.inner.authentication_type(input);
        self
    }
    /// <p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>
    pub fn set_authentication_type(
        mut self,
        input: std::option::Option<crate::types::AuthenticationType>,
    ) -> Self {
        self.inner = self.inner.set_authentication_type(input);
        self
    }
    /// <p>The Amazon Cognito user pool configuration.</p>
    pub fn user_pool_config(mut self, input: crate::types::UserPoolConfig) -> Self {
        self.inner = self.inner.user_pool_config(input);
        self
    }
    /// <p>The Amazon Cognito user pool configuration.</p>
    pub fn set_user_pool_config(
        mut self,
        input: std::option::Option<crate::types::UserPoolConfig>,
    ) -> Self {
        self.inner = self.inner.set_user_pool_config(input);
        self
    }
    /// <p>The OIDC configuration.</p>
    pub fn open_id_connect_config(mut self, input: crate::types::OpenIdConnectConfig) -> Self {
        self.inner = self.inner.open_id_connect_config(input);
        self
    }
    /// <p>The OIDC configuration.</p>
    pub fn set_open_id_connect_config(
        mut self,
        input: std::option::Option<crate::types::OpenIdConnectConfig>,
    ) -> Self {
        self.inner = self.inner.set_open_id_connect_config(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A <code>TagMap</code> object.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A <code>TagMap</code> object.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// Appends an item to `additionalAuthenticationProviders`.
    ///
    /// To override the contents of this collection use [`set_additional_authentication_providers`](Self::set_additional_authentication_providers).
    ///
    /// <p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>
    pub fn additional_authentication_providers(
        mut self,
        input: crate::types::AdditionalAuthenticationProvider,
    ) -> Self {
        self.inner = self.inner.additional_authentication_providers(input);
        self
    }
    /// <p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>
    pub fn set_additional_authentication_providers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AdditionalAuthenticationProvider>>,
    ) -> Self {
        self.inner = self.inner.set_additional_authentication_providers(input);
        self
    }
    /// <p>A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.</p>
    pub fn xray_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.xray_enabled(input);
        self
    }
    /// <p>A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.</p>
    pub fn set_xray_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_xray_enabled(input);
        self
    }
    /// <p>Configuration for Lambda function authorization.</p>
    pub fn lambda_authorizer_config(mut self, input: crate::types::LambdaAuthorizerConfig) -> Self {
        self.inner = self.inner.lambda_authorizer_config(input);
        self
    }
    /// <p>Configuration for Lambda function authorization.</p>
    pub fn set_lambda_authorizer_config(
        mut self,
        input: std::option::Option<crate::types::LambdaAuthorizerConfig>,
    ) -> Self {
        self.inner = self.inner.set_lambda_authorizer_config(input);
        self
    }
}
