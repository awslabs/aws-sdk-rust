// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateGraphqlApiInput {
    /// <p>A user-supplied name for the <code>GraphqlApi</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon CloudWatch Logs configuration.</p>
    pub log_config: ::std::option::Option<crate::types::LogConfig>,
    /// <p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>
    pub authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    /// <p>The Amazon Cognito user pool configuration.</p>
    pub user_pool_config: ::std::option::Option<crate::types::UserPoolConfig>,
    /// <p>The OIDC configuration.</p>
    pub open_id_connect_config: ::std::option::Option<crate::types::OpenIdConnectConfig>,
    /// <p>A <code>TagMap</code> object.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>
    pub additional_authentication_providers: ::std::option::Option<::std::vec::Vec<crate::types::AdditionalAuthenticationProvider>>,
    /// <p>A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.</p>
    pub xray_enabled: ::std::option::Option<bool>,
    /// <p>Configuration for Lambda function authorization.</p>
    pub lambda_authorizer_config: ::std::option::Option<crate::types::LambdaAuthorizerConfig>,
    /// <p>Sets the value of the GraphQL API to public (<code>GLOBAL</code>) or private (<code>PRIVATE</code>). If no value is provided, the visibility will be set to <code>GLOBAL</code> by default. This value cannot be changed once the API has been created.</p>
    pub visibility: ::std::option::Option<crate::types::GraphQlApiVisibility>,
    /// <p>The value that indicates whether the GraphQL API is a standard API (<code>GRAPHQL</code>) or merged API (<code>MERGED</code>).</p>
    pub api_type: ::std::option::Option<crate::types::GraphQlApiType>,
    /// <p>The Identity and Access Management service role ARN for a merged API. The AppSync service assumes this role on behalf of the Merged API to validate access to source APIs at runtime and to prompt the <code>AUTO_MERGE</code> to update the merged API endpoint with the source API changes automatically.</p>
    pub merged_api_execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The owner contact information for an API resource.</p>
    /// <p>This field accepts any string input with a length of 0 - 256 characters.</p>
    pub owner_contact: ::std::option::Option<::std::string::String>,
}
impl CreateGraphqlApiInput {
    /// <p>A user-supplied name for the <code>GraphqlApi</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon CloudWatch Logs configuration.</p>
    pub fn log_config(&self) -> ::std::option::Option<&crate::types::LogConfig> {
        self.log_config.as_ref()
    }
    /// <p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>
    pub fn authentication_type(&self) -> ::std::option::Option<&crate::types::AuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>The Amazon Cognito user pool configuration.</p>
    pub fn user_pool_config(&self) -> ::std::option::Option<&crate::types::UserPoolConfig> {
        self.user_pool_config.as_ref()
    }
    /// <p>The OIDC configuration.</p>
    pub fn open_id_connect_config(&self) -> ::std::option::Option<&crate::types::OpenIdConnectConfig> {
        self.open_id_connect_config.as_ref()
    }
    /// <p>A <code>TagMap</code> object.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_authentication_providers.is_none()`.
    pub fn additional_authentication_providers(&self) -> &[crate::types::AdditionalAuthenticationProvider] {
        self.additional_authentication_providers.as_deref().unwrap_or_default()
    }
    /// <p>A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.</p>
    pub fn xray_enabled(&self) -> ::std::option::Option<bool> {
        self.xray_enabled
    }
    /// <p>Configuration for Lambda function authorization.</p>
    pub fn lambda_authorizer_config(&self) -> ::std::option::Option<&crate::types::LambdaAuthorizerConfig> {
        self.lambda_authorizer_config.as_ref()
    }
    /// <p>Sets the value of the GraphQL API to public (<code>GLOBAL</code>) or private (<code>PRIVATE</code>). If no value is provided, the visibility will be set to <code>GLOBAL</code> by default. This value cannot be changed once the API has been created.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::GraphQlApiVisibility> {
        self.visibility.as_ref()
    }
    /// <p>The value that indicates whether the GraphQL API is a standard API (<code>GRAPHQL</code>) or merged API (<code>MERGED</code>).</p>
    pub fn api_type(&self) -> ::std::option::Option<&crate::types::GraphQlApiType> {
        self.api_type.as_ref()
    }
    /// <p>The Identity and Access Management service role ARN for a merged API. The AppSync service assumes this role on behalf of the Merged API to validate access to source APIs at runtime and to prompt the <code>AUTO_MERGE</code> to update the merged API endpoint with the source API changes automatically.</p>
    pub fn merged_api_execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.merged_api_execution_role_arn.as_deref()
    }
    /// <p>The owner contact information for an API resource.</p>
    /// <p>This field accepts any string input with a length of 0 - 256 characters.</p>
    pub fn owner_contact(&self) -> ::std::option::Option<&str> {
        self.owner_contact.as_deref()
    }
}
impl CreateGraphqlApiInput {
    /// Creates a new builder-style object to manufacture [`CreateGraphqlApiInput`](crate::operation::create_graphql_api::CreateGraphqlApiInput).
    pub fn builder() -> crate::operation::create_graphql_api::builders::CreateGraphqlApiInputBuilder {
        crate::operation::create_graphql_api::builders::CreateGraphqlApiInputBuilder::default()
    }
}

/// A builder for [`CreateGraphqlApiInput`](crate::operation::create_graphql_api::CreateGraphqlApiInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateGraphqlApiInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) log_config: ::std::option::Option<crate::types::LogConfig>,
    pub(crate) authentication_type: ::std::option::Option<crate::types::AuthenticationType>,
    pub(crate) user_pool_config: ::std::option::Option<crate::types::UserPoolConfig>,
    pub(crate) open_id_connect_config: ::std::option::Option<crate::types::OpenIdConnectConfig>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) additional_authentication_providers: ::std::option::Option<::std::vec::Vec<crate::types::AdditionalAuthenticationProvider>>,
    pub(crate) xray_enabled: ::std::option::Option<bool>,
    pub(crate) lambda_authorizer_config: ::std::option::Option<crate::types::LambdaAuthorizerConfig>,
    pub(crate) visibility: ::std::option::Option<crate::types::GraphQlApiVisibility>,
    pub(crate) api_type: ::std::option::Option<crate::types::GraphQlApiType>,
    pub(crate) merged_api_execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner_contact: ::std::option::Option<::std::string::String>,
}
impl CreateGraphqlApiInputBuilder {
    /// <p>A user-supplied name for the <code>GraphqlApi</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-supplied name for the <code>GraphqlApi</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A user-supplied name for the <code>GraphqlApi</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon CloudWatch Logs configuration.</p>
    pub fn log_config(mut self, input: crate::types::LogConfig) -> Self {
        self.log_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon CloudWatch Logs configuration.</p>
    pub fn set_log_config(mut self, input: ::std::option::Option<crate::types::LogConfig>) -> Self {
        self.log_config = input;
        self
    }
    /// <p>The Amazon CloudWatch Logs configuration.</p>
    pub fn get_log_config(&self) -> &::std::option::Option<crate::types::LogConfig> {
        &self.log_config
    }
    /// <p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>
    /// This field is required.
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::AuthenticationType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::AuthenticationType> {
        &self.authentication_type
    }
    /// <p>The Amazon Cognito user pool configuration.</p>
    pub fn user_pool_config(mut self, input: crate::types::UserPoolConfig) -> Self {
        self.user_pool_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Cognito user pool configuration.</p>
    pub fn set_user_pool_config(mut self, input: ::std::option::Option<crate::types::UserPoolConfig>) -> Self {
        self.user_pool_config = input;
        self
    }
    /// <p>The Amazon Cognito user pool configuration.</p>
    pub fn get_user_pool_config(&self) -> &::std::option::Option<crate::types::UserPoolConfig> {
        &self.user_pool_config
    }
    /// <p>The OIDC configuration.</p>
    pub fn open_id_connect_config(mut self, input: crate::types::OpenIdConnectConfig) -> Self {
        self.open_id_connect_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The OIDC configuration.</p>
    pub fn set_open_id_connect_config(mut self, input: ::std::option::Option<crate::types::OpenIdConnectConfig>) -> Self {
        self.open_id_connect_config = input;
        self
    }
    /// <p>The OIDC configuration.</p>
    pub fn get_open_id_connect_config(&self) -> &::std::option::Option<crate::types::OpenIdConnectConfig> {
        &self.open_id_connect_config
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A <code>TagMap</code> object.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A <code>TagMap</code> object.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A <code>TagMap</code> object.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Appends an item to `additional_authentication_providers`.
    ///
    /// To override the contents of this collection use [`set_additional_authentication_providers`](Self::set_additional_authentication_providers).
    ///
    /// <p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>
    pub fn additional_authentication_providers(mut self, input: crate::types::AdditionalAuthenticationProvider) -> Self {
        let mut v = self.additional_authentication_providers.unwrap_or_default();
        v.push(input);
        self.additional_authentication_providers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>
    pub fn set_additional_authentication_providers(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AdditionalAuthenticationProvider>>,
    ) -> Self {
        self.additional_authentication_providers = input;
        self
    }
    /// <p>A list of additional authentication providers for the <code>GraphqlApi</code> API.</p>
    pub fn get_additional_authentication_providers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdditionalAuthenticationProvider>> {
        &self.additional_authentication_providers
    }
    /// <p>A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.</p>
    pub fn xray_enabled(mut self, input: bool) -> Self {
        self.xray_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.</p>
    pub fn set_xray_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.xray_enabled = input;
        self
    }
    /// <p>A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.</p>
    pub fn get_xray_enabled(&self) -> &::std::option::Option<bool> {
        &self.xray_enabled
    }
    /// <p>Configuration for Lambda function authorization.</p>
    pub fn lambda_authorizer_config(mut self, input: crate::types::LambdaAuthorizerConfig) -> Self {
        self.lambda_authorizer_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for Lambda function authorization.</p>
    pub fn set_lambda_authorizer_config(mut self, input: ::std::option::Option<crate::types::LambdaAuthorizerConfig>) -> Self {
        self.lambda_authorizer_config = input;
        self
    }
    /// <p>Configuration for Lambda function authorization.</p>
    pub fn get_lambda_authorizer_config(&self) -> &::std::option::Option<crate::types::LambdaAuthorizerConfig> {
        &self.lambda_authorizer_config
    }
    /// <p>Sets the value of the GraphQL API to public (<code>GLOBAL</code>) or private (<code>PRIVATE</code>). If no value is provided, the visibility will be set to <code>GLOBAL</code> by default. This value cannot be changed once the API has been created.</p>
    pub fn visibility(mut self, input: crate::types::GraphQlApiVisibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the value of the GraphQL API to public (<code>GLOBAL</code>) or private (<code>PRIVATE</code>). If no value is provided, the visibility will be set to <code>GLOBAL</code> by default. This value cannot be changed once the API has been created.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::GraphQlApiVisibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Sets the value of the GraphQL API to public (<code>GLOBAL</code>) or private (<code>PRIVATE</code>). If no value is provided, the visibility will be set to <code>GLOBAL</code> by default. This value cannot be changed once the API has been created.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::GraphQlApiVisibility> {
        &self.visibility
    }
    /// <p>The value that indicates whether the GraphQL API is a standard API (<code>GRAPHQL</code>) or merged API (<code>MERGED</code>).</p>
    pub fn api_type(mut self, input: crate::types::GraphQlApiType) -> Self {
        self.api_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value that indicates whether the GraphQL API is a standard API (<code>GRAPHQL</code>) or merged API (<code>MERGED</code>).</p>
    pub fn set_api_type(mut self, input: ::std::option::Option<crate::types::GraphQlApiType>) -> Self {
        self.api_type = input;
        self
    }
    /// <p>The value that indicates whether the GraphQL API is a standard API (<code>GRAPHQL</code>) or merged API (<code>MERGED</code>).</p>
    pub fn get_api_type(&self) -> &::std::option::Option<crate::types::GraphQlApiType> {
        &self.api_type
    }
    /// <p>The Identity and Access Management service role ARN for a merged API. The AppSync service assumes this role on behalf of the Merged API to validate access to source APIs at runtime and to prompt the <code>AUTO_MERGE</code> to update the merged API endpoint with the source API changes automatically.</p>
    pub fn merged_api_execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.merged_api_execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Identity and Access Management service role ARN for a merged API. The AppSync service assumes this role on behalf of the Merged API to validate access to source APIs at runtime and to prompt the <code>AUTO_MERGE</code> to update the merged API endpoint with the source API changes automatically.</p>
    pub fn set_merged_api_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.merged_api_execution_role_arn = input;
        self
    }
    /// <p>The Identity and Access Management service role ARN for a merged API. The AppSync service assumes this role on behalf of the Merged API to validate access to source APIs at runtime and to prompt the <code>AUTO_MERGE</code> to update the merged API endpoint with the source API changes automatically.</p>
    pub fn get_merged_api_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.merged_api_execution_role_arn
    }
    /// <p>The owner contact information for an API resource.</p>
    /// <p>This field accepts any string input with a length of 0 - 256 characters.</p>
    pub fn owner_contact(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_contact = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner contact information for an API resource.</p>
    /// <p>This field accepts any string input with a length of 0 - 256 characters.</p>
    pub fn set_owner_contact(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_contact = input;
        self
    }
    /// <p>The owner contact information for an API resource.</p>
    /// <p>This field accepts any string input with a length of 0 - 256 characters.</p>
    pub fn get_owner_contact(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_contact
    }
    /// Consumes the builder and constructs a [`CreateGraphqlApiInput`](crate::operation::create_graphql_api::CreateGraphqlApiInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_graphql_api::CreateGraphqlApiInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_graphql_api::CreateGraphqlApiInput {
            name: self.name,
            log_config: self.log_config,
            authentication_type: self.authentication_type,
            user_pool_config: self.user_pool_config,
            open_id_connect_config: self.open_id_connect_config,
            tags: self.tags,
            additional_authentication_providers: self.additional_authentication_providers,
            xray_enabled: self.xray_enabled,
            lambda_authorizer_config: self.lambda_authorizer_config,
            visibility: self.visibility,
            api_type: self.api_type,
            merged_api_execution_role_arn: self.merged_api_execution_role_arn,
            owner_contact: self.owner_contact,
        })
    }
}
