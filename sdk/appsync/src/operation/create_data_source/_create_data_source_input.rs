// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDataSourceInput {
    /// <p>The API ID for the GraphQL API for the <code>DataSource</code>.</p>
    pub api_id: ::std::option::Option<::std::string::String>,
    /// <p>A user-supplied name for the <code>DataSource</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the <code>DataSource</code>.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of the <code>DataSource</code>.</p>
    pub r#type: ::std::option::Option<crate::types::DataSourceType>,
    /// <p>The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.</p>
    pub service_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Amazon DynamoDB settings.</p>
    pub dynamodb_config: ::std::option::Option<crate::types::DynamodbDataSourceConfig>,
    /// <p>Lambda settings.</p>
    pub lambda_config: ::std::option::Option<crate::types::LambdaDataSourceConfig>,
    /// <p>Amazon OpenSearch Service settings.</p>
    /// <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <code>CreateDataSourceRequest$openSearchServiceConfig</code> to create an OpenSearch data source.</p>
    pub elasticsearch_config: ::std::option::Option<crate::types::ElasticsearchDataSourceConfig>,
    /// <p>Amazon OpenSearch Service settings.</p>
    pub open_search_service_config: ::std::option::Option<crate::types::OpenSearchServiceDataSourceConfig>,
    /// <p>HTTP endpoint settings.</p>
    pub http_config: ::std::option::Option<crate::types::HttpDataSourceConfig>,
    /// <p>Relational database settings.</p>
    pub relational_database_config: ::std::option::Option<crate::types::RelationalDatabaseDataSourceConfig>,
    /// <p>Amazon EventBridge settings.</p>
    pub event_bridge_config: ::std::option::Option<crate::types::EventBridgeDataSourceConfig>,
}
impl CreateDataSourceInput {
    /// <p>The API ID for the GraphQL API for the <code>DataSource</code>.</p>
    pub fn api_id(&self) -> ::std::option::Option<&str> {
        self.api_id.as_deref()
    }
    /// <p>A user-supplied name for the <code>DataSource</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the <code>DataSource</code>.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of the <code>DataSource</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::DataSourceType> {
        self.r#type.as_ref()
    }
    /// <p>The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.</p>
    pub fn service_role_arn(&self) -> ::std::option::Option<&str> {
        self.service_role_arn.as_deref()
    }
    /// <p>Amazon DynamoDB settings.</p>
    pub fn dynamodb_config(&self) -> ::std::option::Option<&crate::types::DynamodbDataSourceConfig> {
        self.dynamodb_config.as_ref()
    }
    /// <p>Lambda settings.</p>
    pub fn lambda_config(&self) -> ::std::option::Option<&crate::types::LambdaDataSourceConfig> {
        self.lambda_config.as_ref()
    }
    /// <p>Amazon OpenSearch Service settings.</p>
    /// <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <code>CreateDataSourceRequest$openSearchServiceConfig</code> to create an OpenSearch data source.</p>
    pub fn elasticsearch_config(&self) -> ::std::option::Option<&crate::types::ElasticsearchDataSourceConfig> {
        self.elasticsearch_config.as_ref()
    }
    /// <p>Amazon OpenSearch Service settings.</p>
    pub fn open_search_service_config(&self) -> ::std::option::Option<&crate::types::OpenSearchServiceDataSourceConfig> {
        self.open_search_service_config.as_ref()
    }
    /// <p>HTTP endpoint settings.</p>
    pub fn http_config(&self) -> ::std::option::Option<&crate::types::HttpDataSourceConfig> {
        self.http_config.as_ref()
    }
    /// <p>Relational database settings.</p>
    pub fn relational_database_config(&self) -> ::std::option::Option<&crate::types::RelationalDatabaseDataSourceConfig> {
        self.relational_database_config.as_ref()
    }
    /// <p>Amazon EventBridge settings.</p>
    pub fn event_bridge_config(&self) -> ::std::option::Option<&crate::types::EventBridgeDataSourceConfig> {
        self.event_bridge_config.as_ref()
    }
}
impl CreateDataSourceInput {
    /// Creates a new builder-style object to manufacture [`CreateDataSourceInput`](crate::operation::create_data_source::CreateDataSourceInput).
    pub fn builder() -> crate::operation::create_data_source::builders::CreateDataSourceInputBuilder {
        crate::operation::create_data_source::builders::CreateDataSourceInputBuilder::default()
    }
}

/// A builder for [`CreateDataSourceInput`](crate::operation::create_data_source::CreateDataSourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDataSourceInputBuilder {
    pub(crate) api_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DataSourceType>,
    pub(crate) service_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dynamodb_config: ::std::option::Option<crate::types::DynamodbDataSourceConfig>,
    pub(crate) lambda_config: ::std::option::Option<crate::types::LambdaDataSourceConfig>,
    pub(crate) elasticsearch_config: ::std::option::Option<crate::types::ElasticsearchDataSourceConfig>,
    pub(crate) open_search_service_config: ::std::option::Option<crate::types::OpenSearchServiceDataSourceConfig>,
    pub(crate) http_config: ::std::option::Option<crate::types::HttpDataSourceConfig>,
    pub(crate) relational_database_config: ::std::option::Option<crate::types::RelationalDatabaseDataSourceConfig>,
    pub(crate) event_bridge_config: ::std::option::Option<crate::types::EventBridgeDataSourceConfig>,
}
impl CreateDataSourceInputBuilder {
    /// <p>The API ID for the GraphQL API for the <code>DataSource</code>.</p>
    /// This field is required.
    pub fn api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The API ID for the GraphQL API for the <code>DataSource</code>.</p>
    pub fn set_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_id = input;
        self
    }
    /// <p>The API ID for the GraphQL API for the <code>DataSource</code>.</p>
    pub fn get_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_id
    }
    /// <p>A user-supplied name for the <code>DataSource</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-supplied name for the <code>DataSource</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A user-supplied name for the <code>DataSource</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the <code>DataSource</code>.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the <code>DataSource</code>.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the <code>DataSource</code>.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of the <code>DataSource</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DataSourceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the <code>DataSource</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DataSourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the <code>DataSource</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DataSourceType> {
        &self.r#type
    }
    /// <p>The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.</p>
    pub fn service_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.</p>
    pub fn set_service_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_role_arn = input;
        self
    }
    /// <p>The Identity and Access Management (IAM) service role Amazon Resource Name (ARN) for the data source. The system assumes this role when accessing the data source.</p>
    pub fn get_service_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_role_arn
    }
    /// <p>Amazon DynamoDB settings.</p>
    pub fn dynamodb_config(mut self, input: crate::types::DynamodbDataSourceConfig) -> Self {
        self.dynamodb_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Amazon DynamoDB settings.</p>
    pub fn set_dynamodb_config(mut self, input: ::std::option::Option<crate::types::DynamodbDataSourceConfig>) -> Self {
        self.dynamodb_config = input;
        self
    }
    /// <p>Amazon DynamoDB settings.</p>
    pub fn get_dynamodb_config(&self) -> &::std::option::Option<crate::types::DynamodbDataSourceConfig> {
        &self.dynamodb_config
    }
    /// <p>Lambda settings.</p>
    pub fn lambda_config(mut self, input: crate::types::LambdaDataSourceConfig) -> Self {
        self.lambda_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lambda settings.</p>
    pub fn set_lambda_config(mut self, input: ::std::option::Option<crate::types::LambdaDataSourceConfig>) -> Self {
        self.lambda_config = input;
        self
    }
    /// <p>Lambda settings.</p>
    pub fn get_lambda_config(&self) -> &::std::option::Option<crate::types::LambdaDataSourceConfig> {
        &self.lambda_config
    }
    /// <p>Amazon OpenSearch Service settings.</p>
    /// <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <code>CreateDataSourceRequest$openSearchServiceConfig</code> to create an OpenSearch data source.</p>
    pub fn elasticsearch_config(mut self, input: crate::types::ElasticsearchDataSourceConfig) -> Self {
        self.elasticsearch_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Amazon OpenSearch Service settings.</p>
    /// <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <code>CreateDataSourceRequest$openSearchServiceConfig</code> to create an OpenSearch data source.</p>
    pub fn set_elasticsearch_config(mut self, input: ::std::option::Option<crate::types::ElasticsearchDataSourceConfig>) -> Self {
        self.elasticsearch_config = input;
        self
    }
    /// <p>Amazon OpenSearch Service settings.</p>
    /// <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This configuration is deprecated. For new data sources, use <code>CreateDataSourceRequest$openSearchServiceConfig</code> to create an OpenSearch data source.</p>
    pub fn get_elasticsearch_config(&self) -> &::std::option::Option<crate::types::ElasticsearchDataSourceConfig> {
        &self.elasticsearch_config
    }
    /// <p>Amazon OpenSearch Service settings.</p>
    pub fn open_search_service_config(mut self, input: crate::types::OpenSearchServiceDataSourceConfig) -> Self {
        self.open_search_service_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Amazon OpenSearch Service settings.</p>
    pub fn set_open_search_service_config(mut self, input: ::std::option::Option<crate::types::OpenSearchServiceDataSourceConfig>) -> Self {
        self.open_search_service_config = input;
        self
    }
    /// <p>Amazon OpenSearch Service settings.</p>
    pub fn get_open_search_service_config(&self) -> &::std::option::Option<crate::types::OpenSearchServiceDataSourceConfig> {
        &self.open_search_service_config
    }
    /// <p>HTTP endpoint settings.</p>
    pub fn http_config(mut self, input: crate::types::HttpDataSourceConfig) -> Self {
        self.http_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>HTTP endpoint settings.</p>
    pub fn set_http_config(mut self, input: ::std::option::Option<crate::types::HttpDataSourceConfig>) -> Self {
        self.http_config = input;
        self
    }
    /// <p>HTTP endpoint settings.</p>
    pub fn get_http_config(&self) -> &::std::option::Option<crate::types::HttpDataSourceConfig> {
        &self.http_config
    }
    /// <p>Relational database settings.</p>
    pub fn relational_database_config(mut self, input: crate::types::RelationalDatabaseDataSourceConfig) -> Self {
        self.relational_database_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Relational database settings.</p>
    pub fn set_relational_database_config(mut self, input: ::std::option::Option<crate::types::RelationalDatabaseDataSourceConfig>) -> Self {
        self.relational_database_config = input;
        self
    }
    /// <p>Relational database settings.</p>
    pub fn get_relational_database_config(&self) -> &::std::option::Option<crate::types::RelationalDatabaseDataSourceConfig> {
        &self.relational_database_config
    }
    /// <p>Amazon EventBridge settings.</p>
    pub fn event_bridge_config(mut self, input: crate::types::EventBridgeDataSourceConfig) -> Self {
        self.event_bridge_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Amazon EventBridge settings.</p>
    pub fn set_event_bridge_config(mut self, input: ::std::option::Option<crate::types::EventBridgeDataSourceConfig>) -> Self {
        self.event_bridge_config = input;
        self
    }
    /// <p>Amazon EventBridge settings.</p>
    pub fn get_event_bridge_config(&self) -> &::std::option::Option<crate::types::EventBridgeDataSourceConfig> {
        &self.event_bridge_config
    }
    /// Consumes the builder and constructs a [`CreateDataSourceInput`](crate::operation::create_data_source::CreateDataSourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_data_source::CreateDataSourceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_data_source::CreateDataSourceInput {
            api_id: self.api_id,
            name: self.name,
            description: self.description,
            r#type: self.r#type,
            service_role_arn: self.service_role_arn,
            dynamodb_config: self.dynamodb_config,
            lambda_config: self.lambda_config,
            elasticsearch_config: self.elasticsearch_config,
            open_search_service_config: self.open_search_service_config,
            http_config: self.http_config,
            relational_database_config: self.relational_database_config,
            event_bridge_config: self.event_bridge_config,
        })
    }
}
