// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EvaluateMappingTemplateInput {
    /// <p>The mapping template; this can be a request or response template. A <code>template</code> is required for this action.</p>
    #[doc(hidden)]
    pub template: std::option::Option<std::string::String>,
    /// <p>The map that holds all of the contextual information for your resolver invocation. A <code>context</code> is required for this action.</p>
    #[doc(hidden)]
    pub context: std::option::Option<std::string::String>,
}
impl EvaluateMappingTemplateInput {
    /// <p>The mapping template; this can be a request or response template. A <code>template</code> is required for this action.</p>
    pub fn template(&self) -> std::option::Option<&str> {
        self.template.as_deref()
    }
    /// <p>The map that holds all of the contextual information for your resolver invocation. A <code>context</code> is required for this action.</p>
    pub fn context(&self) -> std::option::Option<&str> {
        self.context.as_deref()
    }
}
impl EvaluateMappingTemplateInput {
    /// Creates a new builder-style object to manufacture [`EvaluateMappingTemplateInput`](crate::operation::evaluate_mapping_template::EvaluateMappingTemplateInput).
    pub fn builder(
    ) -> crate::operation::evaluate_mapping_template::builders::EvaluateMappingTemplateInputBuilder
    {
        crate::operation::evaluate_mapping_template::builders::EvaluateMappingTemplateInputBuilder::default()
    }
}

/// A builder for [`EvaluateMappingTemplateInput`](crate::operation::evaluate_mapping_template::EvaluateMappingTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EvaluateMappingTemplateInputBuilder {
    pub(crate) template: std::option::Option<std::string::String>,
    pub(crate) context: std::option::Option<std::string::String>,
}
impl EvaluateMappingTemplateInputBuilder {
    /// <p>The mapping template; this can be a request or response template. A <code>template</code> is required for this action.</p>
    pub fn template(mut self, input: impl Into<std::string::String>) -> Self {
        self.template = Some(input.into());
        self
    }
    /// <p>The mapping template; this can be a request or response template. A <code>template</code> is required for this action.</p>
    pub fn set_template(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template = input;
        self
    }
    /// <p>The map that holds all of the contextual information for your resolver invocation. A <code>context</code> is required for this action.</p>
    pub fn context(mut self, input: impl Into<std::string::String>) -> Self {
        self.context = Some(input.into());
        self
    }
    /// <p>The map that holds all of the contextual information for your resolver invocation. A <code>context</code> is required for this action.</p>
    pub fn set_context(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.context = input;
        self
    }
    /// Consumes the builder and constructs a [`EvaluateMappingTemplateInput`](crate::operation::evaluate_mapping_template::EvaluateMappingTemplateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::evaluate_mapping_template::EvaluateMappingTemplateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::evaluate_mapping_template::EvaluateMappingTemplateInput {
                template: self.template,
                context: self.context,
            },
        )
    }
}
