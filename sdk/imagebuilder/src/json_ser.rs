// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_cancel_image_creation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelImageCreationInput,
) {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1);
    }
    if let Some(var_2) = &input.image_build_version_arn {
        object.key("imageBuildVersionArn").string(var_2);
    }
}

pub fn serialize_structure_create_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateComponentInput,
) {
    if let Some(var_3) = &input.change_description {
        object.key("changeDescription").string(var_3);
    }
    if let Some(var_4) = &input.client_token {
        object.key("clientToken").string(var_4);
    }
    if let Some(var_5) = &input.data {
        object.key("data").string(var_5);
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6);
    }
    if let Some(var_7) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_7);
    }
    if let Some(var_8) = &input.name {
        object.key("name").string(var_8);
    }
    if let Some(var_9) = &input.platform {
        object.key("platform").string(var_9.as_str());
    }
    if let Some(var_10) = &input.semantic_version {
        object.key("semanticVersion").string(var_10);
    }
    if let Some(var_11) = &input.supported_os_versions {
        let mut array_12 = object.key("supportedOsVersions").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13);
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.tags {
        let mut object_15 = object.key("tags").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16).string(value_17);
            }
        }
        object_15.finish();
    }
    if let Some(var_18) = &input.uri {
        object.key("uri").string(var_18);
    }
}

pub fn serialize_structure_create_container_recipe_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContainerRecipeInput,
) {
    if let Some(var_19) = &input.client_token {
        object.key("clientToken").string(var_19);
    }
    if let Some(var_20) = &input.components {
        let mut array_21 = object.key("components").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_component_configuration(
                    &mut object_23,
                    item_22,
                );
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.container_type {
        object.key("containerType").string(var_24.as_str());
    }
    if let Some(var_25) = &input.description {
        object.key("description").string(var_25);
    }
    if let Some(var_26) = &input.dockerfile_template_data {
        object.key("dockerfileTemplateData").string(var_26);
    }
    if let Some(var_27) = &input.dockerfile_template_uri {
        object.key("dockerfileTemplateUri").string(var_27);
    }
    if let Some(var_28) = &input.image_os_version_override {
        object.key("imageOsVersionOverride").string(var_28);
    }
    if let Some(var_29) = &input.instance_configuration {
        let mut object_30 = object.key("instanceConfiguration").start_object();
        crate::json_ser::serialize_structure_instance_configuration(&mut object_30, var_29);
        object_30.finish();
    }
    if let Some(var_31) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_31);
    }
    if let Some(var_32) = &input.name {
        object.key("name").string(var_32);
    }
    if let Some(var_33) = &input.parent_image {
        object.key("parentImage").string(var_33);
    }
    if let Some(var_34) = &input.platform_override {
        object.key("platformOverride").string(var_34.as_str());
    }
    if let Some(var_35) = &input.semantic_version {
        object.key("semanticVersion").string(var_35);
    }
    if let Some(var_36) = &input.tags {
        let mut object_37 = object.key("tags").start_object();
        for (key_38, value_39) in var_36 {
            {
                object_37.key(key_38).string(value_39);
            }
        }
        object_37.finish();
    }
    if let Some(var_40) = &input.target_repository {
        let mut object_41 = object.key("targetRepository").start_object();
        crate::json_ser::serialize_structure_target_container_repository(&mut object_41, var_40);
        object_41.finish();
    }
    if let Some(var_42) = &input.working_directory {
        object.key("workingDirectory").string(var_42);
    }
}

pub fn serialize_structure_create_distribution_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDistributionConfigurationInput,
) {
    if let Some(var_43) = &input.client_token {
        object.key("clientToken").string(var_43);
    }
    if let Some(var_44) = &input.description {
        object.key("description").string(var_44);
    }
    if let Some(var_45) = &input.distributions {
        let mut array_46 = object.key("distributions").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_distribution(&mut object_48, item_47);
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.name {
        object.key("name").string(var_49);
    }
    if let Some(var_50) = &input.tags {
        let mut object_51 = object.key("tags").start_object();
        for (key_52, value_53) in var_50 {
            {
                object_51.key(key_52).string(value_53);
            }
        }
        object_51.finish();
    }
}

pub fn serialize_structure_create_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) {
    if let Some(var_54) = &input.client_token {
        object.key("clientToken").string(var_54);
    }
    if let Some(var_55) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_55);
    }
    if let Some(var_56) = &input.distribution_configuration_arn {
        object.key("distributionConfigurationArn").string(var_56);
    }
    if let Some(var_57) = &input.enhanced_image_metadata_enabled {
        object.key("enhancedImageMetadataEnabled").boolean(*var_57);
    }
    if let Some(var_58) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_58);
    }
    if let Some(var_59) = &input.image_tests_configuration {
        let mut object_60 = object.key("imageTestsConfiguration").start_object();
        crate::json_ser::serialize_structure_image_tests_configuration(&mut object_60, var_59);
        object_60.finish();
    }
    if let Some(var_61) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_61);
    }
    if let Some(var_62) = &input.tags {
        let mut object_63 = object.key("tags").start_object();
        for (key_64, value_65) in var_62 {
            {
                object_63.key(key_64).string(value_65);
            }
        }
        object_63.finish();
    }
}

pub fn serialize_structure_create_image_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImagePipelineInput,
) {
    if let Some(var_66) = &input.client_token {
        object.key("clientToken").string(var_66);
    }
    if let Some(var_67) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_67);
    }
    if let Some(var_68) = &input.description {
        object.key("description").string(var_68);
    }
    if let Some(var_69) = &input.distribution_configuration_arn {
        object.key("distributionConfigurationArn").string(var_69);
    }
    if let Some(var_70) = &input.enhanced_image_metadata_enabled {
        object.key("enhancedImageMetadataEnabled").boolean(*var_70);
    }
    if let Some(var_71) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_71);
    }
    if let Some(var_72) = &input.image_tests_configuration {
        let mut object_73 = object.key("imageTestsConfiguration").start_object();
        crate::json_ser::serialize_structure_image_tests_configuration(&mut object_73, var_72);
        object_73.finish();
    }
    if let Some(var_74) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_74);
    }
    if let Some(var_75) = &input.name {
        object.key("name").string(var_75);
    }
    if let Some(var_76) = &input.schedule {
        let mut object_77 = object.key("schedule").start_object();
        crate::json_ser::serialize_structure_schedule(&mut object_77, var_76);
        object_77.finish();
    }
    if let Some(var_78) = &input.status {
        object.key("status").string(var_78.as_str());
    }
    if let Some(var_79) = &input.tags {
        let mut object_80 = object.key("tags").start_object();
        for (key_81, value_82) in var_79 {
            {
                object_80.key(key_81).string(value_82);
            }
        }
        object_80.finish();
    }
}

pub fn serialize_structure_create_image_recipe_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageRecipeInput,
) {
    if let Some(var_83) = &input.block_device_mappings {
        let mut array_84 = object.key("blockDeviceMappings").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_instance_block_device_mapping(
                    &mut object_86,
                    item_85,
                );
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.client_token {
        object.key("clientToken").string(var_87);
    }
    if let Some(var_88) = &input.components {
        let mut array_89 = object.key("components").start_array();
        for item_90 in var_88 {
            {
                let mut object_91 = array_89.value().start_object();
                crate::json_ser::serialize_structure_component_configuration(
                    &mut object_91,
                    item_90,
                );
                object_91.finish();
            }
        }
        array_89.finish();
    }
    if let Some(var_92) = &input.description {
        object.key("description").string(var_92);
    }
    if let Some(var_93) = &input.name {
        object.key("name").string(var_93);
    }
    if let Some(var_94) = &input.parent_image {
        object.key("parentImage").string(var_94);
    }
    if let Some(var_95) = &input.semantic_version {
        object.key("semanticVersion").string(var_95);
    }
    if let Some(var_96) = &input.tags {
        let mut object_97 = object.key("tags").start_object();
        for (key_98, value_99) in var_96 {
            {
                object_97.key(key_98).string(value_99);
            }
        }
        object_97.finish();
    }
    if let Some(var_100) = &input.working_directory {
        object.key("workingDirectory").string(var_100);
    }
}

pub fn serialize_structure_create_infrastructure_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInfrastructureConfigurationInput,
) {
    if let Some(var_101) = &input.client_token {
        object.key("clientToken").string(var_101);
    }
    if let Some(var_102) = &input.description {
        object.key("description").string(var_102);
    }
    if let Some(var_103) = &input.instance_profile_name {
        object.key("instanceProfileName").string(var_103);
    }
    if let Some(var_104) = &input.instance_types {
        let mut array_105 = object.key("instanceTypes").start_array();
        for item_106 in var_104 {
            {
                array_105.value().string(item_106);
            }
        }
        array_105.finish();
    }
    if let Some(var_107) = &input.key_pair {
        object.key("keyPair").string(var_107);
    }
    if let Some(var_108) = &input.logging {
        let mut object_109 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_logging(&mut object_109, var_108);
        object_109.finish();
    }
    if let Some(var_110) = &input.name {
        object.key("name").string(var_110);
    }
    if let Some(var_111) = &input.resource_tags {
        let mut object_112 = object.key("resourceTags").start_object();
        for (key_113, value_114) in var_111 {
            {
                object_112.key(key_113).string(value_114);
            }
        }
        object_112.finish();
    }
    if let Some(var_115) = &input.security_group_ids {
        let mut array_116 = object.key("securityGroupIds").start_array();
        for item_117 in var_115 {
            {
                array_116.value().string(item_117);
            }
        }
        array_116.finish();
    }
    if let Some(var_118) = &input.sns_topic_arn {
        object.key("snsTopicArn").string(var_118);
    }
    if let Some(var_119) = &input.subnet_id {
        object.key("subnetId").string(var_119);
    }
    if let Some(var_120) = &input.tags {
        let mut object_121 = object.key("tags").start_object();
        for (key_122, value_123) in var_120 {
            {
                object_121.key(key_122).string(value_123);
            }
        }
        object_121.finish();
    }
    if let Some(var_124) = &input.terminate_instance_on_failure {
        object.key("terminateInstanceOnFailure").boolean(*var_124);
    }
}

pub fn serialize_structure_import_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportComponentInput,
) {
    if let Some(var_125) = &input.change_description {
        object.key("changeDescription").string(var_125);
    }
    if let Some(var_126) = &input.client_token {
        object.key("clientToken").string(var_126);
    }
    if let Some(var_127) = &input.data {
        object.key("data").string(var_127);
    }
    if let Some(var_128) = &input.description {
        object.key("description").string(var_128);
    }
    if let Some(var_129) = &input.format {
        object.key("format").string(var_129.as_str());
    }
    if let Some(var_130) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_130);
    }
    if let Some(var_131) = &input.name {
        object.key("name").string(var_131);
    }
    if let Some(var_132) = &input.platform {
        object.key("platform").string(var_132.as_str());
    }
    if let Some(var_133) = &input.semantic_version {
        object.key("semanticVersion").string(var_133);
    }
    if let Some(var_134) = &input.tags {
        let mut object_135 = object.key("tags").start_object();
        for (key_136, value_137) in var_134 {
            {
                object_135.key(key_136).string(value_137);
            }
        }
        object_135.finish();
    }
    if let Some(var_138) = &input.r#type {
        object.key("type").string(var_138.as_str());
    }
    if let Some(var_139) = &input.uri {
        object.key("uri").string(var_139);
    }
}

pub fn serialize_structure_list_component_build_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComponentBuildVersionsInput,
) {
    if let Some(var_140) = &input.component_version_arn {
        object.key("componentVersionArn").string(var_140);
    }
    if let Some(var_141) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_141).into()),
        );
    }
    if let Some(var_142) = &input.next_token {
        object.key("nextToken").string(var_142);
    }
}

pub fn serialize_structure_list_components_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComponentsInput,
) {
    if input.by_name {
        object.key("byName").boolean(input.by_name);
    }
    if let Some(var_143) = &input.filters {
        let mut array_144 = object.key("filters").start_array();
        for item_145 in var_143 {
            {
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_146, item_145);
                object_146.finish();
            }
        }
        array_144.finish();
    }
    if let Some(var_147) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    if let Some(var_148) = &input.next_token {
        object.key("nextToken").string(var_148);
    }
    if let Some(var_149) = &input.owner {
        object.key("owner").string(var_149.as_str());
    }
}

pub fn serialize_structure_list_container_recipes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContainerRecipesInput,
) {
    if let Some(var_150) = &input.filters {
        let mut array_151 = object.key("filters").start_array();
        for item_152 in var_150 {
            {
                let mut object_153 = array_151.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_153, item_152);
                object_153.finish();
            }
        }
        array_151.finish();
    }
    if let Some(var_154) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_154).into()),
        );
    }
    if let Some(var_155) = &input.next_token {
        object.key("nextToken").string(var_155);
    }
    if let Some(var_156) = &input.owner {
        object.key("owner").string(var_156.as_str());
    }
}

pub fn serialize_structure_list_distribution_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDistributionConfigurationsInput,
) {
    if let Some(var_157) = &input.filters {
        let mut array_158 = object.key("filters").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_160, item_159);
                object_160.finish();
            }
        }
        array_158.finish();
    }
    if let Some(var_161) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_161).into()),
        );
    }
    if let Some(var_162) = &input.next_token {
        object.key("nextToken").string(var_162);
    }
}

pub fn serialize_structure_list_image_build_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageBuildVersionsInput,
) {
    if let Some(var_163) = &input.filters {
        let mut array_164 = object.key("filters").start_array();
        for item_165 in var_163 {
            {
                let mut object_166 = array_164.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_166, item_165);
                object_166.finish();
            }
        }
        array_164.finish();
    }
    if let Some(var_167) = &input.image_version_arn {
        object.key("imageVersionArn").string(var_167);
    }
    if let Some(var_168) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    if let Some(var_169) = &input.next_token {
        object.key("nextToken").string(var_169);
    }
}

pub fn serialize_structure_list_image_packages_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagePackagesInput,
) {
    if let Some(var_170) = &input.image_build_version_arn {
        object.key("imageBuildVersionArn").string(var_170);
    }
    if let Some(var_171) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_171).into()),
        );
    }
    if let Some(var_172) = &input.next_token {
        object.key("nextToken").string(var_172);
    }
}

pub fn serialize_structure_list_image_pipeline_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagePipelineImagesInput,
) {
    if let Some(var_173) = &input.filters {
        let mut array_174 = object.key("filters").start_array();
        for item_175 in var_173 {
            {
                let mut object_176 = array_174.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_176, item_175);
                object_176.finish();
            }
        }
        array_174.finish();
    }
    if let Some(var_177) = &input.image_pipeline_arn {
        object.key("imagePipelineArn").string(var_177);
    }
    if let Some(var_178) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    if let Some(var_179) = &input.next_token {
        object.key("nextToken").string(var_179);
    }
}

pub fn serialize_structure_list_image_pipelines_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagePipelinesInput,
) {
    if let Some(var_180) = &input.filters {
        let mut array_181 = object.key("filters").start_array();
        for item_182 in var_180 {
            {
                let mut object_183 = array_181.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_183, item_182);
                object_183.finish();
            }
        }
        array_181.finish();
    }
    if let Some(var_184) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_184).into()),
        );
    }
    if let Some(var_185) = &input.next_token {
        object.key("nextToken").string(var_185);
    }
}

pub fn serialize_structure_list_image_recipes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageRecipesInput,
) {
    if let Some(var_186) = &input.filters {
        let mut array_187 = object.key("filters").start_array();
        for item_188 in var_186 {
            {
                let mut object_189 = array_187.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_189, item_188);
                object_189.finish();
            }
        }
        array_187.finish();
    }
    if let Some(var_190) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_190).into()),
        );
    }
    if let Some(var_191) = &input.next_token {
        object.key("nextToken").string(var_191);
    }
    if let Some(var_192) = &input.owner {
        object.key("owner").string(var_192.as_str());
    }
}

pub fn serialize_structure_list_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) {
    if input.by_name {
        object.key("byName").boolean(input.by_name);
    }
    if let Some(var_193) = &input.filters {
        let mut array_194 = object.key("filters").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_196, item_195);
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.include_deprecated {
        object.key("includeDeprecated").boolean(*var_197);
    }
    if let Some(var_198) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_198).into()),
        );
    }
    if let Some(var_199) = &input.next_token {
        object.key("nextToken").string(var_199);
    }
    if let Some(var_200) = &input.owner {
        object.key("owner").string(var_200.as_str());
    }
}

pub fn serialize_structure_list_infrastructure_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInfrastructureConfigurationsInput,
) {
    if let Some(var_201) = &input.filters {
        let mut array_202 = object.key("filters").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_204, item_203);
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.next_token {
        object.key("nextToken").string(var_206);
    }
}

pub fn serialize_structure_put_component_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutComponentPolicyInput,
) {
    if let Some(var_207) = &input.component_arn {
        object.key("componentArn").string(var_207);
    }
    if let Some(var_208) = &input.policy {
        object.key("policy").string(var_208);
    }
}

pub fn serialize_structure_put_container_recipe_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutContainerRecipePolicyInput,
) {
    if let Some(var_209) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_209);
    }
    if let Some(var_210) = &input.policy {
        object.key("policy").string(var_210);
    }
}

pub fn serialize_structure_put_image_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImagePolicyInput,
) {
    if let Some(var_211) = &input.image_arn {
        object.key("imageArn").string(var_211);
    }
    if let Some(var_212) = &input.policy {
        object.key("policy").string(var_212);
    }
}

pub fn serialize_structure_put_image_recipe_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImageRecipePolicyInput,
) {
    if let Some(var_213) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_213);
    }
    if let Some(var_214) = &input.policy {
        object.key("policy").string(var_214);
    }
}

pub fn serialize_structure_start_image_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImagePipelineExecutionInput,
) {
    if let Some(var_215) = &input.client_token {
        object.key("clientToken").string(var_215);
    }
    if let Some(var_216) = &input.image_pipeline_arn {
        object.key("imagePipelineArn").string(var_216);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_217) = &input.tags {
        let mut object_218 = object.key("tags").start_object();
        for (key_219, value_220) in var_217 {
            {
                object_218.key(key_219).string(value_220);
            }
        }
        object_218.finish();
    }
}

pub fn serialize_structure_update_distribution_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDistributionConfigurationInput,
) {
    if let Some(var_221) = &input.client_token {
        object.key("clientToken").string(var_221);
    }
    if let Some(var_222) = &input.description {
        object.key("description").string(var_222);
    }
    if let Some(var_223) = &input.distribution_configuration_arn {
        object.key("distributionConfigurationArn").string(var_223);
    }
    if let Some(var_224) = &input.distributions {
        let mut array_225 = object.key("distributions").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_distribution(&mut object_227, item_226);
                object_227.finish();
            }
        }
        array_225.finish();
    }
}

pub fn serialize_structure_update_image_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImagePipelineInput,
) {
    if let Some(var_228) = &input.client_token {
        object.key("clientToken").string(var_228);
    }
    if let Some(var_229) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_229);
    }
    if let Some(var_230) = &input.description {
        object.key("description").string(var_230);
    }
    if let Some(var_231) = &input.distribution_configuration_arn {
        object.key("distributionConfigurationArn").string(var_231);
    }
    if let Some(var_232) = &input.enhanced_image_metadata_enabled {
        object.key("enhancedImageMetadataEnabled").boolean(*var_232);
    }
    if let Some(var_233) = &input.image_pipeline_arn {
        object.key("imagePipelineArn").string(var_233);
    }
    if let Some(var_234) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_234);
    }
    if let Some(var_235) = &input.image_tests_configuration {
        let mut object_236 = object.key("imageTestsConfiguration").start_object();
        crate::json_ser::serialize_structure_image_tests_configuration(&mut object_236, var_235);
        object_236.finish();
    }
    if let Some(var_237) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_237);
    }
    if let Some(var_238) = &input.schedule {
        let mut object_239 = object.key("schedule").start_object();
        crate::json_ser::serialize_structure_schedule(&mut object_239, var_238);
        object_239.finish();
    }
    if let Some(var_240) = &input.status {
        object.key("status").string(var_240.as_str());
    }
}

pub fn serialize_structure_update_infrastructure_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInfrastructureConfigurationInput,
) {
    if let Some(var_241) = &input.client_token {
        object.key("clientToken").string(var_241);
    }
    if let Some(var_242) = &input.description {
        object.key("description").string(var_242);
    }
    if let Some(var_243) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_243);
    }
    if let Some(var_244) = &input.instance_profile_name {
        object.key("instanceProfileName").string(var_244);
    }
    if let Some(var_245) = &input.instance_types {
        let mut array_246 = object.key("instanceTypes").start_array();
        for item_247 in var_245 {
            {
                array_246.value().string(item_247);
            }
        }
        array_246.finish();
    }
    if let Some(var_248) = &input.key_pair {
        object.key("keyPair").string(var_248);
    }
    if let Some(var_249) = &input.logging {
        let mut object_250 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_logging(&mut object_250, var_249);
        object_250.finish();
    }
    if let Some(var_251) = &input.resource_tags {
        let mut object_252 = object.key("resourceTags").start_object();
        for (key_253, value_254) in var_251 {
            {
                object_252.key(key_253).string(value_254);
            }
        }
        object_252.finish();
    }
    if let Some(var_255) = &input.security_group_ids {
        let mut array_256 = object.key("securityGroupIds").start_array();
        for item_257 in var_255 {
            {
                array_256.value().string(item_257);
            }
        }
        array_256.finish();
    }
    if let Some(var_258) = &input.sns_topic_arn {
        object.key("snsTopicArn").string(var_258);
    }
    if let Some(var_259) = &input.subnet_id {
        object.key("subnetId").string(var_259);
    }
    if let Some(var_260) = &input.terminate_instance_on_failure {
        object.key("terminateInstanceOnFailure").boolean(*var_260);
    }
}

pub fn serialize_structure_component_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentConfiguration,
) {
    if let Some(var_261) = &input.component_arn {
        object.key("componentArn").string(var_261);
    }
}

pub fn serialize_structure_instance_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceConfiguration,
) {
    if let Some(var_262) = &input.image {
        object.key("image").string(var_262);
    }
    if let Some(var_263) = &input.block_device_mappings {
        let mut array_264 = object.key("blockDeviceMappings").start_array();
        for item_265 in var_263 {
            {
                let mut object_266 = array_264.value().start_object();
                crate::json_ser::serialize_structure_instance_block_device_mapping(
                    &mut object_266,
                    item_265,
                );
                object_266.finish();
            }
        }
        array_264.finish();
    }
}

pub fn serialize_structure_target_container_repository(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetContainerRepository,
) {
    if let Some(var_267) = &input.service {
        object.key("service").string(var_267.as_str());
    }
    if let Some(var_268) = &input.repository_name {
        object.key("repositoryName").string(var_268);
    }
}

pub fn serialize_structure_distribution(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Distribution,
) {
    if let Some(var_269) = &input.region {
        object.key("region").string(var_269);
    }
    if let Some(var_270) = &input.ami_distribution_configuration {
        let mut object_271 = object.key("amiDistributionConfiguration").start_object();
        crate::json_ser::serialize_structure_ami_distribution_configuration(
            &mut object_271,
            var_270,
        );
        object_271.finish();
    }
    if let Some(var_272) = &input.container_distribution_configuration {
        let mut object_273 = object
            .key("containerDistributionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_container_distribution_configuration(
            &mut object_273,
            var_272,
        );
        object_273.finish();
    }
    if let Some(var_274) = &input.license_configuration_arns {
        let mut array_275 = object.key("licenseConfigurationArns").start_array();
        for item_276 in var_274 {
            {
                array_275.value().string(item_276);
            }
        }
        array_275.finish();
    }
    if let Some(var_277) = &input.launch_template_configurations {
        let mut array_278 = object.key("launchTemplateConfigurations").start_array();
        for item_279 in var_277 {
            {
                let mut object_280 = array_278.value().start_object();
                crate::json_ser::serialize_structure_launch_template_configuration(
                    &mut object_280,
                    item_279,
                );
                object_280.finish();
            }
        }
        array_278.finish();
    }
}

pub fn serialize_structure_image_tests_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageTestsConfiguration,
) {
    if let Some(var_281) = &input.image_tests_enabled {
        object.key("imageTestsEnabled").boolean(*var_281);
    }
    if let Some(var_282) = &input.timeout_minutes {
        object.key("timeoutMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_282).into()),
        );
    }
}

pub fn serialize_structure_schedule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Schedule,
) {
    if let Some(var_283) = &input.schedule_expression {
        object.key("scheduleExpression").string(var_283);
    }
    if let Some(var_284) = &input.timezone {
        object.key("timezone").string(var_284);
    }
    if let Some(var_285) = &input.pipeline_execution_start_condition {
        object
            .key("pipelineExecutionStartCondition")
            .string(var_285.as_str());
    }
}

pub fn serialize_structure_instance_block_device_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceBlockDeviceMapping,
) {
    if let Some(var_286) = &input.device_name {
        object.key("deviceName").string(var_286);
    }
    if let Some(var_287) = &input.ebs {
        let mut object_288 = object.key("ebs").start_object();
        crate::json_ser::serialize_structure_ebs_instance_block_device_specification(
            &mut object_288,
            var_287,
        );
        object_288.finish();
    }
    if let Some(var_289) = &input.virtual_name {
        object.key("virtualName").string(var_289);
    }
    if let Some(var_290) = &input.no_device {
        object.key("noDevice").string(var_290);
    }
}

pub fn serialize_structure_logging(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Logging,
) {
    if let Some(var_291) = &input.s3_logs {
        let mut object_292 = object.key("s3Logs").start_object();
        crate::json_ser::serialize_structure_s3_logs(&mut object_292, var_291);
        object_292.finish();
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_293) = &input.name {
        object.key("name").string(var_293);
    }
    if let Some(var_294) = &input.values {
        let mut array_295 = object.key("values").start_array();
        for item_296 in var_294 {
            {
                array_295.value().string(item_296);
            }
        }
        array_295.finish();
    }
}

pub fn serialize_structure_ami_distribution_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmiDistributionConfiguration,
) {
    if let Some(var_297) = &input.name {
        object.key("name").string(var_297);
    }
    if let Some(var_298) = &input.description {
        object.key("description").string(var_298);
    }
    if let Some(var_299) = &input.target_account_ids {
        let mut array_300 = object.key("targetAccountIds").start_array();
        for item_301 in var_299 {
            {
                array_300.value().string(item_301);
            }
        }
        array_300.finish();
    }
    if let Some(var_302) = &input.ami_tags {
        let mut object_303 = object.key("amiTags").start_object();
        for (key_304, value_305) in var_302 {
            {
                object_303.key(key_304).string(value_305);
            }
        }
        object_303.finish();
    }
    if let Some(var_306) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_306);
    }
    if let Some(var_307) = &input.launch_permission {
        let mut object_308 = object.key("launchPermission").start_object();
        crate::json_ser::serialize_structure_launch_permission_configuration(
            &mut object_308,
            var_307,
        );
        object_308.finish();
    }
}

pub fn serialize_structure_container_distribution_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDistributionConfiguration,
) {
    if let Some(var_309) = &input.description {
        object.key("description").string(var_309);
    }
    if let Some(var_310) = &input.container_tags {
        let mut array_311 = object.key("containerTags").start_array();
        for item_312 in var_310 {
            {
                array_311.value().string(item_312);
            }
        }
        array_311.finish();
    }
    if let Some(var_313) = &input.target_repository {
        let mut object_314 = object.key("targetRepository").start_object();
        crate::json_ser::serialize_structure_target_container_repository(&mut object_314, var_313);
        object_314.finish();
    }
}

pub fn serialize_structure_launch_template_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LaunchTemplateConfiguration,
) {
    if let Some(var_315) = &input.launch_template_id {
        object.key("launchTemplateId").string(var_315);
    }
    if let Some(var_316) = &input.account_id {
        object.key("accountId").string(var_316);
    }
    if input.set_default_version {
        object
            .key("setDefaultVersion")
            .boolean(input.set_default_version);
    }
}

pub fn serialize_structure_ebs_instance_block_device_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) {
    if let Some(var_317) = &input.encrypted {
        object.key("encrypted").boolean(*var_317);
    }
    if let Some(var_318) = &input.delete_on_termination {
        object.key("deleteOnTermination").boolean(*var_318);
    }
    if let Some(var_319) = &input.iops {
        object.key("iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_319).into()),
        );
    }
    if let Some(var_320) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_320);
    }
    if let Some(var_321) = &input.snapshot_id {
        object.key("snapshotId").string(var_321);
    }
    if let Some(var_322) = &input.volume_size {
        object.key("volumeSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_322).into()),
        );
    }
    if let Some(var_323) = &input.volume_type {
        object.key("volumeType").string(var_323.as_str());
    }
}

pub fn serialize_structure_s3_logs(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Logs,
) {
    if let Some(var_324) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_324);
    }
    if let Some(var_325) = &input.s3_key_prefix {
        object.key("s3KeyPrefix").string(var_325);
    }
}

pub fn serialize_structure_launch_permission_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LaunchPermissionConfiguration,
) {
    if let Some(var_326) = &input.user_ids {
        let mut array_327 = object.key("userIds").start_array();
        for item_328 in var_326 {
            {
                array_327.value().string(item_328);
            }
        }
        array_327.finish();
    }
    if let Some(var_329) = &input.user_groups {
        let mut array_330 = object.key("userGroups").start_array();
        for item_331 in var_329 {
            {
                array_330.value().string(item_331);
            }
        }
        array_330.finish();
    }
}
