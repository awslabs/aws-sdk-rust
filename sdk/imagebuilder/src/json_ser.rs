// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_cancel_image_creation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelImageCreationInput,
) {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1);
    }
    if let Some(var_2) = &input.image_build_version_arn {
        object.key("imageBuildVersionArn").string(var_2);
    }
}

pub fn serialize_structure_crate_input_create_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateComponentInput,
) {
    if let Some(var_3) = &input.change_description {
        object.key("changeDescription").string(var_3);
    }
    if let Some(var_4) = &input.client_token {
        object.key("clientToken").string(var_4);
    }
    if let Some(var_5) = &input.data {
        object.key("data").string(var_5);
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6);
    }
    if let Some(var_7) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_7);
    }
    if let Some(var_8) = &input.name {
        object.key("name").string(var_8);
    }
    if let Some(var_9) = &input.platform {
        object.key("platform").string(var_9.as_str());
    }
    if let Some(var_10) = &input.semantic_version {
        object.key("semanticVersion").string(var_10);
    }
    if let Some(var_11) = &input.supported_os_versions {
        let mut array_12 = object.key("supportedOsVersions").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13);
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.tags {
        let mut object_15 = object.key("tags").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16).string(value_17);
            }
        }
        object_15.finish();
    }
    if let Some(var_18) = &input.uri {
        object.key("uri").string(var_18);
    }
}

pub fn serialize_structure_crate_input_create_container_recipe_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateContainerRecipeInput,
) {
    if let Some(var_19) = &input.client_token {
        object.key("clientToken").string(var_19);
    }
    if let Some(var_20) = &input.components {
        let mut array_21 = object.key("components").start_array();
        for item_22 in var_20 {
            {
                let mut object_23 = array_21.value().start_object();
                crate::json_ser::serialize_structure_crate_model_component_configuration(
                    &mut object_23,
                    item_22,
                );
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.container_type {
        object.key("containerType").string(var_24.as_str());
    }
    if let Some(var_25) = &input.description {
        object.key("description").string(var_25);
    }
    if let Some(var_26) = &input.dockerfile_template_data {
        object.key("dockerfileTemplateData").string(var_26);
    }
    if let Some(var_27) = &input.dockerfile_template_uri {
        object.key("dockerfileTemplateUri").string(var_27);
    }
    if let Some(var_28) = &input.image_os_version_override {
        object.key("imageOsVersionOverride").string(var_28);
    }
    if let Some(var_29) = &input.instance_configuration {
        let mut object_30 = object.key("instanceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_configuration(
            &mut object_30,
            var_29,
        );
        object_30.finish();
    }
    if let Some(var_31) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_31);
    }
    if let Some(var_32) = &input.name {
        object.key("name").string(var_32);
    }
    if let Some(var_33) = &input.parent_image {
        object.key("parentImage").string(var_33);
    }
    if let Some(var_34) = &input.platform_override {
        object.key("platformOverride").string(var_34.as_str());
    }
    if let Some(var_35) = &input.semantic_version {
        object.key("semanticVersion").string(var_35);
    }
    if let Some(var_36) = &input.tags {
        let mut object_37 = object.key("tags").start_object();
        for (key_38, value_39) in var_36 {
            {
                object_37.key(key_38).string(value_39);
            }
        }
        object_37.finish();
    }
    if let Some(var_40) = &input.target_repository {
        let mut object_41 = object.key("targetRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_target_container_repository(
            &mut object_41,
            var_40,
        );
        object_41.finish();
    }
    if let Some(var_42) = &input.working_directory {
        object.key("workingDirectory").string(var_42);
    }
}

pub fn serialize_structure_crate_input_create_distribution_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDistributionConfigurationInput,
) {
    if let Some(var_43) = &input.client_token {
        object.key("clientToken").string(var_43);
    }
    if let Some(var_44) = &input.description {
        object.key("description").string(var_44);
    }
    if let Some(var_45) = &input.distributions {
        let mut array_46 = object.key("distributions").start_array();
        for item_47 in var_45 {
            {
                let mut object_48 = array_46.value().start_object();
                crate::json_ser::serialize_structure_crate_model_distribution(
                    &mut object_48,
                    item_47,
                );
                object_48.finish();
            }
        }
        array_46.finish();
    }
    if let Some(var_49) = &input.name {
        object.key("name").string(var_49);
    }
    if let Some(var_50) = &input.tags {
        let mut object_51 = object.key("tags").start_object();
        for (key_52, value_53) in var_50 {
            {
                object_51.key(key_52).string(value_53);
            }
        }
        object_51.finish();
    }
}

pub fn serialize_structure_crate_input_create_image_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageInput,
) {
    if let Some(var_54) = &input.client_token {
        object.key("clientToken").string(var_54);
    }
    if let Some(var_55) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_55);
    }
    if let Some(var_56) = &input.distribution_configuration_arn {
        object.key("distributionConfigurationArn").string(var_56);
    }
    if let Some(var_57) = &input.enhanced_image_metadata_enabled {
        object.key("enhancedImageMetadataEnabled").boolean(*var_57);
    }
    if let Some(var_58) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_58);
    }
    if let Some(var_59) = &input.image_tests_configuration {
        let mut object_60 = object.key("imageTestsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_image_tests_configuration(
            &mut object_60,
            var_59,
        );
        object_60.finish();
    }
    if let Some(var_61) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_61);
    }
    if let Some(var_62) = &input.tags {
        let mut object_63 = object.key("tags").start_object();
        for (key_64, value_65) in var_62 {
            {
                object_63.key(key_64).string(value_65);
            }
        }
        object_63.finish();
    }
}

pub fn serialize_structure_crate_input_create_image_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImagePipelineInput,
) {
    if let Some(var_66) = &input.client_token {
        object.key("clientToken").string(var_66);
    }
    if let Some(var_67) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_67);
    }
    if let Some(var_68) = &input.description {
        object.key("description").string(var_68);
    }
    if let Some(var_69) = &input.distribution_configuration_arn {
        object.key("distributionConfigurationArn").string(var_69);
    }
    if let Some(var_70) = &input.enhanced_image_metadata_enabled {
        object.key("enhancedImageMetadataEnabled").boolean(*var_70);
    }
    if let Some(var_71) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_71);
    }
    if let Some(var_72) = &input.image_tests_configuration {
        let mut object_73 = object.key("imageTestsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_image_tests_configuration(
            &mut object_73,
            var_72,
        );
        object_73.finish();
    }
    if let Some(var_74) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_74);
    }
    if let Some(var_75) = &input.name {
        object.key("name").string(var_75);
    }
    if let Some(var_76) = &input.schedule {
        let mut object_77 = object.key("schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule(&mut object_77, var_76);
        object_77.finish();
    }
    if let Some(var_78) = &input.status {
        object.key("status").string(var_78.as_str());
    }
    if let Some(var_79) = &input.tags {
        let mut object_80 = object.key("tags").start_object();
        for (key_81, value_82) in var_79 {
            {
                object_80.key(key_81).string(value_82);
            }
        }
        object_80.finish();
    }
}

pub fn serialize_structure_crate_input_create_image_recipe_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageRecipeInput,
) {
    if let Some(var_83) = &input.additional_instance_configuration {
        let mut object_84 = object.key("additionalInstanceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_additional_instance_configuration(
            &mut object_84,
            var_83,
        );
        object_84.finish();
    }
    if let Some(var_85) = &input.block_device_mappings {
        let mut array_86 = object.key("blockDeviceMappings").start_array();
        for item_87 in var_85 {
            {
                let mut object_88 = array_86.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_block_device_mapping(
                    &mut object_88,
                    item_87,
                );
                object_88.finish();
            }
        }
        array_86.finish();
    }
    if let Some(var_89) = &input.client_token {
        object.key("clientToken").string(var_89);
    }
    if let Some(var_90) = &input.components {
        let mut array_91 = object.key("components").start_array();
        for item_92 in var_90 {
            {
                let mut object_93 = array_91.value().start_object();
                crate::json_ser::serialize_structure_crate_model_component_configuration(
                    &mut object_93,
                    item_92,
                );
                object_93.finish();
            }
        }
        array_91.finish();
    }
    if let Some(var_94) = &input.description {
        object.key("description").string(var_94);
    }
    if let Some(var_95) = &input.name {
        object.key("name").string(var_95);
    }
    if let Some(var_96) = &input.parent_image {
        object.key("parentImage").string(var_96);
    }
    if let Some(var_97) = &input.semantic_version {
        object.key("semanticVersion").string(var_97);
    }
    if let Some(var_98) = &input.tags {
        let mut object_99 = object.key("tags").start_object();
        for (key_100, value_101) in var_98 {
            {
                object_99.key(key_100).string(value_101);
            }
        }
        object_99.finish();
    }
    if let Some(var_102) = &input.working_directory {
        object.key("workingDirectory").string(var_102);
    }
}

pub fn serialize_structure_crate_input_create_infrastructure_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateInfrastructureConfigurationInput,
) {
    if let Some(var_103) = &input.client_token {
        object.key("clientToken").string(var_103);
    }
    if let Some(var_104) = &input.description {
        object.key("description").string(var_104);
    }
    if let Some(var_105) = &input.instance_profile_name {
        object.key("instanceProfileName").string(var_105);
    }
    if let Some(var_106) = &input.instance_types {
        let mut array_107 = object.key("instanceTypes").start_array();
        for item_108 in var_106 {
            {
                array_107.value().string(item_108);
            }
        }
        array_107.finish();
    }
    if let Some(var_109) = &input.key_pair {
        object.key("keyPair").string(var_109);
    }
    if let Some(var_110) = &input.logging {
        let mut object_111 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_crate_model_logging(&mut object_111, var_110);
        object_111.finish();
    }
    if let Some(var_112) = &input.name {
        object.key("name").string(var_112);
    }
    if let Some(var_113) = &input.resource_tags {
        let mut object_114 = object.key("resourceTags").start_object();
        for (key_115, value_116) in var_113 {
            {
                object_114.key(key_115).string(value_116);
            }
        }
        object_114.finish();
    }
    if let Some(var_117) = &input.security_group_ids {
        let mut array_118 = object.key("securityGroupIds").start_array();
        for item_119 in var_117 {
            {
                array_118.value().string(item_119);
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.sns_topic_arn {
        object.key("snsTopicArn").string(var_120);
    }
    if let Some(var_121) = &input.subnet_id {
        object.key("subnetId").string(var_121);
    }
    if let Some(var_122) = &input.tags {
        let mut object_123 = object.key("tags").start_object();
        for (key_124, value_125) in var_122 {
            {
                object_123.key(key_124).string(value_125);
            }
        }
        object_123.finish();
    }
    if let Some(var_126) = &input.terminate_instance_on_failure {
        object.key("terminateInstanceOnFailure").boolean(*var_126);
    }
}

pub fn serialize_structure_crate_input_import_component_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ImportComponentInput,
) {
    if let Some(var_127) = &input.change_description {
        object.key("changeDescription").string(var_127);
    }
    if let Some(var_128) = &input.client_token {
        object.key("clientToken").string(var_128);
    }
    if let Some(var_129) = &input.data {
        object.key("data").string(var_129);
    }
    if let Some(var_130) = &input.description {
        object.key("description").string(var_130);
    }
    if let Some(var_131) = &input.format {
        object.key("format").string(var_131.as_str());
    }
    if let Some(var_132) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_132);
    }
    if let Some(var_133) = &input.name {
        object.key("name").string(var_133);
    }
    if let Some(var_134) = &input.platform {
        object.key("platform").string(var_134.as_str());
    }
    if let Some(var_135) = &input.semantic_version {
        object.key("semanticVersion").string(var_135);
    }
    if let Some(var_136) = &input.tags {
        let mut object_137 = object.key("tags").start_object();
        for (key_138, value_139) in var_136 {
            {
                object_137.key(key_138).string(value_139);
            }
        }
        object_137.finish();
    }
    if let Some(var_140) = &input.r#type {
        object.key("type").string(var_140.as_str());
    }
    if let Some(var_141) = &input.uri {
        object.key("uri").string(var_141);
    }
}

pub fn serialize_structure_crate_input_list_component_build_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComponentBuildVersionsInput,
) {
    if let Some(var_142) = &input.component_version_arn {
        object.key("componentVersionArn").string(var_142);
    }
    if let Some(var_143) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    if let Some(var_144) = &input.next_token {
        object.key("nextToken").string(var_144);
    }
}

pub fn serialize_structure_crate_input_list_components_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComponentsInput,
) {
    if input.by_name {
        object.key("byName").boolean(input.by_name);
    }
    if let Some(var_145) = &input.filters {
        let mut array_146 = object.key("filters").start_array();
        for item_147 in var_145 {
            {
                let mut object_148 = array_146.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_148, item_147);
                object_148.finish();
            }
        }
        array_146.finish();
    }
    if let Some(var_149) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_149).into()),
        );
    }
    if let Some(var_150) = &input.next_token {
        object.key("nextToken").string(var_150);
    }
    if let Some(var_151) = &input.owner {
        object.key("owner").string(var_151.as_str());
    }
}

pub fn serialize_structure_crate_input_list_container_recipes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContainerRecipesInput,
) {
    if let Some(var_152) = &input.filters {
        let mut array_153 = object.key("filters").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_155, item_154);
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_156).into()),
        );
    }
    if let Some(var_157) = &input.next_token {
        object.key("nextToken").string(var_157);
    }
    if let Some(var_158) = &input.owner {
        object.key("owner").string(var_158.as_str());
    }
}

pub fn serialize_structure_crate_input_list_distribution_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDistributionConfigurationsInput,
) {
    if let Some(var_159) = &input.filters {
        let mut array_160 = object.key("filters").start_array();
        for item_161 in var_159 {
            {
                let mut object_162 = array_160.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_162, item_161);
                object_162.finish();
            }
        }
        array_160.finish();
    }
    if let Some(var_163) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_163).into()),
        );
    }
    if let Some(var_164) = &input.next_token {
        object.key("nextToken").string(var_164);
    }
}

pub fn serialize_structure_crate_input_list_image_build_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageBuildVersionsInput,
) {
    if let Some(var_165) = &input.filters {
        let mut array_166 = object.key("filters").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_168, item_167);
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.image_version_arn {
        object.key("imageVersionArn").string(var_169);
    }
    if let Some(var_170) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_170).into()),
        );
    }
    if let Some(var_171) = &input.next_token {
        object.key("nextToken").string(var_171);
    }
}

pub fn serialize_structure_crate_input_list_image_packages_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagePackagesInput,
) {
    if let Some(var_172) = &input.image_build_version_arn {
        object.key("imageBuildVersionArn").string(var_172);
    }
    if let Some(var_173) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.next_token {
        object.key("nextToken").string(var_174);
    }
}

pub fn serialize_structure_crate_input_list_image_pipeline_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagePipelineImagesInput,
) {
    if let Some(var_175) = &input.filters {
        let mut array_176 = object.key("filters").start_array();
        for item_177 in var_175 {
            {
                let mut object_178 = array_176.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_178, item_177);
                object_178.finish();
            }
        }
        array_176.finish();
    }
    if let Some(var_179) = &input.image_pipeline_arn {
        object.key("imagePipelineArn").string(var_179);
    }
    if let Some(var_180) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_180).into()),
        );
    }
    if let Some(var_181) = &input.next_token {
        object.key("nextToken").string(var_181);
    }
}

pub fn serialize_structure_crate_input_list_image_pipelines_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagePipelinesInput,
) {
    if let Some(var_182) = &input.filters {
        let mut array_183 = object.key("filters").start_array();
        for item_184 in var_182 {
            {
                let mut object_185 = array_183.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_185, item_184);
                object_185.finish();
            }
        }
        array_183.finish();
    }
    if let Some(var_186) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_186).into()),
        );
    }
    if let Some(var_187) = &input.next_token {
        object.key("nextToken").string(var_187);
    }
}

pub fn serialize_structure_crate_input_list_image_recipes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImageRecipesInput,
) {
    if let Some(var_188) = &input.filters {
        let mut array_189 = object.key("filters").start_array();
        for item_190 in var_188 {
            {
                let mut object_191 = array_189.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_191, item_190);
                object_191.finish();
            }
        }
        array_189.finish();
    }
    if let Some(var_192) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_192).into()),
        );
    }
    if let Some(var_193) = &input.next_token {
        object.key("nextToken").string(var_193);
    }
    if let Some(var_194) = &input.owner {
        object.key("owner").string(var_194.as_str());
    }
}

pub fn serialize_structure_crate_input_list_images_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListImagesInput,
) {
    if input.by_name {
        object.key("byName").boolean(input.by_name);
    }
    if let Some(var_195) = &input.filters {
        let mut array_196 = object.key("filters").start_array();
        for item_197 in var_195 {
            {
                let mut object_198 = array_196.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_198, item_197);
                object_198.finish();
            }
        }
        array_196.finish();
    }
    if let Some(var_199) = &input.include_deprecated {
        object.key("includeDeprecated").boolean(*var_199);
    }
    if let Some(var_200) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_200).into()),
        );
    }
    if let Some(var_201) = &input.next_token {
        object.key("nextToken").string(var_201);
    }
    if let Some(var_202) = &input.owner {
        object.key("owner").string(var_202.as_str());
    }
}

pub fn serialize_structure_crate_input_list_infrastructure_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInfrastructureConfigurationsInput,
) {
    if let Some(var_203) = &input.filters {
        let mut array_204 = object.key("filters").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_206, item_205);
                object_206.finish();
            }
        }
        array_204.finish();
    }
    if let Some(var_207) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_207).into()),
        );
    }
    if let Some(var_208) = &input.next_token {
        object.key("nextToken").string(var_208);
    }
}

pub fn serialize_structure_crate_input_put_component_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutComponentPolicyInput,
) {
    if let Some(var_209) = &input.component_arn {
        object.key("componentArn").string(var_209);
    }
    if let Some(var_210) = &input.policy {
        object.key("policy").string(var_210);
    }
}

pub fn serialize_structure_crate_input_put_container_recipe_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutContainerRecipePolicyInput,
) {
    if let Some(var_211) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_211);
    }
    if let Some(var_212) = &input.policy {
        object.key("policy").string(var_212);
    }
}

pub fn serialize_structure_crate_input_put_image_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImagePolicyInput,
) {
    if let Some(var_213) = &input.image_arn {
        object.key("imageArn").string(var_213);
    }
    if let Some(var_214) = &input.policy {
        object.key("policy").string(var_214);
    }
}

pub fn serialize_structure_crate_input_put_image_recipe_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutImageRecipePolicyInput,
) {
    if let Some(var_215) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_215);
    }
    if let Some(var_216) = &input.policy {
        object.key("policy").string(var_216);
    }
}

pub fn serialize_structure_crate_input_start_image_pipeline_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImagePipelineExecutionInput,
) {
    if let Some(var_217) = &input.client_token {
        object.key("clientToken").string(var_217);
    }
    if let Some(var_218) = &input.image_pipeline_arn {
        object.key("imagePipelineArn").string(var_218);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_219) = &input.tags {
        let mut object_220 = object.key("tags").start_object();
        for (key_221, value_222) in var_219 {
            {
                object_220.key(key_221).string(value_222);
            }
        }
        object_220.finish();
    }
}

pub fn serialize_structure_crate_input_update_distribution_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDistributionConfigurationInput,
) {
    if let Some(var_223) = &input.client_token {
        object.key("clientToken").string(var_223);
    }
    if let Some(var_224) = &input.description {
        object.key("description").string(var_224);
    }
    if let Some(var_225) = &input.distribution_configuration_arn {
        object.key("distributionConfigurationArn").string(var_225);
    }
    if let Some(var_226) = &input.distributions {
        let mut array_227 = object.key("distributions").start_array();
        for item_228 in var_226 {
            {
                let mut object_229 = array_227.value().start_object();
                crate::json_ser::serialize_structure_crate_model_distribution(
                    &mut object_229,
                    item_228,
                );
                object_229.finish();
            }
        }
        array_227.finish();
    }
}

pub fn serialize_structure_crate_input_update_image_pipeline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImagePipelineInput,
) {
    if let Some(var_230) = &input.client_token {
        object.key("clientToken").string(var_230);
    }
    if let Some(var_231) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_231);
    }
    if let Some(var_232) = &input.description {
        object.key("description").string(var_232);
    }
    if let Some(var_233) = &input.distribution_configuration_arn {
        object.key("distributionConfigurationArn").string(var_233);
    }
    if let Some(var_234) = &input.enhanced_image_metadata_enabled {
        object.key("enhancedImageMetadataEnabled").boolean(*var_234);
    }
    if let Some(var_235) = &input.image_pipeline_arn {
        object.key("imagePipelineArn").string(var_235);
    }
    if let Some(var_236) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_236);
    }
    if let Some(var_237) = &input.image_tests_configuration {
        let mut object_238 = object.key("imageTestsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_image_tests_configuration(
            &mut object_238,
            var_237,
        );
        object_238.finish();
    }
    if let Some(var_239) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_239);
    }
    if let Some(var_240) = &input.schedule {
        let mut object_241 = object.key("schedule").start_object();
        crate::json_ser::serialize_structure_crate_model_schedule(&mut object_241, var_240);
        object_241.finish();
    }
    if let Some(var_242) = &input.status {
        object.key("status").string(var_242.as_str());
    }
}

pub fn serialize_structure_crate_input_update_infrastructure_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateInfrastructureConfigurationInput,
) {
    if let Some(var_243) = &input.client_token {
        object.key("clientToken").string(var_243);
    }
    if let Some(var_244) = &input.description {
        object.key("description").string(var_244);
    }
    if let Some(var_245) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_245);
    }
    if let Some(var_246) = &input.instance_profile_name {
        object.key("instanceProfileName").string(var_246);
    }
    if let Some(var_247) = &input.instance_types {
        let mut array_248 = object.key("instanceTypes").start_array();
        for item_249 in var_247 {
            {
                array_248.value().string(item_249);
            }
        }
        array_248.finish();
    }
    if let Some(var_250) = &input.key_pair {
        object.key("keyPair").string(var_250);
    }
    if let Some(var_251) = &input.logging {
        let mut object_252 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_crate_model_logging(&mut object_252, var_251);
        object_252.finish();
    }
    if let Some(var_253) = &input.resource_tags {
        let mut object_254 = object.key("resourceTags").start_object();
        for (key_255, value_256) in var_253 {
            {
                object_254.key(key_255).string(value_256);
            }
        }
        object_254.finish();
    }
    if let Some(var_257) = &input.security_group_ids {
        let mut array_258 = object.key("securityGroupIds").start_array();
        for item_259 in var_257 {
            {
                array_258.value().string(item_259);
            }
        }
        array_258.finish();
    }
    if let Some(var_260) = &input.sns_topic_arn {
        object.key("snsTopicArn").string(var_260);
    }
    if let Some(var_261) = &input.subnet_id {
        object.key("subnetId").string(var_261);
    }
    if let Some(var_262) = &input.terminate_instance_on_failure {
        object.key("terminateInstanceOnFailure").boolean(*var_262);
    }
}

pub fn serialize_structure_crate_model_component_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentConfiguration,
) {
    if let Some(var_263) = &input.component_arn {
        object.key("componentArn").string(var_263);
    }
    if let Some(var_264) = &input.parameters {
        let mut array_265 = object.key("parameters").start_array();
        for item_266 in var_264 {
            {
                let mut object_267 = array_265.value().start_object();
                crate::json_ser::serialize_structure_crate_model_component_parameter(
                    &mut object_267,
                    item_266,
                );
                object_267.finish();
            }
        }
        array_265.finish();
    }
}

pub fn serialize_structure_crate_model_instance_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceConfiguration,
) {
    if let Some(var_268) = &input.image {
        object.key("image").string(var_268);
    }
    if let Some(var_269) = &input.block_device_mappings {
        let mut array_270 = object.key("blockDeviceMappings").start_array();
        for item_271 in var_269 {
            {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_block_device_mapping(
                    &mut object_272,
                    item_271,
                );
                object_272.finish();
            }
        }
        array_270.finish();
    }
}

pub fn serialize_structure_crate_model_target_container_repository(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetContainerRepository,
) {
    if let Some(var_273) = &input.service {
        object.key("service").string(var_273.as_str());
    }
    if let Some(var_274) = &input.repository_name {
        object.key("repositoryName").string(var_274);
    }
}

pub fn serialize_structure_crate_model_distribution(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Distribution,
) {
    if let Some(var_275) = &input.region {
        object.key("region").string(var_275);
    }
    if let Some(var_276) = &input.ami_distribution_configuration {
        let mut object_277 = object.key("amiDistributionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_ami_distribution_configuration(
            &mut object_277,
            var_276,
        );
        object_277.finish();
    }
    if let Some(var_278) = &input.container_distribution_configuration {
        let mut object_279 = object
            .key("containerDistributionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_container_distribution_configuration(
            &mut object_279,
            var_278,
        );
        object_279.finish();
    }
    if let Some(var_280) = &input.license_configuration_arns {
        let mut array_281 = object.key("licenseConfigurationArns").start_array();
        for item_282 in var_280 {
            {
                array_281.value().string(item_282);
            }
        }
        array_281.finish();
    }
    if let Some(var_283) = &input.launch_template_configurations {
        let mut array_284 = object.key("launchTemplateConfigurations").start_array();
        for item_285 in var_283 {
            {
                let mut object_286 = array_284.value().start_object();
                crate::json_ser::serialize_structure_crate_model_launch_template_configuration(
                    &mut object_286,
                    item_285,
                );
                object_286.finish();
            }
        }
        array_284.finish();
    }
}

pub fn serialize_structure_crate_model_image_tests_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageTestsConfiguration,
) {
    if let Some(var_287) = &input.image_tests_enabled {
        object.key("imageTestsEnabled").boolean(*var_287);
    }
    if let Some(var_288) = &input.timeout_minutes {
        object.key("timeoutMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_288).into()),
        );
    }
}

pub fn serialize_structure_crate_model_schedule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Schedule,
) {
    if let Some(var_289) = &input.schedule_expression {
        object.key("scheduleExpression").string(var_289);
    }
    if let Some(var_290) = &input.timezone {
        object.key("timezone").string(var_290);
    }
    if let Some(var_291) = &input.pipeline_execution_start_condition {
        object
            .key("pipelineExecutionStartCondition")
            .string(var_291.as_str());
    }
}

pub fn serialize_structure_crate_model_additional_instance_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdditionalInstanceConfiguration,
) {
    if let Some(var_292) = &input.systems_manager_agent {
        let mut object_293 = object.key("systemsManagerAgent").start_object();
        crate::json_ser::serialize_structure_crate_model_systems_manager_agent(
            &mut object_293,
            var_292,
        );
        object_293.finish();
    }
    if let Some(var_294) = &input.user_data_override {
        object.key("userDataOverride").string(var_294);
    }
}

pub fn serialize_structure_crate_model_instance_block_device_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceBlockDeviceMapping,
) {
    if let Some(var_295) = &input.device_name {
        object.key("deviceName").string(var_295);
    }
    if let Some(var_296) = &input.ebs {
        let mut object_297 = object.key("ebs").start_object();
        crate::json_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(
            &mut object_297,
            var_296,
        );
        object_297.finish();
    }
    if let Some(var_298) = &input.virtual_name {
        object.key("virtualName").string(var_298);
    }
    if let Some(var_299) = &input.no_device {
        object.key("noDevice").string(var_299);
    }
}

pub fn serialize_structure_crate_model_logging(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Logging,
) {
    if let Some(var_300) = &input.s3_logs {
        let mut object_301 = object.key("s3Logs").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_logs(&mut object_301, var_300);
        object_301.finish();
    }
}

pub fn serialize_structure_crate_model_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_302) = &input.name {
        object.key("name").string(var_302);
    }
    if let Some(var_303) = &input.values {
        let mut array_304 = object.key("values").start_array();
        for item_305 in var_303 {
            {
                array_304.value().string(item_305);
            }
        }
        array_304.finish();
    }
}

pub fn serialize_structure_crate_model_component_parameter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentParameter,
) {
    if let Some(var_306) = &input.name {
        object.key("name").string(var_306);
    }
    if let Some(var_307) = &input.value {
        let mut array_308 = object.key("value").start_array();
        for item_309 in var_307 {
            {
                array_308.value().string(item_309);
            }
        }
        array_308.finish();
    }
}

pub fn serialize_structure_crate_model_ami_distribution_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AmiDistributionConfiguration,
) {
    if let Some(var_310) = &input.name {
        object.key("name").string(var_310);
    }
    if let Some(var_311) = &input.description {
        object.key("description").string(var_311);
    }
    if let Some(var_312) = &input.target_account_ids {
        let mut array_313 = object.key("targetAccountIds").start_array();
        for item_314 in var_312 {
            {
                array_313.value().string(item_314);
            }
        }
        array_313.finish();
    }
    if let Some(var_315) = &input.ami_tags {
        let mut object_316 = object.key("amiTags").start_object();
        for (key_317, value_318) in var_315 {
            {
                object_316.key(key_317).string(value_318);
            }
        }
        object_316.finish();
    }
    if let Some(var_319) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_319);
    }
    if let Some(var_320) = &input.launch_permission {
        let mut object_321 = object.key("launchPermission").start_object();
        crate::json_ser::serialize_structure_crate_model_launch_permission_configuration(
            &mut object_321,
            var_320,
        );
        object_321.finish();
    }
}

pub fn serialize_structure_crate_model_container_distribution_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerDistributionConfiguration,
) {
    if let Some(var_322) = &input.description {
        object.key("description").string(var_322);
    }
    if let Some(var_323) = &input.container_tags {
        let mut array_324 = object.key("containerTags").start_array();
        for item_325 in var_323 {
            {
                array_324.value().string(item_325);
            }
        }
        array_324.finish();
    }
    if let Some(var_326) = &input.target_repository {
        let mut object_327 = object.key("targetRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_target_container_repository(
            &mut object_327,
            var_326,
        );
        object_327.finish();
    }
}

pub fn serialize_structure_crate_model_launch_template_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LaunchTemplateConfiguration,
) {
    if let Some(var_328) = &input.launch_template_id {
        object.key("launchTemplateId").string(var_328);
    }
    if let Some(var_329) = &input.account_id {
        object.key("accountId").string(var_329);
    }
    if input.set_default_version {
        object
            .key("setDefaultVersion")
            .boolean(input.set_default_version);
    }
}

pub fn serialize_structure_crate_model_systems_manager_agent(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SystemsManagerAgent,
) {
    if let Some(var_330) = &input.uninstall_after_build {
        object.key("uninstallAfterBuild").boolean(*var_330);
    }
}

pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) {
    if let Some(var_331) = &input.encrypted {
        object.key("encrypted").boolean(*var_331);
    }
    if let Some(var_332) = &input.delete_on_termination {
        object.key("deleteOnTermination").boolean(*var_332);
    }
    if let Some(var_333) = &input.iops {
        object.key("iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_333).into()),
        );
    }
    if let Some(var_334) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_334);
    }
    if let Some(var_335) = &input.snapshot_id {
        object.key("snapshotId").string(var_335);
    }
    if let Some(var_336) = &input.volume_size {
        object.key("volumeSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_336).into()),
        );
    }
    if let Some(var_337) = &input.volume_type {
        object.key("volumeType").string(var_337.as_str());
    }
}

pub fn serialize_structure_crate_model_s3_logs(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Logs,
) {
    if let Some(var_338) = &input.s3_bucket_name {
        object.key("s3BucketName").string(var_338);
    }
    if let Some(var_339) = &input.s3_key_prefix {
        object.key("s3KeyPrefix").string(var_339);
    }
}

pub fn serialize_structure_crate_model_launch_permission_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LaunchPermissionConfiguration,
) {
    if let Some(var_340) = &input.user_ids {
        let mut array_341 = object.key("userIds").start_array();
        for item_342 in var_340 {
            {
                array_341.value().string(item_342);
            }
        }
        array_341.finish();
    }
    if let Some(var_343) = &input.user_groups {
        let mut array_344 = object.key("userGroups").start_array();
        for item_345 in var_343 {
            {
                array_344.value().string(item_345);
            }
        }
        array_344.finish();
    }
}
