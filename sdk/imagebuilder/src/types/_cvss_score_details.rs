// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the source of the score, and the factors that determined the adjustments to create the final score.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CvssScoreDetails {
    /// <p>The source for the CVSS score.</p>
    pub score_source: ::std::option::Option<::std::string::String>,
    /// <p>The source of the finding.</p>
    pub cvss_source: ::std::option::Option<::std::string::String>,
    /// <p>The CVSS version that generated the score.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The CVSS score.</p>
    pub score: ::std::option::Option<f64>,
    /// <p>A vector that measures the severity of the vulnerability.</p>
    pub scoring_vector: ::std::option::Option<::std::string::String>,
    /// <p>An object that contains details about an adjustment that Amazon Inspector made to the CVSS score for the finding.</p>
    pub adjustments: ::std::option::Option<::std::vec::Vec<crate::types::CvssScoreAdjustment>>,
}
impl CvssScoreDetails {
    /// <p>The source for the CVSS score.</p>
    pub fn score_source(&self) -> ::std::option::Option<&str> {
        self.score_source.as_deref()
    }
    /// <p>The source of the finding.</p>
    pub fn cvss_source(&self) -> ::std::option::Option<&str> {
        self.cvss_source.as_deref()
    }
    /// <p>The CVSS version that generated the score.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The CVSS score.</p>
    pub fn score(&self) -> ::std::option::Option<f64> {
        self.score
    }
    /// <p>A vector that measures the severity of the vulnerability.</p>
    pub fn scoring_vector(&self) -> ::std::option::Option<&str> {
        self.scoring_vector.as_deref()
    }
    /// <p>An object that contains details about an adjustment that Amazon Inspector made to the CVSS score for the finding.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.adjustments.is_none()`.
    pub fn adjustments(&self) -> &[crate::types::CvssScoreAdjustment] {
        self.adjustments.as_deref().unwrap_or_default()
    }
}
impl CvssScoreDetails {
    /// Creates a new builder-style object to manufacture [`CvssScoreDetails`](crate::types::CvssScoreDetails).
    pub fn builder() -> crate::types::builders::CvssScoreDetailsBuilder {
        crate::types::builders::CvssScoreDetailsBuilder::default()
    }
}

/// A builder for [`CvssScoreDetails`](crate::types::CvssScoreDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CvssScoreDetailsBuilder {
    pub(crate) score_source: ::std::option::Option<::std::string::String>,
    pub(crate) cvss_source: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) score: ::std::option::Option<f64>,
    pub(crate) scoring_vector: ::std::option::Option<::std::string::String>,
    pub(crate) adjustments: ::std::option::Option<::std::vec::Vec<crate::types::CvssScoreAdjustment>>,
}
impl CvssScoreDetailsBuilder {
    /// <p>The source for the CVSS score.</p>
    pub fn score_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.score_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source for the CVSS score.</p>
    pub fn set_score_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.score_source = input;
        self
    }
    /// <p>The source for the CVSS score.</p>
    pub fn get_score_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.score_source
    }
    /// <p>The source of the finding.</p>
    pub fn cvss_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cvss_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source of the finding.</p>
    pub fn set_cvss_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cvss_source = input;
        self
    }
    /// <p>The source of the finding.</p>
    pub fn get_cvss_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.cvss_source
    }
    /// <p>The CVSS version that generated the score.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CVSS version that generated the score.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The CVSS version that generated the score.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The CVSS score.</p>
    pub fn score(mut self, input: f64) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CVSS score.</p>
    pub fn set_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.score = input;
        self
    }
    /// <p>The CVSS score.</p>
    pub fn get_score(&self) -> &::std::option::Option<f64> {
        &self.score
    }
    /// <p>A vector that measures the severity of the vulnerability.</p>
    pub fn scoring_vector(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scoring_vector = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A vector that measures the severity of the vulnerability.</p>
    pub fn set_scoring_vector(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scoring_vector = input;
        self
    }
    /// <p>A vector that measures the severity of the vulnerability.</p>
    pub fn get_scoring_vector(&self) -> &::std::option::Option<::std::string::String> {
        &self.scoring_vector
    }
    /// Appends an item to `adjustments`.
    ///
    /// To override the contents of this collection use [`set_adjustments`](Self::set_adjustments).
    ///
    /// <p>An object that contains details about an adjustment that Amazon Inspector made to the CVSS score for the finding.</p>
    pub fn adjustments(mut self, input: crate::types::CvssScoreAdjustment) -> Self {
        let mut v = self.adjustments.unwrap_or_default();
        v.push(input);
        self.adjustments = ::std::option::Option::Some(v);
        self
    }
    /// <p>An object that contains details about an adjustment that Amazon Inspector made to the CVSS score for the finding.</p>
    pub fn set_adjustments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CvssScoreAdjustment>>) -> Self {
        self.adjustments = input;
        self
    }
    /// <p>An object that contains details about an adjustment that Amazon Inspector made to the CVSS score for the finding.</p>
    pub fn get_adjustments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CvssScoreAdjustment>> {
        &self.adjustments
    }
    /// Consumes the builder and constructs a [`CvssScoreDetails`](crate::types::CvssScoreDetails).
    pub fn build(self) -> crate::types::CvssScoreDetails {
        crate::types::CvssScoreDetails {
            score_source: self.score_source,
            cvss_source: self.cvss_source,
            version: self.version,
            score: self.score,
            scoring_vector: self.scoring_vector,
            adjustments: self.adjustments,
        }
    }
}
