// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container distribution settings for encryption, licensing, and sharing in a specific Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerDistributionConfiguration {
    /// <p>The description of the container distribution configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Tags that are attached to the container distribution configuration.</p>
    pub container_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The destination repository for the container distribution configuration.</p>
    pub target_repository: ::std::option::Option<crate::types::TargetContainerRepository>,
}
impl ContainerDistributionConfiguration {
    /// <p>The description of the container distribution configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Tags that are attached to the container distribution configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_tags.is_none()`.
    pub fn container_tags(&self) -> &[::std::string::String] {
        self.container_tags.as_deref().unwrap_or_default()
    }
    /// <p>The destination repository for the container distribution configuration.</p>
    pub fn target_repository(&self) -> ::std::option::Option<&crate::types::TargetContainerRepository> {
        self.target_repository.as_ref()
    }
}
impl ContainerDistributionConfiguration {
    /// Creates a new builder-style object to manufacture [`ContainerDistributionConfiguration`](crate::types::ContainerDistributionConfiguration).
    pub fn builder() -> crate::types::builders::ContainerDistributionConfigurationBuilder {
        crate::types::builders::ContainerDistributionConfigurationBuilder::default()
    }
}

/// A builder for [`ContainerDistributionConfiguration`](crate::types::ContainerDistributionConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContainerDistributionConfigurationBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) container_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) target_repository: ::std::option::Option<crate::types::TargetContainerRepository>,
}
impl ContainerDistributionConfigurationBuilder {
    /// <p>The description of the container distribution configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the container distribution configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the container distribution configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `container_tags`.
    ///
    /// To override the contents of this collection use [`set_container_tags`](Self::set_container_tags).
    ///
    /// <p>Tags that are attached to the container distribution configuration.</p>
    pub fn container_tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.container_tags.unwrap_or_default();
        v.push(input.into());
        self.container_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags that are attached to the container distribution configuration.</p>
    pub fn set_container_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.container_tags = input;
        self
    }
    /// <p>Tags that are attached to the container distribution configuration.</p>
    pub fn get_container_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.container_tags
    }
    /// <p>The destination repository for the container distribution configuration.</p>
    /// This field is required.
    pub fn target_repository(mut self, input: crate::types::TargetContainerRepository) -> Self {
        self.target_repository = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination repository for the container distribution configuration.</p>
    pub fn set_target_repository(mut self, input: ::std::option::Option<crate::types::TargetContainerRepository>) -> Self {
        self.target_repository = input;
        self
    }
    /// <p>The destination repository for the container distribution configuration.</p>
    pub fn get_target_repository(&self) -> &::std::option::Option<crate::types::TargetContainerRepository> {
        &self.target_repository
    }
    /// Consumes the builder and constructs a [`ContainerDistributionConfiguration`](crate::types::ContainerDistributionConfiguration).
    pub fn build(self) -> crate::types::ContainerDistributionConfiguration {
        crate::types::ContainerDistributionConfiguration {
            description: self.description,
            container_tags: self.container_tags,
            target_repository: self.target_repository,
        }
    }
}
