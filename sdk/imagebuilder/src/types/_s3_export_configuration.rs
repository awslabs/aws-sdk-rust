// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties that configure export from your build instance to a compatible file format for your VM.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ExportConfiguration {
    /// <p>The name of the role that grants VM Import/Export permission to export images to your S3 bucket.</p>
    pub role_name: ::std::string::String,
    /// <p>Export the updated image to one of the following supported disk image formats:</p>
    /// <ul>
    /// <li> <p> <b>Virtual Hard Disk (VHD)</b> – Compatible with Citrix Xen and Microsoft Hyper-V virtualization products.</p> </li>
    /// <li> <p> <b>Stream-optimized ESX Virtual Machine Disk (VMDK)</b> – Compatible with VMware ESX and VMware vSphere versions 4, 5, and 6.</p> </li>
    /// <li> <p> <b>Raw</b> – Raw format.</p> </li>
    /// </ul>
    pub disk_image_format: crate::types::DiskImageFormat,
    /// <p>The S3 bucket in which to store the output disk images for your VM.</p>
    pub s3_bucket: ::std::string::String,
    /// <p>The Amazon S3 path for the bucket where the output disk images for your VM are stored.</p>
    pub s3_prefix: ::std::option::Option<::std::string::String>,
}
impl S3ExportConfiguration {
    /// <p>The name of the role that grants VM Import/Export permission to export images to your S3 bucket.</p>
    pub fn role_name(&self) -> &str {
        use std::ops::Deref;
        self.role_name.deref()
    }
    /// <p>Export the updated image to one of the following supported disk image formats:</p>
    /// <ul>
    /// <li> <p> <b>Virtual Hard Disk (VHD)</b> – Compatible with Citrix Xen and Microsoft Hyper-V virtualization products.</p> </li>
    /// <li> <p> <b>Stream-optimized ESX Virtual Machine Disk (VMDK)</b> – Compatible with VMware ESX and VMware vSphere versions 4, 5, and 6.</p> </li>
    /// <li> <p> <b>Raw</b> – Raw format.</p> </li>
    /// </ul>
    pub fn disk_image_format(&self) -> &crate::types::DiskImageFormat {
        &self.disk_image_format
    }
    /// <p>The S3 bucket in which to store the output disk images for your VM.</p>
    pub fn s3_bucket(&self) -> &str {
        use std::ops::Deref;
        self.s3_bucket.deref()
    }
    /// <p>The Amazon S3 path for the bucket where the output disk images for your VM are stored.</p>
    pub fn s3_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_prefix.as_deref()
    }
}
impl S3ExportConfiguration {
    /// Creates a new builder-style object to manufacture [`S3ExportConfiguration`](crate::types::S3ExportConfiguration).
    pub fn builder() -> crate::types::builders::S3ExportConfigurationBuilder {
        crate::types::builders::S3ExportConfigurationBuilder::default()
    }
}

/// A builder for [`S3ExportConfiguration`](crate::types::S3ExportConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3ExportConfigurationBuilder {
    pub(crate) role_name: ::std::option::Option<::std::string::String>,
    pub(crate) disk_image_format: ::std::option::Option<crate::types::DiskImageFormat>,
    pub(crate) s3_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) s3_prefix: ::std::option::Option<::std::string::String>,
}
impl S3ExportConfigurationBuilder {
    /// <p>The name of the role that grants VM Import/Export permission to export images to your S3 bucket.</p>
    /// This field is required.
    pub fn role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the role that grants VM Import/Export permission to export images to your S3 bucket.</p>
    pub fn set_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_name = input;
        self
    }
    /// <p>The name of the role that grants VM Import/Export permission to export images to your S3 bucket.</p>
    pub fn get_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_name
    }
    /// <p>Export the updated image to one of the following supported disk image formats:</p>
    /// <ul>
    /// <li> <p> <b>Virtual Hard Disk (VHD)</b> – Compatible with Citrix Xen and Microsoft Hyper-V virtualization products.</p> </li>
    /// <li> <p> <b>Stream-optimized ESX Virtual Machine Disk (VMDK)</b> – Compatible with VMware ESX and VMware vSphere versions 4, 5, and 6.</p> </li>
    /// <li> <p> <b>Raw</b> – Raw format.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn disk_image_format(mut self, input: crate::types::DiskImageFormat) -> Self {
        self.disk_image_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>Export the updated image to one of the following supported disk image formats:</p>
    /// <ul>
    /// <li> <p> <b>Virtual Hard Disk (VHD)</b> – Compatible with Citrix Xen and Microsoft Hyper-V virtualization products.</p> </li>
    /// <li> <p> <b>Stream-optimized ESX Virtual Machine Disk (VMDK)</b> – Compatible with VMware ESX and VMware vSphere versions 4, 5, and 6.</p> </li>
    /// <li> <p> <b>Raw</b> – Raw format.</p> </li>
    /// </ul>
    pub fn set_disk_image_format(mut self, input: ::std::option::Option<crate::types::DiskImageFormat>) -> Self {
        self.disk_image_format = input;
        self
    }
    /// <p>Export the updated image to one of the following supported disk image formats:</p>
    /// <ul>
    /// <li> <p> <b>Virtual Hard Disk (VHD)</b> – Compatible with Citrix Xen and Microsoft Hyper-V virtualization products.</p> </li>
    /// <li> <p> <b>Stream-optimized ESX Virtual Machine Disk (VMDK)</b> – Compatible with VMware ESX and VMware vSphere versions 4, 5, and 6.</p> </li>
    /// <li> <p> <b>Raw</b> – Raw format.</p> </li>
    /// </ul>
    pub fn get_disk_image_format(&self) -> &::std::option::Option<crate::types::DiskImageFormat> {
        &self.disk_image_format
    }
    /// <p>The S3 bucket in which to store the output disk images for your VM.</p>
    /// This field is required.
    pub fn s3_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 bucket in which to store the output disk images for your VM.</p>
    pub fn set_s3_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>The S3 bucket in which to store the output disk images for your VM.</p>
    pub fn get_s3_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket
    }
    /// <p>The Amazon S3 path for the bucket where the output disk images for your VM are stored.</p>
    pub fn s3_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 path for the bucket where the output disk images for your VM are stored.</p>
    pub fn set_s3_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_prefix = input;
        self
    }
    /// <p>The Amazon S3 path for the bucket where the output disk images for your VM are stored.</p>
    pub fn get_s3_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_prefix
    }
    /// Consumes the builder and constructs a [`S3ExportConfiguration`](crate::types::S3ExportConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`role_name`](crate::types::builders::S3ExportConfigurationBuilder::role_name)
    /// - [`disk_image_format`](crate::types::builders::S3ExportConfigurationBuilder::disk_image_format)
    /// - [`s3_bucket`](crate::types::builders::S3ExportConfigurationBuilder::s3_bucket)
    pub fn build(self) -> ::std::result::Result<crate::types::S3ExportConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3ExportConfiguration {
            role_name: self.role_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_name",
                    "role_name was not specified but it is required when building S3ExportConfiguration",
                )
            })?,
            disk_image_format: self.disk_image_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "disk_image_format",
                    "disk_image_format was not specified but it is required when building S3ExportConfiguration",
                )
            })?,
            s3_bucket: self.s3_bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_bucket",
                    "s3_bucket was not specified but it is required when building S3ExportConfiguration",
                )
            })?,
            s3_prefix: self.s3_prefix,
        })
    }
}
