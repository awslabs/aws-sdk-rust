// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a container recipe</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerRecipeSummary {
    /// <p>The Amazon Resource Name (ARN) of the container recipe.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>Specifies the type of container, such as "Docker".</p>
    #[doc(hidden)]
    pub container_type: std::option::Option<crate::types::ContainerType>,
    /// <p>The name of the container recipe.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The system platform for the container, such as Windows or Linux.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<crate::types::Platform>,
    /// <p>The owner of the container recipe.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>The base image for the container recipe.</p>
    #[doc(hidden)]
    pub parent_image: std::option::Option<std::string::String>,
    /// <p>The date when this container recipe was created.</p>
    #[doc(hidden)]
    pub date_created: std::option::Option<std::string::String>,
    /// <p>Tags that are attached to the container recipe.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ContainerRecipeSummary {
    /// <p>The Amazon Resource Name (ARN) of the container recipe.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Specifies the type of container, such as "Docker".</p>
    pub fn container_type(&self) -> std::option::Option<&crate::types::ContainerType> {
        self.container_type.as_ref()
    }
    /// <p>The name of the container recipe.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The system platform for the container, such as Windows or Linux.</p>
    pub fn platform(&self) -> std::option::Option<&crate::types::Platform> {
        self.platform.as_ref()
    }
    /// <p>The owner of the container recipe.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The base image for the container recipe.</p>
    pub fn parent_image(&self) -> std::option::Option<&str> {
        self.parent_image.as_deref()
    }
    /// <p>The date when this container recipe was created.</p>
    pub fn date_created(&self) -> std::option::Option<&str> {
        self.date_created.as_deref()
    }
    /// <p>Tags that are attached to the container recipe.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl ContainerRecipeSummary {
    /// Creates a new builder-style object to manufacture [`ContainerRecipeSummary`](crate::types::ContainerRecipeSummary).
    pub fn builder() -> crate::types::builders::ContainerRecipeSummaryBuilder {
        crate::types::builders::ContainerRecipeSummaryBuilder::default()
    }
}

/// A builder for [`ContainerRecipeSummary`](crate::types::ContainerRecipeSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerRecipeSummaryBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) container_type: std::option::Option<crate::types::ContainerType>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) platform: std::option::Option<crate::types::Platform>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) parent_image: std::option::Option<std::string::String>,
    pub(crate) date_created: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ContainerRecipeSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the container recipe.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the container recipe.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Specifies the type of container, such as "Docker".</p>
    pub fn container_type(mut self, input: crate::types::ContainerType) -> Self {
        self.container_type = Some(input);
        self
    }
    /// <p>Specifies the type of container, such as "Docker".</p>
    pub fn set_container_type(
        mut self,
        input: std::option::Option<crate::types::ContainerType>,
    ) -> Self {
        self.container_type = input;
        self
    }
    /// <p>The name of the container recipe.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the container recipe.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The system platform for the container, such as Windows or Linux.</p>
    pub fn platform(mut self, input: crate::types::Platform) -> Self {
        self.platform = Some(input);
        self
    }
    /// <p>The system platform for the container, such as Windows or Linux.</p>
    pub fn set_platform(mut self, input: std::option::Option<crate::types::Platform>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The owner of the container recipe.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The owner of the container recipe.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The base image for the container recipe.</p>
    pub fn parent_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_image = Some(input.into());
        self
    }
    /// <p>The base image for the container recipe.</p>
    pub fn set_parent_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent_image = input;
        self
    }
    /// <p>The date when this container recipe was created.</p>
    pub fn date_created(mut self, input: impl Into<std::string::String>) -> Self {
        self.date_created = Some(input.into());
        self
    }
    /// <p>The date when this container recipe was created.</p>
    pub fn set_date_created(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.date_created = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags that are attached to the container recipe.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Tags that are attached to the container recipe.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerRecipeSummary`](crate::types::ContainerRecipeSummary).
    pub fn build(self) -> crate::types::ContainerRecipeSummary {
        crate::types::ContainerRecipeSummary {
            arn: self.arn,
            container_type: self.container_type,
            name: self.name,
            platform: self.platform,
            owner: self.owner,
            parent_image: self.parent_image,
            date_created: self.date_created,
            tags: self.tags,
        }
    }
}
