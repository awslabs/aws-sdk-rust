// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceConfiguration {
    /// <p>The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.</p>
    #[doc(hidden)]
    pub image: std::option::Option<std::string::String>,
    /// <p>Defines the block devices to attach for building an instance from this Image Builder AMI.</p>
    #[doc(hidden)]
    pub block_device_mappings:
        std::option::Option<std::vec::Vec<crate::types::InstanceBlockDeviceMapping>>,
}
impl InstanceConfiguration {
    /// <p>The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.</p>
    pub fn image(&self) -> std::option::Option<&str> {
        self.image.as_deref()
    }
    /// <p>Defines the block devices to attach for building an instance from this Image Builder AMI.</p>
    pub fn block_device_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::InstanceBlockDeviceMapping]> {
        self.block_device_mappings.as_deref()
    }
}
impl InstanceConfiguration {
    /// Creates a new builder-style object to manufacture [`InstanceConfiguration`](crate::types::InstanceConfiguration).
    pub fn builder() -> crate::types::builders::InstanceConfigurationBuilder {
        crate::types::builders::InstanceConfigurationBuilder::default()
    }
}

/// A builder for [`InstanceConfiguration`](crate::types::InstanceConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceConfigurationBuilder {
    pub(crate) image: std::option::Option<std::string::String>,
    pub(crate) block_device_mappings:
        std::option::Option<std::vec::Vec<crate::types::InstanceBlockDeviceMapping>>,
}
impl InstanceConfigurationBuilder {
    /// <p>The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.</p>
    pub fn image(mut self, input: impl Into<std::string::String>) -> Self {
        self.image = Some(input.into());
        self
    }
    /// <p>The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.</p>
    pub fn set_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image = input;
        self
    }
    /// Appends an item to `block_device_mappings`.
    ///
    /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
    ///
    /// <p>Defines the block devices to attach for building an instance from this Image Builder AMI.</p>
    pub fn block_device_mappings(
        mut self,
        input: crate::types::InstanceBlockDeviceMapping,
    ) -> Self {
        let mut v = self.block_device_mappings.unwrap_or_default();
        v.push(input);
        self.block_device_mappings = Some(v);
        self
    }
    /// <p>Defines the block devices to attach for building an instance from this Image Builder AMI.</p>
    pub fn set_block_device_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InstanceBlockDeviceMapping>>,
    ) -> Self {
        self.block_device_mappings = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceConfiguration`](crate::types::InstanceConfiguration).
    pub fn build(self) -> crate::types::InstanceConfiguration {
        crate::types::InstanceConfiguration {
            image: self.image,
            block_device_mappings: self.block_device_mappings,
        }
    }
}
