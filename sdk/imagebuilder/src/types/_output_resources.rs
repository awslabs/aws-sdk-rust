// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resources produced by this image.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutputResources {
    /// <p>The Amazon EC2 AMIs created by this image.</p>
    pub amis: ::std::option::Option<::std::vec::Vec<crate::types::Ami>>,
    /// <p>Container images that the pipeline has generated and stored in the output repository.</p>
    pub containers: ::std::option::Option<::std::vec::Vec<crate::types::Container>>,
}
impl OutputResources {
    /// <p>The Amazon EC2 AMIs created by this image.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.amis.is_none()`.
    pub fn amis(&self) -> &[crate::types::Ami] {
        self.amis.as_deref().unwrap_or_default()
    }
    /// <p>Container images that the pipeline has generated and stored in the output repository.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.containers.is_none()`.
    pub fn containers(&self) -> &[crate::types::Container] {
        self.containers.as_deref().unwrap_or_default()
    }
}
impl OutputResources {
    /// Creates a new builder-style object to manufacture [`OutputResources`](crate::types::OutputResources).
    pub fn builder() -> crate::types::builders::OutputResourcesBuilder {
        crate::types::builders::OutputResourcesBuilder::default()
    }
}

/// A builder for [`OutputResources`](crate::types::OutputResources).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutputResourcesBuilder {
    pub(crate) amis: ::std::option::Option<::std::vec::Vec<crate::types::Ami>>,
    pub(crate) containers: ::std::option::Option<::std::vec::Vec<crate::types::Container>>,
}
impl OutputResourcesBuilder {
    /// Appends an item to `amis`.
    ///
    /// To override the contents of this collection use [`set_amis`](Self::set_amis).
    ///
    /// <p>The Amazon EC2 AMIs created by this image.</p>
    pub fn amis(mut self, input: crate::types::Ami) -> Self {
        let mut v = self.amis.unwrap_or_default();
        v.push(input);
        self.amis = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon EC2 AMIs created by this image.</p>
    pub fn set_amis(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Ami>>) -> Self {
        self.amis = input;
        self
    }
    /// <p>The Amazon EC2 AMIs created by this image.</p>
    pub fn get_amis(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Ami>> {
        &self.amis
    }
    /// Appends an item to `containers`.
    ///
    /// To override the contents of this collection use [`set_containers`](Self::set_containers).
    ///
    /// <p>Container images that the pipeline has generated and stored in the output repository.</p>
    pub fn containers(mut self, input: crate::types::Container) -> Self {
        let mut v = self.containers.unwrap_or_default();
        v.push(input);
        self.containers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Container images that the pipeline has generated and stored in the output repository.</p>
    pub fn set_containers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Container>>) -> Self {
        self.containers = input;
        self
    }
    /// <p>Container images that the pipeline has generated and stored in the output repository.</p>
    pub fn get_containers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Container>> {
        &self.containers
    }
    /// Consumes the builder and constructs a [`OutputResources`](crate::types::OutputResources).
    pub fn build(self) -> crate::types::OutputResources {
        crate::types::OutputResources {
            amis: self.amis,
            containers: self.containers,
        }
    }
}
