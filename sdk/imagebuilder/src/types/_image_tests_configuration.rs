// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageTestsConfiguration {
    /// <p>Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.</p>
    #[doc(hidden)]
    pub image_tests_enabled: std::option::Option<bool>,
    /// <p>The maximum time in minutes that tests are permitted to run.</p> <note>
    /// <p>The timeoutMinutes attribute is not currently active. This value is ignored.</p>
    /// </note>
    #[doc(hidden)]
    pub timeout_minutes: std::option::Option<i32>,
}
impl ImageTestsConfiguration {
    /// <p>Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.</p>
    pub fn image_tests_enabled(&self) -> std::option::Option<bool> {
        self.image_tests_enabled
    }
    /// <p>The maximum time in minutes that tests are permitted to run.</p> <note>
    /// <p>The timeoutMinutes attribute is not currently active. This value is ignored.</p>
    /// </note>
    pub fn timeout_minutes(&self) -> std::option::Option<i32> {
        self.timeout_minutes
    }
}
impl ImageTestsConfiguration {
    /// Creates a new builder-style object to manufacture [`ImageTestsConfiguration`](crate::types::ImageTestsConfiguration).
    pub fn builder() -> crate::types::builders::ImageTestsConfigurationBuilder {
        crate::types::builders::ImageTestsConfigurationBuilder::default()
    }
}

/// A builder for [`ImageTestsConfiguration`](crate::types::ImageTestsConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageTestsConfigurationBuilder {
    pub(crate) image_tests_enabled: std::option::Option<bool>,
    pub(crate) timeout_minutes: std::option::Option<i32>,
}
impl ImageTestsConfigurationBuilder {
    /// <p>Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.</p>
    pub fn image_tests_enabled(mut self, input: bool) -> Self {
        self.image_tests_enabled = Some(input);
        self
    }
    /// <p>Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.</p>
    pub fn set_image_tests_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.image_tests_enabled = input;
        self
    }
    /// <p>The maximum time in minutes that tests are permitted to run.</p> <note>
    /// <p>The timeoutMinutes attribute is not currently active. This value is ignored.</p>
    /// </note>
    pub fn timeout_minutes(mut self, input: i32) -> Self {
        self.timeout_minutes = Some(input);
        self
    }
    /// <p>The maximum time in minutes that tests are permitted to run.</p> <note>
    /// <p>The timeoutMinutes attribute is not currently active. This value is ignored.</p>
    /// </note>
    pub fn set_timeout_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_minutes = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageTestsConfiguration`](crate::types::ImageTestsConfiguration).
    pub fn build(self) -> crate::types::ImageTestsConfiguration {
        crate::types::ImageTestsConfiguration {
            image_tests_enabled: self.image_tests_enabled,
            timeout_minutes: self.timeout_minutes,
        }
    }
}
