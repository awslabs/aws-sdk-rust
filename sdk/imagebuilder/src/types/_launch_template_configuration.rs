// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifies an Amazon EC2 launch template to use for a specific account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LaunchTemplateConfiguration {
    /// <p>Identifies the Amazon EC2 launch template to use.</p>
    #[doc(hidden)]
    pub launch_template_id: std::option::Option<std::string::String>,
    /// <p>The account ID that this configuration applies to.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>Set the specified Amazon EC2 launch template as the default launch template for the specified account.</p>
    #[doc(hidden)]
    pub set_default_version: bool,
}
impl LaunchTemplateConfiguration {
    /// <p>Identifies the Amazon EC2 launch template to use.</p>
    pub fn launch_template_id(&self) -> std::option::Option<&str> {
        self.launch_template_id.as_deref()
    }
    /// <p>The account ID that this configuration applies to.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Set the specified Amazon EC2 launch template as the default launch template for the specified account.</p>
    pub fn set_default_version(&self) -> bool {
        self.set_default_version
    }
}
impl LaunchTemplateConfiguration {
    /// Creates a new builder-style object to manufacture [`LaunchTemplateConfiguration`](crate::types::LaunchTemplateConfiguration).
    pub fn builder() -> crate::types::builders::LaunchTemplateConfigurationBuilder {
        crate::types::builders::LaunchTemplateConfigurationBuilder::default()
    }
}

/// A builder for [`LaunchTemplateConfiguration`](crate::types::LaunchTemplateConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LaunchTemplateConfigurationBuilder {
    pub(crate) launch_template_id: std::option::Option<std::string::String>,
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) set_default_version: std::option::Option<bool>,
}
impl LaunchTemplateConfigurationBuilder {
    /// <p>Identifies the Amazon EC2 launch template to use.</p>
    pub fn launch_template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch_template_id = Some(input.into());
        self
    }
    /// <p>Identifies the Amazon EC2 launch template to use.</p>
    pub fn set_launch_template_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.launch_template_id = input;
        self
    }
    /// <p>The account ID that this configuration applies to.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The account ID that this configuration applies to.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Set the specified Amazon EC2 launch template as the default launch template for the specified account.</p>
    pub fn set_default_version(mut self, input: bool) -> Self {
        self.set_default_version = Some(input);
        self
    }
    /// <p>Set the specified Amazon EC2 launch template as the default launch template for the specified account.</p>
    pub fn set_set_default_version(mut self, input: std::option::Option<bool>) -> Self {
        self.set_default_version = input;
        self
    }
    /// Consumes the builder and constructs a [`LaunchTemplateConfiguration`](crate::types::LaunchTemplateConfiguration).
    pub fn build(self) -> crate::types::LaunchTemplateConfiguration {
        crate::types::LaunchTemplateConfiguration {
            launch_template_id: self.launch_template_id,
            account_id: self.account_id,
            set_default_version: self.set_default_version.unwrap_or_default(),
        }
    }
}
