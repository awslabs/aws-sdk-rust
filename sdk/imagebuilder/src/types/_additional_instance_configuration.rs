// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>In addition to your infrastructure configuration, these settings provide an extra layer of control over your build instances. You can also specify commands to run on launch for all of your build instances.</p>
/// <p>Image Builder does not automatically install the Systems Manager agent on Windows instances. If your base image includes the Systems Manager agent, then the AMI that you create will also include the agent. For Linux instances, if the base image does not already include the Systems Manager agent, Image Builder installs it. For Linux instances where Image Builder installs the Systems Manager agent, you can choose whether to keep it for the AMI that you create.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdditionalInstanceConfiguration {
    /// <p>Contains settings for the Systems Manager agent on your build instance.</p>
    #[doc(hidden)]
    pub systems_manager_agent: std::option::Option<crate::types::SystemsManagerAgent>,
    /// <p>Use this property to provide commands or a command script to run when you launch your build instance.</p>
    /// <p>The userDataOverride property replaces any commands that Image Builder might have added to ensure that Systems Manager is installed on your Linux build instance. If you override the user data, make sure that you add commands to install Systems Manager, if it is not pre-installed on your base image.</p> <note>
    /// <p>The user data is always base 64 encoded. For example, the following commands are encoded as <code>IyEvYmluL2Jhc2gKbWtkaXIgLXAgL3Zhci9iYi8KdG91Y2ggL3Zhci$</code>:</p>
    /// <p> <i>#!/bin/bash</i> </p>
    /// <p>mkdir -p /var/bb/</p>
    /// <p>touch /var</p>
    /// </note>
    #[doc(hidden)]
    pub user_data_override: std::option::Option<std::string::String>,
}
impl AdditionalInstanceConfiguration {
    /// <p>Contains settings for the Systems Manager agent on your build instance.</p>
    pub fn systems_manager_agent(&self) -> std::option::Option<&crate::types::SystemsManagerAgent> {
        self.systems_manager_agent.as_ref()
    }
    /// <p>Use this property to provide commands or a command script to run when you launch your build instance.</p>
    /// <p>The userDataOverride property replaces any commands that Image Builder might have added to ensure that Systems Manager is installed on your Linux build instance. If you override the user data, make sure that you add commands to install Systems Manager, if it is not pre-installed on your base image.</p> <note>
    /// <p>The user data is always base 64 encoded. For example, the following commands are encoded as <code>IyEvYmluL2Jhc2gKbWtkaXIgLXAgL3Zhci9iYi8KdG91Y2ggL3Zhci$</code>:</p>
    /// <p> <i>#!/bin/bash</i> </p>
    /// <p>mkdir -p /var/bb/</p>
    /// <p>touch /var</p>
    /// </note>
    pub fn user_data_override(&self) -> std::option::Option<&str> {
        self.user_data_override.as_deref()
    }
}
impl AdditionalInstanceConfiguration {
    /// Creates a new builder-style object to manufacture [`AdditionalInstanceConfiguration`](crate::types::AdditionalInstanceConfiguration).
    pub fn builder() -> crate::types::builders::AdditionalInstanceConfigurationBuilder {
        crate::types::builders::AdditionalInstanceConfigurationBuilder::default()
    }
}

/// A builder for [`AdditionalInstanceConfiguration`](crate::types::AdditionalInstanceConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AdditionalInstanceConfigurationBuilder {
    pub(crate) systems_manager_agent: std::option::Option<crate::types::SystemsManagerAgent>,
    pub(crate) user_data_override: std::option::Option<std::string::String>,
}
impl AdditionalInstanceConfigurationBuilder {
    /// <p>Contains settings for the Systems Manager agent on your build instance.</p>
    pub fn systems_manager_agent(mut self, input: crate::types::SystemsManagerAgent) -> Self {
        self.systems_manager_agent = Some(input);
        self
    }
    /// <p>Contains settings for the Systems Manager agent on your build instance.</p>
    pub fn set_systems_manager_agent(
        mut self,
        input: std::option::Option<crate::types::SystemsManagerAgent>,
    ) -> Self {
        self.systems_manager_agent = input;
        self
    }
    /// <p>Use this property to provide commands or a command script to run when you launch your build instance.</p>
    /// <p>The userDataOverride property replaces any commands that Image Builder might have added to ensure that Systems Manager is installed on your Linux build instance. If you override the user data, make sure that you add commands to install Systems Manager, if it is not pre-installed on your base image.</p> <note>
    /// <p>The user data is always base 64 encoded. For example, the following commands are encoded as <code>IyEvYmluL2Jhc2gKbWtkaXIgLXAgL3Zhci9iYi8KdG91Y2ggL3Zhci$</code>:</p>
    /// <p> <i>#!/bin/bash</i> </p>
    /// <p>mkdir -p /var/bb/</p>
    /// <p>touch /var</p>
    /// </note>
    pub fn user_data_override(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_data_override = Some(input.into());
        self
    }
    /// <p>Use this property to provide commands or a command script to run when you launch your build instance.</p>
    /// <p>The userDataOverride property replaces any commands that Image Builder might have added to ensure that Systems Manager is installed on your Linux build instance. If you override the user data, make sure that you add commands to install Systems Manager, if it is not pre-installed on your base image.</p> <note>
    /// <p>The user data is always base 64 encoded. For example, the following commands are encoded as <code>IyEvYmluL2Jhc2gKbWtkaXIgLXAgL3Zhci9iYi8KdG91Y2ggL3Zhci$</code>:</p>
    /// <p> <i>#!/bin/bash</i> </p>
    /// <p>mkdir -p /var/bb/</p>
    /// <p>touch /var</p>
    /// </note>
    pub fn set_user_data_override(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.user_data_override = input;
        self
    }
    /// Consumes the builder and constructs a [`AdditionalInstanceConfiguration`](crate::types::AdditionalInstanceConfiguration).
    pub fn build(self) -> crate::types::AdditionalInstanceConfiguration {
        crate::types::AdditionalInstanceConfiguration {
            systems_manager_agent: self.systems_manager_agent,
            user_data_override: self.user_data_override,
        }
    }
}
