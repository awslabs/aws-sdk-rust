// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Image state shows the image status and the reason for that status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageState {
    /// <p>The status of the image.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ImageStatus>,
    /// <p>The reason for the image's status.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
}
impl ImageState {
    /// <p>The status of the image.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ImageStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the image's status.</p>
    pub fn reason(&self) -> std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl ImageState {
    /// Creates a new builder-style object to manufacture [`ImageState`](crate::types::ImageState).
    pub fn builder() -> crate::types::builders::ImageStateBuilder {
        crate::types::builders::ImageStateBuilder::default()
    }
}

/// A builder for [`ImageState`](crate::types::ImageState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageStateBuilder {
    pub(crate) status: std::option::Option<crate::types::ImageStatus>,
    pub(crate) reason: std::option::Option<std::string::String>,
}
impl ImageStateBuilder {
    /// <p>The status of the image.</p>
    pub fn status(mut self, input: crate::types::ImageStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the image.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ImageStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The reason for the image's status.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p>The reason for the image's status.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageState`](crate::types::ImageState).
    pub fn build(self) -> crate::types::ImageState {
        crate::types::ImageState {
            status: self.status,
            reason: self.reason,
        }
    }
}
