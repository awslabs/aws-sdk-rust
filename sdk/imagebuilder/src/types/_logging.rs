// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Logging configuration defines where Image Builder uploads your logs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Logging {
    /// <p>The Amazon S3 logging configuration.</p>
    #[doc(hidden)]
    pub s3_logs: std::option::Option<crate::types::S3Logs>,
}
impl Logging {
    /// <p>The Amazon S3 logging configuration.</p>
    pub fn s3_logs(&self) -> std::option::Option<&crate::types::S3Logs> {
        self.s3_logs.as_ref()
    }
}
impl Logging {
    /// Creates a new builder-style object to manufacture [`Logging`](crate::types::Logging).
    pub fn builder() -> crate::types::builders::LoggingBuilder {
        crate::types::builders::LoggingBuilder::default()
    }
}

/// A builder for [`Logging`](crate::types::Logging).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoggingBuilder {
    pub(crate) s3_logs: std::option::Option<crate::types::S3Logs>,
}
impl LoggingBuilder {
    /// <p>The Amazon S3 logging configuration.</p>
    pub fn s3_logs(mut self, input: crate::types::S3Logs) -> Self {
        self.s3_logs = Some(input);
        self
    }
    /// <p>The Amazon S3 logging configuration.</p>
    pub fn set_s3_logs(mut self, input: std::option::Option<crate::types::S3Logs>) -> Self {
        self.s3_logs = input;
        self
    }
    /// Consumes the builder and constructs a [`Logging`](crate::types::Logging).
    pub fn build(self) -> crate::types::Logging {
        crate::types::Logging {
            s3_logs: self.s3_logs,
        }
    }
}
