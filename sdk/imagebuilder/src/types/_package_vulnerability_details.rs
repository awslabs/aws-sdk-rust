// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about package vulnerability findings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageVulnerabilityDetails {
    /// <p>A unique identifier for this vulnerability.</p>
    pub vulnerability_id: ::std::string::String,
    /// <p>The packages that this vulnerability impacts.</p>
    pub vulnerable_packages: ::std::option::Option<::std::vec::Vec<crate::types::VulnerablePackage>>,
    /// <p>The source of the vulnerability information.</p>
    pub source: ::std::option::Option<::std::string::String>,
    /// <p>CVSS scores for one or more vulnerabilities that Amazon Inspector identified for a package.</p>
    pub cvss: ::std::option::Option<::std::vec::Vec<crate::types::CvssScore>>,
    /// <p>Vulnerabilities that are often related to the findings for the package.</p>
    pub related_vulnerabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A link to the source of the vulnerability information.</p>
    pub source_url: ::std::option::Option<::std::string::String>,
    /// <p>The severity that the vendor assigned to this vulnerability type.</p>
    pub vendor_severity: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when this vulnerability was first added to the vendor's database.</p>
    pub vendor_created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the vendor last updated this vulnerability in their database.</p>
    pub vendor_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Links to web pages that contain details about the vulnerabilities that Amazon Inspector identified for the package.</p>
    pub reference_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PackageVulnerabilityDetails {
    /// <p>A unique identifier for this vulnerability.</p>
    pub fn vulnerability_id(&self) -> &str {
        use std::ops::Deref;
        self.vulnerability_id.deref()
    }
    /// <p>The packages that this vulnerability impacts.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vulnerable_packages.is_none()`.
    pub fn vulnerable_packages(&self) -> &[crate::types::VulnerablePackage] {
        self.vulnerable_packages.as_deref().unwrap_or_default()
    }
    /// <p>The source of the vulnerability information.</p>
    pub fn source(&self) -> ::std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>CVSS scores for one or more vulnerabilities that Amazon Inspector identified for a package.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cvss.is_none()`.
    pub fn cvss(&self) -> &[crate::types::CvssScore] {
        self.cvss.as_deref().unwrap_or_default()
    }
    /// <p>Vulnerabilities that are often related to the findings for the package.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.related_vulnerabilities.is_none()`.
    pub fn related_vulnerabilities(&self) -> &[::std::string::String] {
        self.related_vulnerabilities.as_deref().unwrap_or_default()
    }
    /// <p>A link to the source of the vulnerability information.</p>
    pub fn source_url(&self) -> ::std::option::Option<&str> {
        self.source_url.as_deref()
    }
    /// <p>The severity that the vendor assigned to this vulnerability type.</p>
    pub fn vendor_severity(&self) -> ::std::option::Option<&str> {
        self.vendor_severity.as_deref()
    }
    /// <p>The date and time when this vulnerability was first added to the vendor's database.</p>
    pub fn vendor_created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.vendor_created_at.as_ref()
    }
    /// <p>The date and time when the vendor last updated this vulnerability in their database.</p>
    pub fn vendor_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.vendor_updated_at.as_ref()
    }
    /// <p>Links to web pages that contain details about the vulnerabilities that Amazon Inspector identified for the package.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reference_urls.is_none()`.
    pub fn reference_urls(&self) -> &[::std::string::String] {
        self.reference_urls.as_deref().unwrap_or_default()
    }
}
impl PackageVulnerabilityDetails {
    /// Creates a new builder-style object to manufacture [`PackageVulnerabilityDetails`](crate::types::PackageVulnerabilityDetails).
    pub fn builder() -> crate::types::builders::PackageVulnerabilityDetailsBuilder {
        crate::types::builders::PackageVulnerabilityDetailsBuilder::default()
    }
}

/// A builder for [`PackageVulnerabilityDetails`](crate::types::PackageVulnerabilityDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PackageVulnerabilityDetailsBuilder {
    pub(crate) vulnerability_id: ::std::option::Option<::std::string::String>,
    pub(crate) vulnerable_packages: ::std::option::Option<::std::vec::Vec<crate::types::VulnerablePackage>>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) cvss: ::std::option::Option<::std::vec::Vec<crate::types::CvssScore>>,
    pub(crate) related_vulnerabilities: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) source_url: ::std::option::Option<::std::string::String>,
    pub(crate) vendor_severity: ::std::option::Option<::std::string::String>,
    pub(crate) vendor_created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) vendor_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) reference_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PackageVulnerabilityDetailsBuilder {
    /// <p>A unique identifier for this vulnerability.</p>
    /// This field is required.
    pub fn vulnerability_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vulnerability_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for this vulnerability.</p>
    pub fn set_vulnerability_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vulnerability_id = input;
        self
    }
    /// <p>A unique identifier for this vulnerability.</p>
    pub fn get_vulnerability_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vulnerability_id
    }
    /// Appends an item to `vulnerable_packages`.
    ///
    /// To override the contents of this collection use [`set_vulnerable_packages`](Self::set_vulnerable_packages).
    ///
    /// <p>The packages that this vulnerability impacts.</p>
    pub fn vulnerable_packages(mut self, input: crate::types::VulnerablePackage) -> Self {
        let mut v = self.vulnerable_packages.unwrap_or_default();
        v.push(input);
        self.vulnerable_packages = ::std::option::Option::Some(v);
        self
    }
    /// <p>The packages that this vulnerability impacts.</p>
    pub fn set_vulnerable_packages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VulnerablePackage>>) -> Self {
        self.vulnerable_packages = input;
        self
    }
    /// <p>The packages that this vulnerability impacts.</p>
    pub fn get_vulnerable_packages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VulnerablePackage>> {
        &self.vulnerable_packages
    }
    /// <p>The source of the vulnerability information.</p>
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source of the vulnerability information.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the vulnerability information.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// Appends an item to `cvss`.
    ///
    /// To override the contents of this collection use [`set_cvss`](Self::set_cvss).
    ///
    /// <p>CVSS scores for one or more vulnerabilities that Amazon Inspector identified for a package.</p>
    pub fn cvss(mut self, input: crate::types::CvssScore) -> Self {
        let mut v = self.cvss.unwrap_or_default();
        v.push(input);
        self.cvss = ::std::option::Option::Some(v);
        self
    }
    /// <p>CVSS scores for one or more vulnerabilities that Amazon Inspector identified for a package.</p>
    pub fn set_cvss(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CvssScore>>) -> Self {
        self.cvss = input;
        self
    }
    /// <p>CVSS scores for one or more vulnerabilities that Amazon Inspector identified for a package.</p>
    pub fn get_cvss(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CvssScore>> {
        &self.cvss
    }
    /// Appends an item to `related_vulnerabilities`.
    ///
    /// To override the contents of this collection use [`set_related_vulnerabilities`](Self::set_related_vulnerabilities).
    ///
    /// <p>Vulnerabilities that are often related to the findings for the package.</p>
    pub fn related_vulnerabilities(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.related_vulnerabilities.unwrap_or_default();
        v.push(input.into());
        self.related_vulnerabilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>Vulnerabilities that are often related to the findings for the package.</p>
    pub fn set_related_vulnerabilities(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.related_vulnerabilities = input;
        self
    }
    /// <p>Vulnerabilities that are often related to the findings for the package.</p>
    pub fn get_related_vulnerabilities(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.related_vulnerabilities
    }
    /// <p>A link to the source of the vulnerability information.</p>
    pub fn source_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A link to the source of the vulnerability information.</p>
    pub fn set_source_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_url = input;
        self
    }
    /// <p>A link to the source of the vulnerability information.</p>
    pub fn get_source_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_url
    }
    /// <p>The severity that the vendor assigned to this vulnerability type.</p>
    pub fn vendor_severity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vendor_severity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The severity that the vendor assigned to this vulnerability type.</p>
    pub fn set_vendor_severity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vendor_severity = input;
        self
    }
    /// <p>The severity that the vendor assigned to this vulnerability type.</p>
    pub fn get_vendor_severity(&self) -> &::std::option::Option<::std::string::String> {
        &self.vendor_severity
    }
    /// <p>The date and time when this vulnerability was first added to the vendor's database.</p>
    pub fn vendor_created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.vendor_created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when this vulnerability was first added to the vendor's database.</p>
    pub fn set_vendor_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.vendor_created_at = input;
        self
    }
    /// <p>The date and time when this vulnerability was first added to the vendor's database.</p>
    pub fn get_vendor_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.vendor_created_at
    }
    /// <p>The date and time when the vendor last updated this vulnerability in their database.</p>
    pub fn vendor_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.vendor_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the vendor last updated this vulnerability in their database.</p>
    pub fn set_vendor_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.vendor_updated_at = input;
        self
    }
    /// <p>The date and time when the vendor last updated this vulnerability in their database.</p>
    pub fn get_vendor_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.vendor_updated_at
    }
    /// Appends an item to `reference_urls`.
    ///
    /// To override the contents of this collection use [`set_reference_urls`](Self::set_reference_urls).
    ///
    /// <p>Links to web pages that contain details about the vulnerabilities that Amazon Inspector identified for the package.</p>
    pub fn reference_urls(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.reference_urls.unwrap_or_default();
        v.push(input.into());
        self.reference_urls = ::std::option::Option::Some(v);
        self
    }
    /// <p>Links to web pages that contain details about the vulnerabilities that Amazon Inspector identified for the package.</p>
    pub fn set_reference_urls(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.reference_urls = input;
        self
    }
    /// <p>Links to web pages that contain details about the vulnerabilities that Amazon Inspector identified for the package.</p>
    pub fn get_reference_urls(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.reference_urls
    }
    /// Consumes the builder and constructs a [`PackageVulnerabilityDetails`](crate::types::PackageVulnerabilityDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`vulnerability_id`](crate::types::builders::PackageVulnerabilityDetailsBuilder::vulnerability_id)
    pub fn build(self) -> ::std::result::Result<crate::types::PackageVulnerabilityDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PackageVulnerabilityDetails {
            vulnerability_id: self.vulnerability_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "vulnerability_id",
                    "vulnerability_id was not specified but it is required when building PackageVulnerabilityDetails",
                )
            })?,
            vulnerable_packages: self.vulnerable_packages,
            source: self.source,
            cvss: self.cvss,
            related_vulnerabilities: self.related_vulnerabilities,
            source_url: self.source_url,
            vendor_severity: self.vendor_severity,
            vendor_created_at: self.vendor_created_at,
            vendor_updated_at: self.vendor_updated_at,
            reference_urls: self.reference_urls,
        })
    }
}
