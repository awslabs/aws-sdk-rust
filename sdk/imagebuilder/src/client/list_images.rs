// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListImages`](crate::client::fluent_builders::ListImages) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListImages::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`owner(Ownership)`](crate::client::fluent_builders::ListImages::owner) / [`set_owner(Option<Ownership>)`](crate::client::fluent_builders::ListImages::set_owner): <p>The owner defines which images you want to list. By default, this request will only show images owned by your account. You can use this field to specify if you want to view images owned by yourself, by Amazon, or those images that have been shared with you by other customers.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListImages::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListImages::set_filters): <p>Use the following filters to streamline results:</p>  <ul>   <li> <p> <code>name</code> </p> </li>   <li> <p> <code>osVersion</code> </p> </li>   <li> <p> <code>platform</code> </p> </li>   <li> <p> <code>type</code> </p> </li>   <li> <p> <code>version</code> </p> </li>  </ul>
    ///   - [`by_name(bool)`](crate::client::fluent_builders::ListImages::by_name) / [`set_by_name(bool)`](crate::client::fluent_builders::ListImages::set_by_name): <p>Requests a list of images with a specific recipe name.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListImages::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListImages::set_max_results): <p>The maximum items to return in a request.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListImages::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListImages::set_next_token): <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    ///   - [`include_deprecated(bool)`](crate::client::fluent_builders::ListImages::include_deprecated) / [`set_include_deprecated(Option<bool>)`](crate::client::fluent_builders::ListImages::set_include_deprecated): <p>Includes deprecated images in the response list.</p>
    /// - On success, responds with [`ListImagesOutput`](crate::output::ListImagesOutput) with field(s):
    ///   - [`request_id(Option<String>)`](crate::output::ListImagesOutput::request_id): <p>The request ID that uniquely identifies this request.</p>
    ///   - [`image_version_list(Option<Vec<ImageVersion>>)`](crate::output::ListImagesOutput::image_version_list): <p>The list of image semantic versions.</p> <note>   <p>The semantic version has four nodes: <major>    .    <minor>     .     <patch>      /      <build>       . You can assign values for the first three, and can filter on all of them.      </build>     </patch>    </minor>   </major></p>   <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p>  </note>
    ///   - [`next_token(Option<String>)`](crate::output::ListImagesOutput::next_token): <p>The next token used for paginated responses. When this is not empty, there are additional elements that the service has not included in this request. Use this token with the next request to retrieve additional objects.</p>
    /// - On failure, responds with [`SdkError<ListImagesError>`](crate::error::ListImagesError)
    pub fn list_images(&self) -> crate::client::fluent_builders::ListImages {
        crate::client::fluent_builders::ListImages::new(self.handle.clone())
    }
}
