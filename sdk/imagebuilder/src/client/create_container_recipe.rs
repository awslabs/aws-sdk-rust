// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateContainerRecipe`](crate::client::fluent_builders::CreateContainerRecipe) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`container_type(ContainerType)`](crate::client::fluent_builders::CreateContainerRecipe::container_type) / [`set_container_type(Option<ContainerType>)`](crate::client::fluent_builders::CreateContainerRecipe::set_container_type): <p>The type of container to create.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_name): <p>The name of the container recipe.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_description): <p>The description of the container recipe.</p>
    ///   - [`semantic_version(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::semantic_version) / [`set_semantic_version(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_semantic_version): <p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note>   <p>The semantic version has four nodes: <major>    .    <minor>     .     <patch>      /      <build>       . You can assign values for the first three, and can filter on all of them.      </build>     </patch>    </minor>   </major></p>   <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p>   <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p>  </note>
    ///   - [`components(Vec<ComponentConfiguration>)`](crate::client::fluent_builders::CreateContainerRecipe::components) / [`set_components(Option<Vec<ComponentConfiguration>>)`](crate::client::fluent_builders::CreateContainerRecipe::set_components): <p>Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.</p>
    ///   - [`instance_configuration(InstanceConfiguration)`](crate::client::fluent_builders::CreateContainerRecipe::instance_configuration) / [`set_instance_configuration(Option<InstanceConfiguration>)`](crate::client::fluent_builders::CreateContainerRecipe::set_instance_configuration): <p>A group of options that can be used to configure an instance for building and testing container images.</p>
    ///   - [`dockerfile_template_data(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::dockerfile_template_data) / [`set_dockerfile_template_data(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_dockerfile_template_data): <p>The Dockerfile template used to build your image as an inline data blob.</p>
    ///   - [`dockerfile_template_uri(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::dockerfile_template_uri) / [`set_dockerfile_template_uri(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_dockerfile_template_uri): <p>The Amazon S3 URI for the Dockerfile that will be used to build your container image.</p>
    ///   - [`platform_override(Platform)`](crate::client::fluent_builders::CreateContainerRecipe::platform_override) / [`set_platform_override(Option<Platform>)`](crate::client::fluent_builders::CreateContainerRecipe::set_platform_override): <p>Specifies the operating system platform when you use a custom base image.</p>
    ///   - [`image_os_version_override(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::image_os_version_override) / [`set_image_os_version_override(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_image_os_version_override): <p>Specifies the operating system version for the base image.</p>
    ///   - [`parent_image(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::parent_image) / [`set_parent_image(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_parent_image): <p>The base image for the container recipe.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateContainerRecipe::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateContainerRecipe::set_tags): <p>Tags that are attached to the container recipe.</p>
    ///   - [`working_directory(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::working_directory) / [`set_working_directory(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_working_directory): <p>The working directory for use during build and test workflows.</p>
    ///   - [`target_repository(TargetContainerRepository)`](crate::client::fluent_builders::CreateContainerRecipe::target_repository) / [`set_target_repository(Option<TargetContainerRepository>)`](crate::client::fluent_builders::CreateContainerRecipe::set_target_repository): <p>The destination repository for the container image.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_kms_key_id): <p>Identifies which KMS key is used to encrypt the container image.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateContainerRecipe::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateContainerRecipe::set_client_token): <p>The client token used to make this request idempotent.</p>
    /// - On success, responds with [`CreateContainerRecipeOutput`](crate::output::CreateContainerRecipeOutput) with field(s):
    ///   - [`request_id(Option<String>)`](crate::output::CreateContainerRecipeOutput::request_id): <p>The request ID that uniquely identifies this request.</p>
    ///   - [`client_token(Option<String>)`](crate::output::CreateContainerRecipeOutput::client_token): <p>The client token used to make this request idempotent.</p>
    ///   - [`container_recipe_arn(Option<String>)`](crate::output::CreateContainerRecipeOutput::container_recipe_arn): <p>Returns the Amazon Resource Name (ARN) of the container recipe that the request created.</p>
    /// - On failure, responds with [`SdkError<CreateContainerRecipeError>`](crate::error::CreateContainerRecipeError)
    pub fn create_container_recipe(&self) -> crate::client::fluent_builders::CreateContainerRecipe {
        crate::client::fluent_builders::CreateContainerRecipe::new(self.handle.clone())
    }
}
