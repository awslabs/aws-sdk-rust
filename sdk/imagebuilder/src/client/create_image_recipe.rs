// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateImageRecipe`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_name): <p> The name of the image recipe.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_description): <p> The description of the image recipe.</p>
    ///   - [`semantic_version(impl Into<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::semantic_version) / [`set_semantic_version(Option<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_semantic_version): <p>The semantic version of the image recipe. This version follows the semantic version syntax.</p> <note>   <p>The semantic version has four nodes: <major>    .    <minor>     .     <patch>      /      <build>       . You can assign values for the first three, and can filter on all of them.      </build>     </patch>    </minor>   </major></p>   <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p>   <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p>  </note>
    ///   - [`components(Vec<ComponentConfiguration>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::components) / [`set_components(Option<Vec<ComponentConfiguration>>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_components): <p>The components included in the image recipe.</p>
    ///   - [`parent_image(impl Into<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::parent_image) / [`set_parent_image(Option<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_parent_image): <p>The base image of the image recipe. The value of the string can be the ARN of the base image or an AMI ID. The format for the ARN follows this example: <code>arn:aws:imagebuilder:us-west-2:aws:image/windows-server-2016-english-full-base-x86/x.x.x</code>. You can provide the specific version that you want to use, or you can use a wildcard in all of the fields. If you enter an AMI ID for the string value, you must have access to the AMI, and the AMI must be in the same Region in which you are using Image Builder.</p>
    ///   - [`block_device_mappings(Vec<InstanceBlockDeviceMapping>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::block_device_mappings) / [`set_block_device_mappings(Option<Vec<InstanceBlockDeviceMapping>>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_block_device_mappings): <p>The block device mappings of the image recipe.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_tags): <p> The tags of the image recipe.</p>
    ///   - [`working_directory(impl Into<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::working_directory) / [`set_working_directory(Option<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_working_directory): <p>The working directory used during build and test workflows.</p>
    ///   - [`additional_instance_configuration(AdditionalInstanceConfiguration)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::additional_instance_configuration) / [`set_additional_instance_configuration(Option<AdditionalInstanceConfiguration>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_additional_instance_configuration): <p>Specify additional settings and launch scripts for your build instances.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::set_client_token): <p>The idempotency token used to make this request idempotent.</p>
    /// - On success, responds with [`CreateImageRecipeOutput`](crate::operation::create_image_recipe::CreateImageRecipeOutput) with field(s):
    ///   - [`request_id(Option<String>)`](crate::operation::create_image_recipe::CreateImageRecipeOutput::request_id): <p>The request ID that uniquely identifies this request.</p>
    ///   - [`client_token(Option<String>)`](crate::operation::create_image_recipe::CreateImageRecipeOutput::client_token): <p>The idempotency token used to make this request idempotent.</p>
    ///   - [`image_recipe_arn(Option<String>)`](crate::operation::create_image_recipe::CreateImageRecipeOutput::image_recipe_arn): <p>The Amazon Resource Name (ARN) of the image recipe that was created by this request.</p>
    /// - On failure, responds with [`SdkError<CreateImageRecipeError>`](crate::operation::create_image_recipe::CreateImageRecipeError)
    pub fn create_image_recipe(
        &self,
    ) -> crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder {
        crate::operation::create_image_recipe::builders::CreateImageRecipeFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
