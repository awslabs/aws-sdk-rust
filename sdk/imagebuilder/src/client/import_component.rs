// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ImportComponent`](crate::client::fluent_builders::ImportComponent) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ImportComponent::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ImportComponent::set_name): <p> The name of the component.</p>
    ///   - [`semantic_version(impl Into<String>)`](crate::client::fluent_builders::ImportComponent::semantic_version) / [`set_semantic_version(Option<String>)`](crate::client::fluent_builders::ImportComponent::set_semantic_version): <p>The semantic version of the component. This version follows the semantic version syntax.</p> <note>   <p>The semantic version has four nodes: <major>    .    <minor>     .     <patch>      /      <build>       . You can assign values for the first three, and can filter on all of them.      </build>     </patch>    </minor>   </major></p>   <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p>  </note>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::ImportComponent::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::ImportComponent::set_description): <p>The description of the component. Describes the contents of the component.</p>
    ///   - [`change_description(impl Into<String>)`](crate::client::fluent_builders::ImportComponent::change_description) / [`set_change_description(Option<String>)`](crate::client::fluent_builders::ImportComponent::set_change_description): <p>The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.</p>
    ///   - [`r#type(ComponentType)`](crate::client::fluent_builders::ImportComponent::type) / [`set_type(Option<ComponentType>)`](crate::client::fluent_builders::ImportComponent::set_type): <p>The type of the component denotes whether the component is used to build the image, or only to test it.</p>
    ///   - [`format(ComponentFormat)`](crate::client::fluent_builders::ImportComponent::format) / [`set_format(Option<ComponentFormat>)`](crate::client::fluent_builders::ImportComponent::set_format): <p>The format of the resource that you want to import as a component.</p>
    ///   - [`platform(Platform)`](crate::client::fluent_builders::ImportComponent::platform) / [`set_platform(Option<Platform>)`](crate::client::fluent_builders::ImportComponent::set_platform): <p>The platform of the component.</p>
    ///   - [`data(impl Into<String>)`](crate::client::fluent_builders::ImportComponent::data) / [`set_data(Option<String>)`](crate::client::fluent_builders::ImportComponent::set_data): <p>The data of the component. Used to specify the data inline. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.</p>
    ///   - [`uri(impl Into<String>)`](crate::client::fluent_builders::ImportComponent::uri) / [`set_uri(Option<String>)`](crate::client::fluent_builders::ImportComponent::set_uri): <p>The uri of the component. Must be an Amazon S3 URL and the requester must have permission to access the Amazon S3 bucket. If you use Amazon S3, you can specify component content up to your service quota. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::ImportComponent::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::ImportComponent::set_kms_key_id): <p>The ID of the KMS key that should be used to encrypt this component.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::ImportComponent::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::ImportComponent::set_tags): <p>The tags of the component.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::ImportComponent::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::ImportComponent::set_client_token): <p>The idempotency token of the component.</p>
    /// - On success, responds with [`ImportComponentOutput`](crate::output::ImportComponentOutput) with field(s):
    ///   - [`request_id(Option<String>)`](crate::output::ImportComponentOutput::request_id): <p>The request ID that uniquely identifies this request.</p>
    ///   - [`client_token(Option<String>)`](crate::output::ImportComponentOutput::client_token): <p>The idempotency token used to make this request idempotent.</p>
    ///   - [`component_build_version_arn(Option<String>)`](crate::output::ImportComponentOutput::component_build_version_arn): <p>The Amazon Resource Name (ARN) of the imported component.</p>
    /// - On failure, responds with [`SdkError<ImportComponentError>`](crate::error::ImportComponentError)
    pub fn import_component(&self) -> crate::client::fluent_builders::ImportComponent {
        crate::client::fluent_builders::ImportComponent::new(self.handle.clone())
    }
}
