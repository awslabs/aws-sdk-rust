// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetWorkflowExecution`](crate::operation::get_workflow_execution::builders::GetWorkflowExecutionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workflow_execution_id(impl Into<String>)`](crate::operation::get_workflow_execution::builders::GetWorkflowExecutionFluentBuilder::workflow_execution_id) / [`set_workflow_execution_id(Option<String>)`](crate::operation::get_workflow_execution::builders::GetWorkflowExecutionFluentBuilder::set_workflow_execution_id):<br>required: **true**<br><p>Use the unique identifier for a runtime instance of the workflow to get runtime details.</p><br>
    /// - On success, responds with [`GetWorkflowExecutionOutput`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput) with field(s):
    ///   - [`request_id(Option<String>)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::request_id): <p>The request ID that uniquely identifies this request.</p>
    ///   - [`workflow_build_version_arn(Option<String>)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::workflow_build_version_arn): <p>The Amazon Resource Name (ARN) of the build version for the Image Builder workflow resource that defines the specified runtime instance of the workflow.</p>
    ///   - [`workflow_execution_id(Option<String>)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::workflow_execution_id): <p>The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.</p>
    ///   - [`image_build_version_arn(Option<String>)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::image_build_version_arn): <p>The Amazon Resource Name (ARN) of the image resource build version that the specified runtime instance of the workflow created.</p>
    ///   - [`r#type(Option<WorkflowType>)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::type): <p>The type of workflow that Image Builder ran for the specified runtime instance of the workflow.</p>
    ///   - [`status(Option<WorkflowExecutionStatus>)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::status): <p>The current runtime status for the specified runtime instance of the workflow.</p>
    ///   - [`message(Option<String>)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::message): <p>The output message from the specified runtime instance of the workflow, if applicable.</p>
    ///   - [`total_step_count(i32)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::total_step_count): <p>The total number of steps in the specified runtime instance of the workflow that ran. This number should equal the sum of the step counts for steps that succeeded, were skipped, and failed.</p>
    ///   - [`total_steps_succeeded(i32)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::total_steps_succeeded): <p>A runtime count for the number of steps that ran successfully in the specified runtime instance of the workflow.</p>
    ///   - [`total_steps_failed(i32)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::total_steps_failed): <p>A runtime count for the number of steps that failed in the specified runtime instance of the workflow.</p>
    ///   - [`total_steps_skipped(i32)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::total_steps_skipped): <p>A runtime count for the number of steps that were skipped in the specified runtime instance of the workflow.</p>
    ///   - [`start_time(Option<String>)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::start_time): <p>The timestamp when the specified runtime instance of the workflow started.</p>
    ///   - [`end_time(Option<String>)`](crate::operation::get_workflow_execution::GetWorkflowExecutionOutput::end_time): <p>The timestamp when the specified runtime instance of the workflow finished.</p>
    /// - On failure, responds with [`SdkError<GetWorkflowExecutionError>`](crate::operation::get_workflow_execution::GetWorkflowExecutionError)
    pub fn get_workflow_execution(&self) -> crate::operation::get_workflow_execution::builders::GetWorkflowExecutionFluentBuilder {
        crate::operation::get_workflow_execution::builders::GetWorkflowExecutionFluentBuilder::new(self.handle.clone())
    }
}
