// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListImagePackages`](crate::client::fluent_builders::ListImagePackages) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListImagePackages::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`image_build_version_arn(impl Into<String>)`](crate::client::fluent_builders::ListImagePackages::image_build_version_arn) / [`set_image_build_version_arn(Option<String>)`](crate::client::fluent_builders::ListImagePackages::set_image_build_version_arn): <p>Filter results for the ListImagePackages request by the Image Build Version ARN</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListImagePackages::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListImagePackages::set_max_results): <p>The maxiumum number of results to return from the ListImagePackages request.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListImagePackages::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListImagePackages::set_next_token): <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    /// - On success, responds with [`ListImagePackagesOutput`](crate::output::ListImagePackagesOutput) with field(s):
    ///   - [`request_id(Option<String>)`](crate::output::ListImagePackagesOutput::request_id): <p>The request ID that uniquely identifies this request.</p>
    ///   - [`image_package_list(Option<Vec<ImagePackage>>)`](crate::output::ListImagePackagesOutput::image_package_list): <p>The list of Image Packages returned in the response.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListImagePackagesOutput::next_token): <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    /// - On failure, responds with [`SdkError<ListImagePackagesError>`](crate::error::ListImagePackagesError)
    pub fn list_image_packages(&self) -> crate::client::fluent_builders::ListImagePackages {
        crate::client::fluent_builders::ListImagePackages::new(self.handle.clone())
    }
}
