// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_images::_list_images_output::ListImagesOutputBuilder;

pub use crate::operation::list_images::_list_images_input::ListImagesInputBuilder;

impl crate::operation::list_images::builders::ListImagesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_images::ListImagesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_images::ListImagesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_images();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListImages`.
///
/// <p>Returns the list of images that you have access to. Newly created images can take up to two minutes to appear in the ListImages API Results.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListImagesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_images::builders::ListImagesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_images::ListImagesOutput,
        crate::operation::list_images::ListImagesError,
    > for ListImagesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_images::ListImagesOutput,
            crate::operation::list_images::ListImagesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListImagesFluentBuilder {
    /// Creates a new `ListImages`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListImages as a reference.
    pub fn as_input(&self) -> &crate::operation::list_images::builders::ListImagesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_images::ListImagesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_images::ListImagesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_images::ListImages::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_images::ListImages::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_images::ListImagesOutput,
        crate::operation::list_images::ListImagesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_images::paginator::ListImagesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_images::paginator::ListImagesPaginator {
        crate::operation::list_images::paginator::ListImagesPaginator::new(self.handle, self.inner)
    }
    /// <p>The owner defines which images you want to list. By default, this request will only show images owned by your account. You can use this field to specify if you want to view images owned by yourself, by Amazon, or those images that have been shared with you by other customers.</p>
    pub fn owner(mut self, input: crate::types::Ownership) -> Self {
        self.inner = self.inner.owner(input);
        self
    }
    /// <p>The owner defines which images you want to list. By default, this request will only show images owned by your account. You can use this field to specify if you want to view images owned by yourself, by Amazon, or those images that have been shared with you by other customers.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<crate::types::Ownership>) -> Self {
        self.inner = self.inner.set_owner(input);
        self
    }
    /// <p>The owner defines which images you want to list. By default, this request will only show images owned by your account. You can use this field to specify if you want to view images owned by yourself, by Amazon, or those images that have been shared with you by other customers.</p>
    pub fn get_owner(&self) -> &::std::option::Option<crate::types::Ownership> {
        self.inner.get_owner()
    }
    ///
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Use the following filters to streamline results:</p>
    /// <ul>
    /// <li>
    /// <p><code>name</code></p></li>
    /// <li>
    /// <p><code>osVersion</code></p></li>
    /// <li>
    /// <p><code>platform</code></p></li>
    /// <li>
    /// <p><code>type</code></p></li>
    /// <li>
    /// <p><code>version</code></p></li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>Use the following filters to streamline results:</p>
    /// <ul>
    /// <li>
    /// <p><code>name</code></p></li>
    /// <li>
    /// <p><code>osVersion</code></p></li>
    /// <li>
    /// <p><code>platform</code></p></li>
    /// <li>
    /// <p><code>type</code></p></li>
    /// <li>
    /// <p><code>version</code></p></li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>Use the following filters to streamline results:</p>
    /// <ul>
    /// <li>
    /// <p><code>name</code></p></li>
    /// <li>
    /// <p><code>osVersion</code></p></li>
    /// <li>
    /// <p><code>platform</code></p></li>
    /// <li>
    /// <p><code>type</code></p></li>
    /// <li>
    /// <p><code>version</code></p></li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        self.inner.get_filters()
    }
    /// <p>Requests a list of images with a specific recipe name.</p>
    pub fn by_name(mut self, input: bool) -> Self {
        self.inner = self.inner.by_name(input);
        self
    }
    /// <p>Requests a list of images with a specific recipe name.</p>
    pub fn set_by_name(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_by_name(input);
        self
    }
    /// <p>Requests a list of images with a specific recipe name.</p>
    pub fn get_by_name(&self) -> &::std::option::Option<bool> {
        self.inner.get_by_name()
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>Includes deprecated images in the response list.</p>
    pub fn include_deprecated(mut self, input: bool) -> Self {
        self.inner = self.inner.include_deprecated(input);
        self
    }
    /// <p>Includes deprecated images in the response list.</p>
    pub fn set_include_deprecated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_deprecated(input);
        self
    }
    /// <p>Includes deprecated images in the response list.</p>
    pub fn get_include_deprecated(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_deprecated()
    }
}
