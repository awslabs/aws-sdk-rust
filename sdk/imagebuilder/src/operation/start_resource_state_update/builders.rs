// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_resource_state_update::_start_resource_state_update_output::StartResourceStateUpdateOutputBuilder;

pub use crate::operation::start_resource_state_update::_start_resource_state_update_input::StartResourceStateUpdateInputBuilder;

impl crate::operation::start_resource_state_update::builders::StartResourceStateUpdateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_resource_state_update::StartResourceStateUpdateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_resource_state_update::StartResourceStateUpdateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_resource_state_update();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartResourceStateUpdate`.
///
/// <p>Begin asynchronous resource state update for lifecycle changes to the specified image resources.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartResourceStateUpdateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_resource_state_update::builders::StartResourceStateUpdateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_resource_state_update::StartResourceStateUpdateOutput,
        crate::operation::start_resource_state_update::StartResourceStateUpdateError,
    > for StartResourceStateUpdateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_resource_state_update::StartResourceStateUpdateOutput,
            crate::operation::start_resource_state_update::StartResourceStateUpdateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartResourceStateUpdateFluentBuilder {
    /// Creates a new `StartResourceStateUpdate`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartResourceStateUpdate as a reference.
    pub fn as_input(&self) -> &crate::operation::start_resource_state_update::builders::StartResourceStateUpdateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_resource_state_update::StartResourceStateUpdateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_resource_state_update::StartResourceStateUpdateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_resource_state_update::StartResourceStateUpdate::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_resource_state_update::StartResourceStateUpdate::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_resource_state_update::StartResourceStateUpdateOutput,
        crate::operation::start_resource_state_update::StartResourceStateUpdateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the Image Builder resource that is updated. The state update might also impact associated resources.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The ARN of the Image Builder resource that is updated. The state update might also impact associated resources.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The ARN of the Image Builder resource that is updated. The state update might also impact associated resources.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_arn()
    }
    /// <p>Indicates the lifecycle action to take for this request.</p>
    pub fn state(mut self, input: crate::types::ResourceState) -> Self {
        self.inner = self.inner.state(input);
        self
    }
    /// <p>Indicates the lifecycle action to take for this request.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ResourceState>) -> Self {
        self.inner = self.inner.set_state(input);
        self
    }
    /// <p>Indicates the lifecycle action to take for this request.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ResourceState> {
        self.inner.get_state()
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that’s used to update image state.</p>
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.execution_role(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that’s used to update image state.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_execution_role(input);
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that’s used to update image state.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_execution_role()
    }
    /// <p>A list of image resources to update state for.</p>
    pub fn include_resources(mut self, input: crate::types::ResourceStateUpdateIncludeResources) -> Self {
        self.inner = self.inner.include_resources(input);
        self
    }
    /// <p>A list of image resources to update state for.</p>
    pub fn set_include_resources(mut self, input: ::std::option::Option<crate::types::ResourceStateUpdateIncludeResources>) -> Self {
        self.inner = self.inner.set_include_resources(input);
        self
    }
    /// <p>A list of image resources to update state for.</p>
    pub fn get_include_resources(&self) -> &::std::option::Option<crate::types::ResourceStateUpdateIncludeResources> {
        self.inner.get_include_resources()
    }
    /// <p>Skip action on the image resource and associated resources if specified exclusion rules are met.</p>
    pub fn exclusion_rules(mut self, input: crate::types::ResourceStateUpdateExclusionRules) -> Self {
        self.inner = self.inner.exclusion_rules(input);
        self
    }
    /// <p>Skip action on the image resource and associated resources if specified exclusion rules are met.</p>
    pub fn set_exclusion_rules(mut self, input: ::std::option::Option<crate::types::ResourceStateUpdateExclusionRules>) -> Self {
        self.inner = self.inner.set_exclusion_rules(input);
        self
    }
    /// <p>Skip action on the image resource and associated resources if specified exclusion rules are met.</p>
    pub fn get_exclusion_rules(&self) -> &::std::option::Option<crate::types::ResourceStateUpdateExclusionRules> {
        self.inner.get_exclusion_rules()
    }
    /// <p>The timestamp that indicates when resources are updated by a lifecycle action.</p>
    pub fn update_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.update_at(input);
        self
    }
    /// <p>The timestamp that indicates when resources are updated by a lifecycle action.</p>
    pub fn set_update_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_update_at(input);
        self
    }
    /// <p>The timestamp that indicates when resources are updated by a lifecycle action.</p>
    pub fn get_update_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_update_at()
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
