// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_container_recipe::_create_container_recipe_output::CreateContainerRecipeOutputBuilder;

pub use crate::operation::create_container_recipe::_create_container_recipe_input::CreateContainerRecipeInputBuilder;

/// Fluent builder constructing a request to `CreateContainerRecipe`.
///
/// <p>Creates a new container recipe. Container recipes define how images are configured, tested, and assessed.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateContainerRecipeFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_container_recipe::builders::CreateContainerRecipeInputBuilder,
}
impl CreateContainerRecipeFluentBuilder {
    /// Creates a new `CreateContainerRecipe`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_container_recipe::CreateContainerRecipe,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_container_recipe::CreateContainerRecipeError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_container_recipe::CreateContainerRecipeOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_container_recipe::CreateContainerRecipeError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The type of container to create.</p>
    pub fn container_type(mut self, input: crate::types::ContainerType) -> Self {
        self.inner = self.inner.container_type(input);
        self
    }
    /// <p>The type of container to create.</p>
    pub fn set_container_type(
        mut self,
        input: std::option::Option<crate::types::ContainerType>,
    ) -> Self {
        self.inner = self.inner.set_container_type(input);
        self
    }
    /// <p>The name of the container recipe.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the container recipe.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The description of the container recipe.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the container recipe.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note>
    /// <p>The semantic version has four nodes: <major>
    /// .
    /// <minor>
    /// .
    /// <patch>
    /// /
    /// <build>
    /// . You can assign values for the first three, and can filter on all of them.
    /// </build>
    /// </patch>
    /// </minor>
    /// </major></p>
    /// <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p>
    /// <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p>
    /// </note>
    pub fn semantic_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.semantic_version(input.into());
        self
    }
    /// <p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note>
    /// <p>The semantic version has four nodes: <major>
    /// .
    /// <minor>
    /// .
    /// <patch>
    /// /
    /// <build>
    /// . You can assign values for the first three, and can filter on all of them.
    /// </build>
    /// </patch>
    /// </minor>
    /// </major></p>
    /// <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p>
    /// <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p>
    /// </note>
    pub fn set_semantic_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_semantic_version(input);
        self
    }
    /// Appends an item to `components`.
    ///
    /// To override the contents of this collection use [`set_components`](Self::set_components).
    ///
    /// <p>Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.</p>
    pub fn components(mut self, input: crate::types::ComponentConfiguration) -> Self {
        self.inner = self.inner.components(input);
        self
    }
    /// <p>Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.</p>
    pub fn set_components(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ComponentConfiguration>>,
    ) -> Self {
        self.inner = self.inner.set_components(input);
        self
    }
    /// <p>A group of options that can be used to configure an instance for building and testing container images.</p>
    pub fn instance_configuration(mut self, input: crate::types::InstanceConfiguration) -> Self {
        self.inner = self.inner.instance_configuration(input);
        self
    }
    /// <p>A group of options that can be used to configure an instance for building and testing container images.</p>
    pub fn set_instance_configuration(
        mut self,
        input: std::option::Option<crate::types::InstanceConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_instance_configuration(input);
        self
    }
    /// <p>The Dockerfile template used to build your image as an inline data blob.</p>
    pub fn dockerfile_template_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dockerfile_template_data(input.into());
        self
    }
    /// <p>The Dockerfile template used to build your image as an inline data blob.</p>
    pub fn set_dockerfile_template_data(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_dockerfile_template_data(input);
        self
    }
    /// <p>The Amazon S3 URI for the Dockerfile that will be used to build your container image.</p>
    pub fn dockerfile_template_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dockerfile_template_uri(input.into());
        self
    }
    /// <p>The Amazon S3 URI for the Dockerfile that will be used to build your container image.</p>
    pub fn set_dockerfile_template_uri(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_dockerfile_template_uri(input);
        self
    }
    /// <p>Specifies the operating system platform when you use a custom base image.</p>
    pub fn platform_override(mut self, input: crate::types::Platform) -> Self {
        self.inner = self.inner.platform_override(input);
        self
    }
    /// <p>Specifies the operating system platform when you use a custom base image.</p>
    pub fn set_platform_override(
        mut self,
        input: std::option::Option<crate::types::Platform>,
    ) -> Self {
        self.inner = self.inner.set_platform_override(input);
        self
    }
    /// <p>Specifies the operating system version for the base image.</p>
    pub fn image_os_version_override(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.image_os_version_override(input.into());
        self
    }
    /// <p>Specifies the operating system version for the base image.</p>
    pub fn set_image_os_version_override(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_image_os_version_override(input);
        self
    }
    /// <p>The base image for the container recipe.</p>
    pub fn parent_image(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.parent_image(input.into());
        self
    }
    /// <p>The base image for the container recipe.</p>
    pub fn set_parent_image(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_parent_image(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags that are attached to the container recipe.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags that are attached to the container recipe.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The working directory for use during build and test workflows.</p>
    pub fn working_directory(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.working_directory(input.into());
        self
    }
    /// <p>The working directory for use during build and test workflows.</p>
    pub fn set_working_directory(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_working_directory(input);
        self
    }
    /// <p>The destination repository for the container image.</p>
    pub fn target_repository(mut self, input: crate::types::TargetContainerRepository) -> Self {
        self.inner = self.inner.target_repository(input);
        self
    }
    /// <p>The destination repository for the container image.</p>
    pub fn set_target_repository(
        mut self,
        input: std::option::Option<crate::types::TargetContainerRepository>,
    ) -> Self {
        self.inner = self.inner.set_target_repository(input);
        self
    }
    /// <p>Identifies which KMS key is used to encrypt the container image.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>Identifies which KMS key is used to encrypt the container image.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>The client token used to make this request idempotent.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>The client token used to make this request idempotent.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
