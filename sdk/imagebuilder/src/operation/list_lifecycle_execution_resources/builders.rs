// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_lifecycle_execution_resources::_list_lifecycle_execution_resources_output::ListLifecycleExecutionResourcesOutputBuilder;

pub use crate::operation::list_lifecycle_execution_resources::_list_lifecycle_execution_resources_input::ListLifecycleExecutionResourcesInputBuilder;

impl crate::operation::list_lifecycle_execution_resources::builders::ListLifecycleExecutionResourcesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_lifecycle_execution_resources();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListLifecycleExecutionResources`.
///
/// <p>List resources that the runtime instance of the image lifecycle identified for lifecycle actions.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListLifecycleExecutionResourcesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_lifecycle_execution_resources::builders::ListLifecycleExecutionResourcesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput,
        crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesError,
    > for ListLifecycleExecutionResourcesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput,
            crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListLifecycleExecutionResourcesFluentBuilder {
    /// Creates a new `ListLifecycleExecutionResources`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListLifecycleExecutionResources as a reference.
    pub fn as_input(&self) -> &crate::operation::list_lifecycle_execution_resources::builders::ListLifecycleExecutionResourcesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResources::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResources::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesOutput,
        crate::operation::list_lifecycle_execution_resources::ListLifecycleExecutionResourcesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_lifecycle_execution_resources::paginator::ListLifecycleExecutionResourcesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_lifecycle_execution_resources::paginator::ListLifecycleExecutionResourcesPaginator {
        crate::operation::list_lifecycle_execution_resources::paginator::ListLifecycleExecutionResourcesPaginator::new(self.handle, self.inner)
    }
    /// <p>Use the unique identifier for a runtime instance of the lifecycle policy to get runtime details.</p>
    pub fn lifecycle_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.lifecycle_execution_id(input.into());
        self
    }
    /// <p>Use the unique identifier for a runtime instance of the lifecycle policy to get runtime details.</p>
    pub fn set_lifecycle_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_lifecycle_execution_id(input);
        self
    }
    /// <p>Use the unique identifier for a runtime instance of the lifecycle policy to get runtime details.</p>
    pub fn get_lifecycle_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_lifecycle_execution_id()
    }
    /// <p>You can leave this empty to get a list of Image Builder resources that were identified for lifecycle actions.</p>
    /// <p>To get a list of associated resources that are impacted for an individual resource (the parent), specify its Amazon Resource Name (ARN). Associated resources are produced from your image and distributed when you run a build, such as AMIs or container images stored in ECR repositories.</p>
    pub fn parent_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.parent_resource_id(input.into());
        self
    }
    /// <p>You can leave this empty to get a list of Image Builder resources that were identified for lifecycle actions.</p>
    /// <p>To get a list of associated resources that are impacted for an individual resource (the parent), specify its Amazon Resource Name (ARN). Associated resources are produced from your image and distributed when you run a build, such as AMIs or container images stored in ECR repositories.</p>
    pub fn set_parent_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_parent_resource_id(input);
        self
    }
    /// <p>You can leave this empty to get a list of Image Builder resources that were identified for lifecycle actions.</p>
    /// <p>To get a list of associated resources that are impacted for an individual resource (the parent), specify its Amazon Resource Name (ARN). Associated resources are produced from your image and distributed when you run a build, such as AMIs or container images stored in ECR repositories.</p>
    pub fn get_parent_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_parent_resource_id()
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
