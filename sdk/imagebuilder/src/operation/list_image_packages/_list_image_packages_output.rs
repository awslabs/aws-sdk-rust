// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListImagePackagesOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>The list of Image Packages returned in the response.</p>
    #[doc(hidden)]
    pub image_package_list: std::option::Option<std::vec::Vec<crate::types::ImagePackage>>,
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListImagePackagesOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The list of Image Packages returned in the response.</p>
    pub fn image_package_list(&self) -> std::option::Option<&[crate::types::ImagePackage]> {
        self.image_package_list.as_deref()
    }
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListImagePackagesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListImagePackagesOutput {
    /// Creates a new builder-style object to manufacture [`ListImagePackagesOutput`](crate::operation::list_image_packages::ListImagePackagesOutput).
    pub fn builder(
    ) -> crate::operation::list_image_packages::builders::ListImagePackagesOutputBuilder {
        crate::operation::list_image_packages::builders::ListImagePackagesOutputBuilder::default()
    }
}

/// A builder for [`ListImagePackagesOutput`](crate::operation::list_image_packages::ListImagePackagesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListImagePackagesOutputBuilder {
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) image_package_list: std::option::Option<std::vec::Vec<crate::types::ImagePackage>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListImagePackagesOutputBuilder {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// Appends an item to `image_package_list`.
    ///
    /// To override the contents of this collection use [`set_image_package_list`](Self::set_image_package_list).
    ///
    /// <p>The list of Image Packages returned in the response.</p>
    pub fn image_package_list(mut self, input: crate::types::ImagePackage) -> Self {
        let mut v = self.image_package_list.unwrap_or_default();
        v.push(input);
        self.image_package_list = Some(v);
        self
    }
    /// <p>The list of Image Packages returned in the response.</p>
    pub fn set_image_package_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ImagePackage>>,
    ) -> Self {
        self.image_package_list = input;
        self
    }
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListImagePackagesOutput`](crate::operation::list_image_packages::ListImagePackagesOutput).
    pub fn build(self) -> crate::operation::list_image_packages::ListImagePackagesOutput {
        crate::operation::list_image_packages::ListImagePackagesOutput {
            request_id: self.request_id,
            image_package_list: self.image_package_list,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
