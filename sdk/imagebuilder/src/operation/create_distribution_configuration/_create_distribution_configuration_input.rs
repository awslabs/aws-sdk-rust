// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDistributionConfigurationInput {
    /// <p>The name of the distribution configuration.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the distribution configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The distributions of the distribution configuration.</p>
    pub distributions: ::std::option::Option<::std::vec::Vec<crate::types::Distribution>>,
    /// <p>The tags of the distribution configuration.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The idempotency token of the distribution configuration.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateDistributionConfigurationInput {
    /// <p>The name of the distribution configuration.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The distributions of the distribution configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.distributions.is_none()`.
    pub fn distributions(&self) -> &[crate::types::Distribution] {
        self.distributions.as_deref().unwrap_or_default()
    }
    /// <p>The tags of the distribution configuration.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateDistributionConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateDistributionConfigurationInput`](crate::operation::create_distribution_configuration::CreateDistributionConfigurationInput).
    pub fn builder() -> crate::operation::create_distribution_configuration::builders::CreateDistributionConfigurationInputBuilder {
        crate::operation::create_distribution_configuration::builders::CreateDistributionConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateDistributionConfigurationInput`](crate::operation::create_distribution_configuration::CreateDistributionConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDistributionConfigurationInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) distributions: ::std::option::Option<::std::vec::Vec<crate::types::Distribution>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateDistributionConfigurationInputBuilder {
    /// <p>The name of the distribution configuration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the distribution configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the distribution configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `distributions`.
    ///
    /// To override the contents of this collection use [`set_distributions`](Self::set_distributions).
    ///
    /// <p>The distributions of the distribution configuration.</p>
    pub fn distributions(mut self, input: crate::types::Distribution) -> Self {
        let mut v = self.distributions.unwrap_or_default();
        v.push(input);
        self.distributions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The distributions of the distribution configuration.</p>
    pub fn set_distributions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Distribution>>) -> Self {
        self.distributions = input;
        self
    }
    /// <p>The distributions of the distribution configuration.</p>
    pub fn get_distributions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Distribution>> {
        &self.distributions
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags of the distribution configuration.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags of the distribution configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags of the distribution configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateDistributionConfigurationInput`](crate::operation::create_distribution_configuration::CreateDistributionConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_distribution_configuration::CreateDistributionConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_distribution_configuration::CreateDistributionConfigurationInput {
                name: self.name,
                description: self.description,
                distributions: self.distributions,
                tags: self.tags,
                client_token: self.client_token,
            },
        )
    }
}
