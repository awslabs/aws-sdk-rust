// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListContainerRecipesOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>The list of container recipes returned for the request.</p>
    #[doc(hidden)]
    pub container_recipe_summary_list:
        std::option::Option<std::vec::Vec<crate::types::ContainerRecipeSummary>>,
    /// <p>The next token field is used for paginated responses. When this is not empty, there are additional container recipes that the service has not included in this response. Use this token with the next request to retrieve additional list items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListContainerRecipesOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The list of container recipes returned for the request.</p>
    pub fn container_recipe_summary_list(
        &self,
    ) -> std::option::Option<&[crate::types::ContainerRecipeSummary]> {
        self.container_recipe_summary_list.as_deref()
    }
    /// <p>The next token field is used for paginated responses. When this is not empty, there are additional container recipes that the service has not included in this response. Use this token with the next request to retrieve additional list items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListContainerRecipesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListContainerRecipesOutput {
    /// Creates a new builder-style object to manufacture [`ListContainerRecipesOutput`](crate::operation::list_container_recipes::ListContainerRecipesOutput).
    pub fn builder(
    ) -> crate::operation::list_container_recipes::builders::ListContainerRecipesOutputBuilder {
        crate::operation::list_container_recipes::builders::ListContainerRecipesOutputBuilder::default()
    }
}

/// A builder for [`ListContainerRecipesOutput`](crate::operation::list_container_recipes::ListContainerRecipesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListContainerRecipesOutputBuilder {
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) container_recipe_summary_list:
        std::option::Option<std::vec::Vec<crate::types::ContainerRecipeSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListContainerRecipesOutputBuilder {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// Appends an item to `container_recipe_summary_list`.
    ///
    /// To override the contents of this collection use [`set_container_recipe_summary_list`](Self::set_container_recipe_summary_list).
    ///
    /// <p>The list of container recipes returned for the request.</p>
    pub fn container_recipe_summary_list(
        mut self,
        input: crate::types::ContainerRecipeSummary,
    ) -> Self {
        let mut v = self.container_recipe_summary_list.unwrap_or_default();
        v.push(input);
        self.container_recipe_summary_list = Some(v);
        self
    }
    /// <p>The list of container recipes returned for the request.</p>
    pub fn set_container_recipe_summary_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ContainerRecipeSummary>>,
    ) -> Self {
        self.container_recipe_summary_list = input;
        self
    }
    /// <p>The next token field is used for paginated responses. When this is not empty, there are additional container recipes that the service has not included in this response. Use this token with the next request to retrieve additional list items.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The next token field is used for paginated responses. When this is not empty, there are additional container recipes that the service has not included in this response. Use this token with the next request to retrieve additional list items.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListContainerRecipesOutput`](crate::operation::list_container_recipes::ListContainerRecipesOutput).
    pub fn build(self) -> crate::operation::list_container_recipes::ListContainerRecipesOutput {
        crate::operation::list_container_recipes::ListContainerRecipesOutput {
            request_id: self.request_id,
            container_recipe_summary_list: self.container_recipe_summary_list,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
