// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportVmImageOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the AMI that was created during the VM import process. This AMI is used as the base image for the recipe that imported the VM.</p>
    #[doc(hidden)]
    pub image_arn: std::option::Option<std::string::String>,
    /// <p>The idempotency token that was used for this request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ImportVmImageOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AMI that was created during the VM import process. This AMI is used as the base image for the recipe that imported the VM.</p>
    pub fn image_arn(&self) -> std::option::Option<&str> {
        self.image_arn.as_deref()
    }
    /// <p>The idempotency token that was used for this request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ImportVmImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ImportVmImageOutput {
    /// Creates a new builder-style object to manufacture [`ImportVmImageOutput`](crate::operation::import_vm_image::ImportVmImageOutput).
    pub fn builder() -> crate::operation::import_vm_image::builders::ImportVmImageOutputBuilder {
        crate::operation::import_vm_image::builders::ImportVmImageOutputBuilder::default()
    }
}

/// A builder for [`ImportVmImageOutput`](crate::operation::import_vm_image::ImportVmImageOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportVmImageOutputBuilder {
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) image_arn: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ImportVmImageOutputBuilder {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AMI that was created during the VM import process. This AMI is used as the base image for the recipe that imported the VM.</p>
    pub fn image_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AMI that was created during the VM import process. This AMI is used as the base image for the recipe that imported the VM.</p>
    pub fn set_image_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_arn = input;
        self
    }
    /// <p>The idempotency token that was used for this request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The idempotency token that was used for this request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ImportVmImageOutput`](crate::operation::import_vm_image::ImportVmImageOutput).
    pub fn build(self) -> crate::operation::import_vm_image::ImportVmImageOutput {
        crate::operation::import_vm_image::ImportVmImageOutput {
            request_id: self.request_id,
            image_arn: self.image_arn,
            client_token: self.client_token,
            _request_id: self._request_id,
        }
    }
}
