// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateImageInput {
    /// <p> The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.</p>
    #[doc(hidden)]
    pub image_recipe_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.</p>
    #[doc(hidden)]
    pub container_recipe_arn: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline.</p>
    #[doc(hidden)]
    pub distribution_configuration_arn: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested.</p>
    #[doc(hidden)]
    pub infrastructure_configuration_arn: std::option::Option<std::string::String>,
    /// <p> The image tests configuration of the image.</p>
    #[doc(hidden)]
    pub image_tests_configuration: std::option::Option<crate::types::ImageTestsConfiguration>,
    /// <p> Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.</p>
    #[doc(hidden)]
    pub enhanced_image_metadata_enabled: std::option::Option<bool>,
    /// <p> The tags of the image.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p> The idempotency token used to make this request idempotent.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl CreateImageInput {
    /// <p> The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.</p>
    pub fn image_recipe_arn(&self) -> std::option::Option<&str> {
        self.image_recipe_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.</p>
    pub fn container_recipe_arn(&self) -> std::option::Option<&str> {
        self.container_recipe_arn.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline.</p>
    pub fn distribution_configuration_arn(&self) -> std::option::Option<&str> {
        self.distribution_configuration_arn.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested.</p>
    pub fn infrastructure_configuration_arn(&self) -> std::option::Option<&str> {
        self.infrastructure_configuration_arn.as_deref()
    }
    /// <p> The image tests configuration of the image.</p>
    pub fn image_tests_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ImageTestsConfiguration> {
        self.image_tests_configuration.as_ref()
    }
    /// <p> Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.</p>
    pub fn enhanced_image_metadata_enabled(&self) -> std::option::Option<bool> {
        self.enhanced_image_metadata_enabled
    }
    /// <p> The tags of the image.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p> The idempotency token used to make this request idempotent.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateImageInput {
    /// Creates a new builder-style object to manufacture [`CreateImageInput`](crate::operation::create_image::CreateImageInput).
    pub fn builder() -> crate::operation::create_image::builders::CreateImageInputBuilder {
        crate::operation::create_image::builders::CreateImageInputBuilder::default()
    }
}

/// A builder for [`CreateImageInput`](crate::operation::create_image::CreateImageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateImageInputBuilder {
    pub(crate) image_recipe_arn: std::option::Option<std::string::String>,
    pub(crate) container_recipe_arn: std::option::Option<std::string::String>,
    pub(crate) distribution_configuration_arn: std::option::Option<std::string::String>,
    pub(crate) infrastructure_configuration_arn: std::option::Option<std::string::String>,
    pub(crate) image_tests_configuration:
        std::option::Option<crate::types::ImageTestsConfiguration>,
    pub(crate) enhanced_image_metadata_enabled: std::option::Option<bool>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl CreateImageInputBuilder {
    /// <p> The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.</p>
    pub fn image_recipe_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_recipe_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.</p>
    pub fn set_image_recipe_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_recipe_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.</p>
    pub fn container_recipe_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.container_recipe_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.</p>
    pub fn set_container_recipe_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.container_recipe_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline.</p>
    pub fn distribution_configuration_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.distribution_configuration_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline.</p>
    pub fn set_distribution_configuration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.distribution_configuration_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested.</p>
    pub fn infrastructure_configuration_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.infrastructure_configuration_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested.</p>
    pub fn set_infrastructure_configuration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.infrastructure_configuration_arn = input;
        self
    }
    /// <p> The image tests configuration of the image.</p>
    pub fn image_tests_configuration(
        mut self,
        input: crate::types::ImageTestsConfiguration,
    ) -> Self {
        self.image_tests_configuration = Some(input);
        self
    }
    /// <p> The image tests configuration of the image.</p>
    pub fn set_image_tests_configuration(
        mut self,
        input: std::option::Option<crate::types::ImageTestsConfiguration>,
    ) -> Self {
        self.image_tests_configuration = input;
        self
    }
    /// <p> Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.</p>
    pub fn enhanced_image_metadata_enabled(mut self, input: bool) -> Self {
        self.enhanced_image_metadata_enabled = Some(input);
        self
    }
    /// <p> Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.</p>
    pub fn set_enhanced_image_metadata_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enhanced_image_metadata_enabled = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tags of the image.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p> The tags of the image.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p> The idempotency token used to make this request idempotent.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p> The idempotency token used to make this request idempotent.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateImageInput`](crate::operation::create_image::CreateImageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_image::CreateImageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_image::CreateImageInput {
            image_recipe_arn: self.image_recipe_arn,
            container_recipe_arn: self.container_recipe_arn,
            distribution_configuration_arn: self.distribution_configuration_arn,
            infrastructure_configuration_arn: self.infrastructure_configuration_arn,
            image_tests_configuration: self.image_tests_configuration,
            enhanced_image_metadata_enabled: self.enhanced_image_metadata_enabled,
            tags: self.tags,
            client_token: self.client_token,
        })
    }
}
