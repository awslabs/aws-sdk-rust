// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_lifecycle_policy::_update_lifecycle_policy_output::UpdateLifecyclePolicyOutputBuilder;

pub use crate::operation::update_lifecycle_policy::_update_lifecycle_policy_input::UpdateLifecyclePolicyInputBuilder;

impl crate::operation::update_lifecycle_policy::builders::UpdateLifecyclePolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_lifecycle_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateLifecyclePolicy`.
///
/// <p>Update the specified lifecycle policy.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateLifecyclePolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_lifecycle_policy::builders::UpdateLifecyclePolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyOutput,
        crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyError,
    > for UpdateLifecyclePolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyOutput,
            crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateLifecyclePolicyFluentBuilder {
    /// Creates a new `UpdateLifecyclePolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateLifecyclePolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::update_lifecycle_policy::builders::UpdateLifecyclePolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_lifecycle_policy::UpdateLifecyclePolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_lifecycle_policy::UpdateLifecyclePolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyOutput,
        crate::operation::update_lifecycle_policy::UpdateLifecyclePolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the lifecycle policy resource.</p>
    pub fn lifecycle_policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.lifecycle_policy_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the lifecycle policy resource.</p>
    pub fn set_lifecycle_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_lifecycle_policy_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the lifecycle policy resource.</p>
    pub fn get_lifecycle_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_lifecycle_policy_arn()
    }
    /// <p>Optional description for the lifecycle policy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>Optional description for the lifecycle policy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Optional description for the lifecycle policy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>Indicates whether the lifecycle policy resource is enabled.</p>
    pub fn status(mut self, input: crate::types::LifecyclePolicyStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>Indicates whether the lifecycle policy resource is enabled.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>Indicates whether the lifecycle policy resource is enabled.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LifecyclePolicyStatus> {
        self.inner.get_status()
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that Image Builder uses to update the lifecycle policy.</p>
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.execution_role(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that Image Builder uses to update the lifecycle policy.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_execution_role(input);
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the IAM role that Image Builder uses to update the lifecycle policy.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_execution_role()
    }
    /// <p>The type of image resource that the lifecycle policy applies to.</p>
    pub fn resource_type(mut self, input: crate::types::LifecyclePolicyResourceType) -> Self {
        self.inner = self.inner.resource_type(input);
        self
    }
    /// <p>The type of image resource that the lifecycle policy applies to.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyResourceType>) -> Self {
        self.inner = self.inner.set_resource_type(input);
        self
    }
    /// <p>The type of image resource that the lifecycle policy applies to.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::LifecyclePolicyResourceType> {
        self.inner.get_resource_type()
    }
    ///
    /// Appends an item to `policyDetails`.
    ///
    /// To override the contents of this collection use [`set_policy_details`](Self::set_policy_details).
    ///
    /// <p>The configuration details for a lifecycle policy resource.</p>
    pub fn policy_details(mut self, input: crate::types::LifecyclePolicyDetail) -> Self {
        self.inner = self.inner.policy_details(input);
        self
    }
    /// <p>The configuration details for a lifecycle policy resource.</p>
    pub fn set_policy_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyDetail>>) -> Self {
        self.inner = self.inner.set_policy_details(input);
        self
    }
    /// <p>The configuration details for a lifecycle policy resource.</p>
    pub fn get_policy_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyDetail>> {
        self.inner.get_policy_details()
    }
    /// <p>Selection criteria for resources that the lifecycle policy applies to.</p>
    pub fn resource_selection(mut self, input: crate::types::LifecyclePolicyResourceSelection) -> Self {
        self.inner = self.inner.resource_selection(input);
        self
    }
    /// <p>Selection criteria for resources that the lifecycle policy applies to.</p>
    pub fn set_resource_selection(mut self, input: ::std::option::Option<crate::types::LifecyclePolicyResourceSelection>) -> Self {
        self.inner = self.inner.set_resource_selection(input);
        self
    }
    /// <p>Selection criteria for resources that the lifecycle policy applies to.</p>
    pub fn get_resource_selection(&self) -> &::std::option::Option<crate::types::LifecyclePolicyResourceSelection> {
        self.inner.get_resource_selection()
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
