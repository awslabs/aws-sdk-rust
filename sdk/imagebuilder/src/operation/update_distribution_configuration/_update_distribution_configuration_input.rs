// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDistributionConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the distribution configuration that you want to update.</p>
    #[doc(hidden)]
    pub distribution_configuration_arn: std::option::Option<std::string::String>,
    /// <p>The description of the distribution configuration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The distributions of the distribution configuration.</p>
    #[doc(hidden)]
    pub distributions: std::option::Option<std::vec::Vec<crate::types::Distribution>>,
    /// <p>The idempotency token of the distribution configuration.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl UpdateDistributionConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the distribution configuration that you want to update.</p>
    pub fn distribution_configuration_arn(&self) -> std::option::Option<&str> {
        self.distribution_configuration_arn.as_deref()
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The distributions of the distribution configuration.</p>
    pub fn distributions(&self) -> std::option::Option<&[crate::types::Distribution]> {
        self.distributions.as_deref()
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateDistributionConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateDistributionConfigurationInput`](crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput).
    pub fn builder() -> crate::operation::update_distribution_configuration::builders::UpdateDistributionConfigurationInputBuilder{
        crate::operation::update_distribution_configuration::builders::UpdateDistributionConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateDistributionConfigurationInput`](crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDistributionConfigurationInputBuilder {
    pub(crate) distribution_configuration_arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) distributions: std::option::Option<std::vec::Vec<crate::types::Distribution>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl UpdateDistributionConfigurationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the distribution configuration that you want to update.</p>
    pub fn distribution_configuration_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.distribution_configuration_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution configuration that you want to update.</p>
    pub fn set_distribution_configuration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.distribution_configuration_arn = input;
        self
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `distributions`.
    ///
    /// To override the contents of this collection use [`set_distributions`](Self::set_distributions).
    ///
    /// <p>The distributions of the distribution configuration.</p>
    pub fn distributions(mut self, input: crate::types::Distribution) -> Self {
        let mut v = self.distributions.unwrap_or_default();
        v.push(input);
        self.distributions = Some(v);
        self
    }
    /// <p>The distributions of the distribution configuration.</p>
    pub fn set_distributions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Distribution>>,
    ) -> Self {
        self.distributions = input;
        self
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDistributionConfigurationInput`](crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput {
                distribution_configuration_arn: self.distribution_configuration_arn
                ,
                description: self.description
                ,
                distributions: self.distributions
                ,
                client_token: self.client_token
                ,
            }
        )
    }
}
