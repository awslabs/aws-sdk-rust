// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDistributionConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the distribution configuration that you want to update.</p>
    pub distribution_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The description of the distribution configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The distributions of the distribution configuration.</p>
    pub distributions: ::std::option::Option<::std::vec::Vec<crate::types::Distribution>>,
    /// <p>The idempotency token of the distribution configuration.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateDistributionConfigurationInput {
    /// <p>The Amazon Resource Name (ARN) of the distribution configuration that you want to update.</p>
    pub fn distribution_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.distribution_configuration_arn.as_deref()
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The distributions of the distribution configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.distributions.is_none()`.
    pub fn distributions(&self) -> &[crate::types::Distribution] {
        self.distributions.as_deref().unwrap_or_default()
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateDistributionConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateDistributionConfigurationInput`](crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput).
    pub fn builder() -> crate::operation::update_distribution_configuration::builders::UpdateDistributionConfigurationInputBuilder {
        crate::operation::update_distribution_configuration::builders::UpdateDistributionConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateDistributionConfigurationInput`](crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDistributionConfigurationInputBuilder {
    pub(crate) distribution_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) distributions: ::std::option::Option<::std::vec::Vec<crate::types::Distribution>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateDistributionConfigurationInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the distribution configuration that you want to update.</p>
    /// This field is required.
    pub fn distribution_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distribution_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution configuration that you want to update.</p>
    pub fn set_distribution_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distribution_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the distribution configuration that you want to update.</p>
    pub fn get_distribution_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.distribution_configuration_arn
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the distribution configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `distributions`.
    ///
    /// To override the contents of this collection use [`set_distributions`](Self::set_distributions).
    ///
    /// <p>The distributions of the distribution configuration.</p>
    pub fn distributions(mut self, input: crate::types::Distribution) -> Self {
        let mut v = self.distributions.unwrap_or_default();
        v.push(input);
        self.distributions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The distributions of the distribution configuration.</p>
    pub fn set_distributions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Distribution>>) -> Self {
        self.distributions = input;
        self
    }
    /// <p>The distributions of the distribution configuration.</p>
    pub fn get_distributions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Distribution>> {
        &self.distributions
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token of the distribution configuration.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateDistributionConfigurationInput`](crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_distribution_configuration::UpdateDistributionConfigurationInput {
                distribution_configuration_arn: self.distribution_configuration_arn,
                description: self.description,
                distributions: self.distributions,
                client_token: self.client_token,
            },
        )
    }
}
