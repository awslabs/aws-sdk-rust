// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_components::_list_components_output::ListComponentsOutputBuilder;

pub use crate::operation::list_components::_list_components_input::ListComponentsInputBuilder;

impl ListComponentsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_components::ListComponentsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_components::ListComponentsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_components();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListComponents`.
///
/// <p>Returns the list of components that can be filtered by name, or by using the listed <code>filters</code> to streamline results. Newly created components can take up to two minutes to appear in the ListComponents API Results.</p> <note>
/// <p>The semantic version has four nodes: <major>
/// .
/// <minor>
/// .
/// <patch>
/// /
/// <build>
/// . You can assign values for the first three, and can filter on all of them.
/// </build>
/// </patch>
/// </minor>
/// </major></p>
/// <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListComponentsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_components::builders::ListComponentsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_components::ListComponentsOutput,
        crate::operation::list_components::ListComponentsError,
    > for ListComponentsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_components::ListComponentsOutput,
            crate::operation::list_components::ListComponentsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListComponentsFluentBuilder {
    /// Creates a new `ListComponents`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListComponents as a reference.
    pub fn as_input(&self) -> &crate::operation::list_components::builders::ListComponentsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_components::ListComponentsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_components::ListComponentsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_components::ListComponents::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_components::ListComponents::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_components::ListComponentsOutput,
        crate::operation::list_components::ListComponentsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_components::paginator::ListComponentsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_components::paginator::ListComponentsPaginator {
        crate::operation::list_components::paginator::ListComponentsPaginator::new(self.handle, self.inner)
    }
    /// <p>Filters results based on the type of owner for the component. By default, this request returns a list of components that your account owns. To see results for other types of owners, you can specify components that Amazon manages, third party components, or components that other accounts have shared with you.</p>
    pub fn owner(mut self, input: crate::types::Ownership) -> Self {
        self.inner = self.inner.owner(input);
        self
    }
    /// <p>Filters results based on the type of owner for the component. By default, this request returns a list of components that your account owns. To see results for other types of owners, you can specify components that Amazon manages, third party components, or components that other accounts have shared with you.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<crate::types::Ownership>) -> Self {
        self.inner = self.inner.set_owner(input);
        self
    }
    /// <p>Filters results based on the type of owner for the component. By default, this request returns a list of components that your account owns. To see results for other types of owners, you can specify components that Amazon manages, third party components, or components that other accounts have shared with you.</p>
    pub fn get_owner(&self) -> &::std::option::Option<crate::types::Ownership> {
        self.inner.get_owner()
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Use the following filters to streamline results:</p>
    /// <ul>
    /// <li> <p> <code>description</code> </p> </li>
    /// <li> <p> <code>name</code> </p> </li>
    /// <li> <p> <code>platform</code> </p> </li>
    /// <li> <p> <code>supportedOsVersion</code> </p> </li>
    /// <li> <p> <code>type</code> </p> </li>
    /// <li> <p> <code>version</code> </p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>Use the following filters to streamline results:</p>
    /// <ul>
    /// <li> <p> <code>description</code> </p> </li>
    /// <li> <p> <code>name</code> </p> </li>
    /// <li> <p> <code>platform</code> </p> </li>
    /// <li> <p> <code>supportedOsVersion</code> </p> </li>
    /// <li> <p> <code>type</code> </p> </li>
    /// <li> <p> <code>version</code> </p> </li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>Use the following filters to streamline results:</p>
    /// <ul>
    /// <li> <p> <code>description</code> </p> </li>
    /// <li> <p> <code>name</code> </p> </li>
    /// <li> <p> <code>platform</code> </p> </li>
    /// <li> <p> <code>supportedOsVersion</code> </p> </li>
    /// <li> <p> <code>type</code> </p> </li>
    /// <li> <p> <code>version</code> </p> </li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        self.inner.get_filters()
    }
    /// <p>Returns the list of components for the specified name.</p>
    pub fn by_name(mut self, input: bool) -> Self {
        self.inner = self.inner.by_name(input);
        self
    }
    /// <p>Returns the list of components for the specified name.</p>
    pub fn set_by_name(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_by_name(input);
        self
    }
    /// <p>Returns the list of components for the specified name.</p>
    pub fn get_by_name(&self) -> &::std::option::Option<bool> {
        self.inner.get_by_name()
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum items to return in a request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
