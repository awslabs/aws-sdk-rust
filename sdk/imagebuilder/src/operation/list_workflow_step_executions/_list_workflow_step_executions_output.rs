// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListWorkflowStepExecutionsOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>Contains an array of runtime details that represents each step in this runtime instance of the workflow.</p>
    pub steps: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowStepMetadata>>,
    /// <p>The build version ARN for the Image Builder workflow resource that defines the steps for this runtime instance of the workflow.</p>
    pub workflow_build_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.</p>
    pub workflow_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The image build version resource ARN that's associated with the specified runtime instance of the workflow.</p>
    pub image_build_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The output message from the list action, if applicable.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkflowStepExecutionsOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>Contains an array of runtime details that represents each step in this runtime instance of the workflow.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.steps.is_none()`.
    pub fn steps(&self) -> &[crate::types::WorkflowStepMetadata] {
        self.steps.as_deref().unwrap_or_default()
    }
    /// <p>The build version ARN for the Image Builder workflow resource that defines the steps for this runtime instance of the workflow.</p>
    pub fn workflow_build_version_arn(&self) -> ::std::option::Option<&str> {
        self.workflow_build_version_arn.as_deref()
    }
    /// <p>The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.</p>
    pub fn workflow_execution_id(&self) -> ::std::option::Option<&str> {
        self.workflow_execution_id.as_deref()
    }
    /// <p>The image build version resource ARN that's associated with the specified runtime instance of the workflow.</p>
    pub fn image_build_version_arn(&self) -> ::std::option::Option<&str> {
        self.image_build_version_arn.as_deref()
    }
    /// <p>The output message from the list action, if applicable.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListWorkflowStepExecutionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorkflowStepExecutionsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkflowStepExecutionsOutput`](crate::operation::list_workflow_step_executions::ListWorkflowStepExecutionsOutput).
    pub fn builder() -> crate::operation::list_workflow_step_executions::builders::ListWorkflowStepExecutionsOutputBuilder {
        crate::operation::list_workflow_step_executions::builders::ListWorkflowStepExecutionsOutputBuilder::default()
    }
}

/// A builder for [`ListWorkflowStepExecutionsOutput`](crate::operation::list_workflow_step_executions::ListWorkflowStepExecutionsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListWorkflowStepExecutionsOutputBuilder {
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) steps: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowStepMetadata>>,
    pub(crate) workflow_build_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) image_build_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkflowStepExecutionsOutputBuilder {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// Appends an item to `steps`.
    ///
    /// To override the contents of this collection use [`set_steps`](Self::set_steps).
    ///
    /// <p>Contains an array of runtime details that represents each step in this runtime instance of the workflow.</p>
    pub fn steps(mut self, input: crate::types::WorkflowStepMetadata) -> Self {
        let mut v = self.steps.unwrap_or_default();
        v.push(input);
        self.steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains an array of runtime details that represents each step in this runtime instance of the workflow.</p>
    pub fn set_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowStepMetadata>>) -> Self {
        self.steps = input;
        self
    }
    /// <p>Contains an array of runtime details that represents each step in this runtime instance of the workflow.</p>
    pub fn get_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkflowStepMetadata>> {
        &self.steps
    }
    /// <p>The build version ARN for the Image Builder workflow resource that defines the steps for this runtime instance of the workflow.</p>
    pub fn workflow_build_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_build_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The build version ARN for the Image Builder workflow resource that defines the steps for this runtime instance of the workflow.</p>
    pub fn set_workflow_build_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_build_version_arn = input;
        self
    }
    /// <p>The build version ARN for the Image Builder workflow resource that defines the steps for this runtime instance of the workflow.</p>
    pub fn get_workflow_build_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_build_version_arn
    }
    /// <p>The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.</p>
    pub fn workflow_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.</p>
    pub fn set_workflow_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_execution_id = input;
        self
    }
    /// <p>The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.</p>
    pub fn get_workflow_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_execution_id
    }
    /// <p>The image build version resource ARN that's associated with the specified runtime instance of the workflow.</p>
    pub fn image_build_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_build_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The image build version resource ARN that's associated with the specified runtime instance of the workflow.</p>
    pub fn set_image_build_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_build_version_arn = input;
        self
    }
    /// <p>The image build version resource ARN that's associated with the specified runtime instance of the workflow.</p>
    pub fn get_image_build_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_build_version_arn
    }
    /// <p>The output message from the list action, if applicable.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The output message from the list action, if applicable.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The output message from the list action, if applicable.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListWorkflowStepExecutionsOutput`](crate::operation::list_workflow_step_executions::ListWorkflowStepExecutionsOutput).
    pub fn build(self) -> crate::operation::list_workflow_step_executions::ListWorkflowStepExecutionsOutput {
        crate::operation::list_workflow_step_executions::ListWorkflowStepExecutionsOutput {
            request_id: self.request_id,
            steps: self.steps,
            workflow_build_version_arn: self.workflow_build_version_arn,
            workflow_execution_id: self.workflow_execution_id,
            image_build_version_arn: self.image_build_version_arn,
            message: self.message,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
