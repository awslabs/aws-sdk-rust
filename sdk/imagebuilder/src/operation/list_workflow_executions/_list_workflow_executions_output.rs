// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListWorkflowExecutionsOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>Contains an array of runtime details that represents each time a workflow ran for the requested image build version.</p>
    pub workflow_executions: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowExecutionMetadata>>,
    /// <p>The resource ARN of the image build version for which you requested a list of workflow runtime details.</p>
    pub image_build_version_arn: ::std::option::Option<::std::string::String>,
    /// <p>The output message from the list action, if applicable.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkflowExecutionsOutput {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>Contains an array of runtime details that represents each time a workflow ran for the requested image build version.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.workflow_executions.is_none()`.
    pub fn workflow_executions(&self) -> &[crate::types::WorkflowExecutionMetadata] {
        self.workflow_executions.as_deref().unwrap_or_default()
    }
    /// <p>The resource ARN of the image build version for which you requested a list of workflow runtime details.</p>
    pub fn image_build_version_arn(&self) -> ::std::option::Option<&str> {
        self.image_build_version_arn.as_deref()
    }
    /// <p>The output message from the list action, if applicable.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListWorkflowExecutionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorkflowExecutionsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkflowExecutionsOutput`](crate::operation::list_workflow_executions::ListWorkflowExecutionsOutput).
    pub fn builder() -> crate::operation::list_workflow_executions::builders::ListWorkflowExecutionsOutputBuilder {
        crate::operation::list_workflow_executions::builders::ListWorkflowExecutionsOutputBuilder::default()
    }
}

/// A builder for [`ListWorkflowExecutionsOutput`](crate::operation::list_workflow_executions::ListWorkflowExecutionsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListWorkflowExecutionsOutputBuilder {
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_executions: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowExecutionMetadata>>,
    pub(crate) image_build_version_arn: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkflowExecutionsOutputBuilder {
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The request ID that uniquely identifies this request.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// Appends an item to `workflow_executions`.
    ///
    /// To override the contents of this collection use [`set_workflow_executions`](Self::set_workflow_executions).
    ///
    /// <p>Contains an array of runtime details that represents each time a workflow ran for the requested image build version.</p>
    pub fn workflow_executions(mut self, input: crate::types::WorkflowExecutionMetadata) -> Self {
        let mut v = self.workflow_executions.unwrap_or_default();
        v.push(input);
        self.workflow_executions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains an array of runtime details that represents each time a workflow ran for the requested image build version.</p>
    pub fn set_workflow_executions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WorkflowExecutionMetadata>>) -> Self {
        self.workflow_executions = input;
        self
    }
    /// <p>Contains an array of runtime details that represents each time a workflow ran for the requested image build version.</p>
    pub fn get_workflow_executions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WorkflowExecutionMetadata>> {
        &self.workflow_executions
    }
    /// <p>The resource ARN of the image build version for which you requested a list of workflow runtime details.</p>
    pub fn image_build_version_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_build_version_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ARN of the image build version for which you requested a list of workflow runtime details.</p>
    pub fn set_image_build_version_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_build_version_arn = input;
        self
    }
    /// <p>The resource ARN of the image build version for which you requested a list of workflow runtime details.</p>
    pub fn get_image_build_version_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_build_version_arn
    }
    /// <p>The output message from the list action, if applicable.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The output message from the list action, if applicable.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The output message from the list action, if applicable.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListWorkflowExecutionsOutput`](crate::operation::list_workflow_executions::ListWorkflowExecutionsOutput).
    pub fn build(self) -> crate::operation::list_workflow_executions::ListWorkflowExecutionsOutput {
        crate::operation::list_workflow_executions::ListWorkflowExecutionsOutput {
            request_id: self.request_id,
            workflow_executions: self.workflow_executions,
            image_build_version_arn: self.image_build_version_arn,
            message: self.message,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
