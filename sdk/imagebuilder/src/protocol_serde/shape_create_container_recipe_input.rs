// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_container_recipe_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_container_recipe::CreateContainerRecipeInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.components {
        let mut array_3 = object.key("components").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_component_configuration::ser_component_configuration(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.container_type {
        object.key("containerType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.description {
        object.key("description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.dockerfile_template_data {
        object.key("dockerfileTemplateData").string(var_8.as_str());
    }
    if let Some(var_9) = &input.dockerfile_template_uri {
        object.key("dockerfileTemplateUri").string(var_9.as_str());
    }
    if let Some(var_10) = &input.image_os_version_override {
        object.key("imageOsVersionOverride").string(var_10.as_str());
    }
    if let Some(var_11) = &input.instance_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("instanceConfiguration").start_object();
        crate::protocol_serde::shape_instance_configuration::ser_instance_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.name {
        object.key("name").string(var_14.as_str());
    }
    if let Some(var_15) = &input.parent_image {
        object.key("parentImage").string(var_15.as_str());
    }
    if let Some(var_16) = &input.platform_override {
        object.key("platformOverride").string(var_16.as_str());
    }
    if let Some(var_17) = &input.semantic_version {
        object.key("semanticVersion").string(var_17.as_str());
    }
    if let Some(var_18) = &input.tags {
        #[allow(unused_mut)]
        let mut object_19 = object.key("tags").start_object();
        for (key_20, value_21) in var_18 {
            {
                object_19.key(key_20.as_str()).string(value_21.as_str());
            }
        }
        object_19.finish();
    }
    if let Some(var_22) = &input.target_repository {
        #[allow(unused_mut)]
        let mut object_23 = object.key("targetRepository").start_object();
        crate::protocol_serde::shape_target_container_repository::ser_target_container_repository(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.working_directory {
        object.key("workingDirectory").string(var_24.as_str());
    }
    Ok(())
}
