// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_infrastructure_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_infrastructure_configuration::CreateInfrastructureConfigurationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.instance_metadata_options {
        #[allow(unused_mut)]
        let mut object_4 = object.key("instanceMetadataOptions").start_object();
        crate::protocol_serde::shape_instance_metadata_options::ser_instance_metadata_options(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.instance_profile_name {
        object.key("instanceProfileName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.instance_types {
        let mut array_7 = object.key("instanceTypes").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.key_pair {
        object.key("keyPair").string(var_9.as_str());
    }
    if let Some(var_10) = &input.logging {
        #[allow(unused_mut)]
        let mut object_11 = object.key("logging").start_object();
        crate::protocol_serde::shape_logging::ser_logging(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.name {
        object.key("name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.resource_tags {
        #[allow(unused_mut)]
        let mut object_14 = object.key("resourceTags").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    if let Some(var_17) = &input.security_group_ids {
        let mut array_18 = object.key("securityGroupIds").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.sns_topic_arn {
        object.key("snsTopicArn").string(var_20.as_str());
    }
    if let Some(var_21) = &input.subnet_id {
        object.key("subnetId").string(var_21.as_str());
    }
    if let Some(var_22) = &input.tags {
        #[allow(unused_mut)]
        let mut object_23 = object.key("tags").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24.as_str()).string(value_25.as_str());
            }
        }
        object_23.finish();
    }
    if let Some(var_26) = &input.terminate_instance_on_failure {
        object.key("terminateInstanceOnFailure").boolean(*var_26);
    }
    Ok(())
}
