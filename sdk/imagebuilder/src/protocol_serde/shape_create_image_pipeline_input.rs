// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_image_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_image_pipeline::CreateImagePipelineInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.container_recipe_arn {
        object.key("containerRecipeArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.distribution_configuration_arn {
        object
            .key("distributionConfigurationArn")
            .string(var_4.as_str());
    }
    if let Some(var_5) = &input.enhanced_image_metadata_enabled {
        object.key("enhancedImageMetadataEnabled").boolean(*var_5);
    }
    if let Some(var_6) = &input.image_recipe_arn {
        object.key("imageRecipeArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.image_tests_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("imageTestsConfiguration").start_object();
        crate::protocol_serde::shape_image_tests_configuration::ser_image_tests_configuration(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.infrastructure_configuration_arn {
        object
            .key("infrastructureConfigurationArn")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.name {
        object.key("name").string(var_10.as_str());
    }
    if let Some(var_11) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_12 = object.key("schedule").start_object();
        crate::protocol_serde::shape_schedule::ser_schedule(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.status {
        object.key("status").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tags {
        #[allow(unused_mut)]
        let mut object_15 = object.key("tags").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    Ok(())
}
