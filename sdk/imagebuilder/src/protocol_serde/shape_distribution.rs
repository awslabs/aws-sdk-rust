// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_distribution(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Distribution,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("region").string(input.region.as_str());
    }
    if let Some(var_1) = &input.ami_distribution_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("amiDistributionConfiguration").start_object();
        crate::protocol_serde::shape_ami_distribution_configuration::ser_ami_distribution_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.container_distribution_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("containerDistributionConfiguration").start_object();
        crate::protocol_serde::shape_container_distribution_configuration::ser_container_distribution_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.license_configuration_arns {
        let mut array_6 = object.key("licenseConfigurationArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.launch_template_configurations {
        let mut array_9 = object.key("launchTemplateConfigurations").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_launch_template_configuration::ser_launch_template_configuration(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.s3_export_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("s3ExportConfiguration").start_object();
        crate::protocol_serde::shape_s3_export_configuration::ser_s3_export_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.fast_launch_configurations {
        let mut array_15 = object.key("fastLaunchConfigurations").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_fast_launch_configuration::ser_fast_launch_configuration(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}

pub(crate) fn de_distribution<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Distribution>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DistributionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "region" => {
                            builder = builder.set_region(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "amiDistributionConfiguration" => {
                            builder = builder.set_ami_distribution_configuration(
                                crate::protocol_serde::shape_ami_distribution_configuration::de_ami_distribution_configuration(tokens)?,
                            );
                        }
                        "containerDistributionConfiguration" => {
                            builder = builder.set_container_distribution_configuration(
                                crate::protocol_serde::shape_container_distribution_configuration::de_container_distribution_configuration(tokens)?,
                            );
                        }
                        "licenseConfigurationArns" => {
                            builder = builder.set_license_configuration_arns(
                                crate::protocol_serde::shape_license_configuration_arn_list::de_license_configuration_arn_list(tokens)?,
                            );
                        }
                        "launchTemplateConfigurations" => {
                            builder = builder.set_launch_template_configurations(
                                crate::protocol_serde::shape_launch_template_configuration_list::de_launch_template_configuration_list(tokens)?,
                            );
                        }
                        "s3ExportConfiguration" => {
                            builder = builder.set_s3_export_configuration(
                                crate::protocol_serde::shape_s3_export_configuration::de_s3_export_configuration(tokens)?,
                            );
                        }
                        "fastLaunchConfigurations" => {
                            builder = builder.set_fast_launch_configurations(
                                crate::protocol_serde::shape_fast_launch_configuration_list::de_fast_launch_configuration_list(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::distribution_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
