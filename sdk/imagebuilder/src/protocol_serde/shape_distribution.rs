// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_distribution(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Distribution,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.region {
        object.key("region").string(var_1.as_str());
    }
    if let Some(var_2) = &input.ami_distribution_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("amiDistributionConfiguration").start_object();
        crate::protocol_serde::shape_ami_distribution_configuration::ser_ami_distribution_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.container_distribution_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object
            .key("containerDistributionConfiguration")
            .start_object();
        crate::protocol_serde::shape_container_distribution_configuration::ser_container_distribution_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.license_configuration_arns {
        let mut array_7 = object.key("licenseConfigurationArns").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.launch_template_configurations {
        let mut array_10 = object.key("launchTemplateConfigurations").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_launch_template_configuration::ser_launch_template_configuration(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.s3_export_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("s3ExportConfiguration").start_object();
        crate::protocol_serde::shape_s3_export_configuration::ser_s3_export_configuration(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.fast_launch_configurations {
        let mut array_16 = object.key("fastLaunchConfigurations").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_fast_launch_configuration::ser_fast_launch_configuration(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub(crate) fn de_distribution<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Distribution>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DistributionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "region" => {
                                builder = builder.set_region(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "amiDistributionConfiguration" => {
                                builder = builder.set_ami_distribution_configuration(
                                    crate::protocol_serde::shape_ami_distribution_configuration::de_ami_distribution_configuration(tokens)?
                                );
                            }
                            "containerDistributionConfiguration" => {
                                builder = builder.set_container_distribution_configuration(
                                    crate::protocol_serde::shape_container_distribution_configuration::de_container_distribution_configuration(tokens)?
                                );
                            }
                            "licenseConfigurationArns" => {
                                builder = builder.set_license_configuration_arns(
                                    crate::protocol_serde::shape_license_configuration_arn_list::de_license_configuration_arn_list(tokens)?
                                );
                            }
                            "launchTemplateConfigurations" => {
                                builder = builder.set_launch_template_configurations(
                                    crate::protocol_serde::shape_launch_template_configuration_list::de_launch_template_configuration_list(tokens)?
                                );
                            }
                            "s3ExportConfiguration" => {
                                builder = builder.set_s3_export_configuration(
                                    crate::protocol_serde::shape_s3_export_configuration::de_s3_export_configuration(tokens)?
                                );
                            }
                            "fastLaunchConfigurations" => {
                                builder = builder.set_fast_launch_configurations(
                                    crate::protocol_serde::shape_fast_launch_configuration_list::de_fast_launch_configuration_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
