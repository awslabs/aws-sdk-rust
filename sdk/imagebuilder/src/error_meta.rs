// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You have exceeded the permitted request rate for the specific operation.</p>
    CallRateLimitExceededException(crate::error::CallRateLimitExceededException),
    /// <p>These errors are usually caused by a client action, such as using an action or resource on behalf of a user that doesn't have permissions to use the action or resource, or specifying an invalid resource identifier.</p>
    ClientException(crate::error::ClientException),
    /// <p>You are not authorized to perform the requested operation.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>You have specified a client token for an operation using parameter values that differ from a previous request that used the same client token.</p>
    IdempotentParameterMismatchException(crate::error::IdempotentParameterMismatchException),
    /// <p>You have provided an invalid pagination token in your request.</p>
    InvalidPaginationTokenException(crate::error::InvalidPaginationTokenException),
    /// <p>You have specified two or more mutually exclusive parameters. Review the error message for details.</p>
    InvalidParameterCombinationException(crate::error::InvalidParameterCombinationException),
    /// <p>The specified parameter is invalid. Review the available parameters for the API request.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>The value that you provided for the specified parameter is invalid.</p>
    InvalidParameterValueException(crate::error::InvalidParameterValueException),
    /// <p>You have made a request for an action that is not supported by the service.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>Your version number is out of bounds or does not follow the required syntax.</p>
    InvalidVersionNumberException(crate::error::InvalidVersionNumberException),
    /// <p>The resource that you are trying to create already exists.</p>
    ResourceAlreadyExistsException(crate::error::ResourceAlreadyExistsException),
    /// <p>You have attempted to mutate or delete a resource with a dependency that prohibits this action. See the error message for more details.</p>
    ResourceDependencyException(crate::error::ResourceDependencyException),
    /// <p>The resource that you are trying to operate on is currently in use. Review the message details and retry later.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>At least one of the resources referenced by your request does not exist.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>This exception is thrown when the service encounters an unrecoverable exception.</p>
    ServiceException(crate::error::ServiceException),
    /// <p>You have exceeded the number of permitted resources or operations for this service. For service quotas, see <a href="https://docs.aws.amazon.com/general/latest/gr/imagebuilder.html#limits_imagebuilder">EC2 Image Builder endpoints and quotas</a>.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The service is unable to process your request at this time.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CallRateLimitExceededException(inner) => inner.fmt(f),
            Error::ClientException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatchException(inner) => inner.fmt(f),
            Error::InvalidPaginationTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterCombinationException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidParameterValueException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::InvalidVersionNumberException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceDependencyException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelImageCreationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelImageCreationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelImageCreationError> for Error {
    fn from(err: crate::error::CancelImageCreationError) -> Self {
        match err {
            crate::error::CancelImageCreationError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::CancelImageCreationError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::CancelImageCreationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CancelImageCreationError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CancelImageCreationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CancelImageCreationError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CancelImageCreationError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CancelImageCreationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CancelImageCreationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateComponentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateComponentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateComponentError> for Error {
    fn from(err: crate::error::CreateComponentError) -> Self {
        match err {
            crate::error::CreateComponentError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::CreateComponentError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::CreateComponentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateComponentError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CreateComponentError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::CreateComponentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateComponentError::InvalidVersionNumberException(inner) => {
                Error::InvalidVersionNumberException(inner)
            }
            crate::error::CreateComponentError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateComponentError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateComponentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateComponentError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateContainerRecipeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateContainerRecipeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateContainerRecipeError> for Error {
    fn from(err: crate::error::CreateContainerRecipeError) -> Self {
        match err {
            crate::error::CreateContainerRecipeError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::CreateContainerRecipeError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::CreateContainerRecipeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateContainerRecipeError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateContainerRecipeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateContainerRecipeError::InvalidVersionNumberException(inner) => {
                Error::InvalidVersionNumberException(inner)
            }
            crate::error::CreateContainerRecipeError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateContainerRecipeError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateContainerRecipeError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateContainerRecipeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateContainerRecipeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateContainerRecipeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateDistributionConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateDistributionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDistributionConfigurationError> for Error {
    fn from(err: crate::error::CreateDistributionConfigurationError) -> Self {
        match err {
            crate::error::CreateDistributionConfigurationError::CallRateLimitExceededException(inner) => Error::CallRateLimitExceededException(inner),
            crate::error::CreateDistributionConfigurationError::ClientException(inner) => Error::ClientException(inner),
            crate::error::CreateDistributionConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::CreateDistributionConfigurationError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateDistributionConfigurationError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::CreateDistributionConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreateDistributionConfigurationError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateDistributionConfigurationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateDistributionConfigurationError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::CreateDistributionConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateDistributionConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::CreateDistributionConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateImageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateImageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateImageError> for Error {
    fn from(err: crate::error::CreateImageError) -> Self {
        match err {
            crate::error::CreateImageError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::CreateImageError::ClientException(inner) => Error::ClientException(inner),
            crate::error::CreateImageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateImageError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CreateImageError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateImageError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateImageError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateImageError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateImageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateImagePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateImagePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateImagePipelineError> for Error {
    fn from(err: crate::error::CreateImagePipelineError) -> Self {
        match err {
            crate::error::CreateImagePipelineError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::CreateImagePipelineError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::CreateImagePipelineError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateImagePipelineError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CreateImagePipelineError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateImagePipelineError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateImagePipelineError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateImagePipelineError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateImagePipelineError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateImagePipelineError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateImagePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateImageRecipeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateImageRecipeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateImageRecipeError> for Error {
    fn from(err: crate::error::CreateImageRecipeError) -> Self {
        match err {
            crate::error::CreateImageRecipeError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::CreateImageRecipeError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::CreateImageRecipeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateImageRecipeError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CreateImageRecipeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateImageRecipeError::InvalidVersionNumberException(inner) => {
                Error::InvalidVersionNumberException(inner)
            }
            crate::error::CreateImageRecipeError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateImageRecipeError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::CreateImageRecipeError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::CreateImageRecipeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateImageRecipeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateImageRecipeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateInfrastructureConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateInfrastructureConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInfrastructureConfigurationError> for Error {
    fn from(err: crate::error::CreateInfrastructureConfigurationError) -> Self {
        match err {
            crate::error::CreateInfrastructureConfigurationError::CallRateLimitExceededException(inner) => Error::CallRateLimitExceededException(inner),
            crate::error::CreateInfrastructureConfigurationError::ClientException(inner) => Error::ClientException(inner),
            crate::error::CreateInfrastructureConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::CreateInfrastructureConfigurationError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateInfrastructureConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::CreateInfrastructureConfigurationError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateInfrastructureConfigurationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::CreateInfrastructureConfigurationError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::CreateInfrastructureConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateInfrastructureConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::CreateInfrastructureConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteComponentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteComponentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteComponentError> for Error {
    fn from(err: crate::error::DeleteComponentError) -> Self {
        match err {
            crate::error::DeleteComponentError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::DeleteComponentError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteComponentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteComponentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteComponentError::ResourceDependencyException(inner) => {
                Error::ResourceDependencyException(inner)
            }
            crate::error::DeleteComponentError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteComponentError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteContainerRecipeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteContainerRecipeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteContainerRecipeError> for Error {
    fn from(err: crate::error::DeleteContainerRecipeError) -> Self {
        match err {
            crate::error::DeleteContainerRecipeError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::DeleteContainerRecipeError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteContainerRecipeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteContainerRecipeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteContainerRecipeError::ResourceDependencyException(inner) => {
                Error::ResourceDependencyException(inner)
            }
            crate::error::DeleteContainerRecipeError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteContainerRecipeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteContainerRecipeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteDistributionConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteDistributionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDistributionConfigurationError> for Error {
    fn from(err: crate::error::DeleteDistributionConfigurationError) -> Self {
        match err {
            crate::error::DeleteDistributionConfigurationError::CallRateLimitExceededException(
                inner,
            ) => Error::CallRateLimitExceededException(inner),
            crate::error::DeleteDistributionConfigurationError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteDistributionConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteDistributionConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteDistributionConfigurationError::ResourceDependencyException(
                inner,
            ) => Error::ResourceDependencyException(inner),
            crate::error::DeleteDistributionConfigurationError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteDistributionConfigurationError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteDistributionConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteImageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteImageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteImageError> for Error {
    fn from(err: crate::error::DeleteImageError) -> Self {
        match err {
            crate::error::DeleteImageError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::DeleteImageError::ClientException(inner) => Error::ClientException(inner),
            crate::error::DeleteImageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteImageError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteImageError::ResourceDependencyException(inner) => {
                Error::ResourceDependencyException(inner)
            }
            crate::error::DeleteImageError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteImageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteImagePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteImagePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteImagePipelineError> for Error {
    fn from(err: crate::error::DeleteImagePipelineError) -> Self {
        match err {
            crate::error::DeleteImagePipelineError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::DeleteImagePipelineError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteImagePipelineError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteImagePipelineError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteImagePipelineError::ResourceDependencyException(inner) => {
                Error::ResourceDependencyException(inner)
            }
            crate::error::DeleteImagePipelineError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteImagePipelineError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteImagePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteImageRecipeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteImageRecipeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteImageRecipeError> for Error {
    fn from(err: crate::error::DeleteImageRecipeError) -> Self {
        match err {
            crate::error::DeleteImageRecipeError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::DeleteImageRecipeError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::DeleteImageRecipeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteImageRecipeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteImageRecipeError::ResourceDependencyException(inner) => {
                Error::ResourceDependencyException(inner)
            }
            crate::error::DeleteImageRecipeError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::DeleteImageRecipeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteImageRecipeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteInfrastructureConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteInfrastructureConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInfrastructureConfigurationError> for Error {
    fn from(err: crate::error::DeleteInfrastructureConfigurationError) -> Self {
        match err {
            crate::error::DeleteInfrastructureConfigurationError::CallRateLimitExceededException(inner) => Error::CallRateLimitExceededException(inner),
            crate::error::DeleteInfrastructureConfigurationError::ClientException(inner) => Error::ClientException(inner),
            crate::error::DeleteInfrastructureConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DeleteInfrastructureConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DeleteInfrastructureConfigurationError::ResourceDependencyException(inner) => Error::ResourceDependencyException(inner),
            crate::error::DeleteInfrastructureConfigurationError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::DeleteInfrastructureConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DeleteInfrastructureConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetComponentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetComponentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComponentError> for Error {
    fn from(err: crate::error::GetComponentError) -> Self {
        match err {
            crate::error::GetComponentError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::GetComponentError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::GetComponentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetComponentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetComponentError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetComponentError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetComponentPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetComponentPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComponentPolicyError> for Error {
    fn from(err: crate::error::GetComponentPolicyError) -> Self {
        match err {
            crate::error::GetComponentPolicyError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::GetComponentPolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetComponentPolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetComponentPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetComponentPolicyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetComponentPolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetComponentPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContainerRecipeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContainerRecipeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerRecipeError> for Error {
    fn from(err: crate::error::GetContainerRecipeError) -> Self {
        match err {
            crate::error::GetContainerRecipeError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::GetContainerRecipeError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::GetContainerRecipeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetContainerRecipeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetContainerRecipeError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContainerRecipeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetContainerRecipeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContainerRecipePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContainerRecipePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContainerRecipePolicyError> for Error {
    fn from(err: crate::error::GetContainerRecipePolicyError) -> Self {
        match err {
            crate::error::GetContainerRecipePolicyError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::GetContainerRecipePolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetContainerRecipePolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetContainerRecipePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetContainerRecipePolicyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetContainerRecipePolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetContainerRecipePolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDistributionConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDistributionConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDistributionConfigurationError> for Error {
    fn from(err: crate::error::GetDistributionConfigurationError) -> Self {
        match err {
            crate::error::GetDistributionConfigurationError::CallRateLimitExceededException(
                inner,
            ) => Error::CallRateLimitExceededException(inner),
            crate::error::GetDistributionConfigurationError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::GetDistributionConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetDistributionConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetDistributionConfigurationError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetDistributionConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetDistributionConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetImageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImageError> for Error {
    fn from(err: crate::error::GetImageError) -> Self {
        match err {
            crate::error::GetImageError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::GetImageError::ClientException(inner) => Error::ClientException(inner),
            crate::error::GetImageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetImageError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetImageError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::GetImageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImagePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetImagePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImagePipelineError> for Error {
    fn from(err: crate::error::GetImagePipelineError) -> Self {
        match err {
            crate::error::GetImagePipelineError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::GetImagePipelineError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::GetImagePipelineError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetImagePipelineError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetImagePipelineError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetImagePipelineError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetImagePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImagePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetImagePolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImagePolicyError> for Error {
    fn from(err: crate::error::GetImagePolicyError) -> Self {
        match err {
            crate::error::GetImagePolicyError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::GetImagePolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetImagePolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetImagePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetImagePolicyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetImagePolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetImagePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImageRecipeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetImageRecipeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImageRecipeError> for Error {
    fn from(err: crate::error::GetImageRecipeError) -> Self {
        match err {
            crate::error::GetImageRecipeError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::GetImageRecipeError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::GetImageRecipeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetImageRecipeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetImageRecipeError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetImageRecipeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetImageRecipeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImageRecipePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetImageRecipePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImageRecipePolicyError> for Error {
    fn from(err: crate::error::GetImageRecipePolicyError) -> Self {
        match err {
            crate::error::GetImageRecipePolicyError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::GetImageRecipePolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetImageRecipePolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetImageRecipePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetImageRecipePolicyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetImageRecipePolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetImageRecipePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetInfrastructureConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetInfrastructureConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInfrastructureConfigurationError> for Error {
    fn from(err: crate::error::GetInfrastructureConfigurationError) -> Self {
        match err {
            crate::error::GetInfrastructureConfigurationError::CallRateLimitExceededException(
                inner,
            ) => Error::CallRateLimitExceededException(inner),
            crate::error::GetInfrastructureConfigurationError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::GetInfrastructureConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetInfrastructureConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetInfrastructureConfigurationError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::GetInfrastructureConfigurationError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::GetInfrastructureConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportComponentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ImportComponentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportComponentError> for Error {
    fn from(err: crate::error::ImportComponentError) -> Self {
        match err {
            crate::error::ImportComponentError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::ImportComponentError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ImportComponentError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ImportComponentError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::ImportComponentError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::ImportComponentError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ImportComponentError::InvalidVersionNumberException(inner) => {
                Error::InvalidVersionNumberException(inner)
            }
            crate::error::ImportComponentError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::ImportComponentError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ImportComponentError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ImportComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportVmImageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ImportVmImageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportVmImageError> for Error {
    fn from(err: crate::error::ImportVmImageError) -> Self {
        match err {
            crate::error::ImportVmImageError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ImportVmImageError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ImportVmImageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ImportVmImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListComponentBuildVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListComponentBuildVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListComponentBuildVersionsError> for Error {
    fn from(err: crate::error::ListComponentBuildVersionsError) -> Self {
        match err {
            crate::error::ListComponentBuildVersionsError::CallRateLimitExceededException(
                inner,
            ) => Error::CallRateLimitExceededException(inner),
            crate::error::ListComponentBuildVersionsError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListComponentBuildVersionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListComponentBuildVersionsError::InvalidPaginationTokenException(
                inner,
            ) => Error::InvalidPaginationTokenException(inner),
            crate::error::ListComponentBuildVersionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListComponentBuildVersionsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListComponentBuildVersionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListComponentBuildVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListComponentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListComponentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListComponentsError> for Error {
    fn from(err: crate::error::ListComponentsError) -> Self {
        match err {
            crate::error::ListComponentsError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::ListComponentsError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListComponentsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListComponentsError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::error::ListComponentsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListComponentsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListComponentsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListComponentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListContainerRecipesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListContainerRecipesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListContainerRecipesError> for Error {
    fn from(err: crate::error::ListContainerRecipesError) -> Self {
        match err {
            crate::error::ListContainerRecipesError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::ListContainerRecipesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListContainerRecipesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListContainerRecipesError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::error::ListContainerRecipesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListContainerRecipesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListContainerRecipesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListContainerRecipesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListDistributionConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListDistributionConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDistributionConfigurationsError> for Error {
    fn from(err: crate::error::ListDistributionConfigurationsError) -> Self {
        match err {
            crate::error::ListDistributionConfigurationsError::CallRateLimitExceededException(
                inner,
            ) => Error::CallRateLimitExceededException(inner),
            crate::error::ListDistributionConfigurationsError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListDistributionConfigurationsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListDistributionConfigurationsError::InvalidPaginationTokenException(
                inner,
            ) => Error::InvalidPaginationTokenException(inner),
            crate::error::ListDistributionConfigurationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListDistributionConfigurationsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListDistributionConfigurationsError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::ListDistributionConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImageBuildVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListImageBuildVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImageBuildVersionsError> for Error {
    fn from(err: crate::error::ListImageBuildVersionsError) -> Self {
        match err {
            crate::error::ListImageBuildVersionsError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::ListImageBuildVersionsError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListImageBuildVersionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListImageBuildVersionsError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::error::ListImageBuildVersionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListImageBuildVersionsError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListImageBuildVersionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListImageBuildVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImagePackagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListImagePackagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImagePackagesError> for Error {
    fn from(err: crate::error::ListImagePackagesError) -> Self {
        match err {
            crate::error::ListImagePackagesError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::ListImagePackagesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListImagePackagesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListImagePackagesError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::error::ListImagePackagesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListImagePackagesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListImagePackagesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListImagePackagesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListImagePackagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImagePipelineImagesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListImagePipelineImagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImagePipelineImagesError> for Error {
    fn from(err: crate::error::ListImagePipelineImagesError) -> Self {
        match err {
            crate::error::ListImagePipelineImagesError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::ListImagePipelineImagesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListImagePipelineImagesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListImagePipelineImagesError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::error::ListImagePipelineImagesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListImagePipelineImagesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListImagePipelineImagesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListImagePipelineImagesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListImagePipelineImagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImagePipelinesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListImagePipelinesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImagePipelinesError> for Error {
    fn from(err: crate::error::ListImagePipelinesError) -> Self {
        match err {
            crate::error::ListImagePipelinesError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::ListImagePipelinesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListImagePipelinesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListImagePipelinesError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::error::ListImagePipelinesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListImagePipelinesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListImagePipelinesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListImagePipelinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImageRecipesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListImageRecipesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImageRecipesError> for Error {
    fn from(err: crate::error::ListImageRecipesError) -> Self {
        match err {
            crate::error::ListImageRecipesError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::ListImageRecipesError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::ListImageRecipesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListImageRecipesError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::error::ListImageRecipesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListImageRecipesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListImageRecipesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListImageRecipesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListImagesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImagesError> for Error {
    fn from(err: crate::error::ListImagesError) -> Self {
        match err {
            crate::error::ListImagesError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::ListImagesError::ClientException(inner) => Error::ClientException(inner),
            crate::error::ListImagesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListImagesError::InvalidPaginationTokenException(inner) => {
                Error::InvalidPaginationTokenException(inner)
            }
            crate::error::ListImagesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListImagesError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListImagesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListImagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListInfrastructureConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListInfrastructureConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInfrastructureConfigurationsError> for Error {
    fn from(err: crate::error::ListInfrastructureConfigurationsError) -> Self {
        match err {
            crate::error::ListInfrastructureConfigurationsError::CallRateLimitExceededException(inner) => Error::CallRateLimitExceededException(inner),
            crate::error::ListInfrastructureConfigurationsError::ClientException(inner) => Error::ClientException(inner),
            crate::error::ListInfrastructureConfigurationsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListInfrastructureConfigurationsError::InvalidPaginationTokenException(inner) => Error::InvalidPaginationTokenException(inner),
            crate::error::ListInfrastructureConfigurationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListInfrastructureConfigurationsError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::ListInfrastructureConfigurationsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListInfrastructureConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutComponentPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutComponentPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutComponentPolicyError> for Error {
    fn from(err: crate::error::PutComponentPolicyError) -> Self {
        match err {
            crate::error::PutComponentPolicyError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::PutComponentPolicyError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::PutComponentPolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutComponentPolicyError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::PutComponentPolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PutComponentPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutComponentPolicyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::PutComponentPolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutComponentPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutContainerRecipePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutContainerRecipePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutContainerRecipePolicyError> for Error {
    fn from(err: crate::error::PutContainerRecipePolicyError) -> Self {
        match err {
            crate::error::PutContainerRecipePolicyError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::PutContainerRecipePolicyError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::PutContainerRecipePolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutContainerRecipePolicyError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::PutContainerRecipePolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PutContainerRecipePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutContainerRecipePolicyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::PutContainerRecipePolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutContainerRecipePolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutImagePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutImagePolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutImagePolicyError> for Error {
    fn from(err: crate::error::PutImagePolicyError) -> Self {
        match err {
            crate::error::PutImagePolicyError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::PutImagePolicyError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::PutImagePolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutImagePolicyError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::PutImagePolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PutImagePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutImagePolicyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::PutImagePolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutImagePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutImageRecipePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutImageRecipePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutImageRecipePolicyError> for Error {
    fn from(err: crate::error::PutImageRecipePolicyError) -> Self {
        match err {
            crate::error::PutImageRecipePolicyError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::PutImageRecipePolicyError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::PutImageRecipePolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutImageRecipePolicyError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::PutImageRecipePolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PutImageRecipePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutImageRecipePolicyError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::PutImageRecipePolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::PutImageRecipePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartImagePipelineExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartImagePipelineExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartImagePipelineExecutionError> for Error {
    fn from(err: crate::error::StartImagePipelineExecutionError) -> Self {
        match err {
            crate::error::StartImagePipelineExecutionError::CallRateLimitExceededException(inner) => Error::CallRateLimitExceededException(inner),
            crate::error::StartImagePipelineExecutionError::ClientException(inner) => Error::ClientException(inner),
            crate::error::StartImagePipelineExecutionError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::StartImagePipelineExecutionError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::StartImagePipelineExecutionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::StartImagePipelineExecutionError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::StartImagePipelineExecutionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartImagePipelineExecutionError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::StartImagePipelineExecutionError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::StartImagePipelineExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateDistributionConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateDistributionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDistributionConfigurationError> for Error {
    fn from(err: crate::error::UpdateDistributionConfigurationError) -> Self {
        match err {
            crate::error::UpdateDistributionConfigurationError::CallRateLimitExceededException(inner) => Error::CallRateLimitExceededException(inner),
            crate::error::UpdateDistributionConfigurationError::ClientException(inner) => Error::ClientException(inner),
            crate::error::UpdateDistributionConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdateDistributionConfigurationError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::UpdateDistributionConfigurationError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::UpdateDistributionConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateDistributionConfigurationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::UpdateDistributionConfigurationError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::UpdateDistributionConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateDistributionConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateImagePipelineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateImagePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateImagePipelineError> for Error {
    fn from(err: crate::error::UpdateImagePipelineError) -> Self {
        match err {
            crate::error::UpdateImagePipelineError::CallRateLimitExceededException(inner) => {
                Error::CallRateLimitExceededException(inner)
            }
            crate::error::UpdateImagePipelineError::ClientException(inner) => {
                Error::ClientException(inner)
            }
            crate::error::UpdateImagePipelineError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateImagePipelineError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::UpdateImagePipelineError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateImagePipelineError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::UpdateImagePipelineError::ServiceException(inner) => {
                Error::ServiceException(inner)
            }
            crate::error::UpdateImagePipelineError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateImagePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateInfrastructureConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateInfrastructureConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateInfrastructureConfigurationError> for Error {
    fn from(err: crate::error::UpdateInfrastructureConfigurationError) -> Self {
        match err {
            crate::error::UpdateInfrastructureConfigurationError::CallRateLimitExceededException(inner) => Error::CallRateLimitExceededException(inner),
            crate::error::UpdateInfrastructureConfigurationError::ClientException(inner) => Error::ClientException(inner),
            crate::error::UpdateInfrastructureConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::UpdateInfrastructureConfigurationError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::UpdateInfrastructureConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateInfrastructureConfigurationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::error::UpdateInfrastructureConfigurationError::ServiceException(inner) => Error::ServiceException(inner),
            crate::error::UpdateInfrastructureConfigurationError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateInfrastructureConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::CallRateLimitExceededException(e) => e.request_id(),
            Self::ClientException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::IdempotentParameterMismatchException(e) => e.request_id(),
            Self::InvalidPaginationTokenException(e) => e.request_id(),
            Self::InvalidParameterCombinationException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidParameterValueException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::InvalidVersionNumberException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceDependencyException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
