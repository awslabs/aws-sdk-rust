// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_component_build_versions_output_next_token(
    input: &crate::operation::list_component_build_versions::ListComponentBuildVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_components_output_next_token(
    input: &crate::operation::list_components::ListComponentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_container_recipes_output_next_token(
    input: &crate::operation::list_container_recipes::ListContainerRecipesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_distribution_configurations_output_next_token(
    input: &crate::operation::list_distribution_configurations::ListDistributionConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_image_build_versions_output_next_token(
    input: &crate::operation::list_image_build_versions::ListImageBuildVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_image_packages_output_next_token(
    input: &crate::operation::list_image_packages::ListImagePackagesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_image_pipeline_images_output_next_token(
    input: &crate::operation::list_image_pipeline_images::ListImagePipelineImagesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_image_pipelines_output_next_token(
    input: &crate::operation::list_image_pipelines::ListImagePipelinesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_image_recipes_output_next_token(
    input: &crate::operation::list_image_recipes::ListImageRecipesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_images_output_next_token(
    input: &crate::operation::list_images::ListImagesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_infrastructure_configurations_output_next_token(
    input: &crate::operation::list_infrastructure_configurations::ListInfrastructureConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_component_build_versions_output_component_summary_list(
    input: crate::operation::list_component_build_versions::ListComponentBuildVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ComponentSummary>> {
    let input = match input.component_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_components_output_component_version_list(
    input: crate::operation::list_components::ListComponentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ComponentVersion>> {
    let input = match input.component_version_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_container_recipes_output_container_recipe_summary_list(
    input: crate::operation::list_container_recipes::ListContainerRecipesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ContainerRecipeSummary>> {
    let input = match input.container_recipe_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_distribution_configurations_output_distribution_configuration_summary_list(
    input: crate::operation::list_distribution_configurations::ListDistributionConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DistributionConfigurationSummary>> {
    let input = match input.distribution_configuration_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_image_build_versions_output_image_summary_list(
    input: crate::operation::list_image_build_versions::ListImageBuildVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ImageSummary>> {
    let input = match input.image_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_image_packages_output_image_package_list(
    input: crate::operation::list_image_packages::ListImagePackagesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ImagePackage>> {
    let input = match input.image_package_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_image_pipeline_images_output_image_summary_list(
    input: crate::operation::list_image_pipeline_images::ListImagePipelineImagesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ImageSummary>> {
    let input = match input.image_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_image_pipelines_output_image_pipeline_list(
    input: crate::operation::list_image_pipelines::ListImagePipelinesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ImagePipeline>> {
    let input = match input.image_pipeline_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_image_recipes_output_image_recipe_summary_list(
    input: crate::operation::list_image_recipes::ListImageRecipesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ImageRecipeSummary>> {
    let input = match input.image_recipe_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_images_output_image_version_list(
    input: crate::operation::list_images::ListImagesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ImageVersion>> {
    let input = match input.image_version_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_infrastructure_configurations_output_infrastructure_configuration_summary_list(
    input: crate::operation::list_infrastructure_configurations::ListInfrastructureConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::InfrastructureConfigurationSummary>> {
    let input = match input.infrastructure_configuration_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
