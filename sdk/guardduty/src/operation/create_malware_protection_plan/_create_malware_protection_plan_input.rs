// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMalwareProtectionPlanInput {
    /// <p>The idempotency token for the create request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the IAM role that has the permissions to scan and add tags to the associated protected resource.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub protected_resource: ::std::option::Option<crate::types::CreateProtectedResource>,
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub actions: ::std::option::Option<crate::types::MalwareProtectionPlanActions>,
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMalwareProtectionPlanInput {
    /// <p>The idempotency token for the create request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role that has the permissions to scan and add tags to the associated protected resource.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn protected_resource(&self) -> ::std::option::Option<&crate::types::CreateProtectedResource> {
        self.protected_resource.as_ref()
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn actions(&self) -> ::std::option::Option<&crate::types::MalwareProtectionPlanActions> {
        self.actions.as_ref()
    }
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateMalwareProtectionPlanInput {
    /// Creates a new builder-style object to manufacture [`CreateMalwareProtectionPlanInput`](crate::operation::create_malware_protection_plan::CreateMalwareProtectionPlanInput).
    pub fn builder() -> crate::operation::create_malware_protection_plan::builders::CreateMalwareProtectionPlanInputBuilder {
        crate::operation::create_malware_protection_plan::builders::CreateMalwareProtectionPlanInputBuilder::default()
    }
}

/// A builder for [`CreateMalwareProtectionPlanInput`](crate::operation::create_malware_protection_plan::CreateMalwareProtectionPlanInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMalwareProtectionPlanInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) protected_resource: ::std::option::Option<crate::types::CreateProtectedResource>,
    pub(crate) actions: ::std::option::Option<crate::types::MalwareProtectionPlanActions>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMalwareProtectionPlanInputBuilder {
    /// <p>The idempotency token for the create request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role that has the permissions to scan and add tags to the associated protected resource.</p>
    /// This field is required.
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role that has the permissions to scan and add tags to the associated protected resource.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role that has the permissions to scan and add tags to the associated protected resource.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    /// This field is required.
    pub fn protected_resource(mut self, input: crate::types::CreateProtectedResource) -> Self {
        self.protected_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn set_protected_resource(mut self, input: ::std::option::Option<crate::types::CreateProtectedResource>) -> Self {
        self.protected_resource = input;
        self
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn get_protected_resource(&self) -> &::std::option::Option<crate::types::CreateProtectedResource> {
        &self.protected_resource
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn actions(mut self, input: crate::types::MalwareProtectionPlanActions) -> Self {
        self.actions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<crate::types::MalwareProtectionPlanActions>) -> Self {
        self.actions = input;
        self
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn get_actions(&self) -> &::std::option::Option<crate::types::MalwareProtectionPlanActions> {
        &self.actions
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMalwareProtectionPlanInput`](crate::operation::create_malware_protection_plan::CreateMalwareProtectionPlanInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_malware_protection_plan::CreateMalwareProtectionPlanInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_malware_protection_plan::CreateMalwareProtectionPlanInput {
            client_token: self.client_token,
            role: self.role,
            protected_resource: self.protected_resource,
            actions: self.actions,
            tags: self.tags,
        })
    }
}
