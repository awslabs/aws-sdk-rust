// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateIpSetInput {
    /// <p>The detectorID that specifies the GuardDuty service whose IPSet you want to update.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The unique ID that specifies the IPSet that you want to update.</p>
    #[doc(hidden)]
    pub ip_set_id: std::option::Option<std::string::String>,
    /// <p>The unique ID that specifies the IPSet that you want to update.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The updated URI of the file that contains the IPSet. </p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>The updated Boolean value that specifies whether the IPSet is active or not.</p>
    #[doc(hidden)]
    pub activate: bool,
}
impl UpdateIpSetInput {
    /// <p>The detectorID that specifies the GuardDuty service whose IPSet you want to update.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The unique ID that specifies the IPSet that you want to update.</p>
    pub fn ip_set_id(&self) -> std::option::Option<&str> {
        self.ip_set_id.as_deref()
    }
    /// <p>The unique ID that specifies the IPSet that you want to update.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated URI of the file that contains the IPSet. </p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The updated Boolean value that specifies whether the IPSet is active or not.</p>
    pub fn activate(&self) -> bool {
        self.activate
    }
}
impl UpdateIpSetInput {
    /// Creates a new builder-style object to manufacture [`UpdateIpSetInput`](crate::operation::update_ip_set::UpdateIpSetInput).
    pub fn builder() -> crate::operation::update_ip_set::builders::UpdateIpSetInputBuilder {
        crate::operation::update_ip_set::builders::UpdateIpSetInputBuilder::default()
    }
}

/// A builder for [`UpdateIpSetInput`](crate::operation::update_ip_set::UpdateIpSetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateIpSetInputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) ip_set_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) activate: std::option::Option<bool>,
}
impl UpdateIpSetInputBuilder {
    /// <p>The detectorID that specifies the GuardDuty service whose IPSet you want to update.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The detectorID that specifies the GuardDuty service whose IPSet you want to update.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The unique ID that specifies the IPSet that you want to update.</p>
    pub fn ip_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_set_id = Some(input.into());
        self
    }
    /// <p>The unique ID that specifies the IPSet that you want to update.</p>
    pub fn set_ip_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_set_id = input;
        self
    }
    /// <p>The unique ID that specifies the IPSet that you want to update.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The unique ID that specifies the IPSet that you want to update.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The updated URI of the file that contains the IPSet. </p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>The updated URI of the file that contains the IPSet. </p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The updated Boolean value that specifies whether the IPSet is active or not.</p>
    pub fn activate(mut self, input: bool) -> Self {
        self.activate = Some(input);
        self
    }
    /// <p>The updated Boolean value that specifies whether the IPSet is active or not.</p>
    pub fn set_activate(mut self, input: std::option::Option<bool>) -> Self {
        self.activate = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateIpSetInput`](crate::operation::update_ip_set::UpdateIpSetInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_ip_set::UpdateIpSetInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_ip_set::UpdateIpSetInput {
            detector_id: self.detector_id,
            ip_set_id: self.ip_set_id,
            name: self.name,
            location: self.location,
            activate: self.activate.unwrap_or_default(),
        })
    }
}
