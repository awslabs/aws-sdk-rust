// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePublishingDestinationInput {
    /// <p>The ID of the detector associated with the publishing destinations to update.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The ID of the publishing destination to update.</p>
    #[doc(hidden)]
    pub destination_id: std::option::Option<std::string::String>,
    /// <p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>
    #[doc(hidden)]
    pub destination_properties: std::option::Option<crate::types::DestinationProperties>,
}
impl UpdatePublishingDestinationInput {
    /// <p>The ID of the detector associated with the publishing destinations to update.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The ID of the publishing destination to update.</p>
    pub fn destination_id(&self) -> std::option::Option<&str> {
        self.destination_id.as_deref()
    }
    /// <p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>
    pub fn destination_properties(
        &self,
    ) -> std::option::Option<&crate::types::DestinationProperties> {
        self.destination_properties.as_ref()
    }
}
impl UpdatePublishingDestinationInput {
    /// Creates a new builder-style object to manufacture [`UpdatePublishingDestinationInput`](crate::operation::update_publishing_destination::UpdatePublishingDestinationInput).
    pub fn builder() -> crate::operation::update_publishing_destination::builders::UpdatePublishingDestinationInputBuilder{
        crate::operation::update_publishing_destination::builders::UpdatePublishingDestinationInputBuilder::default()
    }
}

/// A builder for [`UpdatePublishingDestinationInput`](crate::operation::update_publishing_destination::UpdatePublishingDestinationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdatePublishingDestinationInputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) destination_id: std::option::Option<std::string::String>,
    pub(crate) destination_properties: std::option::Option<crate::types::DestinationProperties>,
}
impl UpdatePublishingDestinationInputBuilder {
    /// <p>The ID of the detector associated with the publishing destinations to update.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The ID of the detector associated with the publishing destinations to update.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The ID of the publishing destination to update.</p>
    pub fn destination_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_id = Some(input.into());
        self
    }
    /// <p>The ID of the publishing destination to update.</p>
    pub fn set_destination_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_id = input;
        self
    }
    /// <p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>
    pub fn destination_properties(mut self, input: crate::types::DestinationProperties) -> Self {
        self.destination_properties = Some(input);
        self
    }
    /// <p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>
    pub fn set_destination_properties(
        mut self,
        input: std::option::Option<crate::types::DestinationProperties>,
    ) -> Self {
        self.destination_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdatePublishingDestinationInput`](crate::operation::update_publishing_destination::UpdatePublishingDestinationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_publishing_destination::UpdatePublishingDestinationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_publishing_destination::UpdatePublishingDestinationInput {
                detector_id: self.detector_id,
                destination_id: self.destination_id,
                destination_properties: self.destination_properties,
            },
        )
    }
}
