// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFilterInput {
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.</p>
    pub detector_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the filter.</p>
    pub filter_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub action: ::std::option::Option<crate::types::FilterAction>,
    /// <p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>
    pub rank: ::std::option::Option<i32>,
    /// <p>Represents the criteria to be used in the filter for querying findings.</p>
    pub finding_criteria: ::std::option::Option<crate::types::FindingCriteria>,
}
impl UpdateFilterInput {
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.</p>
    pub fn detector_id(&self) -> ::std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The name of the filter.</p>
    pub fn filter_name(&self) -> ::std::option::Option<&str> {
        self.filter_name.as_deref()
    }
    /// <p>The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::FilterAction> {
        self.action.as_ref()
    }
    /// <p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>
    pub fn rank(&self) -> ::std::option::Option<i32> {
        self.rank
    }
    /// <p>Represents the criteria to be used in the filter for querying findings.</p>
    pub fn finding_criteria(&self) -> ::std::option::Option<&crate::types::FindingCriteria> {
        self.finding_criteria.as_ref()
    }
}
impl UpdateFilterInput {
    /// Creates a new builder-style object to manufacture [`UpdateFilterInput`](crate::operation::update_filter::UpdateFilterInput).
    pub fn builder() -> crate::operation::update_filter::builders::UpdateFilterInputBuilder {
        crate::operation::update_filter::builders::UpdateFilterInputBuilder::default()
    }
}

/// A builder for [`UpdateFilterInput`](crate::operation::update_filter::UpdateFilterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateFilterInputBuilder {
    pub(crate) detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) filter_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<crate::types::FilterAction>,
    pub(crate) rank: ::std::option::Option<i32>,
    pub(crate) finding_criteria: ::std::option::Option<crate::types::FindingCriteria>,
}
impl UpdateFilterInputBuilder {
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.</p>
    /// This field is required.
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_id
    }
    /// <p>The name of the filter.</p>
    /// This field is required.
    pub fn filter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the filter.</p>
    pub fn set_filter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_name = input;
        self
    }
    /// <p>The name of the filter.</p>
    pub fn get_filter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_name
    }
    /// <p>The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub fn action(mut self, input: crate::types::FilterAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::FilterAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::FilterAction> {
        &self.action
    }
    /// <p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>
    pub fn rank(mut self, input: i32) -> Self {
        self.rank = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>
    pub fn set_rank(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rank = input;
        self
    }
    /// <p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>
    pub fn get_rank(&self) -> &::std::option::Option<i32> {
        &self.rank
    }
    /// <p>Represents the criteria to be used in the filter for querying findings.</p>
    pub fn finding_criteria(mut self, input: crate::types::FindingCriteria) -> Self {
        self.finding_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the criteria to be used in the filter for querying findings.</p>
    pub fn set_finding_criteria(mut self, input: ::std::option::Option<crate::types::FindingCriteria>) -> Self {
        self.finding_criteria = input;
        self
    }
    /// <p>Represents the criteria to be used in the filter for querying findings.</p>
    pub fn get_finding_criteria(&self) -> &::std::option::Option<crate::types::FindingCriteria> {
        &self.finding_criteria
    }
    /// Consumes the builder and constructs a [`UpdateFilterInput`](crate::operation::update_filter::UpdateFilterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_filter::UpdateFilterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_filter::UpdateFilterInput {
            detector_id: self.detector_id,
            filter_name: self.filter_name,
            description: self.description,
            action: self.action,
            rank: self.rank,
            finding_criteria: self.finding_criteria,
        })
    }
}
