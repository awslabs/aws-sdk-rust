// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMalwareProtectionPlanInput {
    /// <p>A unique identifier associated with the Malware Protection plan.</p>
    pub malware_protection_plan_id: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the IAM role with permissions to scan and add tags to the associated protected resource.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub actions: ::std::option::Option<crate::types::MalwareProtectionPlanActions>,
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub protected_resource: ::std::option::Option<crate::types::UpdateProtectedResource>,
}
impl UpdateMalwareProtectionPlanInput {
    /// <p>A unique identifier associated with the Malware Protection plan.</p>
    pub fn malware_protection_plan_id(&self) -> ::std::option::Option<&str> {
        self.malware_protection_plan_id.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role with permissions to scan and add tags to the associated protected resource.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn actions(&self) -> ::std::option::Option<&crate::types::MalwareProtectionPlanActions> {
        self.actions.as_ref()
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn protected_resource(&self) -> ::std::option::Option<&crate::types::UpdateProtectedResource> {
        self.protected_resource.as_ref()
    }
}
impl UpdateMalwareProtectionPlanInput {
    /// Creates a new builder-style object to manufacture [`UpdateMalwareProtectionPlanInput`](crate::operation::update_malware_protection_plan::UpdateMalwareProtectionPlanInput).
    pub fn builder() -> crate::operation::update_malware_protection_plan::builders::UpdateMalwareProtectionPlanInputBuilder {
        crate::operation::update_malware_protection_plan::builders::UpdateMalwareProtectionPlanInputBuilder::default()
    }
}

/// A builder for [`UpdateMalwareProtectionPlanInput`](crate::operation::update_malware_protection_plan::UpdateMalwareProtectionPlanInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateMalwareProtectionPlanInputBuilder {
    pub(crate) malware_protection_plan_id: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<crate::types::MalwareProtectionPlanActions>,
    pub(crate) protected_resource: ::std::option::Option<crate::types::UpdateProtectedResource>,
}
impl UpdateMalwareProtectionPlanInputBuilder {
    /// <p>A unique identifier associated with the Malware Protection plan.</p>
    /// This field is required.
    pub fn malware_protection_plan_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.malware_protection_plan_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier associated with the Malware Protection plan.</p>
    pub fn set_malware_protection_plan_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.malware_protection_plan_id = input;
        self
    }
    /// <p>A unique identifier associated with the Malware Protection plan.</p>
    pub fn get_malware_protection_plan_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.malware_protection_plan_id
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role with permissions to scan and add tags to the associated protected resource.</p>
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role with permissions to scan and add tags to the associated protected resource.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role with permissions to scan and add tags to the associated protected resource.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn actions(mut self, input: crate::types::MalwareProtectionPlanActions) -> Self {
        self.actions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<crate::types::MalwareProtectionPlanActions>) -> Self {
        self.actions = input;
        self
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn get_actions(&self) -> &::std::option::Option<crate::types::MalwareProtectionPlanActions> {
        &self.actions
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn protected_resource(mut self, input: crate::types::UpdateProtectedResource) -> Self {
        self.protected_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn set_protected_resource(mut self, input: ::std::option::Option<crate::types::UpdateProtectedResource>) -> Self {
        self.protected_resource = input;
        self
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn get_protected_resource(&self) -> &::std::option::Option<crate::types::UpdateProtectedResource> {
        &self.protected_resource
    }
    /// Consumes the builder and constructs a [`UpdateMalwareProtectionPlanInput`](crate::operation::update_malware_protection_plan::UpdateMalwareProtectionPlanInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_malware_protection_plan::UpdateMalwareProtectionPlanInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_malware_protection_plan::UpdateMalwareProtectionPlanInput {
            malware_protection_plan_id: self.malware_protection_plan_id,
            role: self.role,
            actions: self.actions,
            protected_resource: self.protected_resource,
        })
    }
}
