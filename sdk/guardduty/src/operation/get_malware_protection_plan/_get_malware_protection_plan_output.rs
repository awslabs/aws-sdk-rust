// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMalwareProtectionPlanOutput {
    /// <p>Amazon Resource Name (ARN) of the protected resource.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the IAM role that includes the permissions to scan and add tags to the associated protected resource.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub protected_resource: ::std::option::Option<crate::types::CreateProtectedResource>,
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub actions: ::std::option::Option<crate::types::MalwareProtectionPlanActions>,
    /// <p>The timestamp when the Malware Protection plan resource was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Malware Protection plan status.</p>
    pub status: ::std::option::Option<crate::types::MalwareProtectionPlanStatus>,
    /// <p>Information about the issue code and message associated to the status of your Malware Protection plan.</p>
    pub status_reasons: ::std::option::Option<::std::vec::Vec<crate::types::MalwareProtectionPlanStatusReason>>,
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetMalwareProtectionPlanOutput {
    /// <p>Amazon Resource Name (ARN) of the protected resource.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role that includes the permissions to scan and add tags to the associated protected resource.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn protected_resource(&self) -> ::std::option::Option<&crate::types::CreateProtectedResource> {
        self.protected_resource.as_ref()
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn actions(&self) -> ::std::option::Option<&crate::types::MalwareProtectionPlanActions> {
        self.actions.as_ref()
    }
    /// <p>The timestamp when the Malware Protection plan resource was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Malware Protection plan status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MalwareProtectionPlanStatus> {
        self.status.as_ref()
    }
    /// <p>Information about the issue code and message associated to the status of your Malware Protection plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_reasons.is_none()`.
    pub fn status_reasons(&self) -> &[crate::types::MalwareProtectionPlanStatusReason] {
        self.status_reasons.as_deref().unwrap_or_default()
    }
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetMalwareProtectionPlanOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMalwareProtectionPlanOutput {
    /// Creates a new builder-style object to manufacture [`GetMalwareProtectionPlanOutput`](crate::operation::get_malware_protection_plan::GetMalwareProtectionPlanOutput).
    pub fn builder() -> crate::operation::get_malware_protection_plan::builders::GetMalwareProtectionPlanOutputBuilder {
        crate::operation::get_malware_protection_plan::builders::GetMalwareProtectionPlanOutputBuilder::default()
    }
}

/// A builder for [`GetMalwareProtectionPlanOutput`](crate::operation::get_malware_protection_plan::GetMalwareProtectionPlanOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetMalwareProtectionPlanOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) protected_resource: ::std::option::Option<crate::types::CreateProtectedResource>,
    pub(crate) actions: ::std::option::Option<crate::types::MalwareProtectionPlanActions>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::MalwareProtectionPlanStatus>,
    pub(crate) status_reasons: ::std::option::Option<::std::vec::Vec<crate::types::MalwareProtectionPlanStatusReason>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetMalwareProtectionPlanOutputBuilder {
    /// <p>Amazon Resource Name (ARN) of the protected resource.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the protected resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the protected resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role that includes the permissions to scan and add tags to the associated protected resource.</p>
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role that includes the permissions to scan and add tags to the associated protected resource.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the IAM role that includes the permissions to scan and add tags to the associated protected resource.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn protected_resource(mut self, input: crate::types::CreateProtectedResource) -> Self {
        self.protected_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn set_protected_resource(mut self, input: ::std::option::Option<crate::types::CreateProtectedResource>) -> Self {
        self.protected_resource = input;
        self
    }
    /// <p>Information about the protected resource that is associated with the created Malware Protection plan. Presently, <code>S3Bucket</code> is the only supported protected resource.</p>
    pub fn get_protected_resource(&self) -> &::std::option::Option<crate::types::CreateProtectedResource> {
        &self.protected_resource
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn actions(mut self, input: crate::types::MalwareProtectionPlanActions) -> Self {
        self.actions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<crate::types::MalwareProtectionPlanActions>) -> Self {
        self.actions = input;
        self
    }
    /// <p>Information about whether the tags will be added to the S3 object after scanning.</p>
    pub fn get_actions(&self) -> &::std::option::Option<crate::types::MalwareProtectionPlanActions> {
        &self.actions
    }
    /// <p>The timestamp when the Malware Protection plan resource was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the Malware Protection plan resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the Malware Protection plan resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>Malware Protection plan status.</p>
    pub fn status(mut self, input: crate::types::MalwareProtectionPlanStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Malware Protection plan status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MalwareProtectionPlanStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Malware Protection plan status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MalwareProtectionPlanStatus> {
        &self.status
    }
    /// Appends an item to `status_reasons`.
    ///
    /// To override the contents of this collection use [`set_status_reasons`](Self::set_status_reasons).
    ///
    /// <p>Information about the issue code and message associated to the status of your Malware Protection plan.</p>
    pub fn status_reasons(mut self, input: crate::types::MalwareProtectionPlanStatusReason) -> Self {
        let mut v = self.status_reasons.unwrap_or_default();
        v.push(input);
        self.status_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the issue code and message associated to the status of your Malware Protection plan.</p>
    pub fn set_status_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MalwareProtectionPlanStatusReason>>) -> Self {
        self.status_reasons = input;
        self
    }
    /// <p>Information about the issue code and message associated to the status of your Malware Protection plan.</p>
    pub fn get_status_reasons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MalwareProtectionPlanStatusReason>> {
        &self.status_reasons
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags added to the Malware Protection plan resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMalwareProtectionPlanOutput`](crate::operation::get_malware_protection_plan::GetMalwareProtectionPlanOutput).
    pub fn build(self) -> crate::operation::get_malware_protection_plan::GetMalwareProtectionPlanOutput {
        crate::operation::get_malware_protection_plan::GetMalwareProtectionPlanOutput {
            arn: self.arn,
            role: self.role,
            protected_resource: self.protected_resource,
            actions: self.actions,
            created_at: self.created_at,
            status: self.status,
            status_reasons: self.status_reasons,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
