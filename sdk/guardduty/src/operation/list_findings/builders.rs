// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_findings::_list_findings_output::ListFindingsOutputBuilder;

pub use crate::operation::list_findings::_list_findings_input::ListFindingsInputBuilder;

impl crate::operation::list_findings::builders::ListFindingsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_findings::ListFindingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_findings::ListFindingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_findings();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListFindings`.
///
/// <p>Lists GuardDuty findings for the specified detector ID.</p>
/// <p>There might be regional differences because some flags might not be available in all the Regions where GuardDuty is currently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListFindingsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_findings::builders::ListFindingsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_findings::ListFindingsOutput,
        crate::operation::list_findings::ListFindingsError,
    > for ListFindingsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_findings::ListFindingsOutput,
            crate::operation::list_findings::ListFindingsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListFindingsFluentBuilder {
    /// Creates a new `ListFindings`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListFindings as a reference.
    pub fn as_input(&self) -> &crate::operation::list_findings::builders::ListFindingsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_findings::ListFindingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_findings::ListFindingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_findings::ListFindings::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_findings::ListFindings::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_findings::ListFindingsOutput,
        crate::operation::list_findings::ListFindingsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_findings::paginator::ListFindingsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_findings::paginator::ListFindingsPaginator {
        crate::operation::list_findings::paginator::ListFindingsPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID of the detector that specifies the GuardDuty service whose findings you want to list.</p>
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.detector_id(input.into());
        self
    }
    /// <p>The ID of the detector that specifies the GuardDuty service whose findings you want to list.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_detector_id(input);
        self
    }
    /// <p>The ID of the detector that specifies the GuardDuty service whose findings you want to list.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_detector_id()
    }
    /// <p>Represents the criteria used for querying findings. Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p>JSON field name</p></li>
    /// <li>
    /// <p>accountId</p></li>
    /// <li>
    /// <p>region</p></li>
    /// <li>
    /// <p>confidence</p></li>
    /// <li>
    /// <p>id</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.accessKeyId</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.principalId</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.userName</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.userType</p></li>
    /// <li>
    /// <p>resource.instanceDetails.iamInstanceProfile.id</p></li>
    /// <li>
    /// <p>resource.instanceDetails.imageId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.instanceId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.publicDnsName</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.publicIp</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.subnetId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.vpcId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.tags.key</p></li>
    /// <li>
    /// <p>resource.instanceDetails.tags.value</p></li>
    /// <li>
    /// <p>resource.resourceType</p></li>
    /// <li>
    /// <p>service.action.actionType</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.api</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.callerType</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.serviceName</p></li>
    /// <li>
    /// <p>service.action.dnsRequestAction.domain</p></li>
    /// <li>
    /// <p>service.action.dnsRequestAction.domainWithSuffix</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.blocked</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.connectionDirection</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.localPortDetails.port</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.protocol</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remotePortDetails.port</p></li>
    /// <li>
    /// <p>service.additionalInfo.threatListName</p></li>
    /// <li>
    /// <p>service.archived</p>
    /// <p>When this attribute is set to 'true', only archived findings are listed. When it's set to 'false', only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p></li>
    /// <li>
    /// <p>service.resourceRole</p></li>
    /// <li>
    /// <p>severity</p></li>
    /// <li>
    /// <p>type</p></li>
    /// <li>
    /// <p>updatedAt</p>
    /// <p>Type: Timestamp in Unix Epoch millisecond format: 1486685375000</p></li>
    /// </ul>
    pub fn finding_criteria(mut self, input: crate::types::FindingCriteria) -> Self {
        self.inner = self.inner.finding_criteria(input);
        self
    }
    /// <p>Represents the criteria used for querying findings. Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p>JSON field name</p></li>
    /// <li>
    /// <p>accountId</p></li>
    /// <li>
    /// <p>region</p></li>
    /// <li>
    /// <p>confidence</p></li>
    /// <li>
    /// <p>id</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.accessKeyId</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.principalId</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.userName</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.userType</p></li>
    /// <li>
    /// <p>resource.instanceDetails.iamInstanceProfile.id</p></li>
    /// <li>
    /// <p>resource.instanceDetails.imageId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.instanceId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.publicDnsName</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.publicIp</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.subnetId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.vpcId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.tags.key</p></li>
    /// <li>
    /// <p>resource.instanceDetails.tags.value</p></li>
    /// <li>
    /// <p>resource.resourceType</p></li>
    /// <li>
    /// <p>service.action.actionType</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.api</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.callerType</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.serviceName</p></li>
    /// <li>
    /// <p>service.action.dnsRequestAction.domain</p></li>
    /// <li>
    /// <p>service.action.dnsRequestAction.domainWithSuffix</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.blocked</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.connectionDirection</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.localPortDetails.port</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.protocol</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remotePortDetails.port</p></li>
    /// <li>
    /// <p>service.additionalInfo.threatListName</p></li>
    /// <li>
    /// <p>service.archived</p>
    /// <p>When this attribute is set to 'true', only archived findings are listed. When it's set to 'false', only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p></li>
    /// <li>
    /// <p>service.resourceRole</p></li>
    /// <li>
    /// <p>severity</p></li>
    /// <li>
    /// <p>type</p></li>
    /// <li>
    /// <p>updatedAt</p>
    /// <p>Type: Timestamp in Unix Epoch millisecond format: 1486685375000</p></li>
    /// </ul>
    pub fn set_finding_criteria(mut self, input: ::std::option::Option<crate::types::FindingCriteria>) -> Self {
        self.inner = self.inner.set_finding_criteria(input);
        self
    }
    /// <p>Represents the criteria used for querying findings. Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p>JSON field name</p></li>
    /// <li>
    /// <p>accountId</p></li>
    /// <li>
    /// <p>region</p></li>
    /// <li>
    /// <p>confidence</p></li>
    /// <li>
    /// <p>id</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.accessKeyId</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.principalId</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.userName</p></li>
    /// <li>
    /// <p>resource.accessKeyDetails.userType</p></li>
    /// <li>
    /// <p>resource.instanceDetails.iamInstanceProfile.id</p></li>
    /// <li>
    /// <p>resource.instanceDetails.imageId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.instanceId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.ipv6Addresses</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.publicDnsName</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.publicIp</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.securityGroups.groupId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.securityGroups.groupName</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.subnetId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.networkInterfaces.vpcId</p></li>
    /// <li>
    /// <p>resource.instanceDetails.tags.key</p></li>
    /// <li>
    /// <p>resource.instanceDetails.tags.value</p></li>
    /// <li>
    /// <p>resource.resourceType</p></li>
    /// <li>
    /// <p>service.action.actionType</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.api</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.callerType</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.city.cityName</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.country.countryName</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.ipAddressV4</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.organization.asn</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg</p></li>
    /// <li>
    /// <p>service.action.awsApiCallAction.serviceName</p></li>
    /// <li>
    /// <p>service.action.dnsRequestAction.domain</p></li>
    /// <li>
    /// <p>service.action.dnsRequestAction.domainWithSuffix</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.blocked</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.connectionDirection</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.localPortDetails.port</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.protocol</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.country.countryName</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.ipAddressV4</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.organization.asn</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg</p></li>
    /// <li>
    /// <p>service.action.networkConnectionAction.remotePortDetails.port</p></li>
    /// <li>
    /// <p>service.additionalInfo.threatListName</p></li>
    /// <li>
    /// <p>service.archived</p>
    /// <p>When this attribute is set to 'true', only archived findings are listed. When it's set to 'false', only unarchived findings are listed. When this attribute is not set, all existing findings are listed.</p></li>
    /// <li>
    /// <p>service.resourceRole</p></li>
    /// <li>
    /// <p>severity</p></li>
    /// <li>
    /// <p>type</p></li>
    /// <li>
    /// <p>updatedAt</p>
    /// <p>Type: Timestamp in Unix Epoch millisecond format: 1486685375000</p></li>
    /// </ul>
    pub fn get_finding_criteria(&self) -> &::std::option::Option<crate::types::FindingCriteria> {
        self.inner.get_finding_criteria()
    }
    /// <p>Represents the criteria used for sorting findings.</p>
    pub fn sort_criteria(mut self, input: crate::types::SortCriteria) -> Self {
        self.inner = self.inner.sort_criteria(input);
        self
    }
    /// <p>Represents the criteria used for sorting findings.</p>
    pub fn set_sort_criteria(mut self, input: ::std::option::Option<crate::types::SortCriteria>) -> Self {
        self.inner = self.inner.set_sort_criteria(input);
        self
    }
    /// <p>Represents the criteria used for sorting findings.</p>
    pub fn get_sort_criteria(&self) -> &::std::option::Option<crate::types::SortCriteria> {
        self.inner.get_sort_criteria()
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
