// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDetectorInput {
    /// <p>A Boolean value that specifies whether the detector is to be enabled.</p>
    pub enable: ::std::option::Option<bool>,
    /// <p>The idempotency token for the create request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A value that specifies how frequently updated findings are exported.</p>
    pub finding_publishing_frequency: ::std::option::Option<crate::types::FindingPublishingFrequency>,
    /// <p>Describes which data sources will be enabled for the detector.</p>
    /// <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub data_sources: ::std::option::Option<crate::types::DataSourceConfigurations>,
    /// <p>The tags to be added to a new detector resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>A list of features that will be configured for the detector.</p>
    pub features: ::std::option::Option<::std::vec::Vec<crate::types::DetectorFeatureConfiguration>>,
}
impl CreateDetectorInput {
    /// <p>A Boolean value that specifies whether the detector is to be enabled.</p>
    pub fn enable(&self) -> ::std::option::Option<bool> {
        self.enable
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A value that specifies how frequently updated findings are exported.</p>
    pub fn finding_publishing_frequency(&self) -> ::std::option::Option<&crate::types::FindingPublishingFrequency> {
        self.finding_publishing_frequency.as_ref()
    }
    /// <p>Describes which data sources will be enabled for the detector.</p>
    /// <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn data_sources(&self) -> ::std::option::Option<&crate::types::DataSourceConfigurations> {
        self.data_sources.as_ref()
    }
    /// <p>The tags to be added to a new detector resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>A list of features that will be configured for the detector.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.features.is_none()`.
    pub fn features(&self) -> &[crate::types::DetectorFeatureConfiguration] {
        self.features.as_deref().unwrap_or_default()
    }
}
impl CreateDetectorInput {
    /// Creates a new builder-style object to manufacture [`CreateDetectorInput`](crate::operation::create_detector::CreateDetectorInput).
    pub fn builder() -> crate::operation::create_detector::builders::CreateDetectorInputBuilder {
        crate::operation::create_detector::builders::CreateDetectorInputBuilder::default()
    }
}

/// A builder for [`CreateDetectorInput`](crate::operation::create_detector::CreateDetectorInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDetectorInputBuilder {
    pub(crate) enable: ::std::option::Option<bool>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) finding_publishing_frequency: ::std::option::Option<crate::types::FindingPublishingFrequency>,
    pub(crate) data_sources: ::std::option::Option<crate::types::DataSourceConfigurations>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) features: ::std::option::Option<::std::vec::Vec<crate::types::DetectorFeatureConfiguration>>,
}
impl CreateDetectorInputBuilder {
    /// <p>A Boolean value that specifies whether the detector is to be enabled.</p>
    /// This field is required.
    pub fn enable(mut self, input: bool) -> Self {
        self.enable = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether the detector is to be enabled.</p>
    pub fn set_enable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable = input;
        self
    }
    /// <p>A Boolean value that specifies whether the detector is to be enabled.</p>
    pub fn get_enable(&self) -> &::std::option::Option<bool> {
        &self.enable
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>A value that specifies how frequently updated findings are exported.</p>
    pub fn finding_publishing_frequency(mut self, input: crate::types::FindingPublishingFrequency) -> Self {
        self.finding_publishing_frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value that specifies how frequently updated findings are exported.</p>
    pub fn set_finding_publishing_frequency(mut self, input: ::std::option::Option<crate::types::FindingPublishingFrequency>) -> Self {
        self.finding_publishing_frequency = input;
        self
    }
    /// <p>A value that specifies how frequently updated findings are exported.</p>
    pub fn get_finding_publishing_frequency(&self) -> &::std::option::Option<crate::types::FindingPublishingFrequency> {
        &self.finding_publishing_frequency
    }
    /// <p>Describes which data sources will be enabled for the detector.</p>
    /// <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn data_sources(mut self, input: crate::types::DataSourceConfigurations) -> Self {
        self.data_sources = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes which data sources will be enabled for the detector.</p>
    /// <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn set_data_sources(mut self, input: ::std::option::Option<crate::types::DataSourceConfigurations>) -> Self {
        self.data_sources = input;
        self
    }
    /// <p>Describes which data sources will be enabled for the detector.</p>
    /// <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn get_data_sources(&self) -> &::std::option::Option<crate::types::DataSourceConfigurations> {
        &self.data_sources
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be added to a new detector resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags to be added to a new detector resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to be added to a new detector resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Appends an item to `features`.
    ///
    /// To override the contents of this collection use [`set_features`](Self::set_features).
    ///
    /// <p>A list of features that will be configured for the detector.</p>
    pub fn features(mut self, input: crate::types::DetectorFeatureConfiguration) -> Self {
        let mut v = self.features.unwrap_or_default();
        v.push(input);
        self.features = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of features that will be configured for the detector.</p>
    pub fn set_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DetectorFeatureConfiguration>>) -> Self {
        self.features = input;
        self
    }
    /// <p>A list of features that will be configured for the detector.</p>
    pub fn get_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DetectorFeatureConfiguration>> {
        &self.features
    }
    /// Consumes the builder and constructs a [`CreateDetectorInput`](crate::operation::create_detector::CreateDetectorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_detector::CreateDetectorInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_detector::CreateDetectorInput {
            enable: self.enable,
            client_token: self.client_token,
            finding_publishing_frequency: self.finding_publishing_frequency,
            data_sources: self.data_sources,
            tags: self.tags,
            features: self.features,
        })
    }
}
