// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRemainingFreeTrialDaysOutput {
    /// <p>The member accounts which were included in a request and were processed successfully.</p>
    #[doc(hidden)]
    pub accounts: std::option::Option<std::vec::Vec<crate::types::AccountFreeTrialInfo>>,
    /// <p>The member account that was included in a request but for which the request could not be processed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::types::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl GetRemainingFreeTrialDaysOutput {
    /// <p>The member accounts which were included in a request and were processed successfully.</p>
    pub fn accounts(&self) -> std::option::Option<&[crate::types::AccountFreeTrialInfo]> {
        self.accounts.as_deref()
    }
    /// <p>The member account that was included in a request but for which the request could not be processed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::types::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetRemainingFreeTrialDaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRemainingFreeTrialDaysOutput {
    /// Creates a new builder-style object to manufacture [`GetRemainingFreeTrialDaysOutput`](crate::operation::get_remaining_free_trial_days::GetRemainingFreeTrialDaysOutput).
    pub fn builder() -> crate::operation::get_remaining_free_trial_days::builders::GetRemainingFreeTrialDaysOutputBuilder{
        crate::operation::get_remaining_free_trial_days::builders::GetRemainingFreeTrialDaysOutputBuilder::default()
    }
}

/// A builder for [`GetRemainingFreeTrialDaysOutput`](crate::operation::get_remaining_free_trial_days::GetRemainingFreeTrialDaysOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRemainingFreeTrialDaysOutputBuilder {
    pub(crate) accounts: std::option::Option<std::vec::Vec<crate::types::AccountFreeTrialInfo>>,
    pub(crate) unprocessed_accounts:
        std::option::Option<std::vec::Vec<crate::types::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl GetRemainingFreeTrialDaysOutputBuilder {
    /// Appends an item to `accounts`.
    ///
    /// To override the contents of this collection use [`set_accounts`](Self::set_accounts).
    ///
    /// <p>The member accounts which were included in a request and were processed successfully.</p>
    pub fn accounts(mut self, input: crate::types::AccountFreeTrialInfo) -> Self {
        let mut v = self.accounts.unwrap_or_default();
        v.push(input);
        self.accounts = Some(v);
        self
    }
    /// <p>The member accounts which were included in a request and were processed successfully.</p>
    pub fn set_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AccountFreeTrialInfo>>,
    ) -> Self {
        self.accounts = input;
        self
    }
    /// Appends an item to `unprocessed_accounts`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
    ///
    /// <p>The member account that was included in a request but for which the request could not be processed.</p>
    pub fn unprocessed_accounts(mut self, input: crate::types::UnprocessedAccount) -> Self {
        let mut v = self.unprocessed_accounts.unwrap_or_default();
        v.push(input);
        self.unprocessed_accounts = Some(v);
        self
    }
    /// <p>The member account that was included in a request but for which the request could not be processed.</p>
    pub fn set_unprocessed_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UnprocessedAccount>>,
    ) -> Self {
        self.unprocessed_accounts = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRemainingFreeTrialDaysOutput`](crate::operation::get_remaining_free_trial_days::GetRemainingFreeTrialDaysOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_remaining_free_trial_days::GetRemainingFreeTrialDaysOutput {
        crate::operation::get_remaining_free_trial_days::GetRemainingFreeTrialDaysOutput {
            accounts: self.accounts,
            unprocessed_accounts: self.unprocessed_accounts,
            _request_id: self._request_id,
        }
    }
}
