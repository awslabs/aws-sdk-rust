// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetFindingsStatisticsInput {
    /// <p>The ID of the detector whose findings statistics you want to retrieve.</p>
    pub detector_id: ::std::option::Option<::std::string::String>,
    /// <p>The types of finding statistics to retrieve.</p>
    #[deprecated(note = "This parameter is deprecated, please use GroupBy instead")]
    pub finding_statistic_types: ::std::option::Option<::std::vec::Vec<crate::types::FindingStatisticType>>,
    /// <p>Represents the criteria that is used for querying findings.</p>
    pub finding_criteria: ::std::option::Option<crate::types::FindingCriteria>,
    /// <p>Displays the findings statistics grouped by one of the listed valid values.</p>
    pub group_by: ::std::option::Option<crate::types::GroupByType>,
    /// <p>Displays the sorted findings in the requested order. The default value of <code>orderBy</code> is <code>DESC</code>.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub order_by: ::std::option::Option<crate::types::OrderBy>,
    /// <p>The maximum number of results to be returned in the response. The default value is 25.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl GetFindingsStatisticsInput {
    /// <p>The ID of the detector whose findings statistics you want to retrieve.</p>
    pub fn detector_id(&self) -> ::std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The types of finding statistics to retrieve.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_statistic_types.is_none()`.
    #[deprecated(note = "This parameter is deprecated, please use GroupBy instead")]
    pub fn finding_statistic_types(&self) -> &[crate::types::FindingStatisticType] {
        self.finding_statistic_types.as_deref().unwrap_or_default()
    }
    /// <p>Represents the criteria that is used for querying findings.</p>
    pub fn finding_criteria(&self) -> ::std::option::Option<&crate::types::FindingCriteria> {
        self.finding_criteria.as_ref()
    }
    /// <p>Displays the findings statistics grouped by one of the listed valid values.</p>
    pub fn group_by(&self) -> ::std::option::Option<&crate::types::GroupByType> {
        self.group_by.as_ref()
    }
    /// <p>Displays the sorted findings in the requested order. The default value of <code>orderBy</code> is <code>DESC</code>.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub fn order_by(&self) -> ::std::option::Option<&crate::types::OrderBy> {
        self.order_by.as_ref()
    }
    /// <p>The maximum number of results to be returned in the response. The default value is 25.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl GetFindingsStatisticsInput {
    /// Creates a new builder-style object to manufacture [`GetFindingsStatisticsInput`](crate::operation::get_findings_statistics::GetFindingsStatisticsInput).
    pub fn builder() -> crate::operation::get_findings_statistics::builders::GetFindingsStatisticsInputBuilder {
        crate::operation::get_findings_statistics::builders::GetFindingsStatisticsInputBuilder::default()
    }
}

/// A builder for [`GetFindingsStatisticsInput`](crate::operation::get_findings_statistics::GetFindingsStatisticsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetFindingsStatisticsInputBuilder {
    pub(crate) detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) finding_statistic_types: ::std::option::Option<::std::vec::Vec<crate::types::FindingStatisticType>>,
    pub(crate) finding_criteria: ::std::option::Option<crate::types::FindingCriteria>,
    pub(crate) group_by: ::std::option::Option<crate::types::GroupByType>,
    pub(crate) order_by: ::std::option::Option<crate::types::OrderBy>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl GetFindingsStatisticsInputBuilder {
    /// <p>The ID of the detector whose findings statistics you want to retrieve.</p>
    /// This field is required.
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the detector whose findings statistics you want to retrieve.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The ID of the detector whose findings statistics you want to retrieve.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_id
    }
    /// Appends an item to `finding_statistic_types`.
    ///
    /// To override the contents of this collection use [`set_finding_statistic_types`](Self::set_finding_statistic_types).
    ///
    /// <p>The types of finding statistics to retrieve.</p>
    #[deprecated(note = "This parameter is deprecated, please use GroupBy instead")]
    pub fn finding_statistic_types(mut self, input: crate::types::FindingStatisticType) -> Self {
        let mut v = self.finding_statistic_types.unwrap_or_default();
        v.push(input);
        self.finding_statistic_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The types of finding statistics to retrieve.</p>
    #[deprecated(note = "This parameter is deprecated, please use GroupBy instead")]
    pub fn set_finding_statistic_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FindingStatisticType>>) -> Self {
        self.finding_statistic_types = input;
        self
    }
    /// <p>The types of finding statistics to retrieve.</p>
    #[deprecated(note = "This parameter is deprecated, please use GroupBy instead")]
    pub fn get_finding_statistic_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FindingStatisticType>> {
        &self.finding_statistic_types
    }
    /// <p>Represents the criteria that is used for querying findings.</p>
    pub fn finding_criteria(mut self, input: crate::types::FindingCriteria) -> Self {
        self.finding_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the criteria that is used for querying findings.</p>
    pub fn set_finding_criteria(mut self, input: ::std::option::Option<crate::types::FindingCriteria>) -> Self {
        self.finding_criteria = input;
        self
    }
    /// <p>Represents the criteria that is used for querying findings.</p>
    pub fn get_finding_criteria(&self) -> &::std::option::Option<crate::types::FindingCriteria> {
        &self.finding_criteria
    }
    /// <p>Displays the findings statistics grouped by one of the listed valid values.</p>
    pub fn group_by(mut self, input: crate::types::GroupByType) -> Self {
        self.group_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays the findings statistics grouped by one of the listed valid values.</p>
    pub fn set_group_by(mut self, input: ::std::option::Option<crate::types::GroupByType>) -> Self {
        self.group_by = input;
        self
    }
    /// <p>Displays the findings statistics grouped by one of the listed valid values.</p>
    pub fn get_group_by(&self) -> &::std::option::Option<crate::types::GroupByType> {
        &self.group_by
    }
    /// <p>Displays the sorted findings in the requested order. The default value of <code>orderBy</code> is <code>DESC</code>.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub fn order_by(mut self, input: crate::types::OrderBy) -> Self {
        self.order_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Displays the sorted findings in the requested order. The default value of <code>orderBy</code> is <code>DESC</code>.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub fn set_order_by(mut self, input: ::std::option::Option<crate::types::OrderBy>) -> Self {
        self.order_by = input;
        self
    }
    /// <p>Displays the sorted findings in the requested order. The default value of <code>orderBy</code> is <code>DESC</code>.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub fn get_order_by(&self) -> &::std::option::Option<crate::types::OrderBy> {
        &self.order_by
    }
    /// <p>The maximum number of results to be returned in the response. The default value is 25.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to be returned in the response. The default value is 25.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to be returned in the response. The default value is 25.</p>
    /// <p>You can use this parameter only with the <code>groupBy</code> parameter.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`GetFindingsStatisticsInput`](crate::operation::get_findings_statistics::GetFindingsStatisticsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_findings_statistics::GetFindingsStatisticsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_findings_statistics::GetFindingsStatisticsInput {
            detector_id: self.detector_id,
            finding_statistic_types: self.finding_statistic_types,
            finding_criteria: self.finding_criteria,
            group_by: self.group_by,
            order_by: self.order_by,
            max_results: self.max_results,
        })
    }
}
