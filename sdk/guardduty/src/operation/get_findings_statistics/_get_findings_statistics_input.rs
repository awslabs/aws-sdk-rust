// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFindingsStatisticsInput {
    /// <p>The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The types of finding statistics to retrieve.</p>
    #[doc(hidden)]
    pub finding_statistic_types:
        std::option::Option<std::vec::Vec<crate::types::FindingStatisticType>>,
    /// <p>Represents the criteria that is used for querying findings.</p>
    #[doc(hidden)]
    pub finding_criteria: std::option::Option<crate::types::FindingCriteria>,
}
impl GetFindingsStatisticsInput {
    /// <p>The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The types of finding statistics to retrieve.</p>
    pub fn finding_statistic_types(
        &self,
    ) -> std::option::Option<&[crate::types::FindingStatisticType]> {
        self.finding_statistic_types.as_deref()
    }
    /// <p>Represents the criteria that is used for querying findings.</p>
    pub fn finding_criteria(&self) -> std::option::Option<&crate::types::FindingCriteria> {
        self.finding_criteria.as_ref()
    }
}
impl GetFindingsStatisticsInput {
    /// Creates a new builder-style object to manufacture [`GetFindingsStatisticsInput`](crate::operation::get_findings_statistics::GetFindingsStatisticsInput).
    pub fn builder(
    ) -> crate::operation::get_findings_statistics::builders::GetFindingsStatisticsInputBuilder
    {
        crate::operation::get_findings_statistics::builders::GetFindingsStatisticsInputBuilder::default()
    }
}

/// A builder for [`GetFindingsStatisticsInput`](crate::operation::get_findings_statistics::GetFindingsStatisticsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetFindingsStatisticsInputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) finding_statistic_types:
        std::option::Option<std::vec::Vec<crate::types::FindingStatisticType>>,
    pub(crate) finding_criteria: std::option::Option<crate::types::FindingCriteria>,
}
impl GetFindingsStatisticsInputBuilder {
    /// <p>The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// Appends an item to `finding_statistic_types`.
    ///
    /// To override the contents of this collection use [`set_finding_statistic_types`](Self::set_finding_statistic_types).
    ///
    /// <p>The types of finding statistics to retrieve.</p>
    pub fn finding_statistic_types(mut self, input: crate::types::FindingStatisticType) -> Self {
        let mut v = self.finding_statistic_types.unwrap_or_default();
        v.push(input);
        self.finding_statistic_types = Some(v);
        self
    }
    /// <p>The types of finding statistics to retrieve.</p>
    pub fn set_finding_statistic_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FindingStatisticType>>,
    ) -> Self {
        self.finding_statistic_types = input;
        self
    }
    /// <p>Represents the criteria that is used for querying findings.</p>
    pub fn finding_criteria(mut self, input: crate::types::FindingCriteria) -> Self {
        self.finding_criteria = Some(input);
        self
    }
    /// <p>Represents the criteria that is used for querying findings.</p>
    pub fn set_finding_criteria(
        mut self,
        input: std::option::Option<crate::types::FindingCriteria>,
    ) -> Self {
        self.finding_criteria = input;
        self
    }
    /// Consumes the builder and constructs a [`GetFindingsStatisticsInput`](crate::operation::get_findings_statistics::GetFindingsStatisticsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_findings_statistics::GetFindingsStatisticsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_findings_statistics::GetFindingsStatisticsInput {
                detector_id: self.detector_id,
                finding_statistic_types: self.finding_statistic_types,
                finding_criteria: self.finding_criteria,
            },
        )
    }
}
