// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDetectorInput {
    /// <p>The unique ID of the detector to update.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether the detector is enabled or not enabled.</p>
    #[doc(hidden)]
    pub enable: bool,
    /// <p>An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.</p>
    #[doc(hidden)]
    pub finding_publishing_frequency: std::option::Option<crate::types::FindingPublishingFrequency>,
    /// <p>Describes which data sources will be updated.</p>
    #[doc(hidden)]
    pub data_sources: std::option::Option<crate::types::DataSourceConfigurations>,
}
impl UpdateDetectorInput {
    /// <p>The unique ID of the detector to update.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>Specifies whether the detector is enabled or not enabled.</p>
    pub fn enable(&self) -> bool {
        self.enable
    }
    /// <p>An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.</p>
    pub fn finding_publishing_frequency(
        &self,
    ) -> std::option::Option<&crate::types::FindingPublishingFrequency> {
        self.finding_publishing_frequency.as_ref()
    }
    /// <p>Describes which data sources will be updated.</p>
    pub fn data_sources(&self) -> std::option::Option<&crate::types::DataSourceConfigurations> {
        self.data_sources.as_ref()
    }
}
impl UpdateDetectorInput {
    /// Creates a new builder-style object to manufacture [`UpdateDetectorInput`](crate::operation::update_detector::UpdateDetectorInput).
    pub fn builder() -> crate::operation::update_detector::builders::UpdateDetectorInputBuilder {
        crate::operation::update_detector::builders::UpdateDetectorInputBuilder::default()
    }
}

/// A builder for [`UpdateDetectorInput`](crate::operation::update_detector::UpdateDetectorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDetectorInputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) enable: std::option::Option<bool>,
    pub(crate) finding_publishing_frequency:
        std::option::Option<crate::types::FindingPublishingFrequency>,
    pub(crate) data_sources: std::option::Option<crate::types::DataSourceConfigurations>,
}
impl UpdateDetectorInputBuilder {
    /// <p>The unique ID of the detector to update.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The unique ID of the detector to update.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>Specifies whether the detector is enabled or not enabled.</p>
    pub fn enable(mut self, input: bool) -> Self {
        self.enable = Some(input);
        self
    }
    /// <p>Specifies whether the detector is enabled or not enabled.</p>
    pub fn set_enable(mut self, input: std::option::Option<bool>) -> Self {
        self.enable = input;
        self
    }
    /// <p>An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.</p>
    pub fn finding_publishing_frequency(
        mut self,
        input: crate::types::FindingPublishingFrequency,
    ) -> Self {
        self.finding_publishing_frequency = Some(input);
        self
    }
    /// <p>An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.</p>
    pub fn set_finding_publishing_frequency(
        mut self,
        input: std::option::Option<crate::types::FindingPublishingFrequency>,
    ) -> Self {
        self.finding_publishing_frequency = input;
        self
    }
    /// <p>Describes which data sources will be updated.</p>
    pub fn data_sources(mut self, input: crate::types::DataSourceConfigurations) -> Self {
        self.data_sources = Some(input);
        self
    }
    /// <p>Describes which data sources will be updated.</p>
    pub fn set_data_sources(
        mut self,
        input: std::option::Option<crate::types::DataSourceConfigurations>,
    ) -> Self {
        self.data_sources = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDetectorInput`](crate::operation::update_detector::UpdateDetectorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_detector::UpdateDetectorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_detector::UpdateDetectorInput {
            detector_id: self.detector_id,
            enable: self.enable.unwrap_or_default(),
            finding_publishing_frequency: self.finding_publishing_frequency,
            data_sources: self.data_sources,
        })
    }
}
