// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMalwareScanSettingsInput {
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update scan settings.</p>
    pub detector_id: ::std::option::Option<::std::string::String>,
    /// <p>Represents the criteria to be used in the filter for selecting resources to scan.</p>
    pub scan_resource_criteria: ::std::option::Option<crate::types::ScanResourceCriteria>,
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    pub ebs_snapshot_preservation: ::std::option::Option<crate::types::EbsSnapshotPreservation>,
}
impl UpdateMalwareScanSettingsInput {
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update scan settings.</p>
    pub fn detector_id(&self) -> ::std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>Represents the criteria to be used in the filter for selecting resources to scan.</p>
    pub fn scan_resource_criteria(&self) -> ::std::option::Option<&crate::types::ScanResourceCriteria> {
        self.scan_resource_criteria.as_ref()
    }
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    pub fn ebs_snapshot_preservation(&self) -> ::std::option::Option<&crate::types::EbsSnapshotPreservation> {
        self.ebs_snapshot_preservation.as_ref()
    }
}
impl UpdateMalwareScanSettingsInput {
    /// Creates a new builder-style object to manufacture [`UpdateMalwareScanSettingsInput`](crate::operation::update_malware_scan_settings::UpdateMalwareScanSettingsInput).
    pub fn builder() -> crate::operation::update_malware_scan_settings::builders::UpdateMalwareScanSettingsInputBuilder {
        crate::operation::update_malware_scan_settings::builders::UpdateMalwareScanSettingsInputBuilder::default()
    }
}

/// A builder for [`UpdateMalwareScanSettingsInput`](crate::operation::update_malware_scan_settings::UpdateMalwareScanSettingsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateMalwareScanSettingsInputBuilder {
    pub(crate) detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) scan_resource_criteria: ::std::option::Option<crate::types::ScanResourceCriteria>,
    pub(crate) ebs_snapshot_preservation: ::std::option::Option<crate::types::EbsSnapshotPreservation>,
}
impl UpdateMalwareScanSettingsInputBuilder {
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update scan settings.</p>
    /// This field is required.
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update scan settings.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The unique ID of the detector that specifies the GuardDuty service where you want to update scan settings.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_id
    }
    /// <p>Represents the criteria to be used in the filter for selecting resources to scan.</p>
    pub fn scan_resource_criteria(mut self, input: crate::types::ScanResourceCriteria) -> Self {
        self.scan_resource_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the criteria to be used in the filter for selecting resources to scan.</p>
    pub fn set_scan_resource_criteria(mut self, input: ::std::option::Option<crate::types::ScanResourceCriteria>) -> Self {
        self.scan_resource_criteria = input;
        self
    }
    /// <p>Represents the criteria to be used in the filter for selecting resources to scan.</p>
    pub fn get_scan_resource_criteria(&self) -> &::std::option::Option<crate::types::ScanResourceCriteria> {
        &self.scan_resource_criteria
    }
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    pub fn ebs_snapshot_preservation(mut self, input: crate::types::EbsSnapshotPreservation) -> Self {
        self.ebs_snapshot_preservation = ::std::option::Option::Some(input);
        self
    }
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    pub fn set_ebs_snapshot_preservation(mut self, input: ::std::option::Option<crate::types::EbsSnapshotPreservation>) -> Self {
        self.ebs_snapshot_preservation = input;
        self
    }
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    pub fn get_ebs_snapshot_preservation(&self) -> &::std::option::Option<crate::types::EbsSnapshotPreservation> {
        &self.ebs_snapshot_preservation
    }
    /// Consumes the builder and constructs a [`UpdateMalwareScanSettingsInput`](crate::operation::update_malware_scan_settings::UpdateMalwareScanSettingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_malware_scan_settings::UpdateMalwareScanSettingsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_malware_scan_settings::UpdateMalwareScanSettingsInput {
            detector_id: self.detector_id,
            scan_resource_criteria: self.scan_resource_criteria,
            ebs_snapshot_preservation: self.ebs_snapshot_preservation,
        })
    }
}
