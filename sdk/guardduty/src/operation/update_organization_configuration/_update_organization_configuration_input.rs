// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateOrganizationConfigurationInput {
    /// <p>The ID of the detector that configures the delegated administrator.</p>
    pub detector_id: ::std::option::Option<::std::string::String>,
    /// <p>Represents whether or not to automatically enable member accounts in the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub auto_enable: ::std::option::Option<bool>,
    /// <p>Describes which data sources will be updated.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub data_sources: ::std::option::Option<crate::types::OrganizationDataSourceConfigurations>,
    /// <p>A list of features that will be configured for the organization.</p>
    pub features: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureConfiguration>>,
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>. </p>
    /// <p>Use one of the following configuration values for <code>autoEnableOrganizationMembers</code>:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub auto_enable_organization_members: ::std::option::Option<crate::types::AutoEnableMembers>,
}
impl UpdateOrganizationConfigurationInput {
    /// <p>The ID of the detector that configures the delegated administrator.</p>
    pub fn detector_id(&self) -> ::std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>Represents whether or not to automatically enable member accounts in the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub fn auto_enable(&self) -> ::std::option::Option<bool> {
        self.auto_enable
    }
    /// <p>Describes which data sources will be updated.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn data_sources(&self) -> ::std::option::Option<&crate::types::OrganizationDataSourceConfigurations> {
        self.data_sources.as_ref()
    }
    /// <p>A list of features that will be configured for the organization.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.features.is_none()`.
    pub fn features(&self) -> &[crate::types::OrganizationFeatureConfiguration] {
        self.features.as_deref().unwrap_or_default()
    }
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>. </p>
    /// <p>Use one of the following configuration values for <code>autoEnableOrganizationMembers</code>:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub fn auto_enable_organization_members(&self) -> ::std::option::Option<&crate::types::AutoEnableMembers> {
        self.auto_enable_organization_members.as_ref()
    }
}
impl UpdateOrganizationConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateOrganizationConfigurationInput`](crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput).
    pub fn builder() -> crate::operation::update_organization_configuration::builders::UpdateOrganizationConfigurationInputBuilder {
        crate::operation::update_organization_configuration::builders::UpdateOrganizationConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateOrganizationConfigurationInput`](crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateOrganizationConfigurationInputBuilder {
    pub(crate) detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) auto_enable: ::std::option::Option<bool>,
    pub(crate) data_sources: ::std::option::Option<crate::types::OrganizationDataSourceConfigurations>,
    pub(crate) features: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureConfiguration>>,
    pub(crate) auto_enable_organization_members: ::std::option::Option<crate::types::AutoEnableMembers>,
}
impl UpdateOrganizationConfigurationInputBuilder {
    /// <p>The ID of the detector that configures the delegated administrator.</p>
    /// This field is required.
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the detector that configures the delegated administrator.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The ID of the detector that configures the delegated administrator.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_id
    }
    /// <p>Represents whether or not to automatically enable member accounts in the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub fn auto_enable(mut self, input: bool) -> Self {
        self.auto_enable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents whether or not to automatically enable member accounts in the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub fn set_auto_enable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_enable = input;
        self
    }
    /// <p>Represents whether or not to automatically enable member accounts in the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub fn get_auto_enable(&self) -> &::std::option::Option<bool> {
        &self.auto_enable
    }
    /// <p>Describes which data sources will be updated.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn data_sources(mut self, input: crate::types::OrganizationDataSourceConfigurations) -> Self {
        self.data_sources = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes which data sources will be updated.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn set_data_sources(mut self, input: ::std::option::Option<crate::types::OrganizationDataSourceConfigurations>) -> Self {
        self.data_sources = input;
        self
    }
    /// <p>Describes which data sources will be updated.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn get_data_sources(&self) -> &::std::option::Option<crate::types::OrganizationDataSourceConfigurations> {
        &self.data_sources
    }
    /// Appends an item to `features`.
    ///
    /// To override the contents of this collection use [`set_features`](Self::set_features).
    ///
    /// <p>A list of features that will be configured for the organization.</p>
    pub fn features(mut self, input: crate::types::OrganizationFeatureConfiguration) -> Self {
        let mut v = self.features.unwrap_or_default();
        v.push(input);
        self.features = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of features that will be configured for the organization.</p>
    pub fn set_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureConfiguration>>) -> Self {
        self.features = input;
        self
    }
    /// <p>A list of features that will be configured for the organization.</p>
    pub fn get_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureConfiguration>> {
        &self.features
    }
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>. </p>
    /// <p>Use one of the following configuration values for <code>autoEnableOrganizationMembers</code>:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub fn auto_enable_organization_members(mut self, input: crate::types::AutoEnableMembers) -> Self {
        self.auto_enable_organization_members = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>. </p>
    /// <p>Use one of the following configuration values for <code>autoEnableOrganizationMembers</code>:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub fn set_auto_enable_organization_members(mut self, input: ::std::option::Option<crate::types::AutoEnableMembers>) -> Self {
        self.auto_enable_organization_members = input;
        self
    }
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization. You must provide a value for either <code>autoEnableOrganizationMembers</code> or <code>autoEnable</code>. </p>
    /// <p>Use one of the following configuration values for <code>autoEnableOrganizationMembers</code>:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub fn get_auto_enable_organization_members(&self) -> &::std::option::Option<crate::types::AutoEnableMembers> {
        &self.auto_enable_organization_members
    }
    /// Consumes the builder and constructs a [`UpdateOrganizationConfigurationInput`](crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_organization_configuration::UpdateOrganizationConfigurationInput {
                detector_id: self.detector_id,
                auto_enable: self.auto_enable,
                data_sources: self.data_sources,
                features: self.features,
                auto_enable_organization_members: self.auto_enable_organization_members,
            },
        )
    }
}
