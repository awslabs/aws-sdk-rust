// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSampleFindingsInput {
    /// <p>The ID of the detector to create sample findings for.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The types of sample findings to generate.</p>
    #[doc(hidden)]
    pub finding_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateSampleFindingsInput {
    /// <p>The ID of the detector to create sample findings for.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The types of sample findings to generate.</p>
    pub fn finding_types(&self) -> std::option::Option<&[std::string::String]> {
        self.finding_types.as_deref()
    }
}
impl CreateSampleFindingsInput {
    /// Creates a new builder-style object to manufacture [`CreateSampleFindingsInput`](crate::operation::create_sample_findings::CreateSampleFindingsInput).
    pub fn builder(
    ) -> crate::operation::create_sample_findings::builders::CreateSampleFindingsInputBuilder {
        crate::operation::create_sample_findings::builders::CreateSampleFindingsInputBuilder::default()
    }
}

/// A builder for [`CreateSampleFindingsInput`](crate::operation::create_sample_findings::CreateSampleFindingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateSampleFindingsInputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) finding_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateSampleFindingsInputBuilder {
    /// <p>The ID of the detector to create sample findings for.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The ID of the detector to create sample findings for.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// Appends an item to `finding_types`.
    ///
    /// To override the contents of this collection use [`set_finding_types`](Self::set_finding_types).
    ///
    /// <p>The types of sample findings to generate.</p>
    pub fn finding_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.finding_types.unwrap_or_default();
        v.push(input.into());
        self.finding_types = Some(v);
        self
    }
    /// <p>The types of sample findings to generate.</p>
    pub fn set_finding_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.finding_types = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateSampleFindingsInput`](crate::operation::create_sample_findings::CreateSampleFindingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_sample_findings::CreateSampleFindingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_sample_findings::CreateSampleFindingsInput {
                detector_id: self.detector_id,
                finding_types: self.finding_types,
            },
        )
    }
}
