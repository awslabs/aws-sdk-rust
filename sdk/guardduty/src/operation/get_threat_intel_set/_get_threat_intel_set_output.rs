// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetThreatIntelSetOutput {
    /// <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The format of the threatIntelSet.</p>
    pub format: ::std::option::Option<crate::types::ThreatIntelSetFormat>,
    /// <p>The URI of the file that contains the ThreatIntelSet. </p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The status of threatIntelSet file uploaded.</p>
    pub status: ::std::option::Option<crate::types::ThreatIntelSetStatus>,
    /// <p>The tags of the threat list resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetThreatIntelSetOutput {
    /// <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The format of the threatIntelSet.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::ThreatIntelSetFormat> {
        self.format.as_ref()
    }
    /// <p>The URI of the file that contains the ThreatIntelSet. </p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The status of threatIntelSet file uploaded.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ThreatIntelSetStatus> {
        self.status.as_ref()
    }
    /// <p>The tags of the threat list resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetThreatIntelSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetThreatIntelSetOutput {
    /// Creates a new builder-style object to manufacture [`GetThreatIntelSetOutput`](crate::operation::get_threat_intel_set::GetThreatIntelSetOutput).
    pub fn builder() -> crate::operation::get_threat_intel_set::builders::GetThreatIntelSetOutputBuilder {
        crate::operation::get_threat_intel_set::builders::GetThreatIntelSetOutputBuilder::default()
    }
}

/// A builder for [`GetThreatIntelSetOutput`](crate::operation::get_threat_intel_set::GetThreatIntelSetOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetThreatIntelSetOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::ThreatIntelSetFormat>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ThreatIntelSetStatus>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetThreatIntelSetOutputBuilder {
    /// <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The format of the threatIntelSet.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::ThreatIntelSetFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the threatIntelSet.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::ThreatIntelSetFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the threatIntelSet.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::ThreatIntelSetFormat> {
        &self.format
    }
    /// <p>The URI of the file that contains the ThreatIntelSet. </p>
    /// This field is required.
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the file that contains the ThreatIntelSet. </p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The URI of the file that contains the ThreatIntelSet. </p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The status of threatIntelSet file uploaded.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ThreatIntelSetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of threatIntelSet file uploaded.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ThreatIntelSetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of threatIntelSet file uploaded.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ThreatIntelSetStatus> {
        &self.status
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags of the threat list resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags of the threat list resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags of the threat list resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetThreatIntelSetOutput`](crate::operation::get_threat_intel_set::GetThreatIntelSetOutput).
    pub fn build(self) -> crate::operation::get_threat_intel_set::GetThreatIntelSetOutput {
        crate::operation::get_threat_intel_set::GetThreatIntelSetOutput {
            name: self.name,
            format: self.format,
            location: self.location,
            status: self.status,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
