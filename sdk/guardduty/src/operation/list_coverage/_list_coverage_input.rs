// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCoverageInput {
    /// <p>The unique ID of the detector whose coverage details you want to retrieve.</p>
    pub detector_id: ::std::option::Option<::std::string::String>,
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in the response.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Represents the criteria used to filter the coverage details.</p>
    pub filter_criteria: ::std::option::Option<crate::types::CoverageFilterCriteria>,
    /// <p>Represents the criteria used to sort the coverage details.</p>
    pub sort_criteria: ::std::option::Option<crate::types::CoverageSortCriteria>,
}
impl ListCoverageInput {
    /// <p>The unique ID of the detector whose coverage details you want to retrieve.</p>
    pub fn detector_id(&self) -> ::std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Represents the criteria used to filter the coverage details.</p>
    pub fn filter_criteria(&self) -> ::std::option::Option<&crate::types::CoverageFilterCriteria> {
        self.filter_criteria.as_ref()
    }
    /// <p>Represents the criteria used to sort the coverage details.</p>
    pub fn sort_criteria(&self) -> ::std::option::Option<&crate::types::CoverageSortCriteria> {
        self.sort_criteria.as_ref()
    }
}
impl ListCoverageInput {
    /// Creates a new builder-style object to manufacture [`ListCoverageInput`](crate::operation::list_coverage::ListCoverageInput).
    pub fn builder() -> crate::operation::list_coverage::builders::ListCoverageInputBuilder {
        crate::operation::list_coverage::builders::ListCoverageInputBuilder::default()
    }
}

/// A builder for [`ListCoverageInput`](crate::operation::list_coverage::ListCoverageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCoverageInputBuilder {
    pub(crate) detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filter_criteria: ::std::option::Option<crate::types::CoverageFilterCriteria>,
    pub(crate) sort_criteria: ::std::option::Option<crate::types::CoverageSortCriteria>,
}
impl ListCoverageInputBuilder {
    /// <p>The unique ID of the detector whose coverage details you want to retrieve.</p>
    /// This field is required.
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the detector whose coverage details you want to retrieve.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The unique ID of the detector whose coverage details you want to retrieve.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_id
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Represents the criteria used to filter the coverage details.</p>
    pub fn filter_criteria(mut self, input: crate::types::CoverageFilterCriteria) -> Self {
        self.filter_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the criteria used to filter the coverage details.</p>
    pub fn set_filter_criteria(mut self, input: ::std::option::Option<crate::types::CoverageFilterCriteria>) -> Self {
        self.filter_criteria = input;
        self
    }
    /// <p>Represents the criteria used to filter the coverage details.</p>
    pub fn get_filter_criteria(&self) -> &::std::option::Option<crate::types::CoverageFilterCriteria> {
        &self.filter_criteria
    }
    /// <p>Represents the criteria used to sort the coverage details.</p>
    pub fn sort_criteria(mut self, input: crate::types::CoverageSortCriteria) -> Self {
        self.sort_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the criteria used to sort the coverage details.</p>
    pub fn set_sort_criteria(mut self, input: ::std::option::Option<crate::types::CoverageSortCriteria>) -> Self {
        self.sort_criteria = input;
        self
    }
    /// <p>Represents the criteria used to sort the coverage details.</p>
    pub fn get_sort_criteria(&self) -> &::std::option::Option<crate::types::CoverageSortCriteria> {
        &self.sort_criteria
    }
    /// Consumes the builder and constructs a [`ListCoverageInput`](crate::operation::list_coverage::ListCoverageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_coverage::ListCoverageInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_coverage::ListCoverageInput {
            detector_id: self.detector_id,
            next_token: self.next_token,
            max_results: self.max_results,
            filter_criteria: self.filter_criteria,
            sort_criteria: self.sort_criteria,
        })
    }
}
