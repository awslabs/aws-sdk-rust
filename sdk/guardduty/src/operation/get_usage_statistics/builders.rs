// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_usage_statistics::_get_usage_statistics_output::GetUsageStatisticsOutputBuilder;

pub use crate::operation::get_usage_statistics::_get_usage_statistics_input::GetUsageStatisticsInputBuilder;

/// Fluent builder constructing a request to `GetUsageStatistics`.
///
/// <p>Lists Amazon GuardDuty usage statistics over the last 30 days for the specified detector ID. For newly enabled detectors or data sources, the cost returned will include only the usage so far under 30 days. This may differ from the cost metrics in the console, which project usage over 30 days to provide a monthly cost estimate. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/monitoring_costs.html#usage-calculations">Understanding How Usage Costs are Calculated</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetUsageStatisticsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_usage_statistics::builders::GetUsageStatisticsInputBuilder,
}
impl GetUsageStatisticsFluentBuilder {
    /// Creates a new `GetUsageStatistics`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_usage_statistics::GetUsageStatistics,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_usage_statistics::GetUsageStatisticsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_usage_statistics::GetUsageStatisticsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_usage_statistics::GetUsageStatisticsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_usage_statistics::paginator::GetUsageStatisticsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::get_usage_statistics::paginator::GetUsageStatisticsPaginator {
        crate::operation::get_usage_statistics::paginator::GetUsageStatisticsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.detector_id(input.into());
        self
    }
    /// <p>The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_detector_id(input);
        self
    }
    /// <p>The type of usage statistics to retrieve.</p>
    pub fn usage_statistic_type(mut self, input: crate::types::UsageStatisticType) -> Self {
        self.inner = self.inner.usage_statistic_type(input);
        self
    }
    /// <p>The type of usage statistics to retrieve.</p>
    pub fn set_usage_statistic_type(
        mut self,
        input: std::option::Option<crate::types::UsageStatisticType>,
    ) -> Self {
        self.inner = self.inner.set_usage_statistic_type(input);
        self
    }
    /// <p>Represents the criteria used for querying usage.</p>
    pub fn usage_criteria(mut self, input: crate::types::UsageCriteria) -> Self {
        self.inner = self.inner.usage_criteria(input);
        self
    }
    /// <p>Represents the criteria used for querying usage.</p>
    pub fn set_usage_criteria(
        mut self,
        input: std::option::Option<crate::types::UsageCriteria>,
    ) -> Self {
        self.inner = self.inner.set_usage_criteria(input);
        self
    }
    /// <p>The currency unit you would like to view your usage statistics in. Current valid values are USD.</p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.unit(input.into());
        self
    }
    /// <p>The currency unit you would like to view your usage statistics in. Current valid values are USD.</p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_unit(input);
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
