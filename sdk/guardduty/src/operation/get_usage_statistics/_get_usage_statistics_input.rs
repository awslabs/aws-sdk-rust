// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUsageStatisticsInput {
    /// <p>The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The type of usage statistics to retrieve.</p>
    #[doc(hidden)]
    pub usage_statistic_type: std::option::Option<crate::types::UsageStatisticType>,
    /// <p>Represents the criteria used for querying usage.</p>
    #[doc(hidden)]
    pub usage_criteria: std::option::Option<crate::types::UsageCriteria>,
    /// <p>The currency unit you would like to view your usage statistics in. Current valid values are USD.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return in the response.</p>
    #[doc(hidden)]
    pub max_results: i32,
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl GetUsageStatisticsInput {
    /// <p>The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The type of usage statistics to retrieve.</p>
    pub fn usage_statistic_type(&self) -> std::option::Option<&crate::types::UsageStatisticType> {
        self.usage_statistic_type.as_ref()
    }
    /// <p>Represents the criteria used for querying usage.</p>
    pub fn usage_criteria(&self) -> std::option::Option<&crate::types::UsageCriteria> {
        self.usage_criteria.as_ref()
    }
    /// <p>The currency unit you would like to view your usage statistics in. Current valid values are USD.</p>
    pub fn unit(&self) -> std::option::Option<&str> {
        self.unit.as_deref()
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetUsageStatisticsInput {
    /// Creates a new builder-style object to manufacture [`GetUsageStatisticsInput`](crate::operation::get_usage_statistics::GetUsageStatisticsInput).
    pub fn builder(
    ) -> crate::operation::get_usage_statistics::builders::GetUsageStatisticsInputBuilder {
        crate::operation::get_usage_statistics::builders::GetUsageStatisticsInputBuilder::default()
    }
}

/// A builder for [`GetUsageStatisticsInput`](crate::operation::get_usage_statistics::GetUsageStatisticsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetUsageStatisticsInputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) usage_statistic_type: std::option::Option<crate::types::UsageStatisticType>,
    pub(crate) usage_criteria: std::option::Option<crate::types::UsageCriteria>,
    pub(crate) unit: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl GetUsageStatisticsInputBuilder {
    /// <p>The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The ID of the detector that specifies the GuardDuty service whose usage statistics you want to retrieve.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The type of usage statistics to retrieve.</p>
    pub fn usage_statistic_type(mut self, input: crate::types::UsageStatisticType) -> Self {
        self.usage_statistic_type = Some(input);
        self
    }
    /// <p>The type of usage statistics to retrieve.</p>
    pub fn set_usage_statistic_type(
        mut self,
        input: std::option::Option<crate::types::UsageStatisticType>,
    ) -> Self {
        self.usage_statistic_type = input;
        self
    }
    /// <p>Represents the criteria used for querying usage.</p>
    pub fn usage_criteria(mut self, input: crate::types::UsageCriteria) -> Self {
        self.usage_criteria = Some(input);
        self
    }
    /// <p>Represents the criteria used for querying usage.</p>
    pub fn set_usage_criteria(
        mut self,
        input: std::option::Option<crate::types::UsageCriteria>,
    ) -> Self {
        self.usage_criteria = input;
        self
    }
    /// <p>The currency unit you would like to view your usage statistics in. Current valid values are USD.</p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit = Some(input.into());
        self
    }
    /// <p>The currency unit you would like to view your usage statistics in. Current valid values are USD.</p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetUsageStatisticsInput`](crate::operation::get_usage_statistics::GetUsageStatisticsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_usage_statistics::GetUsageStatisticsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_usage_statistics::GetUsageStatisticsInput {
                detector_id: self.detector_id,
                usage_statistic_type: self.usage_statistic_type,
                usage_criteria: self.usage_criteria,
                unit: self.unit,
                max_results: self.max_results.unwrap_or_default(),
                next_token: self.next_token,
            },
        )
    }
}
