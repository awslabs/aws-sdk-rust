// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMemberDetectorsInput {
    /// <p>The detector ID for the administrator account.</p>
    pub detector_id: ::std::option::Option<::std::string::String>,
    /// <p>The account ID of the member account.</p>
    pub account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GetMemberDetectorsInput {
    /// <p>The detector ID for the administrator account.</p>
    pub fn detector_id(&self) -> ::std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The account ID of the member account.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.account_ids.is_none()`.
    pub fn account_ids(&self) -> &[::std::string::String] {
        self.account_ids.as_deref().unwrap_or_default()
    }
}
impl GetMemberDetectorsInput {
    /// Creates a new builder-style object to manufacture [`GetMemberDetectorsInput`](crate::operation::get_member_detectors::GetMemberDetectorsInput).
    pub fn builder() -> crate::operation::get_member_detectors::builders::GetMemberDetectorsInputBuilder {
        crate::operation::get_member_detectors::builders::GetMemberDetectorsInputBuilder::default()
    }
}

/// A builder for [`GetMemberDetectorsInput`](crate::operation::get_member_detectors::GetMemberDetectorsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetMemberDetectorsInputBuilder {
    pub(crate) detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GetMemberDetectorsInputBuilder {
    /// <p>The detector ID for the administrator account.</p>
    /// This field is required.
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detector ID for the administrator account.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The detector ID for the administrator account.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_id
    }
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The account ID of the member account.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The account ID of the member account.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.account_ids = input;
        self
    }
    /// <p>The account ID of the member account.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.account_ids
    }
    /// Consumes the builder and constructs a [`GetMemberDetectorsInput`](crate::operation::get_member_detectors::GetMemberDetectorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_member_detectors::GetMemberDetectorsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_member_detectors::GetMemberDetectorsInput {
            detector_id: self.detector_id,
            account_ids: self.account_ids,
        })
    }
}
