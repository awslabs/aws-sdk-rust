// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMalwareScanSettingsOutput {
    /// <p>Represents the criteria to be used in the filter for scanning resources.</p>
    #[doc(hidden)]
    pub scan_resource_criteria: std::option::Option<crate::types::ScanResourceCriteria>,
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    #[doc(hidden)]
    pub ebs_snapshot_preservation: std::option::Option<crate::types::EbsSnapshotPreservation>,
    _request_id: Option<String>,
}
impl GetMalwareScanSettingsOutput {
    /// <p>Represents the criteria to be used in the filter for scanning resources.</p>
    pub fn scan_resource_criteria(
        &self,
    ) -> std::option::Option<&crate::types::ScanResourceCriteria> {
        self.scan_resource_criteria.as_ref()
    }
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    pub fn ebs_snapshot_preservation(
        &self,
    ) -> std::option::Option<&crate::types::EbsSnapshotPreservation> {
        self.ebs_snapshot_preservation.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMalwareScanSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMalwareScanSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetMalwareScanSettingsOutput`](crate::operation::get_malware_scan_settings::GetMalwareScanSettingsOutput).
    pub fn builder(
    ) -> crate::operation::get_malware_scan_settings::builders::GetMalwareScanSettingsOutputBuilder
    {
        crate::operation::get_malware_scan_settings::builders::GetMalwareScanSettingsOutputBuilder::default()
    }
}

/// A builder for [`GetMalwareScanSettingsOutput`](crate::operation::get_malware_scan_settings::GetMalwareScanSettingsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMalwareScanSettingsOutputBuilder {
    pub(crate) scan_resource_criteria: std::option::Option<crate::types::ScanResourceCriteria>,
    pub(crate) ebs_snapshot_preservation:
        std::option::Option<crate::types::EbsSnapshotPreservation>,
    _request_id: Option<String>,
}
impl GetMalwareScanSettingsOutputBuilder {
    /// <p>Represents the criteria to be used in the filter for scanning resources.</p>
    pub fn scan_resource_criteria(mut self, input: crate::types::ScanResourceCriteria) -> Self {
        self.scan_resource_criteria = Some(input);
        self
    }
    /// <p>Represents the criteria to be used in the filter for scanning resources.</p>
    pub fn set_scan_resource_criteria(
        mut self,
        input: std::option::Option<crate::types::ScanResourceCriteria>,
    ) -> Self {
        self.scan_resource_criteria = input;
        self
    }
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    pub fn ebs_snapshot_preservation(
        mut self,
        input: crate::types::EbsSnapshotPreservation,
    ) -> Self {
        self.ebs_snapshot_preservation = Some(input);
        self
    }
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    pub fn set_ebs_snapshot_preservation(
        mut self,
        input: std::option::Option<crate::types::EbsSnapshotPreservation>,
    ) -> Self {
        self.ebs_snapshot_preservation = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMalwareScanSettingsOutput`](crate::operation::get_malware_scan_settings::GetMalwareScanSettingsOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_malware_scan_settings::GetMalwareScanSettingsOutput {
        crate::operation::get_malware_scan_settings::GetMalwareScanSettingsOutput {
            scan_resource_criteria: self.scan_resource_criteria,
            ebs_snapshot_preservation: self.ebs_snapshot_preservation,
            _request_id: self._request_id,
        }
    }
}
