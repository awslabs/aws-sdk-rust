// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeOrganizationConfigurationOutput {
    /// <p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub auto_enable: ::std::option::Option<bool>,
    /// <p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>
    pub member_account_limit_reached: ::std::option::Option<bool>,
    /// <p>Describes which data sources are enabled automatically for member accounts.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub data_sources: ::std::option::Option<crate::types::OrganizationDataSourceConfigurationsResult>,
    /// <p>A list of features that are configured for this organization.</p>
    pub features: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureConfigurationResult>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub auto_enable_organization_members: ::std::option::Option<crate::types::AutoEnableMembers>,
    _request_id: Option<String>,
}
impl DescribeOrganizationConfigurationOutput {
    /// <p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub fn auto_enable(&self) -> ::std::option::Option<bool> {
        self.auto_enable
    }
    /// <p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>
    pub fn member_account_limit_reached(&self) -> ::std::option::Option<bool> {
        self.member_account_limit_reached
    }
    /// <p>Describes which data sources are enabled automatically for member accounts.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn data_sources(&self) -> ::std::option::Option<&crate::types::OrganizationDataSourceConfigurationsResult> {
        self.data_sources.as_ref()
    }
    /// <p>A list of features that are configured for this organization.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.features.is_none()`.
    pub fn features(&self) -> &[crate::types::OrganizationFeatureConfigurationResult] {
        self.features.as_deref().unwrap_or_default()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub fn auto_enable_organization_members(&self) -> ::std::option::Option<&crate::types::AutoEnableMembers> {
        self.auto_enable_organization_members.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeOrganizationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeOrganizationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationConfigurationOutput`](crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationOutput).
    pub fn builder() -> crate::operation::describe_organization_configuration::builders::DescribeOrganizationConfigurationOutputBuilder {
        crate::operation::describe_organization_configuration::builders::DescribeOrganizationConfigurationOutputBuilder::default()
    }
}

/// A builder for [`DescribeOrganizationConfigurationOutput`](crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeOrganizationConfigurationOutputBuilder {
    pub(crate) auto_enable: ::std::option::Option<bool>,
    pub(crate) member_account_limit_reached: ::std::option::Option<bool>,
    pub(crate) data_sources: ::std::option::Option<crate::types::OrganizationDataSourceConfigurationsResult>,
    pub(crate) features: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureConfigurationResult>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) auto_enable_organization_members: ::std::option::Option<crate::types::AutoEnableMembers>,
    _request_id: Option<String>,
}
impl DescribeOrganizationConfigurationOutputBuilder {
    /// <p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub fn auto_enable(mut self, input: bool) -> Self {
        self.auto_enable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub fn set_auto_enable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_enable = input;
        self
    }
    /// <p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>
    /// <p>Even though this is still supported, we recommend using <code>AutoEnableOrganizationMembers</code> to achieve the similar results.</p>
    #[deprecated(note = "This field is deprecated, use AutoEnableOrganizationMembers instead")]
    pub fn get_auto_enable(&self) -> &::std::option::Option<bool> {
        &self.auto_enable
    }
    /// <p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>
    /// This field is required.
    pub fn member_account_limit_reached(mut self, input: bool) -> Self {
        self.member_account_limit_reached = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>
    pub fn set_member_account_limit_reached(mut self, input: ::std::option::Option<bool>) -> Self {
        self.member_account_limit_reached = input;
        self
    }
    /// <p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>
    pub fn get_member_account_limit_reached(&self) -> &::std::option::Option<bool> {
        &self.member_account_limit_reached
    }
    /// <p>Describes which data sources are enabled automatically for member accounts.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn data_sources(mut self, input: crate::types::OrganizationDataSourceConfigurationsResult) -> Self {
        self.data_sources = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes which data sources are enabled automatically for member accounts.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn set_data_sources(mut self, input: ::std::option::Option<crate::types::OrganizationDataSourceConfigurationsResult>) -> Self {
        self.data_sources = input;
        self
    }
    /// <p>Describes which data sources are enabled automatically for member accounts.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn get_data_sources(&self) -> &::std::option::Option<crate::types::OrganizationDataSourceConfigurationsResult> {
        &self.data_sources
    }
    /// Appends an item to `features`.
    ///
    /// To override the contents of this collection use [`set_features`](Self::set_features).
    ///
    /// <p>A list of features that are configured for this organization.</p>
    pub fn features(mut self, input: crate::types::OrganizationFeatureConfigurationResult) -> Self {
        let mut v = self.features.unwrap_or_default();
        v.push(input);
        self.features = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of features that are configured for this organization.</p>
    pub fn set_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureConfigurationResult>>) -> Self {
        self.features = input;
        self
    }
    /// <p>A list of features that are configured for this organization.</p>
    pub fn get_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OrganizationFeatureConfigurationResult>> {
        &self.features
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub fn auto_enable_organization_members(mut self, input: crate::types::AutoEnableMembers) -> Self {
        self.auto_enable_organization_members = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub fn set_auto_enable_organization_members(mut self, input: ::std::option::Option<crate::types::AutoEnableMembers>) -> Self {
        self.auto_enable_organization_members = input;
        self
    }
    /// <p>Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization.</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have GuardDuty enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have GuardDuty enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that GuardDuty will not be automatically enabled for any account in the organization. The administrator must manage GuardDuty for each account in the organization individually.</p> </li>
    /// </ul>
    pub fn get_auto_enable_organization_members(&self) -> &::std::option::Option<crate::types::AutoEnableMembers> {
        &self.auto_enable_organization_members
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeOrganizationConfigurationOutput`](crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationOutput).
    pub fn build(self) -> crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationOutput {
        crate::operation::describe_organization_configuration::DescribeOrganizationConfigurationOutput {
            auto_enable: self.auto_enable,
            member_account_limit_reached: self.member_account_limit_reached,
            data_sources: self.data_sources,
            features: self.features,
            next_token: self.next_token,
            auto_enable_organization_members: self.auto_enable_organization_members,
            _request_id: self._request_id,
        }
    }
}
