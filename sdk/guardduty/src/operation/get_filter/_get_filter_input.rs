// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFilterInput {
    /// <p>The unique ID of the detector that the filter is associated with.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>The name of the filter you want to get.</p>
    #[doc(hidden)]
    pub filter_name: std::option::Option<std::string::String>,
}
impl GetFilterInput {
    /// <p>The unique ID of the detector that the filter is associated with.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The name of the filter you want to get.</p>
    pub fn filter_name(&self) -> std::option::Option<&str> {
        self.filter_name.as_deref()
    }
}
impl GetFilterInput {
    /// Creates a new builder-style object to manufacture [`GetFilterInput`](crate::operation::get_filter::GetFilterInput).
    pub fn builder() -> crate::operation::get_filter::builders::GetFilterInputBuilder {
        crate::operation::get_filter::builders::GetFilterInputBuilder::default()
    }
}

/// A builder for [`GetFilterInput`](crate::operation::get_filter::GetFilterInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetFilterInputBuilder {
    pub(crate) detector_id: std::option::Option<std::string::String>,
    pub(crate) filter_name: std::option::Option<std::string::String>,
}
impl GetFilterInputBuilder {
    /// <p>The unique ID of the detector that the filter is associated with.</p>
    pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_id = Some(input.into());
        self
    }
    /// <p>The unique ID of the detector that the filter is associated with.</p>
    pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The name of the filter you want to get.</p>
    pub fn filter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter_name = Some(input.into());
        self
    }
    /// <p>The name of the filter you want to get.</p>
    pub fn set_filter_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.filter_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetFilterInput`](crate::operation::get_filter::GetFilterInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_filter::GetFilterInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_filter::GetFilterInput {
            detector_id: self.detector_id,
            filter_name: self.filter_name,
        })
    }
}
