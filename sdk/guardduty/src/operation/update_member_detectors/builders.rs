// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_member_detectors::_update_member_detectors_output::UpdateMemberDetectorsOutputBuilder;

pub use crate::operation::update_member_detectors::_update_member_detectors_input::UpdateMemberDetectorsInputBuilder;

impl crate::operation::update_member_detectors::builders::UpdateMemberDetectorsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_member_detectors::UpdateMemberDetectorsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_member_detectors::UpdateMemberDetectorsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_member_detectors();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateMemberDetectors`.
///
/// <p>Contains information on member accounts to be updated.</p>
/// <p>Specifying both EKS Runtime Monitoring (<code>EKS_RUNTIME_MONITORING</code>) and Runtime Monitoring (<code>RUNTIME_MONITORING</code>) will cause an error. You can add only one of these two features because Runtime Monitoring already includes the threat detection for Amazon EKS resources. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/runtime-monitoring.html">Runtime Monitoring</a>.</p>
/// <p>There might be regional differences because some data sources might not be available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions and endpoints</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateMemberDetectorsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_member_detectors::builders::UpdateMemberDetectorsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_member_detectors::UpdateMemberDetectorsOutput,
        crate::operation::update_member_detectors::UpdateMemberDetectorsError,
    > for UpdateMemberDetectorsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_member_detectors::UpdateMemberDetectorsOutput,
            crate::operation::update_member_detectors::UpdateMemberDetectorsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateMemberDetectorsFluentBuilder {
    /// Creates a new `UpdateMemberDetectors`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateMemberDetectors as a reference.
    pub fn as_input(&self) -> &crate::operation::update_member_detectors::builders::UpdateMemberDetectorsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_member_detectors::UpdateMemberDetectorsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_member_detectors::UpdateMemberDetectorsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_member_detectors::UpdateMemberDetectors::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_member_detectors::UpdateMemberDetectors::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_member_detectors::UpdateMemberDetectorsOutput,
        crate::operation::update_member_detectors::UpdateMemberDetectorsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The detector ID of the administrator account.</p>
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.detector_id(input.into());
        self
    }
    /// <p>The detector ID of the administrator account.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_detector_id(input);
        self
    }
    /// <p>The detector ID of the administrator account.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_detector_id()
    }
    ///
    /// Appends an item to `AccountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>A list of member account IDs to be updated.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p>A list of member account IDs to be updated.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
    /// <p>A list of member account IDs to be updated.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_account_ids()
    }
    /// <p>Describes which data sources will be updated.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn data_sources(mut self, input: crate::types::DataSourceConfigurations) -> Self {
        self.inner = self.inner.data_sources(input);
        self
    }
    /// <p>Describes which data sources will be updated.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn set_data_sources(mut self, input: ::std::option::Option<crate::types::DataSourceConfigurations>) -> Self {
        self.inner = self.inner.set_data_sources(input);
        self
    }
    /// <p>Describes which data sources will be updated.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn get_data_sources(&self) -> &::std::option::Option<crate::types::DataSourceConfigurations> {
        self.inner.get_data_sources()
    }
    ///
    /// Appends an item to `Features`.
    ///
    /// To override the contents of this collection use [`set_features`](Self::set_features).
    ///
    /// <p>A list of features that will be updated for the specified member accounts.</p>
    pub fn features(mut self, input: crate::types::MemberFeaturesConfiguration) -> Self {
        self.inner = self.inner.features(input);
        self
    }
    /// <p>A list of features that will be updated for the specified member accounts.</p>
    pub fn set_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemberFeaturesConfiguration>>) -> Self {
        self.inner = self.inner.set_features(input);
        self
    }
    /// <p>A list of features that will be updated for the specified member accounts.</p>
    pub fn get_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemberFeaturesConfiguration>> {
        self.inner.get_features()
    }
}
