// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_filter_output_correct_errors(
    mut builder: crate::operation::create_filter::builders::CreateFilterOutputBuilder,
) -> crate::operation::create_filter::builders::CreateFilterOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_ip_set_output_correct_errors(
    mut builder: crate::operation::create_ip_set::builders::CreateIpSetOutputBuilder,
) -> crate::operation::create_ip_set::builders::CreateIpSetOutputBuilder {
    if builder.ip_set_id.is_none() {
        builder.ip_set_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_members_output_correct_errors(
    mut builder: crate::operation::create_members::builders::CreateMembersOutputBuilder,
) -> crate::operation::create_members::builders::CreateMembersOutputBuilder {
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn create_publishing_destination_output_correct_errors(
    mut builder: crate::operation::create_publishing_destination::builders::CreatePublishingDestinationOutputBuilder,
) -> crate::operation::create_publishing_destination::builders::CreatePublishingDestinationOutputBuilder {
    if builder.destination_id.is_none() {
        builder.destination_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_threat_intel_set_output_correct_errors(
    mut builder: crate::operation::create_threat_intel_set::builders::CreateThreatIntelSetOutputBuilder,
) -> crate::operation::create_threat_intel_set::builders::CreateThreatIntelSetOutputBuilder {
    if builder.threat_intel_set_id.is_none() {
        builder.threat_intel_set_id = Some(Default::default())
    }
    builder
}

pub(crate) fn decline_invitations_output_correct_errors(
    mut builder: crate::operation::decline_invitations::builders::DeclineInvitationsOutputBuilder,
) -> crate::operation::decline_invitations::builders::DeclineInvitationsOutputBuilder {
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_invitations_output_correct_errors(
    mut builder: crate::operation::delete_invitations::builders::DeleteInvitationsOutputBuilder,
) -> crate::operation::delete_invitations::builders::DeleteInvitationsOutputBuilder {
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_members_output_correct_errors(
    mut builder: crate::operation::delete_members::builders::DeleteMembersOutputBuilder,
) -> crate::operation::delete_members::builders::DeleteMembersOutputBuilder {
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_malware_scans_output_correct_errors(
    mut builder: crate::operation::describe_malware_scans::builders::DescribeMalwareScansOutputBuilder,
) -> crate::operation::describe_malware_scans::builders::DescribeMalwareScansOutputBuilder {
    if builder.scans.is_none() {
        builder.scans = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_organization_configuration_output_correct_errors(
    mut builder: crate::operation::describe_organization_configuration::builders::DescribeOrganizationConfigurationOutputBuilder,
) -> crate::operation::describe_organization_configuration::builders::DescribeOrganizationConfigurationOutputBuilder {
    if builder.member_account_limit_reached.is_none() {
        builder.member_account_limit_reached = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_publishing_destination_output_correct_errors(
    mut builder: crate::operation::describe_publishing_destination::builders::DescribePublishingDestinationOutputBuilder,
) -> crate::operation::describe_publishing_destination::builders::DescribePublishingDestinationOutputBuilder {
    if builder.destination_id.is_none() {
        builder.destination_id = Some(Default::default())
    }
    if builder.destination_type.is_none() {
        builder.destination_type = "no value was set".parse::<crate::types::DestinationType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PublishingStatus>().ok()
    }
    if builder.publishing_failure_start_timestamp.is_none() {
        builder.publishing_failure_start_timestamp = Some(Default::default())
    }
    if builder.destination_properties.is_none() {
        builder.destination_properties = {
            let builder = crate::types::builders::DestinationPropertiesBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn disassociate_members_output_correct_errors(
    mut builder: crate::operation::disassociate_members::builders::DisassociateMembersOutputBuilder,
) -> crate::operation::disassociate_members::builders::DisassociateMembersOutputBuilder {
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn get_administrator_account_output_correct_errors(
    mut builder: crate::operation::get_administrator_account::builders::GetAdministratorAccountOutputBuilder,
) -> crate::operation::get_administrator_account::builders::GetAdministratorAccountOutputBuilder {
    if builder.administrator.is_none() {
        builder.administrator = {
            let builder = crate::types::builders::AdministratorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_detector_output_correct_errors(
    mut builder: crate::operation::get_detector::builders::GetDetectorOutputBuilder,
) -> crate::operation::get_detector::builders::GetDetectorOutputBuilder {
    if builder.service_role.is_none() {
        builder.service_role = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DetectorStatus>().ok()
    }
    builder
}

pub(crate) fn get_filter_output_correct_errors(
    mut builder: crate::operation::get_filter::builders::GetFilterOutputBuilder,
) -> crate::operation::get_filter::builders::GetFilterOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::FilterAction>().ok()
    }
    if builder.finding_criteria.is_none() {
        builder.finding_criteria = {
            let builder = crate::types::builders::FindingCriteriaBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_findings_output_correct_errors(
    mut builder: crate::operation::get_findings::builders::GetFindingsOutputBuilder,
) -> crate::operation::get_findings::builders::GetFindingsOutputBuilder {
    if builder.findings.is_none() {
        builder.findings = Some(Default::default())
    }
    builder
}

pub(crate) fn get_findings_statistics_output_correct_errors(
    mut builder: crate::operation::get_findings_statistics::builders::GetFindingsStatisticsOutputBuilder,
) -> crate::operation::get_findings_statistics::builders::GetFindingsStatisticsOutputBuilder {
    if builder.finding_statistics.is_none() {
        builder.finding_statistics = {
            let builder = crate::types::builders::FindingStatisticsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_ip_set_output_correct_errors(
    mut builder: crate::operation::get_ip_set::builders::GetIpSetOutputBuilder,
) -> crate::operation::get_ip_set::builders::GetIpSetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::IpSetFormat>().ok()
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::IpSetStatus>().ok()
    }
    builder
}

pub(crate) fn get_master_account_output_correct_errors(
    mut builder: crate::operation::get_master_account::builders::GetMasterAccountOutputBuilder,
) -> crate::operation::get_master_account::builders::GetMasterAccountOutputBuilder {
    if builder.master.is_none() {
        builder.master = {
            let builder = crate::types::builders::MasterBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_member_detectors_output_correct_errors(
    mut builder: crate::operation::get_member_detectors::builders::GetMemberDetectorsOutputBuilder,
) -> crate::operation::get_member_detectors::builders::GetMemberDetectorsOutputBuilder {
    if builder.member_data_source_configurations.is_none() {
        builder.member_data_source_configurations = Some(Default::default())
    }
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn get_members_output_correct_errors(
    mut builder: crate::operation::get_members::builders::GetMembersOutputBuilder,
) -> crate::operation::get_members::builders::GetMembersOutputBuilder {
    if builder.members.is_none() {
        builder.members = Some(Default::default())
    }
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn get_threat_intel_set_output_correct_errors(
    mut builder: crate::operation::get_threat_intel_set::builders::GetThreatIntelSetOutputBuilder,
) -> crate::operation::get_threat_intel_set::builders::GetThreatIntelSetOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::ThreatIntelSetFormat>().ok()
    }
    if builder.location.is_none() {
        builder.location = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ThreatIntelSetStatus>().ok()
    }
    builder
}

pub(crate) fn invite_members_output_correct_errors(
    mut builder: crate::operation::invite_members::builders::InviteMembersOutputBuilder,
) -> crate::operation::invite_members::builders::InviteMembersOutputBuilder {
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn list_coverage_output_correct_errors(
    mut builder: crate::operation::list_coverage::builders::ListCoverageOutputBuilder,
) -> crate::operation::list_coverage::builders::ListCoverageOutputBuilder {
    if builder.resources.is_none() {
        builder.resources = Some(Default::default())
    }
    builder
}

pub(crate) fn list_detectors_output_correct_errors(
    mut builder: crate::operation::list_detectors::builders::ListDetectorsOutputBuilder,
) -> crate::operation::list_detectors::builders::ListDetectorsOutputBuilder {
    if builder.detector_ids.is_none() {
        builder.detector_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn list_filters_output_correct_errors(
    mut builder: crate::operation::list_filters::builders::ListFiltersOutputBuilder,
) -> crate::operation::list_filters::builders::ListFiltersOutputBuilder {
    if builder.filter_names.is_none() {
        builder.filter_names = Some(Default::default())
    }
    builder
}

pub(crate) fn list_findings_output_correct_errors(
    mut builder: crate::operation::list_findings::builders::ListFindingsOutputBuilder,
) -> crate::operation::list_findings::builders::ListFindingsOutputBuilder {
    if builder.finding_ids.is_none() {
        builder.finding_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ip_sets_output_correct_errors(
    mut builder: crate::operation::list_ip_sets::builders::ListIpSetsOutputBuilder,
) -> crate::operation::list_ip_sets::builders::ListIpSetsOutputBuilder {
    if builder.ip_set_ids.is_none() {
        builder.ip_set_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn list_publishing_destinations_output_correct_errors(
    mut builder: crate::operation::list_publishing_destinations::builders::ListPublishingDestinationsOutputBuilder,
) -> crate::operation::list_publishing_destinations::builders::ListPublishingDestinationsOutputBuilder {
    if builder.destinations.is_none() {
        builder.destinations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_threat_intel_sets_output_correct_errors(
    mut builder: crate::operation::list_threat_intel_sets::builders::ListThreatIntelSetsOutputBuilder,
) -> crate::operation::list_threat_intel_sets::builders::ListThreatIntelSetsOutputBuilder {
    if builder.threat_intel_set_ids.is_none() {
        builder.threat_intel_set_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn start_monitoring_members_output_correct_errors(
    mut builder: crate::operation::start_monitoring_members::builders::StartMonitoringMembersOutputBuilder,
) -> crate::operation::start_monitoring_members::builders::StartMonitoringMembersOutputBuilder {
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn stop_monitoring_members_output_correct_errors(
    mut builder: crate::operation::stop_monitoring_members::builders::StopMonitoringMembersOutputBuilder,
) -> crate::operation::stop_monitoring_members::builders::StopMonitoringMembersOutputBuilder {
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn update_filter_output_correct_errors(
    mut builder: crate::operation::update_filter::builders::UpdateFilterOutputBuilder,
) -> crate::operation::update_filter::builders::UpdateFilterOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn update_member_detectors_output_correct_errors(
    mut builder: crate::operation::update_member_detectors::builders::UpdateMemberDetectorsOutputBuilder,
) -> crate::operation::update_member_detectors::builders::UpdateMemberDetectorsOutputBuilder {
    if builder.unprocessed_accounts.is_none() {
        builder.unprocessed_accounts = Some(Default::default())
    }
    builder
}

pub(crate) fn data_source_configurations_result_correct_errors(
    mut builder: crate::types::builders::DataSourceConfigurationsResultBuilder,
) -> crate::types::builders::DataSourceConfigurationsResultBuilder {
    if builder.cloud_trail.is_none() {
        builder.cloud_trail = {
            let builder = crate::types::builders::CloudTrailConfigurationResultBuilder::default();
            Some(crate::serde_util::cloud_trail_configuration_result_correct_errors(builder).build())
        }
    }
    if builder.dns_logs.is_none() {
        builder.dns_logs = {
            let builder = crate::types::builders::DnsLogsConfigurationResultBuilder::default();
            Some(crate::serde_util::dns_logs_configuration_result_correct_errors(builder).build())
        }
    }
    if builder.flow_logs.is_none() {
        builder.flow_logs = {
            let builder = crate::types::builders::FlowLogsConfigurationResultBuilder::default();
            Some(crate::serde_util::flow_logs_configuration_result_correct_errors(builder).build())
        }
    }
    if builder.s3_logs.is_none() {
        builder.s3_logs = {
            let builder = crate::types::builders::S3LogsConfigurationResultBuilder::default();
            Some(crate::serde_util::s3_logs_configuration_result_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn organization_data_source_configurations_result_correct_errors(
    mut builder: crate::types::builders::OrganizationDataSourceConfigurationsResultBuilder,
) -> crate::types::builders::OrganizationDataSourceConfigurationsResultBuilder {
    if builder.s3_logs.is_none() {
        builder.s3_logs = {
            let builder = crate::types::builders::OrganizationS3LogsConfigurationResultBuilder::default();
            Some(crate::serde_util::organization_s3_logs_configuration_result_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn cloud_trail_configuration_result_correct_errors(
    mut builder: crate::types::builders::CloudTrailConfigurationResultBuilder,
) -> crate::types::builders::CloudTrailConfigurationResultBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    builder
}

pub(crate) fn destination_correct_errors(mut builder: crate::types::builders::DestinationBuilder) -> crate::types::builders::DestinationBuilder {
    if builder.destination_id.is_none() {
        builder.destination_id = Some(Default::default())
    }
    if builder.destination_type.is_none() {
        builder.destination_type = "no value was set".parse::<crate::types::DestinationType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PublishingStatus>().ok()
    }
    builder
}

pub(crate) fn dns_logs_configuration_result_correct_errors(
    mut builder: crate::types::builders::DnsLogsConfigurationResultBuilder,
) -> crate::types::builders::DnsLogsConfigurationResultBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    builder
}

pub(crate) fn finding_correct_errors(mut builder: crate::types::builders::FindingBuilder) -> crate::types::builders::FindingBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    if builder.resource.is_none() {
        builder.resource = {
            let builder = crate::types::builders::ResourceBuilder::default();
            Some(builder.build())
        }
    }
    if builder.schema_version.is_none() {
        builder.schema_version = Some(Default::default())
    }
    if builder.severity.is_none() {
        builder.severity = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_logs_configuration_result_correct_errors(
    mut builder: crate::types::builders::FlowLogsConfigurationResultBuilder,
) -> crate::types::builders::FlowLogsConfigurationResultBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    builder
}

pub(crate) fn kubernetes_configuration_result_correct_errors(
    mut builder: crate::types::builders::KubernetesConfigurationResultBuilder,
) -> crate::types::builders::KubernetesConfigurationResultBuilder {
    if builder.audit_logs.is_none() {
        builder.audit_logs = {
            let builder = crate::types::builders::KubernetesAuditLogsConfigurationResultBuilder::default();
            Some(crate::serde_util::kubernetes_audit_logs_configuration_result_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn member_correct_errors(mut builder: crate::types::builders::MemberBuilder) -> crate::types::builders::MemberBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.master_id.is_none() {
        builder.master_id = Some(Default::default())
    }
    if builder.email.is_none() {
        builder.email = Some(Default::default())
    }
    if builder.relationship_status.is_none() {
        builder.relationship_status = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(Default::default())
    }
    builder
}

pub(crate) fn member_data_source_configuration_correct_errors(
    mut builder: crate::types::builders::MemberDataSourceConfigurationBuilder,
) -> crate::types::builders::MemberDataSourceConfigurationBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn organization_kubernetes_configuration_result_correct_errors(
    mut builder: crate::types::builders::OrganizationKubernetesConfigurationResultBuilder,
) -> crate::types::builders::OrganizationKubernetesConfigurationResultBuilder {
    if builder.audit_logs.is_none() {
        builder.audit_logs = {
            let builder = crate::types::builders::OrganizationKubernetesAuditLogsConfigurationResultBuilder::default();
            Some(crate::serde_util::organization_kubernetes_audit_logs_configuration_result_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn organization_s3_logs_configuration_result_correct_errors(
    mut builder: crate::types::builders::OrganizationS3LogsConfigurationResultBuilder,
) -> crate::types::builders::OrganizationS3LogsConfigurationResultBuilder {
    if builder.auto_enable.is_none() {
        builder.auto_enable = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_logs_configuration_result_correct_errors(
    mut builder: crate::types::builders::S3LogsConfigurationResultBuilder,
) -> crate::types::builders::S3LogsConfigurationResultBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    builder
}

pub(crate) fn unprocessed_account_correct_errors(
    mut builder: crate::types::builders::UnprocessedAccountBuilder,
) -> crate::types::builders::UnprocessedAccountBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.result.is_none() {
        builder.result = Some(Default::default())
    }
    builder
}

pub(crate) fn kubernetes_audit_logs_configuration_result_correct_errors(
    mut builder: crate::types::builders::KubernetesAuditLogsConfigurationResultBuilder,
) -> crate::types::builders::KubernetesAuditLogsConfigurationResultBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    builder
}

pub(crate) fn organization_kubernetes_audit_logs_configuration_result_correct_errors(
    mut builder: crate::types::builders::OrganizationKubernetesAuditLogsConfigurationResultBuilder,
) -> crate::types::builders::OrganizationKubernetesAuditLogsConfigurationResultBuilder {
    if builder.auto_enable.is_none() {
        builder.auto_enable = Some(Default::default())
    }
    builder
}

pub(crate) fn scan_condition_correct_errors(
    mut builder: crate::types::builders::ScanConditionBuilder,
) -> crate::types::builders::ScanConditionBuilder {
    if builder.map_equals.is_none() {
        builder.map_equals = Some(Default::default())
    }
    builder
}

pub(crate) fn scan_condition_pair_correct_errors(
    mut builder: crate::types::builders::ScanConditionPairBuilder,
) -> crate::types::builders::ScanConditionPairBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}
