// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_resource_data<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::ResourceData>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ResourceDataBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "s3Bucket" => {
                            builder = builder.set_s3_bucket(crate::protocol_serde::shape_s3_bucket::de_s3_bucket(tokens)?);
                        }
                        "ec2Instance" => {
                            builder = builder.set_ec2_instance(crate::protocol_serde::shape_ec2_instance::de_ec2_instance(tokens)?);
                        }
                        "accessKey" => {
                            builder = builder.set_access_key(crate::protocol_serde::shape_access_key::de_access_key(tokens)?);
                        }
                        "ec2NetworkInterface" => {
                            builder = builder
                                .set_ec2_network_interface(crate::protocol_serde::shape_ec2_network_interface::de_ec2_network_interface(tokens)?);
                        }
                        "s3Object" => {
                            builder = builder.set_s3_object(crate::protocol_serde::shape_s3_object::de_s3_object(tokens)?);
                        }
                        "eksCluster" => {
                            builder = builder.set_eks_cluster(crate::protocol_serde::shape_eks_cluster::de_eks_cluster(tokens)?);
                        }
                        "kubernetesWorkload" => {
                            builder =
                                builder.set_kubernetes_workload(crate::protocol_serde::shape_kubernetes_workload::de_kubernetes_workload(tokens)?);
                        }
                        "container" => {
                            builder = builder.set_container(crate::protocol_serde::shape_container_finding_resource::de_container_finding_resource(
                                tokens,
                            )?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
