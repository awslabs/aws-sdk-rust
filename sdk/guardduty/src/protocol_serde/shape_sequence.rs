// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_sequence<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::Sequence>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SequenceBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "uid" => {
                            builder = builder.set_uid(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "description" => {
                            builder = builder.set_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "actors" => {
                            builder = builder.set_actors(crate::protocol_serde::shape_actors::de_actors(tokens)?);
                        }
                        "resources" => {
                            builder = builder.set_resources(crate::protocol_serde::shape_resources::de_resources(tokens)?);
                        }
                        "endpoints" => {
                            builder = builder.set_endpoints(crate::protocol_serde::shape_network_endpoints::de_network_endpoints(tokens)?);
                        }
                        "signals" => {
                            builder = builder.set_signals(crate::protocol_serde::shape_signals::de_signals(tokens)?);
                        }
                        "sequenceIndicators" => {
                            builder = builder.set_sequence_indicators(crate::protocol_serde::shape_indicators::de_indicators(tokens)?);
                        }
                        "additionalSequenceTypes" => {
                            builder = builder.set_additional_sequence_types(
                                crate::protocol_serde::shape_additional_sequence_types::de_additional_sequence_types(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::sequence_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
