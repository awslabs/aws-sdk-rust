// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_detector_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_detector::CreateDetectorInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.data_sources {
        #[allow(unused_mut)]
        let mut object_3 = object.key("dataSources").start_object();
        crate::protocol_serde::shape_data_source_configurations::ser_data_source_configurations(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.enable {
        object.key("enable").boolean(*var_4);
    }
    if let Some(var_5) = &input.features {
        let mut array_6 = object.key("features").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_detector_feature_configuration::ser_detector_feature_configuration(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.finding_publishing_frequency {
        object.key("findingPublishingFrequency").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}
