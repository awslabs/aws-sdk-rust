// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the result of GuardDuty usage. If a UsageStatisticType is provided the result for other types will be null. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UsageStatistics {
    /// <p>The usage statistic sum organized by account ID.</p>
    #[doc(hidden)]
    pub sum_by_account: std::option::Option<std::vec::Vec<crate::types::UsageAccountResult>>,
    /// <p>The usage statistic sum organized by on data source.</p>
    #[doc(hidden)]
    pub sum_by_data_source: std::option::Option<std::vec::Vec<crate::types::UsageDataSourceResult>>,
    /// <p>The usage statistic sum organized by resource.</p>
    #[doc(hidden)]
    pub sum_by_resource: std::option::Option<std::vec::Vec<crate::types::UsageResourceResult>>,
    /// <p>Lists the top 50 resources that have generated the most GuardDuty usage, in order from most to least expensive.</p>
    #[doc(hidden)]
    pub top_resources: std::option::Option<std::vec::Vec<crate::types::UsageResourceResult>>,
}
impl UsageStatistics {
    /// <p>The usage statistic sum organized by account ID.</p>
    pub fn sum_by_account(&self) -> std::option::Option<&[crate::types::UsageAccountResult]> {
        self.sum_by_account.as_deref()
    }
    /// <p>The usage statistic sum organized by on data source.</p>
    pub fn sum_by_data_source(
        &self,
    ) -> std::option::Option<&[crate::types::UsageDataSourceResult]> {
        self.sum_by_data_source.as_deref()
    }
    /// <p>The usage statistic sum organized by resource.</p>
    pub fn sum_by_resource(&self) -> std::option::Option<&[crate::types::UsageResourceResult]> {
        self.sum_by_resource.as_deref()
    }
    /// <p>Lists the top 50 resources that have generated the most GuardDuty usage, in order from most to least expensive.</p>
    pub fn top_resources(&self) -> std::option::Option<&[crate::types::UsageResourceResult]> {
        self.top_resources.as_deref()
    }
}
impl UsageStatistics {
    /// Creates a new builder-style object to manufacture [`UsageStatistics`](crate::types::UsageStatistics).
    pub fn builder() -> crate::types::builders::UsageStatisticsBuilder {
        crate::types::builders::UsageStatisticsBuilder::default()
    }
}

/// A builder for [`UsageStatistics`](crate::types::UsageStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UsageStatisticsBuilder {
    pub(crate) sum_by_account: std::option::Option<std::vec::Vec<crate::types::UsageAccountResult>>,
    pub(crate) sum_by_data_source:
        std::option::Option<std::vec::Vec<crate::types::UsageDataSourceResult>>,
    pub(crate) sum_by_resource:
        std::option::Option<std::vec::Vec<crate::types::UsageResourceResult>>,
    pub(crate) top_resources: std::option::Option<std::vec::Vec<crate::types::UsageResourceResult>>,
}
impl UsageStatisticsBuilder {
    /// Appends an item to `sum_by_account`.
    ///
    /// To override the contents of this collection use [`set_sum_by_account`](Self::set_sum_by_account).
    ///
    /// <p>The usage statistic sum organized by account ID.</p>
    pub fn sum_by_account(mut self, input: crate::types::UsageAccountResult) -> Self {
        let mut v = self.sum_by_account.unwrap_or_default();
        v.push(input);
        self.sum_by_account = Some(v);
        self
    }
    /// <p>The usage statistic sum organized by account ID.</p>
    pub fn set_sum_by_account(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UsageAccountResult>>,
    ) -> Self {
        self.sum_by_account = input;
        self
    }
    /// Appends an item to `sum_by_data_source`.
    ///
    /// To override the contents of this collection use [`set_sum_by_data_source`](Self::set_sum_by_data_source).
    ///
    /// <p>The usage statistic sum organized by on data source.</p>
    pub fn sum_by_data_source(mut self, input: crate::types::UsageDataSourceResult) -> Self {
        let mut v = self.sum_by_data_source.unwrap_or_default();
        v.push(input);
        self.sum_by_data_source = Some(v);
        self
    }
    /// <p>The usage statistic sum organized by on data source.</p>
    pub fn set_sum_by_data_source(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UsageDataSourceResult>>,
    ) -> Self {
        self.sum_by_data_source = input;
        self
    }
    /// Appends an item to `sum_by_resource`.
    ///
    /// To override the contents of this collection use [`set_sum_by_resource`](Self::set_sum_by_resource).
    ///
    /// <p>The usage statistic sum organized by resource.</p>
    pub fn sum_by_resource(mut self, input: crate::types::UsageResourceResult) -> Self {
        let mut v = self.sum_by_resource.unwrap_or_default();
        v.push(input);
        self.sum_by_resource = Some(v);
        self
    }
    /// <p>The usage statistic sum organized by resource.</p>
    pub fn set_sum_by_resource(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UsageResourceResult>>,
    ) -> Self {
        self.sum_by_resource = input;
        self
    }
    /// Appends an item to `top_resources`.
    ///
    /// To override the contents of this collection use [`set_top_resources`](Self::set_top_resources).
    ///
    /// <p>Lists the top 50 resources that have generated the most GuardDuty usage, in order from most to least expensive.</p>
    pub fn top_resources(mut self, input: crate::types::UsageResourceResult) -> Self {
        let mut v = self.top_resources.unwrap_or_default();
        v.push(input);
        self.top_resources = Some(v);
        self
    }
    /// <p>Lists the top 50 resources that have generated the most GuardDuty usage, in order from most to least expensive.</p>
    pub fn set_top_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UsageResourceResult>>,
    ) -> Self {
        self.top_resources = input;
        self
    }
    /// Consumes the builder and constructs a [`UsageStatistics`](crate::types::UsageStatistics).
    pub fn build(self) -> crate::types::UsageStatistics {
        crate::types::UsageStatistics {
            sum_by_account: self.sum_by_account,
            sum_by_data_source: self.sum_by_data_source,
            sum_by_resource: self.sum_by_resource,
            top_resources: self.top_resources,
        }
    }
}
