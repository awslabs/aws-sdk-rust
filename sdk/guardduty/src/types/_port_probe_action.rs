// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the PORT_PROBE action described in the finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PortProbeAction {
    /// <p>Indicates whether EC2 blocked the port probe to the instance, such as with an ACL.</p>
    #[doc(hidden)]
    pub blocked: bool,
    /// <p>A list of objects related to port probe details.</p>
    #[doc(hidden)]
    pub port_probe_details: std::option::Option<std::vec::Vec<crate::types::PortProbeDetail>>,
}
impl PortProbeAction {
    /// <p>Indicates whether EC2 blocked the port probe to the instance, such as with an ACL.</p>
    pub fn blocked(&self) -> bool {
        self.blocked
    }
    /// <p>A list of objects related to port probe details.</p>
    pub fn port_probe_details(&self) -> std::option::Option<&[crate::types::PortProbeDetail]> {
        self.port_probe_details.as_deref()
    }
}
impl PortProbeAction {
    /// Creates a new builder-style object to manufacture [`PortProbeAction`](crate::types::PortProbeAction).
    pub fn builder() -> crate::types::builders::PortProbeActionBuilder {
        crate::types::builders::PortProbeActionBuilder::default()
    }
}

/// A builder for [`PortProbeAction`](crate::types::PortProbeAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PortProbeActionBuilder {
    pub(crate) blocked: std::option::Option<bool>,
    pub(crate) port_probe_details:
        std::option::Option<std::vec::Vec<crate::types::PortProbeDetail>>,
}
impl PortProbeActionBuilder {
    /// <p>Indicates whether EC2 blocked the port probe to the instance, such as with an ACL.</p>
    pub fn blocked(mut self, input: bool) -> Self {
        self.blocked = Some(input);
        self
    }
    /// <p>Indicates whether EC2 blocked the port probe to the instance, such as with an ACL.</p>
    pub fn set_blocked(mut self, input: std::option::Option<bool>) -> Self {
        self.blocked = input;
        self
    }
    /// Appends an item to `port_probe_details`.
    ///
    /// To override the contents of this collection use [`set_port_probe_details`](Self::set_port_probe_details).
    ///
    /// <p>A list of objects related to port probe details.</p>
    pub fn port_probe_details(mut self, input: crate::types::PortProbeDetail) -> Self {
        let mut v = self.port_probe_details.unwrap_or_default();
        v.push(input);
        self.port_probe_details = Some(v);
        self
    }
    /// <p>A list of objects related to port probe details.</p>
    pub fn set_port_probe_details(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PortProbeDetail>>,
    ) -> Self {
        self.port_probe_details = input;
        self
    }
    /// Consumes the builder and constructs a [`PortProbeAction`](crate::types::PortProbeAction).
    pub fn build(self) -> crate::types::PortProbeAction {
        crate::types::PortProbeAction {
            blocked: self.blocked.unwrap_or_default(),
            port_probe_details: self.port_probe_details,
        }
    }
}
