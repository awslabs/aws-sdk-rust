// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the administrator account and invitation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Master {
    /// <p>The ID of the account used as the administrator account.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The value used to validate the administrator account to the member account.</p>
    #[doc(hidden)]
    pub invitation_id: std::option::Option<std::string::String>,
    /// <p>The status of the relationship between the administrator and member accounts.</p>
    #[doc(hidden)]
    pub relationship_status: std::option::Option<std::string::String>,
    /// <p>The timestamp when the invitation was sent.</p>
    #[doc(hidden)]
    pub invited_at: std::option::Option<std::string::String>,
}
impl Master {
    /// <p>The ID of the account used as the administrator account.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The value used to validate the administrator account to the member account.</p>
    pub fn invitation_id(&self) -> std::option::Option<&str> {
        self.invitation_id.as_deref()
    }
    /// <p>The status of the relationship between the administrator and member accounts.</p>
    pub fn relationship_status(&self) -> std::option::Option<&str> {
        self.relationship_status.as_deref()
    }
    /// <p>The timestamp when the invitation was sent.</p>
    pub fn invited_at(&self) -> std::option::Option<&str> {
        self.invited_at.as_deref()
    }
}
impl Master {
    /// Creates a new builder-style object to manufacture [`Master`](crate::types::Master).
    pub fn builder() -> crate::types::builders::MasterBuilder {
        crate::types::builders::MasterBuilder::default()
    }
}

/// A builder for [`Master`](crate::types::Master).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MasterBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) invitation_id: std::option::Option<std::string::String>,
    pub(crate) relationship_status: std::option::Option<std::string::String>,
    pub(crate) invited_at: std::option::Option<std::string::String>,
}
impl MasterBuilder {
    /// <p>The ID of the account used as the administrator account.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The ID of the account used as the administrator account.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The value used to validate the administrator account to the member account.</p>
    pub fn invitation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.invitation_id = Some(input.into());
        self
    }
    /// <p>The value used to validate the administrator account to the member account.</p>
    pub fn set_invitation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.invitation_id = input;
        self
    }
    /// <p>The status of the relationship between the administrator and member accounts.</p>
    pub fn relationship_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.relationship_status = Some(input.into());
        self
    }
    /// <p>The status of the relationship between the administrator and member accounts.</p>
    pub fn set_relationship_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.relationship_status = input;
        self
    }
    /// <p>The timestamp when the invitation was sent.</p>
    pub fn invited_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.invited_at = Some(input.into());
        self
    }
    /// <p>The timestamp when the invitation was sent.</p>
    pub fn set_invited_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.invited_at = input;
        self
    }
    /// Consumes the builder and constructs a [`Master`](crate::types::Master).
    pub fn build(self) -> crate::types::Master {
        crate::types::Master {
            account_id: self.account_id,
            invitation_id: self.invitation_id,
            relationship_status: self.relationship_status,
            invited_at: self.invited_at,
        }
    }
}
