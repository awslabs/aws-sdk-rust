// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The account within the organization specified as the GuardDuty delegated administrator.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdminAccount {
    /// <p>The Amazon Web Services account ID for the account.</p>
    #[doc(hidden)]
    pub admin_account_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether the account is enabled as the delegated administrator.</p>
    #[doc(hidden)]
    pub admin_status: std::option::Option<crate::types::AdminStatus>,
}
impl AdminAccount {
    /// <p>The Amazon Web Services account ID for the account.</p>
    pub fn admin_account_id(&self) -> std::option::Option<&str> {
        self.admin_account_id.as_deref()
    }
    /// <p>Indicates whether the account is enabled as the delegated administrator.</p>
    pub fn admin_status(&self) -> std::option::Option<&crate::types::AdminStatus> {
        self.admin_status.as_ref()
    }
}
impl AdminAccount {
    /// Creates a new builder-style object to manufacture [`AdminAccount`](crate::types::AdminAccount).
    pub fn builder() -> crate::types::builders::AdminAccountBuilder {
        crate::types::builders::AdminAccountBuilder::default()
    }
}

/// A builder for [`AdminAccount`](crate::types::AdminAccount).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AdminAccountBuilder {
    pub(crate) admin_account_id: std::option::Option<std::string::String>,
    pub(crate) admin_status: std::option::Option<crate::types::AdminStatus>,
}
impl AdminAccountBuilder {
    /// <p>The Amazon Web Services account ID for the account.</p>
    pub fn admin_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.admin_account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID for the account.</p>
    pub fn set_admin_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.admin_account_id = input;
        self
    }
    /// <p>Indicates whether the account is enabled as the delegated administrator.</p>
    pub fn admin_status(mut self, input: crate::types::AdminStatus) -> Self {
        self.admin_status = Some(input);
        self
    }
    /// <p>Indicates whether the account is enabled as the delegated administrator.</p>
    pub fn set_admin_status(
        mut self,
        input: std::option::Option<crate::types::AdminStatus>,
    ) -> Self {
        self.admin_status = input;
        self
    }
    /// Consumes the builder and constructs a [`AdminAccount`](crate::types::AdminAccount).
    pub fn build(self) -> crate::types::AdminAccount {
        crate::types::AdminAccount {
            admin_account_id: self.admin_account_id,
            admin_status: self.admin_status,
        }
    }
}
