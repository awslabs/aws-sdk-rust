// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains EBS volume details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VolumeDetail {
    /// <p>EBS volume Arn information.</p>
    #[doc(hidden)]
    pub volume_arn: std::option::Option<std::string::String>,
    /// <p>The EBS volume type.</p>
    #[doc(hidden)]
    pub volume_type: std::option::Option<std::string::String>,
    /// <p>The device name for the EBS volume.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>EBS volume size in GB.</p>
    #[doc(hidden)]
    pub volume_size_in_gb: i32,
    /// <p>EBS volume encryption type.</p>
    #[doc(hidden)]
    pub encryption_type: std::option::Option<std::string::String>,
    /// <p>Snapshot Arn of the EBS volume.</p>
    #[doc(hidden)]
    pub snapshot_arn: std::option::Option<std::string::String>,
    /// <p>KMS key Arn used to encrypt the EBS volume.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
}
impl VolumeDetail {
    /// <p>EBS volume Arn information.</p>
    pub fn volume_arn(&self) -> std::option::Option<&str> {
        self.volume_arn.as_deref()
    }
    /// <p>The EBS volume type.</p>
    pub fn volume_type(&self) -> std::option::Option<&str> {
        self.volume_type.as_deref()
    }
    /// <p>The device name for the EBS volume.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>EBS volume size in GB.</p>
    pub fn volume_size_in_gb(&self) -> i32 {
        self.volume_size_in_gb
    }
    /// <p>EBS volume encryption type.</p>
    pub fn encryption_type(&self) -> std::option::Option<&str> {
        self.encryption_type.as_deref()
    }
    /// <p>Snapshot Arn of the EBS volume.</p>
    pub fn snapshot_arn(&self) -> std::option::Option<&str> {
        self.snapshot_arn.as_deref()
    }
    /// <p>KMS key Arn used to encrypt the EBS volume.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
}
impl VolumeDetail {
    /// Creates a new builder-style object to manufacture [`VolumeDetail`](crate::types::VolumeDetail).
    pub fn builder() -> crate::types::builders::VolumeDetailBuilder {
        crate::types::builders::VolumeDetailBuilder::default()
    }
}

/// A builder for [`VolumeDetail`](crate::types::VolumeDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VolumeDetailBuilder {
    pub(crate) volume_arn: std::option::Option<std::string::String>,
    pub(crate) volume_type: std::option::Option<std::string::String>,
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) volume_size_in_gb: std::option::Option<i32>,
    pub(crate) encryption_type: std::option::Option<std::string::String>,
    pub(crate) snapshot_arn: std::option::Option<std::string::String>,
    pub(crate) kms_key_arn: std::option::Option<std::string::String>,
}
impl VolumeDetailBuilder {
    /// <p>EBS volume Arn information.</p>
    pub fn volume_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_arn = Some(input.into());
        self
    }
    /// <p>EBS volume Arn information.</p>
    pub fn set_volume_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_arn = input;
        self
    }
    /// <p>The EBS volume type.</p>
    pub fn volume_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_type = Some(input.into());
        self
    }
    /// <p>The EBS volume type.</p>
    pub fn set_volume_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>The device name for the EBS volume.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The device name for the EBS volume.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>EBS volume size in GB.</p>
    pub fn volume_size_in_gb(mut self, input: i32) -> Self {
        self.volume_size_in_gb = Some(input);
        self
    }
    /// <p>EBS volume size in GB.</p>
    pub fn set_volume_size_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_size_in_gb = input;
        self
    }
    /// <p>EBS volume encryption type.</p>
    pub fn encryption_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_type = Some(input.into());
        self
    }
    /// <p>EBS volume encryption type.</p>
    pub fn set_encryption_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_type = input;
        self
    }
    /// <p>Snapshot Arn of the EBS volume.</p>
    pub fn snapshot_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_arn = Some(input.into());
        self
    }
    /// <p>Snapshot Arn of the EBS volume.</p>
    pub fn set_snapshot_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_arn = input;
        self
    }
    /// <p>KMS key Arn used to encrypt the EBS volume.</p>
    pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_arn = Some(input.into());
        self
    }
    /// <p>KMS key Arn used to encrypt the EBS volume.</p>
    pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`VolumeDetail`](crate::types::VolumeDetail).
    pub fn build(self) -> crate::types::VolumeDetail {
        crate::types::VolumeDetail {
            volume_arn: self.volume_arn,
            volume_type: self.volume_type,
            device_name: self.device_name,
            volume_size_in_gb: self.volume_size_in_gb.unwrap_or_default(),
            encryption_type: self.encryption_type,
            snapshot_arn: self.snapshot_arn,
            kms_key_arn: self.kms_key_arn,
        }
    }
}
