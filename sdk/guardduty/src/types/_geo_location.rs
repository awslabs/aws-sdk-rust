// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the location of the remote IP address.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GeoLocation {
    /// <p>The latitude information of the remote IP address.</p>
    #[doc(hidden)]
    pub lat: f64,
    /// <p>The longitude information of the remote IP address.</p>
    #[doc(hidden)]
    pub lon: f64,
}
impl GeoLocation {
    /// <p>The latitude information of the remote IP address.</p>
    pub fn lat(&self) -> f64 {
        self.lat
    }
    /// <p>The longitude information of the remote IP address.</p>
    pub fn lon(&self) -> f64 {
        self.lon
    }
}
impl GeoLocation {
    /// Creates a new builder-style object to manufacture [`GeoLocation`](crate::types::GeoLocation).
    pub fn builder() -> crate::types::builders::GeoLocationBuilder {
        crate::types::builders::GeoLocationBuilder::default()
    }
}

/// A builder for [`GeoLocation`](crate::types::GeoLocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GeoLocationBuilder {
    pub(crate) lat: std::option::Option<f64>,
    pub(crate) lon: std::option::Option<f64>,
}
impl GeoLocationBuilder {
    /// <p>The latitude information of the remote IP address.</p>
    pub fn lat(mut self, input: f64) -> Self {
        self.lat = Some(input);
        self
    }
    /// <p>The latitude information of the remote IP address.</p>
    pub fn set_lat(mut self, input: std::option::Option<f64>) -> Self {
        self.lat = input;
        self
    }
    /// <p>The longitude information of the remote IP address.</p>
    pub fn lon(mut self, input: f64) -> Self {
        self.lon = Some(input);
        self
    }
    /// <p>The longitude information of the remote IP address.</p>
    pub fn set_lon(mut self, input: std::option::Option<f64>) -> Self {
        self.lon = input;
        self
    }
    /// Consumes the builder and constructs a [`GeoLocation`](crate::types::GeoLocation).
    pub fn build(self) -> crate::types::GeoLocation {
        crate::types::GeoLocation {
            lat: self.lat.unwrap_or_default(),
            lon: self.lon.unwrap_or_default(),
        }
    }
}
