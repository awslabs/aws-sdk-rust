// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container security context.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityContext {
    /// <p>Whether the container is privileged.</p>
    #[doc(hidden)]
    pub privileged: bool,
}
impl SecurityContext {
    /// <p>Whether the container is privileged.</p>
    pub fn privileged(&self) -> bool {
        self.privileged
    }
}
impl SecurityContext {
    /// Creates a new builder-style object to manufacture [`SecurityContext`](crate::types::SecurityContext).
    pub fn builder() -> crate::types::builders::SecurityContextBuilder {
        crate::types::builders::SecurityContextBuilder::default()
    }
}

/// A builder for [`SecurityContext`](crate::types::SecurityContext).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SecurityContextBuilder {
    pub(crate) privileged: std::option::Option<bool>,
}
impl SecurityContextBuilder {
    /// <p>Whether the container is privileged.</p>
    pub fn privileged(mut self, input: bool) -> Self {
        self.privileged = Some(input);
        self
    }
    /// <p>Whether the container is privileged.</p>
    pub fn set_privileged(mut self, input: std::option::Option<bool>) -> Self {
        self.privileged = input;
        self
    }
    /// Consumes the builder and constructs a [`SecurityContext`](crate::types::SecurityContext).
    pub fn build(self) -> crate::types::SecurityContext {
        crate::types::SecurityContext {
            privileged: self.privileged.unwrap_or_default(),
        }
    }
}
