// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about identified threats organized by threat name.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ThreatDetectedByName {
    /// <p>Total number of infected files identified.</p>
    #[doc(hidden)]
    pub item_count: i32,
    /// <p>Total number of unique threats by name identified, as part of the malware scan.</p>
    #[doc(hidden)]
    pub unique_threat_name_count: i32,
    /// <p>Flag to determine if the finding contains every single infected file-path and/or every threat.</p>
    #[doc(hidden)]
    pub shortened: bool,
    /// <p>List of identified threats with details, organized by threat name.</p>
    #[doc(hidden)]
    pub threat_names: std::option::Option<std::vec::Vec<crate::types::ScanThreatName>>,
}
impl ThreatDetectedByName {
    /// <p>Total number of infected files identified.</p>
    pub fn item_count(&self) -> i32 {
        self.item_count
    }
    /// <p>Total number of unique threats by name identified, as part of the malware scan.</p>
    pub fn unique_threat_name_count(&self) -> i32 {
        self.unique_threat_name_count
    }
    /// <p>Flag to determine if the finding contains every single infected file-path and/or every threat.</p>
    pub fn shortened(&self) -> bool {
        self.shortened
    }
    /// <p>List of identified threats with details, organized by threat name.</p>
    pub fn threat_names(&self) -> std::option::Option<&[crate::types::ScanThreatName]> {
        self.threat_names.as_deref()
    }
}
impl ThreatDetectedByName {
    /// Creates a new builder-style object to manufacture [`ThreatDetectedByName`](crate::types::ThreatDetectedByName).
    pub fn builder() -> crate::types::builders::ThreatDetectedByNameBuilder {
        crate::types::builders::ThreatDetectedByNameBuilder::default()
    }
}

/// A builder for [`ThreatDetectedByName`](crate::types::ThreatDetectedByName).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ThreatDetectedByNameBuilder {
    pub(crate) item_count: std::option::Option<i32>,
    pub(crate) unique_threat_name_count: std::option::Option<i32>,
    pub(crate) shortened: std::option::Option<bool>,
    pub(crate) threat_names: std::option::Option<std::vec::Vec<crate::types::ScanThreatName>>,
}
impl ThreatDetectedByNameBuilder {
    /// <p>Total number of infected files identified.</p>
    pub fn item_count(mut self, input: i32) -> Self {
        self.item_count = Some(input);
        self
    }
    /// <p>Total number of infected files identified.</p>
    pub fn set_item_count(mut self, input: std::option::Option<i32>) -> Self {
        self.item_count = input;
        self
    }
    /// <p>Total number of unique threats by name identified, as part of the malware scan.</p>
    pub fn unique_threat_name_count(mut self, input: i32) -> Self {
        self.unique_threat_name_count = Some(input);
        self
    }
    /// <p>Total number of unique threats by name identified, as part of the malware scan.</p>
    pub fn set_unique_threat_name_count(mut self, input: std::option::Option<i32>) -> Self {
        self.unique_threat_name_count = input;
        self
    }
    /// <p>Flag to determine if the finding contains every single infected file-path and/or every threat.</p>
    pub fn shortened(mut self, input: bool) -> Self {
        self.shortened = Some(input);
        self
    }
    /// <p>Flag to determine if the finding contains every single infected file-path and/or every threat.</p>
    pub fn set_shortened(mut self, input: std::option::Option<bool>) -> Self {
        self.shortened = input;
        self
    }
    /// Appends an item to `threat_names`.
    ///
    /// To override the contents of this collection use [`set_threat_names`](Self::set_threat_names).
    ///
    /// <p>List of identified threats with details, organized by threat name.</p>
    pub fn threat_names(mut self, input: crate::types::ScanThreatName) -> Self {
        let mut v = self.threat_names.unwrap_or_default();
        v.push(input);
        self.threat_names = Some(v);
        self
    }
    /// <p>List of identified threats with details, organized by threat name.</p>
    pub fn set_threat_names(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ScanThreatName>>,
    ) -> Self {
        self.threat_names = input;
        self
    }
    /// Consumes the builder and constructs a [`ThreatDetectedByName`](crate::types::ThreatDetectedByName).
    pub fn build(self) -> crate::types::ThreatDetectedByName {
        crate::types::ThreatDetectedByName {
            item_count: self.item_count.unwrap_or_default(),
            unique_threat_name_count: self.unique_threat_name_count.unwrap_or_default(),
            shortened: self.shortened.unwrap_or_default(),
            threat_names: self.threat_names,
        }
    }
}
