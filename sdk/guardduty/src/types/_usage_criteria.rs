// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the criteria used to query usage statistics.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UsageCriteria {
    /// <p>The account IDs to aggregate usage statistics from.</p>
    #[doc(hidden)]
    pub account_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The data sources to aggregate usage statistics from.</p>
    #[doc(hidden)]
    pub data_sources: std::option::Option<std::vec::Vec<crate::types::DataSource>>,
    /// <p>The resources to aggregate usage statistics from. Only accepts exact resource names.</p>
    #[doc(hidden)]
    pub resources: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UsageCriteria {
    /// <p>The account IDs to aggregate usage statistics from.</p>
    pub fn account_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.account_ids.as_deref()
    }
    /// <p>The data sources to aggregate usage statistics from.</p>
    pub fn data_sources(&self) -> std::option::Option<&[crate::types::DataSource]> {
        self.data_sources.as_deref()
    }
    /// <p>The resources to aggregate usage statistics from. Only accepts exact resource names.</p>
    pub fn resources(&self) -> std::option::Option<&[std::string::String]> {
        self.resources.as_deref()
    }
}
impl UsageCriteria {
    /// Creates a new builder-style object to manufacture [`UsageCriteria`](crate::types::UsageCriteria).
    pub fn builder() -> crate::types::builders::UsageCriteriaBuilder {
        crate::types::builders::UsageCriteriaBuilder::default()
    }
}

/// A builder for [`UsageCriteria`](crate::types::UsageCriteria).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UsageCriteriaBuilder {
    pub(crate) account_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) data_sources: std::option::Option<std::vec::Vec<crate::types::DataSource>>,
    pub(crate) resources: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UsageCriteriaBuilder {
    /// Appends an item to `account_ids`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>The account IDs to aggregate usage statistics from.</p>
    pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.account_ids.unwrap_or_default();
        v.push(input.into());
        self.account_ids = Some(v);
        self
    }
    /// <p>The account IDs to aggregate usage statistics from.</p>
    pub fn set_account_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.account_ids = input;
        self
    }
    /// Appends an item to `data_sources`.
    ///
    /// To override the contents of this collection use [`set_data_sources`](Self::set_data_sources).
    ///
    /// <p>The data sources to aggregate usage statistics from.</p>
    pub fn data_sources(mut self, input: crate::types::DataSource) -> Self {
        let mut v = self.data_sources.unwrap_or_default();
        v.push(input);
        self.data_sources = Some(v);
        self
    }
    /// <p>The data sources to aggregate usage statistics from.</p>
    pub fn set_data_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSource>>,
    ) -> Self {
        self.data_sources = input;
        self
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>The resources to aggregate usage statistics from. Only accepts exact resource names.</p>
    pub fn resources(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input.into());
        self.resources = Some(v);
        self
    }
    /// <p>The resources to aggregate usage statistics from. Only accepts exact resource names.</p>
    pub fn set_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resources = input;
        self
    }
    /// Consumes the builder and constructs a [`UsageCriteria`](crate::types::UsageCriteria).
    pub fn build(self) -> crate::types::UsageCriteria {
        crate::types::UsageCriteria {
            account_ids: self.account_ids,
            data_sources: self.data_sources,
            resources: self.resources,
        }
    }
}
