// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a condition that when matched will be added to the response of the operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoverageFilterCondition {
    /// <p>Represents an equal condition that is applied to a single field while retrieving the coverage details.</p>
    pub equals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Represents a not equal condition that is applied to a single field while retrieving the coverage details.</p>
    pub not_equals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CoverageFilterCondition {
    /// <p>Represents an equal condition that is applied to a single field while retrieving the coverage details.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.equals.is_none()`.
    pub fn equals(&self) -> &[::std::string::String] {
        self.equals.as_deref().unwrap_or_default()
    }
    /// <p>Represents a not equal condition that is applied to a single field while retrieving the coverage details.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.not_equals.is_none()`.
    pub fn not_equals(&self) -> &[::std::string::String] {
        self.not_equals.as_deref().unwrap_or_default()
    }
}
impl CoverageFilterCondition {
    /// Creates a new builder-style object to manufacture [`CoverageFilterCondition`](crate::types::CoverageFilterCondition).
    pub fn builder() -> crate::types::builders::CoverageFilterConditionBuilder {
        crate::types::builders::CoverageFilterConditionBuilder::default()
    }
}

/// A builder for [`CoverageFilterCondition`](crate::types::CoverageFilterCondition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoverageFilterConditionBuilder {
    pub(crate) equals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) not_equals: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CoverageFilterConditionBuilder {
    /// Appends an item to `equals`.
    ///
    /// To override the contents of this collection use [`set_equals`](Self::set_equals).
    ///
    /// <p>Represents an equal condition that is applied to a single field while retrieving the coverage details.</p>
    pub fn equals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.equals.unwrap_or_default();
        v.push(input.into());
        self.equals = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents an equal condition that is applied to a single field while retrieving the coverage details.</p>
    pub fn set_equals(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.equals = input;
        self
    }
    /// <p>Represents an equal condition that is applied to a single field while retrieving the coverage details.</p>
    pub fn get_equals(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.equals
    }
    /// Appends an item to `not_equals`.
    ///
    /// To override the contents of this collection use [`set_not_equals`](Self::set_not_equals).
    ///
    /// <p>Represents a not equal condition that is applied to a single field while retrieving the coverage details.</p>
    pub fn not_equals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.not_equals.unwrap_or_default();
        v.push(input.into());
        self.not_equals = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents a not equal condition that is applied to a single field while retrieving the coverage details.</p>
    pub fn set_not_equals(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.not_equals = input;
        self
    }
    /// <p>Represents a not equal condition that is applied to a single field while retrieving the coverage details.</p>
    pub fn get_not_equals(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.not_equals
    }
    /// Consumes the builder and constructs a [`CoverageFilterCondition`](crate::types::CoverageFilterCondition).
    pub fn build(self) -> crate::types::CoverageFilterCondition {
        crate::types::CoverageFilterCondition {
            equals: self.equals,
            not_equals: self.not_equals,
        }
    }
}
