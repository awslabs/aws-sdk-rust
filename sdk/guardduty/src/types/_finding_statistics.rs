// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about finding statistics.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FindingStatistics {
    /// <p>Represents a map of severity to count statistics for a set of findings.</p>
    #[doc(hidden)]
    pub count_by_severity: std::option::Option<std::collections::HashMap<std::string::String, i32>>,
}
impl FindingStatistics {
    /// <p>Represents a map of severity to count statistics for a set of findings.</p>
    pub fn count_by_severity(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, i32>> {
        self.count_by_severity.as_ref()
    }
}
impl FindingStatistics {
    /// Creates a new builder-style object to manufacture [`FindingStatistics`](crate::types::FindingStatistics).
    pub fn builder() -> crate::types::builders::FindingStatisticsBuilder {
        crate::types::builders::FindingStatisticsBuilder::default()
    }
}

/// A builder for [`FindingStatistics`](crate::types::FindingStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FindingStatisticsBuilder {
    pub(crate) count_by_severity:
        std::option::Option<std::collections::HashMap<std::string::String, i32>>,
}
impl FindingStatisticsBuilder {
    /// Adds a key-value pair to `count_by_severity`.
    ///
    /// To override the contents of this collection use [`set_count_by_severity`](Self::set_count_by_severity).
    ///
    /// <p>Represents a map of severity to count statistics for a set of findings.</p>
    pub fn count_by_severity(mut self, k: impl Into<std::string::String>, v: i32) -> Self {
        let mut hash_map = self.count_by_severity.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.count_by_severity = Some(hash_map);
        self
    }
    /// <p>Represents a map of severity to count statistics for a set of findings.</p>
    pub fn set_count_by_severity(
        mut self,
        input: std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    ) -> Self {
        self.count_by_severity = input;
        self
    }
    /// Consumes the builder and constructs a [`FindingStatistics`](crate::types::FindingStatistics).
    pub fn build(self) -> crate::types::FindingStatistics {
        crate::types::FindingStatistics {
            count_by_severity: self.count_by_severity,
        }
    }
}
