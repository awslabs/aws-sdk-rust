// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the DNS_REQUEST action described in this finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DnsRequestAction {
    /// <p>The domain information for the DNS query.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The network connection protocol observed in the activity that prompted GuardDuty to generate the finding.</p>
    pub protocol: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the targeted port is blocked.</p>
    pub blocked: ::std::option::Option<bool>,
    /// <p>The second and top level domain involved in the activity that potentially prompted GuardDuty to generate this finding. For a list of top-level and second-level domains, see <a href="https://publicsuffix.org/">public suffix list</a>.</p>
    pub domain_with_suffix: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID that owns the VPC through which the DNS request was made.</p>
    pub vpc_owner_account_id: ::std::option::Option<::std::string::String>,
}
impl DnsRequestAction {
    /// <p>The domain information for the DNS query.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The network connection protocol observed in the activity that prompted GuardDuty to generate the finding.</p>
    pub fn protocol(&self) -> ::std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>Indicates whether the targeted port is blocked.</p>
    pub fn blocked(&self) -> ::std::option::Option<bool> {
        self.blocked
    }
    /// <p>The second and top level domain involved in the activity that potentially prompted GuardDuty to generate this finding. For a list of top-level and second-level domains, see <a href="https://publicsuffix.org/">public suffix list</a>.</p>
    pub fn domain_with_suffix(&self) -> ::std::option::Option<&str> {
        self.domain_with_suffix.as_deref()
    }
    /// <p>The Amazon Web Services account ID that owns the VPC through which the DNS request was made.</p>
    pub fn vpc_owner_account_id(&self) -> ::std::option::Option<&str> {
        self.vpc_owner_account_id.as_deref()
    }
}
impl DnsRequestAction {
    /// Creates a new builder-style object to manufacture [`DnsRequestAction`](crate::types::DnsRequestAction).
    pub fn builder() -> crate::types::builders::DnsRequestActionBuilder {
        crate::types::builders::DnsRequestActionBuilder::default()
    }
}

/// A builder for [`DnsRequestAction`](crate::types::DnsRequestAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DnsRequestActionBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) protocol: ::std::option::Option<::std::string::String>,
    pub(crate) blocked: ::std::option::Option<bool>,
    pub(crate) domain_with_suffix: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_owner_account_id: ::std::option::Option<::std::string::String>,
}
impl DnsRequestActionBuilder {
    /// <p>The domain information for the DNS query.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain information for the DNS query.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The domain information for the DNS query.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The network connection protocol observed in the activity that prompted GuardDuty to generate the finding.</p>
    pub fn protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network connection protocol observed in the activity that prompted GuardDuty to generate the finding.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The network connection protocol observed in the activity that prompted GuardDuty to generate the finding.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol
    }
    /// <p>Indicates whether the targeted port is blocked.</p>
    pub fn blocked(mut self, input: bool) -> Self {
        self.blocked = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the targeted port is blocked.</p>
    pub fn set_blocked(mut self, input: ::std::option::Option<bool>) -> Self {
        self.blocked = input;
        self
    }
    /// <p>Indicates whether the targeted port is blocked.</p>
    pub fn get_blocked(&self) -> &::std::option::Option<bool> {
        &self.blocked
    }
    /// <p>The second and top level domain involved in the activity that potentially prompted GuardDuty to generate this finding. For a list of top-level and second-level domains, see <a href="https://publicsuffix.org/">public suffix list</a>.</p>
    pub fn domain_with_suffix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_with_suffix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The second and top level domain involved in the activity that potentially prompted GuardDuty to generate this finding. For a list of top-level and second-level domains, see <a href="https://publicsuffix.org/">public suffix list</a>.</p>
    pub fn set_domain_with_suffix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_with_suffix = input;
        self
    }
    /// <p>The second and top level domain involved in the activity that potentially prompted GuardDuty to generate this finding. For a list of top-level and second-level domains, see <a href="https://publicsuffix.org/">public suffix list</a>.</p>
    pub fn get_domain_with_suffix(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_with_suffix
    }
    /// <p>The Amazon Web Services account ID that owns the VPC through which the DNS request was made.</p>
    pub fn vpc_owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the VPC through which the DNS request was made.</p>
    pub fn set_vpc_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_owner_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the VPC through which the DNS request was made.</p>
    pub fn get_vpc_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_owner_account_id
    }
    /// Consumes the builder and constructs a [`DnsRequestAction`](crate::types::DnsRequestAction).
    pub fn build(self) -> crate::types::DnsRequestAction {
        crate::types::DnsRequestAction {
            domain: self.domain,
            protocol: self.protocol,
            blocked: self.blocked,
            domain_with_suffix: self.domain_with_suffix,
            vpc_owner_account_id: self.vpc_owner_account_id,
        }
    }
}
