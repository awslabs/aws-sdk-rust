// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a GuardDuty feature.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetectorFeatureConfigurationResult {
    /// <p>Indicates the name of the feature that can be enabled for the detector.</p>
    pub name: ::std::option::Option<crate::types::DetectorFeatureResult>,
    /// <p>Indicates the status of the feature that is enabled for the detector.</p>
    pub status: ::std::option::Option<crate::types::FeatureStatus>,
    /// <p>The timestamp at which the feature object was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Additional configuration for a resource.</p>
    pub additional_configuration: ::std::option::Option<::std::vec::Vec<crate::types::DetectorAdditionalConfigurationResult>>,
}
impl DetectorFeatureConfigurationResult {
    /// <p>Indicates the name of the feature that can be enabled for the detector.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::DetectorFeatureResult> {
        self.name.as_ref()
    }
    /// <p>Indicates the status of the feature that is enabled for the detector.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FeatureStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp at which the feature object was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>Additional configuration for a resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_configuration.is_none()`.
    pub fn additional_configuration(&self) -> &[crate::types::DetectorAdditionalConfigurationResult] {
        self.additional_configuration.as_deref().unwrap_or_default()
    }
}
impl DetectorFeatureConfigurationResult {
    /// Creates a new builder-style object to manufacture [`DetectorFeatureConfigurationResult`](crate::types::DetectorFeatureConfigurationResult).
    pub fn builder() -> crate::types::builders::DetectorFeatureConfigurationResultBuilder {
        crate::types::builders::DetectorFeatureConfigurationResultBuilder::default()
    }
}

/// A builder for [`DetectorFeatureConfigurationResult`](crate::types::DetectorFeatureConfigurationResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetectorFeatureConfigurationResultBuilder {
    pub(crate) name: ::std::option::Option<crate::types::DetectorFeatureResult>,
    pub(crate) status: ::std::option::Option<crate::types::FeatureStatus>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) additional_configuration: ::std::option::Option<::std::vec::Vec<crate::types::DetectorAdditionalConfigurationResult>>,
}
impl DetectorFeatureConfigurationResultBuilder {
    /// <p>Indicates the name of the feature that can be enabled for the detector.</p>
    pub fn name(mut self, input: crate::types::DetectorFeatureResult) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the name of the feature that can be enabled for the detector.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::DetectorFeatureResult>) -> Self {
        self.name = input;
        self
    }
    /// <p>Indicates the name of the feature that can be enabled for the detector.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::DetectorFeatureResult> {
        &self.name
    }
    /// <p>Indicates the status of the feature that is enabled for the detector.</p>
    pub fn status(mut self, input: crate::types::FeatureStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of the feature that is enabled for the detector.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FeatureStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates the status of the feature that is enabled for the detector.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FeatureStatus> {
        &self.status
    }
    /// <p>The timestamp at which the feature object was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the feature object was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp at which the feature object was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Appends an item to `additional_configuration`.
    ///
    /// To override the contents of this collection use [`set_additional_configuration`](Self::set_additional_configuration).
    ///
    /// <p>Additional configuration for a resource.</p>
    pub fn additional_configuration(mut self, input: crate::types::DetectorAdditionalConfigurationResult) -> Self {
        let mut v = self.additional_configuration.unwrap_or_default();
        v.push(input);
        self.additional_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional configuration for a resource.</p>
    pub fn set_additional_configuration(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DetectorAdditionalConfigurationResult>>,
    ) -> Self {
        self.additional_configuration = input;
        self
    }
    /// <p>Additional configuration for a resource.</p>
    pub fn get_additional_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DetectorAdditionalConfigurationResult>> {
        &self.additional_configuration
    }
    /// Consumes the builder and constructs a [`DetectorFeatureConfigurationResult`](crate::types::DetectorFeatureConfigurationResult).
    pub fn build(self) -> crate::types::DetectorFeatureConfigurationResult {
        crate::types::DetectorFeatureConfigurationResult {
            name: self.name,
            status: self.status,
            updated_at: self.updated_at,
            additional_configuration: self.additional_configuration,
        }
    }
}
