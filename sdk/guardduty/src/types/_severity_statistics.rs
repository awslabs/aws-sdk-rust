// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about severity level for each finding type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SeverityStatistics {
    /// <p>The timestamp at which a finding type for a specific severity was last generated.</p>
    pub last_generated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The severity level associated with each finding type.</p>
    pub severity: ::std::option::Option<f64>,
    /// <p>The total number of findings associated with this severity.</p>
    pub total_findings: ::std::option::Option<i32>,
}
impl SeverityStatistics {
    /// <p>The timestamp at which a finding type for a specific severity was last generated.</p>
    pub fn last_generated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_generated_at.as_ref()
    }
    /// <p>The severity level associated with each finding type.</p>
    pub fn severity(&self) -> ::std::option::Option<f64> {
        self.severity
    }
    /// <p>The total number of findings associated with this severity.</p>
    pub fn total_findings(&self) -> ::std::option::Option<i32> {
        self.total_findings
    }
}
impl SeverityStatistics {
    /// Creates a new builder-style object to manufacture [`SeverityStatistics`](crate::types::SeverityStatistics).
    pub fn builder() -> crate::types::builders::SeverityStatisticsBuilder {
        crate::types::builders::SeverityStatisticsBuilder::default()
    }
}

/// A builder for [`SeverityStatistics`](crate::types::SeverityStatistics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SeverityStatisticsBuilder {
    pub(crate) last_generated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) severity: ::std::option::Option<f64>,
    pub(crate) total_findings: ::std::option::Option<i32>,
}
impl SeverityStatisticsBuilder {
    /// <p>The timestamp at which a finding type for a specific severity was last generated.</p>
    pub fn last_generated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_generated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which a finding type for a specific severity was last generated.</p>
    pub fn set_last_generated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_generated_at = input;
        self
    }
    /// <p>The timestamp at which a finding type for a specific severity was last generated.</p>
    pub fn get_last_generated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_generated_at
    }
    /// <p>The severity level associated with each finding type.</p>
    pub fn severity(mut self, input: f64) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The severity level associated with each finding type.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The severity level associated with each finding type.</p>
    pub fn get_severity(&self) -> &::std::option::Option<f64> {
        &self.severity
    }
    /// <p>The total number of findings associated with this severity.</p>
    pub fn total_findings(mut self, input: i32) -> Self {
        self.total_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of findings associated with this severity.</p>
    pub fn set_total_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_findings = input;
        self
    }
    /// <p>The total number of findings associated with this severity.</p>
    pub fn get_total_findings(&self) -> &::std::option::Option<i32> {
        &self.total_findings
    }
    /// Consumes the builder and constructs a [`SeverityStatistics`](crate::types::SeverityStatistics).
    pub fn build(self) -> crate::types::SeverityStatistics {
        crate::types::SeverityStatistics {
            last_generated_at: self.last_generated_at,
            severity: self.severity,
            total_findings: self.total_findings,
        }
    }
}
