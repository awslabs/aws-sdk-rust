// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on the status of CloudTrail as a data source for the detector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudTrailConfigurationResult {
    /// <p>Describes whether CloudTrail is enabled as a data source for the detector.</p>
    pub status: ::std::option::Option<crate::types::DataSourceStatus>,
}
impl CloudTrailConfigurationResult {
    /// <p>Describes whether CloudTrail is enabled as a data source for the detector.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DataSourceStatus> {
        self.status.as_ref()
    }
}
impl CloudTrailConfigurationResult {
    /// Creates a new builder-style object to manufacture [`CloudTrailConfigurationResult`](crate::types::CloudTrailConfigurationResult).
    pub fn builder() -> crate::types::builders::CloudTrailConfigurationResultBuilder {
        crate::types::builders::CloudTrailConfigurationResultBuilder::default()
    }
}

/// A builder for [`CloudTrailConfigurationResult`](crate::types::CloudTrailConfigurationResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudTrailConfigurationResultBuilder {
    pub(crate) status: ::std::option::Option<crate::types::DataSourceStatus>,
}
impl CloudTrailConfigurationResultBuilder {
    /// <p>Describes whether CloudTrail is enabled as a data source for the detector.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::DataSourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether CloudTrail is enabled as a data source for the detector.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataSourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Describes whether CloudTrail is enabled as a data source for the detector.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataSourceStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`CloudTrailConfigurationResult`](crate::types::CloudTrailConfigurationResult).
    pub fn build(self) -> crate::types::CloudTrailConfigurationResult {
        crate::types::CloudTrailConfigurationResult { status: self.status }
    }
}
