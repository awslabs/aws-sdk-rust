// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the remote IP address of the connection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RemoteIpDetails {
    /// <p>The city information of the remote IP address.</p>
    pub city: ::std::option::Option<crate::types::City>,
    /// <p>The country code of the remote IP address.</p>
    pub country: ::std::option::Option<crate::types::Country>,
    /// <p>The location information of the remote IP address.</p>
    pub geo_location: ::std::option::Option<crate::types::GeoLocation>,
    /// <p>The IPv4 remote address of the connection.</p>
    pub ip_address_v4: ::std::option::Option<::std::string::String>,
    /// <p>The IPv6 remote address of the connection.</p>
    pub ip_address_v6: ::std::option::Option<::std::string::String>,
    /// <p>The ISP organization information of the remote IP address.</p>
    pub organization: ::std::option::Option<crate::types::Organization>,
}
impl RemoteIpDetails {
    /// <p>The city information of the remote IP address.</p>
    pub fn city(&self) -> ::std::option::Option<&crate::types::City> {
        self.city.as_ref()
    }
    /// <p>The country code of the remote IP address.</p>
    pub fn country(&self) -> ::std::option::Option<&crate::types::Country> {
        self.country.as_ref()
    }
    /// <p>The location information of the remote IP address.</p>
    pub fn geo_location(&self) -> ::std::option::Option<&crate::types::GeoLocation> {
        self.geo_location.as_ref()
    }
    /// <p>The IPv4 remote address of the connection.</p>
    pub fn ip_address_v4(&self) -> ::std::option::Option<&str> {
        self.ip_address_v4.as_deref()
    }
    /// <p>The IPv6 remote address of the connection.</p>
    pub fn ip_address_v6(&self) -> ::std::option::Option<&str> {
        self.ip_address_v6.as_deref()
    }
    /// <p>The ISP organization information of the remote IP address.</p>
    pub fn organization(&self) -> ::std::option::Option<&crate::types::Organization> {
        self.organization.as_ref()
    }
}
impl ::std::fmt::Debug for RemoteIpDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RemoteIpDetails");
        formatter.field("city", &self.city);
        formatter.field("country", &self.country);
        formatter.field("geo_location", &self.geo_location);
        formatter.field("ip_address_v4", &"*** Sensitive Data Redacted ***");
        formatter.field("ip_address_v6", &"*** Sensitive Data Redacted ***");
        formatter.field("organization", &self.organization);
        formatter.finish()
    }
}
impl RemoteIpDetails {
    /// Creates a new builder-style object to manufacture [`RemoteIpDetails`](crate::types::RemoteIpDetails).
    pub fn builder() -> crate::types::builders::RemoteIpDetailsBuilder {
        crate::types::builders::RemoteIpDetailsBuilder::default()
    }
}

/// A builder for [`RemoteIpDetails`](crate::types::RemoteIpDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RemoteIpDetailsBuilder {
    pub(crate) city: ::std::option::Option<crate::types::City>,
    pub(crate) country: ::std::option::Option<crate::types::Country>,
    pub(crate) geo_location: ::std::option::Option<crate::types::GeoLocation>,
    pub(crate) ip_address_v4: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address_v6: ::std::option::Option<::std::string::String>,
    pub(crate) organization: ::std::option::Option<crate::types::Organization>,
}
impl RemoteIpDetailsBuilder {
    /// <p>The city information of the remote IP address.</p>
    pub fn city(mut self, input: crate::types::City) -> Self {
        self.city = ::std::option::Option::Some(input);
        self
    }
    /// <p>The city information of the remote IP address.</p>
    pub fn set_city(mut self, input: ::std::option::Option<crate::types::City>) -> Self {
        self.city = input;
        self
    }
    /// <p>The city information of the remote IP address.</p>
    pub fn get_city(&self) -> &::std::option::Option<crate::types::City> {
        &self.city
    }
    /// <p>The country code of the remote IP address.</p>
    pub fn country(mut self, input: crate::types::Country) -> Self {
        self.country = ::std::option::Option::Some(input);
        self
    }
    /// <p>The country code of the remote IP address.</p>
    pub fn set_country(mut self, input: ::std::option::Option<crate::types::Country>) -> Self {
        self.country = input;
        self
    }
    /// <p>The country code of the remote IP address.</p>
    pub fn get_country(&self) -> &::std::option::Option<crate::types::Country> {
        &self.country
    }
    /// <p>The location information of the remote IP address.</p>
    pub fn geo_location(mut self, input: crate::types::GeoLocation) -> Self {
        self.geo_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location information of the remote IP address.</p>
    pub fn set_geo_location(mut self, input: ::std::option::Option<crate::types::GeoLocation>) -> Self {
        self.geo_location = input;
        self
    }
    /// <p>The location information of the remote IP address.</p>
    pub fn get_geo_location(&self) -> &::std::option::Option<crate::types::GeoLocation> {
        &self.geo_location
    }
    /// <p>The IPv4 remote address of the connection.</p>
    pub fn ip_address_v4(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address_v4 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 remote address of the connection.</p>
    pub fn set_ip_address_v4(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address_v4 = input;
        self
    }
    /// <p>The IPv4 remote address of the connection.</p>
    pub fn get_ip_address_v4(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address_v4
    }
    /// <p>The IPv6 remote address of the connection.</p>
    pub fn ip_address_v6(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address_v6 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv6 remote address of the connection.</p>
    pub fn set_ip_address_v6(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address_v6 = input;
        self
    }
    /// <p>The IPv6 remote address of the connection.</p>
    pub fn get_ip_address_v6(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address_v6
    }
    /// <p>The ISP organization information of the remote IP address.</p>
    pub fn organization(mut self, input: crate::types::Organization) -> Self {
        self.organization = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ISP organization information of the remote IP address.</p>
    pub fn set_organization(mut self, input: ::std::option::Option<crate::types::Organization>) -> Self {
        self.organization = input;
        self
    }
    /// <p>The ISP organization information of the remote IP address.</p>
    pub fn get_organization(&self) -> &::std::option::Option<crate::types::Organization> {
        &self.organization
    }
    /// Consumes the builder and constructs a [`RemoteIpDetails`](crate::types::RemoteIpDetails).
    pub fn build(self) -> crate::types::RemoteIpDetails {
        crate::types::RemoteIpDetails {
            city: self.city,
            country: self.country,
            geo_location: self.geo_location,
            ip_address_v4: self.ip_address_v4,
            ip_address_v6: self.ip_address_v6,
            organization: self.organization,
        }
    }
}
impl ::std::fmt::Debug for RemoteIpDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RemoteIpDetailsBuilder");
        formatter.field("city", &self.city);
        formatter.field("country", &self.country);
        formatter.field("geo_location", &self.geo_location);
        formatter.field("ip_address_v4", &"*** Sensitive Data Redacted ***");
        formatter.field("ip_address_v6", &"*** Sensitive Data Redacted ***");
        formatter.field("organization", &self.organization);
        formatter.finish()
    }
}
