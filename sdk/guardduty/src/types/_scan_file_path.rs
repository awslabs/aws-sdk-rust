// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details of infected file including name, file path and hash.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScanFilePath {
    /// <p>The file path of the infected file.</p>
    #[doc(hidden)]
    pub file_path: std::option::Option<std::string::String>,
    /// <p>EBS volume Arn details of the infected file.</p>
    #[doc(hidden)]
    pub volume_arn: std::option::Option<std::string::String>,
    /// <p>The hash value of the infected file.</p>
    #[doc(hidden)]
    pub hash: std::option::Option<std::string::String>,
    /// <p>File name of the infected file.</p>
    #[doc(hidden)]
    pub file_name: std::option::Option<std::string::String>,
}
impl ScanFilePath {
    /// <p>The file path of the infected file.</p>
    pub fn file_path(&self) -> std::option::Option<&str> {
        self.file_path.as_deref()
    }
    /// <p>EBS volume Arn details of the infected file.</p>
    pub fn volume_arn(&self) -> std::option::Option<&str> {
        self.volume_arn.as_deref()
    }
    /// <p>The hash value of the infected file.</p>
    pub fn hash(&self) -> std::option::Option<&str> {
        self.hash.as_deref()
    }
    /// <p>File name of the infected file.</p>
    pub fn file_name(&self) -> std::option::Option<&str> {
        self.file_name.as_deref()
    }
}
impl ScanFilePath {
    /// Creates a new builder-style object to manufacture [`ScanFilePath`](crate::types::ScanFilePath).
    pub fn builder() -> crate::types::builders::ScanFilePathBuilder {
        crate::types::builders::ScanFilePathBuilder::default()
    }
}

/// A builder for [`ScanFilePath`](crate::types::ScanFilePath).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScanFilePathBuilder {
    pub(crate) file_path: std::option::Option<std::string::String>,
    pub(crate) volume_arn: std::option::Option<std::string::String>,
    pub(crate) hash: std::option::Option<std::string::String>,
    pub(crate) file_name: std::option::Option<std::string::String>,
}
impl ScanFilePathBuilder {
    /// <p>The file path of the infected file.</p>
    pub fn file_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_path = Some(input.into());
        self
    }
    /// <p>The file path of the infected file.</p>
    pub fn set_file_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>EBS volume Arn details of the infected file.</p>
    pub fn volume_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_arn = Some(input.into());
        self
    }
    /// <p>EBS volume Arn details of the infected file.</p>
    pub fn set_volume_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_arn = input;
        self
    }
    /// <p>The hash value of the infected file.</p>
    pub fn hash(mut self, input: impl Into<std::string::String>) -> Self {
        self.hash = Some(input.into());
        self
    }
    /// <p>The hash value of the infected file.</p>
    pub fn set_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hash = input;
        self
    }
    /// <p>File name of the infected file.</p>
    pub fn file_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_name = Some(input.into());
        self
    }
    /// <p>File name of the infected file.</p>
    pub fn set_file_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ScanFilePath`](crate::types::ScanFilePath).
    pub fn build(self) -> crate::types::ScanFilePath {
        crate::types::ScanFilePath {
            file_path: self.file_path,
            volume_arn: self.volume_arn,
            hash: self.hash,
            file_name: self.file_name,
        }
    }
}
