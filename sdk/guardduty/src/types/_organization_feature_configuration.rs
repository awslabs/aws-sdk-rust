// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of features which will be configured for the organization.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrganizationFeatureConfiguration {
    /// <p>The name of the feature that will be configured for the organization.</p>
    pub name: ::std::option::Option<crate::types::OrgFeature>,
    /// <p>Describes the status of the feature that is configured for the member accounts within the organization. One of the following values is the status for the entire organization:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have the feature enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have the feature enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that the feature will not be automatically enabled for any account in the organization. The administrator must manage the feature for each account individually.</p> </li>
    /// </ul>
    pub auto_enable: ::std::option::Option<crate::types::OrgFeatureStatus>,
    /// <p>The additional information that will be configured for the organization.</p>
    pub additional_configuration: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationAdditionalConfiguration>>,
}
impl OrganizationFeatureConfiguration {
    /// <p>The name of the feature that will be configured for the organization.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::OrgFeature> {
        self.name.as_ref()
    }
    /// <p>Describes the status of the feature that is configured for the member accounts within the organization. One of the following values is the status for the entire organization:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have the feature enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have the feature enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that the feature will not be automatically enabled for any account in the organization. The administrator must manage the feature for each account individually.</p> </li>
    /// </ul>
    pub fn auto_enable(&self) -> ::std::option::Option<&crate::types::OrgFeatureStatus> {
        self.auto_enable.as_ref()
    }
    /// <p>The additional information that will be configured for the organization.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.additional_configuration.is_none()`.
    pub fn additional_configuration(&self) -> &[crate::types::OrganizationAdditionalConfiguration] {
        self.additional_configuration.as_deref().unwrap_or_default()
    }
}
impl OrganizationFeatureConfiguration {
    /// Creates a new builder-style object to manufacture [`OrganizationFeatureConfiguration`](crate::types::OrganizationFeatureConfiguration).
    pub fn builder() -> crate::types::builders::OrganizationFeatureConfigurationBuilder {
        crate::types::builders::OrganizationFeatureConfigurationBuilder::default()
    }
}

/// A builder for [`OrganizationFeatureConfiguration`](crate::types::OrganizationFeatureConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrganizationFeatureConfigurationBuilder {
    pub(crate) name: ::std::option::Option<crate::types::OrgFeature>,
    pub(crate) auto_enable: ::std::option::Option<crate::types::OrgFeatureStatus>,
    pub(crate) additional_configuration: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationAdditionalConfiguration>>,
}
impl OrganizationFeatureConfigurationBuilder {
    /// <p>The name of the feature that will be configured for the organization.</p>
    pub fn name(mut self, input: crate::types::OrgFeature) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the feature that will be configured for the organization.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::OrgFeature>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the feature that will be configured for the organization.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::OrgFeature> {
        &self.name
    }
    /// <p>Describes the status of the feature that is configured for the member accounts within the organization. One of the following values is the status for the entire organization:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have the feature enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have the feature enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that the feature will not be automatically enabled for any account in the organization. The administrator must manage the feature for each account individually.</p> </li>
    /// </ul>
    pub fn auto_enable(mut self, input: crate::types::OrgFeatureStatus) -> Self {
        self.auto_enable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the status of the feature that is configured for the member accounts within the organization. One of the following values is the status for the entire organization:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have the feature enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have the feature enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that the feature will not be automatically enabled for any account in the organization. The administrator must manage the feature for each account individually.</p> </li>
    /// </ul>
    pub fn set_auto_enable(mut self, input: ::std::option::Option<crate::types::OrgFeatureStatus>) -> Self {
        self.auto_enable = input;
        self
    }
    /// <p>Describes the status of the feature that is configured for the member accounts within the organization. One of the following values is the status for the entire organization:</p>
    /// <ul>
    /// <li> <p> <code>NEW</code>: Indicates that when a new account joins the organization, they will have the feature enabled automatically. </p> </li>
    /// <li> <p> <code>ALL</code>: Indicates that all accounts in the organization have the feature enabled automatically. This includes <code>NEW</code> accounts that join the organization and accounts that may have been suspended or removed from the organization in GuardDuty.</p> <p>It may take up to 24 hours to update the configuration for all the member accounts.</p> </li>
    /// <li> <p> <code>NONE</code>: Indicates that the feature will not be automatically enabled for any account in the organization. The administrator must manage the feature for each account individually.</p> </li>
    /// </ul>
    pub fn get_auto_enable(&self) -> &::std::option::Option<crate::types::OrgFeatureStatus> {
        &self.auto_enable
    }
    /// Appends an item to `additional_configuration`.
    ///
    /// To override the contents of this collection use [`set_additional_configuration`](Self::set_additional_configuration).
    ///
    /// <p>The additional information that will be configured for the organization.</p>
    pub fn additional_configuration(mut self, input: crate::types::OrganizationAdditionalConfiguration) -> Self {
        let mut v = self.additional_configuration.unwrap_or_default();
        v.push(input);
        self.additional_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>The additional information that will be configured for the organization.</p>
    pub fn set_additional_configuration(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::OrganizationAdditionalConfiguration>>,
    ) -> Self {
        self.additional_configuration = input;
        self
    }
    /// <p>The additional information that will be configured for the organization.</p>
    pub fn get_additional_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OrganizationAdditionalConfiguration>> {
        &self.additional_configuration
    }
    /// Consumes the builder and constructs a [`OrganizationFeatureConfiguration`](crate::types::OrganizationFeatureConfiguration).
    pub fn build(self) -> crate::types::OrganizationFeatureConfiguration {
        crate::types::OrganizationFeatureConfiguration {
            name: self.name,
            auto_enable: self.auto_enable,
            additional_configuration: self.additional_configuration,
        }
    }
}
