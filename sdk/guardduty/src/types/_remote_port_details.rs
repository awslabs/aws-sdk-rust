// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the remote port.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RemotePortDetails {
    /// <p>The port number of the remote connection.</p>
    #[doc(hidden)]
    pub port: i32,
    /// <p>The port name of the remote connection.</p>
    #[doc(hidden)]
    pub port_name: std::option::Option<std::string::String>,
}
impl RemotePortDetails {
    /// <p>The port number of the remote connection.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
    /// <p>The port name of the remote connection.</p>
    pub fn port_name(&self) -> std::option::Option<&str> {
        self.port_name.as_deref()
    }
}
impl RemotePortDetails {
    /// Creates a new builder-style object to manufacture [`RemotePortDetails`](crate::types::RemotePortDetails).
    pub fn builder() -> crate::types::builders::RemotePortDetailsBuilder {
        crate::types::builders::RemotePortDetailsBuilder::default()
    }
}

/// A builder for [`RemotePortDetails`](crate::types::RemotePortDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RemotePortDetailsBuilder {
    pub(crate) port: std::option::Option<i32>,
    pub(crate) port_name: std::option::Option<std::string::String>,
}
impl RemotePortDetailsBuilder {
    /// <p>The port number of the remote connection.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port number of the remote connection.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port name of the remote connection.</p>
    pub fn port_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.port_name = Some(input.into());
        self
    }
    /// <p>The port name of the remote connection.</p>
    pub fn set_port_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.port_name = input;
        self
    }
    /// Consumes the builder and constructs a [`RemotePortDetails`](crate::types::RemotePortDetails).
    pub fn build(self) -> crate::types::RemotePortDetails {
        crate::types::RemotePortDetails {
            port: self.port.unwrap_or_default(),
            port_name: self.port_name,
        }
    }
}
