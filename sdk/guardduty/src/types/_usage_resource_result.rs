// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on the sum of usage based on an Amazon Web Services resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UsageResourceResult {
    /// <p>The Amazon Web Services resource that generated usage.</p>
    #[doc(hidden)]
    pub resource: std::option::Option<std::string::String>,
    /// <p>Represents the sum total of usage for the specified resource type.</p>
    #[doc(hidden)]
    pub total: std::option::Option<crate::types::Total>,
}
impl UsageResourceResult {
    /// <p>The Amazon Web Services resource that generated usage.</p>
    pub fn resource(&self) -> std::option::Option<&str> {
        self.resource.as_deref()
    }
    /// <p>Represents the sum total of usage for the specified resource type.</p>
    pub fn total(&self) -> std::option::Option<&crate::types::Total> {
        self.total.as_ref()
    }
}
impl UsageResourceResult {
    /// Creates a new builder-style object to manufacture [`UsageResourceResult`](crate::types::UsageResourceResult).
    pub fn builder() -> crate::types::builders::UsageResourceResultBuilder {
        crate::types::builders::UsageResourceResultBuilder::default()
    }
}

/// A builder for [`UsageResourceResult`](crate::types::UsageResourceResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UsageResourceResultBuilder {
    pub(crate) resource: std::option::Option<std::string::String>,
    pub(crate) total: std::option::Option<crate::types::Total>,
}
impl UsageResourceResultBuilder {
    /// <p>The Amazon Web Services resource that generated usage.</p>
    pub fn resource(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services resource that generated usage.</p>
    pub fn set_resource(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource = input;
        self
    }
    /// <p>Represents the sum total of usage for the specified resource type.</p>
    pub fn total(mut self, input: crate::types::Total) -> Self {
        self.total = Some(input);
        self
    }
    /// <p>Represents the sum total of usage for the specified resource type.</p>
    pub fn set_total(mut self, input: std::option::Option<crate::types::Total>) -> Self {
        self.total = input;
        self
    }
    /// Consumes the builder and constructs a [`UsageResourceResult`](crate::types::UsageResourceResult).
    pub fn build(self) -> crate::types::UsageResourceResult {
        crate::types::UsageResourceResult {
            resource: self.resource,
            total: self.total,
        }
    }
}
