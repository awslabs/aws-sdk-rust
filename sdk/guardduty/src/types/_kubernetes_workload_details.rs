// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the Kubernetes workload involved in a Kubernetes finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KubernetesWorkloadDetails {
    /// <p>Kubernetes workload name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Kubernetes workload type (e.g. Pod, Deployment, etc.).</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>Kubernetes workload ID.</p>
    pub uid: ::std::option::Option<::std::string::String>,
    /// <p>Kubernetes namespace that the workload is part of.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>Whether the hostNetwork flag is enabled for the pods included in the workload.</p>
    pub host_network: ::std::option::Option<bool>,
    /// <p>Containers running as part of the Kubernetes workload.</p>
    pub containers: ::std::option::Option<::std::vec::Vec<crate::types::Container>>,
    /// <p>Volumes used by the Kubernetes workload.</p>
    pub volumes: ::std::option::Option<::std::vec::Vec<crate::types::Volume>>,
}
impl KubernetesWorkloadDetails {
    /// <p>Kubernetes workload name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Kubernetes workload type (e.g. Pod, Deployment, etc.).</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>Kubernetes workload ID.</p>
    pub fn uid(&self) -> ::std::option::Option<&str> {
        self.uid.as_deref()
    }
    /// <p>Kubernetes namespace that the workload is part of.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>Whether the hostNetwork flag is enabled for the pods included in the workload.</p>
    pub fn host_network(&self) -> ::std::option::Option<bool> {
        self.host_network
    }
    /// <p>Containers running as part of the Kubernetes workload.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.containers.is_none()`.
    pub fn containers(&self) -> &[crate::types::Container] {
        self.containers.as_deref().unwrap_or_default()
    }
    /// <p>Volumes used by the Kubernetes workload.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.volumes.is_none()`.
    pub fn volumes(&self) -> &[crate::types::Volume] {
        self.volumes.as_deref().unwrap_or_default()
    }
}
impl KubernetesWorkloadDetails {
    /// Creates a new builder-style object to manufacture [`KubernetesWorkloadDetails`](crate::types::KubernetesWorkloadDetails).
    pub fn builder() -> crate::types::builders::KubernetesWorkloadDetailsBuilder {
        crate::types::builders::KubernetesWorkloadDetailsBuilder::default()
    }
}

/// A builder for [`KubernetesWorkloadDetails`](crate::types::KubernetesWorkloadDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KubernetesWorkloadDetailsBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) uid: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) host_network: ::std::option::Option<bool>,
    pub(crate) containers: ::std::option::Option<::std::vec::Vec<crate::types::Container>>,
    pub(crate) volumes: ::std::option::Option<::std::vec::Vec<crate::types::Volume>>,
}
impl KubernetesWorkloadDetailsBuilder {
    /// <p>Kubernetes workload name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Kubernetes workload name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Kubernetes workload name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Kubernetes workload type (e.g. Pod, Deployment, etc.).</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Kubernetes workload type (e.g. Pod, Deployment, etc.).</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Kubernetes workload type (e.g. Pod, Deployment, etc.).</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>Kubernetes workload ID.</p>
    pub fn uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Kubernetes workload ID.</p>
    pub fn set_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uid = input;
        self
    }
    /// <p>Kubernetes workload ID.</p>
    pub fn get_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.uid
    }
    /// <p>Kubernetes namespace that the workload is part of.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Kubernetes namespace that the workload is part of.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>Kubernetes namespace that the workload is part of.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>Whether the hostNetwork flag is enabled for the pods included in the workload.</p>
    pub fn host_network(mut self, input: bool) -> Self {
        self.host_network = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the hostNetwork flag is enabled for the pods included in the workload.</p>
    pub fn set_host_network(mut self, input: ::std::option::Option<bool>) -> Self {
        self.host_network = input;
        self
    }
    /// <p>Whether the hostNetwork flag is enabled for the pods included in the workload.</p>
    pub fn get_host_network(&self) -> &::std::option::Option<bool> {
        &self.host_network
    }
    /// Appends an item to `containers`.
    ///
    /// To override the contents of this collection use [`set_containers`](Self::set_containers).
    ///
    /// <p>Containers running as part of the Kubernetes workload.</p>
    pub fn containers(mut self, input: crate::types::Container) -> Self {
        let mut v = self.containers.unwrap_or_default();
        v.push(input);
        self.containers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Containers running as part of the Kubernetes workload.</p>
    pub fn set_containers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Container>>) -> Self {
        self.containers = input;
        self
    }
    /// <p>Containers running as part of the Kubernetes workload.</p>
    pub fn get_containers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Container>> {
        &self.containers
    }
    /// Appends an item to `volumes`.
    ///
    /// To override the contents of this collection use [`set_volumes`](Self::set_volumes).
    ///
    /// <p>Volumes used by the Kubernetes workload.</p>
    pub fn volumes(mut self, input: crate::types::Volume) -> Self {
        let mut v = self.volumes.unwrap_or_default();
        v.push(input);
        self.volumes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Volumes used by the Kubernetes workload.</p>
    pub fn set_volumes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Volume>>) -> Self {
        self.volumes = input;
        self
    }
    /// <p>Volumes used by the Kubernetes workload.</p>
    pub fn get_volumes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Volume>> {
        &self.volumes
    }
    /// Consumes the builder and constructs a [`KubernetesWorkloadDetails`](crate::types::KubernetesWorkloadDetails).
    pub fn build(self) -> crate::types::KubernetesWorkloadDetails {
        crate::types::KubernetesWorkloadDetails {
            name: self.name,
            r#type: self.r#type,
            uid: self.uid,
            namespace: self.namespace,
            host_network: self.host_network,
            containers: self.containers,
            volumes: self.volumes,
        }
    }
}
