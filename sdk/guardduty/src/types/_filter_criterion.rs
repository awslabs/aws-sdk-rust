// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a condition that when matched will be added to the response of the operation. Irrespective of using any filter criteria, an administrator account can view the scan entries for all of its member accounts. However, each member account can view the scan entries only for their own account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FilterCriterion {
    /// <p>An enum value representing possible scan properties to match with given scan entries.</p>
    #[doc(hidden)]
    pub criterion_key: std::option::Option<crate::types::CriterionKey>,
    /// <p>Contains information about the condition.</p>
    #[doc(hidden)]
    pub filter_condition: std::option::Option<crate::types::FilterCondition>,
}
impl FilterCriterion {
    /// <p>An enum value representing possible scan properties to match with given scan entries.</p>
    pub fn criterion_key(&self) -> std::option::Option<&crate::types::CriterionKey> {
        self.criterion_key.as_ref()
    }
    /// <p>Contains information about the condition.</p>
    pub fn filter_condition(&self) -> std::option::Option<&crate::types::FilterCondition> {
        self.filter_condition.as_ref()
    }
}
impl FilterCriterion {
    /// Creates a new builder-style object to manufacture [`FilterCriterion`](crate::types::FilterCriterion).
    pub fn builder() -> crate::types::builders::FilterCriterionBuilder {
        crate::types::builders::FilterCriterionBuilder::default()
    }
}

/// A builder for [`FilterCriterion`](crate::types::FilterCriterion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterCriterionBuilder {
    pub(crate) criterion_key: std::option::Option<crate::types::CriterionKey>,
    pub(crate) filter_condition: std::option::Option<crate::types::FilterCondition>,
}
impl FilterCriterionBuilder {
    /// <p>An enum value representing possible scan properties to match with given scan entries.</p>
    pub fn criterion_key(mut self, input: crate::types::CriterionKey) -> Self {
        self.criterion_key = Some(input);
        self
    }
    /// <p>An enum value representing possible scan properties to match with given scan entries.</p>
    pub fn set_criterion_key(
        mut self,
        input: std::option::Option<crate::types::CriterionKey>,
    ) -> Self {
        self.criterion_key = input;
        self
    }
    /// <p>Contains information about the condition.</p>
    pub fn filter_condition(mut self, input: crate::types::FilterCondition) -> Self {
        self.filter_condition = Some(input);
        self
    }
    /// <p>Contains information about the condition.</p>
    pub fn set_filter_condition(
        mut self,
        input: std::option::Option<crate::types::FilterCondition>,
    ) -> Self {
        self.filter_condition = input;
        self
    }
    /// Consumes the builder and constructs a [`FilterCriterion`](crate::types::FilterCriterion).
    pub fn build(self) -> crate::types::FilterCriterion {
        crate::types::FilterCriterion {
            criterion_key: self.criterion_key,
            filter_condition: self.filter_condition,
        }
    }
}
