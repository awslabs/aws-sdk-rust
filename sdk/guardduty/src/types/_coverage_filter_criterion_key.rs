// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `CoverageFilterCriterionKey`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let coveragefiltercriterionkey = unimplemented!();
/// match coveragefiltercriterionkey {
///     CoverageFilterCriterionKey::AccountId => { /* ... */ },
///     CoverageFilterCriterionKey::AddonVersion => { /* ... */ },
///     CoverageFilterCriterionKey::AgentVersion => { /* ... */ },
///     CoverageFilterCriterionKey::ClusterArn => { /* ... */ },
///     CoverageFilterCriterionKey::ClusterName => { /* ... */ },
///     CoverageFilterCriterionKey::CoverageStatus => { /* ... */ },
///     CoverageFilterCriterionKey::EcsClusterName => { /* ... */ },
///     CoverageFilterCriterionKey::EksClusterName => { /* ... */ },
///     CoverageFilterCriterionKey::InstanceId => { /* ... */ },
///     CoverageFilterCriterionKey::ManagementType => { /* ... */ },
///     CoverageFilterCriterionKey::ResourceType => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `coveragefiltercriterionkey` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CoverageFilterCriterionKey::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CoverageFilterCriterionKey::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CoverageFilterCriterionKey::NewFeature` is defined.
/// Specifically, when `coveragefiltercriterionkey` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CoverageFilterCriterionKey::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum CoverageFilterCriterionKey {
    #[allow(missing_docs)] // documentation missing in model
    AccountId,
    #[allow(missing_docs)] // documentation missing in model
    AddonVersion,
    #[allow(missing_docs)] // documentation missing in model
    AgentVersion,
    #[allow(missing_docs)] // documentation missing in model
    ClusterArn,
    #[allow(missing_docs)] // documentation missing in model
    ClusterName,
    #[allow(missing_docs)] // documentation missing in model
    CoverageStatus,
    #[allow(missing_docs)] // documentation missing in model
    EcsClusterName,
    #[allow(missing_docs)] // documentation missing in model
    EksClusterName,
    #[allow(missing_docs)] // documentation missing in model
    InstanceId,
    #[allow(missing_docs)] // documentation missing in model
    ManagementType,
    #[allow(missing_docs)] // documentation missing in model
    ResourceType,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for CoverageFilterCriterionKey {
    fn from(s: &str) -> Self {
        match s {
            "ACCOUNT_ID" => CoverageFilterCriterionKey::AccountId,
            "ADDON_VERSION" => CoverageFilterCriterionKey::AddonVersion,
            "AGENT_VERSION" => CoverageFilterCriterionKey::AgentVersion,
            "CLUSTER_ARN" => CoverageFilterCriterionKey::ClusterArn,
            "CLUSTER_NAME" => CoverageFilterCriterionKey::ClusterName,
            "COVERAGE_STATUS" => CoverageFilterCriterionKey::CoverageStatus,
            "ECS_CLUSTER_NAME" => CoverageFilterCriterionKey::EcsClusterName,
            "EKS_CLUSTER_NAME" => CoverageFilterCriterionKey::EksClusterName,
            "INSTANCE_ID" => CoverageFilterCriterionKey::InstanceId,
            "MANAGEMENT_TYPE" => CoverageFilterCriterionKey::ManagementType,
            "RESOURCE_TYPE" => CoverageFilterCriterionKey::ResourceType,
            other => CoverageFilterCriterionKey::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for CoverageFilterCriterionKey {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(CoverageFilterCriterionKey::from(s))
    }
}
impl CoverageFilterCriterionKey {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CoverageFilterCriterionKey::AccountId => "ACCOUNT_ID",
            CoverageFilterCriterionKey::AddonVersion => "ADDON_VERSION",
            CoverageFilterCriterionKey::AgentVersion => "AGENT_VERSION",
            CoverageFilterCriterionKey::ClusterArn => "CLUSTER_ARN",
            CoverageFilterCriterionKey::ClusterName => "CLUSTER_NAME",
            CoverageFilterCriterionKey::CoverageStatus => "COVERAGE_STATUS",
            CoverageFilterCriterionKey::EcsClusterName => "ECS_CLUSTER_NAME",
            CoverageFilterCriterionKey::EksClusterName => "EKS_CLUSTER_NAME",
            CoverageFilterCriterionKey::InstanceId => "INSTANCE_ID",
            CoverageFilterCriterionKey::ManagementType => "MANAGEMENT_TYPE",
            CoverageFilterCriterionKey::ResourceType => "RESOURCE_TYPE",
            CoverageFilterCriterionKey::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCOUNT_ID",
            "ADDON_VERSION",
            "AGENT_VERSION",
            "CLUSTER_ARN",
            "CLUSTER_NAME",
            "COVERAGE_STATUS",
            "ECS_CLUSTER_NAME",
            "EKS_CLUSTER_NAME",
            "INSTANCE_ID",
            "MANAGEMENT_TYPE",
            "RESOURCE_TYPE",
        ]
    }
}
impl ::std::convert::AsRef<str> for CoverageFilterCriterionKey {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl CoverageFilterCriterionKey {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for CoverageFilterCriterionKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            CoverageFilterCriterionKey::AccountId => write!(f, "ACCOUNT_ID"),
            CoverageFilterCriterionKey::AddonVersion => write!(f, "ADDON_VERSION"),
            CoverageFilterCriterionKey::AgentVersion => write!(f, "AGENT_VERSION"),
            CoverageFilterCriterionKey::ClusterArn => write!(f, "CLUSTER_ARN"),
            CoverageFilterCriterionKey::ClusterName => write!(f, "CLUSTER_NAME"),
            CoverageFilterCriterionKey::CoverageStatus => write!(f, "COVERAGE_STATUS"),
            CoverageFilterCriterionKey::EcsClusterName => write!(f, "ECS_CLUSTER_NAME"),
            CoverageFilterCriterionKey::EksClusterName => write!(f, "EKS_CLUSTER_NAME"),
            CoverageFilterCriterionKey::InstanceId => write!(f, "INSTANCE_ID"),
            CoverageFilterCriterionKey::ManagementType => write!(f, "MANAGEMENT_TYPE"),
            CoverageFilterCriterionKey::ResourceType => write!(f, "RESOURCE_TYPE"),
            CoverageFilterCriterionKey::Unknown(value) => write!(f, "{value}"),
        }
    }
}
