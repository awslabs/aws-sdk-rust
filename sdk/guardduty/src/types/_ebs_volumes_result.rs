// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of scanning EBS volumes as a data source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EbsVolumesResult {
    /// <p>Describes whether scanning EBS volumes is enabled as a data source.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DataSourceStatus>,
    /// <p>Specifies the reason why scanning EBS volumes (Malware Protection) was not enabled as a data source.</p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
}
impl EbsVolumesResult {
    /// <p>Describes whether scanning EBS volumes is enabled as a data source.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::DataSourceStatus> {
        self.status.as_ref()
    }
    /// <p>Specifies the reason why scanning EBS volumes (Malware Protection) was not enabled as a data source.</p>
    pub fn reason(&self) -> std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl EbsVolumesResult {
    /// Creates a new builder-style object to manufacture [`EbsVolumesResult`](crate::types::EbsVolumesResult).
    pub fn builder() -> crate::types::builders::EbsVolumesResultBuilder {
        crate::types::builders::EbsVolumesResultBuilder::default()
    }
}

/// A builder for [`EbsVolumesResult`](crate::types::EbsVolumesResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EbsVolumesResultBuilder {
    pub(crate) status: std::option::Option<crate::types::DataSourceStatus>,
    pub(crate) reason: std::option::Option<std::string::String>,
}
impl EbsVolumesResultBuilder {
    /// <p>Describes whether scanning EBS volumes is enabled as a data source.</p>
    pub fn status(mut self, input: crate::types::DataSourceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Describes whether scanning EBS volumes is enabled as a data source.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::DataSourceStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies the reason why scanning EBS volumes (Malware Protection) was not enabled as a data source.</p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p>Specifies the reason why scanning EBS volumes (Malware Protection) was not enabled as a data source.</p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// Consumes the builder and constructs a [`EbsVolumesResult`](crate::types::EbsVolumesResult).
    pub fn build(self) -> crate::types::EbsVolumesResult {
        crate::types::EbsVolumesResult {
            status: self.status,
            reason: self.reason,
        }
    }
}
