// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on the S3 bucket.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3BucketDetail {
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the S3 bucket.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Describes whether the bucket is a source or destination bucket.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the bucket was created at.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The owner of the S3 bucket.</p>
    pub owner: ::std::option::Option<crate::types::Owner>,
    /// <p>All tags attached to the S3 bucket</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Describes the server side encryption method used in the S3 bucket.</p>
    pub default_server_side_encryption: ::std::option::Option<crate::types::DefaultServerSideEncryption>,
    /// <p>Describes the public access policies that apply to the S3 bucket.</p>
    pub public_access: ::std::option::Option<crate::types::PublicAccess>,
}
impl S3BucketDetail {
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the S3 bucket.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Describes whether the bucket is a source or destination bucket.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The date and time the bucket was created at.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The owner of the S3 bucket.</p>
    pub fn owner(&self) -> ::std::option::Option<&crate::types::Owner> {
        self.owner.as_ref()
    }
    /// <p>All tags attached to the S3 bucket</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Describes the server side encryption method used in the S3 bucket.</p>
    pub fn default_server_side_encryption(&self) -> ::std::option::Option<&crate::types::DefaultServerSideEncryption> {
        self.default_server_side_encryption.as_ref()
    }
    /// <p>Describes the public access policies that apply to the S3 bucket.</p>
    pub fn public_access(&self) -> ::std::option::Option<&crate::types::PublicAccess> {
        self.public_access.as_ref()
    }
}
impl S3BucketDetail {
    /// Creates a new builder-style object to manufacture [`S3BucketDetail`](crate::types::S3BucketDetail).
    pub fn builder() -> crate::types::builders::S3BucketDetailBuilder {
        crate::types::builders::S3BucketDetailBuilder::default()
    }
}

/// A builder for [`S3BucketDetail`](crate::types::S3BucketDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3BucketDetailBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) owner: ::std::option::Option<crate::types::Owner>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) default_server_side_encryption: ::std::option::Option<crate::types::DefaultServerSideEncryption>,
    pub(crate) public_access: ::std::option::Option<crate::types::PublicAccess>,
}
impl S3BucketDetailBuilder {
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the S3 bucket.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the S3 bucket.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Describes whether the bucket is a source or destination bucket.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes whether the bucket is a source or destination bucket.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Describes whether the bucket is a source or destination bucket.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The date and time the bucket was created at.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the bucket was created at.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time the bucket was created at.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The owner of the S3 bucket.</p>
    pub fn owner(mut self, input: crate::types::Owner) -> Self {
        self.owner = ::std::option::Option::Some(input);
        self
    }
    /// <p>The owner of the S3 bucket.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<crate::types::Owner>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner of the S3 bucket.</p>
    pub fn get_owner(&self) -> &::std::option::Option<crate::types::Owner> {
        &self.owner
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>All tags attached to the S3 bucket</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>All tags attached to the S3 bucket</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>All tags attached to the S3 bucket</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Describes the server side encryption method used in the S3 bucket.</p>
    pub fn default_server_side_encryption(mut self, input: crate::types::DefaultServerSideEncryption) -> Self {
        self.default_server_side_encryption = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the server side encryption method used in the S3 bucket.</p>
    pub fn set_default_server_side_encryption(mut self, input: ::std::option::Option<crate::types::DefaultServerSideEncryption>) -> Self {
        self.default_server_side_encryption = input;
        self
    }
    /// <p>Describes the server side encryption method used in the S3 bucket.</p>
    pub fn get_default_server_side_encryption(&self) -> &::std::option::Option<crate::types::DefaultServerSideEncryption> {
        &self.default_server_side_encryption
    }
    /// <p>Describes the public access policies that apply to the S3 bucket.</p>
    pub fn public_access(mut self, input: crate::types::PublicAccess) -> Self {
        self.public_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the public access policies that apply to the S3 bucket.</p>
    pub fn set_public_access(mut self, input: ::std::option::Option<crate::types::PublicAccess>) -> Self {
        self.public_access = input;
        self
    }
    /// <p>Describes the public access policies that apply to the S3 bucket.</p>
    pub fn get_public_access(&self) -> &::std::option::Option<crate::types::PublicAccess> {
        &self.public_access
    }
    /// Consumes the builder and constructs a [`S3BucketDetail`](crate::types::S3BucketDetail).
    pub fn build(self) -> crate::types::S3BucketDetail {
        crate::types::S3BucketDetail {
            arn: self.arn,
            name: self.name,
            r#type: self.r#type,
            created_at: self.created_at,
            owner: self.owner,
            tags: self.tags,
            default_server_side_encryption: self.default_server_side_encryption,
            public_access: self.public_access,
        }
    }
}
