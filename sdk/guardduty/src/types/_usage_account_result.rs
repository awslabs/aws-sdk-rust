// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on the total of usage based on account IDs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UsageAccountResult {
    /// <p>The Account ID that generated usage.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>Represents the total of usage for the Account ID.</p>
    #[doc(hidden)]
    pub total: std::option::Option<crate::types::Total>,
}
impl UsageAccountResult {
    /// <p>The Account ID that generated usage.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Represents the total of usage for the Account ID.</p>
    pub fn total(&self) -> std::option::Option<&crate::types::Total> {
        self.total.as_ref()
    }
}
impl UsageAccountResult {
    /// Creates a new builder-style object to manufacture [`UsageAccountResult`](crate::types::UsageAccountResult).
    pub fn builder() -> crate::types::builders::UsageAccountResultBuilder {
        crate::types::builders::UsageAccountResultBuilder::default()
    }
}

/// A builder for [`UsageAccountResult`](crate::types::UsageAccountResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UsageAccountResultBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) total: std::option::Option<crate::types::Total>,
}
impl UsageAccountResultBuilder {
    /// <p>The Account ID that generated usage.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The Account ID that generated usage.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Represents the total of usage for the Account ID.</p>
    pub fn total(mut self, input: crate::types::Total) -> Self {
        self.total = Some(input);
        self
    }
    /// <p>Represents the total of usage for the Account ID.</p>
    pub fn set_total(mut self, input: std::option::Option<crate::types::Total>) -> Self {
        self.total = input;
        self
    }
    /// Consumes the builder and constructs a [`UsageAccountResult`](crate::types::UsageAccountResult).
    pub fn build(self) -> crate::types::UsageAccountResult {
        crate::types::UsageAccountResult {
            account_id: self.account_id,
            total: self.total,
        }
    }
}
