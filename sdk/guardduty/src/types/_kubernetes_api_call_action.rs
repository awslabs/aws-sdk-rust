// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the Kubernetes API call action described in this finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KubernetesApiCallAction {
    /// <p>The Kubernetes API request URI.</p>
    pub request_uri: ::std::option::Option<::std::string::String>,
    /// <p>The Kubernetes API request HTTP verb.</p>
    pub verb: ::std::option::Option<::std::string::String>,
    /// <p>The IP of the Kubernetes API caller and the IPs of any proxies or load balancers between the caller and the API endpoint.</p>
    pub source_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The user agent of the caller of the Kubernetes API.</p>
    pub user_agent: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub remote_ip_details: ::std::option::Option<crate::types::RemoteIpDetails>,
    /// <p>The resulting HTTP response code of the Kubernetes API call action.</p>
    pub status_code: ::std::option::Option<i32>,
    /// <p>Parameters related to the Kubernetes API call action.</p>
    pub parameters: ::std::option::Option<::std::string::String>,
}
impl KubernetesApiCallAction {
    /// <p>The Kubernetes API request URI.</p>
    pub fn request_uri(&self) -> ::std::option::Option<&str> {
        self.request_uri.as_deref()
    }
    /// <p>The Kubernetes API request HTTP verb.</p>
    pub fn verb(&self) -> ::std::option::Option<&str> {
        self.verb.as_deref()
    }
    /// <p>The IP of the Kubernetes API caller and the IPs of any proxies or load balancers between the caller and the API endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_ips.is_none()`.
    pub fn source_ips(&self) -> &[::std::string::String] {
        self.source_ips.as_deref().unwrap_or_default()
    }
    /// <p>The user agent of the caller of the Kubernetes API.</p>
    pub fn user_agent(&self) -> ::std::option::Option<&str> {
        self.user_agent.as_deref()
    }
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub fn remote_ip_details(&self) -> ::std::option::Option<&crate::types::RemoteIpDetails> {
        self.remote_ip_details.as_ref()
    }
    /// <p>The resulting HTTP response code of the Kubernetes API call action.</p>
    pub fn status_code(&self) -> ::std::option::Option<i32> {
        self.status_code
    }
    /// <p>Parameters related to the Kubernetes API call action.</p>
    pub fn parameters(&self) -> ::std::option::Option<&str> {
        self.parameters.as_deref()
    }
}
impl KubernetesApiCallAction {
    /// Creates a new builder-style object to manufacture [`KubernetesApiCallAction`](crate::types::KubernetesApiCallAction).
    pub fn builder() -> crate::types::builders::KubernetesApiCallActionBuilder {
        crate::types::builders::KubernetesApiCallActionBuilder::default()
    }
}

/// A builder for [`KubernetesApiCallAction`](crate::types::KubernetesApiCallAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KubernetesApiCallActionBuilder {
    pub(crate) request_uri: ::std::option::Option<::std::string::String>,
    pub(crate) verb: ::std::option::Option<::std::string::String>,
    pub(crate) source_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) user_agent: ::std::option::Option<::std::string::String>,
    pub(crate) remote_ip_details: ::std::option::Option<crate::types::RemoteIpDetails>,
    pub(crate) status_code: ::std::option::Option<i32>,
    pub(crate) parameters: ::std::option::Option<::std::string::String>,
}
impl KubernetesApiCallActionBuilder {
    /// <p>The Kubernetes API request URI.</p>
    pub fn request_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Kubernetes API request URI.</p>
    pub fn set_request_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_uri = input;
        self
    }
    /// <p>The Kubernetes API request URI.</p>
    pub fn get_request_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_uri
    }
    /// <p>The Kubernetes API request HTTP verb.</p>
    pub fn verb(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verb = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Kubernetes API request HTTP verb.</p>
    pub fn set_verb(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verb = input;
        self
    }
    /// <p>The Kubernetes API request HTTP verb.</p>
    pub fn get_verb(&self) -> &::std::option::Option<::std::string::String> {
        &self.verb
    }
    /// Appends an item to `source_ips`.
    ///
    /// To override the contents of this collection use [`set_source_ips`](Self::set_source_ips).
    ///
    /// <p>The IP of the Kubernetes API caller and the IPs of any proxies or load balancers between the caller and the API endpoint.</p>
    pub fn source_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_ips.unwrap_or_default();
        v.push(input.into());
        self.source_ips = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP of the Kubernetes API caller and the IPs of any proxies or load balancers between the caller and the API endpoint.</p>
    pub fn set_source_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_ips = input;
        self
    }
    /// <p>The IP of the Kubernetes API caller and the IPs of any proxies or load balancers between the caller and the API endpoint.</p>
    pub fn get_source_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_ips
    }
    /// <p>The user agent of the caller of the Kubernetes API.</p>
    pub fn user_agent(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_agent = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user agent of the caller of the Kubernetes API.</p>
    pub fn set_user_agent(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_agent = input;
        self
    }
    /// <p>The user agent of the caller of the Kubernetes API.</p>
    pub fn get_user_agent(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_agent
    }
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub fn remote_ip_details(mut self, input: crate::types::RemoteIpDetails) -> Self {
        self.remote_ip_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub fn set_remote_ip_details(mut self, input: ::std::option::Option<crate::types::RemoteIpDetails>) -> Self {
        self.remote_ip_details = input;
        self
    }
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub fn get_remote_ip_details(&self) -> &::std::option::Option<crate::types::RemoteIpDetails> {
        &self.remote_ip_details
    }
    /// <p>The resulting HTTP response code of the Kubernetes API call action.</p>
    pub fn status_code(mut self, input: i32) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resulting HTTP response code of the Kubernetes API call action.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The resulting HTTP response code of the Kubernetes API call action.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<i32> {
        &self.status_code
    }
    /// <p>Parameters related to the Kubernetes API call action.</p>
    pub fn parameters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameters = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Parameters related to the Kubernetes API call action.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Parameters related to the Kubernetes API call action.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`KubernetesApiCallAction`](crate::types::KubernetesApiCallAction).
    pub fn build(self) -> crate::types::KubernetesApiCallAction {
        crate::types::KubernetesApiCallAction {
            request_uri: self.request_uri,
            verb: self.verb,
            source_ips: self.source_ips,
            user_agent: self.user_agent,
            remote_ip_details: self.remote_ip_details,
            status_code: self.status_code,
            parameters: self.parameters,
        }
    }
}
