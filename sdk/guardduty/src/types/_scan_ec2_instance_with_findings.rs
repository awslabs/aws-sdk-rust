// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes whether Malware Protection for EC2 instances with findings will be enabled as a data source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScanEc2InstanceWithFindings {
    /// <p>Describes the configuration for scanning EBS volumes as data source.</p>
    #[doc(hidden)]
    pub ebs_volumes: bool,
}
impl ScanEc2InstanceWithFindings {
    /// <p>Describes the configuration for scanning EBS volumes as data source.</p>
    pub fn ebs_volumes(&self) -> bool {
        self.ebs_volumes
    }
}
impl ScanEc2InstanceWithFindings {
    /// Creates a new builder-style object to manufacture [`ScanEc2InstanceWithFindings`](crate::types::ScanEc2InstanceWithFindings).
    pub fn builder() -> crate::types::builders::ScanEc2InstanceWithFindingsBuilder {
        crate::types::builders::ScanEc2InstanceWithFindingsBuilder::default()
    }
}

/// A builder for [`ScanEc2InstanceWithFindings`](crate::types::ScanEc2InstanceWithFindings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScanEc2InstanceWithFindingsBuilder {
    pub(crate) ebs_volumes: std::option::Option<bool>,
}
impl ScanEc2InstanceWithFindingsBuilder {
    /// <p>Describes the configuration for scanning EBS volumes as data source.</p>
    pub fn ebs_volumes(mut self, input: bool) -> Self {
        self.ebs_volumes = Some(input);
        self
    }
    /// <p>Describes the configuration for scanning EBS volumes as data source.</p>
    pub fn set_ebs_volumes(mut self, input: std::option::Option<bool>) -> Self {
        self.ebs_volumes = input;
        self
    }
    /// Consumes the builder and constructs a [`ScanEc2InstanceWithFindings`](crate::types::ScanEc2InstanceWithFindings).
    pub fn build(self) -> crate::types::ScanEc2InstanceWithFindings {
        crate::types::ScanEc2InstanceWithFindings {
            ebs_volumes: self.ebs_volumes.unwrap_or_default(),
        }
    }
}
