// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the condition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Condition {
    /// <p>Represents the <i>equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    #[doc(hidden)]
    pub eq: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Represents the <i>not equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    #[doc(hidden)]
    pub neq: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    #[doc(hidden)]
    pub gt: i32,
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    #[doc(hidden)]
    pub gte: i32,
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    #[doc(hidden)]
    pub lt: i32,
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    #[doc(hidden)]
    pub lte: i32,
    /// <p>Represents an <i>equal</i> <b></b> condition to be applied to a single field when querying for findings.</p>
    #[doc(hidden)]
    pub equals: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Represents a <i>not equal</i> <b></b> condition to be applied to a single field when querying for findings.</p>
    #[doc(hidden)]
    pub not_equals: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>
    #[doc(hidden)]
    pub greater_than: i64,
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[doc(hidden)]
    pub greater_than_or_equal: i64,
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>
    #[doc(hidden)]
    pub less_than: i64,
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[doc(hidden)]
    pub less_than_or_equal: i64,
}
impl Condition {
    /// <p>Represents the <i>equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn eq(&self) -> std::option::Option<&[std::string::String]> {
        self.eq.as_deref()
    }
    /// <p>Represents the <i>not equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn neq(&self) -> std::option::Option<&[std::string::String]> {
        self.neq.as_deref()
    }
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn gt(&self) -> i32 {
        self.gt
    }
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn gte(&self) -> i32 {
        self.gte
    }
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn lt(&self) -> i32 {
        self.lt
    }
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn lte(&self) -> i32 {
        self.lte
    }
    /// <p>Represents an <i>equal</i> <b></b> condition to be applied to a single field when querying for findings.</p>
    pub fn equals(&self) -> std::option::Option<&[std::string::String]> {
        self.equals.as_deref()
    }
    /// <p>Represents a <i>not equal</i> <b></b> condition to be applied to a single field when querying for findings.</p>
    pub fn not_equals(&self) -> std::option::Option<&[std::string::String]> {
        self.not_equals.as_deref()
    }
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>
    pub fn greater_than(&self) -> i64 {
        self.greater_than
    }
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>
    pub fn greater_than_or_equal(&self) -> i64 {
        self.greater_than_or_equal
    }
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>
    pub fn less_than(&self) -> i64 {
        self.less_than
    }
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>
    pub fn less_than_or_equal(&self) -> i64 {
        self.less_than_or_equal
    }
}
impl Condition {
    /// Creates a new builder-style object to manufacture [`Condition`](crate::types::Condition).
    pub fn builder() -> crate::types::builders::ConditionBuilder {
        crate::types::builders::ConditionBuilder::default()
    }
}

/// A builder for [`Condition`](crate::types::Condition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConditionBuilder {
    pub(crate) eq: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) neq: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) gt: std::option::Option<i32>,
    pub(crate) gte: std::option::Option<i32>,
    pub(crate) lt: std::option::Option<i32>,
    pub(crate) lte: std::option::Option<i32>,
    pub(crate) equals: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_equals: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) greater_than: std::option::Option<i64>,
    pub(crate) greater_than_or_equal: std::option::Option<i64>,
    pub(crate) less_than: std::option::Option<i64>,
    pub(crate) less_than_or_equal: std::option::Option<i64>,
}
impl ConditionBuilder {
    /// Appends an item to `eq`.
    ///
    /// To override the contents of this collection use [`set_eq`](Self::set_eq).
    ///
    /// <p>Represents the <i>equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn eq(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.eq.unwrap_or_default();
        v.push(input.into());
        self.eq = Some(v);
        self
    }
    /// <p>Represents the <i>equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn set_eq(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.eq = input;
        self
    }
    /// Appends an item to `neq`.
    ///
    /// To override the contents of this collection use [`set_neq`](Self::set_neq).
    ///
    /// <p>Represents the <i>not equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn neq(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.neq.unwrap_or_default();
        v.push(input.into());
        self.neq = Some(v);
        self
    }
    /// <p>Represents the <i>not equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn set_neq(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.neq = input;
        self
    }
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn gt(mut self, input: i32) -> Self {
        self.gt = Some(input);
        self
    }
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn set_gt(mut self, input: std::option::Option<i32>) -> Self {
        self.gt = input;
        self
    }
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn gte(mut self, input: i32) -> Self {
        self.gte = Some(input);
        self
    }
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn set_gte(mut self, input: std::option::Option<i32>) -> Self {
        self.gte = input;
        self
    }
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn lt(mut self, input: i32) -> Self {
        self.lt = Some(input);
        self
    }
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn set_lt(mut self, input: std::option::Option<i32>) -> Self {
        self.lt = input;
        self
    }
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn lte(mut self, input: i32) -> Self {
        self.lte = Some(input);
        self
    }
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>
    #[deprecated]
    pub fn set_lte(mut self, input: std::option::Option<i32>) -> Self {
        self.lte = input;
        self
    }
    /// Appends an item to `equals`.
    ///
    /// To override the contents of this collection use [`set_equals`](Self::set_equals).
    ///
    /// <p>Represents an <i>equal</i> <b></b> condition to be applied to a single field when querying for findings.</p>
    pub fn equals(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.equals.unwrap_or_default();
        v.push(input.into());
        self.equals = Some(v);
        self
    }
    /// <p>Represents an <i>equal</i> <b></b> condition to be applied to a single field when querying for findings.</p>
    pub fn set_equals(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.equals = input;
        self
    }
    /// Appends an item to `not_equals`.
    ///
    /// To override the contents of this collection use [`set_not_equals`](Self::set_not_equals).
    ///
    /// <p>Represents a <i>not equal</i> <b></b> condition to be applied to a single field when querying for findings.</p>
    pub fn not_equals(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_equals.unwrap_or_default();
        v.push(input.into());
        self.not_equals = Some(v);
        self
    }
    /// <p>Represents a <i>not equal</i> <b></b> condition to be applied to a single field when querying for findings.</p>
    pub fn set_not_equals(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_equals = input;
        self
    }
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>
    pub fn greater_than(mut self, input: i64) -> Self {
        self.greater_than = Some(input);
        self
    }
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for findings.</p>
    pub fn set_greater_than(mut self, input: std::option::Option<i64>) -> Self {
        self.greater_than = input;
        self
    }
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>
    pub fn greater_than_or_equal(mut self, input: i64) -> Self {
        self.greater_than_or_equal = Some(input);
        self
    }
    /// <p>Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings.</p>
    pub fn set_greater_than_or_equal(mut self, input: std::option::Option<i64>) -> Self {
        self.greater_than_or_equal = input;
        self
    }
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>
    pub fn less_than(mut self, input: i64) -> Self {
        self.less_than = Some(input);
        self
    }
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for findings.</p>
    pub fn set_less_than(mut self, input: std::option::Option<i64>) -> Self {
        self.less_than = input;
        self
    }
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>
    pub fn less_than_or_equal(mut self, input: i64) -> Self {
        self.less_than_or_equal = Some(input);
        self
    }
    /// <p>Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings.</p>
    pub fn set_less_than_or_equal(mut self, input: std::option::Option<i64>) -> Self {
        self.less_than_or_equal = input;
        self
    }
    /// Consumes the builder and constructs a [`Condition`](crate::types::Condition).
    pub fn build(self) -> crate::types::Condition {
        crate::types::Condition {
            eq: self.eq,
            neq: self.neq,
            gt: self.gt.unwrap_or_default(),
            gte: self.gte.unwrap_or_default(),
            lt: self.lt.unwrap_or_default(),
            lte: self.lte.unwrap_or_default(),
            equals: self.equals,
            not_equals: self.not_equals,
            greater_than: self.greater_than.unwrap_or_default(),
            greater_than_or_equal: self.greater_than_or_equal.unwrap_or_default(),
            less_than: self.less_than.unwrap_or_default(),
            less_than_or_equal: self.less_than_or_equal.unwrap_or_default(),
        }
    }
}
