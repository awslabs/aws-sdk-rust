// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the publishing destination, including the ID, type, and status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Destination {
    /// <p>The unique ID of the publishing destination.</p>
    pub destination_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource used for the publishing destination. Currently, only Amazon S3 buckets are supported.</p>
    pub destination_type: ::std::option::Option<crate::types::DestinationType>,
    /// <p>The status of the publishing destination.</p>
    pub status: ::std::option::Option<crate::types::PublishingStatus>,
}
impl Destination {
    /// <p>The unique ID of the publishing destination.</p>
    pub fn destination_id(&self) -> ::std::option::Option<&str> {
        self.destination_id.as_deref()
    }
    /// <p>The type of resource used for the publishing destination. Currently, only Amazon S3 buckets are supported.</p>
    pub fn destination_type(&self) -> ::std::option::Option<&crate::types::DestinationType> {
        self.destination_type.as_ref()
    }
    /// <p>The status of the publishing destination.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PublishingStatus> {
        self.status.as_ref()
    }
}
impl Destination {
    /// Creates a new builder-style object to manufacture [`Destination`](crate::types::Destination).
    pub fn builder() -> crate::types::builders::DestinationBuilder {
        crate::types::builders::DestinationBuilder::default()
    }
}

/// A builder for [`Destination`](crate::types::Destination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DestinationBuilder {
    pub(crate) destination_id: ::std::option::Option<::std::string::String>,
    pub(crate) destination_type: ::std::option::Option<crate::types::DestinationType>,
    pub(crate) status: ::std::option::Option<crate::types::PublishingStatus>,
}
impl DestinationBuilder {
    /// <p>The unique ID of the publishing destination.</p>
    /// This field is required.
    pub fn destination_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the publishing destination.</p>
    pub fn set_destination_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_id = input;
        self
    }
    /// <p>The unique ID of the publishing destination.</p>
    pub fn get_destination_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_id
    }
    /// <p>The type of resource used for the publishing destination. Currently, only Amazon S3 buckets are supported.</p>
    /// This field is required.
    pub fn destination_type(mut self, input: crate::types::DestinationType) -> Self {
        self.destination_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource used for the publishing destination. Currently, only Amazon S3 buckets are supported.</p>
    pub fn set_destination_type(mut self, input: ::std::option::Option<crate::types::DestinationType>) -> Self {
        self.destination_type = input;
        self
    }
    /// <p>The type of resource used for the publishing destination. Currently, only Amazon S3 buckets are supported.</p>
    pub fn get_destination_type(&self) -> &::std::option::Option<crate::types::DestinationType> {
        &self.destination_type
    }
    /// <p>The status of the publishing destination.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::PublishingStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the publishing destination.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PublishingStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the publishing destination.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PublishingStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`Destination`](crate::types::Destination).
    pub fn build(self) -> crate::types::Destination {
        crate::types::Destination {
            destination_id: self.destination_id,
            destination_type: self.destination_type,
            status: self.status,
        }
    }
}
