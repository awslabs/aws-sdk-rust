// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the condition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScanCondition {
    /// <p>Represents an <i>mapEqual</i> <b></b> condition to be applied to a single field when triggering for malware scan.</p>
    pub map_equals: ::std::option::Option<::std::vec::Vec<crate::types::ScanConditionPair>>,
}
impl ScanCondition {
    /// <p>Represents an <i>mapEqual</i> <b></b> condition to be applied to a single field when triggering for malware scan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.map_equals.is_none()`.
    pub fn map_equals(&self) -> &[crate::types::ScanConditionPair] {
        self.map_equals.as_deref().unwrap_or_default()
    }
}
impl ScanCondition {
    /// Creates a new builder-style object to manufacture [`ScanCondition`](crate::types::ScanCondition).
    pub fn builder() -> crate::types::builders::ScanConditionBuilder {
        crate::types::builders::ScanConditionBuilder::default()
    }
}

/// A builder for [`ScanCondition`](crate::types::ScanCondition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScanConditionBuilder {
    pub(crate) map_equals: ::std::option::Option<::std::vec::Vec<crate::types::ScanConditionPair>>,
}
impl ScanConditionBuilder {
    /// Appends an item to `map_equals`.
    ///
    /// To override the contents of this collection use [`set_map_equals`](Self::set_map_equals).
    ///
    /// <p>Represents an <i>mapEqual</i> <b></b> condition to be applied to a single field when triggering for malware scan.</p>
    pub fn map_equals(mut self, input: crate::types::ScanConditionPair) -> Self {
        let mut v = self.map_equals.unwrap_or_default();
        v.push(input);
        self.map_equals = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents an <i>mapEqual</i> <b></b> condition to be applied to a single field when triggering for malware scan.</p>
    pub fn set_map_equals(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScanConditionPair>>) -> Self {
        self.map_equals = input;
        self
    }
    /// <p>Represents an <i>mapEqual</i> <b></b> condition to be applied to a single field when triggering for malware scan.</p>
    pub fn get_map_equals(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScanConditionPair>> {
        &self.map_equals
    }
    /// Consumes the builder and constructs a [`ScanCondition`](crate::types::ScanCondition).
    pub fn build(self) -> crate::types::ScanCondition {
        crate::types::ScanCondition { map_equals: self.map_equals }
    }
}
