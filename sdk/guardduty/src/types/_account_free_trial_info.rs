// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details of the GuardDuty member account that uses a free trial service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountFreeTrialInfo {
    /// <p>The account identifier of the GuardDuty member account.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>Describes the data source enabled for the GuardDuty member account.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub data_sources: ::std::option::Option<crate::types::DataSourcesFreeTrial>,
    /// <p>A list of features enabled for the GuardDuty account.</p>
    pub features: ::std::option::Option<::std::vec::Vec<crate::types::FreeTrialFeatureConfigurationResult>>,
}
impl AccountFreeTrialInfo {
    /// <p>The account identifier of the GuardDuty member account.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Describes the data source enabled for the GuardDuty member account.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn data_sources(&self) -> ::std::option::Option<&crate::types::DataSourcesFreeTrial> {
        self.data_sources.as_ref()
    }
    /// <p>A list of features enabled for the GuardDuty account.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.features.is_none()`.
    pub fn features(&self) -> &[crate::types::FreeTrialFeatureConfigurationResult] {
        self.features.as_deref().unwrap_or_default()
    }
}
impl AccountFreeTrialInfo {
    /// Creates a new builder-style object to manufacture [`AccountFreeTrialInfo`](crate::types::AccountFreeTrialInfo).
    pub fn builder() -> crate::types::builders::AccountFreeTrialInfoBuilder {
        crate::types::builders::AccountFreeTrialInfoBuilder::default()
    }
}

/// A builder for [`AccountFreeTrialInfo`](crate::types::AccountFreeTrialInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccountFreeTrialInfoBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_sources: ::std::option::Option<crate::types::DataSourcesFreeTrial>,
    pub(crate) features: ::std::option::Option<::std::vec::Vec<crate::types::FreeTrialFeatureConfigurationResult>>,
}
impl AccountFreeTrialInfoBuilder {
    /// <p>The account identifier of the GuardDuty member account.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account identifier of the GuardDuty member account.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account identifier of the GuardDuty member account.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>Describes the data source enabled for the GuardDuty member account.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn data_sources(mut self, input: crate::types::DataSourcesFreeTrial) -> Self {
        self.data_sources = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the data source enabled for the GuardDuty member account.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn set_data_sources(mut self, input: ::std::option::Option<crate::types::DataSourcesFreeTrial>) -> Self {
        self.data_sources = input;
        self
    }
    /// <p>Describes the data source enabled for the GuardDuty member account.</p>
    #[deprecated(note = "This parameter is deprecated, use Features instead")]
    pub fn get_data_sources(&self) -> &::std::option::Option<crate::types::DataSourcesFreeTrial> {
        &self.data_sources
    }
    /// Appends an item to `features`.
    ///
    /// To override the contents of this collection use [`set_features`](Self::set_features).
    ///
    /// <p>A list of features enabled for the GuardDuty account.</p>
    pub fn features(mut self, input: crate::types::FreeTrialFeatureConfigurationResult) -> Self {
        let mut v = self.features.unwrap_or_default();
        v.push(input);
        self.features = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of features enabled for the GuardDuty account.</p>
    pub fn set_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FreeTrialFeatureConfigurationResult>>) -> Self {
        self.features = input;
        self
    }
    /// <p>A list of features enabled for the GuardDuty account.</p>
    pub fn get_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FreeTrialFeatureConfigurationResult>> {
        &self.features
    }
    /// Consumes the builder and constructs a [`AccountFreeTrialInfo`](crate::types::AccountFreeTrialInfo).
    pub fn build(self) -> crate::types::AccountFreeTrialInfo {
        crate::types::AccountFreeTrialInfo {
            account_id: self.account_id,
            data_sources: self.data_sources,
            features: self.features,
        }
    }
}
