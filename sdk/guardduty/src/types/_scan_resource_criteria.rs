// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about criteria used to filter resources before triggering malware scan.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScanResourceCriteria {
    /// <p>Represents condition that when matched will allow a malware scan for a certain resource.</p>
    #[doc(hidden)]
    pub include: std::option::Option<
        std::collections::HashMap<crate::types::ScanCriterionKey, crate::types::ScanCondition>,
    >,
    /// <p>Represents condition that when matched will prevent a malware scan for a certain resource.</p>
    #[doc(hidden)]
    pub exclude: std::option::Option<
        std::collections::HashMap<crate::types::ScanCriterionKey, crate::types::ScanCondition>,
    >,
}
impl ScanResourceCriteria {
    /// <p>Represents condition that when matched will allow a malware scan for a certain resource.</p>
    pub fn include(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<crate::types::ScanCriterionKey, crate::types::ScanCondition>,
    > {
        self.include.as_ref()
    }
    /// <p>Represents condition that when matched will prevent a malware scan for a certain resource.</p>
    pub fn exclude(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<crate::types::ScanCriterionKey, crate::types::ScanCondition>,
    > {
        self.exclude.as_ref()
    }
}
impl ScanResourceCriteria {
    /// Creates a new builder-style object to manufacture [`ScanResourceCriteria`](crate::types::ScanResourceCriteria).
    pub fn builder() -> crate::types::builders::ScanResourceCriteriaBuilder {
        crate::types::builders::ScanResourceCriteriaBuilder::default()
    }
}

/// A builder for [`ScanResourceCriteria`](crate::types::ScanResourceCriteria).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScanResourceCriteriaBuilder {
    pub(crate) include: std::option::Option<
        std::collections::HashMap<crate::types::ScanCriterionKey, crate::types::ScanCondition>,
    >,
    pub(crate) exclude: std::option::Option<
        std::collections::HashMap<crate::types::ScanCriterionKey, crate::types::ScanCondition>,
    >,
}
impl ScanResourceCriteriaBuilder {
    /// Adds a key-value pair to `include`.
    ///
    /// To override the contents of this collection use [`set_include`](Self::set_include).
    ///
    /// <p>Represents condition that when matched will allow a malware scan for a certain resource.</p>
    pub fn include(
        mut self,
        k: crate::types::ScanCriterionKey,
        v: crate::types::ScanCondition,
    ) -> Self {
        let mut hash_map = self.include.unwrap_or_default();
        hash_map.insert(k, v);
        self.include = Some(hash_map);
        self
    }
    /// <p>Represents condition that when matched will allow a malware scan for a certain resource.</p>
    pub fn set_include(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::ScanCriterionKey, crate::types::ScanCondition>,
        >,
    ) -> Self {
        self.include = input;
        self
    }
    /// Adds a key-value pair to `exclude`.
    ///
    /// To override the contents of this collection use [`set_exclude`](Self::set_exclude).
    ///
    /// <p>Represents condition that when matched will prevent a malware scan for a certain resource.</p>
    pub fn exclude(
        mut self,
        k: crate::types::ScanCriterionKey,
        v: crate::types::ScanCondition,
    ) -> Self {
        let mut hash_map = self.exclude.unwrap_or_default();
        hash_map.insert(k, v);
        self.exclude = Some(hash_map);
        self
    }
    /// <p>Represents condition that when matched will prevent a malware scan for a certain resource.</p>
    pub fn set_exclude(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::ScanCriterionKey, crate::types::ScanCondition>,
        >,
    ) -> Self {
        self.exclude = input;
        self
    }
    /// Consumes the builder and constructs a [`ScanResourceCriteria`](crate::types::ScanResourceCriteria).
    pub fn build(self) -> crate::types::ScanResourceCriteria {
        crate::types::ScanResourceCriteria {
            include: self.include,
            exclude: self.exclude,
        }
    }
}
