// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the resource type <code>RDSDBInstance</code> involved in a GuardDuty finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsDbInstanceDetails {
    /// <p>The identifier associated to the database instance that was involved in the finding.</p>
    pub db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The database engine of the database instance involved in the finding.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The version of the database engine that was involved in the finding.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the database cluster that contains the database instance ID involved in the finding.</p>
    pub db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) that identifies the database instance involved in the finding.</p>
    pub db_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>Instance tag key-value pairs associated with the database instance ID.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl RdsDbInstanceDetails {
    /// <p>The identifier associated to the database instance that was involved in the finding.</p>
    pub fn db_instance_identifier(&self) -> ::std::option::Option<&str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>The database engine of the database instance involved in the finding.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The version of the database engine that was involved in the finding.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The identifier of the database cluster that contains the database instance ID involved in the finding.</p>
    pub fn db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the database instance involved in the finding.</p>
    pub fn db_instance_arn(&self) -> ::std::option::Option<&str> {
        self.db_instance_arn.as_deref()
    }
    /// <p>Instance tag key-value pairs associated with the database instance ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl RdsDbInstanceDetails {
    /// Creates a new builder-style object to manufacture [`RdsDbInstanceDetails`](crate::types::RdsDbInstanceDetails).
    pub fn builder() -> crate::types::builders::RdsDbInstanceDetailsBuilder {
        crate::types::builders::RdsDbInstanceDetailsBuilder::default()
    }
}

/// A builder for [`RdsDbInstanceDetails`](crate::types::RdsDbInstanceDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RdsDbInstanceDetailsBuilder {
    pub(crate) db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) db_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl RdsDbInstanceDetailsBuilder {
    /// <p>The identifier associated to the database instance that was involved in the finding.</p>
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier associated to the database instance that was involved in the finding.</p>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_identifier = input;
        self
    }
    /// <p>The identifier associated to the database instance that was involved in the finding.</p>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_identifier
    }
    /// <p>The database engine of the database instance involved in the finding.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database engine of the database instance involved in the finding.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The database engine of the database instance involved in the finding.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The version of the database engine that was involved in the finding.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the database engine that was involved in the finding.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The version of the database engine that was involved in the finding.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The identifier of the database cluster that contains the database instance ID involved in the finding.</p>
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the database cluster that contains the database instance ID involved in the finding.</p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>The identifier of the database cluster that contains the database instance ID involved in the finding.</p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_identifier
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the database instance involved in the finding.</p>
    pub fn db_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the database instance involved in the finding.</p>
    pub fn set_db_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies the database instance involved in the finding.</p>
    pub fn get_db_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Instance tag key-value pairs associated with the database instance ID.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Instance tag key-value pairs associated with the database instance ID.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Instance tag key-value pairs associated with the database instance ID.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`RdsDbInstanceDetails`](crate::types::RdsDbInstanceDetails).
    pub fn build(self) -> crate::types::RdsDbInstanceDetails {
        crate::types::RdsDbInstanceDetails {
            db_instance_identifier: self.db_instance_identifier,
            engine: self.engine,
            engine_version: self.engine_version,
            db_cluster_identifier: self.db_cluster_identifier,
            db_instance_arn: self.db_instance_arn,
            tags: self.tags,
        }
    }
}
