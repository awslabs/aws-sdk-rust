// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Total number of scanned files.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScannedItemCount {
    /// <p>Total GB of files scanned for malware.</p>
    #[doc(hidden)]
    pub total_gb: i32,
    /// <p>Number of files scanned.</p>
    #[doc(hidden)]
    pub files: i32,
    /// <p>Total number of scanned volumes.</p>
    #[doc(hidden)]
    pub volumes: i32,
}
impl ScannedItemCount {
    /// <p>Total GB of files scanned for malware.</p>
    pub fn total_gb(&self) -> i32 {
        self.total_gb
    }
    /// <p>Number of files scanned.</p>
    pub fn files(&self) -> i32 {
        self.files
    }
    /// <p>Total number of scanned volumes.</p>
    pub fn volumes(&self) -> i32 {
        self.volumes
    }
}
impl ScannedItemCount {
    /// Creates a new builder-style object to manufacture [`ScannedItemCount`](crate::types::ScannedItemCount).
    pub fn builder() -> crate::types::builders::ScannedItemCountBuilder {
        crate::types::builders::ScannedItemCountBuilder::default()
    }
}

/// A builder for [`ScannedItemCount`](crate::types::ScannedItemCount).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScannedItemCountBuilder {
    pub(crate) total_gb: std::option::Option<i32>,
    pub(crate) files: std::option::Option<i32>,
    pub(crate) volumes: std::option::Option<i32>,
}
impl ScannedItemCountBuilder {
    /// <p>Total GB of files scanned for malware.</p>
    pub fn total_gb(mut self, input: i32) -> Self {
        self.total_gb = Some(input);
        self
    }
    /// <p>Total GB of files scanned for malware.</p>
    pub fn set_total_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.total_gb = input;
        self
    }
    /// <p>Number of files scanned.</p>
    pub fn files(mut self, input: i32) -> Self {
        self.files = Some(input);
        self
    }
    /// <p>Number of files scanned.</p>
    pub fn set_files(mut self, input: std::option::Option<i32>) -> Self {
        self.files = input;
        self
    }
    /// <p>Total number of scanned volumes.</p>
    pub fn volumes(mut self, input: i32) -> Self {
        self.volumes = Some(input);
        self
    }
    /// <p>Total number of scanned volumes.</p>
    pub fn set_volumes(mut self, input: std::option::Option<i32>) -> Self {
        self.volumes = input;
        self
    }
    /// Consumes the builder and constructs a [`ScannedItemCount`](crate::types::ScannedItemCount).
    pub fn build(self) -> crate::types::ScannedItemCount {
        crate::types::ScannedItemCount {
            total_gb: self.total_gb.unwrap_or_default(),
            files: self.files.unwrap_or_default(),
            volumes: self.volumes.unwrap_or_default(),
        }
    }
}
