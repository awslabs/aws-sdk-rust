// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about each finding type associated with the <code>groupedByFindingType</code> statistics.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FindingTypeStatistics {
    /// <p>Name of the finding type.</p>
    pub finding_type: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which this finding type was last generated in your environment.</p>
    pub last_generated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The total number of findings associated with generated for each distinct finding type.</p>
    pub total_findings: ::std::option::Option<i32>,
}
impl FindingTypeStatistics {
    /// <p>Name of the finding type.</p>
    pub fn finding_type(&self) -> ::std::option::Option<&str> {
        self.finding_type.as_deref()
    }
    /// <p>The timestamp at which this finding type was last generated in your environment.</p>
    pub fn last_generated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_generated_at.as_ref()
    }
    /// <p>The total number of findings associated with generated for each distinct finding type.</p>
    pub fn total_findings(&self) -> ::std::option::Option<i32> {
        self.total_findings
    }
}
impl FindingTypeStatistics {
    /// Creates a new builder-style object to manufacture [`FindingTypeStatistics`](crate::types::FindingTypeStatistics).
    pub fn builder() -> crate::types::builders::FindingTypeStatisticsBuilder {
        crate::types::builders::FindingTypeStatisticsBuilder::default()
    }
}

/// A builder for [`FindingTypeStatistics`](crate::types::FindingTypeStatistics).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FindingTypeStatisticsBuilder {
    pub(crate) finding_type: ::std::option::Option<::std::string::String>,
    pub(crate) last_generated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) total_findings: ::std::option::Option<i32>,
}
impl FindingTypeStatisticsBuilder {
    /// <p>Name of the finding type.</p>
    pub fn finding_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.finding_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the finding type.</p>
    pub fn set_finding_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.finding_type = input;
        self
    }
    /// <p>Name of the finding type.</p>
    pub fn get_finding_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.finding_type
    }
    /// <p>The timestamp at which this finding type was last generated in your environment.</p>
    pub fn last_generated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_generated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which this finding type was last generated in your environment.</p>
    pub fn set_last_generated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_generated_at = input;
        self
    }
    /// <p>The timestamp at which this finding type was last generated in your environment.</p>
    pub fn get_last_generated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_generated_at
    }
    /// <p>The total number of findings associated with generated for each distinct finding type.</p>
    pub fn total_findings(mut self, input: i32) -> Self {
        self.total_findings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of findings associated with generated for each distinct finding type.</p>
    pub fn set_total_findings(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_findings = input;
        self
    }
    /// <p>The total number of findings associated with generated for each distinct finding type.</p>
    pub fn get_total_findings(&self) -> &::std::option::Option<i32> {
        &self.total_findings
    }
    /// Consumes the builder and constructs a [`FindingTypeStatistics`](crate::types::FindingTypeStatistics).
    pub fn build(self) -> crate::types::FindingTypeStatistics {
        crate::types::FindingTypeStatistics {
            finding_type: self.finding_type,
            last_generated_at: self.last_generated_at,
            total_findings: self.total_findings,
        }
    }
}
