// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the condition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FilterCondition {
    /// <p>Represents an <i>equal</i> <b></b> condition to be applied to a single field when querying for scan entries.</p>
    #[doc(hidden)]
    pub equals_value: std::option::Option<std::string::String>,
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for scan entries.</p>
    #[doc(hidden)]
    pub greater_than: i64,
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for scan entries.</p>
    #[doc(hidden)]
    pub less_than: i64,
}
impl FilterCondition {
    /// <p>Represents an <i>equal</i> <b></b> condition to be applied to a single field when querying for scan entries.</p>
    pub fn equals_value(&self) -> std::option::Option<&str> {
        self.equals_value.as_deref()
    }
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for scan entries.</p>
    pub fn greater_than(&self) -> i64 {
        self.greater_than
    }
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for scan entries.</p>
    pub fn less_than(&self) -> i64 {
        self.less_than
    }
}
impl FilterCondition {
    /// Creates a new builder-style object to manufacture [`FilterCondition`](crate::types::FilterCondition).
    pub fn builder() -> crate::types::builders::FilterConditionBuilder {
        crate::types::builders::FilterConditionBuilder::default()
    }
}

/// A builder for [`FilterCondition`](crate::types::FilterCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterConditionBuilder {
    pub(crate) equals_value: std::option::Option<std::string::String>,
    pub(crate) greater_than: std::option::Option<i64>,
    pub(crate) less_than: std::option::Option<i64>,
}
impl FilterConditionBuilder {
    /// <p>Represents an <i>equal</i> <b></b> condition to be applied to a single field when querying for scan entries.</p>
    pub fn equals_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.equals_value = Some(input.into());
        self
    }
    /// <p>Represents an <i>equal</i> <b></b> condition to be applied to a single field when querying for scan entries.</p>
    pub fn set_equals_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.equals_value = input;
        self
    }
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for scan entries.</p>
    pub fn greater_than(mut self, input: i64) -> Self {
        self.greater_than = Some(input);
        self
    }
    /// <p>Represents a <i>greater than</i> condition to be applied to a single field when querying for scan entries.</p>
    pub fn set_greater_than(mut self, input: std::option::Option<i64>) -> Self {
        self.greater_than = input;
        self
    }
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for scan entries.</p>
    pub fn less_than(mut self, input: i64) -> Self {
        self.less_than = Some(input);
        self
    }
    /// <p>Represents a <i>less than</i> condition to be applied to a single field when querying for scan entries.</p>
    pub fn set_less_than(mut self, input: std::option::Option<i64>) -> Self {
        self.less_than = input;
        self
    }
    /// Consumes the builder and constructs a [`FilterCondition`](crate::types::FilterCondition).
    pub fn build(self) -> crate::types::FilterCondition {
        crate::types::FilterCondition {
            equals_value: self.equals_value,
            greater_than: self.greater_than.unwrap_or_default(),
            less_than: self.less_than.unwrap_or_default(),
        }
    }
}
