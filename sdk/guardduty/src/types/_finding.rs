// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the finding, which is generated when abnormal or suspicious activity is detected.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Finding {
    /// <p>The ID of the account in which the finding was generated.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the finding.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The confidence score for the finding.</p>
    #[doc(hidden)]
    pub confidence: f64,
    /// <p>The time and date when the finding was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<std::string::String>,
    /// <p>The description of the finding.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ID of the finding.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The partition associated with the finding.</p>
    #[doc(hidden)]
    pub partition: std::option::Option<std::string::String>,
    /// <p>The Region where the finding was generated.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>
    #[doc(hidden)]
    pub resource: std::option::Option<crate::types::Resource>,
    /// <p>The version of the schema used for the finding.</p>
    #[doc(hidden)]
    pub schema_version: std::option::Option<std::string::String>,
    /// <p>Contains additional information about the generated finding.</p>
    #[doc(hidden)]
    pub service: std::option::Option<crate::types::Service>,
    /// <p>The severity of the finding.</p>
    #[doc(hidden)]
    pub severity: f64,
    /// <p>The title of the finding.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>The type of finding.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The time and date when the finding was last updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<std::string::String>,
}
impl Finding {
    /// <p>The ID of the account in which the finding was generated.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The ARN of the finding.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The confidence score for the finding.</p>
    pub fn confidence(&self) -> f64 {
        self.confidence
    }
    /// <p>The time and date when the finding was created.</p>
    pub fn created_at(&self) -> std::option::Option<&str> {
        self.created_at.as_deref()
    }
    /// <p>The description of the finding.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the finding.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The partition associated with the finding.</p>
    pub fn partition(&self) -> std::option::Option<&str> {
        self.partition.as_deref()
    }
    /// <p>The Region where the finding was generated.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn resource(&self) -> std::option::Option<&crate::types::Resource> {
        self.resource.as_ref()
    }
    /// <p>The version of the schema used for the finding.</p>
    pub fn schema_version(&self) -> std::option::Option<&str> {
        self.schema_version.as_deref()
    }
    /// <p>Contains additional information about the generated finding.</p>
    pub fn service(&self) -> std::option::Option<&crate::types::Service> {
        self.service.as_ref()
    }
    /// <p>The severity of the finding.</p>
    pub fn severity(&self) -> f64 {
        self.severity
    }
    /// <p>The title of the finding.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The type of finding.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The time and date when the finding was last updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&str> {
        self.updated_at.as_deref()
    }
}
impl Finding {
    /// Creates a new builder-style object to manufacture [`Finding`](crate::types::Finding).
    pub fn builder() -> crate::types::builders::FindingBuilder {
        crate::types::builders::FindingBuilder::default()
    }
}

/// A builder for [`Finding`](crate::types::Finding).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FindingBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) confidence: std::option::Option<f64>,
    pub(crate) created_at: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) partition: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) resource: std::option::Option<crate::types::Resource>,
    pub(crate) schema_version: std::option::Option<std::string::String>,
    pub(crate) service: std::option::Option<crate::types::Service>,
    pub(crate) severity: std::option::Option<f64>,
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) updated_at: std::option::Option<std::string::String>,
}
impl FindingBuilder {
    /// <p>The ID of the account in which the finding was generated.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The ID of the account in which the finding was generated.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The ARN of the finding.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the finding.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The confidence score for the finding.</p>
    pub fn confidence(mut self, input: f64) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>The confidence score for the finding.</p>
    pub fn set_confidence(mut self, input: std::option::Option<f64>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The time and date when the finding was created.</p>
    pub fn created_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.created_at = Some(input.into());
        self
    }
    /// <p>The time and date when the finding was created.</p>
    pub fn set_created_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The description of the finding.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the finding.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The ID of the finding.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the finding.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The partition associated with the finding.</p>
    pub fn partition(mut self, input: impl Into<std::string::String>) -> Self {
        self.partition = Some(input.into());
        self
    }
    /// <p>The partition associated with the finding.</p>
    pub fn set_partition(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.partition = input;
        self
    }
    /// <p>The Region where the finding was generated.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Region where the finding was generated.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn resource(mut self, input: crate::types::Resource) -> Self {
        self.resource = Some(input);
        self
    }
    /// <p>Contains information about the Amazon Web Services resource associated with the activity that prompted GuardDuty to generate a finding.</p>
    pub fn set_resource(mut self, input: std::option::Option<crate::types::Resource>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The version of the schema used for the finding.</p>
    pub fn schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version = Some(input.into());
        self
    }
    /// <p>The version of the schema used for the finding.</p>
    pub fn set_schema_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>Contains additional information about the generated finding.</p>
    pub fn service(mut self, input: crate::types::Service) -> Self {
        self.service = Some(input);
        self
    }
    /// <p>Contains additional information about the generated finding.</p>
    pub fn set_service(mut self, input: std::option::Option<crate::types::Service>) -> Self {
        self.service = input;
        self
    }
    /// <p>The severity of the finding.</p>
    pub fn severity(mut self, input: f64) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>The severity of the finding.</p>
    pub fn set_severity(mut self, input: std::option::Option<f64>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The title of the finding.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The title of the finding.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The type of finding.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of finding.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The time and date when the finding was last updated.</p>
    pub fn updated_at(mut self, input: impl Into<std::string::String>) -> Self {
        self.updated_at = Some(input.into());
        self
    }
    /// <p>The time and date when the finding was last updated.</p>
    pub fn set_updated_at(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.updated_at = input;
        self
    }
    /// Consumes the builder and constructs a [`Finding`](crate::types::Finding).
    pub fn build(self) -> crate::types::Finding {
        crate::types::Finding {
            account_id: self.account_id,
            arn: self.arn,
            confidence: self.confidence.unwrap_or_default(),
            created_at: self.created_at,
            description: self.description,
            id: self.id,
            partition: self.partition,
            region: self.region,
            resource: self.resource,
            schema_version: self.schema_version,
            service: self.service,
            severity: self.severity.unwrap_or_default(),
            title: self.title,
            r#type: self.r#type,
            updated_at: self.updated_at,
        }
    }
}
