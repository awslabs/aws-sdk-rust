// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the criteria to be used in the filter for describing scan entries.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FilterCriteria {
    /// <p>Represents a condition that when matched will be added to the response of the operation.</p>
    #[doc(hidden)]
    pub filter_criterion: std::option::Option<std::vec::Vec<crate::types::FilterCriterion>>,
}
impl FilterCriteria {
    /// <p>Represents a condition that when matched will be added to the response of the operation.</p>
    pub fn filter_criterion(&self) -> std::option::Option<&[crate::types::FilterCriterion]> {
        self.filter_criterion.as_deref()
    }
}
impl FilterCriteria {
    /// Creates a new builder-style object to manufacture [`FilterCriteria`](crate::types::FilterCriteria).
    pub fn builder() -> crate::types::builders::FilterCriteriaBuilder {
        crate::types::builders::FilterCriteriaBuilder::default()
    }
}

/// A builder for [`FilterCriteria`](crate::types::FilterCriteria).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterCriteriaBuilder {
    pub(crate) filter_criterion: std::option::Option<std::vec::Vec<crate::types::FilterCriterion>>,
}
impl FilterCriteriaBuilder {
    /// Appends an item to `filter_criterion`.
    ///
    /// To override the contents of this collection use [`set_filter_criterion`](Self::set_filter_criterion).
    ///
    /// <p>Represents a condition that when matched will be added to the response of the operation.</p>
    pub fn filter_criterion(mut self, input: crate::types::FilterCriterion) -> Self {
        let mut v = self.filter_criterion.unwrap_or_default();
        v.push(input);
        self.filter_criterion = Some(v);
        self
    }
    /// <p>Represents a condition that when matched will be added to the response of the operation.</p>
    pub fn set_filter_criterion(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FilterCriterion>>,
    ) -> Self {
        self.filter_criterion = input;
        self
    }
    /// Consumes the builder and constructs a [`FilterCriteria`](crate::types::FilterCriteria).
    pub fn build(self) -> crate::types::FilterCriteria {
        crate::types::FilterCriteria {
            filter_criterion: self.filter_criterion,
        }
    }
}
