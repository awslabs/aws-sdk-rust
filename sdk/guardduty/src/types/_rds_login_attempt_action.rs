// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates that a login attempt was made to the potentially compromised database from a remote IP address.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsLoginAttemptAction {
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub remote_ip_details: ::std::option::Option<crate::types::RemoteIpDetails>,
    /// <p>Indicates the login attributes used in the login attempt.</p>
    pub login_attributes: ::std::option::Option<::std::vec::Vec<crate::types::LoginAttribute>>,
}
impl RdsLoginAttemptAction {
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub fn remote_ip_details(&self) -> ::std::option::Option<&crate::types::RemoteIpDetails> {
        self.remote_ip_details.as_ref()
    }
    /// <p>Indicates the login attributes used in the login attempt.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.login_attributes.is_none()`.
    pub fn login_attributes(&self) -> &[crate::types::LoginAttribute] {
        self.login_attributes.as_deref().unwrap_or_default()
    }
}
impl RdsLoginAttemptAction {
    /// Creates a new builder-style object to manufacture [`RdsLoginAttemptAction`](crate::types::RdsLoginAttemptAction).
    pub fn builder() -> crate::types::builders::RdsLoginAttemptActionBuilder {
        crate::types::builders::RdsLoginAttemptActionBuilder::default()
    }
}

/// A builder for [`RdsLoginAttemptAction`](crate::types::RdsLoginAttemptAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RdsLoginAttemptActionBuilder {
    pub(crate) remote_ip_details: ::std::option::Option<crate::types::RemoteIpDetails>,
    pub(crate) login_attributes: ::std::option::Option<::std::vec::Vec<crate::types::LoginAttribute>>,
}
impl RdsLoginAttemptActionBuilder {
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub fn remote_ip_details(mut self, input: crate::types::RemoteIpDetails) -> Self {
        self.remote_ip_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub fn set_remote_ip_details(mut self, input: ::std::option::Option<crate::types::RemoteIpDetails>) -> Self {
        self.remote_ip_details = input;
        self
    }
    /// <p>Contains information about the remote IP address of the connection.</p>
    pub fn get_remote_ip_details(&self) -> &::std::option::Option<crate::types::RemoteIpDetails> {
        &self.remote_ip_details
    }
    /// Appends an item to `login_attributes`.
    ///
    /// To override the contents of this collection use [`set_login_attributes`](Self::set_login_attributes).
    ///
    /// <p>Indicates the login attributes used in the login attempt.</p>
    pub fn login_attributes(mut self, input: crate::types::LoginAttribute) -> Self {
        let mut v = self.login_attributes.unwrap_or_default();
        v.push(input);
        self.login_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the login attributes used in the login attempt.</p>
    pub fn set_login_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoginAttribute>>) -> Self {
        self.login_attributes = input;
        self
    }
    /// <p>Indicates the login attributes used in the login attempt.</p>
    pub fn get_login_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoginAttribute>> {
        &self.login_attributes
    }
    /// Consumes the builder and constructs a [`RdsLoginAttemptAction`](crate::types::RdsLoginAttemptAction).
    pub fn build(self) -> crate::types::RdsLoginAttemptAction {
        crate::types::RdsLoginAttemptAction {
            remote_ip_details: self.remote_ip_details,
            login_attributes: self.login_attributes,
        }
    }
}
