// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the country where the remote IP address is located.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Country {
    /// <p>The country code of the remote IP address.</p>
    #[doc(hidden)]
    pub country_code: std::option::Option<std::string::String>,
    /// <p>The country name of the remote IP address.</p>
    #[doc(hidden)]
    pub country_name: std::option::Option<std::string::String>,
}
impl Country {
    /// <p>The country code of the remote IP address.</p>
    pub fn country_code(&self) -> std::option::Option<&str> {
        self.country_code.as_deref()
    }
    /// <p>The country name of the remote IP address.</p>
    pub fn country_name(&self) -> std::option::Option<&str> {
        self.country_name.as_deref()
    }
}
impl Country {
    /// Creates a new builder-style object to manufacture [`Country`](crate::types::Country).
    pub fn builder() -> crate::types::builders::CountryBuilder {
        crate::types::builders::CountryBuilder::default()
    }
}

/// A builder for [`Country`](crate::types::Country).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CountryBuilder {
    pub(crate) country_code: std::option::Option<std::string::String>,
    pub(crate) country_name: std::option::Option<std::string::String>,
}
impl CountryBuilder {
    /// <p>The country code of the remote IP address.</p>
    pub fn country_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.country_code = Some(input.into());
        self
    }
    /// <p>The country code of the remote IP address.</p>
    pub fn set_country_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.country_code = input;
        self
    }
    /// <p>The country name of the remote IP address.</p>
    pub fn country_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.country_name = Some(input.into());
        self
    }
    /// <p>The country name of the remote IP address.</p>
    pub fn set_country_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.country_name = input;
        self
    }
    /// Consumes the builder and constructs a [`Country`](crate::types::Country).
    pub fn build(self) -> crate::types::Country {
        crate::types::Country {
            country_code: self.country_code,
            country_name: self.country_name,
        }
    }
}
