// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateThreatIntelSetOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateThreatIntelSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateThreatIntelSetOutput`](crate::output::UpdateThreatIntelSetOutput).
pub mod update_threat_intel_set_output {

    /// A builder for [`UpdateThreatIntelSetOutput`](crate::output::UpdateThreatIntelSetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateThreatIntelSetOutput`](crate::output::UpdateThreatIntelSetOutput).
        pub fn build(self) -> crate::output::UpdateThreatIntelSetOutput {
            crate::output::UpdateThreatIntelSetOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateThreatIntelSetOutput {
    /// Creates a new builder-style object to manufacture [`UpdateThreatIntelSetOutput`](crate::output::UpdateThreatIntelSetOutput).
    pub fn builder() -> crate::output::update_threat_intel_set_output::Builder {
        crate::output::update_threat_intel_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePublishingDestinationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdatePublishingDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdatePublishingDestinationOutput`](crate::output::UpdatePublishingDestinationOutput).
pub mod update_publishing_destination_output {

    /// A builder for [`UpdatePublishingDestinationOutput`](crate::output::UpdatePublishingDestinationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePublishingDestinationOutput`](crate::output::UpdatePublishingDestinationOutput).
        pub fn build(self) -> crate::output::UpdatePublishingDestinationOutput {
            crate::output::UpdatePublishingDestinationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdatePublishingDestinationOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePublishingDestinationOutput`](crate::output::UpdatePublishingDestinationOutput).
    pub fn builder() -> crate::output::update_publishing_destination_output::Builder {
        crate::output::update_publishing_destination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateOrganizationConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateOrganizationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
pub mod update_organization_configuration_output {

    /// A builder for [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateOrganizationConfigurationOutput {
            crate::output::UpdateOrganizationConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateOrganizationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
    pub fn builder() -> crate::output::update_organization_configuration_output::Builder {
        crate::output::update_organization_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMemberDetectorsOutput {
    /// <p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl UpdateMemberDetectorsOutput {
    /// <p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateMemberDetectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateMemberDetectorsOutput`](crate::output::UpdateMemberDetectorsOutput).
pub mod update_member_detectors_output {

    /// A builder for [`UpdateMemberDetectorsOutput`](crate::output::UpdateMemberDetectorsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateMemberDetectorsOutput`](crate::output::UpdateMemberDetectorsOutput).
        pub fn build(self) -> crate::output::UpdateMemberDetectorsOutput {
            crate::output::UpdateMemberDetectorsOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateMemberDetectorsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMemberDetectorsOutput`](crate::output::UpdateMemberDetectorsOutput).
    pub fn builder() -> crate::output::update_member_detectors_output::Builder {
        crate::output::update_member_detectors_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMalwareScanSettingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateMalwareScanSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateMalwareScanSettingsOutput`](crate::output::UpdateMalwareScanSettingsOutput).
pub mod update_malware_scan_settings_output {

    /// A builder for [`UpdateMalwareScanSettingsOutput`](crate::output::UpdateMalwareScanSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateMalwareScanSettingsOutput`](crate::output::UpdateMalwareScanSettingsOutput).
        pub fn build(self) -> crate::output::UpdateMalwareScanSettingsOutput {
            crate::output::UpdateMalwareScanSettingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateMalwareScanSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMalwareScanSettingsOutput`](crate::output::UpdateMalwareScanSettingsOutput).
    pub fn builder() -> crate::output::update_malware_scan_settings_output::Builder {
        crate::output::update_malware_scan_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateIpSetOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateIpSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateIpSetOutput`](crate::output::UpdateIpSetOutput).
pub mod update_ip_set_output {

    /// A builder for [`UpdateIpSetOutput`](crate::output::UpdateIpSetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateIpSetOutput`](crate::output::UpdateIpSetOutput).
        pub fn build(self) -> crate::output::UpdateIpSetOutput {
            crate::output::UpdateIpSetOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateIpSetOutput {
    /// Creates a new builder-style object to manufacture [`UpdateIpSetOutput`](crate::output::UpdateIpSetOutput).
    pub fn builder() -> crate::output::update_ip_set_output::Builder {
        crate::output::update_ip_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFindingsFeedbackOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateFindingsFeedbackOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateFindingsFeedbackOutput`](crate::output::UpdateFindingsFeedbackOutput).
pub mod update_findings_feedback_output {

    /// A builder for [`UpdateFindingsFeedbackOutput`](crate::output::UpdateFindingsFeedbackOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateFindingsFeedbackOutput`](crate::output::UpdateFindingsFeedbackOutput).
        pub fn build(self) -> crate::output::UpdateFindingsFeedbackOutput {
            crate::output::UpdateFindingsFeedbackOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateFindingsFeedbackOutput {
    /// Creates a new builder-style object to manufacture [`UpdateFindingsFeedbackOutput`](crate::output::UpdateFindingsFeedbackOutput).
    pub fn builder() -> crate::output::update_findings_feedback_output::Builder {
        crate::output::update_findings_feedback_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFilterOutput {
    /// <p>The name of the filter.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateFilterOutput {
    /// <p>The name of the filter.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateFilterOutput`](crate::output::UpdateFilterOutput).
pub mod update_filter_output {

    /// A builder for [`UpdateFilterOutput`](crate::output::UpdateFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the filter.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the filter.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateFilterOutput`](crate::output::UpdateFilterOutput).
        pub fn build(self) -> crate::output::UpdateFilterOutput {
            crate::output::UpdateFilterOutput {
                name: self.name,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateFilterOutput {
    /// Creates a new builder-style object to manufacture [`UpdateFilterOutput`](crate::output::UpdateFilterOutput).
    pub fn builder() -> crate::output::update_filter_output::Builder {
        crate::output::update_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDetectorOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateDetectorOutput`](crate::output::UpdateDetectorOutput).
pub mod update_detector_output {

    /// A builder for [`UpdateDetectorOutput`](crate::output::UpdateDetectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateDetectorOutput`](crate::output::UpdateDetectorOutput).
        pub fn build(self) -> crate::output::UpdateDetectorOutput {
            crate::output::UpdateDetectorOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateDetectorOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDetectorOutput`](crate::output::UpdateDetectorOutput).
    pub fn builder() -> crate::output::update_detector_output::Builder {
        crate::output::update_detector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnarchiveFindingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UnarchiveFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UnarchiveFindingsOutput`](crate::output::UnarchiveFindingsOutput).
pub mod unarchive_findings_output {

    /// A builder for [`UnarchiveFindingsOutput`](crate::output::UnarchiveFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UnarchiveFindingsOutput`](crate::output::UnarchiveFindingsOutput).
        pub fn build(self) -> crate::output::UnarchiveFindingsOutput {
            crate::output::UnarchiveFindingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UnarchiveFindingsOutput {
    /// Creates a new builder-style object to manufacture [`UnarchiveFindingsOutput`](crate::output::UnarchiveFindingsOutput).
    pub fn builder() -> crate::output::unarchive_findings_output::Builder {
        crate::output::unarchive_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopMonitoringMembersOutput {
    /// <p>A list of objects that contain an accountId for each account that could not be processed, and a result string that indicates why the account was not processed. </p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl StopMonitoringMembersOutput {
    /// <p>A list of objects that contain an accountId for each account that could not be processed, and a result string that indicates why the account was not processed. </p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for StopMonitoringMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StopMonitoringMembersOutput`](crate::output::StopMonitoringMembersOutput).
pub mod stop_monitoring_members_output {

    /// A builder for [`StopMonitoringMembersOutput`](crate::output::StopMonitoringMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of objects that contain an accountId for each account that could not be processed, and a result string that indicates why the account was not processed. </p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of objects that contain an accountId for each account that could not be processed, and a result string that indicates why the account was not processed. </p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopMonitoringMembersOutput`](crate::output::StopMonitoringMembersOutput).
        pub fn build(self) -> crate::output::StopMonitoringMembersOutput {
            crate::output::StopMonitoringMembersOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl StopMonitoringMembersOutput {
    /// Creates a new builder-style object to manufacture [`StopMonitoringMembersOutput`](crate::output::StopMonitoringMembersOutput).
    pub fn builder() -> crate::output::stop_monitoring_members_output::Builder {
        crate::output::stop_monitoring_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartMonitoringMembersOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl StartMonitoringMembersOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartMonitoringMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartMonitoringMembersOutput`](crate::output::StartMonitoringMembersOutput).
pub mod start_monitoring_members_output {

    /// A builder for [`StartMonitoringMembersOutput`](crate::output::StartMonitoringMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartMonitoringMembersOutput`](crate::output::StartMonitoringMembersOutput).
        pub fn build(self) -> crate::output::StartMonitoringMembersOutput {
            crate::output::StartMonitoringMembersOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartMonitoringMembersOutput {
    /// Creates a new builder-style object to manufacture [`StartMonitoringMembersOutput`](crate::output::StartMonitoringMembersOutput).
    pub fn builder() -> crate::output::start_monitoring_members_output::Builder {
        crate::output::start_monitoring_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListThreatIntelSetsOutput {
    /// <p>The IDs of the ThreatIntelSet resources.</p>
    #[doc(hidden)]
    pub threat_intel_set_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListThreatIntelSetsOutput {
    /// <p>The IDs of the ThreatIntelSet resources.</p>
    pub fn threat_intel_set_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.threat_intel_set_ids.as_deref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListThreatIntelSetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListThreatIntelSetsOutput`](crate::output::ListThreatIntelSetsOutput).
pub mod list_threat_intel_sets_output {

    /// A builder for [`ListThreatIntelSetsOutput`](crate::output::ListThreatIntelSetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) threat_intel_set_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `threat_intel_set_ids`.
        ///
        /// To override the contents of this collection use [`set_threat_intel_set_ids`](Self::set_threat_intel_set_ids).
        ///
        /// <p>The IDs of the ThreatIntelSet resources.</p>
        pub fn threat_intel_set_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.threat_intel_set_ids.unwrap_or_default();
            v.push(input.into());
            self.threat_intel_set_ids = Some(v);
            self
        }
        /// <p>The IDs of the ThreatIntelSet resources.</p>
        pub fn set_threat_intel_set_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.threat_intel_set_ids = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListThreatIntelSetsOutput`](crate::output::ListThreatIntelSetsOutput).
        pub fn build(self) -> crate::output::ListThreatIntelSetsOutput {
            crate::output::ListThreatIntelSetsOutput {
                threat_intel_set_ids: self.threat_intel_set_ids,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListThreatIntelSetsOutput {
    /// Creates a new builder-style object to manufacture [`ListThreatIntelSetsOutput`](crate::output::ListThreatIntelSetsOutput).
    pub fn builder() -> crate::output::list_threat_intel_sets_output::Builder {
        crate::output::list_threat_intel_sets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags associated with the resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags associated with the resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags associated with the resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags associated with the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPublishingDestinationsOutput {
    /// <p>A <code>Destinations</code> object that includes information about each publishing destination returned.</p>
    #[doc(hidden)]
    pub destinations: std::option::Option<std::vec::Vec<crate::model::Destination>>,
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPublishingDestinationsOutput {
    /// <p>A <code>Destinations</code> object that includes information about each publishing destination returned.</p>
    pub fn destinations(&self) -> std::option::Option<&[crate::model::Destination]> {
        self.destinations.as_deref()
    }
    /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPublishingDestinationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListPublishingDestinationsOutput`](crate::output::ListPublishingDestinationsOutput).
pub mod list_publishing_destinations_output {

    /// A builder for [`ListPublishingDestinationsOutput`](crate::output::ListPublishingDestinationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) destinations: std::option::Option<std::vec::Vec<crate::model::Destination>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `destinations`.
        ///
        /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
        ///
        /// <p>A <code>Destinations</code> object that includes information about each publishing destination returned.</p>
        pub fn destinations(mut self, input: crate::model::Destination) -> Self {
            let mut v = self.destinations.unwrap_or_default();
            v.push(input);
            self.destinations = Some(v);
            self
        }
        /// <p>A <code>Destinations</code> object that includes information about each publishing destination returned.</p>
        pub fn set_destinations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Destination>>,
        ) -> Self {
            self.destinations = input;
            self
        }
        /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListPublishingDestinationsOutput`](crate::output::ListPublishingDestinationsOutput).
        pub fn build(self) -> crate::output::ListPublishingDestinationsOutput {
            crate::output::ListPublishingDestinationsOutput {
                destinations: self.destinations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListPublishingDestinationsOutput {
    /// Creates a new builder-style object to manufacture [`ListPublishingDestinationsOutput`](crate::output::ListPublishingDestinationsOutput).
    pub fn builder() -> crate::output::list_publishing_destinations_output::Builder {
        crate::output::list_publishing_destinations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOrganizationAdminAccountsOutput {
    /// <p>A list of accounts configured as GuardDuty delegated administrators.</p>
    #[doc(hidden)]
    pub admin_accounts: std::option::Option<std::vec::Vec<crate::model::AdminAccount>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListOrganizationAdminAccountsOutput {
    /// <p>A list of accounts configured as GuardDuty delegated administrators.</p>
    pub fn admin_accounts(&self) -> std::option::Option<&[crate::model::AdminAccount]> {
        self.admin_accounts.as_deref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListOrganizationAdminAccountsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
pub mod list_organization_admin_accounts_output {

    /// A builder for [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) admin_accounts: std::option::Option<std::vec::Vec<crate::model::AdminAccount>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `admin_accounts`.
        ///
        /// To override the contents of this collection use [`set_admin_accounts`](Self::set_admin_accounts).
        ///
        /// <p>A list of accounts configured as GuardDuty delegated administrators.</p>
        pub fn admin_accounts(mut self, input: crate::model::AdminAccount) -> Self {
            let mut v = self.admin_accounts.unwrap_or_default();
            v.push(input);
            self.admin_accounts = Some(v);
            self
        }
        /// <p>A list of accounts configured as GuardDuty delegated administrators.</p>
        pub fn set_admin_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AdminAccount>>,
        ) -> Self {
            self.admin_accounts = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
        pub fn build(self) -> crate::output::ListOrganizationAdminAccountsOutput {
            crate::output::ListOrganizationAdminAccountsOutput {
                admin_accounts: self.admin_accounts,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListOrganizationAdminAccountsOutput {
    /// Creates a new builder-style object to manufacture [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
    pub fn builder() -> crate::output::list_organization_admin_accounts_output::Builder {
        crate::output::list_organization_admin_accounts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMembersOutput {
    /// <p>A list of members.</p>
    #[doc(hidden)]
    pub members: std::option::Option<std::vec::Vec<crate::model::Member>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMembersOutput {
    /// <p>A list of members.</p>
    pub fn members(&self) -> std::option::Option<&[crate::model::Member]> {
        self.members.as_deref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListMembersOutput`](crate::output::ListMembersOutput).
pub mod list_members_output {

    /// A builder for [`ListMembersOutput`](crate::output::ListMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) members: std::option::Option<std::vec::Vec<crate::model::Member>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `members`.
        ///
        /// To override the contents of this collection use [`set_members`](Self::set_members).
        ///
        /// <p>A list of members.</p>
        pub fn members(mut self, input: crate::model::Member) -> Self {
            let mut v = self.members.unwrap_or_default();
            v.push(input);
            self.members = Some(v);
            self
        }
        /// <p>A list of members.</p>
        pub fn set_members(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Member>>,
        ) -> Self {
            self.members = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListMembersOutput`](crate::output::ListMembersOutput).
        pub fn build(self) -> crate::output::ListMembersOutput {
            crate::output::ListMembersOutput {
                members: self.members,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListMembersOutput {
    /// Creates a new builder-style object to manufacture [`ListMembersOutput`](crate::output::ListMembersOutput).
    pub fn builder() -> crate::output::list_members_output::Builder {
        crate::output::list_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListIpSetsOutput {
    /// <p>The IDs of the IPSet resources.</p>
    #[doc(hidden)]
    pub ip_set_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListIpSetsOutput {
    /// <p>The IDs of the IPSet resources.</p>
    pub fn ip_set_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.ip_set_ids.as_deref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListIpSetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListIpSetsOutput`](crate::output::ListIpSetsOutput).
pub mod list_ip_sets_output {

    /// A builder for [`ListIpSetsOutput`](crate::output::ListIpSetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ip_set_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `ip_set_ids`.
        ///
        /// To override the contents of this collection use [`set_ip_set_ids`](Self::set_ip_set_ids).
        ///
        /// <p>The IDs of the IPSet resources.</p>
        pub fn ip_set_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.ip_set_ids.unwrap_or_default();
            v.push(input.into());
            self.ip_set_ids = Some(v);
            self
        }
        /// <p>The IDs of the IPSet resources.</p>
        pub fn set_ip_set_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.ip_set_ids = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListIpSetsOutput`](crate::output::ListIpSetsOutput).
        pub fn build(self) -> crate::output::ListIpSetsOutput {
            crate::output::ListIpSetsOutput {
                ip_set_ids: self.ip_set_ids,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListIpSetsOutput {
    /// Creates a new builder-style object to manufacture [`ListIpSetsOutput`](crate::output::ListIpSetsOutput).
    pub fn builder() -> crate::output::list_ip_sets_output::Builder {
        crate::output::list_ip_sets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListInvitationsOutput {
    /// <p>A list of invitation descriptions.</p>
    #[doc(hidden)]
    pub invitations: std::option::Option<std::vec::Vec<crate::model::Invitation>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListInvitationsOutput {
    /// <p>A list of invitation descriptions.</p>
    pub fn invitations(&self) -> std::option::Option<&[crate::model::Invitation]> {
        self.invitations.as_deref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListInvitationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
pub mod list_invitations_output {

    /// A builder for [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) invitations: std::option::Option<std::vec::Vec<crate::model::Invitation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `invitations`.
        ///
        /// To override the contents of this collection use [`set_invitations`](Self::set_invitations).
        ///
        /// <p>A list of invitation descriptions.</p>
        pub fn invitations(mut self, input: crate::model::Invitation) -> Self {
            let mut v = self.invitations.unwrap_or_default();
            v.push(input);
            self.invitations = Some(v);
            self
        }
        /// <p>A list of invitation descriptions.</p>
        pub fn set_invitations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Invitation>>,
        ) -> Self {
            self.invitations = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
        pub fn build(self) -> crate::output::ListInvitationsOutput {
            crate::output::ListInvitationsOutput {
                invitations: self.invitations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListInvitationsOutput {
    /// Creates a new builder-style object to manufacture [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
    pub fn builder() -> crate::output::list_invitations_output::Builder {
        crate::output::list_invitations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFindingsOutput {
    /// <p>The IDs of the findings that you're listing.</p>
    #[doc(hidden)]
    pub finding_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFindingsOutput {
    /// <p>The IDs of the findings that you're listing.</p>
    pub fn finding_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.finding_ids.as_deref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListFindingsOutput`](crate::output::ListFindingsOutput).
pub mod list_findings_output {

    /// A builder for [`ListFindingsOutput`](crate::output::ListFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) finding_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `finding_ids`.
        ///
        /// To override the contents of this collection use [`set_finding_ids`](Self::set_finding_ids).
        ///
        /// <p>The IDs of the findings that you're listing.</p>
        pub fn finding_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.finding_ids.unwrap_or_default();
            v.push(input.into());
            self.finding_ids = Some(v);
            self
        }
        /// <p>The IDs of the findings that you're listing.</p>
        pub fn set_finding_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.finding_ids = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListFindingsOutput`](crate::output::ListFindingsOutput).
        pub fn build(self) -> crate::output::ListFindingsOutput {
            crate::output::ListFindingsOutput {
                finding_ids: self.finding_ids,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListFindingsOutput {
    /// Creates a new builder-style object to manufacture [`ListFindingsOutput`](crate::output::ListFindingsOutput).
    pub fn builder() -> crate::output::list_findings_output::Builder {
        crate::output::list_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFiltersOutput {
    /// <p>A list of filter names.</p>
    #[doc(hidden)]
    pub filter_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFiltersOutput {
    /// <p>A list of filter names.</p>
    pub fn filter_names(&self) -> std::option::Option<&[std::string::String]> {
        self.filter_names.as_deref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListFiltersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListFiltersOutput`](crate::output::ListFiltersOutput).
pub mod list_filters_output {

    /// A builder for [`ListFiltersOutput`](crate::output::ListFiltersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) filter_names: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `filter_names`.
        ///
        /// To override the contents of this collection use [`set_filter_names`](Self::set_filter_names).
        ///
        /// <p>A list of filter names.</p>
        pub fn filter_names(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.filter_names.unwrap_or_default();
            v.push(input.into());
            self.filter_names = Some(v);
            self
        }
        /// <p>A list of filter names.</p>
        pub fn set_filter_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.filter_names = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListFiltersOutput`](crate::output::ListFiltersOutput).
        pub fn build(self) -> crate::output::ListFiltersOutput {
            crate::output::ListFiltersOutput {
                filter_names: self.filter_names,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListFiltersOutput {
    /// Creates a new builder-style object to manufacture [`ListFiltersOutput`](crate::output::ListFiltersOutput).
    pub fn builder() -> crate::output::list_filters_output::Builder {
        crate::output::list_filters_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDetectorsOutput {
    /// <p>A list of detector IDs.</p>
    #[doc(hidden)]
    pub detector_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListDetectorsOutput {
    /// <p>A list of detector IDs.</p>
    pub fn detector_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.detector_ids.as_deref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListDetectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListDetectorsOutput`](crate::output::ListDetectorsOutput).
pub mod list_detectors_output {

    /// A builder for [`ListDetectorsOutput`](crate::output::ListDetectorsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) detector_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `detector_ids`.
        ///
        /// To override the contents of this collection use [`set_detector_ids`](Self::set_detector_ids).
        ///
        /// <p>A list of detector IDs.</p>
        pub fn detector_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.detector_ids.unwrap_or_default();
            v.push(input.into());
            self.detector_ids = Some(v);
            self
        }
        /// <p>A list of detector IDs.</p>
        pub fn set_detector_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.detector_ids = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListDetectorsOutput`](crate::output::ListDetectorsOutput).
        pub fn build(self) -> crate::output::ListDetectorsOutput {
            crate::output::ListDetectorsOutput {
                detector_ids: self.detector_ids,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListDetectorsOutput {
    /// Creates a new builder-style object to manufacture [`ListDetectorsOutput`](crate::output::ListDetectorsOutput).
    pub fn builder() -> crate::output::list_detectors_output::Builder {
        crate::output::list_detectors_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InviteMembersOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl InviteMembersOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for InviteMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`InviteMembersOutput`](crate::output::InviteMembersOutput).
pub mod invite_members_output {

    /// A builder for [`InviteMembersOutput`](crate::output::InviteMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`InviteMembersOutput`](crate::output::InviteMembersOutput).
        pub fn build(self) -> crate::output::InviteMembersOutput {
            crate::output::InviteMembersOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl InviteMembersOutput {
    /// Creates a new builder-style object to manufacture [`InviteMembersOutput`](crate::output::InviteMembersOutput).
    pub fn builder() -> crate::output::invite_members_output::Builder {
        crate::output::invite_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUsageStatisticsOutput {
    /// <p>The usage statistics object. If a UsageStatisticType was provided, the objects representing other types will be null.</p>
    #[doc(hidden)]
    pub usage_statistics: std::option::Option<crate::model::UsageStatistics>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetUsageStatisticsOutput {
    /// <p>The usage statistics object. If a UsageStatisticType was provided, the objects representing other types will be null.</p>
    pub fn usage_statistics(&self) -> std::option::Option<&crate::model::UsageStatistics> {
        self.usage_statistics.as_ref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetUsageStatisticsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetUsageStatisticsOutput`](crate::output::GetUsageStatisticsOutput).
pub mod get_usage_statistics_output {

    /// A builder for [`GetUsageStatisticsOutput`](crate::output::GetUsageStatisticsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) usage_statistics: std::option::Option<crate::model::UsageStatistics>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The usage statistics object. If a UsageStatisticType was provided, the objects representing other types will be null.</p>
        pub fn usage_statistics(mut self, input: crate::model::UsageStatistics) -> Self {
            self.usage_statistics = Some(input);
            self
        }
        /// <p>The usage statistics object. If a UsageStatisticType was provided, the objects representing other types will be null.</p>
        pub fn set_usage_statistics(
            mut self,
            input: std::option::Option<crate::model::UsageStatistics>,
        ) -> Self {
            self.usage_statistics = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetUsageStatisticsOutput`](crate::output::GetUsageStatisticsOutput).
        pub fn build(self) -> crate::output::GetUsageStatisticsOutput {
            crate::output::GetUsageStatisticsOutput {
                usage_statistics: self.usage_statistics,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetUsageStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetUsageStatisticsOutput`](crate::output::GetUsageStatisticsOutput).
    pub fn builder() -> crate::output::get_usage_statistics_output::Builder {
        crate::output::get_usage_statistics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetThreatIntelSetOutput {
    /// <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The format of the threatIntelSet.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::model::ThreatIntelSetFormat>,
    /// <p>The URI of the file that contains the ThreatIntelSet. </p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>The status of threatIntelSet file uploaded.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ThreatIntelSetStatus>,
    /// <p>The tags of the threat list resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetThreatIntelSetOutput {
    /// <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The format of the threatIntelSet.</p>
    pub fn format(&self) -> std::option::Option<&crate::model::ThreatIntelSetFormat> {
        self.format.as_ref()
    }
    /// <p>The URI of the file that contains the ThreatIntelSet. </p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The status of threatIntelSet file uploaded.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ThreatIntelSetStatus> {
        self.status.as_ref()
    }
    /// <p>The tags of the threat list resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetThreatIntelSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetThreatIntelSetOutput`](crate::output::GetThreatIntelSetOutput).
pub mod get_threat_intel_set_output {

    /// A builder for [`GetThreatIntelSetOutput`](crate::output::GetThreatIntelSetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) format: std::option::Option<crate::model::ThreatIntelSetFormat>,
        pub(crate) location: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ThreatIntelSetStatus>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The format of the threatIntelSet.</p>
        pub fn format(mut self, input: crate::model::ThreatIntelSetFormat) -> Self {
            self.format = Some(input);
            self
        }
        /// <p>The format of the threatIntelSet.</p>
        pub fn set_format(
            mut self,
            input: std::option::Option<crate::model::ThreatIntelSetFormat>,
        ) -> Self {
            self.format = input;
            self
        }
        /// <p>The URI of the file that contains the ThreatIntelSet. </p>
        pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
            self.location = Some(input.into());
            self
        }
        /// <p>The URI of the file that contains the ThreatIntelSet. </p>
        pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.location = input;
            self
        }
        /// <p>The status of threatIntelSet file uploaded.</p>
        pub fn status(mut self, input: crate::model::ThreatIntelSetStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of threatIntelSet file uploaded.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ThreatIntelSetStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags of the threat list resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags of the threat list resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetThreatIntelSetOutput`](crate::output::GetThreatIntelSetOutput).
        pub fn build(self) -> crate::output::GetThreatIntelSetOutput {
            crate::output::GetThreatIntelSetOutput {
                name: self.name,
                format: self.format,
                location: self.location,
                status: self.status,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetThreatIntelSetOutput {
    /// Creates a new builder-style object to manufacture [`GetThreatIntelSetOutput`](crate::output::GetThreatIntelSetOutput).
    pub fn builder() -> crate::output::get_threat_intel_set_output::Builder {
        crate::output::get_threat_intel_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRemainingFreeTrialDaysOutput {
    /// <p>The member accounts which were included in a request and were processed successfully.</p>
    #[doc(hidden)]
    pub accounts: std::option::Option<std::vec::Vec<crate::model::AccountFreeTrialInfo>>,
    /// <p>The member account that was included in a request but for which the request could not be processed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl GetRemainingFreeTrialDaysOutput {
    /// <p>The member accounts which were included in a request and were processed successfully.</p>
    pub fn accounts(&self) -> std::option::Option<&[crate::model::AccountFreeTrialInfo]> {
        self.accounts.as_deref()
    }
    /// <p>The member account that was included in a request but for which the request could not be processed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetRemainingFreeTrialDaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetRemainingFreeTrialDaysOutput`](crate::output::GetRemainingFreeTrialDaysOutput).
pub mod get_remaining_free_trial_days_output {

    /// A builder for [`GetRemainingFreeTrialDaysOutput`](crate::output::GetRemainingFreeTrialDaysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accounts: std::option::Option<std::vec::Vec<crate::model::AccountFreeTrialInfo>>,
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `accounts`.
        ///
        /// To override the contents of this collection use [`set_accounts`](Self::set_accounts).
        ///
        /// <p>The member accounts which were included in a request and were processed successfully.</p>
        pub fn accounts(mut self, input: crate::model::AccountFreeTrialInfo) -> Self {
            let mut v = self.accounts.unwrap_or_default();
            v.push(input);
            self.accounts = Some(v);
            self
        }
        /// <p>The member accounts which were included in a request and were processed successfully.</p>
        pub fn set_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccountFreeTrialInfo>>,
        ) -> Self {
            self.accounts = input;
            self
        }
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>The member account that was included in a request but for which the request could not be processed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>The member account that was included in a request but for which the request could not be processed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetRemainingFreeTrialDaysOutput`](crate::output::GetRemainingFreeTrialDaysOutput).
        pub fn build(self) -> crate::output::GetRemainingFreeTrialDaysOutput {
            crate::output::GetRemainingFreeTrialDaysOutput {
                accounts: self.accounts,
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetRemainingFreeTrialDaysOutput {
    /// Creates a new builder-style object to manufacture [`GetRemainingFreeTrialDaysOutput`](crate::output::GetRemainingFreeTrialDaysOutput).
    pub fn builder() -> crate::output::get_remaining_free_trial_days_output::Builder {
        crate::output::get_remaining_free_trial_days_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMembersOutput {
    /// <p>A list of members.</p>
    #[doc(hidden)]
    pub members: std::option::Option<std::vec::Vec<crate::model::Member>>,
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl GetMembersOutput {
    /// <p>A list of members.</p>
    pub fn members(&self) -> std::option::Option<&[crate::model::Member]> {
        self.members.as_deref()
    }
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMembersOutput`](crate::output::GetMembersOutput).
pub mod get_members_output {

    /// A builder for [`GetMembersOutput`](crate::output::GetMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) members: std::option::Option<std::vec::Vec<crate::model::Member>>,
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `members`.
        ///
        /// To override the contents of this collection use [`set_members`](Self::set_members).
        ///
        /// <p>A list of members.</p>
        pub fn members(mut self, input: crate::model::Member) -> Self {
            let mut v = self.members.unwrap_or_default();
            v.push(input);
            self.members = Some(v);
            self
        }
        /// <p>A list of members.</p>
        pub fn set_members(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Member>>,
        ) -> Self {
            self.members = input;
            self
        }
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMembersOutput`](crate::output::GetMembersOutput).
        pub fn build(self) -> crate::output::GetMembersOutput {
            crate::output::GetMembersOutput {
                members: self.members,
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMembersOutput {
    /// Creates a new builder-style object to manufacture [`GetMembersOutput`](crate::output::GetMembersOutput).
    pub fn builder() -> crate::output::get_members_output::Builder {
        crate::output::get_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMemberDetectorsOutput {
    /// <p>An object that describes which data sources are enabled for a member account.</p>
    #[doc(hidden)]
    pub member_data_source_configurations:
        std::option::Option<std::vec::Vec<crate::model::MemberDataSourceConfiguration>>,
    /// <p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl GetMemberDetectorsOutput {
    /// <p>An object that describes which data sources are enabled for a member account.</p>
    pub fn member_data_source_configurations(
        &self,
    ) -> std::option::Option<&[crate::model::MemberDataSourceConfiguration]> {
        self.member_data_source_configurations.as_deref()
    }
    /// <p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetMemberDetectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMemberDetectorsOutput`](crate::output::GetMemberDetectorsOutput).
pub mod get_member_detectors_output {

    /// A builder for [`GetMemberDetectorsOutput`](crate::output::GetMemberDetectorsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) member_data_source_configurations:
            std::option::Option<std::vec::Vec<crate::model::MemberDataSourceConfiguration>>,
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `member_data_source_configurations`.
        ///
        /// To override the contents of this collection use [`set_member_data_source_configurations`](Self::set_member_data_source_configurations).
        ///
        /// <p>An object that describes which data sources are enabled for a member account.</p>
        pub fn member_data_source_configurations(
            mut self,
            input: crate::model::MemberDataSourceConfiguration,
        ) -> Self {
            let mut v = self.member_data_source_configurations.unwrap_or_default();
            v.push(input);
            self.member_data_source_configurations = Some(v);
            self
        }
        /// <p>An object that describes which data sources are enabled for a member account.</p>
        pub fn set_member_data_source_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MemberDataSourceConfiguration>>,
        ) -> Self {
            self.member_data_source_configurations = input;
            self
        }
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of member account IDs that were unable to be processed along with an explanation for why they were not processed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMemberDetectorsOutput`](crate::output::GetMemberDetectorsOutput).
        pub fn build(self) -> crate::output::GetMemberDetectorsOutput {
            crate::output::GetMemberDetectorsOutput {
                member_data_source_configurations: self.member_data_source_configurations,
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMemberDetectorsOutput {
    /// Creates a new builder-style object to manufacture [`GetMemberDetectorsOutput`](crate::output::GetMemberDetectorsOutput).
    pub fn builder() -> crate::output::get_member_detectors_output::Builder {
        crate::output::get_member_detectors_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[deprecated(note = "This output is deprecated, use GetAdministratorAccountResponse instead")]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMasterAccountOutput {
    /// <p>The administrator account details.</p>
    #[doc(hidden)]
    pub master: std::option::Option<crate::model::Master>,
    _request_id: Option<String>,
}
impl GetMasterAccountOutput {
    /// <p>The administrator account details.</p>
    pub fn master(&self) -> std::option::Option<&crate::model::Master> {
        self.master.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMasterAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMasterAccountOutput`](crate::output::GetMasterAccountOutput).
pub mod get_master_account_output {

    /// A builder for [`GetMasterAccountOutput`](crate::output::GetMasterAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) master: std::option::Option<crate::model::Master>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The administrator account details.</p>
        pub fn master(mut self, input: crate::model::Master) -> Self {
            self.master = Some(input);
            self
        }
        /// <p>The administrator account details.</p>
        pub fn set_master(mut self, input: std::option::Option<crate::model::Master>) -> Self {
            self.master = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMasterAccountOutput`](crate::output::GetMasterAccountOutput).
        pub fn build(self) -> crate::output::GetMasterAccountOutput {
            crate::output::GetMasterAccountOutput {
                master: self.master,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMasterAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetMasterAccountOutput`](crate::output::GetMasterAccountOutput).
    pub fn builder() -> crate::output::get_master_account_output::Builder {
        crate::output::get_master_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMalwareScanSettingsOutput {
    /// <p>Represents the criteria to be used in the filter for scanning resources.</p>
    #[doc(hidden)]
    pub scan_resource_criteria: std::option::Option<crate::model::ScanResourceCriteria>,
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    #[doc(hidden)]
    pub ebs_snapshot_preservation: std::option::Option<crate::model::EbsSnapshotPreservation>,
    _request_id: Option<String>,
}
impl GetMalwareScanSettingsOutput {
    /// <p>Represents the criteria to be used in the filter for scanning resources.</p>
    pub fn scan_resource_criteria(
        &self,
    ) -> std::option::Option<&crate::model::ScanResourceCriteria> {
        self.scan_resource_criteria.as_ref()
    }
    /// <p>An enum value representing possible snapshot preservation settings.</p>
    pub fn ebs_snapshot_preservation(
        &self,
    ) -> std::option::Option<&crate::model::EbsSnapshotPreservation> {
        self.ebs_snapshot_preservation.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMalwareScanSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMalwareScanSettingsOutput`](crate::output::GetMalwareScanSettingsOutput).
pub mod get_malware_scan_settings_output {

    /// A builder for [`GetMalwareScanSettingsOutput`](crate::output::GetMalwareScanSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scan_resource_criteria: std::option::Option<crate::model::ScanResourceCriteria>,
        pub(crate) ebs_snapshot_preservation:
            std::option::Option<crate::model::EbsSnapshotPreservation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Represents the criteria to be used in the filter for scanning resources.</p>
        pub fn scan_resource_criteria(mut self, input: crate::model::ScanResourceCriteria) -> Self {
            self.scan_resource_criteria = Some(input);
            self
        }
        /// <p>Represents the criteria to be used in the filter for scanning resources.</p>
        pub fn set_scan_resource_criteria(
            mut self,
            input: std::option::Option<crate::model::ScanResourceCriteria>,
        ) -> Self {
            self.scan_resource_criteria = input;
            self
        }
        /// <p>An enum value representing possible snapshot preservation settings.</p>
        pub fn ebs_snapshot_preservation(
            mut self,
            input: crate::model::EbsSnapshotPreservation,
        ) -> Self {
            self.ebs_snapshot_preservation = Some(input);
            self
        }
        /// <p>An enum value representing possible snapshot preservation settings.</p>
        pub fn set_ebs_snapshot_preservation(
            mut self,
            input: std::option::Option<crate::model::EbsSnapshotPreservation>,
        ) -> Self {
            self.ebs_snapshot_preservation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMalwareScanSettingsOutput`](crate::output::GetMalwareScanSettingsOutput).
        pub fn build(self) -> crate::output::GetMalwareScanSettingsOutput {
            crate::output::GetMalwareScanSettingsOutput {
                scan_resource_criteria: self.scan_resource_criteria,
                ebs_snapshot_preservation: self.ebs_snapshot_preservation,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMalwareScanSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetMalwareScanSettingsOutput`](crate::output::GetMalwareScanSettingsOutput).
    pub fn builder() -> crate::output::get_malware_scan_settings_output::Builder {
        crate::output::get_malware_scan_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetIpSetOutput {
    /// <p>The user-friendly name for the IPSet.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The format of the file that contains the IPSet.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::model::IpSetFormat>,
    /// <p>The URI of the file that contains the IPSet.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>The status of IPSet file that was uploaded.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::IpSetStatus>,
    /// <p>The tags of the IPSet resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetIpSetOutput {
    /// <p>The user-friendly name for the IPSet.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The format of the file that contains the IPSet.</p>
    pub fn format(&self) -> std::option::Option<&crate::model::IpSetFormat> {
        self.format.as_ref()
    }
    /// <p>The URI of the file that contains the IPSet.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The status of IPSet file that was uploaded.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::IpSetStatus> {
        self.status.as_ref()
    }
    /// <p>The tags of the IPSet resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetIpSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetIpSetOutput`](crate::output::GetIpSetOutput).
pub mod get_ip_set_output {

    /// A builder for [`GetIpSetOutput`](crate::output::GetIpSetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) format: std::option::Option<crate::model::IpSetFormat>,
        pub(crate) location: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::IpSetStatus>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The user-friendly name for the IPSet.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The user-friendly name for the IPSet.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The format of the file that contains the IPSet.</p>
        pub fn format(mut self, input: crate::model::IpSetFormat) -> Self {
            self.format = Some(input);
            self
        }
        /// <p>The format of the file that contains the IPSet.</p>
        pub fn set_format(mut self, input: std::option::Option<crate::model::IpSetFormat>) -> Self {
            self.format = input;
            self
        }
        /// <p>The URI of the file that contains the IPSet.</p>
        pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
            self.location = Some(input.into());
            self
        }
        /// <p>The URI of the file that contains the IPSet.</p>
        pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.location = input;
            self
        }
        /// <p>The status of IPSet file that was uploaded.</p>
        pub fn status(mut self, input: crate::model::IpSetStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of IPSet file that was uploaded.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::IpSetStatus>) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags of the IPSet resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags of the IPSet resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetIpSetOutput`](crate::output::GetIpSetOutput).
        pub fn build(self) -> crate::output::GetIpSetOutput {
            crate::output::GetIpSetOutput {
                name: self.name,
                format: self.format,
                location: self.location,
                status: self.status,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetIpSetOutput {
    /// Creates a new builder-style object to manufacture [`GetIpSetOutput`](crate::output::GetIpSetOutput).
    pub fn builder() -> crate::output::get_ip_set_output::Builder {
        crate::output::get_ip_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetInvitationsCountOutput {
    /// <p>The number of received invitations.</p>
    #[doc(hidden)]
    pub invitations_count: i32,
    _request_id: Option<String>,
}
impl GetInvitationsCountOutput {
    /// <p>The number of received invitations.</p>
    pub fn invitations_count(&self) -> i32 {
        self.invitations_count
    }
}
impl aws_http::request_id::RequestId for GetInvitationsCountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetInvitationsCountOutput`](crate::output::GetInvitationsCountOutput).
pub mod get_invitations_count_output {

    /// A builder for [`GetInvitationsCountOutput`](crate::output::GetInvitationsCountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) invitations_count: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The number of received invitations.</p>
        pub fn invitations_count(mut self, input: i32) -> Self {
            self.invitations_count = Some(input);
            self
        }
        /// <p>The number of received invitations.</p>
        pub fn set_invitations_count(mut self, input: std::option::Option<i32>) -> Self {
            self.invitations_count = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetInvitationsCountOutput`](crate::output::GetInvitationsCountOutput).
        pub fn build(self) -> crate::output::GetInvitationsCountOutput {
            crate::output::GetInvitationsCountOutput {
                invitations_count: self.invitations_count.unwrap_or_default(),
                _request_id: self._request_id,
            }
        }
    }
}
impl GetInvitationsCountOutput {
    /// Creates a new builder-style object to manufacture [`GetInvitationsCountOutput`](crate::output::GetInvitationsCountOutput).
    pub fn builder() -> crate::output::get_invitations_count_output::Builder {
        crate::output::get_invitations_count_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFindingsStatisticsOutput {
    /// <p>The finding statistics object.</p>
    #[doc(hidden)]
    pub finding_statistics: std::option::Option<crate::model::FindingStatistics>,
    _request_id: Option<String>,
}
impl GetFindingsStatisticsOutput {
    /// <p>The finding statistics object.</p>
    pub fn finding_statistics(&self) -> std::option::Option<&crate::model::FindingStatistics> {
        self.finding_statistics.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetFindingsStatisticsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFindingsStatisticsOutput`](crate::output::GetFindingsStatisticsOutput).
pub mod get_findings_statistics_output {

    /// A builder for [`GetFindingsStatisticsOutput`](crate::output::GetFindingsStatisticsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) finding_statistics: std::option::Option<crate::model::FindingStatistics>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The finding statistics object.</p>
        pub fn finding_statistics(mut self, input: crate::model::FindingStatistics) -> Self {
            self.finding_statistics = Some(input);
            self
        }
        /// <p>The finding statistics object.</p>
        pub fn set_finding_statistics(
            mut self,
            input: std::option::Option<crate::model::FindingStatistics>,
        ) -> Self {
            self.finding_statistics = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFindingsStatisticsOutput`](crate::output::GetFindingsStatisticsOutput).
        pub fn build(self) -> crate::output::GetFindingsStatisticsOutput {
            crate::output::GetFindingsStatisticsOutput {
                finding_statistics: self.finding_statistics,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFindingsStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetFindingsStatisticsOutput`](crate::output::GetFindingsStatisticsOutput).
    pub fn builder() -> crate::output::get_findings_statistics_output::Builder {
        crate::output::get_findings_statistics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFindingsOutput {
    /// <p>A list of findings.</p>
    #[doc(hidden)]
    pub findings: std::option::Option<std::vec::Vec<crate::model::Finding>>,
    _request_id: Option<String>,
}
impl GetFindingsOutput {
    /// <p>A list of findings.</p>
    pub fn findings(&self) -> std::option::Option<&[crate::model::Finding]> {
        self.findings.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFindingsOutput`](crate::output::GetFindingsOutput).
pub mod get_findings_output {

    /// A builder for [`GetFindingsOutput`](crate::output::GetFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) findings: std::option::Option<std::vec::Vec<crate::model::Finding>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `findings`.
        ///
        /// To override the contents of this collection use [`set_findings`](Self::set_findings).
        ///
        /// <p>A list of findings.</p>
        pub fn findings(mut self, input: crate::model::Finding) -> Self {
            let mut v = self.findings.unwrap_or_default();
            v.push(input);
            self.findings = Some(v);
            self
        }
        /// <p>A list of findings.</p>
        pub fn set_findings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Finding>>,
        ) -> Self {
            self.findings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFindingsOutput`](crate::output::GetFindingsOutput).
        pub fn build(self) -> crate::output::GetFindingsOutput {
            crate::output::GetFindingsOutput {
                findings: self.findings,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFindingsOutput {
    /// Creates a new builder-style object to manufacture [`GetFindingsOutput`](crate::output::GetFindingsOutput).
    pub fn builder() -> crate::output::get_findings_output::Builder {
        crate::output::get_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFilterOutput {
    /// <p>The name of the filter.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the filter.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::model::FilterAction>,
    /// <p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>
    #[doc(hidden)]
    pub rank: i32,
    /// <p>Represents the criteria to be used in the filter for querying findings.</p>
    #[doc(hidden)]
    pub finding_criteria: std::option::Option<crate::model::FindingCriteria>,
    /// <p>The tags of the filter resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetFilterOutput {
    /// <p>The name of the filter.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the filter.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
    pub fn action(&self) -> std::option::Option<&crate::model::FilterAction> {
        self.action.as_ref()
    }
    /// <p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>
    pub fn rank(&self) -> i32 {
        self.rank
    }
    /// <p>Represents the criteria to be used in the filter for querying findings.</p>
    pub fn finding_criteria(&self) -> std::option::Option<&crate::model::FindingCriteria> {
        self.finding_criteria.as_ref()
    }
    /// <p>The tags of the filter resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFilterOutput`](crate::output::GetFilterOutput).
pub mod get_filter_output {

    /// A builder for [`GetFilterOutput`](crate::output::GetFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) action: std::option::Option<crate::model::FilterAction>,
        pub(crate) rank: std::option::Option<i32>,
        pub(crate) finding_criteria: std::option::Option<crate::model::FindingCriteria>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the filter.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the filter.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the filter.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the filter.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
        pub fn action(mut self, input: crate::model::FilterAction) -> Self {
            self.action = Some(input);
            self
        }
        /// <p>Specifies the action that is to be applied to the findings that match the filter.</p>
        pub fn set_action(
            mut self,
            input: std::option::Option<crate::model::FilterAction>,
        ) -> Self {
            self.action = input;
            self
        }
        /// <p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>
        pub fn rank(mut self, input: i32) -> Self {
            self.rank = Some(input);
            self
        }
        /// <p>Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.</p>
        pub fn set_rank(mut self, input: std::option::Option<i32>) -> Self {
            self.rank = input;
            self
        }
        /// <p>Represents the criteria to be used in the filter for querying findings.</p>
        pub fn finding_criteria(mut self, input: crate::model::FindingCriteria) -> Self {
            self.finding_criteria = Some(input);
            self
        }
        /// <p>Represents the criteria to be used in the filter for querying findings.</p>
        pub fn set_finding_criteria(
            mut self,
            input: std::option::Option<crate::model::FindingCriteria>,
        ) -> Self {
            self.finding_criteria = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags of the filter resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags of the filter resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFilterOutput`](crate::output::GetFilterOutput).
        pub fn build(self) -> crate::output::GetFilterOutput {
            crate::output::GetFilterOutput {
                name: self.name,
                description: self.description,
                action: self.action,
                rank: self.rank.unwrap_or_default(),
                finding_criteria: self.finding_criteria,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFilterOutput {
    /// Creates a new builder-style object to manufacture [`GetFilterOutput`](crate::output::GetFilterOutput).
    pub fn builder() -> crate::output::get_filter_output::Builder {
        crate::output::get_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDetectorOutput {
    /// <p>The timestamp of when the detector was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<std::string::String>,
    /// <p>The publishing frequency of the finding.</p>
    #[doc(hidden)]
    pub finding_publishing_frequency: std::option::Option<crate::model::FindingPublishingFrequency>,
    /// <p>The GuardDuty service role.</p>
    #[doc(hidden)]
    pub service_role: std::option::Option<std::string::String>,
    /// <p>The detector status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::DetectorStatus>,
    /// <p>The last-updated timestamp for the detector.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<std::string::String>,
    /// <p>Describes which data sources are enabled for the detector.</p>
    #[doc(hidden)]
    pub data_sources: std::option::Option<crate::model::DataSourceConfigurationsResult>,
    /// <p>The tags of the detector resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetDetectorOutput {
    /// <p>The timestamp of when the detector was created.</p>
    pub fn created_at(&self) -> std::option::Option<&str> {
        self.created_at.as_deref()
    }
    /// <p>The publishing frequency of the finding.</p>
    pub fn finding_publishing_frequency(
        &self,
    ) -> std::option::Option<&crate::model::FindingPublishingFrequency> {
        self.finding_publishing_frequency.as_ref()
    }
    /// <p>The GuardDuty service role.</p>
    pub fn service_role(&self) -> std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>The detector status.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::DetectorStatus> {
        self.status.as_ref()
    }
    /// <p>The last-updated timestamp for the detector.</p>
    pub fn updated_at(&self) -> std::option::Option<&str> {
        self.updated_at.as_deref()
    }
    /// <p>Describes which data sources are enabled for the detector.</p>
    pub fn data_sources(
        &self,
    ) -> std::option::Option<&crate::model::DataSourceConfigurationsResult> {
        self.data_sources.as_ref()
    }
    /// <p>The tags of the detector resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetDetectorOutput`](crate::output::GetDetectorOutput).
pub mod get_detector_output {

    /// A builder for [`GetDetectorOutput`](crate::output::GetDetectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) created_at: std::option::Option<std::string::String>,
        pub(crate) finding_publishing_frequency:
            std::option::Option<crate::model::FindingPublishingFrequency>,
        pub(crate) service_role: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::DetectorStatus>,
        pub(crate) updated_at: std::option::Option<std::string::String>,
        pub(crate) data_sources: std::option::Option<crate::model::DataSourceConfigurationsResult>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The timestamp of when the detector was created.</p>
        pub fn created_at(mut self, input: impl Into<std::string::String>) -> Self {
            self.created_at = Some(input.into());
            self
        }
        /// <p>The timestamp of when the detector was created.</p>
        pub fn set_created_at(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The publishing frequency of the finding.</p>
        pub fn finding_publishing_frequency(
            mut self,
            input: crate::model::FindingPublishingFrequency,
        ) -> Self {
            self.finding_publishing_frequency = Some(input);
            self
        }
        /// <p>The publishing frequency of the finding.</p>
        pub fn set_finding_publishing_frequency(
            mut self,
            input: std::option::Option<crate::model::FindingPublishingFrequency>,
        ) -> Self {
            self.finding_publishing_frequency = input;
            self
        }
        /// <p>The GuardDuty service role.</p>
        pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
            self.service_role = Some(input.into());
            self
        }
        /// <p>The GuardDuty service role.</p>
        pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.service_role = input;
            self
        }
        /// <p>The detector status.</p>
        pub fn status(mut self, input: crate::model::DetectorStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The detector status.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::DetectorStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The last-updated timestamp for the detector.</p>
        pub fn updated_at(mut self, input: impl Into<std::string::String>) -> Self {
            self.updated_at = Some(input.into());
            self
        }
        /// <p>The last-updated timestamp for the detector.</p>
        pub fn set_updated_at(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.updated_at = input;
            self
        }
        /// <p>Describes which data sources are enabled for the detector.</p>
        pub fn data_sources(mut self, input: crate::model::DataSourceConfigurationsResult) -> Self {
            self.data_sources = Some(input);
            self
        }
        /// <p>Describes which data sources are enabled for the detector.</p>
        pub fn set_data_sources(
            mut self,
            input: std::option::Option<crate::model::DataSourceConfigurationsResult>,
        ) -> Self {
            self.data_sources = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags of the detector resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags of the detector resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDetectorOutput`](crate::output::GetDetectorOutput).
        pub fn build(self) -> crate::output::GetDetectorOutput {
            crate::output::GetDetectorOutput {
                created_at: self.created_at,
                finding_publishing_frequency: self.finding_publishing_frequency,
                service_role: self.service_role,
                status: self.status,
                updated_at: self.updated_at,
                data_sources: self.data_sources,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetDetectorOutput {
    /// Creates a new builder-style object to manufacture [`GetDetectorOutput`](crate::output::GetDetectorOutput).
    pub fn builder() -> crate::output::get_detector_output::Builder {
        crate::output::get_detector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAdministratorAccountOutput {
    /// <p>The administrator account details.</p>
    #[doc(hidden)]
    pub administrator: std::option::Option<crate::model::Administrator>,
    _request_id: Option<String>,
}
impl GetAdministratorAccountOutput {
    /// <p>The administrator account details.</p>
    pub fn administrator(&self) -> std::option::Option<&crate::model::Administrator> {
        self.administrator.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAdministratorAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAdministratorAccountOutput`](crate::output::GetAdministratorAccountOutput).
pub mod get_administrator_account_output {

    /// A builder for [`GetAdministratorAccountOutput`](crate::output::GetAdministratorAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) administrator: std::option::Option<crate::model::Administrator>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The administrator account details.</p>
        pub fn administrator(mut self, input: crate::model::Administrator) -> Self {
            self.administrator = Some(input);
            self
        }
        /// <p>The administrator account details.</p>
        pub fn set_administrator(
            mut self,
            input: std::option::Option<crate::model::Administrator>,
        ) -> Self {
            self.administrator = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAdministratorAccountOutput`](crate::output::GetAdministratorAccountOutput).
        pub fn build(self) -> crate::output::GetAdministratorAccountOutput {
            crate::output::GetAdministratorAccountOutput {
                administrator: self.administrator,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAdministratorAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetAdministratorAccountOutput`](crate::output::GetAdministratorAccountOutput).
    pub fn builder() -> crate::output::get_administrator_account_output::Builder {
        crate::output::get_administrator_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableOrganizationAdminAccountOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for EnableOrganizationAdminAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
pub mod enable_organization_admin_account_output {

    /// A builder for [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::EnableOrganizationAdminAccountOutput {
            crate::output::EnableOrganizationAdminAccountOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::enable_organization_admin_account_output::Builder {
        crate::output::enable_organization_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateMembersOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl DisassociateMembersOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisassociateMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateMembersOutput`](crate::output::DisassociateMembersOutput).
pub mod disassociate_members_output {

    /// A builder for [`DisassociateMembersOutput`](crate::output::DisassociateMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateMembersOutput`](crate::output::DisassociateMembersOutput).
        pub fn build(self) -> crate::output::DisassociateMembersOutput {
            crate::output::DisassociateMembersOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateMembersOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateMembersOutput`](crate::output::DisassociateMembersOutput).
    pub fn builder() -> crate::output::disassociate_members_output::Builder {
        crate::output::disassociate_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[deprecated(
    note = "This output is deprecated, use DisassociateFromAdministratorAccountResponse instead"
)]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateFromMasterAccountOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateFromMasterAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateFromMasterAccountOutput`](crate::output::DisassociateFromMasterAccountOutput).
pub mod disassociate_from_master_account_output {

    /// A builder for [`DisassociateFromMasterAccountOutput`](crate::output::DisassociateFromMasterAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateFromMasterAccountOutput`](crate::output::DisassociateFromMasterAccountOutput).
        pub fn build(self) -> crate::output::DisassociateFromMasterAccountOutput {
            crate::output::DisassociateFromMasterAccountOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateFromMasterAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateFromMasterAccountOutput`](crate::output::DisassociateFromMasterAccountOutput).
    pub fn builder() -> crate::output::disassociate_from_master_account_output::Builder {
        crate::output::disassociate_from_master_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateFromAdministratorAccountOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateFromAdministratorAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateFromAdministratorAccountOutput`](crate::output::DisassociateFromAdministratorAccountOutput).
pub mod disassociate_from_administrator_account_output {

    /// A builder for [`DisassociateFromAdministratorAccountOutput`](crate::output::DisassociateFromAdministratorAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateFromAdministratorAccountOutput`](crate::output::DisassociateFromAdministratorAccountOutput).
        pub fn build(self) -> crate::output::DisassociateFromAdministratorAccountOutput {
            crate::output::DisassociateFromAdministratorAccountOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateFromAdministratorAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateFromAdministratorAccountOutput`](crate::output::DisassociateFromAdministratorAccountOutput).
    pub fn builder() -> crate::output::disassociate_from_administrator_account_output::Builder {
        crate::output::disassociate_from_administrator_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableOrganizationAdminAccountOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisableOrganizationAdminAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
pub mod disable_organization_admin_account_output {

    /// A builder for [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::DisableOrganizationAdminAccountOutput {
            crate::output::DisableOrganizationAdminAccountOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::disable_organization_admin_account_output::Builder {
        crate::output::disable_organization_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePublishingDestinationOutput {
    /// <p>The ID of the publishing destination.</p>
    #[doc(hidden)]
    pub destination_id: std::option::Option<std::string::String>,
    /// <p>The type of publishing destination. Currently, only Amazon S3 buckets are supported.</p>
    #[doc(hidden)]
    pub destination_type: std::option::Option<crate::model::DestinationType>,
    /// <p>The status of the publishing destination.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::PublishingStatus>,
    /// <p>The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.</p>
    #[doc(hidden)]
    pub publishing_failure_start_timestamp: i64,
    /// <p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>
    #[doc(hidden)]
    pub destination_properties: std::option::Option<crate::model::DestinationProperties>,
    _request_id: Option<String>,
}
impl DescribePublishingDestinationOutput {
    /// <p>The ID of the publishing destination.</p>
    pub fn destination_id(&self) -> std::option::Option<&str> {
        self.destination_id.as_deref()
    }
    /// <p>The type of publishing destination. Currently, only Amazon S3 buckets are supported.</p>
    pub fn destination_type(&self) -> std::option::Option<&crate::model::DestinationType> {
        self.destination_type.as_ref()
    }
    /// <p>The status of the publishing destination.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::PublishingStatus> {
        self.status.as_ref()
    }
    /// <p>The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.</p>
    pub fn publishing_failure_start_timestamp(&self) -> i64 {
        self.publishing_failure_start_timestamp
    }
    /// <p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>
    pub fn destination_properties(
        &self,
    ) -> std::option::Option<&crate::model::DestinationProperties> {
        self.destination_properties.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribePublishingDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribePublishingDestinationOutput`](crate::output::DescribePublishingDestinationOutput).
pub mod describe_publishing_destination_output {

    /// A builder for [`DescribePublishingDestinationOutput`](crate::output::DescribePublishingDestinationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) destination_id: std::option::Option<std::string::String>,
        pub(crate) destination_type: std::option::Option<crate::model::DestinationType>,
        pub(crate) status: std::option::Option<crate::model::PublishingStatus>,
        pub(crate) publishing_failure_start_timestamp: std::option::Option<i64>,
        pub(crate) destination_properties: std::option::Option<crate::model::DestinationProperties>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the publishing destination.</p>
        pub fn destination_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.destination_id = Some(input.into());
            self
        }
        /// <p>The ID of the publishing destination.</p>
        pub fn set_destination_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.destination_id = input;
            self
        }
        /// <p>The type of publishing destination. Currently, only Amazon S3 buckets are supported.</p>
        pub fn destination_type(mut self, input: crate::model::DestinationType) -> Self {
            self.destination_type = Some(input);
            self
        }
        /// <p>The type of publishing destination. Currently, only Amazon S3 buckets are supported.</p>
        pub fn set_destination_type(
            mut self,
            input: std::option::Option<crate::model::DestinationType>,
        ) -> Self {
            self.destination_type = input;
            self
        }
        /// <p>The status of the publishing destination.</p>
        pub fn status(mut self, input: crate::model::PublishingStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the publishing destination.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::PublishingStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.</p>
        pub fn publishing_failure_start_timestamp(mut self, input: i64) -> Self {
            self.publishing_failure_start_timestamp = Some(input);
            self
        }
        /// <p>The time, in epoch millisecond format, at which GuardDuty was first unable to publish findings to the destination.</p>
        pub fn set_publishing_failure_start_timestamp(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.publishing_failure_start_timestamp = input;
            self
        }
        /// <p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>
        pub fn destination_properties(
            mut self,
            input: crate::model::DestinationProperties,
        ) -> Self {
            self.destination_properties = Some(input);
            self
        }
        /// <p>A <code>DestinationProperties</code> object that includes the <code>DestinationArn</code> and <code>KmsKeyArn</code> of the publishing destination.</p>
        pub fn set_destination_properties(
            mut self,
            input: std::option::Option<crate::model::DestinationProperties>,
        ) -> Self {
            self.destination_properties = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribePublishingDestinationOutput`](crate::output::DescribePublishingDestinationOutput).
        pub fn build(self) -> crate::output::DescribePublishingDestinationOutput {
            crate::output::DescribePublishingDestinationOutput {
                destination_id: self.destination_id,
                destination_type: self.destination_type,
                status: self.status,
                publishing_failure_start_timestamp: self
                    .publishing_failure_start_timestamp
                    .unwrap_or_default(),
                destination_properties: self.destination_properties,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribePublishingDestinationOutput {
    /// Creates a new builder-style object to manufacture [`DescribePublishingDestinationOutput`](crate::output::DescribePublishingDestinationOutput).
    pub fn builder() -> crate::output::describe_publishing_destination_output::Builder {
        crate::output::describe_publishing_destination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeOrganizationConfigurationOutput {
    /// <p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>
    #[doc(hidden)]
    pub auto_enable: bool,
    /// <p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>
    #[doc(hidden)]
    pub member_account_limit_reached: bool,
    /// <p>Describes which data sources are enabled automatically for member accounts.</p>
    #[doc(hidden)]
    pub data_sources: std::option::Option<crate::model::OrganizationDataSourceConfigurationsResult>,
    _request_id: Option<String>,
}
impl DescribeOrganizationConfigurationOutput {
    /// <p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>
    pub fn auto_enable(&self) -> bool {
        self.auto_enable
    }
    /// <p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>
    pub fn member_account_limit_reached(&self) -> bool {
        self.member_account_limit_reached
    }
    /// <p>Describes which data sources are enabled automatically for member accounts.</p>
    pub fn data_sources(
        &self,
    ) -> std::option::Option<&crate::model::OrganizationDataSourceConfigurationsResult> {
        self.data_sources.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeOrganizationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
pub mod describe_organization_configuration_output {

    /// A builder for [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_enable: std::option::Option<bool>,
        pub(crate) member_account_limit_reached: std::option::Option<bool>,
        pub(crate) data_sources:
            std::option::Option<crate::model::OrganizationDataSourceConfigurationsResult>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>
        pub fn auto_enable(mut self, input: bool) -> Self {
            self.auto_enable = Some(input);
            self
        }
        /// <p>Indicates whether GuardDuty is automatically enabled for accounts added to the organization.</p>
        pub fn set_auto_enable(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_enable = input;
            self
        }
        /// <p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>
        pub fn member_account_limit_reached(mut self, input: bool) -> Self {
            self.member_account_limit_reached = Some(input);
            self
        }
        /// <p>Indicates whether the maximum number of allowed member accounts are already associated with the delegated administrator account for your organization.</p>
        pub fn set_member_account_limit_reached(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.member_account_limit_reached = input;
            self
        }
        /// <p>Describes which data sources are enabled automatically for member accounts.</p>
        pub fn data_sources(
            mut self,
            input: crate::model::OrganizationDataSourceConfigurationsResult,
        ) -> Self {
            self.data_sources = Some(input);
            self
        }
        /// <p>Describes which data sources are enabled automatically for member accounts.</p>
        pub fn set_data_sources(
            mut self,
            input: std::option::Option<crate::model::OrganizationDataSourceConfigurationsResult>,
        ) -> Self {
            self.data_sources = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeOrganizationConfigurationOutput {
            crate::output::DescribeOrganizationConfigurationOutput {
                auto_enable: self.auto_enable.unwrap_or_default(),
                member_account_limit_reached: self.member_account_limit_reached.unwrap_or_default(),
                data_sources: self.data_sources,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeOrganizationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
    pub fn builder() -> crate::output::describe_organization_configuration_output::Builder {
        crate::output::describe_organization_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeMalwareScansOutput {
    /// <p>Contains information about malware scans.</p>
    #[doc(hidden)]
    pub scans: std::option::Option<std::vec::Vec<crate::model::Scan>>,
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeMalwareScansOutput {
    /// <p>Contains information about malware scans.</p>
    pub fn scans(&self) -> std::option::Option<&[crate::model::Scan]> {
        self.scans.as_deref()
    }
    /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeMalwareScansOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeMalwareScansOutput`](crate::output::DescribeMalwareScansOutput).
pub mod describe_malware_scans_output {

    /// A builder for [`DescribeMalwareScansOutput`](crate::output::DescribeMalwareScansOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scans: std::option::Option<std::vec::Vec<crate::model::Scan>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `scans`.
        ///
        /// To override the contents of this collection use [`set_scans`](Self::set_scans).
        ///
        /// <p>Contains information about malware scans.</p>
        pub fn scans(mut self, input: crate::model::Scan) -> Self {
            let mut v = self.scans.unwrap_or_default();
            v.push(input);
            self.scans = Some(v);
            self
        }
        /// <p>Contains information about malware scans.</p>
        pub fn set_scans(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Scan>>,
        ) -> Self {
            self.scans = input;
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination parameter to be used on the next list operation to retrieve more items.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeMalwareScansOutput`](crate::output::DescribeMalwareScansOutput).
        pub fn build(self) -> crate::output::DescribeMalwareScansOutput {
            crate::output::DescribeMalwareScansOutput {
                scans: self.scans,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeMalwareScansOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMalwareScansOutput`](crate::output::DescribeMalwareScansOutput).
    pub fn builder() -> crate::output::describe_malware_scans_output::Builder {
        crate::output::describe_malware_scans_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteThreatIntelSetOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteThreatIntelSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteThreatIntelSetOutput`](crate::output::DeleteThreatIntelSetOutput).
pub mod delete_threat_intel_set_output {

    /// A builder for [`DeleteThreatIntelSetOutput`](crate::output::DeleteThreatIntelSetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteThreatIntelSetOutput`](crate::output::DeleteThreatIntelSetOutput).
        pub fn build(self) -> crate::output::DeleteThreatIntelSetOutput {
            crate::output::DeleteThreatIntelSetOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteThreatIntelSetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteThreatIntelSetOutput`](crate::output::DeleteThreatIntelSetOutput).
    pub fn builder() -> crate::output::delete_threat_intel_set_output::Builder {
        crate::output::delete_threat_intel_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePublishingDestinationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeletePublishingDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeletePublishingDestinationOutput`](crate::output::DeletePublishingDestinationOutput).
pub mod delete_publishing_destination_output {

    /// A builder for [`DeletePublishingDestinationOutput`](crate::output::DeletePublishingDestinationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeletePublishingDestinationOutput`](crate::output::DeletePublishingDestinationOutput).
        pub fn build(self) -> crate::output::DeletePublishingDestinationOutput {
            crate::output::DeletePublishingDestinationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeletePublishingDestinationOutput {
    /// Creates a new builder-style object to manufacture [`DeletePublishingDestinationOutput`](crate::output::DeletePublishingDestinationOutput).
    pub fn builder() -> crate::output::delete_publishing_destination_output::Builder {
        crate::output::delete_publishing_destination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMembersOutput {
    /// <p>The accounts that could not be processed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl DeleteMembersOutput {
    /// <p>The accounts that could not be processed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteMembersOutput`](crate::output::DeleteMembersOutput).
pub mod delete_members_output {

    /// A builder for [`DeleteMembersOutput`](crate::output::DeleteMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>The accounts that could not be processed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>The accounts that could not be processed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteMembersOutput`](crate::output::DeleteMembersOutput).
        pub fn build(self) -> crate::output::DeleteMembersOutput {
            crate::output::DeleteMembersOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteMembersOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMembersOutput`](crate::output::DeleteMembersOutput).
    pub fn builder() -> crate::output::delete_members_output::Builder {
        crate::output::delete_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteIpSetOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteIpSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteIpSetOutput`](crate::output::DeleteIpSetOutput).
pub mod delete_ip_set_output {

    /// A builder for [`DeleteIpSetOutput`](crate::output::DeleteIpSetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteIpSetOutput`](crate::output::DeleteIpSetOutput).
        pub fn build(self) -> crate::output::DeleteIpSetOutput {
            crate::output::DeleteIpSetOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteIpSetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteIpSetOutput`](crate::output::DeleteIpSetOutput).
    pub fn builder() -> crate::output::delete_ip_set_output::Builder {
        crate::output::delete_ip_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteInvitationsOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl DeleteInvitationsOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteInvitationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteInvitationsOutput`](crate::output::DeleteInvitationsOutput).
pub mod delete_invitations_output {

    /// A builder for [`DeleteInvitationsOutput`](crate::output::DeleteInvitationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteInvitationsOutput`](crate::output::DeleteInvitationsOutput).
        pub fn build(self) -> crate::output::DeleteInvitationsOutput {
            crate::output::DeleteInvitationsOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteInvitationsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInvitationsOutput`](crate::output::DeleteInvitationsOutput).
    pub fn builder() -> crate::output::delete_invitations_output::Builder {
        crate::output::delete_invitations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteFilterOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteFilterOutput`](crate::output::DeleteFilterOutput).
pub mod delete_filter_output {

    /// A builder for [`DeleteFilterOutput`](crate::output::DeleteFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteFilterOutput`](crate::output::DeleteFilterOutput).
        pub fn build(self) -> crate::output::DeleteFilterOutput {
            crate::output::DeleteFilterOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteFilterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFilterOutput`](crate::output::DeleteFilterOutput).
    pub fn builder() -> crate::output::delete_filter_output::Builder {
        crate::output::delete_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDetectorOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteDetectorOutput`](crate::output::DeleteDetectorOutput).
pub mod delete_detector_output {

    /// A builder for [`DeleteDetectorOutput`](crate::output::DeleteDetectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDetectorOutput`](crate::output::DeleteDetectorOutput).
        pub fn build(self) -> crate::output::DeleteDetectorOutput {
            crate::output::DeleteDetectorOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteDetectorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDetectorOutput`](crate::output::DeleteDetectorOutput).
    pub fn builder() -> crate::output::delete_detector_output::Builder {
        crate::output::delete_detector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeclineInvitationsOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl DeclineInvitationsOutput {
    /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeclineInvitationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeclineInvitationsOutput`](crate::output::DeclineInvitationsOutput).
pub mod decline_invitations_output {

    /// A builder for [`DeclineInvitationsOutput`](crate::output::DeclineInvitationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of objects that contain the unprocessed account and a result string that explains why it was unprocessed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeclineInvitationsOutput`](crate::output::DeclineInvitationsOutput).
        pub fn build(self) -> crate::output::DeclineInvitationsOutput {
            crate::output::DeclineInvitationsOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeclineInvitationsOutput {
    /// Creates a new builder-style object to manufacture [`DeclineInvitationsOutput`](crate::output::DeclineInvitationsOutput).
    pub fn builder() -> crate::output::decline_invitations_output::Builder {
        crate::output::decline_invitations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateThreatIntelSetOutput {
    /// <p>The ID of the ThreatIntelSet resource.</p>
    #[doc(hidden)]
    pub threat_intel_set_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateThreatIntelSetOutput {
    /// <p>The ID of the ThreatIntelSet resource.</p>
    pub fn threat_intel_set_id(&self) -> std::option::Option<&str> {
        self.threat_intel_set_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateThreatIntelSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateThreatIntelSetOutput`](crate::output::CreateThreatIntelSetOutput).
pub mod create_threat_intel_set_output {

    /// A builder for [`CreateThreatIntelSetOutput`](crate::output::CreateThreatIntelSetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) threat_intel_set_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the ThreatIntelSet resource.</p>
        pub fn threat_intel_set_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.threat_intel_set_id = Some(input.into());
            self
        }
        /// <p>The ID of the ThreatIntelSet resource.</p>
        pub fn set_threat_intel_set_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.threat_intel_set_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateThreatIntelSetOutput`](crate::output::CreateThreatIntelSetOutput).
        pub fn build(self) -> crate::output::CreateThreatIntelSetOutput {
            crate::output::CreateThreatIntelSetOutput {
                threat_intel_set_id: self.threat_intel_set_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateThreatIntelSetOutput {
    /// Creates a new builder-style object to manufacture [`CreateThreatIntelSetOutput`](crate::output::CreateThreatIntelSetOutput).
    pub fn builder() -> crate::output::create_threat_intel_set_output::Builder {
        crate::output::create_threat_intel_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSampleFindingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateSampleFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSampleFindingsOutput`](crate::output::CreateSampleFindingsOutput).
pub mod create_sample_findings_output {

    /// A builder for [`CreateSampleFindingsOutput`](crate::output::CreateSampleFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSampleFindingsOutput`](crate::output::CreateSampleFindingsOutput).
        pub fn build(self) -> crate::output::CreateSampleFindingsOutput {
            crate::output::CreateSampleFindingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSampleFindingsOutput {
    /// Creates a new builder-style object to manufacture [`CreateSampleFindingsOutput`](crate::output::CreateSampleFindingsOutput).
    pub fn builder() -> crate::output::create_sample_findings_output::Builder {
        crate::output::create_sample_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePublishingDestinationOutput {
    /// <p>The ID of the publishing destination that is created.</p>
    #[doc(hidden)]
    pub destination_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreatePublishingDestinationOutput {
    /// <p>The ID of the publishing destination that is created.</p>
    pub fn destination_id(&self) -> std::option::Option<&str> {
        self.destination_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreatePublishingDestinationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreatePublishingDestinationOutput`](crate::output::CreatePublishingDestinationOutput).
pub mod create_publishing_destination_output {

    /// A builder for [`CreatePublishingDestinationOutput`](crate::output::CreatePublishingDestinationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) destination_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the publishing destination that is created.</p>
        pub fn destination_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.destination_id = Some(input.into());
            self
        }
        /// <p>The ID of the publishing destination that is created.</p>
        pub fn set_destination_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.destination_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreatePublishingDestinationOutput`](crate::output::CreatePublishingDestinationOutput).
        pub fn build(self) -> crate::output::CreatePublishingDestinationOutput {
            crate::output::CreatePublishingDestinationOutput {
                destination_id: self.destination_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreatePublishingDestinationOutput {
    /// Creates a new builder-style object to manufacture [`CreatePublishingDestinationOutput`](crate::output::CreatePublishingDestinationOutput).
    pub fn builder() -> crate::output::create_publishing_destination_output::Builder {
        crate::output::create_publishing_destination_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMembersOutput {
    /// <p>A list of objects that include the <code>accountIds</code> of the unprocessed accounts and a result string that explains why each was unprocessed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl CreateMembersOutput {
    /// <p>A list of objects that include the <code>accountIds</code> of the unprocessed accounts and a result string that explains why each was unprocessed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateMembersOutput`](crate::output::CreateMembersOutput).
pub mod create_members_output {

    /// A builder for [`CreateMembersOutput`](crate::output::CreateMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>A list of objects that include the <code>accountIds</code> of the unprocessed accounts and a result string that explains why each was unprocessed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>A list of objects that include the <code>accountIds</code> of the unprocessed accounts and a result string that explains why each was unprocessed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateMembersOutput`](crate::output::CreateMembersOutput).
        pub fn build(self) -> crate::output::CreateMembersOutput {
            crate::output::CreateMembersOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateMembersOutput {
    /// Creates a new builder-style object to manufacture [`CreateMembersOutput`](crate::output::CreateMembersOutput).
    pub fn builder() -> crate::output::create_members_output::Builder {
        crate::output::create_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateIpSetOutput {
    /// <p>The ID of the IPSet resource.</p>
    #[doc(hidden)]
    pub ip_set_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateIpSetOutput {
    /// <p>The ID of the IPSet resource.</p>
    pub fn ip_set_id(&self) -> std::option::Option<&str> {
        self.ip_set_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateIpSetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateIpSetOutput`](crate::output::CreateIpSetOutput).
pub mod create_ip_set_output {

    /// A builder for [`CreateIpSetOutput`](crate::output::CreateIpSetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ip_set_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the IPSet resource.</p>
        pub fn ip_set_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.ip_set_id = Some(input.into());
            self
        }
        /// <p>The ID of the IPSet resource.</p>
        pub fn set_ip_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.ip_set_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateIpSetOutput`](crate::output::CreateIpSetOutput).
        pub fn build(self) -> crate::output::CreateIpSetOutput {
            crate::output::CreateIpSetOutput {
                ip_set_id: self.ip_set_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateIpSetOutput {
    /// Creates a new builder-style object to manufacture [`CreateIpSetOutput`](crate::output::CreateIpSetOutput).
    pub fn builder() -> crate::output::create_ip_set_output::Builder {
        crate::output::create_ip_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFilterOutput {
    /// <p>The name of the successfully created filter.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateFilterOutput {
    /// <p>The name of the successfully created filter.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateFilterOutput`](crate::output::CreateFilterOutput).
pub mod create_filter_output {

    /// A builder for [`CreateFilterOutput`](crate::output::CreateFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the successfully created filter.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the successfully created filter.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateFilterOutput`](crate::output::CreateFilterOutput).
        pub fn build(self) -> crate::output::CreateFilterOutput {
            crate::output::CreateFilterOutput {
                name: self.name,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateFilterOutput {
    /// Creates a new builder-style object to manufacture [`CreateFilterOutput`](crate::output::CreateFilterOutput).
    pub fn builder() -> crate::output::create_filter_output::Builder {
        crate::output::create_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDetectorOutput {
    /// <p>The unique ID of the created detector.</p>
    #[doc(hidden)]
    pub detector_id: std::option::Option<std::string::String>,
    /// <p>Specifies the data sources that couldn't be enabled when GuardDuty was enabled for the first time.</p>
    #[doc(hidden)]
    pub unprocessed_data_sources: std::option::Option<crate::model::UnprocessedDataSourcesResult>,
    _request_id: Option<String>,
}
impl CreateDetectorOutput {
    /// <p>The unique ID of the created detector.</p>
    pub fn detector_id(&self) -> std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>Specifies the data sources that couldn't be enabled when GuardDuty was enabled for the first time.</p>
    pub fn unprocessed_data_sources(
        &self,
    ) -> std::option::Option<&crate::model::UnprocessedDataSourcesResult> {
        self.unprocessed_data_sources.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDetectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateDetectorOutput`](crate::output::CreateDetectorOutput).
pub mod create_detector_output {

    /// A builder for [`CreateDetectorOutput`](crate::output::CreateDetectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) detector_id: std::option::Option<std::string::String>,
        pub(crate) unprocessed_data_sources:
            std::option::Option<crate::model::UnprocessedDataSourcesResult>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique ID of the created detector.</p>
        pub fn detector_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.detector_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the created detector.</p>
        pub fn set_detector_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.detector_id = input;
            self
        }
        /// <p>Specifies the data sources that couldn't be enabled when GuardDuty was enabled for the first time.</p>
        pub fn unprocessed_data_sources(
            mut self,
            input: crate::model::UnprocessedDataSourcesResult,
        ) -> Self {
            self.unprocessed_data_sources = Some(input);
            self
        }
        /// <p>Specifies the data sources that couldn't be enabled when GuardDuty was enabled for the first time.</p>
        pub fn set_unprocessed_data_sources(
            mut self,
            input: std::option::Option<crate::model::UnprocessedDataSourcesResult>,
        ) -> Self {
            self.unprocessed_data_sources = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateDetectorOutput`](crate::output::CreateDetectorOutput).
        pub fn build(self) -> crate::output::CreateDetectorOutput {
            crate::output::CreateDetectorOutput {
                detector_id: self.detector_id,
                unprocessed_data_sources: self.unprocessed_data_sources,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateDetectorOutput {
    /// Creates a new builder-style object to manufacture [`CreateDetectorOutput`](crate::output::CreateDetectorOutput).
    pub fn builder() -> crate::output::create_detector_output::Builder {
        crate::output::create_detector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ArchiveFindingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ArchiveFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ArchiveFindingsOutput`](crate::output::ArchiveFindingsOutput).
pub mod archive_findings_output {

    /// A builder for [`ArchiveFindingsOutput`](crate::output::ArchiveFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ArchiveFindingsOutput`](crate::output::ArchiveFindingsOutput).
        pub fn build(self) -> crate::output::ArchiveFindingsOutput {
            crate::output::ArchiveFindingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ArchiveFindingsOutput {
    /// Creates a new builder-style object to manufacture [`ArchiveFindingsOutput`](crate::output::ArchiveFindingsOutput).
    pub fn builder() -> crate::output::archive_findings_output::Builder {
        crate::output::archive_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[deprecated(note = "This output is deprecated, use AcceptAdministratorInvitationResponse instead")]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptInvitationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AcceptInvitationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
pub mod accept_invitation_output {

    /// A builder for [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
        pub fn build(self) -> crate::output::AcceptInvitationOutput {
            crate::output::AcceptInvitationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptInvitationOutput {
    /// Creates a new builder-style object to manufacture [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
    pub fn builder() -> crate::output::accept_invitation_output::Builder {
        crate::output::accept_invitation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptAdministratorInvitationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AcceptAdministratorInvitationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptAdministratorInvitationOutput`](crate::output::AcceptAdministratorInvitationOutput).
pub mod accept_administrator_invitation_output {

    /// A builder for [`AcceptAdministratorInvitationOutput`](crate::output::AcceptAdministratorInvitationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptAdministratorInvitationOutput`](crate::output::AcceptAdministratorInvitationOutput).
        pub fn build(self) -> crate::output::AcceptAdministratorInvitationOutput {
            crate::output::AcceptAdministratorInvitationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptAdministratorInvitationOutput {
    /// Creates a new builder-style object to manufacture [`AcceptAdministratorInvitationOutput`](crate::output::AcceptAdministratorInvitationOutput).
    pub fn builder() -> crate::output::accept_administrator_invitation_output::Builder {
        crate::output::accept_administrator_invitation_output::Builder::default()
    }
}
