// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDetector`](crate::client::fluent_builders::CreateDetector) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`enable(bool)`](crate::client::fluent_builders::CreateDetector::enable) / [`set_enable(bool)`](crate::client::fluent_builders::CreateDetector::set_enable): <p>A Boolean value that specifies whether the detector is to be enabled.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateDetector::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateDetector::set_client_token): <p>The idempotency token for the create request.</p>
    ///   - [`finding_publishing_frequency(FindingPublishingFrequency)`](crate::client::fluent_builders::CreateDetector::finding_publishing_frequency) / [`set_finding_publishing_frequency(Option<FindingPublishingFrequency>)`](crate::client::fluent_builders::CreateDetector::set_finding_publishing_frequency): <p>A value that specifies how frequently updated findings are exported.</p>
    ///   - [`data_sources(DataSourceConfigurations)`](crate::client::fluent_builders::CreateDetector::data_sources) / [`set_data_sources(Option<DataSourceConfigurations>)`](crate::client::fluent_builders::CreateDetector::set_data_sources): <p>Describes which data sources will be enabled for the detector.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateDetector::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateDetector::set_tags): <p>The tags to be added to a new detector resource.</p>
    /// - On success, responds with [`CreateDetectorOutput`](crate::output::CreateDetectorOutput) with field(s):
    ///   - [`detector_id(Option<String>)`](crate::output::CreateDetectorOutput::detector_id): <p>The unique ID of the created detector.</p>
    ///   - [`unprocessed_data_sources(Option<UnprocessedDataSourcesResult>)`](crate::output::CreateDetectorOutput::unprocessed_data_sources): <p>Specifies the data sources that couldn't be enabled when GuardDuty was enabled for the first time.</p>
    /// - On failure, responds with [`SdkError<CreateDetectorError>`](crate::error::CreateDetectorError)
    pub fn create_detector(&self) -> crate::client::fluent_builders::CreateDetector {
        crate::client::fluent_builders::CreateDetector::new(self.handle.clone())
    }
}
