// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetThreatIntelSet`](crate::client::fluent_builders::GetThreatIntelSet) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::client::fluent_builders::GetThreatIntelSet::detector_id) / [`set_detector_id(Option<String>)`](crate::client::fluent_builders::GetThreatIntelSet::set_detector_id): <p>The unique ID of the detector that the threatIntelSet is associated with.</p>
    ///   - [`threat_intel_set_id(impl Into<String>)`](crate::client::fluent_builders::GetThreatIntelSet::threat_intel_set_id) / [`set_threat_intel_set_id(Option<String>)`](crate::client::fluent_builders::GetThreatIntelSet::set_threat_intel_set_id): <p>The unique ID of the threatIntelSet that you want to get.</p>
    /// - On success, responds with [`GetThreatIntelSetOutput`](crate::output::GetThreatIntelSetOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::GetThreatIntelSetOutput::name): <p>A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.</p>
    ///   - [`format(Option<ThreatIntelSetFormat>)`](crate::output::GetThreatIntelSetOutput::format): <p>The format of the threatIntelSet.</p>
    ///   - [`location(Option<String>)`](crate::output::GetThreatIntelSetOutput::location): <p>The URI of the file that contains the ThreatIntelSet. </p>
    ///   - [`status(Option<ThreatIntelSetStatus>)`](crate::output::GetThreatIntelSetOutput::status): <p>The status of threatIntelSet file uploaded.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::GetThreatIntelSetOutput::tags): <p>The tags of the threat list resource.</p>
    /// - On failure, responds with [`SdkError<GetThreatIntelSetError>`](crate::error::GetThreatIntelSetError)
    pub fn get_threat_intel_set(&self) -> crate::client::fluent_builders::GetThreatIntelSet {
        crate::client::fluent_builders::GetThreatIntelSet::new(self.handle.clone())
    }
}
