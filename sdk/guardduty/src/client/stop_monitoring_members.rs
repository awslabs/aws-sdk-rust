// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StopMonitoringMembers`](crate::operation::stop_monitoring_members::builders::StopMonitoringMembersFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`detector_id(impl Into<String>)`](crate::operation::stop_monitoring_members::builders::StopMonitoringMembersFluentBuilder::detector_id) / [`set_detector_id(Option<String>)`](crate::operation::stop_monitoring_members::builders::StopMonitoringMembersFluentBuilder::set_detector_id):<br>required: **true**<br><p>The unique ID of the detector associated with the GuardDuty administrator account that is monitoring member accounts.</p><br>
    ///   - [`account_ids(impl Into<String>)`](crate::operation::stop_monitoring_members::builders::StopMonitoringMembersFluentBuilder::account_ids) / [`set_account_ids(Option<Vec::<String>>)`](crate::operation::stop_monitoring_members::builders::StopMonitoringMembersFluentBuilder::set_account_ids):<br>required: **true**<br><p>A list of account IDs for the member accounts to stop monitoring.</p><br>
    /// - On success, responds with [`StopMonitoringMembersOutput`](crate::operation::stop_monitoring_members::StopMonitoringMembersOutput) with field(s):
    ///   - [`unprocessed_accounts(Option<Vec::<UnprocessedAccount>>)`](crate::operation::stop_monitoring_members::StopMonitoringMembersOutput::unprocessed_accounts): <p>A list of objects that contain an accountId for each account that could not be processed, and a result string that indicates why the account was not processed. </p>
    /// - On failure, responds with [`SdkError<StopMonitoringMembersError>`](crate::operation::stop_monitoring_members::StopMonitoringMembersError)
    pub fn stop_monitoring_members(&self) -> crate::operation::stop_monitoring_members::builders::StopMonitoringMembersFluentBuilder {
        crate::operation::stop_monitoring_members::builders::StopMonitoringMembersFluentBuilder::new(self.handle.clone())
    }
}
