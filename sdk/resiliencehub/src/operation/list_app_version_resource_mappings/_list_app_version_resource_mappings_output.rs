// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAppVersionResourceMappingsOutput {
    /// <p>Mappings used to map logical resources from the template to physical resources. You can use the mapping type <code>CFN_STACK</code> if the application template uses a logical stack name. Or you can map individual resources by using the mapping type <code>RESOURCE</code>. We recommend using the mapping type <code>CFN_STACK</code> if the application is backed by a CloudFormation stack.</p>
    #[doc(hidden)]
    pub resource_mappings: std::option::Option<std::vec::Vec<crate::types::ResourceMapping>>,
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAppVersionResourceMappingsOutput {
    /// <p>Mappings used to map logical resources from the template to physical resources. You can use the mapping type <code>CFN_STACK</code> if the application template uses a logical stack name. Or you can map individual resources by using the mapping type <code>RESOURCE</code>. We recommend using the mapping type <code>CFN_STACK</code> if the application is backed by a CloudFormation stack.</p>
    pub fn resource_mappings(&self) -> std::option::Option<&[crate::types::ResourceMapping]> {
        self.resource_mappings.as_deref()
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAppVersionResourceMappingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAppVersionResourceMappingsOutput {
    /// Creates a new builder-style object to manufacture [`ListAppVersionResourceMappingsOutput`](crate::operation::list_app_version_resource_mappings::ListAppVersionResourceMappingsOutput).
    pub fn builder() -> crate::operation::list_app_version_resource_mappings::builders::ListAppVersionResourceMappingsOutputBuilder{
        crate::operation::list_app_version_resource_mappings::builders::ListAppVersionResourceMappingsOutputBuilder::default()
    }
}

/// A builder for [`ListAppVersionResourceMappingsOutput`](crate::operation::list_app_version_resource_mappings::ListAppVersionResourceMappingsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAppVersionResourceMappingsOutputBuilder {
    pub(crate) resource_mappings: std::option::Option<std::vec::Vec<crate::types::ResourceMapping>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAppVersionResourceMappingsOutputBuilder {
    /// Appends an item to `resource_mappings`.
    ///
    /// To override the contents of this collection use [`set_resource_mappings`](Self::set_resource_mappings).
    ///
    /// <p>Mappings used to map logical resources from the template to physical resources. You can use the mapping type <code>CFN_STACK</code> if the application template uses a logical stack name. Or you can map individual resources by using the mapping type <code>RESOURCE</code>. We recommend using the mapping type <code>CFN_STACK</code> if the application is backed by a CloudFormation stack.</p>
    pub fn resource_mappings(mut self, input: crate::types::ResourceMapping) -> Self {
        let mut v = self.resource_mappings.unwrap_or_default();
        v.push(input);
        self.resource_mappings = Some(v);
        self
    }
    /// <p>Mappings used to map logical resources from the template to physical resources. You can use the mapping type <code>CFN_STACK</code> if the application template uses a logical stack name. Or you can map individual resources by using the mapping type <code>RESOURCE</code>. We recommend using the mapping type <code>CFN_STACK</code> if the application is backed by a CloudFormation stack.</p>
    pub fn set_resource_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceMapping>>,
    ) -> Self {
        self.resource_mappings = input;
        self
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListAppVersionResourceMappingsOutput`](crate::operation::list_app_version_resource_mappings::ListAppVersionResourceMappingsOutput).
    pub fn build(
        self,
    ) -> crate::operation::list_app_version_resource_mappings::ListAppVersionResourceMappingsOutput
    {
        crate::operation::list_app_version_resource_mappings::ListAppVersionResourceMappingsOutput {
            resource_mappings: self.resource_mappings,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
