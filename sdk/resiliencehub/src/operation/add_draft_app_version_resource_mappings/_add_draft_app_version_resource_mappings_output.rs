// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddDraftAppVersionResourceMappingsOutput {
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub app_arn: ::std::string::String,
    /// <p>The version of the application.</p>
    pub app_version: ::std::string::String,
    /// <p>List of sources that are used to map a logical resource from the template to a physical resource. You can use sources such as CloudFormation, Terraform state files, AppRegistry applications, or Amazon EKS.</p>
    pub resource_mappings: ::std::vec::Vec<crate::types::ResourceMapping>,
    _request_id: Option<String>,
}
impl AddDraftAppVersionResourceMappingsOutput {
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn app_arn(&self) -> &str {
        use std::ops::Deref;
        self.app_arn.deref()
    }
    /// <p>The version of the application.</p>
    pub fn app_version(&self) -> &str {
        use std::ops::Deref;
        self.app_version.deref()
    }
    /// <p>List of sources that are used to map a logical resource from the template to a physical resource. You can use sources such as CloudFormation, Terraform state files, AppRegistry applications, or Amazon EKS.</p>
    pub fn resource_mappings(&self) -> &[crate::types::ResourceMapping] {
        use std::ops::Deref;
        self.resource_mappings.deref()
    }
}
impl ::aws_http::request_id::RequestId for AddDraftAppVersionResourceMappingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddDraftAppVersionResourceMappingsOutput {
    /// Creates a new builder-style object to manufacture [`AddDraftAppVersionResourceMappingsOutput`](crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsOutput).
    pub fn builder() -> crate::operation::add_draft_app_version_resource_mappings::builders::AddDraftAppVersionResourceMappingsOutputBuilder {
        crate::operation::add_draft_app_version_resource_mappings::builders::AddDraftAppVersionResourceMappingsOutputBuilder::default()
    }
}

/// A builder for [`AddDraftAppVersionResourceMappingsOutput`](crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AddDraftAppVersionResourceMappingsOutputBuilder {
    pub(crate) app_arn: ::std::option::Option<::std::string::String>,
    pub(crate) app_version: ::std::option::Option<::std::string::String>,
    pub(crate) resource_mappings: ::std::option::Option<::std::vec::Vec<crate::types::ResourceMapping>>,
    _request_id: Option<String>,
}
impl AddDraftAppVersionResourceMappingsOutputBuilder {
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    /// This field is required.
    pub fn app_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn set_app_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn get_app_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_arn
    }
    /// <p>The version of the application.</p>
    /// This field is required.
    pub fn app_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the application.</p>
    pub fn set_app_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_version = input;
        self
    }
    /// <p>The version of the application.</p>
    pub fn get_app_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_version
    }
    /// Appends an item to `resource_mappings`.
    ///
    /// To override the contents of this collection use [`set_resource_mappings`](Self::set_resource_mappings).
    ///
    /// <p>List of sources that are used to map a logical resource from the template to a physical resource. You can use sources such as CloudFormation, Terraform state files, AppRegistry applications, or Amazon EKS.</p>
    pub fn resource_mappings(mut self, input: crate::types::ResourceMapping) -> Self {
        let mut v = self.resource_mappings.unwrap_or_default();
        v.push(input);
        self.resource_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of sources that are used to map a logical resource from the template to a physical resource. You can use sources such as CloudFormation, Terraform state files, AppRegistry applications, or Amazon EKS.</p>
    pub fn set_resource_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceMapping>>) -> Self {
        self.resource_mappings = input;
        self
    }
    /// <p>List of sources that are used to map a logical resource from the template to a physical resource. You can use sources such as CloudFormation, Terraform state files, AppRegistry applications, or Amazon EKS.</p>
    pub fn get_resource_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceMapping>> {
        &self.resource_mappings
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AddDraftAppVersionResourceMappingsOutput`](crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`app_arn`](crate::operation::add_draft_app_version_resource_mappings::builders::AddDraftAppVersionResourceMappingsOutputBuilder::app_arn)
    /// - [`app_version`](crate::operation::add_draft_app_version_resource_mappings::builders::AddDraftAppVersionResourceMappingsOutputBuilder::app_version)
    /// - [`resource_mappings`](crate::operation::add_draft_app_version_resource_mappings::builders::AddDraftAppVersionResourceMappingsOutputBuilder::resource_mappings)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsOutput {
                app_arn: self.app_arn.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "app_arn",
                        "app_arn was not specified but it is required when building AddDraftAppVersionResourceMappingsOutput",
                    )
                })?,
                app_version: self.app_version.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "app_version",
                        "app_version was not specified but it is required when building AddDraftAppVersionResourceMappingsOutput",
                    )
                })?,
                resource_mappings: self.resource_mappings.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "resource_mappings",
                        "resource_mappings was not specified but it is required when building AddDraftAppVersionResourceMappingsOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
