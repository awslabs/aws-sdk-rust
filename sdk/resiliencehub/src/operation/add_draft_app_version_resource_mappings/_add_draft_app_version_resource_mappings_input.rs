// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddDraftAppVersionResourceMappingsInput {
    /// <p>The Amazon Resource Name (ARN) of the application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    #[doc(hidden)]
    pub app_arn: std::option::Option<std::string::String>,
    /// <p> Mappings used to map logical resources from the template to physical resources. You can use the mapping type <code>CFN_STACK</code> if the application template uses a logical stack name. Or you can map individual resources by using the mapping type <code>RESOURCE</code>. We recommend using the mapping type <code>CFN_STACK</code> if the application is backed by a CloudFormation stack.</p>
    #[doc(hidden)]
    pub resource_mappings: std::option::Option<std::vec::Vec<crate::types::ResourceMapping>>,
}
impl AddDraftAppVersionResourceMappingsInput {
    /// <p>The Amazon Resource Name (ARN) of the application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn app_arn(&self) -> std::option::Option<&str> {
        self.app_arn.as_deref()
    }
    /// <p> Mappings used to map logical resources from the template to physical resources. You can use the mapping type <code>CFN_STACK</code> if the application template uses a logical stack name. Or you can map individual resources by using the mapping type <code>RESOURCE</code>. We recommend using the mapping type <code>CFN_STACK</code> if the application is backed by a CloudFormation stack.</p>
    pub fn resource_mappings(&self) -> std::option::Option<&[crate::types::ResourceMapping]> {
        self.resource_mappings.as_deref()
    }
}
impl AddDraftAppVersionResourceMappingsInput {
    /// Creates a new builder-style object to manufacture [`AddDraftAppVersionResourceMappingsInput`](crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsInput).
    pub fn builder() -> crate::operation::add_draft_app_version_resource_mappings::builders::AddDraftAppVersionResourceMappingsInputBuilder{
        crate::operation::add_draft_app_version_resource_mappings::builders::AddDraftAppVersionResourceMappingsInputBuilder::default()
    }
}

/// A builder for [`AddDraftAppVersionResourceMappingsInput`](crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AddDraftAppVersionResourceMappingsInputBuilder {
    pub(crate) app_arn: std::option::Option<std::string::String>,
    pub(crate) resource_mappings: std::option::Option<std::vec::Vec<crate::types::ResourceMapping>>,
}
impl AddDraftAppVersionResourceMappingsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn app_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_app_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_arn = input;
        self
    }
    /// Appends an item to `resource_mappings`.
    ///
    /// To override the contents of this collection use [`set_resource_mappings`](Self::set_resource_mappings).
    ///
    /// <p> Mappings used to map logical resources from the template to physical resources. You can use the mapping type <code>CFN_STACK</code> if the application template uses a logical stack name. Or you can map individual resources by using the mapping type <code>RESOURCE</code>. We recommend using the mapping type <code>CFN_STACK</code> if the application is backed by a CloudFormation stack.</p>
    pub fn resource_mappings(mut self, input: crate::types::ResourceMapping) -> Self {
        let mut v = self.resource_mappings.unwrap_or_default();
        v.push(input);
        self.resource_mappings = Some(v);
        self
    }
    /// <p> Mappings used to map logical resources from the template to physical resources. You can use the mapping type <code>CFN_STACK</code> if the application template uses a logical stack name. Or you can map individual resources by using the mapping type <code>RESOURCE</code>. We recommend using the mapping type <code>CFN_STACK</code> if the application is backed by a CloudFormation stack.</p>
    pub fn set_resource_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceMapping>>,
    ) -> Self {
        self.resource_mappings = input;
        self
    }
    /// Consumes the builder and constructs a [`AddDraftAppVersionResourceMappingsInput`](crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsInput).
    pub fn build(self) -> Result<crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::add_draft_app_version_resource_mappings::AddDraftAppVersionResourceMappingsInput {
                app_arn: self.app_arn
                ,
                resource_mappings: self.resource_mappings
                ,
            }
        )
    }
}
