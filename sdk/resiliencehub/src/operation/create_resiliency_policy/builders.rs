// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_resiliency_policy::_create_resiliency_policy_output::CreateResiliencyPolicyOutputBuilder;

pub use crate::operation::create_resiliency_policy::_create_resiliency_policy_input::CreateResiliencyPolicyInputBuilder;

/// Fluent builder constructing a request to `CreateResiliencyPolicy`.
///
/// <p>Creates a resiliency policy for an application.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateResiliencyPolicyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_resiliency_policy::builders::CreateResiliencyPolicyInputBuilder,
}
impl CreateResiliencyPolicyFluentBuilder {
    /// Creates a new `CreateResiliencyPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_resiliency_policy::CreateResiliencyPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_resiliency_policy::CreateResiliencyPolicyError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_resiliency_policy::CreateResiliencyPolicyOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_resiliency_policy::CreateResiliencyPolicyError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the policy</p>
    pub fn policy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy_name(input.into());
        self
    }
    /// <p>The name of the policy</p>
    pub fn set_policy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_policy_name(input);
        self
    }
    /// <p>The description for the policy.</p>
    pub fn policy_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy_description(input.into());
        self
    }
    /// <p>The description for the policy.</p>
    pub fn set_policy_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_policy_description(input);
        self
    }
    /// <p>Specifies a high-level geographical location constraint for where your resilience policy data can be stored.</p>
    pub fn data_location_constraint(mut self, input: crate::types::DataLocationConstraint) -> Self {
        self.inner = self.inner.data_location_constraint(input);
        self
    }
    /// <p>Specifies a high-level geographical location constraint for where your resilience policy data can be stored.</p>
    pub fn set_data_location_constraint(
        mut self,
        input: std::option::Option<crate::types::DataLocationConstraint>,
    ) -> Self {
        self.inner = self.inner.set_data_location_constraint(input);
        self
    }
    /// <p>The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).</p>
    pub fn tier(mut self, input: crate::types::ResiliencyPolicyTier) -> Self {
        self.inner = self.inner.tier(input);
        self
    }
    /// <p>The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).</p>
    pub fn set_tier(
        mut self,
        input: std::option::Option<crate::types::ResiliencyPolicyTier>,
    ) -> Self {
        self.inner = self.inner.set_tier(input);
        self
    }
    /// Adds a key-value pair to `policy`.
    ///
    /// To override the contents of this collection use [`set_policy`](Self::set_policy).
    ///
    /// <p>The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.</p>
    pub fn policy(
        mut self,
        k: crate::types::DisruptionType,
        v: crate::types::FailurePolicy,
    ) -> Self {
        self.inner = self.inner.policy(k, v);
        self
    }
    /// <p>The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.</p>
    pub fn set_policy(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::DisruptionType, crate::types::FailurePolicy>,
        >,
    ) -> Self {
        self.inner = self.inner.set_policy(input);
        self
    }
    /// <p>Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
