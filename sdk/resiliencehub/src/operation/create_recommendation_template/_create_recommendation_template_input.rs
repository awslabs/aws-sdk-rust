// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateRecommendationTemplateInput {
    /// <p>Identifiers for the recommendations used to create a recommendation template.</p>
    #[doc(hidden)]
    pub recommendation_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The format for the recommendation template.</p>
    /// <dl>
    /// <dt>
    /// CfnJson
    /// </dt>
    /// <dd>
    /// <p>The template is CloudFormation JSON.</p>
    /// </dd>
    /// <dt>
    /// CfnYaml
    /// </dt>
    /// <dd>
    /// <p>The template is CloudFormation YAML.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::TemplateFormat>,
    /// <p>An array of strings that specify the recommendation template type or types.</p>
    /// <dl>
    /// <dt>
    /// Alarm
    /// </dt>
    /// <dd>
    /// <p>The template is an <code>AlarmRecommendation</code> template.</p>
    /// </dd>
    /// <dt>
    /// Sop
    /// </dt>
    /// <dd>
    /// <p>The template is a <code>SopRecommendation</code> template.</p>
    /// </dd>
    /// <dt>
    /// Test
    /// </dt>
    /// <dd>
    /// <p>The template is a <code>TestRecommendation</code> template.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub recommendation_types:
        std::option::Option<std::vec::Vec<crate::types::RenderRecommendationType>>,
    /// <p>The Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    #[doc(hidden)]
    pub assessment_arn: std::option::Option<std::string::String>,
    /// <p>The name for the recommendation template.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The name of the Amazon S3 bucket that will contain the recommendation template.</p>
    #[doc(hidden)]
    pub bucket_name: std::option::Option<std::string::String>,
}
impl CreateRecommendationTemplateInput {
    /// <p>Identifiers for the recommendations used to create a recommendation template.</p>
    pub fn recommendation_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.recommendation_ids.as_deref()
    }
    /// <p>The format for the recommendation template.</p>
    /// <dl>
    /// <dt>
    /// CfnJson
    /// </dt>
    /// <dd>
    /// <p>The template is CloudFormation JSON.</p>
    /// </dd>
    /// <dt>
    /// CfnYaml
    /// </dt>
    /// <dd>
    /// <p>The template is CloudFormation YAML.</p>
    /// </dd>
    /// </dl>
    pub fn format(&self) -> std::option::Option<&crate::types::TemplateFormat> {
        self.format.as_ref()
    }
    /// <p>An array of strings that specify the recommendation template type or types.</p>
    /// <dl>
    /// <dt>
    /// Alarm
    /// </dt>
    /// <dd>
    /// <p>The template is an <code>AlarmRecommendation</code> template.</p>
    /// </dd>
    /// <dt>
    /// Sop
    /// </dt>
    /// <dd>
    /// <p>The template is a <code>SopRecommendation</code> template.</p>
    /// </dd>
    /// <dt>
    /// Test
    /// </dt>
    /// <dd>
    /// <p>The template is a <code>TestRecommendation</code> template.</p>
    /// </dd>
    /// </dl>
    pub fn recommendation_types(
        &self,
    ) -> std::option::Option<&[crate::types::RenderRecommendationType]> {
        self.recommendation_types.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn assessment_arn(&self) -> std::option::Option<&str> {
        self.assessment_arn.as_deref()
    }
    /// <p>The name for the recommendation template.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The name of the Amazon S3 bucket that will contain the recommendation template.</p>
    pub fn bucket_name(&self) -> std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
}
impl std::fmt::Debug for CreateRecommendationTemplateInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRecommendationTemplateInput");
        formatter.field("recommendation_ids", &self.recommendation_ids);
        formatter.field("format", &self.format);
        formatter.field("recommendation_types", &self.recommendation_types);
        formatter.field("assessment_arn", &self.assessment_arn);
        formatter.field("name", &self.name);
        formatter.field("client_token", &self.client_token);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("bucket_name", &self.bucket_name);
        formatter.finish()
    }
}
impl CreateRecommendationTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateRecommendationTemplateInput`](crate::operation::create_recommendation_template::CreateRecommendationTemplateInput).
    pub fn builder() -> crate::operation::create_recommendation_template::builders::CreateRecommendationTemplateInputBuilder{
        crate::operation::create_recommendation_template::builders::CreateRecommendationTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateRecommendationTemplateInput`](crate::operation::create_recommendation_template::CreateRecommendationTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateRecommendationTemplateInputBuilder {
    pub(crate) recommendation_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) format: std::option::Option<crate::types::TemplateFormat>,
    pub(crate) recommendation_types:
        std::option::Option<std::vec::Vec<crate::types::RenderRecommendationType>>,
    pub(crate) assessment_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) bucket_name: std::option::Option<std::string::String>,
}
impl CreateRecommendationTemplateInputBuilder {
    /// Appends an item to `recommendation_ids`.
    ///
    /// To override the contents of this collection use [`set_recommendation_ids`](Self::set_recommendation_ids).
    ///
    /// <p>Identifiers for the recommendations used to create a recommendation template.</p>
    pub fn recommendation_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.recommendation_ids.unwrap_or_default();
        v.push(input.into());
        self.recommendation_ids = Some(v);
        self
    }
    /// <p>Identifiers for the recommendations used to create a recommendation template.</p>
    pub fn set_recommendation_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.recommendation_ids = input;
        self
    }
    /// <p>The format for the recommendation template.</p>
    /// <dl>
    /// <dt>
    /// CfnJson
    /// </dt>
    /// <dd>
    /// <p>The template is CloudFormation JSON.</p>
    /// </dd>
    /// <dt>
    /// CfnYaml
    /// </dt>
    /// <dd>
    /// <p>The template is CloudFormation YAML.</p>
    /// </dd>
    /// </dl>
    pub fn format(mut self, input: crate::types::TemplateFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>The format for the recommendation template.</p>
    /// <dl>
    /// <dt>
    /// CfnJson
    /// </dt>
    /// <dd>
    /// <p>The template is CloudFormation JSON.</p>
    /// </dd>
    /// <dt>
    /// CfnYaml
    /// </dt>
    /// <dd>
    /// <p>The template is CloudFormation YAML.</p>
    /// </dd>
    /// </dl>
    pub fn set_format(mut self, input: std::option::Option<crate::types::TemplateFormat>) -> Self {
        self.format = input;
        self
    }
    /// Appends an item to `recommendation_types`.
    ///
    /// To override the contents of this collection use [`set_recommendation_types`](Self::set_recommendation_types).
    ///
    /// <p>An array of strings that specify the recommendation template type or types.</p>
    /// <dl>
    /// <dt>
    /// Alarm
    /// </dt>
    /// <dd>
    /// <p>The template is an <code>AlarmRecommendation</code> template.</p>
    /// </dd>
    /// <dt>
    /// Sop
    /// </dt>
    /// <dd>
    /// <p>The template is a <code>SopRecommendation</code> template.</p>
    /// </dd>
    /// <dt>
    /// Test
    /// </dt>
    /// <dd>
    /// <p>The template is a <code>TestRecommendation</code> template.</p>
    /// </dd>
    /// </dl>
    pub fn recommendation_types(mut self, input: crate::types::RenderRecommendationType) -> Self {
        let mut v = self.recommendation_types.unwrap_or_default();
        v.push(input);
        self.recommendation_types = Some(v);
        self
    }
    /// <p>An array of strings that specify the recommendation template type or types.</p>
    /// <dl>
    /// <dt>
    /// Alarm
    /// </dt>
    /// <dd>
    /// <p>The template is an <code>AlarmRecommendation</code> template.</p>
    /// </dd>
    /// <dt>
    /// Sop
    /// </dt>
    /// <dd>
    /// <p>The template is a <code>SopRecommendation</code> template.</p>
    /// </dd>
    /// <dt>
    /// Test
    /// </dt>
    /// <dd>
    /// <p>The template is a <code>TestRecommendation</code> template.</p>
    /// </dd>
    /// </dl>
    pub fn set_recommendation_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RenderRecommendationType>>,
    ) -> Self {
        self.recommendation_types = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn assessment_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.assessment_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the assessment. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app-assessment/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_assessment_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assessment_arn = input;
        self
    }
    /// <p>The name for the recommendation template.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name for the recommendation template.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket that will contain the recommendation template.</p>
    pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket that will contain the recommendation template.</p>
    pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateRecommendationTemplateInput`](crate::operation::create_recommendation_template::CreateRecommendationTemplateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_recommendation_template::CreateRecommendationTemplateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_recommendation_template::CreateRecommendationTemplateInput {
                recommendation_ids: self.recommendation_ids,
                format: self.format,
                recommendation_types: self.recommendation_types,
                assessment_arn: self.assessment_arn,
                name: self.name,
                client_token: self.client_token,
                tags: self.tags,
                bucket_name: self.bucket_name,
            },
        )
    }
}
impl std::fmt::Debug for CreateRecommendationTemplateInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRecommendationTemplateInputBuilder");
        formatter.field("recommendation_ids", &self.recommendation_ids);
        formatter.field("format", &self.format);
        formatter.field("recommendation_types", &self.recommendation_types);
        formatter.field("assessment_arn", &self.assessment_arn);
        formatter.field("name", &self.name);
        formatter.field("client_token", &self.client_token);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("bucket_name", &self.bucket_name);
        formatter.finish()
    }
}
