// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_resources_to_draft_app_version::_import_resources_to_draft_app_version_output::ImportResourcesToDraftAppVersionOutputBuilder;

pub use crate::operation::import_resources_to_draft_app_version::_import_resources_to_draft_app_version_input::ImportResourcesToDraftAppVersionInputBuilder;

impl crate::operation::import_resources_to_draft_app_version::builders::ImportResourcesToDraftAppVersionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.import_resources_to_draft_app_version();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ImportResourcesToDraftAppVersion`.
///
/// <p>Imports resources to Resilience Hub application draft version from different input sources. For more information about the input sources supported by Resilience Hub, see <a href="https://docs.aws.amazon.com/resilience-hub/latest/userguide/discover-structure.html">Discover the structure and describe your Resilience Hub application</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ImportResourcesToDraftAppVersionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_resources_to_draft_app_version::builders::ImportResourcesToDraftAppVersionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput,
        crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionError,
    > for ImportResourcesToDraftAppVersionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput,
            crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ImportResourcesToDraftAppVersionFluentBuilder {
    /// Creates a new `ImportResourcesToDraftAppVersion`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ImportResourcesToDraftAppVersion as a reference.
    pub fn as_input(&self) -> &crate::operation::import_resources_to_draft_app_version::builders::ImportResourcesToDraftAppVersionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersion::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersion::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput,
        crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn app_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.app_arn(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn set_app_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_app_arn(input);
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn get_app_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_app_arn()
    }
    ///
    /// Appends an item to `sourceArns`.
    ///
    /// To override the contents of this collection use [`set_source_arns`](Self::set_source_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) for the resources.</p>
    pub fn source_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_arns(input.into());
        self
    }
    /// <p>The Amazon Resource Names (ARNs) for the resources.</p>
    pub fn set_source_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_source_arns(input);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) for the resources.</p>
    pub fn get_source_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_source_arns()
    }
    ///
    /// Appends an item to `terraformSources`.
    ///
    /// To override the contents of this collection use [`set_terraform_sources`](Self::set_terraform_sources).
    ///
    /// <p>A list of terraform file s3 URLs you need to import.</p>
    pub fn terraform_sources(mut self, input: crate::types::TerraformSource) -> Self {
        self.inner = self.inner.terraform_sources(input);
        self
    }
    /// <p>A list of terraform file s3 URLs you need to import.</p>
    pub fn set_terraform_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TerraformSource>>) -> Self {
        self.inner = self.inner.set_terraform_sources(input);
        self
    }
    /// <p>A list of terraform file s3 URLs you need to import.</p>
    pub fn get_terraform_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TerraformSource>> {
        self.inner.get_terraform_sources()
    }
    /// <p>The import strategy you would like to set to import resources into Resilience Hub application.</p>
    pub fn import_strategy(mut self, input: crate::types::ResourceImportStrategyType) -> Self {
        self.inner = self.inner.import_strategy(input);
        self
    }
    /// <p>The import strategy you would like to set to import resources into Resilience Hub application.</p>
    pub fn set_import_strategy(mut self, input: ::std::option::Option<crate::types::ResourceImportStrategyType>) -> Self {
        self.inner = self.inner.set_import_strategy(input);
        self
    }
    /// <p>The import strategy you would like to set to import resources into Resilience Hub application.</p>
    pub fn get_import_strategy(&self) -> &::std::option::Option<crate::types::ResourceImportStrategyType> {
        self.inner.get_import_strategy()
    }
    ///
    /// Appends an item to `eksSources`.
    ///
    /// To override the contents of this collection use [`set_eks_sources`](Self::set_eks_sources).
    ///
    /// <p>The input sources of the Amazon Elastic Kubernetes Service resources you need to import.</p>
    pub fn eks_sources(mut self, input: crate::types::EksSource) -> Self {
        self.inner = self.inner.eks_sources(input);
        self
    }
    /// <p>The input sources of the Amazon Elastic Kubernetes Service resources you need to import.</p>
    pub fn set_eks_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EksSource>>) -> Self {
        self.inner = self.inner.set_eks_sources(input);
        self
    }
    /// <p>The input sources of the Amazon Elastic Kubernetes Service resources you need to import.</p>
    pub fn get_eks_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EksSource>> {
        self.inner.get_eks_sources()
    }
}
