// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportResourcesToDraftAppVersionOutput {
    /// <p>The Amazon Resource Name (ARN) of the application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    #[doc(hidden)]
    pub app_arn: std::option::Option<std::string::String>,
    /// <p>The version of the application.</p>
    #[doc(hidden)]
    pub app_version: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Names (ARNs) for the resources that you imported.</p>
    #[doc(hidden)]
    pub source_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The status of the action.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ResourceImportStatusType>,
    /// <p> A list of terraform file s3 URLs you need to import. </p>
    #[doc(hidden)]
    pub terraform_sources: std::option::Option<std::vec::Vec<crate::types::TerraformSource>>,
    _request_id: Option<String>,
}
impl ImportResourcesToDraftAppVersionOutput {
    /// <p>The Amazon Resource Name (ARN) of the application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn app_arn(&self) -> std::option::Option<&str> {
        self.app_arn.as_deref()
    }
    /// <p>The version of the application.</p>
    pub fn app_version(&self) -> std::option::Option<&str> {
        self.app_version.as_deref()
    }
    /// <p>The Amazon Resource Names (ARNs) for the resources that you imported.</p>
    pub fn source_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.source_arns.as_deref()
    }
    /// <p>The status of the action.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ResourceImportStatusType> {
        self.status.as_ref()
    }
    /// <p> A list of terraform file s3 URLs you need to import. </p>
    pub fn terraform_sources(&self) -> std::option::Option<&[crate::types::TerraformSource]> {
        self.terraform_sources.as_deref()
    }
}
impl aws_http::request_id::RequestId for ImportResourcesToDraftAppVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ImportResourcesToDraftAppVersionOutput {
    /// Creates a new builder-style object to manufacture [`ImportResourcesToDraftAppVersionOutput`](crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput).
    pub fn builder() -> crate::operation::import_resources_to_draft_app_version::builders::ImportResourcesToDraftAppVersionOutputBuilder{
        crate::operation::import_resources_to_draft_app_version::builders::ImportResourcesToDraftAppVersionOutputBuilder::default()
    }
}

/// A builder for [`ImportResourcesToDraftAppVersionOutput`](crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportResourcesToDraftAppVersionOutputBuilder {
    pub(crate) app_arn: std::option::Option<std::string::String>,
    pub(crate) app_version: std::option::Option<std::string::String>,
    pub(crate) source_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::ResourceImportStatusType>,
    pub(crate) terraform_sources: std::option::Option<std::vec::Vec<crate::types::TerraformSource>>,
    _request_id: Option<String>,
}
impl ImportResourcesToDraftAppVersionOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn app_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_app_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_arn = input;
        self
    }
    /// <p>The version of the application.</p>
    pub fn app_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_version = Some(input.into());
        self
    }
    /// <p>The version of the application.</p>
    pub fn set_app_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_version = input;
        self
    }
    /// Appends an item to `source_arns`.
    ///
    /// To override the contents of this collection use [`set_source_arns`](Self::set_source_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) for the resources that you imported.</p>
    pub fn source_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.source_arns.unwrap_or_default();
        v.push(input.into());
        self.source_arns = Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) for the resources that you imported.</p>
    pub fn set_source_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.source_arns = input;
        self
    }
    /// <p>The status of the action.</p>
    pub fn status(mut self, input: crate::types::ResourceImportStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the action.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ResourceImportStatusType>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `terraform_sources`.
    ///
    /// To override the contents of this collection use [`set_terraform_sources`](Self::set_terraform_sources).
    ///
    /// <p> A list of terraform file s3 URLs you need to import. </p>
    pub fn terraform_sources(mut self, input: crate::types::TerraformSource) -> Self {
        let mut v = self.terraform_sources.unwrap_or_default();
        v.push(input);
        self.terraform_sources = Some(v);
        self
    }
    /// <p> A list of terraform file s3 URLs you need to import. </p>
    pub fn set_terraform_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TerraformSource>>,
    ) -> Self {
        self.terraform_sources = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ImportResourcesToDraftAppVersionOutput`](crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput).
    pub fn build(self) -> crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput{
        crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionOutput {
            app_arn: self.app_arn
            ,
            app_version: self.app_version
            ,
            source_arns: self.source_arns
            ,
            status: self.status
            ,
            terraform_sources: self.terraform_sources
            ,
            _request_id: self._request_id,
        }
    }
}
