// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_alarm_recommendations_output_next_token(
    input: &crate::operation::list_alarm_recommendations::ListAlarmRecommendationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_app_assessments_output_next_token(
    input: &crate::operation::list_app_assessments::ListAppAssessmentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_app_component_compliances_output_next_token(
    input: &crate::operation::list_app_component_compliances::ListAppComponentCompliancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_app_component_recommendations_output_next_token(
    input: &crate::operation::list_app_component_recommendations::ListAppComponentRecommendationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_app_version_resource_mappings_output_next_token(
    input: &crate::operation::list_app_version_resource_mappings::ListAppVersionResourceMappingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_app_version_resources_output_next_token(
    input: &crate::operation::list_app_version_resources::ListAppVersionResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_app_versions_output_next_token(
    input: &crate::operation::list_app_versions::ListAppVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_apps_output_next_token(
    input: &crate::operation::list_apps::ListAppsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_recommendation_templates_output_next_token(
    input: &crate::operation::list_recommendation_templates::ListRecommendationTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resiliency_policies_output_next_token(
    input: &crate::operation::list_resiliency_policies::ListResiliencyPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_sop_recommendations_output_next_token(
    input: &crate::operation::list_sop_recommendations::ListSopRecommendationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_suggested_resiliency_policies_output_next_token(
    input: &crate::operation::list_suggested_resiliency_policies::ListSuggestedResiliencyPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_test_recommendations_output_next_token(
    input: &crate::operation::list_test_recommendations::ListTestRecommendationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_unsupported_app_version_resources_output_next_token(
    input: &crate::operation::list_unsupported_app_version_resources::ListUnsupportedAppVersionResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
