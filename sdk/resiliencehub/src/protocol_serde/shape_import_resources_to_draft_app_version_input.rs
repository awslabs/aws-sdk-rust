// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_import_resources_to_draft_app_version_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::import_resources_to_draft_app_version::ImportResourcesToDraftAppVersionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.app_arn {
        object.key("appArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.eks_sources {
        let mut array_3 = object.key("eksSources").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_eks_source::ser_eks_source(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.import_strategy {
        object.key("importStrategy").string(var_6.as_str());
    }
    if let Some(var_7) = &input.source_arns {
        let mut array_8 = object.key("sourceArns").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.terraform_sources {
        let mut array_11 = object.key("terraformSources").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_terraform_source::ser_terraform_source(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}
