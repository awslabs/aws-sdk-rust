// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a recommendation for a CloudWatch alarm.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AlarmRecommendation {
    /// <p>Identifier of the alarm recommendation.</p>
    pub recommendation_id: ::std::string::String,
    /// <p>Reference identifier of the alarm recommendation.</p>
    pub reference_id: ::std::string::String,
    /// <p>Name of the alarm recommendation.</p>
    pub name: ::std::string::String,
    /// <p>Description of the alarm recommendation.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Type of alarm recommendation.</p>
    pub r#type: crate::types::AlarmType,
    /// <p>Application Component name for the CloudWatch alarm recommendation. This name is saved as the first item in the <code>appComponentNames</code> list.</p>
    #[deprecated(
        note = "An alarm recommendation can be attached to multiple Application Components, hence this property will be replaced by the new property 'appComponentNames'."
    )]
    pub app_component_name: ::std::option::Option<::std::string::String>,
    /// <p>List of CloudWatch alarm recommendations.</p>
    pub items: ::std::option::Option<::std::vec::Vec<crate::types::RecommendationItem>>,
    /// <p>The prerequisite for the alarm recommendation.</p>
    pub prerequisite: ::std::option::Option<::std::string::String>,
    /// <p>List of Application Component names for the CloudWatch alarm recommendation.</p>
    pub app_component_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AlarmRecommendation {
    /// <p>Identifier of the alarm recommendation.</p>
    pub fn recommendation_id(&self) -> &str {
        use std::ops::Deref;
        self.recommendation_id.deref()
    }
    /// <p>Reference identifier of the alarm recommendation.</p>
    pub fn reference_id(&self) -> &str {
        use std::ops::Deref;
        self.reference_id.deref()
    }
    /// <p>Name of the alarm recommendation.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Description of the alarm recommendation.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Type of alarm recommendation.</p>
    pub fn r#type(&self) -> &crate::types::AlarmType {
        &self.r#type
    }
    /// <p>Application Component name for the CloudWatch alarm recommendation. This name is saved as the first item in the <code>appComponentNames</code> list.</p>
    #[deprecated(
        note = "An alarm recommendation can be attached to multiple Application Components, hence this property will be replaced by the new property 'appComponentNames'."
    )]
    pub fn app_component_name(&self) -> ::std::option::Option<&str> {
        self.app_component_name.as_deref()
    }
    /// <p>List of CloudWatch alarm recommendations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.items.is_none()`.
    pub fn items(&self) -> &[crate::types::RecommendationItem] {
        self.items.as_deref().unwrap_or_default()
    }
    /// <p>The prerequisite for the alarm recommendation.</p>
    pub fn prerequisite(&self) -> ::std::option::Option<&str> {
        self.prerequisite.as_deref()
    }
    /// <p>List of Application Component names for the CloudWatch alarm recommendation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.app_component_names.is_none()`.
    pub fn app_component_names(&self) -> &[::std::string::String] {
        self.app_component_names.as_deref().unwrap_or_default()
    }
}
impl AlarmRecommendation {
    /// Creates a new builder-style object to manufacture [`AlarmRecommendation`](crate::types::AlarmRecommendation).
    pub fn builder() -> crate::types::builders::AlarmRecommendationBuilder {
        crate::types::builders::AlarmRecommendationBuilder::default()
    }
}

/// A builder for [`AlarmRecommendation`](crate::types::AlarmRecommendation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AlarmRecommendationBuilder {
    pub(crate) recommendation_id: ::std::option::Option<::std::string::String>,
    pub(crate) reference_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::AlarmType>,
    pub(crate) app_component_name: ::std::option::Option<::std::string::String>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::RecommendationItem>>,
    pub(crate) prerequisite: ::std::option::Option<::std::string::String>,
    pub(crate) app_component_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AlarmRecommendationBuilder {
    /// <p>Identifier of the alarm recommendation.</p>
    /// This field is required.
    pub fn recommendation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommendation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of the alarm recommendation.</p>
    pub fn set_recommendation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommendation_id = input;
        self
    }
    /// <p>Identifier of the alarm recommendation.</p>
    pub fn get_recommendation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommendation_id
    }
    /// <p>Reference identifier of the alarm recommendation.</p>
    /// This field is required.
    pub fn reference_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reference_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reference identifier of the alarm recommendation.</p>
    pub fn set_reference_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reference_id = input;
        self
    }
    /// <p>Reference identifier of the alarm recommendation.</p>
    pub fn get_reference_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reference_id
    }
    /// <p>Name of the alarm recommendation.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the alarm recommendation.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the alarm recommendation.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Description of the alarm recommendation.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the alarm recommendation.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the alarm recommendation.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Type of alarm recommendation.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AlarmType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of alarm recommendation.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AlarmType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of alarm recommendation.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AlarmType> {
        &self.r#type
    }
    /// <p>Application Component name for the CloudWatch alarm recommendation. This name is saved as the first item in the <code>appComponentNames</code> list.</p>
    #[deprecated(
        note = "An alarm recommendation can be attached to multiple Application Components, hence this property will be replaced by the new property 'appComponentNames'."
    )]
    pub fn app_component_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_component_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Application Component name for the CloudWatch alarm recommendation. This name is saved as the first item in the <code>appComponentNames</code> list.</p>
    #[deprecated(
        note = "An alarm recommendation can be attached to multiple Application Components, hence this property will be replaced by the new property 'appComponentNames'."
    )]
    pub fn set_app_component_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_component_name = input;
        self
    }
    /// <p>Application Component name for the CloudWatch alarm recommendation. This name is saved as the first item in the <code>appComponentNames</code> list.</p>
    #[deprecated(
        note = "An alarm recommendation can be attached to multiple Application Components, hence this property will be replaced by the new property 'appComponentNames'."
    )]
    pub fn get_app_component_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_component_name
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>List of CloudWatch alarm recommendations.</p>
    pub fn items(mut self, input: crate::types::RecommendationItem) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of CloudWatch alarm recommendations.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RecommendationItem>>) -> Self {
        self.items = input;
        self
    }
    /// <p>List of CloudWatch alarm recommendations.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RecommendationItem>> {
        &self.items
    }
    /// <p>The prerequisite for the alarm recommendation.</p>
    pub fn prerequisite(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prerequisite = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prerequisite for the alarm recommendation.</p>
    pub fn set_prerequisite(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prerequisite = input;
        self
    }
    /// <p>The prerequisite for the alarm recommendation.</p>
    pub fn get_prerequisite(&self) -> &::std::option::Option<::std::string::String> {
        &self.prerequisite
    }
    /// Appends an item to `app_component_names`.
    ///
    /// To override the contents of this collection use [`set_app_component_names`](Self::set_app_component_names).
    ///
    /// <p>List of Application Component names for the CloudWatch alarm recommendation.</p>
    pub fn app_component_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.app_component_names.unwrap_or_default();
        v.push(input.into());
        self.app_component_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of Application Component names for the CloudWatch alarm recommendation.</p>
    pub fn set_app_component_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.app_component_names = input;
        self
    }
    /// <p>List of Application Component names for the CloudWatch alarm recommendation.</p>
    pub fn get_app_component_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.app_component_names
    }
    /// Consumes the builder and constructs a [`AlarmRecommendation`](crate::types::AlarmRecommendation).
    /// This method will fail if any of the following fields are not set:
    /// - [`recommendation_id`](crate::types::builders::AlarmRecommendationBuilder::recommendation_id)
    /// - [`reference_id`](crate::types::builders::AlarmRecommendationBuilder::reference_id)
    /// - [`name`](crate::types::builders::AlarmRecommendationBuilder::name)
    /// - [`r#type`](crate::types::builders::AlarmRecommendationBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::AlarmRecommendation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AlarmRecommendation {
            recommendation_id: self.recommendation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "recommendation_id",
                    "recommendation_id was not specified but it is required when building AlarmRecommendation",
                )
            })?,
            reference_id: self.reference_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "reference_id",
                    "reference_id was not specified but it is required when building AlarmRecommendation",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AlarmRecommendation",
                )
            })?,
            description: self.description,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AlarmRecommendation",
                )
            })?,
            app_component_name: self.app_component_name,
            items: self.items,
            prerequisite: self.prerequisite,
            app_component_names: self.app_component_names,
        })
    }
}
