// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PermissionModel {
    /// <p>Defines how Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your Amazon Web Services account, or by using the credentials of the current IAM user.</p>
    pub r#type: crate::types::PermissionModelType,
    /// <p>Existing Amazon Web Services IAM role name in the primary Amazon Web Services account that will be assumed by Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.</p> <note>
    /// <p>You must have <code>iam:passRole</code> permission for this role while creating or updating the application.</p>
    /// </note>
    pub invoker_role_name: ::std::option::Option<::std::string::String>,
    /// <p>Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.</p> <note>
    /// <ul>
    /// <li> <p>These ARNs are required only when your resources are in other accounts and you have different role name in these accounts. Else, the invoker role name will be used in the other accounts.</p> </li>
    /// <li> <p>These roles must have a trust policy with <code>iam:AssumeRole</code> permission to the invoker role in the primary account.</p> </li>
    /// </ul>
    /// </note>
    pub cross_account_role_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PermissionModel {
    /// <p>Defines how Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your Amazon Web Services account, or by using the credentials of the current IAM user.</p>
    pub fn r#type(&self) -> &crate::types::PermissionModelType {
        &self.r#type
    }
    /// <p>Existing Amazon Web Services IAM role name in the primary Amazon Web Services account that will be assumed by Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.</p> <note>
    /// <p>You must have <code>iam:passRole</code> permission for this role while creating or updating the application.</p>
    /// </note>
    pub fn invoker_role_name(&self) -> ::std::option::Option<&str> {
        self.invoker_role_name.as_deref()
    }
    /// <p>Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.</p> <note>
    /// <ul>
    /// <li> <p>These ARNs are required only when your resources are in other accounts and you have different role name in these accounts. Else, the invoker role name will be used in the other accounts.</p> </li>
    /// <li> <p>These roles must have a trust policy with <code>iam:AssumeRole</code> permission to the invoker role in the primary account.</p> </li>
    /// </ul>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cross_account_role_arns.is_none()`.
    pub fn cross_account_role_arns(&self) -> &[::std::string::String] {
        self.cross_account_role_arns.as_deref().unwrap_or_default()
    }
}
impl PermissionModel {
    /// Creates a new builder-style object to manufacture [`PermissionModel`](crate::types::PermissionModel).
    pub fn builder() -> crate::types::builders::PermissionModelBuilder {
        crate::types::builders::PermissionModelBuilder::default()
    }
}

/// A builder for [`PermissionModel`](crate::types::PermissionModel).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PermissionModelBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::PermissionModelType>,
    pub(crate) invoker_role_name: ::std::option::Option<::std::string::String>,
    pub(crate) cross_account_role_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PermissionModelBuilder {
    /// <p>Defines how Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your Amazon Web Services account, or by using the credentials of the current IAM user.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::PermissionModelType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines how Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your Amazon Web Services account, or by using the credentials of the current IAM user.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PermissionModelType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Defines how Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your Amazon Web Services account, or by using the credentials of the current IAM user.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PermissionModelType> {
        &self.r#type
    }
    /// <p>Existing Amazon Web Services IAM role name in the primary Amazon Web Services account that will be assumed by Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.</p> <note>
    /// <p>You must have <code>iam:passRole</code> permission for this role while creating or updating the application.</p>
    /// </note>
    pub fn invoker_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invoker_role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Existing Amazon Web Services IAM role name in the primary Amazon Web Services account that will be assumed by Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.</p> <note>
    /// <p>You must have <code>iam:passRole</code> permission for this role while creating or updating the application.</p>
    /// </note>
    pub fn set_invoker_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invoker_role_name = input;
        self
    }
    /// <p>Existing Amazon Web Services IAM role name in the primary Amazon Web Services account that will be assumed by Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.</p> <note>
    /// <p>You must have <code>iam:passRole</code> permission for this role while creating or updating the application.</p>
    /// </note>
    pub fn get_invoker_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.invoker_role_name
    }
    /// Appends an item to `cross_account_role_arns`.
    ///
    /// To override the contents of this collection use [`set_cross_account_role_arns`](Self::set_cross_account_role_arns).
    ///
    /// <p>Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.</p> <note>
    /// <ul>
    /// <li> <p>These ARNs are required only when your resources are in other accounts and you have different role name in these accounts. Else, the invoker role name will be used in the other accounts.</p> </li>
    /// <li> <p>These roles must have a trust policy with <code>iam:AssumeRole</code> permission to the invoker role in the primary account.</p> </li>
    /// </ul>
    /// </note>
    pub fn cross_account_role_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cross_account_role_arns.unwrap_or_default();
        v.push(input.into());
        self.cross_account_role_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.</p> <note>
    /// <ul>
    /// <li> <p>These ARNs are required only when your resources are in other accounts and you have different role name in these accounts. Else, the invoker role name will be used in the other accounts.</p> </li>
    /// <li> <p>These roles must have a trust policy with <code>iam:AssumeRole</code> permission to the invoker role in the primary account.</p> </li>
    /// </ul>
    /// </note>
    pub fn set_cross_account_role_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cross_account_role_arns = input;
        self
    }
    /// <p>Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.</p> <note>
    /// <ul>
    /// <li> <p>These ARNs are required only when your resources are in other accounts and you have different role name in these accounts. Else, the invoker role name will be used in the other accounts.</p> </li>
    /// <li> <p>These roles must have a trust policy with <code>iam:AssumeRole</code> permission to the invoker role in the primary account.</p> </li>
    /// </ul>
    /// </note>
    pub fn get_cross_account_role_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cross_account_role_arns
    }
    /// Consumes the builder and constructs a [`PermissionModel`](crate::types::PermissionModel).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::PermissionModelBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::PermissionModel, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PermissionModel {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building PermissionModel",
                )
            })?,
            invoker_role_name: self.invoker_role_name,
            cross_account_role_arns: self.cross_account_role_arns,
        })
    }
}
