// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the compliance against the resiliency policy for a disruption.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisruptionCompliance {
    /// <p>The Recovery Time Objective (RTO) that is achievable, in seconds</p>
    pub achievable_rto_in_secs: i32,
    /// <p>The current RTO, in seconds.</p>
    pub current_rto_in_secs: i32,
    /// <p>Reference identifier of the RTO.</p>
    pub rto_reference_id: ::std::option::Option<::std::string::String>,
    /// <p>The RTO description.</p>
    pub rto_description: ::std::option::Option<::std::string::String>,
    /// <p>The current RPO, in seconds.</p>
    pub current_rpo_in_secs: i32,
    /// <p>Reference identifier of the RPO .</p>
    pub rpo_reference_id: ::std::option::Option<::std::string::String>,
    /// <p>The RPO description.</p>
    pub rpo_description: ::std::option::Option<::std::string::String>,
    /// <p>The current status of compliance for the resiliency policy.</p>
    pub compliance_status: crate::types::ComplianceStatus,
    /// <p>The Recovery Point Objective (RPO) that is achievable, in seconds.</p>
    pub achievable_rpo_in_secs: i32,
    /// <p>The disruption compliance message.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl DisruptionCompliance {
    /// <p>The Recovery Time Objective (RTO) that is achievable, in seconds</p>
    pub fn achievable_rto_in_secs(&self) -> i32 {
        self.achievable_rto_in_secs
    }
    /// <p>The current RTO, in seconds.</p>
    pub fn current_rto_in_secs(&self) -> i32 {
        self.current_rto_in_secs
    }
    /// <p>Reference identifier of the RTO.</p>
    pub fn rto_reference_id(&self) -> ::std::option::Option<&str> {
        self.rto_reference_id.as_deref()
    }
    /// <p>The RTO description.</p>
    pub fn rto_description(&self) -> ::std::option::Option<&str> {
        self.rto_description.as_deref()
    }
    /// <p>The current RPO, in seconds.</p>
    pub fn current_rpo_in_secs(&self) -> i32 {
        self.current_rpo_in_secs
    }
    /// <p>Reference identifier of the RPO .</p>
    pub fn rpo_reference_id(&self) -> ::std::option::Option<&str> {
        self.rpo_reference_id.as_deref()
    }
    /// <p>The RPO description.</p>
    pub fn rpo_description(&self) -> ::std::option::Option<&str> {
        self.rpo_description.as_deref()
    }
    /// <p>The current status of compliance for the resiliency policy.</p>
    pub fn compliance_status(&self) -> &crate::types::ComplianceStatus {
        &self.compliance_status
    }
    /// <p>The Recovery Point Objective (RPO) that is achievable, in seconds.</p>
    pub fn achievable_rpo_in_secs(&self) -> i32 {
        self.achievable_rpo_in_secs
    }
    /// <p>The disruption compliance message.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl DisruptionCompliance {
    /// Creates a new builder-style object to manufacture [`DisruptionCompliance`](crate::types::DisruptionCompliance).
    pub fn builder() -> crate::types::builders::DisruptionComplianceBuilder {
        crate::types::builders::DisruptionComplianceBuilder::default()
    }
}

/// A builder for [`DisruptionCompliance`](crate::types::DisruptionCompliance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DisruptionComplianceBuilder {
    pub(crate) achievable_rto_in_secs: ::std::option::Option<i32>,
    pub(crate) current_rto_in_secs: ::std::option::Option<i32>,
    pub(crate) rto_reference_id: ::std::option::Option<::std::string::String>,
    pub(crate) rto_description: ::std::option::Option<::std::string::String>,
    pub(crate) current_rpo_in_secs: ::std::option::Option<i32>,
    pub(crate) rpo_reference_id: ::std::option::Option<::std::string::String>,
    pub(crate) rpo_description: ::std::option::Option<::std::string::String>,
    pub(crate) compliance_status: ::std::option::Option<crate::types::ComplianceStatus>,
    pub(crate) achievable_rpo_in_secs: ::std::option::Option<i32>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl DisruptionComplianceBuilder {
    /// <p>The Recovery Time Objective (RTO) that is achievable, in seconds</p>
    pub fn achievable_rto_in_secs(mut self, input: i32) -> Self {
        self.achievable_rto_in_secs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Recovery Time Objective (RTO) that is achievable, in seconds</p>
    pub fn set_achievable_rto_in_secs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.achievable_rto_in_secs = input;
        self
    }
    /// <p>The Recovery Time Objective (RTO) that is achievable, in seconds</p>
    pub fn get_achievable_rto_in_secs(&self) -> &::std::option::Option<i32> {
        &self.achievable_rto_in_secs
    }
    /// <p>The current RTO, in seconds.</p>
    pub fn current_rto_in_secs(mut self, input: i32) -> Self {
        self.current_rto_in_secs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current RTO, in seconds.</p>
    pub fn set_current_rto_in_secs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.current_rto_in_secs = input;
        self
    }
    /// <p>The current RTO, in seconds.</p>
    pub fn get_current_rto_in_secs(&self) -> &::std::option::Option<i32> {
        &self.current_rto_in_secs
    }
    /// <p>Reference identifier of the RTO.</p>
    pub fn rto_reference_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rto_reference_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reference identifier of the RTO.</p>
    pub fn set_rto_reference_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rto_reference_id = input;
        self
    }
    /// <p>Reference identifier of the RTO.</p>
    pub fn get_rto_reference_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rto_reference_id
    }
    /// <p>The RTO description.</p>
    pub fn rto_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rto_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The RTO description.</p>
    pub fn set_rto_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rto_description = input;
        self
    }
    /// <p>The RTO description.</p>
    pub fn get_rto_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.rto_description
    }
    /// <p>The current RPO, in seconds.</p>
    pub fn current_rpo_in_secs(mut self, input: i32) -> Self {
        self.current_rpo_in_secs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current RPO, in seconds.</p>
    pub fn set_current_rpo_in_secs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.current_rpo_in_secs = input;
        self
    }
    /// <p>The current RPO, in seconds.</p>
    pub fn get_current_rpo_in_secs(&self) -> &::std::option::Option<i32> {
        &self.current_rpo_in_secs
    }
    /// <p>Reference identifier of the RPO .</p>
    pub fn rpo_reference_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rpo_reference_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reference identifier of the RPO .</p>
    pub fn set_rpo_reference_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rpo_reference_id = input;
        self
    }
    /// <p>Reference identifier of the RPO .</p>
    pub fn get_rpo_reference_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rpo_reference_id
    }
    /// <p>The RPO description.</p>
    pub fn rpo_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rpo_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The RPO description.</p>
    pub fn set_rpo_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rpo_description = input;
        self
    }
    /// <p>The RPO description.</p>
    pub fn get_rpo_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.rpo_description
    }
    /// <p>The current status of compliance for the resiliency policy.</p>
    /// This field is required.
    pub fn compliance_status(mut self, input: crate::types::ComplianceStatus) -> Self {
        self.compliance_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of compliance for the resiliency policy.</p>
    pub fn set_compliance_status(mut self, input: ::std::option::Option<crate::types::ComplianceStatus>) -> Self {
        self.compliance_status = input;
        self
    }
    /// <p>The current status of compliance for the resiliency policy.</p>
    pub fn get_compliance_status(&self) -> &::std::option::Option<crate::types::ComplianceStatus> {
        &self.compliance_status
    }
    /// <p>The Recovery Point Objective (RPO) that is achievable, in seconds.</p>
    pub fn achievable_rpo_in_secs(mut self, input: i32) -> Self {
        self.achievable_rpo_in_secs = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Recovery Point Objective (RPO) that is achievable, in seconds.</p>
    pub fn set_achievable_rpo_in_secs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.achievable_rpo_in_secs = input;
        self
    }
    /// <p>The Recovery Point Objective (RPO) that is achievable, in seconds.</p>
    pub fn get_achievable_rpo_in_secs(&self) -> &::std::option::Option<i32> {
        &self.achievable_rpo_in_secs
    }
    /// <p>The disruption compliance message.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The disruption compliance message.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The disruption compliance message.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`DisruptionCompliance`](crate::types::DisruptionCompliance).
    /// This method will fail if any of the following fields are not set:
    /// - [`compliance_status`](crate::types::builders::DisruptionComplianceBuilder::compliance_status)
    pub fn build(self) -> ::std::result::Result<crate::types::DisruptionCompliance, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DisruptionCompliance {
            achievable_rto_in_secs: self.achievable_rto_in_secs.unwrap_or_default(),
            current_rto_in_secs: self.current_rto_in_secs.unwrap_or_default(),
            rto_reference_id: self.rto_reference_id,
            rto_description: self.rto_description,
            current_rpo_in_secs: self.current_rpo_in_secs.unwrap_or_default(),
            rpo_reference_id: self.rpo_reference_id,
            rpo_description: self.rpo_description,
            compliance_status: self.compliance_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "compliance_status",
                    "compliance_status was not specified but it is required when building DisruptionCompliance",
                )
            })?,
            achievable_rpo_in_secs: self.achievable_rpo_in_secs.unwrap_or_default(),
            message: self.message,
        })
    }
}
