// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Defines application resource errors. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceError {
    /// <p> This is the identifier of the resource. </p>
    #[doc(hidden)]
    pub logical_resource_id: std::option::Option<std::string::String>,
    /// <p> This is the identifier of the physical resource. </p>
    #[doc(hidden)]
    pub physical_resource_id: std::option::Option<std::string::String>,
    /// <p> This is the error message. </p>
    #[doc(hidden)]
    pub reason: std::option::Option<std::string::String>,
}
impl ResourceError {
    /// <p> This is the identifier of the resource. </p>
    pub fn logical_resource_id(&self) -> std::option::Option<&str> {
        self.logical_resource_id.as_deref()
    }
    /// <p> This is the identifier of the physical resource. </p>
    pub fn physical_resource_id(&self) -> std::option::Option<&str> {
        self.physical_resource_id.as_deref()
    }
    /// <p> This is the error message. </p>
    pub fn reason(&self) -> std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl ResourceError {
    /// Creates a new builder-style object to manufacture [`ResourceError`](crate::types::ResourceError).
    pub fn builder() -> crate::types::builders::ResourceErrorBuilder {
        crate::types::builders::ResourceErrorBuilder::default()
    }
}

/// A builder for [`ResourceError`](crate::types::ResourceError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceErrorBuilder {
    pub(crate) logical_resource_id: std::option::Option<std::string::String>,
    pub(crate) physical_resource_id: std::option::Option<std::string::String>,
    pub(crate) reason: std::option::Option<std::string::String>,
}
impl ResourceErrorBuilder {
    /// <p> This is the identifier of the resource. </p>
    pub fn logical_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.logical_resource_id = Some(input.into());
        self
    }
    /// <p> This is the identifier of the resource. </p>
    pub fn set_logical_resource_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.logical_resource_id = input;
        self
    }
    /// <p> This is the identifier of the physical resource. </p>
    pub fn physical_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.physical_resource_id = Some(input.into());
        self
    }
    /// <p> This is the identifier of the physical resource. </p>
    pub fn set_physical_resource_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.physical_resource_id = input;
        self
    }
    /// <p> This is the error message. </p>
    pub fn reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.reason = Some(input.into());
        self
    }
    /// <p> This is the error message. </p>
    pub fn set_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceError`](crate::types::ResourceError).
    pub fn build(self) -> crate::types::ResourceError {
        crate::types::ResourceError {
            logical_resource_id: self.logical_resource_id,
            physical_resource_id: self.physical_resource_id,
            reason: self.reason,
        }
    }
}
