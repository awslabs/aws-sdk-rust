// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a physical resource. A physical resource is a resource that exists in your account. It can be identified using an Amazon Resource Name (ARN) or a Resilience Hub-native identifier. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PhysicalResource {
    /// <p>The name of the resource.</p>
    #[doc(hidden)]
    pub resource_name: std::option::Option<std::string::String>,
    /// <p>The logical identifier of the resource.</p>
    #[doc(hidden)]
    pub logical_resource_id: std::option::Option<crate::types::LogicalResourceId>,
    /// <p>The physical identifier of the resource.</p>
    #[doc(hidden)]
    pub physical_resource_id: std::option::Option<crate::types::PhysicalResourceId>,
    /// <p>The type of resource.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The application components that belong to this resource.</p>
    #[doc(hidden)]
    pub app_components: std::option::Option<std::vec::Vec<crate::types::AppComponent>>,
}
impl PhysicalResource {
    /// <p>The name of the resource.</p>
    pub fn resource_name(&self) -> std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>The logical identifier of the resource.</p>
    pub fn logical_resource_id(&self) -> std::option::Option<&crate::types::LogicalResourceId> {
        self.logical_resource_id.as_ref()
    }
    /// <p>The physical identifier of the resource.</p>
    pub fn physical_resource_id(&self) -> std::option::Option<&crate::types::PhysicalResourceId> {
        self.physical_resource_id.as_ref()
    }
    /// <p>The type of resource.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The application components that belong to this resource.</p>
    pub fn app_components(&self) -> std::option::Option<&[crate::types::AppComponent]> {
        self.app_components.as_deref()
    }
}
impl PhysicalResource {
    /// Creates a new builder-style object to manufacture [`PhysicalResource`](crate::types::PhysicalResource).
    pub fn builder() -> crate::types::builders::PhysicalResourceBuilder {
        crate::types::builders::PhysicalResourceBuilder::default()
    }
}

/// A builder for [`PhysicalResource`](crate::types::PhysicalResource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PhysicalResourceBuilder {
    pub(crate) resource_name: std::option::Option<std::string::String>,
    pub(crate) logical_resource_id: std::option::Option<crate::types::LogicalResourceId>,
    pub(crate) physical_resource_id: std::option::Option<crate::types::PhysicalResourceId>,
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) app_components: std::option::Option<std::vec::Vec<crate::types::AppComponent>>,
}
impl PhysicalResourceBuilder {
    /// <p>The name of the resource.</p>
    pub fn resource_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_name = Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_resource_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The logical identifier of the resource.</p>
    pub fn logical_resource_id(mut self, input: crate::types::LogicalResourceId) -> Self {
        self.logical_resource_id = Some(input);
        self
    }
    /// <p>The logical identifier of the resource.</p>
    pub fn set_logical_resource_id(
        mut self,
        input: std::option::Option<crate::types::LogicalResourceId>,
    ) -> Self {
        self.logical_resource_id = input;
        self
    }
    /// <p>The physical identifier of the resource.</p>
    pub fn physical_resource_id(mut self, input: crate::types::PhysicalResourceId) -> Self {
        self.physical_resource_id = Some(input);
        self
    }
    /// <p>The physical identifier of the resource.</p>
    pub fn set_physical_resource_id(
        mut self,
        input: std::option::Option<crate::types::PhysicalResourceId>,
    ) -> Self {
        self.physical_resource_id = input;
        self
    }
    /// <p>The type of resource.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The type of resource.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// Appends an item to `app_components`.
    ///
    /// To override the contents of this collection use [`set_app_components`](Self::set_app_components).
    ///
    /// <p>The application components that belong to this resource.</p>
    pub fn app_components(mut self, input: crate::types::AppComponent) -> Self {
        let mut v = self.app_components.unwrap_or_default();
        v.push(input);
        self.app_components = Some(v);
        self
    }
    /// <p>The application components that belong to this resource.</p>
    pub fn set_app_components(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AppComponent>>,
    ) -> Self {
        self.app_components = input;
        self
    }
    /// Consumes the builder and constructs a [`PhysicalResource`](crate::types::PhysicalResource).
    pub fn build(self) -> crate::types::PhysicalResource {
        crate::types::PhysicalResource {
            resource_name: self.resource_name,
            logical_resource_id: self.logical_resource_id,
            physical_resource_id: self.physical_resource_id,
            resource_type: self.resource_type,
            app_components: self.app_components,
        }
    }
}
