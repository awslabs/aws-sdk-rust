// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a resiliency policy.</p> <note>
/// <p>Resilience Hub allows you to provide a value of zero for <code>rtoInSecs</code> and <code>rpoInSecs</code> of your resiliency policy. But, while assessing your application, the lowest possible assessment result is near zero. Hence, if you provide value zero for <code>rtoInSecs</code> and <code>rpoInSecs</code>, the estimated workload RTO and estimated workload RPO result will be near zero and the <b>Compliance status</b> for your application will be set to <b>Policy breached</b>.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ResiliencyPolicy {
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the policy</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
    /// <p>The description for the policy.</p>
    pub policy_description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a high-level geographical location constraint for where your resilience policy data can be stored.</p>
    pub data_location_constraint: ::std::option::Option<crate::types::DataLocationConstraint>,
    /// <p>The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).</p>
    pub tier: ::std::option::Option<crate::types::ResiliencyPolicyTier>,
    /// <p>Specifies the estimated cost tier of the resiliency policy.</p>
    pub estimated_cost_tier: ::std::option::Option<crate::types::EstimatedCostTier>,
    /// <p>The resiliency policy.</p>
    pub policy: ::std::option::Option<::std::collections::HashMap<crate::types::DisruptionType, crate::types::FailurePolicy>>,
    /// <p>Date and time when the resiliency policy was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ResiliencyPolicy {
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The name of the policy</p>
    pub fn policy_name(&self) -> ::std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>The description for the policy.</p>
    pub fn policy_description(&self) -> ::std::option::Option<&str> {
        self.policy_description.as_deref()
    }
    /// <p>Specifies a high-level geographical location constraint for where your resilience policy data can be stored.</p>
    pub fn data_location_constraint(&self) -> ::std::option::Option<&crate::types::DataLocationConstraint> {
        self.data_location_constraint.as_ref()
    }
    /// <p>The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).</p>
    pub fn tier(&self) -> ::std::option::Option<&crate::types::ResiliencyPolicyTier> {
        self.tier.as_ref()
    }
    /// <p>Specifies the estimated cost tier of the resiliency policy.</p>
    pub fn estimated_cost_tier(&self) -> ::std::option::Option<&crate::types::EstimatedCostTier> {
        self.estimated_cost_tier.as_ref()
    }
    /// <p>The resiliency policy.</p>
    pub fn policy(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::DisruptionType, crate::types::FailurePolicy>> {
        self.policy.as_ref()
    }
    /// <p>Date and time when the resiliency policy was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for ResiliencyPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ResiliencyPolicy");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("policy_name", &self.policy_name);
        formatter.field("policy_description", &self.policy_description);
        formatter.field("data_location_constraint", &self.data_location_constraint);
        formatter.field("tier", &self.tier);
        formatter.field("estimated_cost_tier", &self.estimated_cost_tier);
        formatter.field("policy", &self.policy);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ResiliencyPolicy {
    /// Creates a new builder-style object to manufacture [`ResiliencyPolicy`](crate::types::ResiliencyPolicy).
    pub fn builder() -> crate::types::builders::ResiliencyPolicyBuilder {
        crate::types::builders::ResiliencyPolicyBuilder::default()
    }
}

/// A builder for [`ResiliencyPolicy`](crate::types::ResiliencyPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ResiliencyPolicyBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) policy_description: ::std::option::Option<::std::string::String>,
    pub(crate) data_location_constraint: ::std::option::Option<crate::types::DataLocationConstraint>,
    pub(crate) tier: ::std::option::Option<crate::types::ResiliencyPolicyTier>,
    pub(crate) estimated_cost_tier: ::std::option::Option<crate::types::EstimatedCostTier>,
    pub(crate) policy: ::std::option::Option<::std::collections::HashMap<crate::types::DisruptionType, crate::types::FailurePolicy>>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ResiliencyPolicyBuilder {
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The name of the policy</p>
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the policy</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The name of the policy</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// <p>The description for the policy.</p>
    pub fn policy_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the policy.</p>
    pub fn set_policy_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_description = input;
        self
    }
    /// <p>The description for the policy.</p>
    pub fn get_policy_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_description
    }
    /// <p>Specifies a high-level geographical location constraint for where your resilience policy data can be stored.</p>
    pub fn data_location_constraint(mut self, input: crate::types::DataLocationConstraint) -> Self {
        self.data_location_constraint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a high-level geographical location constraint for where your resilience policy data can be stored.</p>
    pub fn set_data_location_constraint(mut self, input: ::std::option::Option<crate::types::DataLocationConstraint>) -> Self {
        self.data_location_constraint = input;
        self
    }
    /// <p>Specifies a high-level geographical location constraint for where your resilience policy data can be stored.</p>
    pub fn get_data_location_constraint(&self) -> &::std::option::Option<crate::types::DataLocationConstraint> {
        &self.data_location_constraint
    }
    /// <p>The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).</p>
    pub fn tier(mut self, input: crate::types::ResiliencyPolicyTier) -> Self {
        self.tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).</p>
    pub fn set_tier(mut self, input: ::std::option::Option<crate::types::ResiliencyPolicyTier>) -> Self {
        self.tier = input;
        self
    }
    /// <p>The tier for this resiliency policy, ranging from the highest severity (<code>MissionCritical</code>) to lowest (<code>NonCritical</code>).</p>
    pub fn get_tier(&self) -> &::std::option::Option<crate::types::ResiliencyPolicyTier> {
        &self.tier
    }
    /// <p>Specifies the estimated cost tier of the resiliency policy.</p>
    pub fn estimated_cost_tier(mut self, input: crate::types::EstimatedCostTier) -> Self {
        self.estimated_cost_tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the estimated cost tier of the resiliency policy.</p>
    pub fn set_estimated_cost_tier(mut self, input: ::std::option::Option<crate::types::EstimatedCostTier>) -> Self {
        self.estimated_cost_tier = input;
        self
    }
    /// <p>Specifies the estimated cost tier of the resiliency policy.</p>
    pub fn get_estimated_cost_tier(&self) -> &::std::option::Option<crate::types::EstimatedCostTier> {
        &self.estimated_cost_tier
    }
    /// Adds a key-value pair to `policy`.
    ///
    /// To override the contents of this collection use [`set_policy`](Self::set_policy).
    ///
    /// <p>The resiliency policy.</p>
    pub fn policy(mut self, k: crate::types::DisruptionType, v: crate::types::FailurePolicy) -> Self {
        let mut hash_map = self.policy.unwrap_or_default();
        hash_map.insert(k, v);
        self.policy = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The resiliency policy.</p>
    pub fn set_policy(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::DisruptionType, crate::types::FailurePolicy>>,
    ) -> Self {
        self.policy = input;
        self
    }
    /// <p>The resiliency policy.</p>
    pub fn get_policy(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::DisruptionType, crate::types::FailurePolicy>> {
        &self.policy
    }
    /// <p>Date and time when the resiliency policy was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Date and time when the resiliency policy was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Date and time when the resiliency policy was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ResiliencyPolicy`](crate::types::ResiliencyPolicy).
    pub fn build(self) -> crate::types::ResiliencyPolicy {
        crate::types::ResiliencyPolicy {
            policy_arn: self.policy_arn,
            policy_name: self.policy_name,
            policy_description: self.policy_description,
            data_location_constraint: self.data_location_constraint,
            tier: self.tier,
            estimated_cost_tier: self.estimated_cost_tier,
            policy: self.policy,
            creation_time: self.creation_time,
            tags: self.tags,
        }
    }
}
impl ::std::fmt::Debug for ResiliencyPolicyBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ResiliencyPolicyBuilder");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("policy_name", &self.policy_name);
        formatter.field("policy_description", &self.policy_description);
        formatter.field("data_location_constraint", &self.data_location_constraint);
        formatter.field("tier", &self.tier);
        formatter.field("estimated_cost_tier", &self.estimated_cost_tier);
        formatter.field("policy", &self.policy);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
