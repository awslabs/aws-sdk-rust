// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines an Resilience Hub application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct App {
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub app_arn: ::std::string::String,
    /// <p>Name for the application.</p>
    pub name: ::std::string::String,
    /// <p>Optional description for an application.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>Date and time when the app was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>Status of the application.</p>
    pub status: ::std::option::Option<crate::types::AppStatusType>,
    /// <p>Current status of compliance for the resiliency policy.</p>
    pub compliance_status: ::std::option::Option<crate::types::AppComplianceStatusType>,
    /// <p>Date and time the most recent compliance evaluation.</p>
    pub last_app_compliance_evaluation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Current resiliency score for the application.</p>
    pub resiliency_score: f64,
    /// <p>Date and time the most recent resiliency score evaluation.</p>
    pub last_resiliency_score_evaluation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Assessment execution schedule with 'Daily' or 'Disabled' values. </p>
    pub assessment_schedule: ::std::option::Option<crate::types::AppAssessmentScheduleType>,
    /// <p>Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.</p>
    pub permission_model: ::std::option::Option<crate::types::PermissionModel>,
    /// <p>The list of events you would like to subscribe and get notification for. Currently, Resilience Hub supports notifications only for <b>Drift detected</b> and <b>Scheduled assessment failure</b> events.</p>
    pub event_subscriptions: ::std::option::Option<::std::vec::Vec<crate::types::EventSubscription>>,
    /// <p>Indicates if compliance drifts (deviations) were detected while running an assessment for your application.</p>
    pub drift_status: ::std::option::Option<crate::types::AppDriftStatusType>,
    /// <p>Indicates the last time that a drift was evaluated.</p>
    pub last_drift_evaluation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Recovery Time Objective (RTO) in seconds.</p>
    pub rto_in_secs: ::std::option::Option<i32>,
    /// <p>Recovery Point Objective (RPO) in seconds.</p>
    pub rpo_in_secs: ::std::option::Option<i32>,
}
impl App {
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn app_arn(&self) -> &str {
        use std::ops::Deref;
        self.app_arn.deref()
    }
    /// <p>Name for the application.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Optional description for an application.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>Date and time when the app was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>Status of the application.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AppStatusType> {
        self.status.as_ref()
    }
    /// <p>Current status of compliance for the resiliency policy.</p>
    pub fn compliance_status(&self) -> ::std::option::Option<&crate::types::AppComplianceStatusType> {
        self.compliance_status.as_ref()
    }
    /// <p>Date and time the most recent compliance evaluation.</p>
    pub fn last_app_compliance_evaluation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_app_compliance_evaluation_time.as_ref()
    }
    /// <p>Current resiliency score for the application.</p>
    pub fn resiliency_score(&self) -> f64 {
        self.resiliency_score
    }
    /// <p>Date and time the most recent resiliency score evaluation.</p>
    pub fn last_resiliency_score_evaluation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_resiliency_score_evaluation_time.as_ref()
    }
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Assessment execution schedule with 'Daily' or 'Disabled' values. </p>
    pub fn assessment_schedule(&self) -> ::std::option::Option<&crate::types::AppAssessmentScheduleType> {
        self.assessment_schedule.as_ref()
    }
    /// <p>Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.</p>
    pub fn permission_model(&self) -> ::std::option::Option<&crate::types::PermissionModel> {
        self.permission_model.as_ref()
    }
    /// <p>The list of events you would like to subscribe and get notification for. Currently, Resilience Hub supports notifications only for <b>Drift detected</b> and <b>Scheduled assessment failure</b> events.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_subscriptions.is_none()`.
    pub fn event_subscriptions(&self) -> &[crate::types::EventSubscription] {
        self.event_subscriptions.as_deref().unwrap_or_default()
    }
    /// <p>Indicates if compliance drifts (deviations) were detected while running an assessment for your application.</p>
    pub fn drift_status(&self) -> ::std::option::Option<&crate::types::AppDriftStatusType> {
        self.drift_status.as_ref()
    }
    /// <p>Indicates the last time that a drift was evaluated.</p>
    pub fn last_drift_evaluation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_drift_evaluation_time.as_ref()
    }
    /// <p>Recovery Time Objective (RTO) in seconds.</p>
    pub fn rto_in_secs(&self) -> ::std::option::Option<i32> {
        self.rto_in_secs
    }
    /// <p>Recovery Point Objective (RPO) in seconds.</p>
    pub fn rpo_in_secs(&self) -> ::std::option::Option<i32> {
        self.rpo_in_secs
    }
}
impl ::std::fmt::Debug for App {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("App");
        formatter.field("app_arn", &self.app_arn);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("status", &self.status);
        formatter.field("compliance_status", &self.compliance_status);
        formatter.field("last_app_compliance_evaluation_time", &self.last_app_compliance_evaluation_time);
        formatter.field("resiliency_score", &self.resiliency_score);
        formatter.field("last_resiliency_score_evaluation_time", &self.last_resiliency_score_evaluation_time);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("assessment_schedule", &self.assessment_schedule);
        formatter.field("permission_model", &self.permission_model);
        formatter.field("event_subscriptions", &self.event_subscriptions);
        formatter.field("drift_status", &self.drift_status);
        formatter.field("last_drift_evaluation_time", &self.last_drift_evaluation_time);
        formatter.field("rto_in_secs", &self.rto_in_secs);
        formatter.field("rpo_in_secs", &self.rpo_in_secs);
        formatter.finish()
    }
}
impl App {
    /// Creates a new builder-style object to manufacture [`App`](crate::types::App).
    pub fn builder() -> crate::types::builders::AppBuilder {
        crate::types::builders::AppBuilder::default()
    }
}

/// A builder for [`App`](crate::types::App).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AppBuilder {
    pub(crate) app_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::AppStatusType>,
    pub(crate) compliance_status: ::std::option::Option<crate::types::AppComplianceStatusType>,
    pub(crate) last_app_compliance_evaluation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resiliency_score: ::std::option::Option<f64>,
    pub(crate) last_resiliency_score_evaluation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) assessment_schedule: ::std::option::Option<crate::types::AppAssessmentScheduleType>,
    pub(crate) permission_model: ::std::option::Option<crate::types::PermissionModel>,
    pub(crate) event_subscriptions: ::std::option::Option<::std::vec::Vec<crate::types::EventSubscription>>,
    pub(crate) drift_status: ::std::option::Option<crate::types::AppDriftStatusType>,
    pub(crate) last_drift_evaluation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) rto_in_secs: ::std::option::Option<i32>,
    pub(crate) rpo_in_secs: ::std::option::Option<i32>,
}
impl AppBuilder {
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    /// This field is required.
    pub fn app_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn set_app_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Resilience Hub application. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:app/<code>app-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn get_app_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_arn
    }
    /// <p>Name for the application.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name for the application.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name for the application.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Optional description for an application.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional description for an application.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Optional description for an application.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the resiliency policy. The format for this ARN is: arn:<code>partition</code>:resiliencehub:<code>region</code>:<code>account</code>:resiliency-policy/<code>policy-id</code>. For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"> Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i> guide.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>Date and time when the app was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Date and time when the app was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Date and time when the app was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Status of the application.</p>
    pub fn status(mut self, input: crate::types::AppStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the application.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AppStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the application.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AppStatusType> {
        &self.status
    }
    /// <p>Current status of compliance for the resiliency policy.</p>
    pub fn compliance_status(mut self, input: crate::types::AppComplianceStatusType) -> Self {
        self.compliance_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current status of compliance for the resiliency policy.</p>
    pub fn set_compliance_status(mut self, input: ::std::option::Option<crate::types::AppComplianceStatusType>) -> Self {
        self.compliance_status = input;
        self
    }
    /// <p>Current status of compliance for the resiliency policy.</p>
    pub fn get_compliance_status(&self) -> &::std::option::Option<crate::types::AppComplianceStatusType> {
        &self.compliance_status
    }
    /// <p>Date and time the most recent compliance evaluation.</p>
    pub fn last_app_compliance_evaluation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_app_compliance_evaluation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Date and time the most recent compliance evaluation.</p>
    pub fn set_last_app_compliance_evaluation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_app_compliance_evaluation_time = input;
        self
    }
    /// <p>Date and time the most recent compliance evaluation.</p>
    pub fn get_last_app_compliance_evaluation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_app_compliance_evaluation_time
    }
    /// <p>Current resiliency score for the application.</p>
    pub fn resiliency_score(mut self, input: f64) -> Self {
        self.resiliency_score = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current resiliency score for the application.</p>
    pub fn set_resiliency_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.resiliency_score = input;
        self
    }
    /// <p>Current resiliency score for the application.</p>
    pub fn get_resiliency_score(&self) -> &::std::option::Option<f64> {
        &self.resiliency_score
    }
    /// <p>Date and time the most recent resiliency score evaluation.</p>
    pub fn last_resiliency_score_evaluation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_resiliency_score_evaluation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Date and time the most recent resiliency score evaluation.</p>
    pub fn set_last_resiliency_score_evaluation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_resiliency_score_evaluation_time = input;
        self
    }
    /// <p>Date and time the most recent resiliency score evaluation.</p>
    pub fn get_last_resiliency_score_evaluation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_resiliency_score_evaluation_time
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Assessment execution schedule with 'Daily' or 'Disabled' values. </p>
    pub fn assessment_schedule(mut self, input: crate::types::AppAssessmentScheduleType) -> Self {
        self.assessment_schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>Assessment execution schedule with 'Daily' or 'Disabled' values. </p>
    pub fn set_assessment_schedule(mut self, input: ::std::option::Option<crate::types::AppAssessmentScheduleType>) -> Self {
        self.assessment_schedule = input;
        self
    }
    /// <p>Assessment execution schedule with 'Daily' or 'Disabled' values. </p>
    pub fn get_assessment_schedule(&self) -> &::std::option::Option<crate::types::AppAssessmentScheduleType> {
        &self.assessment_schedule
    }
    /// <p>Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.</p>
    pub fn permission_model(mut self, input: crate::types::PermissionModel) -> Self {
        self.permission_model = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.</p>
    pub fn set_permission_model(mut self, input: ::std::option::Option<crate::types::PermissionModel>) -> Self {
        self.permission_model = input;
        self
    }
    /// <p>Defines the roles and credentials that Resilience Hub would use while creating the application, importing its resources, and running an assessment.</p>
    pub fn get_permission_model(&self) -> &::std::option::Option<crate::types::PermissionModel> {
        &self.permission_model
    }
    /// Appends an item to `event_subscriptions`.
    ///
    /// To override the contents of this collection use [`set_event_subscriptions`](Self::set_event_subscriptions).
    ///
    /// <p>The list of events you would like to subscribe and get notification for. Currently, Resilience Hub supports notifications only for <b>Drift detected</b> and <b>Scheduled assessment failure</b> events.</p>
    pub fn event_subscriptions(mut self, input: crate::types::EventSubscription) -> Self {
        let mut v = self.event_subscriptions.unwrap_or_default();
        v.push(input);
        self.event_subscriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of events you would like to subscribe and get notification for. Currently, Resilience Hub supports notifications only for <b>Drift detected</b> and <b>Scheduled assessment failure</b> events.</p>
    pub fn set_event_subscriptions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventSubscription>>) -> Self {
        self.event_subscriptions = input;
        self
    }
    /// <p>The list of events you would like to subscribe and get notification for. Currently, Resilience Hub supports notifications only for <b>Drift detected</b> and <b>Scheduled assessment failure</b> events.</p>
    pub fn get_event_subscriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventSubscription>> {
        &self.event_subscriptions
    }
    /// <p>Indicates if compliance drifts (deviations) were detected while running an assessment for your application.</p>
    pub fn drift_status(mut self, input: crate::types::AppDriftStatusType) -> Self {
        self.drift_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if compliance drifts (deviations) were detected while running an assessment for your application.</p>
    pub fn set_drift_status(mut self, input: ::std::option::Option<crate::types::AppDriftStatusType>) -> Self {
        self.drift_status = input;
        self
    }
    /// <p>Indicates if compliance drifts (deviations) were detected while running an assessment for your application.</p>
    pub fn get_drift_status(&self) -> &::std::option::Option<crate::types::AppDriftStatusType> {
        &self.drift_status
    }
    /// <p>Indicates the last time that a drift was evaluated.</p>
    pub fn last_drift_evaluation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_drift_evaluation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the last time that a drift was evaluated.</p>
    pub fn set_last_drift_evaluation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_drift_evaluation_time = input;
        self
    }
    /// <p>Indicates the last time that a drift was evaluated.</p>
    pub fn get_last_drift_evaluation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_drift_evaluation_time
    }
    /// <p>Recovery Time Objective (RTO) in seconds.</p>
    pub fn rto_in_secs(mut self, input: i32) -> Self {
        self.rto_in_secs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Recovery Time Objective (RTO) in seconds.</p>
    pub fn set_rto_in_secs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rto_in_secs = input;
        self
    }
    /// <p>Recovery Time Objective (RTO) in seconds.</p>
    pub fn get_rto_in_secs(&self) -> &::std::option::Option<i32> {
        &self.rto_in_secs
    }
    /// <p>Recovery Point Objective (RPO) in seconds.</p>
    pub fn rpo_in_secs(mut self, input: i32) -> Self {
        self.rpo_in_secs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Recovery Point Objective (RPO) in seconds.</p>
    pub fn set_rpo_in_secs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rpo_in_secs = input;
        self
    }
    /// <p>Recovery Point Objective (RPO) in seconds.</p>
    pub fn get_rpo_in_secs(&self) -> &::std::option::Option<i32> {
        &self.rpo_in_secs
    }
    /// Consumes the builder and constructs a [`App`](crate::types::App).
    /// This method will fail if any of the following fields are not set:
    /// - [`app_arn`](crate::types::builders::AppBuilder::app_arn)
    /// - [`name`](crate::types::builders::AppBuilder::name)
    /// - [`creation_time`](crate::types::builders::AppBuilder::creation_time)
    pub fn build(self) -> ::std::result::Result<crate::types::App, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::App {
            app_arn: self.app_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "app_arn",
                    "app_arn was not specified but it is required when building App",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field("name", "name was not specified but it is required when building App")
            })?,
            description: self.description,
            policy_arn: self.policy_arn,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building App",
                )
            })?,
            status: self.status,
            compliance_status: self.compliance_status,
            last_app_compliance_evaluation_time: self.last_app_compliance_evaluation_time,
            resiliency_score: self.resiliency_score.unwrap_or_default(),
            last_resiliency_score_evaluation_time: self.last_resiliency_score_evaluation_time,
            tags: self.tags,
            assessment_schedule: self.assessment_schedule,
            permission_model: self.permission_model,
            event_subscriptions: self.event_subscriptions,
            drift_status: self.drift_status,
            last_drift_evaluation_time: self.last_drift_evaluation_time,
            rto_in_secs: self.rto_in_secs,
            rpo_in_secs: self.rpo_in_secs,
        })
    }
}
impl ::std::fmt::Debug for AppBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AppBuilder");
        formatter.field("app_arn", &self.app_arn);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("status", &self.status);
        formatter.field("compliance_status", &self.compliance_status);
        formatter.field("last_app_compliance_evaluation_time", &self.last_app_compliance_evaluation_time);
        formatter.field("resiliency_score", &self.resiliency_score);
        formatter.field("last_resiliency_score_evaluation_time", &self.last_resiliency_score_evaluation_time);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("assessment_schedule", &self.assessment_schedule);
        formatter.field("permission_model", &self.permission_model);
        formatter.field("event_subscriptions", &self.event_subscriptions);
        formatter.field("drift_status", &self.drift_status);
        formatter.field("last_drift_evaluation_time", &self.last_drift_evaluation_time);
        formatter.field("rto_in_secs", &self.rto_in_secs);
        formatter.field("rpo_in_secs", &self.rpo_in_secs);
        formatter.finish()
    }
}
