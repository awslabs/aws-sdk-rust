// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of operational recommendations that were successfully included or excluded.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateRecommendationStatusSuccessfulEntry {
    /// <p>An identifier for an entry in this batch that is used to communicate the result.</p> <note>
    /// <p>The <code>entryId</code>s of a batch request need to be unique within a request.</p>
    /// </note>
    pub entry_id: ::std::string::String,
    /// <p>Reference identifier of the operational recommendation.</p>
    pub reference_id: ::std::string::String,
    /// <p>The operational recommendation item.</p>
    pub item: ::std::option::Option<crate::types::UpdateRecommendationStatusItem>,
    /// <p>Indicates if the operational recommendation was successfully excluded.</p>
    pub excluded: bool,
    /// <p>Indicates the reason for excluding an operational recommendation.</p>
    pub exclude_reason: ::std::option::Option<crate::types::ExcludeRecommendationReason>,
}
impl BatchUpdateRecommendationStatusSuccessfulEntry {
    /// <p>An identifier for an entry in this batch that is used to communicate the result.</p> <note>
    /// <p>The <code>entryId</code>s of a batch request need to be unique within a request.</p>
    /// </note>
    pub fn entry_id(&self) -> &str {
        use std::ops::Deref;
        self.entry_id.deref()
    }
    /// <p>Reference identifier of the operational recommendation.</p>
    pub fn reference_id(&self) -> &str {
        use std::ops::Deref;
        self.reference_id.deref()
    }
    /// <p>The operational recommendation item.</p>
    pub fn item(&self) -> ::std::option::Option<&crate::types::UpdateRecommendationStatusItem> {
        self.item.as_ref()
    }
    /// <p>Indicates if the operational recommendation was successfully excluded.</p>
    pub fn excluded(&self) -> bool {
        self.excluded
    }
    /// <p>Indicates the reason for excluding an operational recommendation.</p>
    pub fn exclude_reason(&self) -> ::std::option::Option<&crate::types::ExcludeRecommendationReason> {
        self.exclude_reason.as_ref()
    }
}
impl BatchUpdateRecommendationStatusSuccessfulEntry {
    /// Creates a new builder-style object to manufacture [`BatchUpdateRecommendationStatusSuccessfulEntry`](crate::types::BatchUpdateRecommendationStatusSuccessfulEntry).
    pub fn builder() -> crate::types::builders::BatchUpdateRecommendationStatusSuccessfulEntryBuilder {
        crate::types::builders::BatchUpdateRecommendationStatusSuccessfulEntryBuilder::default()
    }
}

/// A builder for [`BatchUpdateRecommendationStatusSuccessfulEntry`](crate::types::BatchUpdateRecommendationStatusSuccessfulEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchUpdateRecommendationStatusSuccessfulEntryBuilder {
    pub(crate) entry_id: ::std::option::Option<::std::string::String>,
    pub(crate) reference_id: ::std::option::Option<::std::string::String>,
    pub(crate) item: ::std::option::Option<crate::types::UpdateRecommendationStatusItem>,
    pub(crate) excluded: ::std::option::Option<bool>,
    pub(crate) exclude_reason: ::std::option::Option<crate::types::ExcludeRecommendationReason>,
}
impl BatchUpdateRecommendationStatusSuccessfulEntryBuilder {
    /// <p>An identifier for an entry in this batch that is used to communicate the result.</p> <note>
    /// <p>The <code>entryId</code>s of a batch request need to be unique within a request.</p>
    /// </note>
    /// This field is required.
    pub fn entry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entry_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier for an entry in this batch that is used to communicate the result.</p> <note>
    /// <p>The <code>entryId</code>s of a batch request need to be unique within a request.</p>
    /// </note>
    pub fn set_entry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entry_id = input;
        self
    }
    /// <p>An identifier for an entry in this batch that is used to communicate the result.</p> <note>
    /// <p>The <code>entryId</code>s of a batch request need to be unique within a request.</p>
    /// </note>
    pub fn get_entry_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entry_id
    }
    /// <p>Reference identifier of the operational recommendation.</p>
    /// This field is required.
    pub fn reference_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reference_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reference identifier of the operational recommendation.</p>
    pub fn set_reference_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reference_id = input;
        self
    }
    /// <p>Reference identifier of the operational recommendation.</p>
    pub fn get_reference_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reference_id
    }
    /// <p>The operational recommendation item.</p>
    /// This field is required.
    pub fn item(mut self, input: crate::types::UpdateRecommendationStatusItem) -> Self {
        self.item = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operational recommendation item.</p>
    pub fn set_item(mut self, input: ::std::option::Option<crate::types::UpdateRecommendationStatusItem>) -> Self {
        self.item = input;
        self
    }
    /// <p>The operational recommendation item.</p>
    pub fn get_item(&self) -> &::std::option::Option<crate::types::UpdateRecommendationStatusItem> {
        &self.item
    }
    /// <p>Indicates if the operational recommendation was successfully excluded.</p>
    /// This field is required.
    pub fn excluded(mut self, input: bool) -> Self {
        self.excluded = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the operational recommendation was successfully excluded.</p>
    pub fn set_excluded(mut self, input: ::std::option::Option<bool>) -> Self {
        self.excluded = input;
        self
    }
    /// <p>Indicates if the operational recommendation was successfully excluded.</p>
    pub fn get_excluded(&self) -> &::std::option::Option<bool> {
        &self.excluded
    }
    /// <p>Indicates the reason for excluding an operational recommendation.</p>
    pub fn exclude_reason(mut self, input: crate::types::ExcludeRecommendationReason) -> Self {
        self.exclude_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the reason for excluding an operational recommendation.</p>
    pub fn set_exclude_reason(mut self, input: ::std::option::Option<crate::types::ExcludeRecommendationReason>) -> Self {
        self.exclude_reason = input;
        self
    }
    /// <p>Indicates the reason for excluding an operational recommendation.</p>
    pub fn get_exclude_reason(&self) -> &::std::option::Option<crate::types::ExcludeRecommendationReason> {
        &self.exclude_reason
    }
    /// Consumes the builder and constructs a [`BatchUpdateRecommendationStatusSuccessfulEntry`](crate::types::BatchUpdateRecommendationStatusSuccessfulEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`entry_id`](crate::types::builders::BatchUpdateRecommendationStatusSuccessfulEntryBuilder::entry_id)
    /// - [`reference_id`](crate::types::builders::BatchUpdateRecommendationStatusSuccessfulEntryBuilder::reference_id)
    /// - [`excluded`](crate::types::builders::BatchUpdateRecommendationStatusSuccessfulEntryBuilder::excluded)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::BatchUpdateRecommendationStatusSuccessfulEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchUpdateRecommendationStatusSuccessfulEntry {
            entry_id: self.entry_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entry_id",
                    "entry_id was not specified but it is required when building BatchUpdateRecommendationStatusSuccessfulEntry",
                )
            })?,
            reference_id: self.reference_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "reference_id",
                    "reference_id was not specified but it is required when building BatchUpdateRecommendationStatusSuccessfulEntry",
                )
            })?,
            item: self.item,
            excluded: self.excluded.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "excluded",
                    "excluded was not specified but it is required when building BatchUpdateRecommendationStatusSuccessfulEntry",
                )
            })?,
            exclude_reason: self.exclude_reason,
        })
    }
}
