// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a test recommendation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestRecommendation {
    /// <p>Identifier for the test recommendation.</p>
    #[doc(hidden)]
    pub recommendation_id: std::option::Option<std::string::String>,
    /// <p>The reference identifier for the test recommendation.</p>
    #[doc(hidden)]
    pub reference_id: std::option::Option<std::string::String>,
    /// <p>The name of the application component.</p>
    #[doc(hidden)]
    pub app_component_name: std::option::Option<std::string::String>,
    /// <p>The name of the test recommendation.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The intent of the test recommendation.</p>
    #[doc(hidden)]
    pub intent: std::option::Option<std::string::String>,
    /// <p>The level of risk for this test recommendation.</p>
    #[doc(hidden)]
    pub risk: std::option::Option<crate::types::TestRisk>,
    /// <p>The type of test recommendation.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::TestType>,
    /// <p>The description for the test recommendation.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The test recommendation items.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::types::RecommendationItem>>,
    /// <p>The prerequisite of the test recommendation.</p>
    #[doc(hidden)]
    pub prerequisite: std::option::Option<std::string::String>,
    /// <p> A list of recommended alarms that are used in the test and must be exported before or with the test. </p>
    #[doc(hidden)]
    pub depends_on_alarms: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TestRecommendation {
    /// <p>Identifier for the test recommendation.</p>
    pub fn recommendation_id(&self) -> std::option::Option<&str> {
        self.recommendation_id.as_deref()
    }
    /// <p>The reference identifier for the test recommendation.</p>
    pub fn reference_id(&self) -> std::option::Option<&str> {
        self.reference_id.as_deref()
    }
    /// <p>The name of the application component.</p>
    pub fn app_component_name(&self) -> std::option::Option<&str> {
        self.app_component_name.as_deref()
    }
    /// <p>The name of the test recommendation.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The intent of the test recommendation.</p>
    pub fn intent(&self) -> std::option::Option<&str> {
        self.intent.as_deref()
    }
    /// <p>The level of risk for this test recommendation.</p>
    pub fn risk(&self) -> std::option::Option<&crate::types::TestRisk> {
        self.risk.as_ref()
    }
    /// <p>The type of test recommendation.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::TestType> {
        self.r#type.as_ref()
    }
    /// <p>The description for the test recommendation.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The test recommendation items.</p>
    pub fn items(&self) -> std::option::Option<&[crate::types::RecommendationItem]> {
        self.items.as_deref()
    }
    /// <p>The prerequisite of the test recommendation.</p>
    pub fn prerequisite(&self) -> std::option::Option<&str> {
        self.prerequisite.as_deref()
    }
    /// <p> A list of recommended alarms that are used in the test and must be exported before or with the test. </p>
    pub fn depends_on_alarms(&self) -> std::option::Option<&[std::string::String]> {
        self.depends_on_alarms.as_deref()
    }
}
impl TestRecommendation {
    /// Creates a new builder-style object to manufacture [`TestRecommendation`](crate::types::TestRecommendation).
    pub fn builder() -> crate::types::builders::TestRecommendationBuilder {
        crate::types::builders::TestRecommendationBuilder::default()
    }
}

/// A builder for [`TestRecommendation`](crate::types::TestRecommendation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestRecommendationBuilder {
    pub(crate) recommendation_id: std::option::Option<std::string::String>,
    pub(crate) reference_id: std::option::Option<std::string::String>,
    pub(crate) app_component_name: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) intent: std::option::Option<std::string::String>,
    pub(crate) risk: std::option::Option<crate::types::TestRisk>,
    pub(crate) r#type: std::option::Option<crate::types::TestType>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) items: std::option::Option<std::vec::Vec<crate::types::RecommendationItem>>,
    pub(crate) prerequisite: std::option::Option<std::string::String>,
    pub(crate) depends_on_alarms: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TestRecommendationBuilder {
    /// <p>Identifier for the test recommendation.</p>
    pub fn recommendation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommendation_id = Some(input.into());
        self
    }
    /// <p>Identifier for the test recommendation.</p>
    pub fn set_recommendation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommendation_id = input;
        self
    }
    /// <p>The reference identifier for the test recommendation.</p>
    pub fn reference_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reference_id = Some(input.into());
        self
    }
    /// <p>The reference identifier for the test recommendation.</p>
    pub fn set_reference_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reference_id = input;
        self
    }
    /// <p>The name of the application component.</p>
    pub fn app_component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_component_name = Some(input.into());
        self
    }
    /// <p>The name of the application component.</p>
    pub fn set_app_component_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.app_component_name = input;
        self
    }
    /// <p>The name of the test recommendation.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the test recommendation.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The intent of the test recommendation.</p>
    pub fn intent(mut self, input: impl Into<std::string::String>) -> Self {
        self.intent = Some(input.into());
        self
    }
    /// <p>The intent of the test recommendation.</p>
    pub fn set_intent(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.intent = input;
        self
    }
    /// <p>The level of risk for this test recommendation.</p>
    pub fn risk(mut self, input: crate::types::TestRisk) -> Self {
        self.risk = Some(input);
        self
    }
    /// <p>The level of risk for this test recommendation.</p>
    pub fn set_risk(mut self, input: std::option::Option<crate::types::TestRisk>) -> Self {
        self.risk = input;
        self
    }
    /// <p>The type of test recommendation.</p>
    pub fn r#type(mut self, input: crate::types::TestType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of test recommendation.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::TestType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The description for the test recommendation.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description for the test recommendation.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>The test recommendation items.</p>
    pub fn items(mut self, input: crate::types::RecommendationItem) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = Some(v);
        self
    }
    /// <p>The test recommendation items.</p>
    pub fn set_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RecommendationItem>>,
    ) -> Self {
        self.items = input;
        self
    }
    /// <p>The prerequisite of the test recommendation.</p>
    pub fn prerequisite(mut self, input: impl Into<std::string::String>) -> Self {
        self.prerequisite = Some(input.into());
        self
    }
    /// <p>The prerequisite of the test recommendation.</p>
    pub fn set_prerequisite(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prerequisite = input;
        self
    }
    /// Appends an item to `depends_on_alarms`.
    ///
    /// To override the contents of this collection use [`set_depends_on_alarms`](Self::set_depends_on_alarms).
    ///
    /// <p> A list of recommended alarms that are used in the test and must be exported before or with the test. </p>
    pub fn depends_on_alarms(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.depends_on_alarms.unwrap_or_default();
        v.push(input.into());
        self.depends_on_alarms = Some(v);
        self
    }
    /// <p> A list of recommended alarms that are used in the test and must be exported before or with the test. </p>
    pub fn set_depends_on_alarms(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.depends_on_alarms = input;
        self
    }
    /// Consumes the builder and constructs a [`TestRecommendation`](crate::types::TestRecommendation).
    pub fn build(self) -> crate::types::TestRecommendation {
        crate::types::TestRecommendation {
            recommendation_id: self.recommendation_id,
            reference_id: self.reference_id,
            app_component_name: self.app_component_name,
            name: self.name,
            intent: self.intent,
            risk: self.risk,
            r#type: self.r#type,
            description: self.description,
            items: self.items,
            prerequisite: self.prerequisite,
            depends_on_alarms: self.depends_on_alarms,
        }
    }
}
