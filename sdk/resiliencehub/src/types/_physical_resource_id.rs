// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a physical resource identifier.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PhysicalResourceId {
    /// <p>Identifier of the physical resource.</p>
    pub identifier: ::std::string::String,
    /// <p>Specifies the type of physical resource identifier.</p>
    /// <dl>
    /// <dt>
    /// Arn
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ECS::Service</code> </p> </li>
    /// <li> <p> <code>AWS::EFS::FileSystem</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancingV2::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::Lambda::Function</code> </p> </li>
    /// <li> <p> <code>AWS::SNS::Topic</code> </p> </li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Native
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Resilience Hub-native identifier and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ApiGateway::RestApi</code> </p> </li>
    /// <li> <p> <code>AWS::ApiGatewayV2::Api</code> </p> </li>
    /// <li> <p> <code>AWS::AutoScaling::AutoScalingGroup</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBGlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::GlobalTable</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::Table</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::EC2Fleet</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Instance</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::NatGateway</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Volume</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancing::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::GlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::Route53::RecordSet</code> </p> </li>
    /// <li> <p> <code>AWS::S3::Bucket</code> </p> </li>
    /// <li> <p> <code>AWS::SQS::Queue</code> </p> </li>
    /// </ul>
    /// </dd>
    /// </dl>
    pub r#type: crate::types::PhysicalIdentifierType,
    /// <p>The Amazon Web Services Region that the physical resource is located in.</p>
    pub aws_region: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account that owns the physical resource.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
}
impl PhysicalResourceId {
    /// <p>Identifier of the physical resource.</p>
    pub fn identifier(&self) -> &str {
        use std::ops::Deref;
        self.identifier.deref()
    }
    /// <p>Specifies the type of physical resource identifier.</p>
    /// <dl>
    /// <dt>
    /// Arn
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ECS::Service</code> </p> </li>
    /// <li> <p> <code>AWS::EFS::FileSystem</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancingV2::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::Lambda::Function</code> </p> </li>
    /// <li> <p> <code>AWS::SNS::Topic</code> </p> </li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Native
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Resilience Hub-native identifier and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ApiGateway::RestApi</code> </p> </li>
    /// <li> <p> <code>AWS::ApiGatewayV2::Api</code> </p> </li>
    /// <li> <p> <code>AWS::AutoScaling::AutoScalingGroup</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBGlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::GlobalTable</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::Table</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::EC2Fleet</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Instance</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::NatGateway</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Volume</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancing::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::GlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::Route53::RecordSet</code> </p> </li>
    /// <li> <p> <code>AWS::S3::Bucket</code> </p> </li>
    /// <li> <p> <code>AWS::SQS::Queue</code> </p> </li>
    /// </ul>
    /// </dd>
    /// </dl>
    pub fn r#type(&self) -> &crate::types::PhysicalIdentifierType {
        &self.r#type
    }
    /// <p>The Amazon Web Services Region that the physical resource is located in.</p>
    pub fn aws_region(&self) -> ::std::option::Option<&str> {
        self.aws_region.as_deref()
    }
    /// <p>The Amazon Web Services account that owns the physical resource.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
}
impl PhysicalResourceId {
    /// Creates a new builder-style object to manufacture [`PhysicalResourceId`](crate::types::PhysicalResourceId).
    pub fn builder() -> crate::types::builders::PhysicalResourceIdBuilder {
        crate::types::builders::PhysicalResourceIdBuilder::default()
    }
}

/// A builder for [`PhysicalResourceId`](crate::types::PhysicalResourceId).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PhysicalResourceIdBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::PhysicalIdentifierType>,
    pub(crate) aws_region: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
}
impl PhysicalResourceIdBuilder {
    /// <p>Identifier of the physical resource.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of the physical resource.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>Identifier of the physical resource.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>Specifies the type of physical resource identifier.</p>
    /// <dl>
    /// <dt>
    /// Arn
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ECS::Service</code> </p> </li>
    /// <li> <p> <code>AWS::EFS::FileSystem</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancingV2::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::Lambda::Function</code> </p> </li>
    /// <li> <p> <code>AWS::SNS::Topic</code> </p> </li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Native
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Resilience Hub-native identifier and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ApiGateway::RestApi</code> </p> </li>
    /// <li> <p> <code>AWS::ApiGatewayV2::Api</code> </p> </li>
    /// <li> <p> <code>AWS::AutoScaling::AutoScalingGroup</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBGlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::GlobalTable</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::Table</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::EC2Fleet</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Instance</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::NatGateway</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Volume</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancing::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::GlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::Route53::RecordSet</code> </p> </li>
    /// <li> <p> <code>AWS::S3::Bucket</code> </p> </li>
    /// <li> <p> <code>AWS::SQS::Queue</code> </p> </li>
    /// </ul>
    /// </dd>
    /// </dl>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::PhysicalIdentifierType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of physical resource identifier.</p>
    /// <dl>
    /// <dt>
    /// Arn
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ECS::Service</code> </p> </li>
    /// <li> <p> <code>AWS::EFS::FileSystem</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancingV2::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::Lambda::Function</code> </p> </li>
    /// <li> <p> <code>AWS::SNS::Topic</code> </p> </li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Native
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Resilience Hub-native identifier and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ApiGateway::RestApi</code> </p> </li>
    /// <li> <p> <code>AWS::ApiGatewayV2::Api</code> </p> </li>
    /// <li> <p> <code>AWS::AutoScaling::AutoScalingGroup</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBGlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::GlobalTable</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::Table</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::EC2Fleet</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Instance</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::NatGateway</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Volume</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancing::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::GlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::Route53::RecordSet</code> </p> </li>
    /// <li> <p> <code>AWS::S3::Bucket</code> </p> </li>
    /// <li> <p> <code>AWS::SQS::Queue</code> </p> </li>
    /// </ul>
    /// </dd>
    /// </dl>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PhysicalIdentifierType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies the type of physical resource identifier.</p>
    /// <dl>
    /// <dt>
    /// Arn
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ECS::Service</code> </p> </li>
    /// <li> <p> <code>AWS::EFS::FileSystem</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancingV2::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::Lambda::Function</code> </p> </li>
    /// <li> <p> <code>AWS::SNS::Topic</code> </p> </li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Native
    /// </dt>
    /// <dd>
    /// <p>The resource identifier is an Resilience Hub-native identifier and it can identify the following list of resources:</p>
    /// <ul>
    /// <li> <p> <code>AWS::ApiGateway::RestApi</code> </p> </li>
    /// <li> <p> <code>AWS::ApiGatewayV2::Api</code> </p> </li>
    /// <li> <p> <code>AWS::AutoScaling::AutoScalingGroup</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBGlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::DocDB::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::GlobalTable</code> </p> </li>
    /// <li> <p> <code>AWS::DynamoDB::Table</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::EC2Fleet</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Instance</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::NatGateway</code> </p> </li>
    /// <li> <p> <code>AWS::EC2::Volume</code> </p> </li>
    /// <li> <p> <code>AWS::ElasticLoadBalancing::LoadBalancer</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBCluster</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::DBInstance</code> </p> </li>
    /// <li> <p> <code>AWS::RDS::GlobalCluster</code> </p> </li>
    /// <li> <p> <code>AWS::Route53::RecordSet</code> </p> </li>
    /// <li> <p> <code>AWS::S3::Bucket</code> </p> </li>
    /// <li> <p> <code>AWS::SQS::Queue</code> </p> </li>
    /// </ul>
    /// </dd>
    /// </dl>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PhysicalIdentifierType> {
        &self.r#type
    }
    /// <p>The Amazon Web Services Region that the physical resource is located in.</p>
    pub fn aws_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region that the physical resource is located in.</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The Amazon Web Services Region that the physical resource is located in.</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_region
    }
    /// <p>The Amazon Web Services account that owns the physical resource.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account that owns the physical resource.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account that owns the physical resource.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// Consumes the builder and constructs a [`PhysicalResourceId`](crate::types::PhysicalResourceId).
    /// This method will fail if any of the following fields are not set:
    /// - [`identifier`](crate::types::builders::PhysicalResourceIdBuilder::identifier)
    /// - [`r#type`](crate::types::builders::PhysicalResourceIdBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::PhysicalResourceId, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PhysicalResourceId {
            identifier: self.identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identifier",
                    "identifier was not specified but it is required when building PhysicalResourceId",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building PhysicalResourceId",
                )
            })?,
            aws_region: self.aws_region,
            aws_account_id: self.aws_account_id,
        })
    }
}
