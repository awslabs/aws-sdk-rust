// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The Terraform s3 state file you need to import. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TerraformSource {
    /// <p> The Terraform s3 state file you need to import. </p>
    #[doc(hidden)]
    pub s3_state_file_url: std::option::Option<std::string::String>,
}
impl TerraformSource {
    /// <p> The Terraform s3 state file you need to import. </p>
    pub fn s3_state_file_url(&self) -> std::option::Option<&str> {
        self.s3_state_file_url.as_deref()
    }
}
impl TerraformSource {
    /// Creates a new builder-style object to manufacture [`TerraformSource`](crate::types::TerraformSource).
    pub fn builder() -> crate::types::builders::TerraformSourceBuilder {
        crate::types::builders::TerraformSourceBuilder::default()
    }
}

/// A builder for [`TerraformSource`](crate::types::TerraformSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TerraformSourceBuilder {
    pub(crate) s3_state_file_url: std::option::Option<std::string::String>,
}
impl TerraformSourceBuilder {
    /// <p> The Terraform s3 state file you need to import. </p>
    pub fn s3_state_file_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_state_file_url = Some(input.into());
        self
    }
    /// <p> The Terraform s3 state file you need to import. </p>
    pub fn set_s3_state_file_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.s3_state_file_url = input;
        self
    }
    /// Consumes the builder and constructs a [`TerraformSource`](crate::types::TerraformSource).
    pub fn build(self) -> crate::types::TerraformSource {
        crate::types::TerraformSource {
            s3_state_file_url: self.s3_state_file_url,
        }
    }
}
