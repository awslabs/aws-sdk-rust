// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The Terraform s3 state file you need to import. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TerraformSource {
    /// <p> The URL of the Terraform s3 state file you need to import. </p>
    pub s3_state_file_url: ::std::string::String,
}
impl TerraformSource {
    /// <p> The URL of the Terraform s3 state file you need to import. </p>
    pub fn s3_state_file_url(&self) -> &str {
        use std::ops::Deref;
        self.s3_state_file_url.deref()
    }
}
impl TerraformSource {
    /// Creates a new builder-style object to manufacture [`TerraformSource`](crate::types::TerraformSource).
    pub fn builder() -> crate::types::builders::TerraformSourceBuilder {
        crate::types::builders::TerraformSourceBuilder::default()
    }
}

/// A builder for [`TerraformSource`](crate::types::TerraformSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TerraformSourceBuilder {
    pub(crate) s3_state_file_url: ::std::option::Option<::std::string::String>,
}
impl TerraformSourceBuilder {
    /// <p> The URL of the Terraform s3 state file you need to import. </p>
    /// This field is required.
    pub fn s3_state_file_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_state_file_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The URL of the Terraform s3 state file you need to import. </p>
    pub fn set_s3_state_file_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_state_file_url = input;
        self
    }
    /// <p> The URL of the Terraform s3 state file you need to import. </p>
    pub fn get_s3_state_file_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_state_file_url
    }
    /// Consumes the builder and constructs a [`TerraformSource`](crate::types::TerraformSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_state_file_url`](crate::types::builders::TerraformSourceBuilder::s3_state_file_url)
    pub fn build(self) -> ::std::result::Result<crate::types::TerraformSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TerraformSource {
            s3_state_file_url: self.s3_state_file_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_state_file_url",
                    "s3_state_file_url was not specified but it is required when building TerraformSource",
                )
            })?,
        })
    }
}
