// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a cost object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Cost {
    /// <p>The cost amount.</p>
    pub amount: f64,
    /// <p>The cost currency, for example <code>USD</code>.</p>
    pub currency: ::std::string::String,
    /// <p>The cost frequency.</p>
    pub frequency: crate::types::CostFrequency,
}
impl Cost {
    /// <p>The cost amount.</p>
    pub fn amount(&self) -> f64 {
        self.amount
    }
    /// <p>The cost currency, for example <code>USD</code>.</p>
    pub fn currency(&self) -> &str {
        use std::ops::Deref;
        self.currency.deref()
    }
    /// <p>The cost frequency.</p>
    pub fn frequency(&self) -> &crate::types::CostFrequency {
        &self.frequency
    }
}
impl Cost {
    /// Creates a new builder-style object to manufacture [`Cost`](crate::types::Cost).
    pub fn builder() -> crate::types::builders::CostBuilder {
        crate::types::builders::CostBuilder::default()
    }
}

/// A builder for [`Cost`](crate::types::Cost).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CostBuilder {
    pub(crate) amount: ::std::option::Option<f64>,
    pub(crate) currency: ::std::option::Option<::std::string::String>,
    pub(crate) frequency: ::std::option::Option<crate::types::CostFrequency>,
}
impl CostBuilder {
    /// <p>The cost amount.</p>
    /// This field is required.
    pub fn amount(mut self, input: f64) -> Self {
        self.amount = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cost amount.</p>
    pub fn set_amount(mut self, input: ::std::option::Option<f64>) -> Self {
        self.amount = input;
        self
    }
    /// <p>The cost amount.</p>
    pub fn get_amount(&self) -> &::std::option::Option<f64> {
        &self.amount
    }
    /// <p>The cost currency, for example <code>USD</code>.</p>
    /// This field is required.
    pub fn currency(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cost currency, for example <code>USD</code>.</p>
    pub fn set_currency(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency = input;
        self
    }
    /// <p>The cost currency, for example <code>USD</code>.</p>
    pub fn get_currency(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency
    }
    /// <p>The cost frequency.</p>
    /// This field is required.
    pub fn frequency(mut self, input: crate::types::CostFrequency) -> Self {
        self.frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cost frequency.</p>
    pub fn set_frequency(mut self, input: ::std::option::Option<crate::types::CostFrequency>) -> Self {
        self.frequency = input;
        self
    }
    /// <p>The cost frequency.</p>
    pub fn get_frequency(&self) -> &::std::option::Option<crate::types::CostFrequency> {
        &self.frequency
    }
    /// Consumes the builder and constructs a [`Cost`](crate::types::Cost).
    /// This method will fail if any of the following fields are not set:
    /// - [`currency`](crate::types::builders::CostBuilder::currency)
    /// - [`frequency`](crate::types::builders::CostBuilder::frequency)
    pub fn build(self) -> ::std::result::Result<crate::types::Cost, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Cost {
            amount: self.amount.unwrap_or_default(),
            currency: self.currency.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "currency",
                    "currency was not specified but it is required when building Cost",
                )
            })?,
            frequency: self.frequency.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "frequency",
                    "frequency was not specified but it is required when building Cost",
                )
            })?,
        })
    }
}
