// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn add_draft_app_version_resource_mappings_output_correct_errors(
    mut builder: crate::operation::add_draft_app_version_resource_mappings::builders::AddDraftAppVersionResourceMappingsOutputBuilder,
) -> crate::operation::add_draft_app_version_resource_mappings::builders::AddDraftAppVersionResourceMappingsOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.resource_mappings.is_none() {
        builder.resource_mappings = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_recommendation_status_output_correct_errors(
    mut builder: crate::operation::batch_update_recommendation_status::builders::BatchUpdateRecommendationStatusOutputBuilder,
) -> crate::operation::batch_update_recommendation_status::builders::BatchUpdateRecommendationStatusOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.successful_entries.is_none() {
        builder.successful_entries = Some(Default::default())
    }
    if builder.failed_entries.is_none() {
        builder.failed_entries = Some(Default::default())
    }
    builder
}

pub(crate) fn create_app_output_correct_errors(
    mut builder: crate::operation::create_app::builders::CreateAppOutputBuilder,
) -> crate::operation::create_app::builders::CreateAppOutputBuilder {
    if builder.app.is_none() {
        builder.app = {
            let builder = crate::types::builders::AppBuilder::default();
            crate::serde_util::app_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_app_version_app_component_output_correct_errors(
    mut builder: crate::operation::create_app_version_app_component::builders::CreateAppVersionAppComponentOutputBuilder,
) -> crate::operation::create_app_version_app_component::builders::CreateAppVersionAppComponentOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_app_version_resource_output_correct_errors(
    mut builder: crate::operation::create_app_version_resource::builders::CreateAppVersionResourceOutputBuilder,
) -> crate::operation::create_app_version_resource::builders::CreateAppVersionResourceOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_resiliency_policy_output_correct_errors(
    mut builder: crate::operation::create_resiliency_policy::builders::CreateResiliencyPolicyOutputBuilder,
) -> crate::operation::create_resiliency_policy::builders::CreateResiliencyPolicyOutputBuilder {
    if builder.policy.is_none() {
        builder.policy = {
            let builder = crate::types::builders::ResiliencyPolicyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_app_output_correct_errors(
    mut builder: crate::operation::delete_app::builders::DeleteAppOutputBuilder,
) -> crate::operation::delete_app::builders::DeleteAppOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_app_assessment_output_correct_errors(
    mut builder: crate::operation::delete_app_assessment::builders::DeleteAppAssessmentOutputBuilder,
) -> crate::operation::delete_app_assessment::builders::DeleteAppAssessmentOutputBuilder {
    if builder.assessment_arn.is_none() {
        builder.assessment_arn = Some(Default::default())
    }
    if builder.assessment_status.is_none() {
        builder.assessment_status = "no value was set".parse::<crate::types::AssessmentStatus>().ok()
    }
    builder
}

pub(crate) fn delete_app_version_app_component_output_correct_errors(
    mut builder: crate::operation::delete_app_version_app_component::builders::DeleteAppVersionAppComponentOutputBuilder,
) -> crate::operation::delete_app_version_app_component::builders::DeleteAppVersionAppComponentOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_app_version_resource_output_correct_errors(
    mut builder: crate::operation::delete_app_version_resource::builders::DeleteAppVersionResourceOutputBuilder,
) -> crate::operation::delete_app_version_resource::builders::DeleteAppVersionResourceOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_recommendation_template_output_correct_errors(
    mut builder: crate::operation::delete_recommendation_template::builders::DeleteRecommendationTemplateOutputBuilder,
) -> crate::operation::delete_recommendation_template::builders::DeleteRecommendationTemplateOutputBuilder {
    if builder.recommendation_template_arn.is_none() {
        builder.recommendation_template_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RecommendationTemplateStatus>().ok()
    }
    builder
}

pub(crate) fn delete_resiliency_policy_output_correct_errors(
    mut builder: crate::operation::delete_resiliency_policy::builders::DeleteResiliencyPolicyOutputBuilder,
) -> crate::operation::delete_resiliency_policy::builders::DeleteResiliencyPolicyOutputBuilder {
    if builder.policy_arn.is_none() {
        builder.policy_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_app_output_correct_errors(
    mut builder: crate::operation::describe_app::builders::DescribeAppOutputBuilder,
) -> crate::operation::describe_app::builders::DescribeAppOutputBuilder {
    if builder.app.is_none() {
        builder.app = {
            let builder = crate::types::builders::AppBuilder::default();
            crate::serde_util::app_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_app_assessment_output_correct_errors(
    mut builder: crate::operation::describe_app_assessment::builders::DescribeAppAssessmentOutputBuilder,
) -> crate::operation::describe_app_assessment::builders::DescribeAppAssessmentOutputBuilder {
    if builder.assessment.is_none() {
        builder.assessment = {
            let builder = crate::types::builders::AppAssessmentBuilder::default();
            crate::serde_util::app_assessment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_app_version_output_correct_errors(
    mut builder: crate::operation::describe_app_version::builders::DescribeAppVersionOutputBuilder,
) -> crate::operation::describe_app_version::builders::DescribeAppVersionOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_app_version_app_component_output_correct_errors(
    mut builder: crate::operation::describe_app_version_app_component::builders::DescribeAppVersionAppComponentOutputBuilder,
) -> crate::operation::describe_app_version_app_component::builders::DescribeAppVersionAppComponentOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_app_version_resource_output_correct_errors(
    mut builder: crate::operation::describe_app_version_resource::builders::DescribeAppVersionResourceOutputBuilder,
) -> crate::operation::describe_app_version_resource::builders::DescribeAppVersionResourceOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_app_version_resources_resolution_status_output_correct_errors(
    mut builder: crate::operation::describe_app_version_resources_resolution_status::builders::DescribeAppVersionResourcesResolutionStatusOutputBuilder,
) -> crate::operation::describe_app_version_resources_resolution_status::builders::DescribeAppVersionResourcesResolutionStatusOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.resolution_id.is_none() {
        builder.resolution_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResourceResolutionStatusType>().ok()
    }
    builder
}

pub(crate) fn describe_app_version_template_output_correct_errors(
    mut builder: crate::operation::describe_app_version_template::builders::DescribeAppVersionTemplateOutputBuilder,
) -> crate::operation::describe_app_version_template::builders::DescribeAppVersionTemplateOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.app_template_body.is_none() {
        builder.app_template_body = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_draft_app_version_resources_import_status_output_correct_errors(
    mut builder: crate::operation::describe_draft_app_version_resources_import_status::builders::DescribeDraftAppVersionResourcesImportStatusOutputBuilder,
) -> crate::operation::describe_draft_app_version_resources_import_status::builders::DescribeDraftAppVersionResourcesImportStatusOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResourceImportStatusType>().ok()
    }
    if builder.status_change_time.is_none() {
        builder.status_change_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_resiliency_policy_output_correct_errors(
    mut builder: crate::operation::describe_resiliency_policy::builders::DescribeResiliencyPolicyOutputBuilder,
) -> crate::operation::describe_resiliency_policy::builders::DescribeResiliencyPolicyOutputBuilder {
    if builder.policy.is_none() {
        builder.policy = {
            let builder = crate::types::builders::ResiliencyPolicyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn import_resources_to_draft_app_version_output_correct_errors(
    mut builder: crate::operation::import_resources_to_draft_app_version::builders::ImportResourcesToDraftAppVersionOutputBuilder,
) -> crate::operation::import_resources_to_draft_app_version::builders::ImportResourcesToDraftAppVersionOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResourceImportStatusType>().ok()
    }
    builder
}

pub(crate) fn list_alarm_recommendations_output_correct_errors(
    mut builder: crate::operation::list_alarm_recommendations::builders::ListAlarmRecommendationsOutputBuilder,
) -> crate::operation::list_alarm_recommendations::builders::ListAlarmRecommendationsOutputBuilder {
    if builder.alarm_recommendations.is_none() {
        builder.alarm_recommendations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_assessment_compliance_drifts_output_correct_errors(
    mut builder: crate::operation::list_app_assessment_compliance_drifts::builders::ListAppAssessmentComplianceDriftsOutputBuilder,
) -> crate::operation::list_app_assessment_compliance_drifts::builders::ListAppAssessmentComplianceDriftsOutputBuilder {
    if builder.compliance_drifts.is_none() {
        builder.compliance_drifts = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_assessments_output_correct_errors(
    mut builder: crate::operation::list_app_assessments::builders::ListAppAssessmentsOutputBuilder,
) -> crate::operation::list_app_assessments::builders::ListAppAssessmentsOutputBuilder {
    if builder.assessment_summaries.is_none() {
        builder.assessment_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_component_compliances_output_correct_errors(
    mut builder: crate::operation::list_app_component_compliances::builders::ListAppComponentCompliancesOutputBuilder,
) -> crate::operation::list_app_component_compliances::builders::ListAppComponentCompliancesOutputBuilder {
    if builder.component_compliances.is_none() {
        builder.component_compliances = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_component_recommendations_output_correct_errors(
    mut builder: crate::operation::list_app_component_recommendations::builders::ListAppComponentRecommendationsOutputBuilder,
) -> crate::operation::list_app_component_recommendations::builders::ListAppComponentRecommendationsOutputBuilder {
    if builder.component_recommendations.is_none() {
        builder.component_recommendations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_input_sources_output_correct_errors(
    mut builder: crate::operation::list_app_input_sources::builders::ListAppInputSourcesOutputBuilder,
) -> crate::operation::list_app_input_sources::builders::ListAppInputSourcesOutputBuilder {
    if builder.app_input_sources.is_none() {
        builder.app_input_sources = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_version_app_components_output_correct_errors(
    mut builder: crate::operation::list_app_version_app_components::builders::ListAppVersionAppComponentsOutputBuilder,
) -> crate::operation::list_app_version_app_components::builders::ListAppVersionAppComponentsOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_version_resource_mappings_output_correct_errors(
    mut builder: crate::operation::list_app_version_resource_mappings::builders::ListAppVersionResourceMappingsOutputBuilder,
) -> crate::operation::list_app_version_resource_mappings::builders::ListAppVersionResourceMappingsOutputBuilder {
    if builder.resource_mappings.is_none() {
        builder.resource_mappings = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_version_resources_output_correct_errors(
    mut builder: crate::operation::list_app_version_resources::builders::ListAppVersionResourcesOutputBuilder,
) -> crate::operation::list_app_version_resources::builders::ListAppVersionResourcesOutputBuilder {
    if builder.physical_resources.is_none() {
        builder.physical_resources = Some(Default::default())
    }
    if builder.resolution_id.is_none() {
        builder.resolution_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_app_versions_output_correct_errors(
    mut builder: crate::operation::list_app_versions::builders::ListAppVersionsOutputBuilder,
) -> crate::operation::list_app_versions::builders::ListAppVersionsOutputBuilder {
    if builder.app_versions.is_none() {
        builder.app_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_apps_output_correct_errors(
    mut builder: crate::operation::list_apps::builders::ListAppsOutputBuilder,
) -> crate::operation::list_apps::builders::ListAppsOutputBuilder {
    if builder.app_summaries.is_none() {
        builder.app_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_resiliency_policies_output_correct_errors(
    mut builder: crate::operation::list_resiliency_policies::builders::ListResiliencyPoliciesOutputBuilder,
) -> crate::operation::list_resiliency_policies::builders::ListResiliencyPoliciesOutputBuilder {
    if builder.resiliency_policies.is_none() {
        builder.resiliency_policies = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sop_recommendations_output_correct_errors(
    mut builder: crate::operation::list_sop_recommendations::builders::ListSopRecommendationsOutputBuilder,
) -> crate::operation::list_sop_recommendations::builders::ListSopRecommendationsOutputBuilder {
    if builder.sop_recommendations.is_none() {
        builder.sop_recommendations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_suggested_resiliency_policies_output_correct_errors(
    mut builder: crate::operation::list_suggested_resiliency_policies::builders::ListSuggestedResiliencyPoliciesOutputBuilder,
) -> crate::operation::list_suggested_resiliency_policies::builders::ListSuggestedResiliencyPoliciesOutputBuilder {
    if builder.resiliency_policies.is_none() {
        builder.resiliency_policies = Some(Default::default())
    }
    builder
}

pub(crate) fn list_test_recommendations_output_correct_errors(
    mut builder: crate::operation::list_test_recommendations::builders::ListTestRecommendationsOutputBuilder,
) -> crate::operation::list_test_recommendations::builders::ListTestRecommendationsOutputBuilder {
    if builder.test_recommendations.is_none() {
        builder.test_recommendations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_unsupported_app_version_resources_output_correct_errors(
    mut builder: crate::operation::list_unsupported_app_version_resources::builders::ListUnsupportedAppVersionResourcesOutputBuilder,
) -> crate::operation::list_unsupported_app_version_resources::builders::ListUnsupportedAppVersionResourcesOutputBuilder {
    if builder.unsupported_resources.is_none() {
        builder.unsupported_resources = Some(Default::default())
    }
    if builder.resolution_id.is_none() {
        builder.resolution_id = Some(Default::default())
    }
    builder
}

pub(crate) fn publish_app_version_output_correct_errors(
    mut builder: crate::operation::publish_app_version::builders::PublishAppVersionOutputBuilder,
) -> crate::operation::publish_app_version::builders::PublishAppVersionOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn resolve_app_version_resources_output_correct_errors(
    mut builder: crate::operation::resolve_app_version_resources::builders::ResolveAppVersionResourcesOutputBuilder,
) -> crate::operation::resolve_app_version_resources::builders::ResolveAppVersionResourcesOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.resolution_id.is_none() {
        builder.resolution_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResourceResolutionStatusType>().ok()
    }
    builder
}

pub(crate) fn start_app_assessment_output_correct_errors(
    mut builder: crate::operation::start_app_assessment::builders::StartAppAssessmentOutputBuilder,
) -> crate::operation::start_app_assessment::builders::StartAppAssessmentOutputBuilder {
    if builder.assessment.is_none() {
        builder.assessment = {
            let builder = crate::types::builders::AppAssessmentBuilder::default();
            crate::serde_util::app_assessment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_app_output_correct_errors(
    mut builder: crate::operation::update_app::builders::UpdateAppOutputBuilder,
) -> crate::operation::update_app::builders::UpdateAppOutputBuilder {
    if builder.app.is_none() {
        builder.app = {
            let builder = crate::types::builders::AppBuilder::default();
            crate::serde_util::app_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_app_version_output_correct_errors(
    mut builder: crate::operation::update_app_version::builders::UpdateAppVersionOutputBuilder,
) -> crate::operation::update_app_version::builders::UpdateAppVersionOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn update_app_version_app_component_output_correct_errors(
    mut builder: crate::operation::update_app_version_app_component::builders::UpdateAppVersionAppComponentOutputBuilder,
) -> crate::operation::update_app_version_app_component::builders::UpdateAppVersionAppComponentOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn update_app_version_resource_output_correct_errors(
    mut builder: crate::operation::update_app_version_resource::builders::UpdateAppVersionResourceOutputBuilder,
) -> crate::operation::update_app_version_resource::builders::UpdateAppVersionResourceOutputBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn update_resiliency_policy_output_correct_errors(
    mut builder: crate::operation::update_resiliency_policy::builders::UpdateResiliencyPolicyOutputBuilder,
) -> crate::operation::update_resiliency_policy::builders::UpdateResiliencyPolicyOutputBuilder {
    if builder.policy.is_none() {
        builder.policy = {
            let builder = crate::types::builders::ResiliencyPolicyBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn app_correct_errors(mut builder: crate::types::builders::AppBuilder) -> crate::types::builders::AppBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn app_assessment_correct_errors(
    mut builder: crate::types::builders::AppAssessmentBuilder,
) -> crate::types::builders::AppAssessmentBuilder {
    if builder.invoker.is_none() {
        builder.invoker = "no value was set".parse::<crate::types::AssessmentInvoker>().ok()
    }
    if builder.assessment_status.is_none() {
        builder.assessment_status = "no value was set".parse::<crate::types::AssessmentStatus>().ok()
    }
    if builder.assessment_arn.is_none() {
        builder.assessment_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn app_component_correct_errors(mut builder: crate::types::builders::AppComponentBuilder) -> crate::types::builders::AppComponentBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn app_input_source_correct_errors(
    mut builder: crate::types::builders::AppInputSourceBuilder,
) -> crate::types::builders::AppInputSourceBuilder {
    if builder.import_type.is_none() {
        builder.import_type = "no value was set".parse::<crate::types::ResourceMappingType>().ok()
    }
    builder
}

pub(crate) fn physical_resource_correct_errors(
    mut builder: crate::types::builders::PhysicalResourceBuilder,
) -> crate::types::builders::PhysicalResourceBuilder {
    if builder.logical_resource_id.is_none() {
        builder.logical_resource_id = {
            let builder = crate::types::builders::LogicalResourceIdBuilder::default();
            crate::serde_util::logical_resource_id_correct_errors(builder).build().ok()
        }
    }
    if builder.physical_resource_id.is_none() {
        builder.physical_resource_id = {
            let builder = crate::types::builders::PhysicalResourceIdBuilder::default();
            crate::serde_util::physical_resource_id_correct_errors(builder).build().ok()
        }
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_template_correct_errors(
    mut builder: crate::types::builders::RecommendationTemplateBuilder,
) -> crate::types::builders::RecommendationTemplateBuilder {
    if builder.assessment_arn.is_none() {
        builder.assessment_arn = Some(Default::default())
    }
    if builder.recommendation_types.is_none() {
        builder.recommendation_types = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::TemplateFormat>().ok()
    }
    if builder.recommendation_template_arn.is_none() {
        builder.recommendation_template_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RecommendationTemplateStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn alarm_recommendation_correct_errors(
    mut builder: crate::types::builders::AlarmRecommendationBuilder,
) -> crate::types::builders::AlarmRecommendationBuilder {
    if builder.recommendation_id.is_none() {
        builder.recommendation_id = Some(Default::default())
    }
    if builder.reference_id.is_none() {
        builder.reference_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AlarmType>().ok()
    }
    builder
}

pub(crate) fn app_assessment_summary_correct_errors(
    mut builder: crate::types::builders::AppAssessmentSummaryBuilder,
) -> crate::types::builders::AppAssessmentSummaryBuilder {
    if builder.assessment_status.is_none() {
        builder.assessment_status = "no value was set".parse::<crate::types::AssessmentStatus>().ok()
    }
    if builder.assessment_arn.is_none() {
        builder.assessment_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn app_summary_correct_errors(mut builder: crate::types::builders::AppSummaryBuilder) -> crate::types::builders::AppSummaryBuilder {
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn app_version_summary_correct_errors(
    mut builder: crate::types::builders::AppVersionSummaryBuilder,
) -> crate::types::builders::AppVersionSummaryBuilder {
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_recommendation_status_failed_entry_correct_errors(
    mut builder: crate::types::builders::BatchUpdateRecommendationStatusFailedEntryBuilder,
) -> crate::types::builders::BatchUpdateRecommendationStatusFailedEntryBuilder {
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_recommendation_status_successful_entry_correct_errors(
    mut builder: crate::types::builders::BatchUpdateRecommendationStatusSuccessfulEntryBuilder,
) -> crate::types::builders::BatchUpdateRecommendationStatusSuccessfulEntryBuilder {
    if builder.entry_id.is_none() {
        builder.entry_id = Some(Default::default())
    }
    if builder.reference_id.is_none() {
        builder.reference_id = Some(Default::default())
    }
    if builder.item.is_none() {
        builder.item = {
            let builder = crate::types::builders::UpdateRecommendationStatusItemBuilder::default();
            Some(builder.build())
        }
    }
    if builder.excluded.is_none() {
        builder.excluded = Some(Default::default())
    }
    builder
}

pub(crate) fn component_recommendation_correct_errors(
    mut builder: crate::types::builders::ComponentRecommendationBuilder,
) -> crate::types::builders::ComponentRecommendationBuilder {
    if builder.app_component_name.is_none() {
        builder.app_component_name = Some(Default::default())
    }
    if builder.recommendation_status.is_none() {
        builder.recommendation_status = "no value was set".parse::<crate::types::RecommendationComplianceStatus>().ok()
    }
    if builder.config_recommendations.is_none() {
        builder.config_recommendations = Some(Default::default())
    }
    builder
}

pub(crate) fn cost_correct_errors(mut builder: crate::types::builders::CostBuilder) -> crate::types::builders::CostBuilder {
    if builder.amount.is_none() {
        builder.amount = Some(Default::default())
    }
    if builder.currency.is_none() {
        builder.currency = Some(Default::default())
    }
    if builder.frequency.is_none() {
        builder.frequency = "no value was set".parse::<crate::types::CostFrequency>().ok()
    }
    builder
}

pub(crate) fn eks_source_correct_errors(mut builder: crate::types::builders::EksSourceBuilder) -> crate::types::builders::EksSourceBuilder {
    if builder.eks_cluster_arn.is_none() {
        builder.eks_cluster_arn = Some(Default::default())
    }
    if builder.namespaces.is_none() {
        builder.namespaces = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_source_cluster_namespace_correct_errors(
    mut builder: crate::types::builders::EksSourceClusterNamespaceBuilder,
) -> crate::types::builders::EksSourceClusterNamespaceBuilder {
    if builder.eks_cluster_arn.is_none() {
        builder.eks_cluster_arn = Some(Default::default())
    }
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    builder
}

pub(crate) fn logical_resource_id_correct_errors(
    mut builder: crate::types::builders::LogicalResourceIdBuilder,
) -> crate::types::builders::LogicalResourceIdBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn permission_model_correct_errors(
    mut builder: crate::types::builders::PermissionModelBuilder,
) -> crate::types::builders::PermissionModelBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::PermissionModelType>().ok()
    }
    builder
}

pub(crate) fn physical_resource_id_correct_errors(
    mut builder: crate::types::builders::PhysicalResourceIdBuilder,
) -> crate::types::builders::PhysicalResourceIdBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::PhysicalIdentifierType>().ok()
    }
    builder
}

pub(crate) fn resiliency_score_correct_errors(
    mut builder: crate::types::builders::ResiliencyScoreBuilder,
) -> crate::types::builders::ResiliencyScoreBuilder {
    if builder.score.is_none() {
        builder.score = Some(Default::default())
    }
    if builder.disruption_score.is_none() {
        builder.disruption_score = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_mapping_correct_errors(
    mut builder: crate::types::builders::ResourceMappingBuilder,
) -> crate::types::builders::ResourceMappingBuilder {
    if builder.mapping_type.is_none() {
        builder.mapping_type = "no value was set".parse::<crate::types::ResourceMappingType>().ok()
    }
    if builder.physical_resource_id.is_none() {
        builder.physical_resource_id = {
            let builder = crate::types::builders::PhysicalResourceIdBuilder::default();
            crate::serde_util::physical_resource_id_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn sop_recommendation_correct_errors(
    mut builder: crate::types::builders::SopRecommendationBuilder,
) -> crate::types::builders::SopRecommendationBuilder {
    if builder.service_type.is_none() {
        builder.service_type = "no value was set".parse::<crate::types::SopServiceType>().ok()
    }
    if builder.recommendation_id.is_none() {
        builder.recommendation_id = Some(Default::default())
    }
    if builder.reference_id.is_none() {
        builder.reference_id = Some(Default::default())
    }
    builder
}

pub(crate) fn terraform_source_correct_errors(
    mut builder: crate::types::builders::TerraformSourceBuilder,
) -> crate::types::builders::TerraformSourceBuilder {
    if builder.s3_state_file_url.is_none() {
        builder.s3_state_file_url = Some(Default::default())
    }
    builder
}

pub(crate) fn test_recommendation_correct_errors(
    mut builder: crate::types::builders::TestRecommendationBuilder,
) -> crate::types::builders::TestRecommendationBuilder {
    if builder.reference_id.is_none() {
        builder.reference_id = Some(Default::default())
    }
    builder
}

pub(crate) fn unsupported_resource_correct_errors(
    mut builder: crate::types::builders::UnsupportedResourceBuilder,
) -> crate::types::builders::UnsupportedResourceBuilder {
    if builder.logical_resource_id.is_none() {
        builder.logical_resource_id = {
            let builder = crate::types::builders::LogicalResourceIdBuilder::default();
            crate::serde_util::logical_resource_id_correct_errors(builder).build().ok()
        }
    }
    if builder.physical_resource_id.is_none() {
        builder.physical_resource_id = {
            let builder = crate::types::builders::PhysicalResourceIdBuilder::default();
            crate::serde_util::physical_resource_id_correct_errors(builder).build().ok()
        }
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn disruption_compliance_correct_errors(
    mut builder: crate::types::builders::DisruptionComplianceBuilder,
) -> crate::types::builders::DisruptionComplianceBuilder {
    if builder.compliance_status.is_none() {
        builder.compliance_status = "no value was set".parse::<crate::types::ComplianceStatus>().ok()
    }
    builder
}

pub(crate) fn event_subscription_correct_errors(
    mut builder: crate::types::builders::EventSubscriptionBuilder,
) -> crate::types::builders::EventSubscriptionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.event_type.is_none() {
        builder.event_type = "no value was set".parse::<crate::types::EventType>().ok()
    }
    builder
}

pub(crate) fn failure_policy_correct_errors(
    mut builder: crate::types::builders::FailurePolicyBuilder,
) -> crate::types::builders::FailurePolicyBuilder {
    if builder.rto_in_secs.is_none() {
        builder.rto_in_secs = Some(Default::default())
    }
    if builder.rpo_in_secs.is_none() {
        builder.rpo_in_secs = Some(Default::default())
    }
    builder
}

pub(crate) fn config_recommendation_correct_errors(
    mut builder: crate::types::builders::ConfigRecommendationBuilder,
) -> crate::types::builders::ConfigRecommendationBuilder {
    if builder.optimization_type.is_none() {
        builder.optimization_type = "no value was set".parse::<crate::types::ConfigRecommendationOptimizationType>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.reference_id.is_none() {
        builder.reference_id = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_disruption_compliance_correct_errors(
    mut builder: crate::types::builders::RecommendationDisruptionComplianceBuilder,
) -> crate::types::builders::RecommendationDisruptionComplianceBuilder {
    if builder.expected_compliance_status.is_none() {
        builder.expected_compliance_status = "no value was set".parse::<crate::types::ComplianceStatus>().ok()
    }
    builder
}
