// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_activation::_create_activation_output::CreateActivationOutputBuilder;

pub use crate::operation::create_activation::_create_activation_input::CreateActivationInputBuilder;

/// Fluent builder constructing a request to `CreateActivation`.
///
/// <p>Generates an activation code and activation ID you can use to register your on-premises servers, edge devices, or virtual machine (VM) with Amazon Web Services Systems Manager. Registering these machines with Systems Manager makes it possible to manage them using Systems Manager capabilities. You use the activation code and ID when installing SSM Agent on machines in your hybrid environment. For more information about requirements for managing on-premises machines using Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html">Setting up Amazon Web Services Systems Manager for hybrid environments</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p> <note>
/// <p>Amazon Elastic Compute Cloud (Amazon EC2) instances, edge devices, and on-premises servers and VMs that are configured for Systems Manager are all called <i>managed nodes</i>.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateActivationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_activation::builders::CreateActivationInputBuilder,
}
impl CreateActivationFluentBuilder {
    /// Creates a new `CreateActivation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_activation::CreateActivation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_activation::CreateActivationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_activation::CreateActivationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_activation::CreateActivationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A user-defined description of the resource that you want to register with Systems Manager. </p> <important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A user-defined description of the resource that you want to register with Systems Manager. </p> <important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The name of the registered, managed node as it will appear in the Amazon Web Services Systems Manager console or when you use the Amazon Web Services command line tools to list Systems Manager resources.</p> <important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn default_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.default_instance_name(input.into());
        self
    }
    /// <p>The name of the registered, managed node as it will appear in the Amazon Web Services Systems Manager console or when you use the Amazon Web Services command line tools to list Systems Manager resources.</p> <important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn set_default_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_default_instance_name(input);
        self
    }
    /// <p>The name of the Identity and Access Management (IAM) role that you want to assign to the managed node. This IAM role must provide AssumeRole permissions for the Amazon Web Services Systems Manager service principal <code>ssm.amazonaws.com</code>. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-service-role.html">Create an IAM service role for a hybrid environment</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> <note>
    /// <p>You can't specify an IAM service-linked role for this parameter. You must create a unique role.</p>
    /// </note>
    pub fn iam_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.iam_role(input.into());
        self
    }
    /// <p>The name of the Identity and Access Management (IAM) role that you want to assign to the managed node. This IAM role must provide AssumeRole permissions for the Amazon Web Services Systems Manager service principal <code>ssm.amazonaws.com</code>. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-service-role.html">Create an IAM service role for a hybrid environment</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> <note>
    /// <p>You can't specify an IAM service-linked role for this parameter. You must create a unique role.</p>
    /// </note>
    pub fn set_iam_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_iam_role(input);
        self
    }
    /// <p>Specify the maximum number of managed nodes you want to register. The default value is <code>1</code>.</p>
    pub fn registration_limit(mut self, input: i32) -> Self {
        self.inner = self.inner.registration_limit(input);
        self
    }
    /// <p>Specify the maximum number of managed nodes you want to register. The default value is <code>1</code>.</p>
    pub fn set_registration_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_registration_limit(input);
        self
    }
    /// <p>The date by which this activation request should expire, in timestamp format, such as "2021-07-07T00:00:00". You can specify a date up to 30 days in advance. If you don't provide an expiration date, the activation code expires in 24 hours.</p>
    pub fn expiration_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.expiration_date(input);
        self
    }
    /// <p>The date by which this activation request should expire, in timestamp format, such as "2021-07-07T00:00:00". You can specify a date up to 30 days in advance. If you don't provide an expiration date, the activation code expires in 24 hours.</p>
    pub fn set_expiration_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_expiration_date(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag an activation to identify which servers or virtual machines (VMs) in your on-premises environment you intend to activate. In this case, you could specify the following key-value pairs:</p>
    /// <ul>
    /// <li> <p> <code>Key=OS,Value=Windows</code> </p> </li>
    /// <li> <p> <code>Key=Environment,Value=Production</code> </p> </li>
    /// </ul> <important>
    /// <p>When you install SSM Agent on your on-premises servers and VMs, you specify an activation ID and code. When you specify the activation ID and code, tags assigned to the activation are automatically applied to the on-premises servers or VMs.</p>
    /// </important>
    /// <p>You can't add tags to or delete tags from an existing activation. You can tag your on-premises servers, edge devices, and VMs after they connect to Systems Manager for the first time and are assigned a managed node ID. This means they are listed in the Amazon Web Services Systems Manager console with an ID that is prefixed with "mi-". For information about how to add tags to your managed nodes, see <code>AddTagsToResource</code>. For information about how to remove tags from your managed nodes, see <code>RemoveTagsFromResource</code>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag an activation to identify which servers or virtual machines (VMs) in your on-premises environment you intend to activate. In this case, you could specify the following key-value pairs:</p>
    /// <ul>
    /// <li> <p> <code>Key=OS,Value=Windows</code> </p> </li>
    /// <li> <p> <code>Key=Environment,Value=Production</code> </p> </li>
    /// </ul> <important>
    /// <p>When you install SSM Agent on your on-premises servers and VMs, you specify an activation ID and code. When you specify the activation ID and code, tags assigned to the activation are automatically applied to the on-premises servers or VMs.</p>
    /// </important>
    /// <p>You can't add tags to or delete tags from an existing activation. You can tag your on-premises servers, edge devices, and VMs after they connect to Systems Manager for the first time and are assigned a managed node ID. This means they are listed in the Amazon Web Services Systems Manager console with an ID that is prefixed with "mi-". For information about how to add tags to your managed nodes, see <code>AddTagsToResource</code>. For information about how to remove tags from your managed nodes, see <code>RemoveTagsFromResource</code>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// Appends an item to `RegistrationMetadata`.
    ///
    /// To override the contents of this collection use [`set_registration_metadata`](Self::set_registration_metadata).
    ///
    /// <p>Reserved for internal use.</p>
    pub fn registration_metadata(mut self, input: crate::types::RegistrationMetadataItem) -> Self {
        self.inner = self.inner.registration_metadata(input);
        self
    }
    /// <p>Reserved for internal use.</p>
    pub fn set_registration_metadata(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RegistrationMetadataItem>>,
    ) -> Self {
        self.inner = self.inner.set_registration_metadata(input);
        self
    }
}
