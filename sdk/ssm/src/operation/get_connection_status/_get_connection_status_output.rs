// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetConnectionStatusOutput {
    /// <p>The ID of the managed node to check connection status. </p>
    #[doc(hidden)]
    pub target: std::option::Option<std::string::String>,
    /// <p>The status of the connection to the managed node. For example, 'Connected' or 'Not Connected'.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ConnectionStatus>,
    _request_id: Option<String>,
}
impl GetConnectionStatusOutput {
    /// <p>The ID of the managed node to check connection status. </p>
    pub fn target(&self) -> std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>The status of the connection to the managed node. For example, 'Connected' or 'Not Connected'.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ConnectionStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetConnectionStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetConnectionStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetConnectionStatusOutput`](crate::operation::get_connection_status::GetConnectionStatusOutput).
    pub fn builder(
    ) -> crate::operation::get_connection_status::builders::GetConnectionStatusOutputBuilder {
        crate::operation::get_connection_status::builders::GetConnectionStatusOutputBuilder::default(
        )
    }
}

/// A builder for [`GetConnectionStatusOutput`](crate::operation::get_connection_status::GetConnectionStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetConnectionStatusOutputBuilder {
    pub(crate) target: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ConnectionStatus>,
    _request_id: Option<String>,
}
impl GetConnectionStatusOutputBuilder {
    /// <p>The ID of the managed node to check connection status. </p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.target = Some(input.into());
        self
    }
    /// <p>The ID of the managed node to check connection status. </p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The status of the connection to the managed node. For example, 'Connected' or 'Not Connected'.</p>
    pub fn status(mut self, input: crate::types::ConnectionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the connection to the managed node. For example, 'Connected' or 'Not Connected'.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ConnectionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetConnectionStatusOutput`](crate::operation::get_connection_status::GetConnectionStatusOutput).
    pub fn build(self) -> crate::operation::get_connection_status::GetConnectionStatusOutput {
        crate::operation::get_connection_status::GetConnectionStatusOutput {
            target: self.target,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
