// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_maintenance_window::_update_maintenance_window_output::UpdateMaintenanceWindowOutputBuilder;

pub use crate::operation::update_maintenance_window::_update_maintenance_window_input::UpdateMaintenanceWindowInputBuilder;

/// Fluent builder constructing a request to `UpdateMaintenanceWindow`.
///
/// <p>Updates an existing maintenance window. Only specified parameters are modified.</p> <note>
/// <p>The value you specify for <code>Duration</code> determines the specific end time for the maintenance window based on the time it begins. No maintenance window tasks are permitted to start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>. For example, if the maintenance window starts at 3 PM, the duration is three hours, and the value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start after 5 PM.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMaintenanceWindowFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::update_maintenance_window::builders::UpdateMaintenanceWindowInputBuilder,
}
impl UpdateMaintenanceWindowFluentBuilder {
    /// Creates a new `UpdateMaintenanceWindow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_maintenance_window::UpdateMaintenanceWindow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_maintenance_window::UpdateMaintenanceWindowError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_maintenance_window::UpdateMaintenanceWindowOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_maintenance_window::UpdateMaintenanceWindowError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the maintenance window to update.</p>
    pub fn window_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.window_id(input.into());
        self
    }
    /// <p>The ID of the maintenance window to update.</p>
    pub fn set_window_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_window_id(input);
        self
    }
    /// <p>The name of the maintenance window.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the maintenance window.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>An optional description for the update request.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An optional description for the update request.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to become active. <code>StartDate</code> allows you to delay activation of the maintenance window until the specified future date.</p>
    pub fn start_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.start_date(input.into());
        self
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to become active. <code>StartDate</code> allows you to delay activation of the maintenance window until the specified future date.</p>
    pub fn set_start_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_start_date(input);
        self
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to become inactive. <code>EndDate</code> allows you to set a date and time in the future when the maintenance window will no longer run.</p>
    pub fn end_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.end_date(input.into());
        self
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to become inactive. <code>EndDate</code> allows you to set a date and time in the future when the maintenance window will no longer run.</p>
    pub fn set_end_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_end_date(input);
        self
    }
    /// <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
    pub fn schedule(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.schedule(input.into());
        self
    }
    /// <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
    pub fn set_schedule(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_schedule(input);
        self
    }
    /// <p>The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p>
    pub fn schedule_timezone(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.schedule_timezone(input.into());
        self
    }
    /// <p>The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p>
    pub fn set_schedule_timezone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_schedule_timezone(input);
        self
    }
    /// <p>The number of days to wait after the date and time specified by a cron expression before running the maintenance window.</p>
    /// <p>For example, the following cron expression schedules a maintenance window to run the third Tuesday of every month at 11:30 PM.</p>
    /// <p> <code>cron(30 23 ? * TUE#3 *)</code> </p>
    /// <p>If the schedule offset is <code>2</code>, the maintenance window won't run until two days later.</p>
    pub fn schedule_offset(mut self, input: i32) -> Self {
        self.inner = self.inner.schedule_offset(input);
        self
    }
    /// <p>The number of days to wait after the date and time specified by a cron expression before running the maintenance window.</p>
    /// <p>For example, the following cron expression schedules a maintenance window to run the third Tuesday of every month at 11:30 PM.</p>
    /// <p> <code>cron(30 23 ? * TUE#3 *)</code> </p>
    /// <p>If the schedule offset is <code>2</code>, the maintenance window won't run until two days later.</p>
    pub fn set_schedule_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_schedule_offset(input);
        self
    }
    /// <p>The duration of the maintenance window in hours.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.inner = self.inner.duration(input);
        self
    }
    /// <p>The duration of the maintenance window in hours.</p>
    pub fn set_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_duration(input);
        self
    }
    /// <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling new tasks for execution.</p>
    pub fn cutoff(mut self, input: i32) -> Self {
        self.inner = self.inner.cutoff(input);
        self
    }
    /// <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling new tasks for execution.</p>
    pub fn set_cutoff(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_cutoff(input);
        self
    }
    /// <p>Whether targets must be registered with the maintenance window before tasks can be defined for those targets.</p>
    pub fn allow_unassociated_targets(mut self, input: bool) -> Self {
        self.inner = self.inner.allow_unassociated_targets(input);
        self
    }
    /// <p>Whether targets must be registered with the maintenance window before tasks can be defined for those targets.</p>
    pub fn set_allow_unassociated_targets(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_allow_unassociated_targets(input);
        self
    }
    /// <p>Whether the maintenance window is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.enabled(input);
        self
    }
    /// <p>Whether the maintenance window is enabled.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enabled(input);
        self
    }
    /// <p>If <code>True</code>, then all fields that are required by the <code>CreateMaintenanceWindow</code> operation are also required for this API request. Optional fields that aren't specified are set to null. </p>
    pub fn replace(mut self, input: bool) -> Self {
        self.inner = self.inner.replace(input);
        self
    }
    /// <p>If <code>True</code>, then all fields that are required by the <code>CreateMaintenanceWindow</code> operation are also required for this API request. Optional fields that aren't specified are set to null. </p>
    pub fn set_replace(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_replace(input);
        self
    }
}
