// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAssociationStatusInput {
    /// <p>The name of the SSM document.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The managed node ID.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The association status.</p>
    pub association_status: ::std::option::Option<crate::types::AssociationStatus>,
}
impl UpdateAssociationStatusInput {
    /// <p>The name of the SSM document.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The managed node ID.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The association status.</p>
    pub fn association_status(&self) -> ::std::option::Option<&crate::types::AssociationStatus> {
        self.association_status.as_ref()
    }
}
impl UpdateAssociationStatusInput {
    /// Creates a new builder-style object to manufacture [`UpdateAssociationStatusInput`](crate::operation::update_association_status::UpdateAssociationStatusInput).
    pub fn builder() -> crate::operation::update_association_status::builders::UpdateAssociationStatusInputBuilder {
        crate::operation::update_association_status::builders::UpdateAssociationStatusInputBuilder::default()
    }
}

/// A builder for [`UpdateAssociationStatusInput`](crate::operation::update_association_status::UpdateAssociationStatusInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateAssociationStatusInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_status: ::std::option::Option<crate::types::AssociationStatus>,
}
impl UpdateAssociationStatusInputBuilder {
    /// <p>The name of the SSM document.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SSM document.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the SSM document.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The managed node ID.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The managed node ID.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The managed node ID.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The association status.</p>
    /// This field is required.
    pub fn association_status(mut self, input: crate::types::AssociationStatus) -> Self {
        self.association_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The association status.</p>
    pub fn set_association_status(mut self, input: ::std::option::Option<crate::types::AssociationStatus>) -> Self {
        self.association_status = input;
        self
    }
    /// <p>The association status.</p>
    pub fn get_association_status(&self) -> &::std::option::Option<crate::types::AssociationStatus> {
        &self.association_status
    }
    /// Consumes the builder and constructs a [`UpdateAssociationStatusInput`](crate::operation::update_association_status::UpdateAssociationStatusInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_association_status::UpdateAssociationStatusInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_association_status::UpdateAssociationStatusInput {
            name: self.name,
            instance_id: self.instance_id,
            association_status: self.association_status,
        })
    }
}
