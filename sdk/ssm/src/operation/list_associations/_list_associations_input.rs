// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAssociationsInput {
    /// <p>One or more filters. Use a filter to return a more specific list of results.</p> <note>
    /// <p>Filtering associations using the <code>InstanceID</code> attribute only returns legacy associations created using the <code>InstanceID</code> attribute. Associations targeting the managed node that are part of the Target Attributes <code>ResourceGroup</code> or <code>Tags</code> aren't returned.</p>
    /// </note>
    #[doc(hidden)]
    pub association_filter_list:
        std::option::Option<std::vec::Vec<crate::types::AssociationFilter>>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAssociationsInput {
    /// <p>One or more filters. Use a filter to return a more specific list of results.</p> <note>
    /// <p>Filtering associations using the <code>InstanceID</code> attribute only returns legacy associations created using the <code>InstanceID</code> attribute. Associations targeting the managed node that are part of the Target Attributes <code>ResourceGroup</code> or <code>Tags</code> aren't returned.</p>
    /// </note>
    pub fn association_filter_list(
        &self,
    ) -> std::option::Option<&[crate::types::AssociationFilter]> {
        self.association_filter_list.as_deref()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListAssociationsInput {
    /// Creates a new builder-style object to manufacture [`ListAssociationsInput`](crate::operation::list_associations::ListAssociationsInput).
    pub fn builder() -> crate::operation::list_associations::builders::ListAssociationsInputBuilder
    {
        crate::operation::list_associations::builders::ListAssociationsInputBuilder::default()
    }
}

/// A builder for [`ListAssociationsInput`](crate::operation::list_associations::ListAssociationsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListAssociationsInputBuilder {
    pub(crate) association_filter_list:
        std::option::Option<std::vec::Vec<crate::types::AssociationFilter>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListAssociationsInputBuilder {
    /// Appends an item to `association_filter_list`.
    ///
    /// To override the contents of this collection use [`set_association_filter_list`](Self::set_association_filter_list).
    ///
    /// <p>One or more filters. Use a filter to return a more specific list of results.</p> <note>
    /// <p>Filtering associations using the <code>InstanceID</code> attribute only returns legacy associations created using the <code>InstanceID</code> attribute. Associations targeting the managed node that are part of the Target Attributes <code>ResourceGroup</code> or <code>Tags</code> aren't returned.</p>
    /// </note>
    pub fn association_filter_list(mut self, input: crate::types::AssociationFilter) -> Self {
        let mut v = self.association_filter_list.unwrap_or_default();
        v.push(input);
        self.association_filter_list = Some(v);
        self
    }
    /// <p>One or more filters. Use a filter to return a more specific list of results.</p> <note>
    /// <p>Filtering associations using the <code>InstanceID</code> attribute only returns legacy associations created using the <code>InstanceID</code> attribute. Associations targeting the managed node that are part of the Target Attributes <code>ResourceGroup</code> or <code>Tags</code> aren't returned.</p>
    /// </note>
    pub fn set_association_filter_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssociationFilter>>,
    ) -> Self {
        self.association_filter_list = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListAssociationsInput`](crate::operation::list_associations::ListAssociationsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_associations::ListAssociationsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_associations::ListAssociationsInput {
            association_filter_list: self.association_filter_list,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
