// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterTaskFromMaintenanceWindowInput {
    /// <p>The ID of the maintenance window the task should be removed from.</p>
    #[doc(hidden)]
    pub window_id: std::option::Option<std::string::String>,
    /// <p>The ID of the task to remove from the maintenance window.</p>
    #[doc(hidden)]
    pub window_task_id: std::option::Option<std::string::String>,
}
impl DeregisterTaskFromMaintenanceWindowInput {
    /// <p>The ID of the maintenance window the task should be removed from.</p>
    pub fn window_id(&self) -> std::option::Option<&str> {
        self.window_id.as_deref()
    }
    /// <p>The ID of the task to remove from the maintenance window.</p>
    pub fn window_task_id(&self) -> std::option::Option<&str> {
        self.window_task_id.as_deref()
    }
}
impl DeregisterTaskFromMaintenanceWindowInput {
    /// Creates a new builder-style object to manufacture [`DeregisterTaskFromMaintenanceWindowInput`](crate::operation::deregister_task_from_maintenance_window::DeregisterTaskFromMaintenanceWindowInput).
    pub fn builder() -> crate::operation::deregister_task_from_maintenance_window::builders::DeregisterTaskFromMaintenanceWindowInputBuilder{
        crate::operation::deregister_task_from_maintenance_window::builders::DeregisterTaskFromMaintenanceWindowInputBuilder::default()
    }
}

/// A builder for [`DeregisterTaskFromMaintenanceWindowInput`](crate::operation::deregister_task_from_maintenance_window::DeregisterTaskFromMaintenanceWindowInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeregisterTaskFromMaintenanceWindowInputBuilder {
    pub(crate) window_id: std::option::Option<std::string::String>,
    pub(crate) window_task_id: std::option::Option<std::string::String>,
}
impl DeregisterTaskFromMaintenanceWindowInputBuilder {
    /// <p>The ID of the maintenance window the task should be removed from.</p>
    pub fn window_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_id = Some(input.into());
        self
    }
    /// <p>The ID of the maintenance window the task should be removed from.</p>
    pub fn set_window_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.window_id = input;
        self
    }
    /// <p>The ID of the task to remove from the maintenance window.</p>
    pub fn window_task_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_task_id = Some(input.into());
        self
    }
    /// <p>The ID of the task to remove from the maintenance window.</p>
    pub fn set_window_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.window_task_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeregisterTaskFromMaintenanceWindowInput`](crate::operation::deregister_task_from_maintenance_window::DeregisterTaskFromMaintenanceWindowInput).
    pub fn build(self) -> Result<crate::operation::deregister_task_from_maintenance_window::DeregisterTaskFromMaintenanceWindowInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::deregister_task_from_maintenance_window::DeregisterTaskFromMaintenanceWindowInput {
                window_id: self.window_id
                ,
                window_task_id: self.window_task_id
                ,
            }
        )
    }
}
