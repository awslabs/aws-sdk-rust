// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCommandInvocationOutput {
    /// <p>The parent command ID of the invocation plugin.</p>
    #[doc(hidden)]
    pub command_id: std::option::Option<std::string::String>,
    /// <p>The ID of the managed node targeted by the command. A <i>managed node</i> can be an Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, or on-premises server or VM in your hybrid environment that is configured for Amazon Web Services Systems Manager.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The comment text for the command.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
    /// <p>The name of the document that was run. For example, <code>AWS-RunShellScript</code>.</p>
    #[doc(hidden)]
    pub document_name: std::option::Option<std::string::String>,
    /// <p>The Systems Manager document (SSM document) version used in the request.</p>
    #[doc(hidden)]
    pub document_version: std::option::Option<std::string::String>,
    /// <p>The name of the plugin, or <i>step name</i>, for which details are reported. For example, <code>aws:RunShellScript</code> is a plugin.</p>
    #[doc(hidden)]
    pub plugin_name: std::option::Option<std::string::String>,
    /// <p>The error level response code for the plugin script. If the response code is <code>-1</code>, then the command hasn't started running on the managed node, or it wasn't received by the node.</p>
    #[doc(hidden)]
    pub response_code: i32,
    /// <p>The date and time the plugin started running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedBefore</code> filter.</p>
    /// <p> <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code> </p>
    /// <p>If the plugin hasn't started to run, the string is empty.</p>
    #[doc(hidden)]
    pub execution_start_date_time: std::option::Option<std::string::String>,
    /// <p>Duration since <code>ExecutionStartDateTime</code>.</p>
    #[doc(hidden)]
    pub execution_elapsed_time: std::option::Option<std::string::String>,
    /// <p>The date and time the plugin finished running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedAfter</code> filter.</p>
    /// <p> <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code> </p>
    /// <p>If the plugin hasn't started to run, the string is empty.</p>
    #[doc(hidden)]
    pub execution_end_date_time: std::option::Option<std::string::String>,
    /// <p>The status of this invocation plugin. This status can be different than <code>StatusDetails</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::CommandInvocationStatus>,
    /// <p>A detailed status of the command execution for an invocation. <code>StatusDetails</code> includes more information than <code>Status</code> because it includes states resulting from error and concurrency control parameters. <code>StatusDetails</code> can show different results than <code>Status</code>. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command statuses</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. <code>StatusDetails</code> can be one of the following values:</p>
    /// <ul>
    /// <li> <p>Pending: The command hasn't been sent to the managed node.</p> </li>
    /// <li> <p>In Progress: The command has been sent to the managed node but hasn't reached a terminal state.</p> </li>
    /// <li> <p>Delayed: The system attempted to send the command to the target, but the target wasn't available. The managed node might not be available because of network issues, because the node was stopped, or for similar reasons. The system will try to send the command again.</p> </li>
    /// <li> <p>Success: The command or plugin ran successfully. This is a terminal state.</p> </li>
    /// <li> <p>Delivery Timed Out: The command wasn't delivered to the managed node before the delivery timeout expired. Delivery timeouts don't count against the parent command's <code>MaxErrors</code> limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>
    /// <li> <p>Execution Timed Out: The command started to run on the managed node, but the execution wasn't complete before the timeout expired. Execution timeouts count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>
    /// <li> <p>Failed: The command wasn't run successfully on the managed node. For a plugin, this indicates that the result code wasn't zero. For a command invocation, this indicates that the result code for one or more plugins wasn't zero. Invocation failures count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>
    /// <li> <p>Cancelled: The command was terminated before it was completed. This is a terminal state.</p> </li>
    /// <li> <p>Undeliverable: The command can't be delivered to the managed node. The node might not exist or might not be responding. Undeliverable invocations don't count against the parent command's <code>MaxErrors</code> limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>
    /// <li> <p>Terminated: The parent command exceeded its <code>MaxErrors</code> limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status_details: std::option::Option<std::string::String>,
    /// <p>The first 24,000 characters written by the plugin to <code>stdout</code>. If the command hasn't finished running, if <code>ExecutionStatus</code> is neither Succeeded nor Failed, then this string is empty.</p>
    #[doc(hidden)]
    pub standard_output_content: std::option::Option<std::string::String>,
    /// <p>The URL for the complete text written by the plugin to <code>stdout</code> in Amazon Simple Storage Service (Amazon S3). If an S3 bucket wasn't specified, then this string is empty.</p>
    #[doc(hidden)]
    pub standard_output_url: std::option::Option<std::string::String>,
    /// <p>The first 8,000 characters written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    #[doc(hidden)]
    pub standard_error_content: std::option::Option<std::string::String>,
    /// <p>The URL for the complete text written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    #[doc(hidden)]
    pub standard_error_url: std::option::Option<std::string::String>,
    /// <p>Amazon CloudWatch Logs information where Systems Manager sent the command output.</p>
    #[doc(hidden)]
    pub cloud_watch_output_config: std::option::Option<crate::types::CloudWatchOutputConfig>,
    _request_id: Option<String>,
}
impl GetCommandInvocationOutput {
    /// <p>The parent command ID of the invocation plugin.</p>
    pub fn command_id(&self) -> std::option::Option<&str> {
        self.command_id.as_deref()
    }
    /// <p>The ID of the managed node targeted by the command. A <i>managed node</i> can be an Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, or on-premises server or VM in your hybrid environment that is configured for Amazon Web Services Systems Manager.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The comment text for the command.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The name of the document that was run. For example, <code>AWS-RunShellScript</code>.</p>
    pub fn document_name(&self) -> std::option::Option<&str> {
        self.document_name.as_deref()
    }
    /// <p>The Systems Manager document (SSM document) version used in the request.</p>
    pub fn document_version(&self) -> std::option::Option<&str> {
        self.document_version.as_deref()
    }
    /// <p>The name of the plugin, or <i>step name</i>, for which details are reported. For example, <code>aws:RunShellScript</code> is a plugin.</p>
    pub fn plugin_name(&self) -> std::option::Option<&str> {
        self.plugin_name.as_deref()
    }
    /// <p>The error level response code for the plugin script. If the response code is <code>-1</code>, then the command hasn't started running on the managed node, or it wasn't received by the node.</p>
    pub fn response_code(&self) -> i32 {
        self.response_code
    }
    /// <p>The date and time the plugin started running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedBefore</code> filter.</p>
    /// <p> <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code> </p>
    /// <p>If the plugin hasn't started to run, the string is empty.</p>
    pub fn execution_start_date_time(&self) -> std::option::Option<&str> {
        self.execution_start_date_time.as_deref()
    }
    /// <p>Duration since <code>ExecutionStartDateTime</code>.</p>
    pub fn execution_elapsed_time(&self) -> std::option::Option<&str> {
        self.execution_elapsed_time.as_deref()
    }
    /// <p>The date and time the plugin finished running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedAfter</code> filter.</p>
    /// <p> <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code> </p>
    /// <p>If the plugin hasn't started to run, the string is empty.</p>
    pub fn execution_end_date_time(&self) -> std::option::Option<&str> {
        self.execution_end_date_time.as_deref()
    }
    /// <p>The status of this invocation plugin. This status can be different than <code>StatusDetails</code>.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::CommandInvocationStatus> {
        self.status.as_ref()
    }
    /// <p>A detailed status of the command execution for an invocation. <code>StatusDetails</code> includes more information than <code>Status</code> because it includes states resulting from error and concurrency control parameters. <code>StatusDetails</code> can show different results than <code>Status</code>. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command statuses</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. <code>StatusDetails</code> can be one of the following values:</p>
    /// <ul>
    /// <li> <p>Pending: The command hasn't been sent to the managed node.</p> </li>
    /// <li> <p>In Progress: The command has been sent to the managed node but hasn't reached a terminal state.</p> </li>
    /// <li> <p>Delayed: The system attempted to send the command to the target, but the target wasn't available. The managed node might not be available because of network issues, because the node was stopped, or for similar reasons. The system will try to send the command again.</p> </li>
    /// <li> <p>Success: The command or plugin ran successfully. This is a terminal state.</p> </li>
    /// <li> <p>Delivery Timed Out: The command wasn't delivered to the managed node before the delivery timeout expired. Delivery timeouts don't count against the parent command's <code>MaxErrors</code> limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>
    /// <li> <p>Execution Timed Out: The command started to run on the managed node, but the execution wasn't complete before the timeout expired. Execution timeouts count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>
    /// <li> <p>Failed: The command wasn't run successfully on the managed node. For a plugin, this indicates that the result code wasn't zero. For a command invocation, this indicates that the result code for one or more plugins wasn't zero. Invocation failures count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>
    /// <li> <p>Cancelled: The command was terminated before it was completed. This is a terminal state.</p> </li>
    /// <li> <p>Undeliverable: The command can't be delivered to the managed node. The node might not exist or might not be responding. Undeliverable invocations don't count against the parent command's <code>MaxErrors</code> limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>
    /// <li> <p>Terminated: The parent command exceeded its <code>MaxErrors</code> limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li>
    /// </ul>
    pub fn status_details(&self) -> std::option::Option<&str> {
        self.status_details.as_deref()
    }
    /// <p>The first 24,000 characters written by the plugin to <code>stdout</code>. If the command hasn't finished running, if <code>ExecutionStatus</code> is neither Succeeded nor Failed, then this string is empty.</p>
    pub fn standard_output_content(&self) -> std::option::Option<&str> {
        self.standard_output_content.as_deref()
    }
    /// <p>The URL for the complete text written by the plugin to <code>stdout</code> in Amazon Simple Storage Service (Amazon S3). If an S3 bucket wasn't specified, then this string is empty.</p>
    pub fn standard_output_url(&self) -> std::option::Option<&str> {
        self.standard_output_url.as_deref()
    }
    /// <p>The first 8,000 characters written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    pub fn standard_error_content(&self) -> std::option::Option<&str> {
        self.standard_error_content.as_deref()
    }
    /// <p>The URL for the complete text written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    pub fn standard_error_url(&self) -> std::option::Option<&str> {
        self.standard_error_url.as_deref()
    }
    /// <p>Amazon CloudWatch Logs information where Systems Manager sent the command output.</p>
    pub fn cloud_watch_output_config(
        &self,
    ) -> std::option::Option<&crate::types::CloudWatchOutputConfig> {
        self.cloud_watch_output_config.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetCommandInvocationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCommandInvocationOutput {
    /// Creates a new builder-style object to manufacture [`GetCommandInvocationOutput`](crate::operation::get_command_invocation::GetCommandInvocationOutput).
    pub fn builder(
    ) -> crate::operation::get_command_invocation::builders::GetCommandInvocationOutputBuilder {
        crate::operation::get_command_invocation::builders::GetCommandInvocationOutputBuilder::default()
    }
}

/// A builder for [`GetCommandInvocationOutput`](crate::operation::get_command_invocation::GetCommandInvocationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetCommandInvocationOutputBuilder {
    pub(crate) command_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) comment: std::option::Option<std::string::String>,
    pub(crate) document_name: std::option::Option<std::string::String>,
    pub(crate) document_version: std::option::Option<std::string::String>,
    pub(crate) plugin_name: std::option::Option<std::string::String>,
    pub(crate) response_code: std::option::Option<i32>,
    pub(crate) execution_start_date_time: std::option::Option<std::string::String>,
    pub(crate) execution_elapsed_time: std::option::Option<std::string::String>,
    pub(crate) execution_end_date_time: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::CommandInvocationStatus>,
    pub(crate) status_details: std::option::Option<std::string::String>,
    pub(crate) standard_output_content: std::option::Option<std::string::String>,
    pub(crate) standard_output_url: std::option::Option<std::string::String>,
    pub(crate) standard_error_content: std::option::Option<std::string::String>,
    pub(crate) standard_error_url: std::option::Option<std::string::String>,
    pub(crate) cloud_watch_output_config: std::option::Option<crate::types::CloudWatchOutputConfig>,
    _request_id: Option<String>,
}
impl GetCommandInvocationOutputBuilder {
    /// <p>The parent command ID of the invocation plugin.</p>
    pub fn command_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.command_id = Some(input.into());
        self
    }
    /// <p>The parent command ID of the invocation plugin.</p>
    pub fn set_command_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.command_id = input;
        self
    }
    /// <p>The ID of the managed node targeted by the command. A <i>managed node</i> can be an Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, or on-premises server or VM in your hybrid environment that is configured for Amazon Web Services Systems Manager.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the managed node targeted by the command. A <i>managed node</i> can be an Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, or on-premises server or VM in your hybrid environment that is configured for Amazon Web Services Systems Manager.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The comment text for the command.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>The comment text for the command.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>The name of the document that was run. For example, <code>AWS-RunShellScript</code>.</p>
    pub fn document_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_name = Some(input.into());
        self
    }
    /// <p>The name of the document that was run. For example, <code>AWS-RunShellScript</code>.</p>
    pub fn set_document_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_name = input;
        self
    }
    /// <p>The Systems Manager document (SSM document) version used in the request.</p>
    pub fn document_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_version = Some(input.into());
        self
    }
    /// <p>The Systems Manager document (SSM document) version used in the request.</p>
    pub fn set_document_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_version = input;
        self
    }
    /// <p>The name of the plugin, or <i>step name</i>, for which details are reported. For example, <code>aws:RunShellScript</code> is a plugin.</p>
    pub fn plugin_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.plugin_name = Some(input.into());
        self
    }
    /// <p>The name of the plugin, or <i>step name</i>, for which details are reported. For example, <code>aws:RunShellScript</code> is a plugin.</p>
    pub fn set_plugin_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.plugin_name = input;
        self
    }
    /// <p>The error level response code for the plugin script. If the response code is <code>-1</code>, then the command hasn't started running on the managed node, or it wasn't received by the node.</p>
    pub fn response_code(mut self, input: i32) -> Self {
        self.response_code = Some(input);
        self
    }
    /// <p>The error level response code for the plugin script. If the response code is <code>-1</code>, then the command hasn't started running on the managed node, or it wasn't received by the node.</p>
    pub fn set_response_code(mut self, input: std::option::Option<i32>) -> Self {
        self.response_code = input;
        self
    }
    /// <p>The date and time the plugin started running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedBefore</code> filter.</p>
    /// <p> <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code> </p>
    /// <p>If the plugin hasn't started to run, the string is empty.</p>
    pub fn execution_start_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_start_date_time = Some(input.into());
        self
    }
    /// <p>The date and time the plugin started running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedBefore</code> filter.</p>
    /// <p> <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code> </p>
    /// <p>If the plugin hasn't started to run, the string is empty.</p>
    pub fn set_execution_start_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_start_date_time = input;
        self
    }
    /// <p>Duration since <code>ExecutionStartDateTime</code>.</p>
    pub fn execution_elapsed_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_elapsed_time = Some(input.into());
        self
    }
    /// <p>Duration since <code>ExecutionStartDateTime</code>.</p>
    pub fn set_execution_elapsed_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_elapsed_time = input;
        self
    }
    /// <p>The date and time the plugin finished running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedAfter</code> filter.</p>
    /// <p> <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code> </p>
    /// <p>If the plugin hasn't started to run, the string is empty.</p>
    pub fn execution_end_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_end_date_time = Some(input.into());
        self
    }
    /// <p>The date and time the plugin finished running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedAfter</code> filter.</p>
    /// <p> <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code> </p>
    /// <p>If the plugin hasn't started to run, the string is empty.</p>
    pub fn set_execution_end_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_end_date_time = input;
        self
    }
    /// <p>The status of this invocation plugin. This status can be different than <code>StatusDetails</code>.</p>
    pub fn status(mut self, input: crate::types::CommandInvocationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of this invocation plugin. This status can be different than <code>StatusDetails</code>.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::CommandInvocationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>A detailed status of the command execution for an invocation. <code>StatusDetails</code> includes more information than <code>Status</code> because it includes states resulting from error and concurrency control parameters. <code>StatusDetails</code> can show different results than <code>Status</code>. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command statuses</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. <code>StatusDetails</code> can be one of the following values:</p>
    /// <ul>
    /// <li> <p>Pending: The command hasn't been sent to the managed node.</p> </li>
    /// <li> <p>In Progress: The command has been sent to the managed node but hasn't reached a terminal state.</p> </li>
    /// <li> <p>Delayed: The system attempted to send the command to the target, but the target wasn't available. The managed node might not be available because of network issues, because the node was stopped, or for similar reasons. The system will try to send the command again.</p> </li>
    /// <li> <p>Success: The command or plugin ran successfully. This is a terminal state.</p> </li>
    /// <li> <p>Delivery Timed Out: The command wasn't delivered to the managed node before the delivery timeout expired. Delivery timeouts don't count against the parent command's <code>MaxErrors</code> limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>
    /// <li> <p>Execution Timed Out: The command started to run on the managed node, but the execution wasn't complete before the timeout expired. Execution timeouts count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>
    /// <li> <p>Failed: The command wasn't run successfully on the managed node. For a plugin, this indicates that the result code wasn't zero. For a command invocation, this indicates that the result code for one or more plugins wasn't zero. Invocation failures count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>
    /// <li> <p>Cancelled: The command was terminated before it was completed. This is a terminal state.</p> </li>
    /// <li> <p>Undeliverable: The command can't be delivered to the managed node. The node might not exist or might not be responding. Undeliverable invocations don't count against the parent command's <code>MaxErrors</code> limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>
    /// <li> <p>Terminated: The parent command exceeded its <code>MaxErrors</code> limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li>
    /// </ul>
    pub fn status_details(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_details = Some(input.into());
        self
    }
    /// <p>A detailed status of the command execution for an invocation. <code>StatusDetails</code> includes more information than <code>Status</code> because it includes states resulting from error and concurrency control parameters. <code>StatusDetails</code> can show different results than <code>Status</code>. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command statuses</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. <code>StatusDetails</code> can be one of the following values:</p>
    /// <ul>
    /// <li> <p>Pending: The command hasn't been sent to the managed node.</p> </li>
    /// <li> <p>In Progress: The command has been sent to the managed node but hasn't reached a terminal state.</p> </li>
    /// <li> <p>Delayed: The system attempted to send the command to the target, but the target wasn't available. The managed node might not be available because of network issues, because the node was stopped, or for similar reasons. The system will try to send the command again.</p> </li>
    /// <li> <p>Success: The command or plugin ran successfully. This is a terminal state.</p> </li>
    /// <li> <p>Delivery Timed Out: The command wasn't delivered to the managed node before the delivery timeout expired. Delivery timeouts don't count against the parent command's <code>MaxErrors</code> limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>
    /// <li> <p>Execution Timed Out: The command started to run on the managed node, but the execution wasn't complete before the timeout expired. Execution timeouts count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>
    /// <li> <p>Failed: The command wasn't run successfully on the managed node. For a plugin, this indicates that the result code wasn't zero. For a command invocation, this indicates that the result code for one or more plugins wasn't zero. Invocation failures count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>
    /// <li> <p>Cancelled: The command was terminated before it was completed. This is a terminal state.</p> </li>
    /// <li> <p>Undeliverable: The command can't be delivered to the managed node. The node might not exist or might not be responding. Undeliverable invocations don't count against the parent command's <code>MaxErrors</code> limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>
    /// <li> <p>Terminated: The parent command exceeded its <code>MaxErrors</code> limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li>
    /// </ul>
    pub fn set_status_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_details = input;
        self
    }
    /// <p>The first 24,000 characters written by the plugin to <code>stdout</code>. If the command hasn't finished running, if <code>ExecutionStatus</code> is neither Succeeded nor Failed, then this string is empty.</p>
    pub fn standard_output_content(mut self, input: impl Into<std::string::String>) -> Self {
        self.standard_output_content = Some(input.into());
        self
    }
    /// <p>The first 24,000 characters written by the plugin to <code>stdout</code>. If the command hasn't finished running, if <code>ExecutionStatus</code> is neither Succeeded nor Failed, then this string is empty.</p>
    pub fn set_standard_output_content(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.standard_output_content = input;
        self
    }
    /// <p>The URL for the complete text written by the plugin to <code>stdout</code> in Amazon Simple Storage Service (Amazon S3). If an S3 bucket wasn't specified, then this string is empty.</p>
    pub fn standard_output_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.standard_output_url = Some(input.into());
        self
    }
    /// <p>The URL for the complete text written by the plugin to <code>stdout</code> in Amazon Simple Storage Service (Amazon S3). If an S3 bucket wasn't specified, then this string is empty.</p>
    pub fn set_standard_output_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.standard_output_url = input;
        self
    }
    /// <p>The first 8,000 characters written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    pub fn standard_error_content(mut self, input: impl Into<std::string::String>) -> Self {
        self.standard_error_content = Some(input.into());
        self
    }
    /// <p>The first 8,000 characters written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    pub fn set_standard_error_content(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.standard_error_content = input;
        self
    }
    /// <p>The URL for the complete text written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    pub fn standard_error_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.standard_error_url = Some(input.into());
        self
    }
    /// <p>The URL for the complete text written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    pub fn set_standard_error_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.standard_error_url = input;
        self
    }
    /// <p>Amazon CloudWatch Logs information where Systems Manager sent the command output.</p>
    pub fn cloud_watch_output_config(
        mut self,
        input: crate::types::CloudWatchOutputConfig,
    ) -> Self {
        self.cloud_watch_output_config = Some(input);
        self
    }
    /// <p>Amazon CloudWatch Logs information where Systems Manager sent the command output.</p>
    pub fn set_cloud_watch_output_config(
        mut self,
        input: std::option::Option<crate::types::CloudWatchOutputConfig>,
    ) -> Self {
        self.cloud_watch_output_config = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCommandInvocationOutput`](crate::operation::get_command_invocation::GetCommandInvocationOutput).
    pub fn build(self) -> crate::operation::get_command_invocation::GetCommandInvocationOutput {
        crate::operation::get_command_invocation::GetCommandInvocationOutput {
            command_id: self.command_id,
            instance_id: self.instance_id,
            comment: self.comment,
            document_name: self.document_name,
            document_version: self.document_version,
            plugin_name: self.plugin_name,
            response_code: self.response_code.unwrap_or_default(),
            execution_start_date_time: self.execution_start_date_time,
            execution_elapsed_time: self.execution_elapsed_time,
            execution_end_date_time: self.execution_end_date_time,
            status: self.status,
            status_details: self.status_details,
            standard_output_content: self.standard_output_content,
            standard_output_url: self.standard_output_url,
            standard_error_content: self.standard_error_content,
            standard_error_url: self.standard_error_url,
            cloud_watch_output_config: self.cloud_watch_output_config,
            _request_id: self._request_id,
        }
    }
}
