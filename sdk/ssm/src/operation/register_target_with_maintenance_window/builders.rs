// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_target_with_maintenance_window::_register_target_with_maintenance_window_output::RegisterTargetWithMaintenanceWindowOutputBuilder;

pub use crate::operation::register_target_with_maintenance_window::_register_target_with_maintenance_window_input::RegisterTargetWithMaintenanceWindowInputBuilder;

/// Fluent builder constructing a request to `RegisterTargetWithMaintenanceWindow`.
///
/// <p>Registers a target with a maintenance window.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RegisterTargetWithMaintenanceWindowFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowInputBuilder
            }
impl RegisterTargetWithMaintenanceWindowFluentBuilder {
    /// Creates a new `RegisterTargetWithMaintenanceWindow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::register_target_with_maintenance_window::RegisterTargetWithMaintenanceWindow, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::register_target_with_maintenance_window::RegisterTargetWithMaintenanceWindowError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::register_target_with_maintenance_window::RegisterTargetWithMaintenanceWindowOutput, aws_smithy_http::result::SdkError<crate::operation::register_target_with_maintenance_window::RegisterTargetWithMaintenanceWindowError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the maintenance window the target should be registered with.</p>
    pub fn window_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.window_id(input.into());
        self
    }
    /// <p>The ID of the maintenance window the target should be registered with.</p>
    pub fn set_window_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_window_id(input);
        self
    }
    /// <p>The type of target being registered with the maintenance window.</p>
    pub fn resource_type(mut self, input: crate::types::MaintenanceWindowResourceType) -> Self {
        self.inner = self.inner.resource_type(input);
        self
    }
    /// <p>The type of target being registered with the maintenance window.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::MaintenanceWindowResourceType>,
    ) -> Self {
        self.inner = self.inner.set_resource_type(input);
        self
    }
    /// Appends an item to `Targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The targets to register with the maintenance window. In other words, the managed nodes to run commands on when the maintenance window runs.</p> <note>
    /// <p>If a single maintenance window task is registered with multiple targets, its task invocations occur sequentially and not in parallel. If your task must run on multiple targets at the same time, register a task for each target individually and assign each task the same priority level.</p>
    /// </note>
    /// <p>You can specify targets using managed node IDs, resource group names, or tags that have been applied to managed nodes.</p>
    /// <p> <b>Example 1</b>: Specify managed node IDs</p>
    /// <p> <code>Key=InstanceIds,Values=
    /// <instance-id-1>
    /// ,
    /// <instance-id-2>
    /// ,
    /// <instance-id-3></instance-id-3>
    /// </instance-id-2>
    /// </instance-id-1></code> </p>
    /// <p> <b>Example 2</b>: Use tag key-pairs applied to managed nodes</p>
    /// <p> <code>Key=tag:
    /// <my-tag-key>
    /// ,Values=
    /// <my-tag-value-1>
    /// ,
    /// <my-tag-value-2></my-tag-value-2>
    /// </my-tag-value-1>
    /// </my-tag-key></code> </p>
    /// <p> <b>Example 3</b>: Use tag-keys applied to managed nodes</p>
    /// <p> <code>Key=tag-key,Values=
    /// <my-tag-key-1>
    /// ,
    /// <my-tag-key-2></my-tag-key-2>
    /// </my-tag-key-1></code> </p>
    /// <p> <b>Example 4</b>: Use resource group names</p>
    /// <p> <code>Key=resource-groups:Name,Values=
    /// <resource-group-name></resource-group-name></code> </p>
    /// <p> <b>Example 5</b>: Use filters for resource group types</p>
    /// <p> <code>Key=resource-groups:ResourceTypeFilters,Values=
    /// <resource-type-1>
    /// ,
    /// <resource-type-2></resource-type-2>
    /// </resource-type-1></code> </p> <note>
    /// <p>For <code>Key=resource-groups:ResourceTypeFilters</code>, specify resource types in the following format</p>
    /// <p> <code>Key=resource-groups:ResourceTypeFilters,Values=AWS::EC2::INSTANCE,AWS::EC2::VPC</code> </p>
    /// </note>
    /// <p>For more information about these examples formats, including the best use case for each one, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html">Examples: Register targets with a maintenance window</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn targets(mut self, input: crate::types::Target) -> Self {
        self.inner = self.inner.targets(input);
        self
    }
    /// <p>The targets to register with the maintenance window. In other words, the managed nodes to run commands on when the maintenance window runs.</p> <note>
    /// <p>If a single maintenance window task is registered with multiple targets, its task invocations occur sequentially and not in parallel. If your task must run on multiple targets at the same time, register a task for each target individually and assign each task the same priority level.</p>
    /// </note>
    /// <p>You can specify targets using managed node IDs, resource group names, or tags that have been applied to managed nodes.</p>
    /// <p> <b>Example 1</b>: Specify managed node IDs</p>
    /// <p> <code>Key=InstanceIds,Values=
    /// <instance-id-1>
    /// ,
    /// <instance-id-2>
    /// ,
    /// <instance-id-3></instance-id-3>
    /// </instance-id-2>
    /// </instance-id-1></code> </p>
    /// <p> <b>Example 2</b>: Use tag key-pairs applied to managed nodes</p>
    /// <p> <code>Key=tag:
    /// <my-tag-key>
    /// ,Values=
    /// <my-tag-value-1>
    /// ,
    /// <my-tag-value-2></my-tag-value-2>
    /// </my-tag-value-1>
    /// </my-tag-key></code> </p>
    /// <p> <b>Example 3</b>: Use tag-keys applied to managed nodes</p>
    /// <p> <code>Key=tag-key,Values=
    /// <my-tag-key-1>
    /// ,
    /// <my-tag-key-2></my-tag-key-2>
    /// </my-tag-key-1></code> </p>
    /// <p> <b>Example 4</b>: Use resource group names</p>
    /// <p> <code>Key=resource-groups:Name,Values=
    /// <resource-group-name></resource-group-name></code> </p>
    /// <p> <b>Example 5</b>: Use filters for resource group types</p>
    /// <p> <code>Key=resource-groups:ResourceTypeFilters,Values=
    /// <resource-type-1>
    /// ,
    /// <resource-type-2></resource-type-2>
    /// </resource-type-1></code> </p> <note>
    /// <p>For <code>Key=resource-groups:ResourceTypeFilters</code>, specify resource types in the following format</p>
    /// <p> <code>Key=resource-groups:ResourceTypeFilters,Values=AWS::EC2::INSTANCE,AWS::EC2::VPC</code> </p>
    /// </note>
    /// <p>For more information about these examples formats, including the best use case for each one, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html">Examples: Register targets with a maintenance window</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn set_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Target>>,
    ) -> Self {
        self.inner = self.inner.set_targets(input);
        self
    }
    /// <p>User-provided value that will be included in any Amazon CloudWatch Events events raised while running tasks for these targets in this maintenance window.</p>
    pub fn owner_information(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.owner_information(input.into());
        self
    }
    /// <p>User-provided value that will be included in any Amazon CloudWatch Events events raised while running tasks for these targets in this maintenance window.</p>
    pub fn set_owner_information(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_owner_information(input);
        self
    }
    /// <p>An optional name for the target.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>An optional name for the target.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>An optional description for the target.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An optional description for the target.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>User-provided idempotency token.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>User-provided idempotency token.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
