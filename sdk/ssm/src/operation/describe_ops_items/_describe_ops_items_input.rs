// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeOpsItemsInput {
    /// <p>One or more filters to limit the response.</p>
    /// <ul>
    /// <li> <p>Key: CreatedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: LastModifiedBy</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: LastModifiedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: Priority</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Source</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: Status</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Title*</p> <p>Operations: Equals,Contains</p> </li>
    /// <li> <p>Key: OperationalData**</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataKey</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataValue</p> <p>Operations: Equals, Contains</p> </li>
    /// <li> <p>Key: OpsItemId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: ResourceId</p> <p>Operations: Contains</p> </li>
    /// <li> <p>Key: AutomationId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: AccountId</p> <p>Operations: Equals</p> </li>
    /// </ul>
    /// <p>*The Equals operator for Title matches the first 100 characters. If you specify more than 100 characters, they system returns an error that the filter value exceeds the length limit.</p>
    /// <p>**If you filter the response by using the OperationalData operator, specify a key-value pair by using the following JSON format: {"key":"key_name","value":"a_value"}</p>
    pub ops_item_filters: ::std::option::Option<::std::vec::Vec<crate::types::OpsItemFilter>>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeOpsItemsInput {
    /// <p>One or more filters to limit the response.</p>
    /// <ul>
    /// <li> <p>Key: CreatedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: LastModifiedBy</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: LastModifiedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: Priority</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Source</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: Status</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Title*</p> <p>Operations: Equals,Contains</p> </li>
    /// <li> <p>Key: OperationalData**</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataKey</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataValue</p> <p>Operations: Equals, Contains</p> </li>
    /// <li> <p>Key: OpsItemId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: ResourceId</p> <p>Operations: Contains</p> </li>
    /// <li> <p>Key: AutomationId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: AccountId</p> <p>Operations: Equals</p> </li>
    /// </ul>
    /// <p>*The Equals operator for Title matches the first 100 characters. If you specify more than 100 characters, they system returns an error that the filter value exceeds the length limit.</p>
    /// <p>**If you filter the response by using the OperationalData operator, specify a key-value pair by using the following JSON format: {"key":"key_name","value":"a_value"}</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ops_item_filters.is_none()`.
    pub fn ops_item_filters(&self) -> &[crate::types::OpsItemFilter] {
        self.ops_item_filters.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeOpsItemsInput {
    /// Creates a new builder-style object to manufacture [`DescribeOpsItemsInput`](crate::operation::describe_ops_items::DescribeOpsItemsInput).
    pub fn builder() -> crate::operation::describe_ops_items::builders::DescribeOpsItemsInputBuilder {
        crate::operation::describe_ops_items::builders::DescribeOpsItemsInputBuilder::default()
    }
}

/// A builder for [`DescribeOpsItemsInput`](crate::operation::describe_ops_items::DescribeOpsItemsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeOpsItemsInputBuilder {
    pub(crate) ops_item_filters: ::std::option::Option<::std::vec::Vec<crate::types::OpsItemFilter>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeOpsItemsInputBuilder {
    /// Appends an item to `ops_item_filters`.
    ///
    /// To override the contents of this collection use [`set_ops_item_filters`](Self::set_ops_item_filters).
    ///
    /// <p>One or more filters to limit the response.</p>
    /// <ul>
    /// <li> <p>Key: CreatedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: LastModifiedBy</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: LastModifiedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: Priority</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Source</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: Status</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Title*</p> <p>Operations: Equals,Contains</p> </li>
    /// <li> <p>Key: OperationalData**</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataKey</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataValue</p> <p>Operations: Equals, Contains</p> </li>
    /// <li> <p>Key: OpsItemId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: ResourceId</p> <p>Operations: Contains</p> </li>
    /// <li> <p>Key: AutomationId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: AccountId</p> <p>Operations: Equals</p> </li>
    /// </ul>
    /// <p>*The Equals operator for Title matches the first 100 characters. If you specify more than 100 characters, they system returns an error that the filter value exceeds the length limit.</p>
    /// <p>**If you filter the response by using the OperationalData operator, specify a key-value pair by using the following JSON format: {"key":"key_name","value":"a_value"}</p>
    pub fn ops_item_filters(mut self, input: crate::types::OpsItemFilter) -> Self {
        let mut v = self.ops_item_filters.unwrap_or_default();
        v.push(input);
        self.ops_item_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more filters to limit the response.</p>
    /// <ul>
    /// <li> <p>Key: CreatedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: LastModifiedBy</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: LastModifiedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: Priority</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Source</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: Status</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Title*</p> <p>Operations: Equals,Contains</p> </li>
    /// <li> <p>Key: OperationalData**</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataKey</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataValue</p> <p>Operations: Equals, Contains</p> </li>
    /// <li> <p>Key: OpsItemId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: ResourceId</p> <p>Operations: Contains</p> </li>
    /// <li> <p>Key: AutomationId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: AccountId</p> <p>Operations: Equals</p> </li>
    /// </ul>
    /// <p>*The Equals operator for Title matches the first 100 characters. If you specify more than 100 characters, they system returns an error that the filter value exceeds the length limit.</p>
    /// <p>**If you filter the response by using the OperationalData operator, specify a key-value pair by using the following JSON format: {"key":"key_name","value":"a_value"}</p>
    pub fn set_ops_item_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OpsItemFilter>>) -> Self {
        self.ops_item_filters = input;
        self
    }
    /// <p>One or more filters to limit the response.</p>
    /// <ul>
    /// <li> <p>Key: CreatedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: LastModifiedBy</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: LastModifiedTime</p> <p>Operations: GreaterThan, LessThan</p> </li>
    /// <li> <p>Key: Priority</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Source</p> <p>Operations: Contains, Equals</p> </li>
    /// <li> <p>Key: Status</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: Title*</p> <p>Operations: Equals,Contains</p> </li>
    /// <li> <p>Key: OperationalData**</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataKey</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: OperationalDataValue</p> <p>Operations: Equals, Contains</p> </li>
    /// <li> <p>Key: OpsItemId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: ResourceId</p> <p>Operations: Contains</p> </li>
    /// <li> <p>Key: AutomationId</p> <p>Operations: Equals</p> </li>
    /// <li> <p>Key: AccountId</p> <p>Operations: Equals</p> </li>
    /// </ul>
    /// <p>*The Equals operator for Title matches the first 100 characters. If you specify more than 100 characters, they system returns an error that the filter value exceeds the length limit.</p>
    /// <p>**If you filter the response by using the OperationalData operator, specify a key-value pair by using the following JSON format: {"key":"key_name","value":"a_value"}</p>
    pub fn get_ops_item_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OpsItemFilter>> {
        &self.ops_item_filters
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`DescribeOpsItemsInput`](crate::operation::describe_ops_items::DescribeOpsItemsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_ops_items::DescribeOpsItemsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_ops_items::DescribeOpsItemsInput {
            ops_item_filters: self.ops_item_filters,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
