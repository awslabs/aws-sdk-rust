// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeMaintenanceWindowExecutionsInput {
    /// <p>The ID of the maintenance window whose executions should be retrieved.</p>
    #[doc(hidden)]
    pub window_id: std::option::Option<std::string::String>,
    /// <p>Each entry in the array is a structure containing:</p>
    /// <ul>
    /// <li> <p>Key. A string between 1 and 128 characters. Supported keys include <code>ExecutedBefore</code> and <code>ExecutedAfter</code>.</p> </li>
    /// <li> <p>Values. An array of strings, each between 1 and 256 characters. Supported values are date/time strings in a valid ISO 8601 date/time format, such as <code>2021-11-04T05:00:00Z</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::MaintenanceWindowFilter>>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeMaintenanceWindowExecutionsInput {
    /// <p>The ID of the maintenance window whose executions should be retrieved.</p>
    pub fn window_id(&self) -> std::option::Option<&str> {
        self.window_id.as_deref()
    }
    /// <p>Each entry in the array is a structure containing:</p>
    /// <ul>
    /// <li> <p>Key. A string between 1 and 128 characters. Supported keys include <code>ExecutedBefore</code> and <code>ExecutedAfter</code>.</p> </li>
    /// <li> <p>Values. An array of strings, each between 1 and 256 characters. Supported values are date/time strings in a valid ISO 8601 date/time format, such as <code>2021-11-04T05:00:00Z</code>.</p> </li>
    /// </ul>
    pub fn filters(&self) -> std::option::Option<&[crate::types::MaintenanceWindowFilter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeMaintenanceWindowExecutionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeMaintenanceWindowExecutionsInput`](crate::operation::describe_maintenance_window_executions::DescribeMaintenanceWindowExecutionsInput).
    pub fn builder() -> crate::operation::describe_maintenance_window_executions::builders::DescribeMaintenanceWindowExecutionsInputBuilder{
        crate::operation::describe_maintenance_window_executions::builders::DescribeMaintenanceWindowExecutionsInputBuilder::default()
    }
}

/// A builder for [`DescribeMaintenanceWindowExecutionsInput`](crate::operation::describe_maintenance_window_executions::DescribeMaintenanceWindowExecutionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeMaintenanceWindowExecutionsInputBuilder {
    pub(crate) window_id: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::MaintenanceWindowFilter>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl DescribeMaintenanceWindowExecutionsInputBuilder {
    /// <p>The ID of the maintenance window whose executions should be retrieved.</p>
    pub fn window_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_id = Some(input.into());
        self
    }
    /// <p>The ID of the maintenance window whose executions should be retrieved.</p>
    pub fn set_window_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.window_id = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Each entry in the array is a structure containing:</p>
    /// <ul>
    /// <li> <p>Key. A string between 1 and 128 characters. Supported keys include <code>ExecutedBefore</code> and <code>ExecutedAfter</code>.</p> </li>
    /// <li> <p>Values. An array of strings, each between 1 and 256 characters. Supported values are date/time strings in a valid ISO 8601 date/time format, such as <code>2021-11-04T05:00:00Z</code>.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::MaintenanceWindowFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>Each entry in the array is a structure containing:</p>
    /// <ul>
    /// <li> <p>Key. A string between 1 and 128 characters. Supported keys include <code>ExecutedBefore</code> and <code>ExecutedAfter</code>.</p> </li>
    /// <li> <p>Values. An array of strings, each between 1 and 256 characters. Supported values are date/time strings in a valid ISO 8601 date/time format, such as <code>2021-11-04T05:00:00Z</code>.</p> </li>
    /// </ul>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MaintenanceWindowFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeMaintenanceWindowExecutionsInput`](crate::operation::describe_maintenance_window_executions::DescribeMaintenanceWindowExecutionsInput).
    pub fn build(self) -> Result<crate::operation::describe_maintenance_window_executions::DescribeMaintenanceWindowExecutionsInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::describe_maintenance_window_executions::DescribeMaintenanceWindowExecutionsInput {
                window_id: self.window_id
                ,
                filters: self.filters
                ,
                max_results: self.max_results
                ,
                next_token: self.next_token
                ,
            }
        )
    }
}
