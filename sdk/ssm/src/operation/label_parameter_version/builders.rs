// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::label_parameter_version::_label_parameter_version_output::LabelParameterVersionOutputBuilder;

pub use crate::operation::label_parameter_version::_label_parameter_version_input::LabelParameterVersionInputBuilder;

/// Fluent builder constructing a request to `LabelParameterVersion`.
///
/// <p>A parameter label is a user-defined alias to help you manage different versions of a parameter. When you modify a parameter, Amazon Web Services Systems Manager automatically saves a new version and increments the version number by one. A label can help you remember the purpose of a parameter when there are multiple versions. </p>
/// <p>Parameter labels have the following requirements and restrictions.</p>
/// <ul>
/// <li> <p>A version of a parameter can have a maximum of 10 labels.</p> </li>
/// <li> <p>You can't attach the same label to different versions of the same parameter. For example, if version 1 has the label Production, then you can't attach Production to version 2.</p> </li>
/// <li> <p>You can move a label from one version of a parameter to another.</p> </li>
/// <li> <p>You can't create a label when you create a new parameter. You must attach a label to a specific version of a parameter.</p> </li>
/// <li> <p>If you no longer want to use a parameter label, then you can either delete it or move it to a different version of a parameter.</p> </li>
/// <li> <p>A label can have a maximum of 100 characters.</p> </li>
/// <li> <p>Labels can contain letters (case sensitive), numbers, periods (.), hyphens (-), or underscores (_).</p> </li>
/// <li> <p>Labels can't begin with a number, "<code>aws</code>" or "<code>ssm</code>" (not case sensitive). If a label fails to meet these requirements, then the label isn't associated with a parameter and the system displays it in the list of InvalidLabels.</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct LabelParameterVersionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::label_parameter_version::builders::LabelParameterVersionInputBuilder,
}
impl LabelParameterVersionFluentBuilder {
    /// Creates a new `LabelParameterVersion`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::label_parameter_version::LabelParameterVersion,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::label_parameter_version::LabelParameterVersionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::label_parameter_version::LabelParameterVersionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::label_parameter_version::LabelParameterVersionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The parameter name on which you want to attach one or more labels.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The parameter name on which you want to attach one or more labels.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The specific version of the parameter on which you want to attach one or more labels. If no version is specified, the system attaches the label to the latest version.</p>
    pub fn parameter_version(mut self, input: i64) -> Self {
        self.inner = self.inner.parameter_version(input);
        self
    }
    /// <p>The specific version of the parameter on which you want to attach one or more labels. If no version is specified, the system attaches the label to the latest version.</p>
    pub fn set_parameter_version(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_parameter_version(input);
        self
    }
    /// Appends an item to `Labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>One or more labels to attach to the specified parameter version.</p>
    pub fn labels(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.labels(input.into());
        self
    }
    /// <p>One or more labels to attach to the specified parameter version.</p>
    pub fn set_labels(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_labels(input);
        self
    }
}
