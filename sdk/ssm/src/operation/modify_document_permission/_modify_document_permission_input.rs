// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyDocumentPermissionInput {
    /// <p>The name of the document that you want to share.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    #[doc(hidden)]
    pub permission_type: std::option::Option<crate::types::DocumentPermissionType>,
    /// <p>The Amazon Web Services user accounts that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>.</p>
    #[doc(hidden)]
    pub account_ids_to_add: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon Web Services user accounts that should no longer have access to the document. The Amazon Web Services user account can either be a group of account IDs or <i>All</i>. This action has a higher priority than <i>AccountIdsToAdd</i>. If you specify an account ID to add and the same ID to remove, the system removes access to the document.</p>
    #[doc(hidden)]
    pub account_ids_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>(Optional) The version of the document to share. If it isn't specified, the system choose the <code>Default</code> version to share.</p>
    #[doc(hidden)]
    pub shared_document_version: std::option::Option<std::string::String>,
}
impl ModifyDocumentPermissionInput {
    /// <p>The name of the document that you want to share.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    pub fn permission_type(&self) -> std::option::Option<&crate::types::DocumentPermissionType> {
        self.permission_type.as_ref()
    }
    /// <p>The Amazon Web Services user accounts that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>.</p>
    pub fn account_ids_to_add(&self) -> std::option::Option<&[std::string::String]> {
        self.account_ids_to_add.as_deref()
    }
    /// <p>The Amazon Web Services user accounts that should no longer have access to the document. The Amazon Web Services user account can either be a group of account IDs or <i>All</i>. This action has a higher priority than <i>AccountIdsToAdd</i>. If you specify an account ID to add and the same ID to remove, the system removes access to the document.</p>
    pub fn account_ids_to_remove(&self) -> std::option::Option<&[std::string::String]> {
        self.account_ids_to_remove.as_deref()
    }
    /// <p>(Optional) The version of the document to share. If it isn't specified, the system choose the <code>Default</code> version to share.</p>
    pub fn shared_document_version(&self) -> std::option::Option<&str> {
        self.shared_document_version.as_deref()
    }
}
impl ModifyDocumentPermissionInput {
    /// Creates a new builder-style object to manufacture [`ModifyDocumentPermissionInput`](crate::operation::modify_document_permission::ModifyDocumentPermissionInput).
    pub fn builder(
    ) -> crate::operation::modify_document_permission::builders::ModifyDocumentPermissionInputBuilder
    {
        crate::operation::modify_document_permission::builders::ModifyDocumentPermissionInputBuilder::default()
    }
}

/// A builder for [`ModifyDocumentPermissionInput`](crate::operation::modify_document_permission::ModifyDocumentPermissionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModifyDocumentPermissionInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) permission_type: std::option::Option<crate::types::DocumentPermissionType>,
    pub(crate) account_ids_to_add: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) account_ids_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) shared_document_version: std::option::Option<std::string::String>,
}
impl ModifyDocumentPermissionInputBuilder {
    /// <p>The name of the document that you want to share.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the document that you want to share.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    pub fn permission_type(mut self, input: crate::types::DocumentPermissionType) -> Self {
        self.permission_type = Some(input);
        self
    }
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    pub fn set_permission_type(
        mut self,
        input: std::option::Option<crate::types::DocumentPermissionType>,
    ) -> Self {
        self.permission_type = input;
        self
    }
    /// Appends an item to `account_ids_to_add`.
    ///
    /// To override the contents of this collection use [`set_account_ids_to_add`](Self::set_account_ids_to_add).
    ///
    /// <p>The Amazon Web Services user accounts that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>.</p>
    pub fn account_ids_to_add(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.account_ids_to_add.unwrap_or_default();
        v.push(input.into());
        self.account_ids_to_add = Some(v);
        self
    }
    /// <p>The Amazon Web Services user accounts that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>.</p>
    pub fn set_account_ids_to_add(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.account_ids_to_add = input;
        self
    }
    /// Appends an item to `account_ids_to_remove`.
    ///
    /// To override the contents of this collection use [`set_account_ids_to_remove`](Self::set_account_ids_to_remove).
    ///
    /// <p>The Amazon Web Services user accounts that should no longer have access to the document. The Amazon Web Services user account can either be a group of account IDs or <i>All</i>. This action has a higher priority than <i>AccountIdsToAdd</i>. If you specify an account ID to add and the same ID to remove, the system removes access to the document.</p>
    pub fn account_ids_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.account_ids_to_remove.unwrap_or_default();
        v.push(input.into());
        self.account_ids_to_remove = Some(v);
        self
    }
    /// <p>The Amazon Web Services user accounts that should no longer have access to the document. The Amazon Web Services user account can either be a group of account IDs or <i>All</i>. This action has a higher priority than <i>AccountIdsToAdd</i>. If you specify an account ID to add and the same ID to remove, the system removes access to the document.</p>
    pub fn set_account_ids_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.account_ids_to_remove = input;
        self
    }
    /// <p>(Optional) The version of the document to share. If it isn't specified, the system choose the <code>Default</code> version to share.</p>
    pub fn shared_document_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.shared_document_version = Some(input.into());
        self
    }
    /// <p>(Optional) The version of the document to share. If it isn't specified, the system choose the <code>Default</code> version to share.</p>
    pub fn set_shared_document_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.shared_document_version = input;
        self
    }
    /// Consumes the builder and constructs a [`ModifyDocumentPermissionInput`](crate::operation::modify_document_permission::ModifyDocumentPermissionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::modify_document_permission::ModifyDocumentPermissionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::modify_document_permission::ModifyDocumentPermissionInput {
                name: self.name,
                permission_type: self.permission_type,
                account_ids_to_add: self.account_ids_to_add,
                account_ids_to_remove: self.account_ids_to_remove,
                shared_document_version: self.shared_document_version,
            },
        )
    }
}
