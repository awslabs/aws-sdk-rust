// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_document_permission::_modify_document_permission_output::ModifyDocumentPermissionOutputBuilder;

pub use crate::operation::modify_document_permission::_modify_document_permission_input::ModifyDocumentPermissionInputBuilder;

impl crate::operation::modify_document_permission::builders::ModifyDocumentPermissionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_document_permission::ModifyDocumentPermissionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_document_permission::ModifyDocumentPermissionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_document_permission();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyDocumentPermission`.
///
/// <p>Shares a Amazon Web Services Systems Manager document (SSM document)publicly or privately. If you share a document privately, you must specify the Amazon Web Services user IDs for those people who can use the document. If you share a document publicly, you must specify <i>All</i> as the account ID.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyDocumentPermissionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_document_permission::builders::ModifyDocumentPermissionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_document_permission::ModifyDocumentPermissionOutput,
        crate::operation::modify_document_permission::ModifyDocumentPermissionError,
    > for ModifyDocumentPermissionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_document_permission::ModifyDocumentPermissionOutput,
            crate::operation::modify_document_permission::ModifyDocumentPermissionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyDocumentPermissionFluentBuilder {
    /// Creates a new `ModifyDocumentPermission`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyDocumentPermission as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_document_permission::builders::ModifyDocumentPermissionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_document_permission::ModifyDocumentPermissionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_document_permission::ModifyDocumentPermissionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_document_permission::ModifyDocumentPermission::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_document_permission::ModifyDocumentPermission::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_document_permission::ModifyDocumentPermissionOutput,
        crate::operation::modify_document_permission::ModifyDocumentPermissionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the document that you want to share.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the document that you want to share.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the document that you want to share.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    pub fn permission_type(mut self, input: crate::types::DocumentPermissionType) -> Self {
        self.inner = self.inner.permission_type(input);
        self
    }
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    pub fn set_permission_type(mut self, input: ::std::option::Option<crate::types::DocumentPermissionType>) -> Self {
        self.inner = self.inner.set_permission_type(input);
        self
    }
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    pub fn get_permission_type(&self) -> &::std::option::Option<crate::types::DocumentPermissionType> {
        self.inner.get_permission_type()
    }
    ///
    /// Appends an item to `AccountIdsToAdd`.
    ///
    /// To override the contents of this collection use [`set_account_ids_to_add`](Self::set_account_ids_to_add).
    ///
    /// <p>The Amazon Web Services users that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>.</p>
    pub fn account_ids_to_add(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_ids_to_add(input.into());
        self
    }
    /// <p>The Amazon Web Services users that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>.</p>
    pub fn set_account_ids_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_account_ids_to_add(input);
        self
    }
    /// <p>The Amazon Web Services users that should have access to the document. The account IDs can either be a group of account IDs or <i>All</i>.</p>
    pub fn get_account_ids_to_add(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_account_ids_to_add()
    }
    ///
    /// Appends an item to `AccountIdsToRemove`.
    ///
    /// To override the contents of this collection use [`set_account_ids_to_remove`](Self::set_account_ids_to_remove).
    ///
    /// <p>The Amazon Web Services users that should no longer have access to the document. The Amazon Web Services user can either be a group of account IDs or <i>All</i>. This action has a higher priority than <code>AccountIdsToAdd</code>. If you specify an ID to add and the same ID to remove, the system removes access to the document.</p>
    pub fn account_ids_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_ids_to_remove(input.into());
        self
    }
    /// <p>The Amazon Web Services users that should no longer have access to the document. The Amazon Web Services user can either be a group of account IDs or <i>All</i>. This action has a higher priority than <code>AccountIdsToAdd</code>. If you specify an ID to add and the same ID to remove, the system removes access to the document.</p>
    pub fn set_account_ids_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_account_ids_to_remove(input);
        self
    }
    /// <p>The Amazon Web Services users that should no longer have access to the document. The Amazon Web Services user can either be a group of account IDs or <i>All</i>. This action has a higher priority than <code>AccountIdsToAdd</code>. If you specify an ID to add and the same ID to remove, the system removes access to the document.</p>
    pub fn get_account_ids_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_account_ids_to_remove()
    }
    /// <p>(Optional) The version of the document to share. If it isn't specified, the system choose the <code>Default</code> version to share.</p>
    pub fn shared_document_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.shared_document_version(input.into());
        self
    }
    /// <p>(Optional) The version of the document to share. If it isn't specified, the system choose the <code>Default</code> version to share.</p>
    pub fn set_shared_document_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_shared_document_version(input);
        self
    }
    /// <p>(Optional) The version of the document to share. If it isn't specified, the system choose the <code>Default</code> version to share.</p>
    pub fn get_shared_document_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_shared_document_version()
    }
}
