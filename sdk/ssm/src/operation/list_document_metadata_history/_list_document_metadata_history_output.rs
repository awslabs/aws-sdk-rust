// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDocumentMetadataHistoryOutput {
    /// <p>The name of the change template.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The version of the change template.</p>
    #[doc(hidden)]
    pub document_version: std::option::Option<std::string::String>,
    /// <p>The user ID of the person in the organization who requested the review of the change template.</p>
    #[doc(hidden)]
    pub author: std::option::Option<std::string::String>,
    /// <p>Information about the response to the change template approval request.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<crate::types::DocumentMetadataResponseInfo>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListDocumentMetadataHistoryOutput {
    /// <p>The name of the change template.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the change template.</p>
    pub fn document_version(&self) -> std::option::Option<&str> {
        self.document_version.as_deref()
    }
    /// <p>The user ID of the person in the organization who requested the review of the change template.</p>
    pub fn author(&self) -> std::option::Option<&str> {
        self.author.as_deref()
    }
    /// <p>Information about the response to the change template approval request.</p>
    pub fn metadata(&self) -> std::option::Option<&crate::types::DocumentMetadataResponseInfo> {
        self.metadata.as_ref()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListDocumentMetadataHistoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDocumentMetadataHistoryOutput {
    /// Creates a new builder-style object to manufacture [`ListDocumentMetadataHistoryOutput`](crate::operation::list_document_metadata_history::ListDocumentMetadataHistoryOutput).
    pub fn builder() -> crate::operation::list_document_metadata_history::builders::ListDocumentMetadataHistoryOutputBuilder{
        crate::operation::list_document_metadata_history::builders::ListDocumentMetadataHistoryOutputBuilder::default()
    }
}

/// A builder for [`ListDocumentMetadataHistoryOutput`](crate::operation::list_document_metadata_history::ListDocumentMetadataHistoryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDocumentMetadataHistoryOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) document_version: std::option::Option<std::string::String>,
    pub(crate) author: std::option::Option<std::string::String>,
    pub(crate) metadata: std::option::Option<crate::types::DocumentMetadataResponseInfo>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListDocumentMetadataHistoryOutputBuilder {
    /// <p>The name of the change template.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the change template.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The version of the change template.</p>
    pub fn document_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_version = Some(input.into());
        self
    }
    /// <p>The version of the change template.</p>
    pub fn set_document_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_version = input;
        self
    }
    /// <p>The user ID of the person in the organization who requested the review of the change template.</p>
    pub fn author(mut self, input: impl Into<std::string::String>) -> Self {
        self.author = Some(input.into());
        self
    }
    /// <p>The user ID of the person in the organization who requested the review of the change template.</p>
    pub fn set_author(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.author = input;
        self
    }
    /// <p>Information about the response to the change template approval request.</p>
    pub fn metadata(mut self, input: crate::types::DocumentMetadataResponseInfo) -> Self {
        self.metadata = Some(input);
        self
    }
    /// <p>Information about the response to the change template approval request.</p>
    pub fn set_metadata(
        mut self,
        input: std::option::Option<crate::types::DocumentMetadataResponseInfo>,
    ) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListDocumentMetadataHistoryOutput`](crate::operation::list_document_metadata_history::ListDocumentMetadataHistoryOutput).
    pub fn build(
        self,
    ) -> crate::operation::list_document_metadata_history::ListDocumentMetadataHistoryOutput {
        crate::operation::list_document_metadata_history::ListDocumentMetadataHistoryOutput {
            name: self.name,
            document_version: self.document_version,
            author: self.author,
            metadata: self.metadata,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
