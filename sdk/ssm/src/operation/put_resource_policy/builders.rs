// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_resource_policy::_put_resource_policy_output::PutResourcePolicyOutputBuilder;

pub use crate::operation::put_resource_policy::_put_resource_policy_input::PutResourcePolicyInputBuilder;

/// Fluent builder constructing a request to `PutResourcePolicy`.
///
/// <p>Creates or updates a Systems Manager resource policy. A resource policy helps you to define the IAM entity (for example, an Amazon Web Services account) that can manage your Systems Manager resources. Currently, <code>OpsItemGroup</code> is the only resource that supports Systems Manager resource policies. The resource policy for <code>OpsItemGroup</code> enables Amazon Web Services accounts to view and interact with OpsCenter operational work items (OpsItems).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutResourcePolicyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_resource_policy::builders::PutResourcePolicyInputBuilder,
}
impl PutResourcePolicyFluentBuilder {
    /// Creates a new `PutResourcePolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_resource_policy::PutResourcePolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_resource_policy::PutResourcePolicyError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_resource_policy::PutResourcePolicyOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_resource_policy::PutResourcePolicyError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Amazon Resource Name (ARN) of the resource to which you want to attach a policy.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the resource to which you want to attach a policy.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>A policy you want to associate with a resource.</p>
    pub fn policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy(input.into());
        self
    }
    /// <p>A policy you want to associate with a resource.</p>
    pub fn set_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_policy(input);
        self
    }
    /// <p>The policy ID.</p>
    pub fn policy_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy_id(input.into());
        self
    }
    /// <p>The policy ID.</p>
    pub fn set_policy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_policy_id(input);
        self
    }
    /// <p>ID of the current policy version. The hash helps to prevent a situation where multiple users attempt to overwrite a policy. You must provide this hash when updating or deleting a policy.</p>
    pub fn policy_hash(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.policy_hash(input.into());
        self
    }
    /// <p>ID of the current policy version. The hash helps to prevent a situation where multiple users attempt to overwrite a policy. You must provide this hash when updating or deleting a policy.</p>
    pub fn set_policy_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_policy_hash(input);
        self
    }
}
