// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_activation::_delete_activation_output::DeleteActivationOutputBuilder;

pub use crate::operation::delete_activation::_delete_activation_input::DeleteActivationInputBuilder;

impl crate::operation::delete_activation::builders::DeleteActivationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_activation::DeleteActivationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_activation::DeleteActivationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_activation();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteActivation`.
///
/// <p>Deletes an activation. You aren't required to delete an activation. If you delete an activation, you can no longer use it to register additional managed nodes. Deleting an activation doesn't de-register managed nodes. You must manually de-register managed nodes.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteActivationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_activation::builders::DeleteActivationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_activation::DeleteActivationOutput,
        crate::operation::delete_activation::DeleteActivationError,
    > for DeleteActivationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_activation::DeleteActivationOutput,
            crate::operation::delete_activation::DeleteActivationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteActivationFluentBuilder {
    /// Creates a new `DeleteActivation`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteActivation as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_activation::builders::DeleteActivationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_activation::DeleteActivationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_activation::DeleteActivationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_activation::DeleteActivation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_activation::DeleteActivation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_activation::DeleteActivationOutput,
        crate::operation::delete_activation::DeleteActivationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the activation that you want to delete.</p>
    pub fn activation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.activation_id(input.into());
        self
    }
    /// <p>The ID of the activation that you want to delete.</p>
    pub fn set_activation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_activation_id(input);
        self
    }
    /// <p>The ID of the activation that you want to delete.</p>
    pub fn get_activation_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_activation_id()
    }
}
