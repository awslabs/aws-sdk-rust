// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAvailablePatchesOutput {
    /// <p>An array of patches. Each entry in the array is a patch structure.</p>
    #[doc(hidden)]
    pub patches: std::option::Option<std::vec::Vec<crate::types::Patch>>,
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAvailablePatchesOutput {
    /// <p>An array of patches. Each entry in the array is a patch structure.</p>
    pub fn patches(&self) -> std::option::Option<&[crate::types::Patch]> {
        self.patches.as_deref()
    }
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAvailablePatchesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAvailablePatchesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAvailablePatchesOutput`](crate::operation::describe_available_patches::DescribeAvailablePatchesOutput).
    pub fn builder(
    ) -> crate::operation::describe_available_patches::builders::DescribeAvailablePatchesOutputBuilder
    {
        crate::operation::describe_available_patches::builders::DescribeAvailablePatchesOutputBuilder::default()
    }
}

/// A builder for [`DescribeAvailablePatchesOutput`](crate::operation::describe_available_patches::DescribeAvailablePatchesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAvailablePatchesOutputBuilder {
    pub(crate) patches: std::option::Option<std::vec::Vec<crate::types::Patch>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAvailablePatchesOutputBuilder {
    /// Appends an item to `patches`.
    ///
    /// To override the contents of this collection use [`set_patches`](Self::set_patches).
    ///
    /// <p>An array of patches. Each entry in the array is a patch structure.</p>
    pub fn patches(mut self, input: crate::types::Patch) -> Self {
        let mut v = self.patches.unwrap_or_default();
        v.push(input);
        self.patches = Some(v);
        self
    }
    /// <p>An array of patches. Each entry in the array is a patch structure.</p>
    pub fn set_patches(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Patch>>,
    ) -> Self {
        self.patches = input;
        self
    }
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAvailablePatchesOutput`](crate::operation::describe_available_patches::DescribeAvailablePatchesOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_available_patches::DescribeAvailablePatchesOutput {
        crate::operation::describe_available_patches::DescribeAvailablePatchesOutput {
            patches: self.patches,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
