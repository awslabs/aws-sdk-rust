// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCommandInvocationsInput {
    /// <p>(Optional) The invocations for a specific command ID.</p>
    #[doc(hidden)]
    pub command_id: std::option::Option<std::string::String>,
    /// <p>(Optional) The command execution details for a specific managed node ID.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>(Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>(Optional) The token for the next set of items to return. (You received this token from a previous call.)</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>(Optional) One or more filters. Use a filter to return a more specific list of results.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::CommandFilter>>,
    /// <p>(Optional) If set this returns the response of the command executions and any command output. The default value is <code>false</code>. </p>
    #[doc(hidden)]
    pub details: bool,
}
impl ListCommandInvocationsInput {
    /// <p>(Optional) The invocations for a specific command ID.</p>
    pub fn command_id(&self) -> std::option::Option<&str> {
        self.command_id.as_deref()
    }
    /// <p>(Optional) The command execution details for a specific managed node ID.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>(Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>(Optional) The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>(Optional) One or more filters. Use a filter to return a more specific list of results.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::CommandFilter]> {
        self.filters.as_deref()
    }
    /// <p>(Optional) If set this returns the response of the command executions and any command output. The default value is <code>false</code>. </p>
    pub fn details(&self) -> bool {
        self.details
    }
}
impl ListCommandInvocationsInput {
    /// Creates a new builder-style object to manufacture [`ListCommandInvocationsInput`](crate::operation::list_command_invocations::ListCommandInvocationsInput).
    pub fn builder(
    ) -> crate::operation::list_command_invocations::builders::ListCommandInvocationsInputBuilder
    {
        crate::operation::list_command_invocations::builders::ListCommandInvocationsInputBuilder::default()
    }
}

/// A builder for [`ListCommandInvocationsInput`](crate::operation::list_command_invocations::ListCommandInvocationsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListCommandInvocationsInputBuilder {
    pub(crate) command_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::CommandFilter>>,
    pub(crate) details: std::option::Option<bool>,
}
impl ListCommandInvocationsInputBuilder {
    /// <p>(Optional) The invocations for a specific command ID.</p>
    pub fn command_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.command_id = Some(input.into());
        self
    }
    /// <p>(Optional) The invocations for a specific command ID.</p>
    pub fn set_command_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.command_id = input;
        self
    }
    /// <p>(Optional) The command execution details for a specific managed node ID.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>(Optional) The command execution details for a specific managed node ID.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>(Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>(Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>(Optional) The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>(Optional) The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>(Optional) One or more filters. Use a filter to return a more specific list of results.</p>
    pub fn filters(mut self, input: crate::types::CommandFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>(Optional) One or more filters. Use a filter to return a more specific list of results.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CommandFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>(Optional) If set this returns the response of the command executions and any command output. The default value is <code>false</code>. </p>
    pub fn details(mut self, input: bool) -> Self {
        self.details = Some(input);
        self
    }
    /// <p>(Optional) If set this returns the response of the command executions and any command output. The default value is <code>false</code>. </p>
    pub fn set_details(mut self, input: std::option::Option<bool>) -> Self {
        self.details = input;
        self
    }
    /// Consumes the builder and constructs a [`ListCommandInvocationsInput`](crate::operation::list_command_invocations::ListCommandInvocationsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_command_invocations::ListCommandInvocationsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_command_invocations::ListCommandInvocationsInput {
                command_id: self.command_id,
                instance_id: self.instance_id,
                max_results: self.max_results,
                next_token: self.next_token,
                filters: self.filters,
                details: self.details.unwrap_or_default(),
            },
        )
    }
}
