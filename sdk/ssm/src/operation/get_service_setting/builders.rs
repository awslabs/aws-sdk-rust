// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_service_setting::_get_service_setting_output::GetServiceSettingOutputBuilder;

pub use crate::operation::get_service_setting::_get_service_setting_input::GetServiceSettingInputBuilder;

impl crate::operation::get_service_setting::builders::GetServiceSettingInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_service_setting::GetServiceSettingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_service_setting::GetServiceSettingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_service_setting();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetServiceSetting`.
///
/// <p><code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services service team might create a default setting of <code>false</code>. This means the user can't use this feature unless they change the setting to <code>true</code> and intentionally opt in for a paid feature.</p>
/// <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <code>UpdateServiceSetting</code> API operation to change the default setting. Or use the <code>ResetServiceSetting</code> to change the value back to the original value defined by the Amazon Web Services service team.</p>
/// <p>Query the current service setting for the Amazon Web Services account.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetServiceSettingFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_service_setting::builders::GetServiceSettingInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_service_setting::GetServiceSettingOutput,
        crate::operation::get_service_setting::GetServiceSettingError,
    > for GetServiceSettingFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_service_setting::GetServiceSettingOutput,
            crate::operation::get_service_setting::GetServiceSettingError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetServiceSettingFluentBuilder {
    /// Creates a new `GetServiceSetting`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetServiceSetting as a reference.
    pub fn as_input(&self) -> &crate::operation::get_service_setting::builders::GetServiceSettingInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_service_setting::GetServiceSettingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_service_setting::GetServiceSettingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_service_setting::GetServiceSetting::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_service_setting::GetServiceSetting::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_service_setting::GetServiceSettingOutput,
        crate::operation::get_service_setting::GetServiceSettingError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the service setting to get. The setting ID can be one of the following.</p>
    /// <ul>
    /// <li>
    /// <p><code>/ssm/managed-instance/default-ec2-instance-management-role</code></p></li>
    /// <li>
    /// <p><code>/ssm/automation/customer-script-log-destination</code></p></li>
    /// <li>
    /// <p><code>/ssm/automation/customer-script-log-group-name</code></p></li>
    /// <li>
    /// <p><code>/ssm/documents/console/public-sharing-permission</code></p></li>
    /// <li>
    /// <p><code>/ssm/managed-instance/activation-tier</code></p></li>
    /// <li>
    /// <p><code>/ssm/opsinsights/opscenter</code></p></li>
    /// <li>
    /// <p><code>/ssm/parameter-store/default-parameter-tier</code></p></li>
    /// <li>
    /// <p><code>/ssm/parameter-store/high-throughput-enabled</code></p></li>
    /// </ul>
    pub fn setting_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.setting_id(input.into());
        self
    }
    /// <p>The ID of the service setting to get. The setting ID can be one of the following.</p>
    /// <ul>
    /// <li>
    /// <p><code>/ssm/managed-instance/default-ec2-instance-management-role</code></p></li>
    /// <li>
    /// <p><code>/ssm/automation/customer-script-log-destination</code></p></li>
    /// <li>
    /// <p><code>/ssm/automation/customer-script-log-group-name</code></p></li>
    /// <li>
    /// <p><code>/ssm/documents/console/public-sharing-permission</code></p></li>
    /// <li>
    /// <p><code>/ssm/managed-instance/activation-tier</code></p></li>
    /// <li>
    /// <p><code>/ssm/opsinsights/opscenter</code></p></li>
    /// <li>
    /// <p><code>/ssm/parameter-store/default-parameter-tier</code></p></li>
    /// <li>
    /// <p><code>/ssm/parameter-store/high-throughput-enabled</code></p></li>
    /// </ul>
    pub fn set_setting_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_setting_id(input);
        self
    }
    /// <p>The ID of the service setting to get. The setting ID can be one of the following.</p>
    /// <ul>
    /// <li>
    /// <p><code>/ssm/managed-instance/default-ec2-instance-management-role</code></p></li>
    /// <li>
    /// <p><code>/ssm/automation/customer-script-log-destination</code></p></li>
    /// <li>
    /// <p><code>/ssm/automation/customer-script-log-group-name</code></p></li>
    /// <li>
    /// <p><code>/ssm/documents/console/public-sharing-permission</code></p></li>
    /// <li>
    /// <p><code>/ssm/managed-instance/activation-tier</code></p></li>
    /// <li>
    /// <p><code>/ssm/opsinsights/opscenter</code></p></li>
    /// <li>
    /// <p><code>/ssm/parameter-store/default-parameter-tier</code></p></li>
    /// <li>
    /// <p><code>/ssm/parameter-store/high-throughput-enabled</code></p></li>
    /// </ul>
    pub fn get_setting_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_setting_id()
    }
}
