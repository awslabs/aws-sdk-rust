// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssociationBatchOutput {
    /// <p>Information about the associations that succeeded.</p>
    #[doc(hidden)]
    pub successful: std::option::Option<std::vec::Vec<crate::types::AssociationDescription>>,
    /// <p>Information about the associations that failed.</p>
    #[doc(hidden)]
    pub failed: std::option::Option<std::vec::Vec<crate::types::FailedCreateAssociation>>,
    _request_id: Option<String>,
}
impl CreateAssociationBatchOutput {
    /// <p>Information about the associations that succeeded.</p>
    pub fn successful(&self) -> std::option::Option<&[crate::types::AssociationDescription]> {
        self.successful.as_deref()
    }
    /// <p>Information about the associations that failed.</p>
    pub fn failed(&self) -> std::option::Option<&[crate::types::FailedCreateAssociation]> {
        self.failed.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateAssociationBatchOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAssociationBatchOutput {
    /// Creates a new builder-style object to manufacture [`CreateAssociationBatchOutput`](crate::operation::create_association_batch::CreateAssociationBatchOutput).
    pub fn builder(
    ) -> crate::operation::create_association_batch::builders::CreateAssociationBatchOutputBuilder
    {
        crate::operation::create_association_batch::builders::CreateAssociationBatchOutputBuilder::default()
    }
}

/// A builder for [`CreateAssociationBatchOutput`](crate::operation::create_association_batch::CreateAssociationBatchOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAssociationBatchOutputBuilder {
    pub(crate) successful: std::option::Option<std::vec::Vec<crate::types::AssociationDescription>>,
    pub(crate) failed: std::option::Option<std::vec::Vec<crate::types::FailedCreateAssociation>>,
    _request_id: Option<String>,
}
impl CreateAssociationBatchOutputBuilder {
    /// Appends an item to `successful`.
    ///
    /// To override the contents of this collection use [`set_successful`](Self::set_successful).
    ///
    /// <p>Information about the associations that succeeded.</p>
    pub fn successful(mut self, input: crate::types::AssociationDescription) -> Self {
        let mut v = self.successful.unwrap_or_default();
        v.push(input);
        self.successful = Some(v);
        self
    }
    /// <p>Information about the associations that succeeded.</p>
    pub fn set_successful(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AssociationDescription>>,
    ) -> Self {
        self.successful = input;
        self
    }
    /// Appends an item to `failed`.
    ///
    /// To override the contents of this collection use [`set_failed`](Self::set_failed).
    ///
    /// <p>Information about the associations that failed.</p>
    pub fn failed(mut self, input: crate::types::FailedCreateAssociation) -> Self {
        let mut v = self.failed.unwrap_or_default();
        v.push(input);
        self.failed = Some(v);
        self
    }
    /// <p>Information about the associations that failed.</p>
    pub fn set_failed(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FailedCreateAssociation>>,
    ) -> Self {
        self.failed = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateAssociationBatchOutput`](crate::operation::create_association_batch::CreateAssociationBatchOutput).
    pub fn build(self) -> crate::operation::create_association_batch::CreateAssociationBatchOutput {
        crate::operation::create_association_batch::CreateAssociationBatchOutput {
            successful: self.successful,
            failed: self.failed,
            _request_id: self._request_id,
        }
    }
}
