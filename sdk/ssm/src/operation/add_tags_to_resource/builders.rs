// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::add_tags_to_resource::_add_tags_to_resource_output::AddTagsToResourceOutputBuilder;

pub use crate::operation::add_tags_to_resource::_add_tags_to_resource_input::AddTagsToResourceInputBuilder;

impl crate::operation::add_tags_to_resource::builders::AddTagsToResourceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::add_tags_to_resource::AddTagsToResourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_tags_to_resource::AddTagsToResourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.add_tags_to_resource();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AddTagsToResource`.
///
/// <p>Adds or overwrites one or more tags for the specified resource. <i>Tags</i> are metadata that you can assign to your automations, documents, managed nodes, maintenance windows, Parameter Store parameters, and patch baselines. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. For example, you could define a set of tags for your account's managed nodes that helps you track each node's owner and stack level. For example:</p>
/// <ul>
/// <li>
/// <p><code>Key=Owner,Value=DbAdmin</code></p></li>
/// <li>
/// <p><code>Key=Owner,Value=SysAdmin</code></p></li>
/// <li>
/// <p><code>Key=Owner,Value=Dev</code></p></li>
/// <li>
/// <p><code>Key=Stack,Value=Production</code></p></li>
/// <li>
/// <p><code>Key=Stack,Value=Pre-Production</code></p></li>
/// <li>
/// <p><code>Key=Stack,Value=Test</code></p></li>
/// </ul>
/// <p>Most resources can have a maximum of 50 tags. Automations can have a maximum of 5 tags.</p>
/// <p>We recommend that you devise a set of tag keys that meets your needs for each resource type. Using a consistent set of tag keys makes it easier for you to manage your resources. You can search and filter the resources based on the tags you add. Tags don't have any semantic meaning to and are interpreted strictly as a string of characters.</p>
/// <p>For more information about using tags with Amazon Elastic Compute Cloud (Amazon EC2) instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2 resources</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AddTagsToResourceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::add_tags_to_resource::builders::AddTagsToResourceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::add_tags_to_resource::AddTagsToResourceOutput,
        crate::operation::add_tags_to_resource::AddTagsToResourceError,
    > for AddTagsToResourceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::add_tags_to_resource::AddTagsToResourceOutput,
            crate::operation::add_tags_to_resource::AddTagsToResourceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl AddTagsToResourceFluentBuilder {
    /// Creates a new `AddTagsToResource`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AddTagsToResource as a reference.
    pub fn as_input(&self) -> &crate::operation::add_tags_to_resource::builders::AddTagsToResourceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::add_tags_to_resource::AddTagsToResourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_tags_to_resource::AddTagsToResourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::add_tags_to_resource::AddTagsToResource::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::add_tags_to_resource::AddTagsToResource::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::add_tags_to_resource::AddTagsToResourceOutput,
        crate::operation::add_tags_to_resource::AddTagsToResourceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the type of resource you are tagging.</p><note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn resource_type(mut self, input: crate::types::ResourceTypeForTagging) -> Self {
        self.inner = self.inner.resource_type(input);
        self
    }
    /// <p>Specifies the type of resource you are tagging.</p><note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceTypeForTagging>) -> Self {
        self.inner = self.inner.set_resource_type(input);
        self
    }
    /// <p>Specifies the type of resource you are tagging.</p><note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceTypeForTagging> {
        self.inner.get_resource_type()
    }
    /// <p>The resource ID you want to tag.</p>
    /// <p>Use the ID of the resource. Here are some examples:</p>
    /// <p><code>MaintenanceWindow</code>: <code>mw-012345abcde</code></p>
    /// <p><code>PatchBaseline</code>: <code>pb-012345abcde</code></p>
    /// <p><code>Automation</code>: <code>example-c160-4567-8519-012345abcde</code></p>
    /// <p><code>OpsMetadata</code> object: <code>ResourceID</code> for tagging is created from the Amazon Resource Name (ARN) for the object. Specifically, <code>ResourceID</code> is created from the strings that come after the word <code>opsmetadata</code> in the ARN. For example, an OpsMetadata object with an ARN of <code>arn:aws:ssm:us-east-2:1234567890:opsmetadata/aws/ssm/MyGroup/appmanager</code> has a <code>ResourceID</code> of either <code>aws/ssm/MyGroup/appmanager</code> or <code>/aws/ssm/MyGroup/appmanager</code>.</p>
    /// <p>For the <code>Document</code> and <code>Parameter</code> values, use the name of the resource. If you're tagging a shared document, you must use the full ARN of the document.</p>
    /// <p><code>ManagedInstance</code>: <code>mi-012345abcde</code></p><note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_id(input.into());
        self
    }
    /// <p>The resource ID you want to tag.</p>
    /// <p>Use the ID of the resource. Here are some examples:</p>
    /// <p><code>MaintenanceWindow</code>: <code>mw-012345abcde</code></p>
    /// <p><code>PatchBaseline</code>: <code>pb-012345abcde</code></p>
    /// <p><code>Automation</code>: <code>example-c160-4567-8519-012345abcde</code></p>
    /// <p><code>OpsMetadata</code> object: <code>ResourceID</code> for tagging is created from the Amazon Resource Name (ARN) for the object. Specifically, <code>ResourceID</code> is created from the strings that come after the word <code>opsmetadata</code> in the ARN. For example, an OpsMetadata object with an ARN of <code>arn:aws:ssm:us-east-2:1234567890:opsmetadata/aws/ssm/MyGroup/appmanager</code> has a <code>ResourceID</code> of either <code>aws/ssm/MyGroup/appmanager</code> or <code>/aws/ssm/MyGroup/appmanager</code>.</p>
    /// <p>For the <code>Document</code> and <code>Parameter</code> values, use the name of the resource. If you're tagging a shared document, you must use the full ARN of the document.</p>
    /// <p><code>ManagedInstance</code>: <code>mi-012345abcde</code></p><note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_id(input);
        self
    }
    /// <p>The resource ID you want to tag.</p>
    /// <p>Use the ID of the resource. Here are some examples:</p>
    /// <p><code>MaintenanceWindow</code>: <code>mw-012345abcde</code></p>
    /// <p><code>PatchBaseline</code>: <code>pb-012345abcde</code></p>
    /// <p><code>Automation</code>: <code>example-c160-4567-8519-012345abcde</code></p>
    /// <p><code>OpsMetadata</code> object: <code>ResourceID</code> for tagging is created from the Amazon Resource Name (ARN) for the object. Specifically, <code>ResourceID</code> is created from the strings that come after the word <code>opsmetadata</code> in the ARN. For example, an OpsMetadata object with an ARN of <code>arn:aws:ssm:us-east-2:1234567890:opsmetadata/aws/ssm/MyGroup/appmanager</code> has a <code>ResourceID</code> of either <code>aws/ssm/MyGroup/appmanager</code> or <code>/aws/ssm/MyGroup/appmanager</code>.</p>
    /// <p>For the <code>Document</code> and <code>Parameter</code> values, use the name of the resource. If you're tagging a shared document, you must use the full ARN of the document.</p>
    /// <p><code>ManagedInstance</code>: <code>mi-012345abcde</code></p><note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_id()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags. The value parameter is required.</p><important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>One or more tags. The value parameter is required.</p><important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>One or more tags. The value parameter is required.</p><important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
