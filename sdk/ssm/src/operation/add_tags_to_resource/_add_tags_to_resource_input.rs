// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddTagsToResourceInput {
    /// <p>Specifies the type of resource you are tagging.</p> <note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceTypeForTagging>,
    /// <p>The resource ID you want to tag.</p>
    /// <p>Use the ID of the resource. Here are some examples:</p>
    /// <p> <code>MaintenanceWindow</code>: <code>mw-012345abcde</code> </p>
    /// <p> <code>PatchBaseline</code>: <code>pb-012345abcde</code> </p>
    /// <p> <code>Automation</code>: <code>example-c160-4567-8519-012345abcde</code> </p>
    /// <p> <code>OpsMetadata</code> object: <code>ResourceID</code> for tagging is created from the Amazon Resource Name (ARN) for the object. Specifically, <code>ResourceID</code> is created from the strings that come after the word <code>opsmetadata</code> in the ARN. For example, an OpsMetadata object with an ARN of <code>arn:aws:ssm:us-east-2:1234567890:opsmetadata/aws/ssm/MyGroup/appmanager</code> has a <code>ResourceID</code> of either <code>aws/ssm/MyGroup/appmanager</code> or <code>/aws/ssm/MyGroup/appmanager</code>.</p>
    /// <p>For the <code>Document</code> and <code>Parameter</code> values, use the name of the resource.</p>
    /// <p> <code>ManagedInstance</code>: <code>mi-012345abcde</code> </p> <note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>One or more tags. The value parameter is required.</p> <important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl AddTagsToResourceInput {
    /// <p>Specifies the type of resource you are tagging.</p> <note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceTypeForTagging> {
        self.resource_type.as_ref()
    }
    /// <p>The resource ID you want to tag.</p>
    /// <p>Use the ID of the resource. Here are some examples:</p>
    /// <p> <code>MaintenanceWindow</code>: <code>mw-012345abcde</code> </p>
    /// <p> <code>PatchBaseline</code>: <code>pb-012345abcde</code> </p>
    /// <p> <code>Automation</code>: <code>example-c160-4567-8519-012345abcde</code> </p>
    /// <p> <code>OpsMetadata</code> object: <code>ResourceID</code> for tagging is created from the Amazon Resource Name (ARN) for the object. Specifically, <code>ResourceID</code> is created from the strings that come after the word <code>opsmetadata</code> in the ARN. For example, an OpsMetadata object with an ARN of <code>arn:aws:ssm:us-east-2:1234567890:opsmetadata/aws/ssm/MyGroup/appmanager</code> has a <code>ResourceID</code> of either <code>aws/ssm/MyGroup/appmanager</code> or <code>/aws/ssm/MyGroup/appmanager</code>.</p>
    /// <p>For the <code>Document</code> and <code>Parameter</code> values, use the name of the resource.</p>
    /// <p> <code>ManagedInstance</code>: <code>mi-012345abcde</code> </p> <note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>One or more tags. The value parameter is required.</p> <important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl AddTagsToResourceInput {
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceInput`](crate::operation::add_tags_to_resource::AddTagsToResourceInput).
    pub fn builder(
    ) -> crate::operation::add_tags_to_resource::builders::AddTagsToResourceInputBuilder {
        crate::operation::add_tags_to_resource::builders::AddTagsToResourceInputBuilder::default()
    }
}

/// A builder for [`AddTagsToResourceInput`](crate::operation::add_tags_to_resource::AddTagsToResourceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AddTagsToResourceInputBuilder {
    pub(crate) resource_type: std::option::Option<crate::types::ResourceTypeForTagging>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl AddTagsToResourceInputBuilder {
    /// <p>Specifies the type of resource you are tagging.</p> <note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn resource_type(mut self, input: crate::types::ResourceTypeForTagging) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>Specifies the type of resource you are tagging.</p> <note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceTypeForTagging>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The resource ID you want to tag.</p>
    /// <p>Use the ID of the resource. Here are some examples:</p>
    /// <p> <code>MaintenanceWindow</code>: <code>mw-012345abcde</code> </p>
    /// <p> <code>PatchBaseline</code>: <code>pb-012345abcde</code> </p>
    /// <p> <code>Automation</code>: <code>example-c160-4567-8519-012345abcde</code> </p>
    /// <p> <code>OpsMetadata</code> object: <code>ResourceID</code> for tagging is created from the Amazon Resource Name (ARN) for the object. Specifically, <code>ResourceID</code> is created from the strings that come after the word <code>opsmetadata</code> in the ARN. For example, an OpsMetadata object with an ARN of <code>arn:aws:ssm:us-east-2:1234567890:opsmetadata/aws/ssm/MyGroup/appmanager</code> has a <code>ResourceID</code> of either <code>aws/ssm/MyGroup/appmanager</code> or <code>/aws/ssm/MyGroup/appmanager</code>.</p>
    /// <p>For the <code>Document</code> and <code>Parameter</code> values, use the name of the resource.</p>
    /// <p> <code>ManagedInstance</code>: <code>mi-012345abcde</code> </p> <note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The resource ID you want to tag.</p>
    /// <p>Use the ID of the resource. Here are some examples:</p>
    /// <p> <code>MaintenanceWindow</code>: <code>mw-012345abcde</code> </p>
    /// <p> <code>PatchBaseline</code>: <code>pb-012345abcde</code> </p>
    /// <p> <code>Automation</code>: <code>example-c160-4567-8519-012345abcde</code> </p>
    /// <p> <code>OpsMetadata</code> object: <code>ResourceID</code> for tagging is created from the Amazon Resource Name (ARN) for the object. Specifically, <code>ResourceID</code> is created from the strings that come after the word <code>opsmetadata</code> in the ARN. For example, an OpsMetadata object with an ARN of <code>arn:aws:ssm:us-east-2:1234567890:opsmetadata/aws/ssm/MyGroup/appmanager</code> has a <code>ResourceID</code> of either <code>aws/ssm/MyGroup/appmanager</code> or <code>/aws/ssm/MyGroup/appmanager</code>.</p>
    /// <p>For the <code>Document</code> and <code>Parameter</code> values, use the name of the resource.</p>
    /// <p> <code>ManagedInstance</code>: <code>mi-012345abcde</code> </p> <note>
    /// <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises managed nodes. You must specify the name of the managed node in the following format: <code>mi-<i>ID_number</i> </code>. For example, <code>mi-1a2b3c4d5e6f</code>.</p>
    /// </note>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags. The value parameter is required.</p> <important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>One or more tags. The value parameter is required.</p> <important>
    /// <p>Don't enter personally identifiable information in this field.</p>
    /// </important>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`AddTagsToResourceInput`](crate::operation::add_tags_to_resource::AddTagsToResourceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::add_tags_to_resource::AddTagsToResourceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::add_tags_to_resource::AddTagsToResourceInput {
                resource_type: self.resource_type,
                resource_id: self.resource_id,
                tags: self.tags,
            },
        )
    }
}
