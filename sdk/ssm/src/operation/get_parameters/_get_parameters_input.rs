// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetParametersInput {
    /// <p>Names of the parameters for which you want to query information.</p>
    /// <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter version, use <code>"Name": "name:version"</code>.</p>
    #[doc(hidden)]
    pub names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
    #[doc(hidden)]
    pub with_decryption: std::option::Option<bool>,
}
impl GetParametersInput {
    /// <p>Names of the parameters for which you want to query information.</p>
    /// <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter version, use <code>"Name": "name:version"</code>.</p>
    pub fn names(&self) -> std::option::Option<&[std::string::String]> {
        self.names.as_deref()
    }
    /// <p>Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
    pub fn with_decryption(&self) -> std::option::Option<bool> {
        self.with_decryption
    }
}
impl GetParametersInput {
    /// Creates a new builder-style object to manufacture [`GetParametersInput`](crate::operation::get_parameters::GetParametersInput).
    pub fn builder() -> crate::operation::get_parameters::builders::GetParametersInputBuilder {
        crate::operation::get_parameters::builders::GetParametersInputBuilder::default()
    }
}

/// A builder for [`GetParametersInput`](crate::operation::get_parameters::GetParametersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetParametersInputBuilder {
    pub(crate) names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) with_decryption: std::option::Option<bool>,
}
impl GetParametersInputBuilder {
    /// Appends an item to `names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p>Names of the parameters for which you want to query information.</p>
    /// <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter version, use <code>"Name": "name:version"</code>.</p>
    pub fn names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.names.unwrap_or_default();
        v.push(input.into());
        self.names = Some(v);
        self
    }
    /// <p>Names of the parameters for which you want to query information.</p>
    /// <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter version, use <code>"Name": "name:version"</code>.</p>
    pub fn set_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.names = input;
        self
    }
    /// <p>Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
    pub fn with_decryption(mut self, input: bool) -> Self {
        self.with_decryption = Some(input);
        self
    }
    /// <p>Return decrypted secure string value. Return decrypted values for secure string parameters. This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
    pub fn set_with_decryption(mut self, input: std::option::Option<bool>) -> Self {
        self.with_decryption = input;
        self
    }
    /// Consumes the builder and constructs a [`GetParametersInput`](crate::operation::get_parameters::GetParametersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_parameters::GetParametersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_parameters::GetParametersInput {
            names: self.names,
            with_decryption: self.with_decryption,
        })
    }
}
