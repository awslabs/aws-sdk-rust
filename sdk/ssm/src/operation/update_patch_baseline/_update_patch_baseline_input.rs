// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePatchBaselineInput {
    /// <p>The ID of the patch baseline to update.</p>
    #[doc(hidden)]
    pub baseline_id: std::option::Option<std::string::String>,
    /// <p>The name of the patch baseline.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A set of global filters used to include patches in the baseline.</p>
    #[doc(hidden)]
    pub global_filters: std::option::Option<crate::types::PatchFilterGroup>,
    /// <p>A set of rules used to include patches in the baseline.</p>
    #[doc(hidden)]
    pub approval_rules: std::option::Option<crate::types::PatchRuleGroup>,
    /// <p>A list of explicitly approved patches for the baseline.</p>
    /// <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    #[doc(hidden)]
    pub approved_patches: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Assigns a new compliance severity level to an existing patch baseline.</p>
    #[doc(hidden)]
    pub approved_patches_compliance_level: std::option::Option<crate::types::PatchComplianceLevel>,
    /// <p>Indicates whether the list of approved patches includes non-security updates that should be applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed nodes only.</p>
    #[doc(hidden)]
    pub approved_patches_enable_non_security: std::option::Option<bool>,
    /// <p>A list of explicitly rejected patches for the baseline.</p>
    /// <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    #[doc(hidden)]
    pub rejected_patches: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The action for Patch Manager to take on patches included in the <code>RejectedPackages</code> list.</p>
    /// <ul>
    /// <li> <p> <b> <code>ALLOW_AS_DEPENDENCY</code> </b>: A package in the <code>Rejected</code> patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as <code>InstalledOther</code>. This is the default action if no option is specified.</p> </li>
    /// <li> <p> <b> <code>BLOCK</code> </b>: Packages in the <code>RejectedPatches</code> list, and packages that include them as dependencies, aren't installed under any circumstances. If a package was installed before it was added to the <code>Rejected</code> patches list, it is considered non-compliant with the patch baseline, and its status is reported as <code>InstalledRejected</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub rejected_patches_action: std::option::Option<crate::types::PatchAction>,
    /// <p>A description of the patch baseline.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Information about the patches to use to update the managed nodes, including target operating systems and source repositories. Applies to Linux managed nodes only.</p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::types::PatchSource>>,
    /// <p>If True, then all fields that are required by the <code>CreatePatchBaseline</code> operation are also required for this API request. Optional fields that aren't specified are set to null.</p>
    #[doc(hidden)]
    pub replace: std::option::Option<bool>,
}
impl UpdatePatchBaselineInput {
    /// <p>The ID of the patch baseline to update.</p>
    pub fn baseline_id(&self) -> std::option::Option<&str> {
        self.baseline_id.as_deref()
    }
    /// <p>The name of the patch baseline.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A set of global filters used to include patches in the baseline.</p>
    pub fn global_filters(&self) -> std::option::Option<&crate::types::PatchFilterGroup> {
        self.global_filters.as_ref()
    }
    /// <p>A set of rules used to include patches in the baseline.</p>
    pub fn approval_rules(&self) -> std::option::Option<&crate::types::PatchRuleGroup> {
        self.approval_rules.as_ref()
    }
    /// <p>A list of explicitly approved patches for the baseline.</p>
    /// <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn approved_patches(&self) -> std::option::Option<&[std::string::String]> {
        self.approved_patches.as_deref()
    }
    /// <p>Assigns a new compliance severity level to an existing patch baseline.</p>
    pub fn approved_patches_compliance_level(
        &self,
    ) -> std::option::Option<&crate::types::PatchComplianceLevel> {
        self.approved_patches_compliance_level.as_ref()
    }
    /// <p>Indicates whether the list of approved patches includes non-security updates that should be applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed nodes only.</p>
    pub fn approved_patches_enable_non_security(&self) -> std::option::Option<bool> {
        self.approved_patches_enable_non_security
    }
    /// <p>A list of explicitly rejected patches for the baseline.</p>
    /// <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn rejected_patches(&self) -> std::option::Option<&[std::string::String]> {
        self.rejected_patches.as_deref()
    }
    /// <p>The action for Patch Manager to take on patches included in the <code>RejectedPackages</code> list.</p>
    /// <ul>
    /// <li> <p> <b> <code>ALLOW_AS_DEPENDENCY</code> </b>: A package in the <code>Rejected</code> patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as <code>InstalledOther</code>. This is the default action if no option is specified.</p> </li>
    /// <li> <p> <b> <code>BLOCK</code> </b>: Packages in the <code>RejectedPatches</code> list, and packages that include them as dependencies, aren't installed under any circumstances. If a package was installed before it was added to the <code>Rejected</code> patches list, it is considered non-compliant with the patch baseline, and its status is reported as <code>InstalledRejected</code>.</p> </li>
    /// </ul>
    pub fn rejected_patches_action(&self) -> std::option::Option<&crate::types::PatchAction> {
        self.rejected_patches_action.as_ref()
    }
    /// <p>A description of the patch baseline.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Information about the patches to use to update the managed nodes, including target operating systems and source repositories. Applies to Linux managed nodes only.</p>
    pub fn sources(&self) -> std::option::Option<&[crate::types::PatchSource]> {
        self.sources.as_deref()
    }
    /// <p>If True, then all fields that are required by the <code>CreatePatchBaseline</code> operation are also required for this API request. Optional fields that aren't specified are set to null.</p>
    pub fn replace(&self) -> std::option::Option<bool> {
        self.replace
    }
}
impl UpdatePatchBaselineInput {
    /// Creates a new builder-style object to manufacture [`UpdatePatchBaselineInput`](crate::operation::update_patch_baseline::UpdatePatchBaselineInput).
    pub fn builder(
    ) -> crate::operation::update_patch_baseline::builders::UpdatePatchBaselineInputBuilder {
        crate::operation::update_patch_baseline::builders::UpdatePatchBaselineInputBuilder::default(
        )
    }
}

/// A builder for [`UpdatePatchBaselineInput`](crate::operation::update_patch_baseline::UpdatePatchBaselineInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdatePatchBaselineInputBuilder {
    pub(crate) baseline_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) global_filters: std::option::Option<crate::types::PatchFilterGroup>,
    pub(crate) approval_rules: std::option::Option<crate::types::PatchRuleGroup>,
    pub(crate) approved_patches: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) approved_patches_compliance_level:
        std::option::Option<crate::types::PatchComplianceLevel>,
    pub(crate) approved_patches_enable_non_security: std::option::Option<bool>,
    pub(crate) rejected_patches: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) rejected_patches_action: std::option::Option<crate::types::PatchAction>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) sources: std::option::Option<std::vec::Vec<crate::types::PatchSource>>,
    pub(crate) replace: std::option::Option<bool>,
}
impl UpdatePatchBaselineInputBuilder {
    /// <p>The ID of the patch baseline to update.</p>
    pub fn baseline_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.baseline_id = Some(input.into());
        self
    }
    /// <p>The ID of the patch baseline to update.</p>
    pub fn set_baseline_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.baseline_id = input;
        self
    }
    /// <p>The name of the patch baseline.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the patch baseline.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A set of global filters used to include patches in the baseline.</p>
    pub fn global_filters(mut self, input: crate::types::PatchFilterGroup) -> Self {
        self.global_filters = Some(input);
        self
    }
    /// <p>A set of global filters used to include patches in the baseline.</p>
    pub fn set_global_filters(
        mut self,
        input: std::option::Option<crate::types::PatchFilterGroup>,
    ) -> Self {
        self.global_filters = input;
        self
    }
    /// <p>A set of rules used to include patches in the baseline.</p>
    pub fn approval_rules(mut self, input: crate::types::PatchRuleGroup) -> Self {
        self.approval_rules = Some(input);
        self
    }
    /// <p>A set of rules used to include patches in the baseline.</p>
    pub fn set_approval_rules(
        mut self,
        input: std::option::Option<crate::types::PatchRuleGroup>,
    ) -> Self {
        self.approval_rules = input;
        self
    }
    /// Appends an item to `approved_patches`.
    ///
    /// To override the contents of this collection use [`set_approved_patches`](Self::set_approved_patches).
    ///
    /// <p>A list of explicitly approved patches for the baseline.</p>
    /// <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn approved_patches(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.approved_patches.unwrap_or_default();
        v.push(input.into());
        self.approved_patches = Some(v);
        self
    }
    /// <p>A list of explicitly approved patches for the baseline.</p>
    /// <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn set_approved_patches(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.approved_patches = input;
        self
    }
    /// <p>Assigns a new compliance severity level to an existing patch baseline.</p>
    pub fn approved_patches_compliance_level(
        mut self,
        input: crate::types::PatchComplianceLevel,
    ) -> Self {
        self.approved_patches_compliance_level = Some(input);
        self
    }
    /// <p>Assigns a new compliance severity level to an existing patch baseline.</p>
    pub fn set_approved_patches_compliance_level(
        mut self,
        input: std::option::Option<crate::types::PatchComplianceLevel>,
    ) -> Self {
        self.approved_patches_compliance_level = input;
        self
    }
    /// <p>Indicates whether the list of approved patches includes non-security updates that should be applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed nodes only.</p>
    pub fn approved_patches_enable_non_security(mut self, input: bool) -> Self {
        self.approved_patches_enable_non_security = Some(input);
        self
    }
    /// <p>Indicates whether the list of approved patches includes non-security updates that should be applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed nodes only.</p>
    pub fn set_approved_patches_enable_non_security(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.approved_patches_enable_non_security = input;
        self
    }
    /// Appends an item to `rejected_patches`.
    ///
    /// To override the contents of this collection use [`set_rejected_patches`](Self::set_rejected_patches).
    ///
    /// <p>A list of explicitly rejected patches for the baseline.</p>
    /// <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn rejected_patches(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.rejected_patches.unwrap_or_default();
        v.push(input.into());
        self.rejected_patches = Some(v);
        self
    }
    /// <p>A list of explicitly rejected patches for the baseline.</p>
    /// <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn set_rejected_patches(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.rejected_patches = input;
        self
    }
    /// <p>The action for Patch Manager to take on patches included in the <code>RejectedPackages</code> list.</p>
    /// <ul>
    /// <li> <p> <b> <code>ALLOW_AS_DEPENDENCY</code> </b>: A package in the <code>Rejected</code> patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as <code>InstalledOther</code>. This is the default action if no option is specified.</p> </li>
    /// <li> <p> <b> <code>BLOCK</code> </b>: Packages in the <code>RejectedPatches</code> list, and packages that include them as dependencies, aren't installed under any circumstances. If a package was installed before it was added to the <code>Rejected</code> patches list, it is considered non-compliant with the patch baseline, and its status is reported as <code>InstalledRejected</code>.</p> </li>
    /// </ul>
    pub fn rejected_patches_action(mut self, input: crate::types::PatchAction) -> Self {
        self.rejected_patches_action = Some(input);
        self
    }
    /// <p>The action for Patch Manager to take on patches included in the <code>RejectedPackages</code> list.</p>
    /// <ul>
    /// <li> <p> <b> <code>ALLOW_AS_DEPENDENCY</code> </b>: A package in the <code>Rejected</code> patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as <code>InstalledOther</code>. This is the default action if no option is specified.</p> </li>
    /// <li> <p> <b> <code>BLOCK</code> </b>: Packages in the <code>RejectedPatches</code> list, and packages that include them as dependencies, aren't installed under any circumstances. If a package was installed before it was added to the <code>Rejected</code> patches list, it is considered non-compliant with the patch baseline, and its status is reported as <code>InstalledRejected</code>.</p> </li>
    /// </ul>
    pub fn set_rejected_patches_action(
        mut self,
        input: std::option::Option<crate::types::PatchAction>,
    ) -> Self {
        self.rejected_patches_action = input;
        self
    }
    /// <p>A description of the patch baseline.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the patch baseline.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>Information about the patches to use to update the managed nodes, including target operating systems and source repositories. Applies to Linux managed nodes only.</p>
    pub fn sources(mut self, input: crate::types::PatchSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = Some(v);
        self
    }
    /// <p>Information about the patches to use to update the managed nodes, including target operating systems and source repositories. Applies to Linux managed nodes only.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PatchSource>>,
    ) -> Self {
        self.sources = input;
        self
    }
    /// <p>If True, then all fields that are required by the <code>CreatePatchBaseline</code> operation are also required for this API request. Optional fields that aren't specified are set to null.</p>
    pub fn replace(mut self, input: bool) -> Self {
        self.replace = Some(input);
        self
    }
    /// <p>If True, then all fields that are required by the <code>CreatePatchBaseline</code> operation are also required for this API request. Optional fields that aren't specified are set to null.</p>
    pub fn set_replace(mut self, input: std::option::Option<bool>) -> Self {
        self.replace = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdatePatchBaselineInput`](crate::operation::update_patch_baseline::UpdatePatchBaselineInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_patch_baseline::UpdatePatchBaselineInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_patch_baseline::UpdatePatchBaselineInput {
                baseline_id: self.baseline_id,
                name: self.name,
                global_filters: self.global_filters,
                approval_rules: self.approval_rules,
                approved_patches: self.approved_patches,
                approved_patches_compliance_level: self.approved_patches_compliance_level,
                approved_patches_enable_non_security: self.approved_patches_enable_non_security,
                rejected_patches: self.rejected_patches,
                rejected_patches_action: self.rejected_patches_action,
                description: self.description,
                sources: self.sources,
                replace: self.replace,
            },
        )
    }
}
