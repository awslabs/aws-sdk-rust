// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterTargetFromMaintenanceWindowInput {
    /// <p>The ID of the maintenance window the target should be removed from.</p>
    #[doc(hidden)]
    pub window_id: std::option::Option<std::string::String>,
    /// <p>The ID of the target definition to remove.</p>
    #[doc(hidden)]
    pub window_target_id: std::option::Option<std::string::String>,
    /// <p>The system checks if the target is being referenced by a task. If the target is being referenced, the system returns an error and doesn't deregister the target from the maintenance window.</p>
    #[doc(hidden)]
    pub safe: std::option::Option<bool>,
}
impl DeregisterTargetFromMaintenanceWindowInput {
    /// <p>The ID of the maintenance window the target should be removed from.</p>
    pub fn window_id(&self) -> std::option::Option<&str> {
        self.window_id.as_deref()
    }
    /// <p>The ID of the target definition to remove.</p>
    pub fn window_target_id(&self) -> std::option::Option<&str> {
        self.window_target_id.as_deref()
    }
    /// <p>The system checks if the target is being referenced by a task. If the target is being referenced, the system returns an error and doesn't deregister the target from the maintenance window.</p>
    pub fn safe(&self) -> std::option::Option<bool> {
        self.safe
    }
}
impl DeregisterTargetFromMaintenanceWindowInput {
    /// Creates a new builder-style object to manufacture [`DeregisterTargetFromMaintenanceWindowInput`](crate::operation::deregister_target_from_maintenance_window::DeregisterTargetFromMaintenanceWindowInput).
    pub fn builder() -> crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowInputBuilder{
        crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowInputBuilder::default()
    }
}

/// A builder for [`DeregisterTargetFromMaintenanceWindowInput`](crate::operation::deregister_target_from_maintenance_window::DeregisterTargetFromMaintenanceWindowInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeregisterTargetFromMaintenanceWindowInputBuilder {
    pub(crate) window_id: std::option::Option<std::string::String>,
    pub(crate) window_target_id: std::option::Option<std::string::String>,
    pub(crate) safe: std::option::Option<bool>,
}
impl DeregisterTargetFromMaintenanceWindowInputBuilder {
    /// <p>The ID of the maintenance window the target should be removed from.</p>
    pub fn window_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_id = Some(input.into());
        self
    }
    /// <p>The ID of the maintenance window the target should be removed from.</p>
    pub fn set_window_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.window_id = input;
        self
    }
    /// <p>The ID of the target definition to remove.</p>
    pub fn window_target_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_target_id = Some(input.into());
        self
    }
    /// <p>The ID of the target definition to remove.</p>
    pub fn set_window_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.window_target_id = input;
        self
    }
    /// <p>The system checks if the target is being referenced by a task. If the target is being referenced, the system returns an error and doesn't deregister the target from the maintenance window.</p>
    pub fn safe(mut self, input: bool) -> Self {
        self.safe = Some(input);
        self
    }
    /// <p>The system checks if the target is being referenced by a task. If the target is being referenced, the system returns an error and doesn't deregister the target from the maintenance window.</p>
    pub fn set_safe(mut self, input: std::option::Option<bool>) -> Self {
        self.safe = input;
        self
    }
    /// Consumes the builder and constructs a [`DeregisterTargetFromMaintenanceWindowInput`](crate::operation::deregister_target_from_maintenance_window::DeregisterTargetFromMaintenanceWindowInput).
    pub fn build(self) -> Result<crate::operation::deregister_target_from_maintenance_window::DeregisterTargetFromMaintenanceWindowInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::deregister_target_from_maintenance_window::DeregisterTargetFromMaintenanceWindowInput {
                window_id: self.window_id
                ,
                window_target_id: self.window_target_id
                ,
                safe: self.safe
                ,
            }
        )
    }
}
