// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDocumentsInput {
    /// <p>This data type is deprecated. Instead, use <code>Filters</code>.</p>
    #[doc(hidden)]
    pub document_filter_list: std::option::Option<std::vec::Vec<crate::types::DocumentFilter>>,
    /// <p>One or more <code>DocumentKeyValuesFilter</code> objects. Use a filter to return a more specific list of results. For keys, you can specify one or more key-value pair tags that have been applied to a document. Other valid keys include <code>Owner</code>, <code>Name</code>, <code>PlatformTypes</code>, <code>DocumentType</code>, and <code>TargetType</code>. For example, to return documents you own use <code>Key=Owner,Values=Self</code>. To specify a custom key-value pair, use the format <code>Key=tag:tagName,Values=valueName</code>.</p> <note>
    /// <p>This API operation only supports filtering documents by using a single tag key and one or more tag values. For example: <code>Key=tag:tagName,Values=valueName1,valueName2</code> </p>
    /// </note>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::DocumentKeyValuesFilter>>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListDocumentsInput {
    /// <p>This data type is deprecated. Instead, use <code>Filters</code>.</p>
    pub fn document_filter_list(&self) -> std::option::Option<&[crate::types::DocumentFilter]> {
        self.document_filter_list.as_deref()
    }
    /// <p>One or more <code>DocumentKeyValuesFilter</code> objects. Use a filter to return a more specific list of results. For keys, you can specify one or more key-value pair tags that have been applied to a document. Other valid keys include <code>Owner</code>, <code>Name</code>, <code>PlatformTypes</code>, <code>DocumentType</code>, and <code>TargetType</code>. For example, to return documents you own use <code>Key=Owner,Values=Self</code>. To specify a custom key-value pair, use the format <code>Key=tag:tagName,Values=valueName</code>.</p> <note>
    /// <p>This API operation only supports filtering documents by using a single tag key and one or more tag values. For example: <code>Key=tag:tagName,Values=valueName1,valueName2</code> </p>
    /// </note>
    pub fn filters(&self) -> std::option::Option<&[crate::types::DocumentKeyValuesFilter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListDocumentsInput {
    /// Creates a new builder-style object to manufacture [`ListDocumentsInput`](crate::operation::list_documents::ListDocumentsInput).
    pub fn builder() -> crate::operation::list_documents::builders::ListDocumentsInputBuilder {
        crate::operation::list_documents::builders::ListDocumentsInputBuilder::default()
    }
}

/// A builder for [`ListDocumentsInput`](crate::operation::list_documents::ListDocumentsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDocumentsInputBuilder {
    pub(crate) document_filter_list:
        std::option::Option<std::vec::Vec<crate::types::DocumentFilter>>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::DocumentKeyValuesFilter>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListDocumentsInputBuilder {
    /// Appends an item to `document_filter_list`.
    ///
    /// To override the contents of this collection use [`set_document_filter_list`](Self::set_document_filter_list).
    ///
    /// <p>This data type is deprecated. Instead, use <code>Filters</code>.</p>
    pub fn document_filter_list(mut self, input: crate::types::DocumentFilter) -> Self {
        let mut v = self.document_filter_list.unwrap_or_default();
        v.push(input);
        self.document_filter_list = Some(v);
        self
    }
    /// <p>This data type is deprecated. Instead, use <code>Filters</code>.</p>
    pub fn set_document_filter_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DocumentFilter>>,
    ) -> Self {
        self.document_filter_list = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>One or more <code>DocumentKeyValuesFilter</code> objects. Use a filter to return a more specific list of results. For keys, you can specify one or more key-value pair tags that have been applied to a document. Other valid keys include <code>Owner</code>, <code>Name</code>, <code>PlatformTypes</code>, <code>DocumentType</code>, and <code>TargetType</code>. For example, to return documents you own use <code>Key=Owner,Values=Self</code>. To specify a custom key-value pair, use the format <code>Key=tag:tagName,Values=valueName</code>.</p> <note>
    /// <p>This API operation only supports filtering documents by using a single tag key and one or more tag values. For example: <code>Key=tag:tagName,Values=valueName1,valueName2</code> </p>
    /// </note>
    pub fn filters(mut self, input: crate::types::DocumentKeyValuesFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>One or more <code>DocumentKeyValuesFilter</code> objects. Use a filter to return a more specific list of results. For keys, you can specify one or more key-value pair tags that have been applied to a document. Other valid keys include <code>Owner</code>, <code>Name</code>, <code>PlatformTypes</code>, <code>DocumentType</code>, and <code>TargetType</code>. For example, to return documents you own use <code>Key=Owner,Values=Self</code>. To specify a custom key-value pair, use the format <code>Key=tag:tagName,Values=valueName</code>.</p> <note>
    /// <p>This API operation only supports filtering documents by using a single tag key and one or more tag values. For example: <code>Key=tag:tagName,Values=valueName1,valueName2</code> </p>
    /// </note>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DocumentKeyValuesFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListDocumentsInput`](crate::operation::list_documents::ListDocumentsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_documents::ListDocumentsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_documents::ListDocumentsInput {
            document_filter_list: self.document_filter_list,
            filters: self.filters,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
