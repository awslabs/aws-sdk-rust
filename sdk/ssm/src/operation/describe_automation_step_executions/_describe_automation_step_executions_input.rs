// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAutomationStepExecutionsInput {
    /// <p>The Automation execution ID for which you want step execution descriptions.</p>
    pub automation_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>One or more filters to limit the number of step executions returned by the request.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::StepExecutionFilter>>,
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Indicates whether to list step executions in reverse order by start time. The default value is 'false'.</p>
    pub reverse_order: ::std::option::Option<bool>,
}
impl DescribeAutomationStepExecutionsInput {
    /// <p>The Automation execution ID for which you want step execution descriptions.</p>
    pub fn automation_execution_id(&self) -> ::std::option::Option<&str> {
        self.automation_execution_id.as_deref()
    }
    /// <p>One or more filters to limit the number of step executions returned by the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::StepExecutionFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Indicates whether to list step executions in reverse order by start time. The default value is 'false'.</p>
    pub fn reverse_order(&self) -> ::std::option::Option<bool> {
        self.reverse_order
    }
}
impl DescribeAutomationStepExecutionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeAutomationStepExecutionsInput`](crate::operation::describe_automation_step_executions::DescribeAutomationStepExecutionsInput).
    pub fn builder() -> crate::operation::describe_automation_step_executions::builders::DescribeAutomationStepExecutionsInputBuilder {
        crate::operation::describe_automation_step_executions::builders::DescribeAutomationStepExecutionsInputBuilder::default()
    }
}

/// A builder for [`DescribeAutomationStepExecutionsInput`](crate::operation::describe_automation_step_executions::DescribeAutomationStepExecutionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAutomationStepExecutionsInputBuilder {
    pub(crate) automation_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::StepExecutionFilter>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) reverse_order: ::std::option::Option<bool>,
}
impl DescribeAutomationStepExecutionsInputBuilder {
    /// <p>The Automation execution ID for which you want step execution descriptions.</p>
    /// This field is required.
    pub fn automation_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.automation_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Automation execution ID for which you want step execution descriptions.</p>
    pub fn set_automation_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.automation_execution_id = input;
        self
    }
    /// <p>The Automation execution ID for which you want step execution descriptions.</p>
    pub fn get_automation_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.automation_execution_id
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>One or more filters to limit the number of step executions returned by the request.</p>
    pub fn filters(mut self, input: crate::types::StepExecutionFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more filters to limit the number of step executions returned by the request.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StepExecutionFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>One or more filters to limit the number of step executions returned by the request.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StepExecutionFilter>> {
        &self.filters
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Indicates whether to list step executions in reverse order by start time. The default value is 'false'.</p>
    pub fn reverse_order(mut self, input: bool) -> Self {
        self.reverse_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to list step executions in reverse order by start time. The default value is 'false'.</p>
    pub fn set_reverse_order(mut self, input: ::std::option::Option<bool>) -> Self {
        self.reverse_order = input;
        self
    }
    /// <p>Indicates whether to list step executions in reverse order by start time. The default value is 'false'.</p>
    pub fn get_reverse_order(&self) -> &::std::option::Option<bool> {
        &self.reverse_order
    }
    /// Consumes the builder and constructs a [`DescribeAutomationStepExecutionsInput`](crate::operation::describe_automation_step_executions::DescribeAutomationStepExecutionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_automation_step_executions::DescribeAutomationStepExecutionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_automation_step_executions::DescribeAutomationStepExecutionsInput {
                automation_execution_id: self.automation_execution_id,
                filters: self.filters,
                next_token: self.next_token,
                max_results: self.max_results,
                reverse_order: self.reverse_order,
            },
        )
    }
}
