// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendCommandOutput {
    /// <p>The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request.</p>
    #[doc(hidden)]
    pub command: std::option::Option<crate::types::Command>,
    _request_id: Option<String>,
}
impl SendCommandOutput {
    /// <p>The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request.</p>
    pub fn command(&self) -> std::option::Option<&crate::types::Command> {
        self.command.as_ref()
    }
}
impl aws_http::request_id::RequestId for SendCommandOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SendCommandOutput {
    /// Creates a new builder-style object to manufacture [`SendCommandOutput`](crate::operation::send_command::SendCommandOutput).
    pub fn builder() -> crate::operation::send_command::builders::SendCommandOutputBuilder {
        crate::operation::send_command::builders::SendCommandOutputBuilder::default()
    }
}

/// A builder for [`SendCommandOutput`](crate::operation::send_command::SendCommandOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendCommandOutputBuilder {
    pub(crate) command: std::option::Option<crate::types::Command>,
    _request_id: Option<String>,
}
impl SendCommandOutputBuilder {
    /// <p>The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request.</p>
    pub fn command(mut self, input: crate::types::Command) -> Self {
        self.command = Some(input);
        self
    }
    /// <p>The request as it was received by Systems Manager. Also provides the command ID which can be used future references to this request.</p>
    pub fn set_command(mut self, input: std::option::Option<crate::types::Command>) -> Self {
        self.command = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SendCommandOutput`](crate::operation::send_command::SendCommandOutput).
    pub fn build(self) -> crate::operation::send_command::SendCommandOutput {
        crate::operation::send_command::SendCommandOutput {
            command: self.command,
            _request_id: self._request_id,
        }
    }
}
