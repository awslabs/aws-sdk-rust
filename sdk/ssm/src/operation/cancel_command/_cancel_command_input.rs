// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelCommandInput {
    /// <p>The ID of the command you want to cancel.</p>
    #[doc(hidden)]
    pub command_id: std::option::Option<std::string::String>,
    /// <p>(Optional) A list of managed node IDs on which you want to cancel the command. If not provided, the command is canceled on every node on which it was requested.</p>
    #[doc(hidden)]
    pub instance_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CancelCommandInput {
    /// <p>The ID of the command you want to cancel.</p>
    pub fn command_id(&self) -> std::option::Option<&str> {
        self.command_id.as_deref()
    }
    /// <p>(Optional) A list of managed node IDs on which you want to cancel the command. If not provided, the command is canceled on every node on which it was requested.</p>
    pub fn instance_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.instance_ids.as_deref()
    }
}
impl CancelCommandInput {
    /// Creates a new builder-style object to manufacture [`CancelCommandInput`](crate::operation::cancel_command::CancelCommandInput).
    pub fn builder() -> crate::operation::cancel_command::builders::CancelCommandInputBuilder {
        crate::operation::cancel_command::builders::CancelCommandInputBuilder::default()
    }
}

/// A builder for [`CancelCommandInput`](crate::operation::cancel_command::CancelCommandInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CancelCommandInputBuilder {
    pub(crate) command_id: std::option::Option<std::string::String>,
    pub(crate) instance_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CancelCommandInputBuilder {
    /// <p>The ID of the command you want to cancel.</p>
    pub fn command_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.command_id = Some(input.into());
        self
    }
    /// <p>The ID of the command you want to cancel.</p>
    pub fn set_command_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.command_id = input;
        self
    }
    /// Appends an item to `instance_ids`.
    ///
    /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
    ///
    /// <p>(Optional) A list of managed node IDs on which you want to cancel the command. If not provided, the command is canceled on every node on which it was requested.</p>
    pub fn instance_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.instance_ids.unwrap_or_default();
        v.push(input.into());
        self.instance_ids = Some(v);
        self
    }
    /// <p>(Optional) A list of managed node IDs on which you want to cancel the command. If not provided, the command is canceled on every node on which it was requested.</p>
    pub fn set_instance_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.instance_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`CancelCommandInput`](crate::operation::cancel_command::CancelCommandInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::cancel_command::CancelCommandInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::cancel_command::CancelCommandInput {
            command_id: self.command_id,
            instance_ids: self.instance_ids,
        })
    }
}
