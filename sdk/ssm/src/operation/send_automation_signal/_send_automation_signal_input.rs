// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendAutomationSignalInput {
    /// <p>The unique identifier for an existing Automation execution that you want to send the signal to.</p>
    #[doc(hidden)]
    pub automation_execution_id: std::option::Option<std::string::String>,
    /// <p>The type of signal to send to an Automation execution. </p>
    #[doc(hidden)]
    pub signal_type: std::option::Option<crate::types::SignalType>,
    /// <p>The data sent with the signal. The data schema depends on the type of signal used in the request.</p>
    /// <p>For <code>Approve</code> and <code>Reject</code> signal types, the payload is an optional comment that you can send with the signal type. For example:</p>
    /// <p> <code>Comment="Looks good"</code> </p>
    /// <p>For <code>StartStep</code> and <code>Resume</code> signal types, you must send the name of the Automation step to start or resume as the payload. For example:</p>
    /// <p> <code>StepName="step1"</code> </p>
    /// <p>For the <code>StopStep</code> signal type, you must send the step execution ID as the payload. For example:</p>
    /// <p> <code>StepExecutionId="97fff367-fc5a-4299-aed8-0123456789ab"</code> </p>
    #[doc(hidden)]
    pub payload: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
}
impl SendAutomationSignalInput {
    /// <p>The unique identifier for an existing Automation execution that you want to send the signal to.</p>
    pub fn automation_execution_id(&self) -> std::option::Option<&str> {
        self.automation_execution_id.as_deref()
    }
    /// <p>The type of signal to send to an Automation execution. </p>
    pub fn signal_type(&self) -> std::option::Option<&crate::types::SignalType> {
        self.signal_type.as_ref()
    }
    /// <p>The data sent with the signal. The data schema depends on the type of signal used in the request.</p>
    /// <p>For <code>Approve</code> and <code>Reject</code> signal types, the payload is an optional comment that you can send with the signal type. For example:</p>
    /// <p> <code>Comment="Looks good"</code> </p>
    /// <p>For <code>StartStep</code> and <code>Resume</code> signal types, you must send the name of the Automation step to start or resume as the payload. For example:</p>
    /// <p> <code>StepName="step1"</code> </p>
    /// <p>For the <code>StopStep</code> signal type, you must send the step execution ID as the payload. For example:</p>
    /// <p> <code>StepExecutionId="97fff367-fc5a-4299-aed8-0123456789ab"</code> </p>
    pub fn payload(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.payload.as_ref()
    }
}
impl SendAutomationSignalInput {
    /// Creates a new builder-style object to manufacture [`SendAutomationSignalInput`](crate::operation::send_automation_signal::SendAutomationSignalInput).
    pub fn builder(
    ) -> crate::operation::send_automation_signal::builders::SendAutomationSignalInputBuilder {
        crate::operation::send_automation_signal::builders::SendAutomationSignalInputBuilder::default()
    }
}

/// A builder for [`SendAutomationSignalInput`](crate::operation::send_automation_signal::SendAutomationSignalInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendAutomationSignalInputBuilder {
    pub(crate) automation_execution_id: std::option::Option<std::string::String>,
    pub(crate) signal_type: std::option::Option<crate::types::SignalType>,
    pub(crate) payload: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
}
impl SendAutomationSignalInputBuilder {
    /// <p>The unique identifier for an existing Automation execution that you want to send the signal to.</p>
    pub fn automation_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.automation_execution_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for an existing Automation execution that you want to send the signal to.</p>
    pub fn set_automation_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.automation_execution_id = input;
        self
    }
    /// <p>The type of signal to send to an Automation execution. </p>
    pub fn signal_type(mut self, input: crate::types::SignalType) -> Self {
        self.signal_type = Some(input);
        self
    }
    /// <p>The type of signal to send to an Automation execution. </p>
    pub fn set_signal_type(mut self, input: std::option::Option<crate::types::SignalType>) -> Self {
        self.signal_type = input;
        self
    }
    /// Adds a key-value pair to `payload`.
    ///
    /// To override the contents of this collection use [`set_payload`](Self::set_payload).
    ///
    /// <p>The data sent with the signal. The data schema depends on the type of signal used in the request.</p>
    /// <p>For <code>Approve</code> and <code>Reject</code> signal types, the payload is an optional comment that you can send with the signal type. For example:</p>
    /// <p> <code>Comment="Looks good"</code> </p>
    /// <p>For <code>StartStep</code> and <code>Resume</code> signal types, you must send the name of the Automation step to start or resume as the payload. For example:</p>
    /// <p> <code>StepName="step1"</code> </p>
    /// <p>For the <code>StopStep</code> signal type, you must send the step execution ID as the payload. For example:</p>
    /// <p> <code>StepExecutionId="97fff367-fc5a-4299-aed8-0123456789ab"</code> </p>
    pub fn payload(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.payload.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.payload = Some(hash_map);
        self
    }
    /// <p>The data sent with the signal. The data schema depends on the type of signal used in the request.</p>
    /// <p>For <code>Approve</code> and <code>Reject</code> signal types, the payload is an optional comment that you can send with the signal type. For example:</p>
    /// <p> <code>Comment="Looks good"</code> </p>
    /// <p>For <code>StartStep</code> and <code>Resume</code> signal types, you must send the name of the Automation step to start or resume as the payload. For example:</p>
    /// <p> <code>StepName="step1"</code> </p>
    /// <p>For the <code>StopStep</code> signal type, you must send the step execution ID as the payload. For example:</p>
    /// <p> <code>StepExecutionId="97fff367-fc5a-4299-aed8-0123456789ab"</code> </p>
    pub fn set_payload(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.payload = input;
        self
    }
    /// Consumes the builder and constructs a [`SendAutomationSignalInput`](crate::operation::send_automation_signal::SendAutomationSignalInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::send_automation_signal::SendAutomationSignalInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::send_automation_signal::SendAutomationSignalInput {
                automation_execution_id: self.automation_execution_id,
                signal_type: self.signal_type,
                payload: self.payload,
            },
        )
    }
}
