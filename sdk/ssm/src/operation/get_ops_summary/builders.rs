// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_ops_summary::_get_ops_summary_output::GetOpsSummaryOutputBuilder;

pub use crate::operation::get_ops_summary::_get_ops_summary_input::GetOpsSummaryInputBuilder;

/// Fluent builder constructing a request to `GetOpsSummary`.
///
/// <p>View a summary of operations metadata (OpsData) based on specified filters and aggregators. OpsData can include information about Amazon Web Services Systems Manager OpsCenter operational workitems (OpsItems) as well as information about any Amazon Web Services resource or service configured to report OpsData to Amazon Web Services Systems Manager Explorer. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetOpsSummaryFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_ops_summary::builders::GetOpsSummaryInputBuilder,
}
impl GetOpsSummaryFluentBuilder {
    /// Creates a new `GetOpsSummary`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_ops_summary::GetOpsSummary,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::get_ops_summary::GetOpsSummaryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_ops_summary::GetOpsSummaryOutput,
        aws_smithy_http::result::SdkError<crate::operation::get_ops_summary::GetOpsSummaryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_ops_summary::paginator::GetOpsSummaryPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::get_ops_summary::paginator::GetOpsSummaryPaginator {
        crate::operation::get_ops_summary::paginator::GetOpsSummaryPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>Specify the name of a resource data sync to get.</p>
    pub fn sync_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sync_name(input.into());
        self
    }
    /// <p>Specify the name of a resource data sync to get.</p>
    pub fn set_sync_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sync_name(input);
        self
    }
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Optional filters used to scope down the returned OpsData. </p>
    pub fn filters(mut self, input: crate::types::OpsFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>Optional filters used to scope down the returned OpsData. </p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OpsFilter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// Appends an item to `Aggregators`.
    ///
    /// To override the contents of this collection use [`set_aggregators`](Self::set_aggregators).
    ///
    /// <p>Optional aggregators that return counts of OpsData based on one or more expressions.</p>
    pub fn aggregators(mut self, input: crate::types::OpsAggregator) -> Self {
        self.inner = self.inner.aggregators(input);
        self
    }
    /// <p>Optional aggregators that return counts of OpsData based on one or more expressions.</p>
    pub fn set_aggregators(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OpsAggregator>>,
    ) -> Self {
        self.inner = self.inner.set_aggregators(input);
        self
    }
    /// Appends an item to `ResultAttributes`.
    ///
    /// To override the contents of this collection use [`set_result_attributes`](Self::set_result_attributes).
    ///
    /// <p>The OpsData data type to return.</p>
    pub fn result_attributes(mut self, input: crate::types::OpsResultAttribute) -> Self {
        self.inner = self.inner.result_attributes(input);
        self
    }
    /// <p>The OpsData data type to return.</p>
    pub fn set_result_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OpsResultAttribute>>,
    ) -> Self {
        self.inner = self.inner.set_result_attributes(input);
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
