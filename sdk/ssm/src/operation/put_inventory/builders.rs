// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_inventory::_put_inventory_output::PutInventoryOutputBuilder;

pub use crate::operation::put_inventory::_put_inventory_input::PutInventoryInputBuilder;

impl crate::operation::put_inventory::builders::PutInventoryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_inventory::PutInventoryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_inventory::PutInventoryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_inventory();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutInventory`.
///
/// <p>Bulk update custom inventory items on one or more managed nodes. The request adds an inventory item, if it doesn't already exist, or updates an inventory item, if it does exist.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutInventoryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_inventory::builders::PutInventoryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::put_inventory::PutInventoryOutput,
        crate::operation::put_inventory::PutInventoryError,
    > for PutInventoryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::put_inventory::PutInventoryOutput,
            crate::operation::put_inventory::PutInventoryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutInventoryFluentBuilder {
    /// Creates a new `PutInventory`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutInventory as a reference.
    pub fn as_input(&self) -> &crate::operation::put_inventory::builders::PutInventoryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_inventory::PutInventoryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_inventory::PutInventoryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_inventory::PutInventory::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_inventory::PutInventory::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_inventory::PutInventoryOutput,
        crate::operation::put_inventory::PutInventoryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>An managed node ID where you want to add or update inventory items.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>An managed node ID where you want to add or update inventory items.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>An managed node ID where you want to add or update inventory items.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_id()
    }
    ///
    /// Appends an item to `Items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>The inventory items that you want to add or update on managed nodes.</p>
    pub fn items(mut self, input: crate::types::InventoryItem) -> Self {
        self.inner = self.inner.items(input);
        self
    }
    /// <p>The inventory items that you want to add or update on managed nodes.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InventoryItem>>) -> Self {
        self.inner = self.inner.set_items(input);
        self
    }
    /// <p>The inventory items that you want to add or update on managed nodes.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InventoryItem>> {
        self.inner.get_items()
    }
}
