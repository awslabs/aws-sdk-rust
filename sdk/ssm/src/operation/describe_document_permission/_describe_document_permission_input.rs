// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDocumentPermissionInput {
    /// <p>The name of the document for which you are the owner.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    #[doc(hidden)]
    pub permission_type: std::option::Option<crate::types::DocumentPermissionType>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeDocumentPermissionInput {
    /// <p>The name of the document for which you are the owner.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    pub fn permission_type(&self) -> std::option::Option<&crate::types::DocumentPermissionType> {
        self.permission_type.as_ref()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeDocumentPermissionInput {
    /// Creates a new builder-style object to manufacture [`DescribeDocumentPermissionInput`](crate::operation::describe_document_permission::DescribeDocumentPermissionInput).
    pub fn builder() -> crate::operation::describe_document_permission::builders::DescribeDocumentPermissionInputBuilder{
        crate::operation::describe_document_permission::builders::DescribeDocumentPermissionInputBuilder::default()
    }
}

/// A builder for [`DescribeDocumentPermissionInput`](crate::operation::describe_document_permission::DescribeDocumentPermissionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDocumentPermissionInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) permission_type: std::option::Option<crate::types::DocumentPermissionType>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl DescribeDocumentPermissionInputBuilder {
    /// <p>The name of the document for which you are the owner.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the document for which you are the owner.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    pub fn permission_type(mut self, input: crate::types::DocumentPermissionType) -> Self {
        self.permission_type = Some(input);
        self
    }
    /// <p>The permission type for the document. The permission type can be <i>Share</i>.</p>
    pub fn set_permission_type(
        mut self,
        input: std::option::Option<crate::types::DocumentPermissionType>,
    ) -> Self {
        self.permission_type = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDocumentPermissionInput`](crate::operation::describe_document_permission::DescribeDocumentPermissionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_document_permission::DescribeDocumentPermissionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_document_permission::DescribeDocumentPermissionInput {
                name: self.name,
                permission_type: self.permission_type,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
