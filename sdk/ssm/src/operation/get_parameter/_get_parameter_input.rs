// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetParameterInput {
    /// <p>The name of the parameter you want to query.</p>
    /// <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter version, use <code>"Name": "name:version"</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Return decrypted values for secure string parameters. This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
    pub with_decryption: ::std::option::Option<bool>,
}
impl GetParameterInput {
    /// <p>The name of the parameter you want to query.</p>
    /// <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter version, use <code>"Name": "name:version"</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Return decrypted values for secure string parameters. This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
    pub fn with_decryption(&self) -> ::std::option::Option<bool> {
        self.with_decryption
    }
}
impl GetParameterInput {
    /// Creates a new builder-style object to manufacture [`GetParameterInput`](crate::operation::get_parameter::GetParameterInput).
    pub fn builder() -> crate::operation::get_parameter::builders::GetParameterInputBuilder {
        crate::operation::get_parameter::builders::GetParameterInputBuilder::default()
    }
}

/// A builder for [`GetParameterInput`](crate::operation::get_parameter::GetParameterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetParameterInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) with_decryption: ::std::option::Option<bool>,
}
impl GetParameterInputBuilder {
    /// <p>The name of the parameter you want to query.</p>
    /// <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter version, use <code>"Name": "name:version"</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the parameter you want to query.</p>
    /// <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter version, use <code>"Name": "name:version"</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the parameter you want to query.</p>
    /// <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter version, use <code>"Name": "name:version"</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Return decrypted values for secure string parameters. This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
    pub fn with_decryption(mut self, input: bool) -> Self {
        self.with_decryption = ::std::option::Option::Some(input);
        self
    }
    /// <p>Return decrypted values for secure string parameters. This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
    pub fn set_with_decryption(mut self, input: ::std::option::Option<bool>) -> Self {
        self.with_decryption = input;
        self
    }
    /// <p>Return decrypted values for secure string parameters. This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
    pub fn get_with_decryption(&self) -> &::std::option::Option<bool> {
        &self.with_decryption
    }
    /// Consumes the builder and constructs a [`GetParameterInput`](crate::operation::get_parameter::GetParameterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_parameter::GetParameterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_parameter::GetParameterInput {
            name: self.name,
            with_decryption: self.with_decryption,
        })
    }
}
