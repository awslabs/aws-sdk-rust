// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListComplianceItemsInput {
    /// <p>One or more compliance filters. Use a filter to return a more specific list of results.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::ComplianceStringFilter>>,
    /// <p>The ID for the resources from which to get compliance information. Currently, you can only specify one resource ID.</p>
    #[doc(hidden)]
    pub resource_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The type of resource from which to get compliance information. Currently, the only supported resource type is <code>ManagedInstance</code>.</p>
    #[doc(hidden)]
    pub resource_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A token to start the list. Use this token to get the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListComplianceItemsInput {
    /// <p>One or more compliance filters. Use a filter to return a more specific list of results.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::ComplianceStringFilter]> {
        self.filters.as_deref()
    }
    /// <p>The ID for the resources from which to get compliance information. Currently, you can only specify one resource ID.</p>
    pub fn resource_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.resource_ids.as_deref()
    }
    /// <p>The type of resource from which to get compliance information. Currently, the only supported resource type is <code>ManagedInstance</code>.</p>
    pub fn resource_types(&self) -> std::option::Option<&[std::string::String]> {
        self.resource_types.as_deref()
    }
    /// <p>A token to start the list. Use this token to get the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListComplianceItemsInput {
    /// Creates a new builder-style object to manufacture [`ListComplianceItemsInput`](crate::operation::list_compliance_items::ListComplianceItemsInput).
    pub fn builder(
    ) -> crate::operation::list_compliance_items::builders::ListComplianceItemsInputBuilder {
        crate::operation::list_compliance_items::builders::ListComplianceItemsInputBuilder::default(
        )
    }
}

/// A builder for [`ListComplianceItemsInput`](crate::operation::list_compliance_items::ListComplianceItemsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListComplianceItemsInputBuilder {
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::ComplianceStringFilter>>,
    pub(crate) resource_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) resource_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListComplianceItemsInputBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>One or more compliance filters. Use a filter to return a more specific list of results.</p>
    pub fn filters(mut self, input: crate::types::ComplianceStringFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>One or more compliance filters. Use a filter to return a more specific list of results.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ComplianceStringFilter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// Appends an item to `resource_ids`.
    ///
    /// To override the contents of this collection use [`set_resource_ids`](Self::set_resource_ids).
    ///
    /// <p>The ID for the resources from which to get compliance information. Currently, you can only specify one resource ID.</p>
    pub fn resource_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resource_ids.unwrap_or_default();
        v.push(input.into());
        self.resource_ids = Some(v);
        self
    }
    /// <p>The ID for the resources from which to get compliance information. Currently, you can only specify one resource ID.</p>
    pub fn set_resource_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resource_ids = input;
        self
    }
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>The type of resource from which to get compliance information. Currently, the only supported resource type is <code>ManagedInstance</code>.</p>
    pub fn resource_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input.into());
        self.resource_types = Some(v);
        self
    }
    /// <p>The type of resource from which to get compliance information. Currently, the only supported resource type is <code>ManagedInstance</code>.</p>
    pub fn set_resource_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resource_types = input;
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A token to start the list. Use this token to get the next set of results. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListComplianceItemsInput`](crate::operation::list_compliance_items::ListComplianceItemsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_compliance_items::ListComplianceItemsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_compliance_items::ListComplianceItemsInput {
                filters: self.filters,
                resource_ids: self.resource_ids,
                resource_types: self.resource_types,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
