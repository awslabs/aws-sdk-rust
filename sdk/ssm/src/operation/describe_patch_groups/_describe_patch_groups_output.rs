// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePatchGroupsOutput {
    /// <p>Each entry in the array contains:</p>
    /// <ul>
    /// <li> <p> <code>PatchGroup</code>: string (between 1 and 256 characters. Regex: <code>^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$)</code> </p> </li>
    /// <li> <p> <code>PatchBaselineIdentity</code>: A <code>PatchBaselineIdentity</code> element.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub mappings: std::option::Option<std::vec::Vec<crate::types::PatchGroupPatchBaselineMapping>>,
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribePatchGroupsOutput {
    /// <p>Each entry in the array contains:</p>
    /// <ul>
    /// <li> <p> <code>PatchGroup</code>: string (between 1 and 256 characters. Regex: <code>^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$)</code> </p> </li>
    /// <li> <p> <code>PatchBaselineIdentity</code>: A <code>PatchBaselineIdentity</code> element.</p> </li>
    /// </ul>
    pub fn mappings(&self) -> std::option::Option<&[crate::types::PatchGroupPatchBaselineMapping]> {
        self.mappings.as_deref()
    }
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribePatchGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribePatchGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribePatchGroupsOutput`](crate::operation::describe_patch_groups::DescribePatchGroupsOutput).
    pub fn builder(
    ) -> crate::operation::describe_patch_groups::builders::DescribePatchGroupsOutputBuilder {
        crate::operation::describe_patch_groups::builders::DescribePatchGroupsOutputBuilder::default(
        )
    }
}

/// A builder for [`DescribePatchGroupsOutput`](crate::operation::describe_patch_groups::DescribePatchGroupsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribePatchGroupsOutputBuilder {
    pub(crate) mappings:
        std::option::Option<std::vec::Vec<crate::types::PatchGroupPatchBaselineMapping>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribePatchGroupsOutputBuilder {
    /// Appends an item to `mappings`.
    ///
    /// To override the contents of this collection use [`set_mappings`](Self::set_mappings).
    ///
    /// <p>Each entry in the array contains:</p>
    /// <ul>
    /// <li> <p> <code>PatchGroup</code>: string (between 1 and 256 characters. Regex: <code>^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$)</code> </p> </li>
    /// <li> <p> <code>PatchBaselineIdentity</code>: A <code>PatchBaselineIdentity</code> element.</p> </li>
    /// </ul>
    pub fn mappings(mut self, input: crate::types::PatchGroupPatchBaselineMapping) -> Self {
        let mut v = self.mappings.unwrap_or_default();
        v.push(input);
        self.mappings = Some(v);
        self
    }
    /// <p>Each entry in the array contains:</p>
    /// <ul>
    /// <li> <p> <code>PatchGroup</code>: string (between 1 and 256 characters. Regex: <code>^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$)</code> </p> </li>
    /// <li> <p> <code>PatchBaselineIdentity</code>: A <code>PatchBaselineIdentity</code> element.</p> </li>
    /// </ul>
    pub fn set_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PatchGroupPatchBaselineMapping>>,
    ) -> Self {
        self.mappings = input;
        self
    }
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribePatchGroupsOutput`](crate::operation::describe_patch_groups::DescribePatchGroupsOutput).
    pub fn build(self) -> crate::operation::describe_patch_groups::DescribePatchGroupsOutput {
        crate::operation::describe_patch_groups::DescribePatchGroupsOutput {
            mappings: self.mappings,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
