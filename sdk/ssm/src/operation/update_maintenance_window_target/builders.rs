// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_maintenance_window_target::_update_maintenance_window_target_output::UpdateMaintenanceWindowTargetOutputBuilder;

pub use crate::operation::update_maintenance_window_target::_update_maintenance_window_target_input::UpdateMaintenanceWindowTargetInputBuilder;

impl crate::operation::update_maintenance_window_target::builders::UpdateMaintenanceWindowTargetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_maintenance_window_target();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateMaintenanceWindowTarget`.
///
/// <p>Modifies the target of an existing maintenance window. You can change the following:</p>
/// <ul>
/// <li>
/// <p>Name</p></li>
/// <li>
/// <p>Description</p></li>
/// <li>
/// <p>Owner</p></li>
/// <li>
/// <p>IDs for an ID target</p></li>
/// <li>
/// <p>Tags for a Tag target</p></li>
/// <li>
/// <p>From any supported tag type to another. The three supported tag types are ID target, Tag target, and resource group. For more information, see <code>Target</code>.</p></li>
/// </ul><note>
/// <p>If a parameter is null, then the corresponding field isn't modified.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateMaintenanceWindowTargetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_maintenance_window_target::builders::UpdateMaintenanceWindowTargetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetOutput,
        crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetError,
    > for UpdateMaintenanceWindowTargetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetOutput,
            crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateMaintenanceWindowTargetFluentBuilder {
    /// Creates a new `UpdateMaintenanceWindowTarget`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateMaintenanceWindowTarget as a reference.
    pub fn as_input(&self) -> &crate::operation::update_maintenance_window_target::builders::UpdateMaintenanceWindowTargetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTarget::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTarget::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetOutput,
        crate::operation::update_maintenance_window_target::UpdateMaintenanceWindowTargetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The maintenance window ID with which to modify the target.</p>
    pub fn window_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.window_id(input.into());
        self
    }
    /// <p>The maintenance window ID with which to modify the target.</p>
    pub fn set_window_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_window_id(input);
        self
    }
    /// <p>The maintenance window ID with which to modify the target.</p>
    pub fn get_window_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_window_id()
    }
    /// <p>The target ID to modify.</p>
    pub fn window_target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.window_target_id(input.into());
        self
    }
    /// <p>The target ID to modify.</p>
    pub fn set_window_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_window_target_id(input);
        self
    }
    /// <p>The target ID to modify.</p>
    pub fn get_window_target_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_window_target_id()
    }
    ///
    /// Appends an item to `Targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The targets to add or replace.</p>
    pub fn targets(mut self, input: crate::types::Target) -> Self {
        self.inner = self.inner.targets(input);
        self
    }
    /// <p>The targets to add or replace.</p>
    pub fn set_targets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Target>>) -> Self {
        self.inner = self.inner.set_targets(input);
        self
    }
    /// <p>The targets to add or replace.</p>
    pub fn get_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Target>> {
        self.inner.get_targets()
    }
    /// <p>User-provided value that will be included in any Amazon CloudWatch Events events raised while running tasks for these targets in this maintenance window.</p>
    pub fn owner_information(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.owner_information(input.into());
        self
    }
    /// <p>User-provided value that will be included in any Amazon CloudWatch Events events raised while running tasks for these targets in this maintenance window.</p>
    pub fn set_owner_information(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_owner_information(input);
        self
    }
    /// <p>User-provided value that will be included in any Amazon CloudWatch Events events raised while running tasks for these targets in this maintenance window.</p>
    pub fn get_owner_information(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_owner_information()
    }
    /// <p>A name for the update.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A name for the update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>An optional description for the update.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An optional description for the update.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>An optional description for the update.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>If <code>True</code>, then all fields that are required by the <code>RegisterTargetWithMaintenanceWindow</code> operation are also required for this API request. Optional fields that aren't specified are set to null.</p>
    pub fn replace(mut self, input: bool) -> Self {
        self.inner = self.inner.replace(input);
        self
    }
    /// <p>If <code>True</code>, then all fields that are required by the <code>RegisterTargetWithMaintenanceWindow</code> operation are also required for this API request. Optional fields that aren't specified are set to null.</p>
    pub fn set_replace(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_replace(input);
        self
    }
    /// <p>If <code>True</code>, then all fields that are required by the <code>RegisterTargetWithMaintenanceWindow</code> operation are also required for this API request. Optional fields that aren't specified are set to null.</p>
    pub fn get_replace(&self) -> &::std::option::Option<bool> {
        self.inner.get_replace()
    }
}
