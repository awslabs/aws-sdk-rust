// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAssociationInput {
    /// <p>The name of the SSM document.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The managed node ID.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The association ID for which you want information.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>Specify the association version to retrieve. To view the latest version, either specify <code>$LATEST</code> for this parameter, or omit this parameter. To view a list of all associations for a managed node, use <code>ListAssociations</code>. To get a list of versions for a specific association, use <code>ListAssociationVersions</code>. </p>
    pub association_version: ::std::option::Option<::std::string::String>,
}
impl DescribeAssociationInput {
    /// <p>The name of the SSM document.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The managed node ID.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The association ID for which you want information.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>Specify the association version to retrieve. To view the latest version, either specify <code>$LATEST</code> for this parameter, or omit this parameter. To view a list of all associations for a managed node, use <code>ListAssociations</code>. To get a list of versions for a specific association, use <code>ListAssociationVersions</code>. </p>
    pub fn association_version(&self) -> ::std::option::Option<&str> {
        self.association_version.as_deref()
    }
}
impl DescribeAssociationInput {
    /// Creates a new builder-style object to manufacture [`DescribeAssociationInput`](crate::operation::describe_association::DescribeAssociationInput).
    pub fn builder() -> crate::operation::describe_association::builders::DescribeAssociationInputBuilder {
        crate::operation::describe_association::builders::DescribeAssociationInputBuilder::default()
    }
}

/// A builder for [`DescribeAssociationInput`](crate::operation::describe_association::DescribeAssociationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAssociationInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_version: ::std::option::Option<::std::string::String>,
}
impl DescribeAssociationInputBuilder {
    /// <p>The name of the SSM document.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SSM document.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the SSM document.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The managed node ID.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The managed node ID.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The managed node ID.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The association ID for which you want information.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The association ID for which you want information.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The association ID for which you want information.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>Specify the association version to retrieve. To view the latest version, either specify <code>$LATEST</code> for this parameter, or omit this parameter. To view a list of all associations for a managed node, use <code>ListAssociations</code>. To get a list of versions for a specific association, use <code>ListAssociationVersions</code>. </p>
    pub fn association_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the association version to retrieve. To view the latest version, either specify <code>$LATEST</code> for this parameter, or omit this parameter. To view a list of all associations for a managed node, use <code>ListAssociations</code>. To get a list of versions for a specific association, use <code>ListAssociationVersions</code>. </p>
    pub fn set_association_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_version = input;
        self
    }
    /// <p>Specify the association version to retrieve. To view the latest version, either specify <code>$LATEST</code> for this parameter, or omit this parameter. To view a list of all associations for a managed node, use <code>ListAssociations</code>. To get a list of versions for a specific association, use <code>ListAssociationVersions</code>. </p>
    pub fn get_association_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_version
    }
    /// Consumes the builder and constructs a [`DescribeAssociationInput`](crate::operation::describe_association::DescribeAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_association::DescribeAssociationInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_association::DescribeAssociationInput {
            name: self.name,
            instance_id: self.instance_id,
            association_id: self.association_id,
            association_version: self.association_version,
        })
    }
}
