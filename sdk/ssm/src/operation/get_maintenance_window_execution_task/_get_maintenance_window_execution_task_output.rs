// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetMaintenanceWindowExecutionTaskOutput {
    /// <p>The ID of the maintenance window execution that includes the task.</p>
    pub window_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the specific task execution in the maintenance window task that was retrieved.</p>
    pub task_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the task that ran.</p>
    pub task_arn: ::std::option::Option<::std::string::String>,
    /// <p>The role that was assumed when running the task.</p>
    pub service_role: ::std::option::Option<::std::string::String>,
    /// <p>The type of task that was run.</p>
    pub r#type: ::std::option::Option<crate::types::MaintenanceWindowTaskType>,
    /// <p>The parameters passed to the task when it was run.</p> <note>
    /// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    /// <p>The map has the following format:</p>
    /// <ul>
    /// <li> <p> <code>Key</code>: string, between 1 and 255 characters</p> </li>
    /// <li> <p> <code>Value</code>: an array of strings, each between 1 and 255 characters</p> </li>
    /// </ul>
    pub task_parameters: ::std::option::Option<
        ::std::vec::Vec<::std::collections::HashMap<::std::string::String, crate::types::MaintenanceWindowTaskParameterValueExpression>>,
    >,
    /// <p>The priority of the task.</p>
    pub priority: i32,
    /// <p>The defined maximum number of task executions that could be run in parallel.</p>
    pub max_concurrency: ::std::option::Option<::std::string::String>,
    /// <p>The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.</p>
    pub max_errors: ::std::option::Option<::std::string::String>,
    /// <p>The status of the task.</p>
    pub status: ::std::option::Option<crate::types::MaintenanceWindowExecutionStatus>,
    /// <p>The details explaining the status. Not available for all status values.</p>
    pub status_details: ::std::option::Option<::std::string::String>,
    /// <p>The time the task execution started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the task execution completed.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The details for the CloudWatch alarm you applied to your maintenance window task.</p>
    pub alarm_configuration: ::std::option::Option<crate::types::AlarmConfiguration>,
    /// <p>The CloudWatch alarms that were invoked by the maintenance window task.</p>
    pub triggered_alarms: ::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>>,
    _request_id: Option<String>,
}
impl GetMaintenanceWindowExecutionTaskOutput {
    /// <p>The ID of the maintenance window execution that includes the task.</p>
    pub fn window_execution_id(&self) -> ::std::option::Option<&str> {
        self.window_execution_id.as_deref()
    }
    /// <p>The ID of the specific task execution in the maintenance window task that was retrieved.</p>
    pub fn task_execution_id(&self) -> ::std::option::Option<&str> {
        self.task_execution_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the task that ran.</p>
    pub fn task_arn(&self) -> ::std::option::Option<&str> {
        self.task_arn.as_deref()
    }
    /// <p>The role that was assumed when running the task.</p>
    pub fn service_role(&self) -> ::std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>The type of task that was run.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::MaintenanceWindowTaskType> {
        self.r#type.as_ref()
    }
    /// <p>The parameters passed to the task when it was run.</p> <note>
    /// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    /// <p>The map has the following format:</p>
    /// <ul>
    /// <li> <p> <code>Key</code>: string, between 1 and 255 characters</p> </li>
    /// <li> <p> <code>Value</code>: an array of strings, each between 1 and 255 characters</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.task_parameters.is_none()`.
    pub fn task_parameters(
        &self,
    ) -> &[::std::collections::HashMap<::std::string::String, crate::types::MaintenanceWindowTaskParameterValueExpression>] {
        self.task_parameters.as_deref().unwrap_or_default()
    }
    /// <p>The priority of the task.</p>
    pub fn priority(&self) -> i32 {
        self.priority
    }
    /// <p>The defined maximum number of task executions that could be run in parallel.</p>
    pub fn max_concurrency(&self) -> ::std::option::Option<&str> {
        self.max_concurrency.as_deref()
    }
    /// <p>The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.</p>
    pub fn max_errors(&self) -> ::std::option::Option<&str> {
        self.max_errors.as_deref()
    }
    /// <p>The status of the task.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MaintenanceWindowExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>The details explaining the status. Not available for all status values.</p>
    pub fn status_details(&self) -> ::std::option::Option<&str> {
        self.status_details.as_deref()
    }
    /// <p>The time the task execution started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time the task execution completed.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The details for the CloudWatch alarm you applied to your maintenance window task.</p>
    pub fn alarm_configuration(&self) -> ::std::option::Option<&crate::types::AlarmConfiguration> {
        self.alarm_configuration.as_ref()
    }
    /// <p>The CloudWatch alarms that were invoked by the maintenance window task.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.triggered_alarms.is_none()`.
    pub fn triggered_alarms(&self) -> &[crate::types::AlarmStateInformation] {
        self.triggered_alarms.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GetMaintenanceWindowExecutionTaskOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetMaintenanceWindowExecutionTaskOutput");
        formatter.field("window_execution_id", &self.window_execution_id);
        formatter.field("task_execution_id", &self.task_execution_id);
        formatter.field("task_arn", &self.task_arn);
        formatter.field("service_role", &self.service_role);
        formatter.field("r#type", &self.r#type);
        formatter.field("task_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("priority", &self.priority);
        formatter.field("max_concurrency", &self.max_concurrency);
        formatter.field("max_errors", &self.max_errors);
        formatter.field("status", &self.status);
        formatter.field("status_details", &self.status_details);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("alarm_configuration", &self.alarm_configuration);
        formatter.field("triggered_alarms", &self.triggered_alarms);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetMaintenanceWindowExecutionTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMaintenanceWindowExecutionTaskOutput {
    /// Creates a new builder-style object to manufacture [`GetMaintenanceWindowExecutionTaskOutput`](crate::operation::get_maintenance_window_execution_task::GetMaintenanceWindowExecutionTaskOutput).
    pub fn builder() -> crate::operation::get_maintenance_window_execution_task::builders::GetMaintenanceWindowExecutionTaskOutputBuilder {
        crate::operation::get_maintenance_window_execution_task::builders::GetMaintenanceWindowExecutionTaskOutputBuilder::default()
    }
}

/// A builder for [`GetMaintenanceWindowExecutionTaskOutput`](crate::operation::get_maintenance_window_execution_task::GetMaintenanceWindowExecutionTaskOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetMaintenanceWindowExecutionTaskOutputBuilder {
    pub(crate) window_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_arn: ::std::option::Option<::std::string::String>,
    pub(crate) service_role: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::MaintenanceWindowTaskType>,
    pub(crate) task_parameters: ::std::option::Option<
        ::std::vec::Vec<::std::collections::HashMap<::std::string::String, crate::types::MaintenanceWindowTaskParameterValueExpression>>,
    >,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) max_concurrency: ::std::option::Option<::std::string::String>,
    pub(crate) max_errors: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MaintenanceWindowExecutionStatus>,
    pub(crate) status_details: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) alarm_configuration: ::std::option::Option<crate::types::AlarmConfiguration>,
    pub(crate) triggered_alarms: ::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>>,
    _request_id: Option<String>,
}
impl GetMaintenanceWindowExecutionTaskOutputBuilder {
    /// <p>The ID of the maintenance window execution that includes the task.</p>
    pub fn window_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.window_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the maintenance window execution that includes the task.</p>
    pub fn set_window_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.window_execution_id = input;
        self
    }
    /// <p>The ID of the maintenance window execution that includes the task.</p>
    pub fn get_window_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.window_execution_id
    }
    /// <p>The ID of the specific task execution in the maintenance window task that was retrieved.</p>
    pub fn task_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the specific task execution in the maintenance window task that was retrieved.</p>
    pub fn set_task_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_execution_id = input;
        self
    }
    /// <p>The ID of the specific task execution in the maintenance window task that was retrieved.</p>
    pub fn get_task_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_execution_id
    }
    /// <p>The Amazon Resource Name (ARN) of the task that ran.</p>
    pub fn task_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the task that ran.</p>
    pub fn set_task_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the task that ran.</p>
    pub fn get_task_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_arn
    }
    /// <p>The role that was assumed when running the task.</p>
    pub fn service_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The role that was assumed when running the task.</p>
    pub fn set_service_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_role = input;
        self
    }
    /// <p>The role that was assumed when running the task.</p>
    pub fn get_service_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_role
    }
    /// <p>The type of task that was run.</p>
    pub fn r#type(mut self, input: crate::types::MaintenanceWindowTaskType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of task that was run.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MaintenanceWindowTaskType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of task that was run.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MaintenanceWindowTaskType> {
        &self.r#type
    }
    /// Appends an item to `task_parameters`.
    ///
    /// To override the contents of this collection use [`set_task_parameters`](Self::set_task_parameters).
    ///
    /// <p>The parameters passed to the task when it was run.</p> <note>
    /// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    /// <p>The map has the following format:</p>
    /// <ul>
    /// <li> <p> <code>Key</code>: string, between 1 and 255 characters</p> </li>
    /// <li> <p> <code>Value</code>: an array of strings, each between 1 and 255 characters</p> </li>
    /// </ul>
    pub fn task_parameters(
        mut self,
        input: ::std::collections::HashMap<::std::string::String, crate::types::MaintenanceWindowTaskParameterValueExpression>,
    ) -> Self {
        let mut v = self.task_parameters.unwrap_or_default();
        v.push(input);
        self.task_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parameters passed to the task when it was run.</p> <note>
    /// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    /// <p>The map has the following format:</p>
    /// <ul>
    /// <li> <p> <code>Key</code>: string, between 1 and 255 characters</p> </li>
    /// <li> <p> <code>Value</code>: an array of strings, each between 1 and 255 characters</p> </li>
    /// </ul>
    pub fn set_task_parameters(
        mut self,
        input: ::std::option::Option<
            ::std::vec::Vec<::std::collections::HashMap<::std::string::String, crate::types::MaintenanceWindowTaskParameterValueExpression>>,
        >,
    ) -> Self {
        self.task_parameters = input;
        self
    }
    /// <p>The parameters passed to the task when it was run.</p> <note>
    /// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    /// <p>The map has the following format:</p>
    /// <ul>
    /// <li> <p> <code>Key</code>: string, between 1 and 255 characters</p> </li>
    /// <li> <p> <code>Value</code>: an array of strings, each between 1 and 255 characters</p> </li>
    /// </ul>
    pub fn get_task_parameters(
        &self,
    ) -> &::std::option::Option<
        ::std::vec::Vec<::std::collections::HashMap<::std::string::String, crate::types::MaintenanceWindowTaskParameterValueExpression>>,
    > {
        &self.task_parameters
    }
    /// <p>The priority of the task.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The priority of the task.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The priority of the task.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>The defined maximum number of task executions that could be run in parallel.</p>
    pub fn max_concurrency(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_concurrency = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The defined maximum number of task executions that could be run in parallel.</p>
    pub fn set_max_concurrency(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_concurrency = input;
        self
    }
    /// <p>The defined maximum number of task executions that could be run in parallel.</p>
    pub fn get_max_concurrency(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_concurrency
    }
    /// <p>The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.</p>
    pub fn max_errors(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_errors = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.</p>
    pub fn set_max_errors(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_errors = input;
        self
    }
    /// <p>The defined maximum number of task execution errors allowed before scheduling of the task execution would have been stopped.</p>
    pub fn get_max_errors(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_errors
    }
    /// <p>The status of the task.</p>
    pub fn status(mut self, input: crate::types::MaintenanceWindowExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the task.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MaintenanceWindowExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the task.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MaintenanceWindowExecutionStatus> {
        &self.status
    }
    /// <p>The details explaining the status. Not available for all status values.</p>
    pub fn status_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The details explaining the status. Not available for all status values.</p>
    pub fn set_status_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_details = input;
        self
    }
    /// <p>The details explaining the status. Not available for all status values.</p>
    pub fn get_status_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_details
    }
    /// <p>The time the task execution started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the task execution started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time the task execution started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time the task execution completed.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the task execution completed.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time the task execution completed.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The details for the CloudWatch alarm you applied to your maintenance window task.</p>
    pub fn alarm_configuration(mut self, input: crate::types::AlarmConfiguration) -> Self {
        self.alarm_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details for the CloudWatch alarm you applied to your maintenance window task.</p>
    pub fn set_alarm_configuration(mut self, input: ::std::option::Option<crate::types::AlarmConfiguration>) -> Self {
        self.alarm_configuration = input;
        self
    }
    /// <p>The details for the CloudWatch alarm you applied to your maintenance window task.</p>
    pub fn get_alarm_configuration(&self) -> &::std::option::Option<crate::types::AlarmConfiguration> {
        &self.alarm_configuration
    }
    /// Appends an item to `triggered_alarms`.
    ///
    /// To override the contents of this collection use [`set_triggered_alarms`](Self::set_triggered_alarms).
    ///
    /// <p>The CloudWatch alarms that were invoked by the maintenance window task.</p>
    pub fn triggered_alarms(mut self, input: crate::types::AlarmStateInformation) -> Self {
        let mut v = self.triggered_alarms.unwrap_or_default();
        v.push(input);
        self.triggered_alarms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The CloudWatch alarms that were invoked by the maintenance window task.</p>
    pub fn set_triggered_alarms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>>) -> Self {
        self.triggered_alarms = input;
        self
    }
    /// <p>The CloudWatch alarms that were invoked by the maintenance window task.</p>
    pub fn get_triggered_alarms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>> {
        &self.triggered_alarms
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMaintenanceWindowExecutionTaskOutput`](crate::operation::get_maintenance_window_execution_task::GetMaintenanceWindowExecutionTaskOutput).
    pub fn build(self) -> crate::operation::get_maintenance_window_execution_task::GetMaintenanceWindowExecutionTaskOutput {
        crate::operation::get_maintenance_window_execution_task::GetMaintenanceWindowExecutionTaskOutput {
            window_execution_id: self.window_execution_id,
            task_execution_id: self.task_execution_id,
            task_arn: self.task_arn,
            service_role: self.service_role,
            r#type: self.r#type,
            task_parameters: self.task_parameters,
            priority: self.priority.unwrap_or_default(),
            max_concurrency: self.max_concurrency,
            max_errors: self.max_errors,
            status: self.status,
            status_details: self.status_details,
            start_time: self.start_time,
            end_time: self.end_time,
            alarm_configuration: self.alarm_configuration,
            triggered_alarms: self.triggered_alarms,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetMaintenanceWindowExecutionTaskOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetMaintenanceWindowExecutionTaskOutputBuilder");
        formatter.field("window_execution_id", &self.window_execution_id);
        formatter.field("task_execution_id", &self.task_execution_id);
        formatter.field("task_arn", &self.task_arn);
        formatter.field("service_role", &self.service_role);
        formatter.field("r#type", &self.r#type);
        formatter.field("task_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("priority", &self.priority);
        formatter.field("max_concurrency", &self.max_concurrency);
        formatter.field("max_errors", &self.max_errors);
        formatter.field("status", &self.status);
        formatter.field("status_details", &self.status_details);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("alarm_configuration", &self.alarm_configuration);
        formatter.field("triggered_alarms", &self.triggered_alarms);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
