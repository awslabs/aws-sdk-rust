// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateMaintenanceWindowTaskOutput {
    /// <p>The ID of the maintenance window that was updated.</p>
    #[doc(hidden)]
    pub window_id: std::option::Option<std::string::String>,
    /// <p>The task ID of the maintenance window that was updated.</p>
    #[doc(hidden)]
    pub window_task_id: std::option::Option<std::string::String>,
    /// <p>The updated target values.</p>
    #[doc(hidden)]
    pub targets: std::option::Option<std::vec::Vec<crate::types::Target>>,
    /// <p>The updated task ARN value.</p>
    #[doc(hidden)]
    pub task_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
    #[doc(hidden)]
    pub service_role_arn: std::option::Option<std::string::String>,
    /// <p>The updated parameter values.</p> <note>
    /// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub task_parameters: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::MaintenanceWindowTaskParameterValueExpression,
        >,
    >,
    /// <p>The updated parameter values.</p>
    #[doc(hidden)]
    pub task_invocation_parameters:
        std::option::Option<crate::types::MaintenanceWindowTaskInvocationParameters>,
    /// <p>The updated priority value.</p>
    #[doc(hidden)]
    pub priority: i32,
    /// <p>The updated <code>MaxConcurrency</code> value.</p>
    #[doc(hidden)]
    pub max_concurrency: std::option::Option<std::string::String>,
    /// <p>The updated <code>MaxErrors</code> value.</p>
    #[doc(hidden)]
    pub max_errors: std::option::Option<std::string::String>,
    /// <p>The updated logging information in Amazon S3.</p> <note>
    /// <p> <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub logging_info: std::option::Option<crate::types::LoggingInfo>,
    /// <p>The updated task name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The updated task description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The specification for whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. </p>
    #[doc(hidden)]
    pub cutoff_behavior: std::option::Option<crate::types::MaintenanceWindowTaskCutoffBehavior>,
    /// <p>The details for the CloudWatch alarm you applied to your maintenance window task.</p>
    #[doc(hidden)]
    pub alarm_configuration: std::option::Option<crate::types::AlarmConfiguration>,
    _request_id: Option<String>,
}
impl UpdateMaintenanceWindowTaskOutput {
    /// <p>The ID of the maintenance window that was updated.</p>
    pub fn window_id(&self) -> std::option::Option<&str> {
        self.window_id.as_deref()
    }
    /// <p>The task ID of the maintenance window that was updated.</p>
    pub fn window_task_id(&self) -> std::option::Option<&str> {
        self.window_task_id.as_deref()
    }
    /// <p>The updated target values.</p>
    pub fn targets(&self) -> std::option::Option<&[crate::types::Target]> {
        self.targets.as_deref()
    }
    /// <p>The updated task ARN value.</p>
    pub fn task_arn(&self) -> std::option::Option<&str> {
        self.task_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
    pub fn service_role_arn(&self) -> std::option::Option<&str> {
        self.service_role_arn.as_deref()
    }
    /// <p>The updated parameter values.</p> <note>
    /// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    pub fn task_parameters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            crate::types::MaintenanceWindowTaskParameterValueExpression,
        >,
    > {
        self.task_parameters.as_ref()
    }
    /// <p>The updated parameter values.</p>
    pub fn task_invocation_parameters(
        &self,
    ) -> std::option::Option<&crate::types::MaintenanceWindowTaskInvocationParameters> {
        self.task_invocation_parameters.as_ref()
    }
    /// <p>The updated priority value.</p>
    pub fn priority(&self) -> i32 {
        self.priority
    }
    /// <p>The updated <code>MaxConcurrency</code> value.</p>
    pub fn max_concurrency(&self) -> std::option::Option<&str> {
        self.max_concurrency.as_deref()
    }
    /// <p>The updated <code>MaxErrors</code> value.</p>
    pub fn max_errors(&self) -> std::option::Option<&str> {
        self.max_errors.as_deref()
    }
    /// <p>The updated logging information in Amazon S3.</p> <note>
    /// <p> <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    pub fn logging_info(&self) -> std::option::Option<&crate::types::LoggingInfo> {
        self.logging_info.as_ref()
    }
    /// <p>The updated task name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated task description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The specification for whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. </p>
    pub fn cutoff_behavior(
        &self,
    ) -> std::option::Option<&crate::types::MaintenanceWindowTaskCutoffBehavior> {
        self.cutoff_behavior.as_ref()
    }
    /// <p>The details for the CloudWatch alarm you applied to your maintenance window task.</p>
    pub fn alarm_configuration(&self) -> std::option::Option<&crate::types::AlarmConfiguration> {
        self.alarm_configuration.as_ref()
    }
}
impl std::fmt::Debug for UpdateMaintenanceWindowTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateMaintenanceWindowTaskOutput");
        formatter.field("window_id", &self.window_id);
        formatter.field("window_task_id", &self.window_task_id);
        formatter.field("targets", &self.targets);
        formatter.field("task_arn", &self.task_arn);
        formatter.field("service_role_arn", &self.service_role_arn);
        formatter.field("task_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "task_invocation_parameters",
            &self.task_invocation_parameters,
        );
        formatter.field("priority", &self.priority);
        formatter.field("max_concurrency", &self.max_concurrency);
        formatter.field("max_errors", &self.max_errors);
        formatter.field("logging_info", &self.logging_info);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("cutoff_behavior", &self.cutoff_behavior);
        formatter.field("alarm_configuration", &self.alarm_configuration);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for UpdateMaintenanceWindowTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateMaintenanceWindowTaskOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMaintenanceWindowTaskOutput`](crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskOutput).
    pub fn builder() -> crate::operation::update_maintenance_window_task::builders::UpdateMaintenanceWindowTaskOutputBuilder{
        crate::operation::update_maintenance_window_task::builders::UpdateMaintenanceWindowTaskOutputBuilder::default()
    }
}

/// A builder for [`UpdateMaintenanceWindowTaskOutput`](crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateMaintenanceWindowTaskOutputBuilder {
    pub(crate) window_id: std::option::Option<std::string::String>,
    pub(crate) window_task_id: std::option::Option<std::string::String>,
    pub(crate) targets: std::option::Option<std::vec::Vec<crate::types::Target>>,
    pub(crate) task_arn: std::option::Option<std::string::String>,
    pub(crate) service_role_arn: std::option::Option<std::string::String>,
    pub(crate) task_parameters: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            crate::types::MaintenanceWindowTaskParameterValueExpression,
        >,
    >,
    pub(crate) task_invocation_parameters:
        std::option::Option<crate::types::MaintenanceWindowTaskInvocationParameters>,
    pub(crate) priority: std::option::Option<i32>,
    pub(crate) max_concurrency: std::option::Option<std::string::String>,
    pub(crate) max_errors: std::option::Option<std::string::String>,
    pub(crate) logging_info: std::option::Option<crate::types::LoggingInfo>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) cutoff_behavior:
        std::option::Option<crate::types::MaintenanceWindowTaskCutoffBehavior>,
    pub(crate) alarm_configuration: std::option::Option<crate::types::AlarmConfiguration>,
    _request_id: Option<String>,
}
impl UpdateMaintenanceWindowTaskOutputBuilder {
    /// <p>The ID of the maintenance window that was updated.</p>
    pub fn window_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_id = Some(input.into());
        self
    }
    /// <p>The ID of the maintenance window that was updated.</p>
    pub fn set_window_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.window_id = input;
        self
    }
    /// <p>The task ID of the maintenance window that was updated.</p>
    pub fn window_task_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_task_id = Some(input.into());
        self
    }
    /// <p>The task ID of the maintenance window that was updated.</p>
    pub fn set_window_task_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.window_task_id = input;
        self
    }
    /// Appends an item to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The updated target values.</p>
    pub fn targets(mut self, input: crate::types::Target) -> Self {
        let mut v = self.targets.unwrap_or_default();
        v.push(input);
        self.targets = Some(v);
        self
    }
    /// <p>The updated target values.</p>
    pub fn set_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Target>>,
    ) -> Self {
        self.targets = input;
        self
    }
    /// <p>The updated task ARN value.</p>
    pub fn task_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_arn = Some(input.into());
        self
    }
    /// <p>The updated task ARN value.</p>
    pub fn set_task_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
    pub fn service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
    pub fn set_service_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role_arn = input;
        self
    }
    /// Adds a key-value pair to `task_parameters`.
    ///
    /// To override the contents of this collection use [`set_task_parameters`](Self::set_task_parameters).
    ///
    /// <p>The updated parameter values.</p> <note>
    /// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    pub fn task_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::MaintenanceWindowTaskParameterValueExpression,
    ) -> Self {
        let mut hash_map = self.task_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.task_parameters = Some(hash_map);
        self
    }
    /// <p>The updated parameter values.</p> <note>
    /// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    pub fn set_task_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::MaintenanceWindowTaskParameterValueExpression,
            >,
        >,
    ) -> Self {
        self.task_parameters = input;
        self
    }
    /// <p>The updated parameter values.</p>
    pub fn task_invocation_parameters(
        mut self,
        input: crate::types::MaintenanceWindowTaskInvocationParameters,
    ) -> Self {
        self.task_invocation_parameters = Some(input);
        self
    }
    /// <p>The updated parameter values.</p>
    pub fn set_task_invocation_parameters(
        mut self,
        input: std::option::Option<crate::types::MaintenanceWindowTaskInvocationParameters>,
    ) -> Self {
        self.task_invocation_parameters = input;
        self
    }
    /// <p>The updated priority value.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// <p>The updated priority value.</p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The updated <code>MaxConcurrency</code> value.</p>
    pub fn max_concurrency(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_concurrency = Some(input.into());
        self
    }
    /// <p>The updated <code>MaxConcurrency</code> value.</p>
    pub fn set_max_concurrency(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_concurrency = input;
        self
    }
    /// <p>The updated <code>MaxErrors</code> value.</p>
    pub fn max_errors(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_errors = Some(input.into());
        self
    }
    /// <p>The updated <code>MaxErrors</code> value.</p>
    pub fn set_max_errors(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_errors = input;
        self
    }
    /// <p>The updated logging information in Amazon S3.</p> <note>
    /// <p> <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    pub fn logging_info(mut self, input: crate::types::LoggingInfo) -> Self {
        self.logging_info = Some(input);
        self
    }
    /// <p>The updated logging information in Amazon S3.</p> <note>
    /// <p> <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
    /// </note>
    pub fn set_logging_info(
        mut self,
        input: std::option::Option<crate::types::LoggingInfo>,
    ) -> Self {
        self.logging_info = input;
        self
    }
    /// <p>The updated task name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The updated task name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The updated task description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The updated task description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The specification for whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. </p>
    pub fn cutoff_behavior(
        mut self,
        input: crate::types::MaintenanceWindowTaskCutoffBehavior,
    ) -> Self {
        self.cutoff_behavior = Some(input);
        self
    }
    /// <p>The specification for whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. </p>
    pub fn set_cutoff_behavior(
        mut self,
        input: std::option::Option<crate::types::MaintenanceWindowTaskCutoffBehavior>,
    ) -> Self {
        self.cutoff_behavior = input;
        self
    }
    /// <p>The details for the CloudWatch alarm you applied to your maintenance window task.</p>
    pub fn alarm_configuration(mut self, input: crate::types::AlarmConfiguration) -> Self {
        self.alarm_configuration = Some(input);
        self
    }
    /// <p>The details for the CloudWatch alarm you applied to your maintenance window task.</p>
    pub fn set_alarm_configuration(
        mut self,
        input: std::option::Option<crate::types::AlarmConfiguration>,
    ) -> Self {
        self.alarm_configuration = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateMaintenanceWindowTaskOutput`](crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskOutput).
    pub fn build(
        self,
    ) -> crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskOutput {
        crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskOutput {
            window_id: self.window_id,
            window_task_id: self.window_task_id,
            targets: self.targets,
            task_arn: self.task_arn,
            service_role_arn: self.service_role_arn,
            task_parameters: self.task_parameters,
            task_invocation_parameters: self.task_invocation_parameters,
            priority: self.priority.unwrap_or_default(),
            max_concurrency: self.max_concurrency,
            max_errors: self.max_errors,
            logging_info: self.logging_info,
            name: self.name,
            description: self.description,
            cutoff_behavior: self.cutoff_behavior,
            alarm_configuration: self.alarm_configuration,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for UpdateMaintenanceWindowTaskOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateMaintenanceWindowTaskOutputBuilder");
        formatter.field("window_id", &self.window_id);
        formatter.field("window_task_id", &self.window_task_id);
        formatter.field("targets", &self.targets);
        formatter.field("task_arn", &self.task_arn);
        formatter.field("service_role_arn", &self.service_role_arn);
        formatter.field("task_parameters", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "task_invocation_parameters",
            &self.task_invocation_parameters,
        );
        formatter.field("priority", &self.priority);
        formatter.field("max_concurrency", &self.max_concurrency);
        formatter.field("max_errors", &self.max_errors);
        formatter.field("logging_info", &self.logging_info);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("cutoff_behavior", &self.cutoff_behavior);
        formatter.field("alarm_configuration", &self.alarm_configuration);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
