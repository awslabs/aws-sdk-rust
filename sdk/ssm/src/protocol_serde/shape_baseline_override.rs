// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_baseline_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BaselineOverride,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.operating_system {
        object.key("OperatingSystem").string(var_1.as_str());
    }
    if let Some(var_2) = &input.global_filters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("GlobalFilters").start_object();
        crate::protocol_serde::shape_patch_filter_group::ser_patch_filter_group(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.approval_rules {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ApprovalRules").start_object();
        crate::protocol_serde::shape_patch_rule_group::ser_patch_rule_group(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.approved_patches {
        let mut array_7 = object.key("ApprovedPatches").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_9.as_str());
    }
    if let Some(var_10) = &input.rejected_patches {
        let mut array_11 = object.key("RejectedPatches").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_13.as_str());
    }
    if input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(input.approved_patches_enable_non_security);
    }
    if let Some(var_14) = &input.sources {
        let mut array_15 = object.key("Sources").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_patch_source::ser_patch_source(
                    &mut object_17,
                    item_16,
                )?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
