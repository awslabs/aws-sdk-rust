// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_maintenance_window::UpdateMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.window_id {
        object.key("WindowId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("Description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.start_date {
        object.key("StartDate").string(var_4.as_str());
    }
    if let Some(var_5) = &input.end_date {
        object.key("EndDate").string(var_5.as_str());
    }
    if let Some(var_6) = &input.schedule {
        object.key("Schedule").string(var_6.as_str());
    }
    if let Some(var_7) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_7.as_str());
    }
    if let Some(var_8) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.duration {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.cutoff {
        object.key("Cutoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.allow_unassociated_targets {
        object.key("AllowUnassociatedTargets").boolean(*var_11);
    }
    if let Some(var_12) = &input.enabled {
        object.key("Enabled").boolean(*var_12);
    }
    if let Some(var_13) = &input.replace {
        object.key("Replace").boolean(*var_13);
    }
    Ok(())
}
