// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_register_task_with_maintenance_window_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::register_task_with_maintenance_window::RegisterTaskWithMaintenanceWindowInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.window_id {
        object.key("WindowId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.targets {
        let mut array_3 = object.key("Targets").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_target::ser_target(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.task_arn {
        object.key("TaskArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.task_type {
        object.key("TaskType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.task_parameters {
        #[allow(unused_mut)]
        let mut object_10 = object.key("TaskParameters").start_object();
        for (key_11, value_12) in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_13 = object_10.key(key_11.as_str()).start_object();
                crate::protocol_serde::shape_maintenance_window_task_parameter_value_expression::ser_maintenance_window_task_parameter_value_expression(&mut object_13, value_12)?;
                object_13.finish();
            }
        }
        object_10.finish();
    }
    if let Some(var_14) = &input.task_invocation_parameters {
        #[allow(unused_mut)]
        let mut object_15 = object.key("TaskInvocationParameters").start_object();
        crate::protocol_serde::shape_maintenance_window_task_invocation_parameters::ser_maintenance_window_task_invocation_parameters(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_17.as_str());
    }
    if let Some(var_18) = &input.max_errors {
        object.key("MaxErrors").string(var_18.as_str());
    }
    if let Some(var_19) = &input.logging_info {
        #[allow(unused_mut)]
        let mut object_20 = object.key("LoggingInfo").start_object();
        crate::protocol_serde::shape_logging_info::ser_logging_info(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.name {
        object.key("Name").string(var_21.as_str());
    }
    if let Some(var_22) = &input.description {
        object.key("Description").string(var_22.as_str());
    }
    if let Some(var_23) = &input.client_token {
        object.key("ClientToken").string(var_23.as_str());
    }
    if let Some(var_24) = &input.cutoff_behavior {
        object.key("CutoffBehavior").string(var_24.as_str());
    }
    if let Some(var_25) = &input.alarm_configuration {
        #[allow(unused_mut)]
        let mut object_26 = object.key("AlarmConfiguration").start_object();
        crate::protocol_serde::shape_alarm_configuration::ser_alarm_configuration(&mut object_26, var_25)?;
        object_26.finish();
    }
    Ok(())
}
