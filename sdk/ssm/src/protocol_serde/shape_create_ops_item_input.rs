// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_ops_item_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_ops_item::CreateOpsItemInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.ops_item_type {
        object.key("OpsItemType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.operational_data {
        #[allow(unused_mut)]
        let mut object_4 = object.key("OperationalData").start_object();
        for (key_5, value_6) in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_7 = object_4.key(key_5.as_str()).start_object();
                crate::protocol_serde::shape_ops_item_data_value::ser_ops_item_data_value(&mut object_7, value_6)?;
                object_7.finish();
            }
        }
        object_4.finish();
    }
    if let Some(var_8) = &input.notifications {
        let mut array_9 = object.key("Notifications").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_ops_item_notification::ser_ops_item_notification(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.related_ops_items {
        let mut array_14 = object.key("RelatedOpsItems").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_related_ops_item::ser_related_ops_item(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.source {
        object.key("Source").string(var_17.as_str());
    }
    if let Some(var_18) = &input.title {
        object.key("Title").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        let mut array_20 = object.key("Tags").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.category {
        object.key("Category").string(var_23.as_str());
    }
    if let Some(var_24) = &input.severity {
        object.key("Severity").string(var_24.as_str());
    }
    if let Some(var_25) = &input.actual_start_time {
        object
            .key("ActualStartTime")
            .date_time(var_25, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_26) = &input.actual_end_time {
        object
            .key("ActualEndTime")
            .date_time(var_26, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_27) = &input.planned_start_time {
        object
            .key("PlannedStartTime")
            .date_time(var_27, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_28) = &input.planned_end_time {
        object
            .key("PlannedEndTime")
            .date_time(var_28, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_29) = &input.account_id {
        object.key("AccountId").string(var_29.as_str());
    }
    Ok(())
}
