// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_document::CreateDocumentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.content {
        object.key("Content").string(var_1.as_str());
    }
    if let Some(var_2) = &input.requires {
        let mut array_3 = object.key("Requires").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_document_requires::ser_document_requires(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.attachments {
        let mut array_7 = object.key("Attachments").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_attachments_source::ser_attachments_source(
                    &mut object_9,
                    item_8,
                )?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.name {
        object.key("Name").string(var_10.as_str());
    }
    if let Some(var_11) = &input.display_name {
        object.key("DisplayName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.version_name {
        object.key("VersionName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.document_type {
        object.key("DocumentType").string(var_13.as_str());
    }
    if let Some(var_14) = &input.document_format {
        object.key("DocumentFormat").string(var_14.as_str());
    }
    if let Some(var_15) = &input.target_type {
        object.key("TargetType").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}
