// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_command_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::send_command::SendCommandInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.instance_ids {
        let mut array_2 = object.key("InstanceIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.targets {
        let mut array_5 = object.key("Targets").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_target::ser_target(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.document_name {
        object.key("DocumentName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.document_version {
        object.key("DocumentVersion").string(var_9.as_str());
    }
    if let Some(var_10) = &input.document_hash {
        object.key("DocumentHash").string(var_10.as_str());
    }
    if let Some(var_11) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.comment {
        object.key("Comment").string(var_13.as_str());
    }
    if let Some(var_14) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Parameters").start_object();
        for (key_16, value_17) in var_14 {
            {
                let mut array_18 = object_15.key(key_16.as_str()).start_array();
                for item_19 in value_17 {
                    {
                        array_18.value().string(item_19.as_str());
                    }
                }
                array_18.finish();
            }
        }
        object_15.finish();
    }
    if let Some(var_20) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_20.as_str());
    }
    if let Some(var_21) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_21.as_str());
    }
    if let Some(var_22) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_22.as_str());
    }
    if let Some(var_23) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_23.as_str());
    }
    if let Some(var_24) = &input.max_errors {
        object.key("MaxErrors").string(var_24.as_str());
    }
    if let Some(var_25) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_25.as_str());
    }
    if let Some(var_26) = &input.notification_config {
        #[allow(unused_mut)]
        let mut object_27 = object.key("NotificationConfig").start_object();
        crate::protocol_serde::shape_notification_config::ser_notification_config(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.cloud_watch_output_config {
        #[allow(unused_mut)]
        let mut object_29 = object.key("CloudWatchOutputConfig").start_object();
        crate::protocol_serde::shape_cloud_watch_output_config::ser_cloud_watch_output_config(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.alarm_configuration {
        #[allow(unused_mut)]
        let mut object_31 = object.key("AlarmConfiguration").start_object();
        crate::protocol_serde::shape_alarm_configuration::ser_alarm_configuration(&mut object_31, var_30)?;
        object_31.finish();
    }
    Ok(())
}
