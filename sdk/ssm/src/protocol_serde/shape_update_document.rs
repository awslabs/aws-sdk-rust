// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_document_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::update_document::UpdateDocumentOutput, crate::operation::update_document::UpdateDocumentError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::update_document::UpdateDocumentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DocumentVersionLimitExceeded" => crate::operation::update_document::UpdateDocumentError::DocumentVersionLimitExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DocumentVersionLimitExceededBuilder::default();
                output =
                    crate::protocol_serde::shape_document_version_limit_exceeded::de_document_version_limit_exceeded_json_err(_response_body, output)
                        .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DuplicateDocumentContent" => crate::operation::update_document::UpdateDocumentError::DuplicateDocumentContent({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DuplicateDocumentContentBuilder::default();
                output = crate::protocol_serde::shape_duplicate_document_content::de_duplicate_document_content_json_err(_response_body, output)
                    .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DuplicateDocumentVersionName" => crate::operation::update_document::UpdateDocumentError::DuplicateDocumentVersionName({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DuplicateDocumentVersionNameBuilder::default();
                output =
                    crate::protocol_serde::shape_duplicate_document_version_name::de_duplicate_document_version_name_json_err(_response_body, output)
                        .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerError" => crate::operation::update_document::UpdateDocumentError::InternalServerError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerErrorBuilder::default();
                output = crate::protocol_serde::shape_internal_server_error::de_internal_server_error_json_err(_response_body, output)
                    .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDocument" => crate::operation::update_document::UpdateDocumentError::InvalidDocument({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDocumentBuilder::default();
                output = crate::protocol_serde::shape_invalid_document::de_invalid_document_json_err(_response_body, output)
                    .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDocumentContent" => crate::operation::update_document::UpdateDocumentError::InvalidDocumentContent({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDocumentContentBuilder::default();
                output = crate::protocol_serde::shape_invalid_document_content::de_invalid_document_content_json_err(_response_body, output)
                    .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDocumentOperation" => crate::operation::update_document::UpdateDocumentError::InvalidDocumentOperation({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDocumentOperationBuilder::default();
                output = crate::protocol_serde::shape_invalid_document_operation::de_invalid_document_operation_json_err(_response_body, output)
                    .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDocumentSchemaVersion" => crate::operation::update_document::UpdateDocumentError::InvalidDocumentSchemaVersion({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDocumentSchemaVersionBuilder::default();
                output =
                    crate::protocol_serde::shape_invalid_document_schema_version::de_invalid_document_schema_version_json_err(_response_body, output)
                        .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDocumentVersion" => crate::operation::update_document::UpdateDocumentError::InvalidDocumentVersion({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDocumentVersionBuilder::default();
                output = crate::protocol_serde::shape_invalid_document_version::de_invalid_document_version_json_err(_response_body, output)
                    .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "MaxDocumentSizeExceeded" => crate::operation::update_document::UpdateDocumentError::MaxDocumentSizeExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::MaxDocumentSizeExceededBuilder::default();
                output = crate::protocol_serde::shape_max_document_size_exceeded::de_max_document_size_exceeded_json_err(_response_body, output)
                    .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::update_document::UpdateDocumentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_document_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::update_document::UpdateDocumentOutput, crate::operation::update_document::UpdateDocumentError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::update_document::builders::UpdateDocumentOutputBuilder::default();
        output = crate::protocol_serde::shape_update_document::de_update_document(_response_body, output)
            .map_err(crate::operation::update_document::UpdateDocumentError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_update_document_input(
    input: &crate::operation::update_document::UpdateDocumentInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_update_document_input::ser_update_document_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_update_document(
    value: &[u8],
    mut builder: crate::operation::update_document::builders::UpdateDocumentOutputBuilder,
) -> Result<crate::operation::update_document::builders::UpdateDocumentOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "DocumentDescription" => {
                    builder = builder.set_document_description(crate::protocol_serde::shape_document_description::de_document_description(tokens)?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
