// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_maintenance_window_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::describe_maintenance_window_schedule::DescribeMaintenanceWindowScheduleInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.window_id {
        object.key("WindowId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.targets {
        let mut array_3 = object.key("Targets").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_target::ser_target(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.resource_type {
        object.key("ResourceType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.filters {
        let mut array_8 = object.key("Filters").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_patch_orchestrator_filter::ser_patch_orchestrator_filter(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.next_token {
        object.key("NextToken").string(var_12.as_str());
    }
    Ok(())
}
