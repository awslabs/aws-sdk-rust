// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_association_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_association::UpdateAssociationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.association_id {
        object.key("AssociationId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Parameters").start_object();
        for (key_4, value_5) in var_2 {
            {
                let mut array_6 = object_3.key(key_4.as_str()).start_array();
                for item_7 in value_5 {
                    {
                        array_6.value().string(item_7.as_str());
                    }
                }
                array_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_8) = &input.document_version {
        object.key("DocumentVersion").string(var_8.as_str());
    }
    if let Some(var_9) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_9.as_str());
    }
    if let Some(var_10) = &input.output_location {
        #[allow(unused_mut)]
        let mut object_11 = object.key("OutputLocation").start_object();
        crate::protocol_serde::shape_instance_association_output_location::ser_instance_association_output_location(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.name {
        object.key("Name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.targets {
        let mut array_14 = object.key("Targets").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_target::ser_target(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.association_name {
        object.key("AssociationName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.association_version {
        object.key("AssociationVersion").string(var_18.as_str());
    }
    if let Some(var_19) = &input.automation_target_parameter_name {
        object.key("AutomationTargetParameterName").string(var_19.as_str());
    }
    if let Some(var_20) = &input.max_errors {
        object.key("MaxErrors").string(var_20.as_str());
    }
    if let Some(var_21) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_21.as_str());
    }
    if let Some(var_22) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_22.as_str());
    }
    if let Some(var_23) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_23.as_str());
    }
    if let Some(var_24) = &input.apply_only_at_cron_interval {
        object.key("ApplyOnlyAtCronInterval").boolean(*var_24);
    }
    if let Some(var_25) = &input.calendar_names {
        let mut array_26 = object.key("CalendarNames").start_array();
        for item_27 in var_25 {
            {
                array_26.value().string(item_27.as_str());
            }
        }
        array_26.finish();
    }
    if let Some(var_28) = &input.target_locations {
        let mut array_29 = object.key("TargetLocations").start_array();
        for item_30 in var_28 {
            {
                #[allow(unused_mut)]
                let mut object_31 = array_29.value().start_object();
                crate::protocol_serde::shape_target_location::ser_target_location(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    if let Some(var_33) = &input.target_maps {
        let mut array_34 = object.key("TargetMaps").start_array();
        for item_35 in var_33 {
            {
                #[allow(unused_mut)]
                let mut object_36 = array_34.value().start_object();
                for (key_37, value_38) in item_35 {
                    {
                        let mut array_39 = object_36.key(key_37.as_str()).start_array();
                        for item_40 in value_38 {
                            {
                                array_39.value().string(item_40.as_str());
                            }
                        }
                        array_39.finish();
                    }
                }
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_41) = &input.alarm_configuration {
        #[allow(unused_mut)]
        let mut object_42 = object.key("AlarmConfiguration").start_object();
        crate::protocol_serde::shape_alarm_configuration::ser_alarm_configuration(&mut object_42, var_41)?;
        object_42.finish();
    }
    Ok(())
}
