// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_association_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::update_association::UpdateAssociationOutput, crate::operation::update_association::UpdateAssociationError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::update_association::UpdateAssociationError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AssociationDoesNotExist" => crate::operation::update_association::UpdateAssociationError::AssociationDoesNotExist({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AssociationDoesNotExistBuilder::default();
                output = crate::protocol_serde::shape_association_does_not_exist::de_association_does_not_exist_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "AssociationVersionLimitExceeded" => crate::operation::update_association::UpdateAssociationError::AssociationVersionLimitExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AssociationVersionLimitExceededBuilder::default();
                output = crate::protocol_serde::shape_association_version_limit_exceeded::de_association_version_limit_exceeded_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerError" => crate::operation::update_association::UpdateAssociationError::InternalServerError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerErrorBuilder::default();
                output = crate::protocol_serde::shape_internal_server_error::de_internal_server_error_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidAssociationVersion" => crate::operation::update_association::UpdateAssociationError::InvalidAssociationVersion({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidAssociationVersionBuilder::default();
                output = crate::protocol_serde::shape_invalid_association_version::de_invalid_association_version_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDocument" => crate::operation::update_association::UpdateAssociationError::InvalidDocument({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDocumentBuilder::default();
                output = crate::protocol_serde::shape_invalid_document::de_invalid_document_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDocumentVersion" => crate::operation::update_association::UpdateAssociationError::InvalidDocumentVersion({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDocumentVersionBuilder::default();
                output = crate::protocol_serde::shape_invalid_document_version::de_invalid_document_version_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidOutputLocation" => crate::operation::update_association::UpdateAssociationError::InvalidOutputLocation({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidOutputLocationBuilder::default();
                output = crate::protocol_serde::shape_invalid_output_location::de_invalid_output_location_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidParameters" => crate::operation::update_association::UpdateAssociationError::InvalidParameters({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidParametersBuilder::default();
                output = crate::protocol_serde::shape_invalid_parameters::de_invalid_parameters_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidSchedule" => crate::operation::update_association::UpdateAssociationError::InvalidSchedule({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidScheduleBuilder::default();
                output = crate::protocol_serde::shape_invalid_schedule::de_invalid_schedule_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidTarget" => crate::operation::update_association::UpdateAssociationError::InvalidTarget({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidTargetBuilder::default();
                output = crate::protocol_serde::shape_invalid_target::de_invalid_target_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidTargetMaps" => crate::operation::update_association::UpdateAssociationError::InvalidTargetMaps({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidTargetMapsBuilder::default();
                output = crate::protocol_serde::shape_invalid_target_maps::de_invalid_target_maps_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidUpdate" => crate::operation::update_association::UpdateAssociationError::InvalidUpdate({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidUpdateBuilder::default();
                output = crate::protocol_serde::shape_invalid_update::de_invalid_update_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TooManyUpdates" => crate::operation::update_association::UpdateAssociationError::TooManyUpdates({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TooManyUpdatesBuilder::default();
                output = crate::protocol_serde::shape_too_many_updates::de_too_many_updates_json_err(_response_body, output)
                    .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::update_association::UpdateAssociationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_association_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::update_association::UpdateAssociationOutput, crate::operation::update_association::UpdateAssociationError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::update_association::builders::UpdateAssociationOutputBuilder::default();
        output = crate::protocol_serde::shape_update_association::de_update_association(_response_body, output)
            .map_err(crate::operation::update_association::UpdateAssociationError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_update_association_input(
    input: &crate::operation::update_association::UpdateAssociationInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_update_association_input::ser_update_association_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_update_association(
    value: &[u8],
    mut builder: crate::operation::update_association::builders::UpdateAssociationOutputBuilder,
) -> Result<crate::operation::update_association::builders::UpdateAssociationOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "AssociationDescription" => {
                    builder = builder
                        .set_association_description(crate::protocol_serde::shape_association_description::de_association_description(tokens)?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
