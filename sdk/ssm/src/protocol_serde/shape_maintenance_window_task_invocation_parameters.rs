// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_maintenance_window_task_invocation_parameters<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::MaintenanceWindowTaskInvocationParameters>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MaintenanceWindowTaskInvocationParametersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "RunCommand" => {
                                builder = builder.set_run_command(
                                    crate::protocol_serde::shape_maintenance_window_run_command_parameters::de_maintenance_window_run_command_parameters(tokens)?
                                );
                            }
                            "Automation" => {
                                builder = builder.set_automation(
                                    crate::protocol_serde::shape_maintenance_window_automation_parameters::de_maintenance_window_automation_parameters(tokens)?
                                );
                            }
                            "StepFunctions" => {
                                builder = builder.set_step_functions(
                                    crate::protocol_serde::shape_maintenance_window_step_functions_parameters::de_maintenance_window_step_functions_parameters(tokens)?
                                );
                            }
                            "Lambda" => {
                                builder = builder.set_lambda(
                                    crate::protocol_serde::shape_maintenance_window_lambda_parameters::de_maintenance_window_lambda_parameters(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_maintenance_window_task_invocation_parameters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MaintenanceWindowTaskInvocationParameters,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.run_command {
        #[allow(unused_mut)]
        let mut object_2 = object.key("RunCommand").start_object();
        crate::protocol_serde::shape_maintenance_window_run_command_parameters::ser_maintenance_window_run_command_parameters(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.automation {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Automation").start_object();
        crate::protocol_serde::shape_maintenance_window_automation_parameters::ser_maintenance_window_automation_parameters(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.step_functions {
        #[allow(unused_mut)]
        let mut object_6 = object.key("StepFunctions").start_object();
        crate::protocol_serde::shape_maintenance_window_step_functions_parameters::ser_maintenance_window_step_functions_parameters(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.lambda {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Lambda").start_object();
        crate::protocol_serde::shape_maintenance_window_lambda_parameters::ser_maintenance_window_lambda_parameters(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
