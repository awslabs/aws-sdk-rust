// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_maintenance_window_run_command_parameters<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::MaintenanceWindowRunCommandParameters>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MaintenanceWindowRunCommandParametersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Comment" => {
                            builder = builder.set_comment(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CloudWatchOutputConfig" => {
                            builder = builder.set_cloud_watch_output_config(
                                crate::protocol_serde::shape_cloud_watch_output_config::de_cloud_watch_output_config(tokens)?,
                            );
                        }
                        "DocumentHash" => {
                            builder = builder.set_document_hash(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DocumentHashType" => {
                            builder = builder.set_document_hash_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DocumentHashType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "DocumentVersion" => {
                            builder = builder.set_document_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "NotificationConfig" => {
                            builder =
                                builder.set_notification_config(crate::protocol_serde::shape_notification_config::de_notification_config(tokens)?);
                        }
                        "OutputS3BucketName" => {
                            builder = builder.set_output_s3_bucket_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "OutputS3KeyPrefix" => {
                            builder = builder.set_output_s3_key_prefix(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Parameters" => {
                            builder = builder.set_parameters(crate::protocol_serde::shape_parameters::de_parameters(tokens)?);
                        }
                        "ServiceRoleArn" => {
                            builder = builder.set_service_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TimeoutSeconds" => {
                            builder = builder.set_timeout_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_maintenance_window_run_command_parameters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MaintenanceWindowRunCommandParameters,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.comment {
        object.key("Comment").string(var_1.as_str());
    }
    if let Some(var_2) = &input.cloud_watch_output_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("CloudWatchOutputConfig").start_object();
        crate::protocol_serde::shape_cloud_watch_output_config::ser_cloud_watch_output_config(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.document_hash {
        object.key("DocumentHash").string(var_4.as_str());
    }
    if let Some(var_5) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.document_version {
        object.key("DocumentVersion").string(var_6.as_str());
    }
    if let Some(var_7) = &input.notification_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("NotificationConfig").start_object();
        crate::protocol_serde::shape_notification_config::ser_notification_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_10.as_str());
    }
    if let Some(var_11) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Parameters").start_object();
        for (key_13, value_14) in var_11 {
            {
                let mut array_15 = object_12.key(key_13.as_str()).start_array();
                for item_16 in value_14 {
                    {
                        array_15.value().string(item_16.as_str());
                    }
                }
                array_15.finish();
            }
        }
        object_12.finish();
    }
    if let Some(var_17) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_17.as_str());
    }
    if let Some(var_18) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    Ok(())
}
