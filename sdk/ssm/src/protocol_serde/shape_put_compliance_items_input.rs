// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_compliance_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_compliance_items::PutComplianceItemsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.resource_id {
        object.key("ResourceId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_type {
        object.key("ResourceType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.compliance_type {
        object.key("ComplianceType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.execution_summary {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ExecutionSummary").start_object();
        crate::protocol_serde::shape_compliance_execution_summary::ser_compliance_execution_summary(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.items {
        let mut array_7 = object.key("Items").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_compliance_item_entry::ser_compliance_item_entry(
                    &mut object_9,
                    item_8,
                )?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.item_content_hash {
        object.key("ItemContentHash").string(var_10.as_str());
    }
    if let Some(var_11) = &input.upload_type {
        object.key("UploadType").string(var_11.as_str());
    }
    Ok(())
}
