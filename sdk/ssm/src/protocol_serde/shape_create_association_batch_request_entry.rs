// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_association_batch_request_entry(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateAssociationBatchRequestEntry,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("Name").string(input.name.as_str());
    }
    if let Some(var_1) = &input.instance_id {
        object.key("InstanceId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Parameters").start_object();
        for (key_4, value_5) in var_2 {
            {
                let mut array_6 = object_3.key(key_4.as_str()).start_array();
                for item_7 in value_5 {
                    {
                        array_6.value().string(item_7.as_str());
                    }
                }
                array_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_8) = &input.automation_target_parameter_name {
        object.key("AutomationTargetParameterName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.document_version {
        object.key("DocumentVersion").string(var_9.as_str());
    }
    if let Some(var_10) = &input.targets {
        let mut array_11 = object.key("Targets").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_target::ser_target(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_14.as_str());
    }
    if let Some(var_15) = &input.output_location {
        #[allow(unused_mut)]
        let mut object_16 = object.key("OutputLocation").start_object();
        crate::protocol_serde::shape_instance_association_output_location::ser_instance_association_output_location(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.association_name {
        object.key("AssociationName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.max_errors {
        object.key("MaxErrors").string(var_18.as_str());
    }
    if let Some(var_19) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_19.as_str());
    }
    if let Some(var_20) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_20.as_str());
    }
    if let Some(var_21) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_21.as_str());
    }
    if input.apply_only_at_cron_interval {
        object.key("ApplyOnlyAtCronInterval").boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_22) = &input.calendar_names {
        let mut array_23 = object.key("CalendarNames").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24.as_str());
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.target_locations {
        let mut array_26 = object.key("TargetLocations").start_array();
        for item_27 in var_25 {
            {
                #[allow(unused_mut)]
                let mut object_28 = array_26.value().start_object();
                crate::protocol_serde::shape_target_location::ser_target_location(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_29).into()),
        );
    }
    if let Some(var_30) = &input.target_maps {
        let mut array_31 = object.key("TargetMaps").start_array();
        for item_32 in var_30 {
            {
                #[allow(unused_mut)]
                let mut object_33 = array_31.value().start_object();
                for (key_34, value_35) in item_32 {
                    {
                        let mut array_36 = object_33.key(key_34.as_str()).start_array();
                        for item_37 in value_35 {
                            {
                                array_36.value().string(item_37.as_str());
                            }
                        }
                        array_36.finish();
                    }
                }
                object_33.finish();
            }
        }
        array_31.finish();
    }
    if let Some(var_38) = &input.alarm_configuration {
        #[allow(unused_mut)]
        let mut object_39 = object.key("AlarmConfiguration").start_object();
        crate::protocol_serde::shape_alarm_configuration::ser_alarm_configuration(&mut object_39, var_38)?;
        object_39.finish();
    }
    Ok(())
}

pub(crate) fn de_create_association_batch_request_entry<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CreateAssociationBatchRequestEntry>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CreateAssociationBatchRequestEntryBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Name" => {
                            builder = builder.set_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "InstanceId" => {
                            builder = builder.set_instance_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Parameters" => {
                            builder = builder.set_parameters(crate::protocol_serde::shape_parameters::de_parameters(tokens)?);
                        }
                        "AutomationTargetParameterName" => {
                            builder = builder.set_automation_target_parameter_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DocumentVersion" => {
                            builder = builder.set_document_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Targets" => {
                            builder = builder.set_targets(crate::protocol_serde::shape_targets::de_targets(tokens)?);
                        }
                        "ScheduleExpression" => {
                            builder = builder.set_schedule_expression(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "OutputLocation" => {
                            builder = builder.set_output_location(
                                crate::protocol_serde::shape_instance_association_output_location::de_instance_association_output_location(tokens)?,
                            );
                        }
                        "AssociationName" => {
                            builder = builder.set_association_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MaxErrors" => {
                            builder = builder.set_max_errors(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "MaxConcurrency" => {
                            builder = builder.set_max_concurrency(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ComplianceSeverity" => {
                            builder = builder.set_compliance_severity(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AssociationComplianceSeverity::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "SyncCompliance" => {
                            builder = builder.set_sync_compliance(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AssociationSyncCompliance::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ApplyOnlyAtCronInterval" => {
                            builder =
                                builder.set_apply_only_at_cron_interval(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "CalendarNames" => {
                            builder = builder.set_calendar_names(
                                crate::protocol_serde::shape_calendar_name_or_arn_list::de_calendar_name_or_arn_list(tokens)?,
                            );
                        }
                        "TargetLocations" => {
                            builder = builder.set_target_locations(crate::protocol_serde::shape_target_locations::de_target_locations(tokens)?);
                        }
                        "ScheduleOffset" => {
                            builder = builder.set_schedule_offset(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "TargetMaps" => {
                            builder = builder.set_target_maps(crate::protocol_serde::shape_target_maps::de_target_maps(tokens)?);
                        }
                        "AlarmConfiguration" => {
                            builder =
                                builder.set_alarm_configuration(crate::protocol_serde::shape_alarm_configuration::de_alarm_configuration(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::create_association_batch_request_entry_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
