// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_deregister_managed_instance_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::deregister_managed_instance::DeregisterManagedInstanceOutput,
    crate::operation::deregister_managed_instance::DeregisterManagedInstanceError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::deregister_managed_instance::DeregisterManagedInstanceError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::deregister_managed_instance::DeregisterManagedInstanceError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerError" => crate::operation::deregister_managed_instance::DeregisterManagedInstanceError::InternalServerError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerErrorBuilder::default();
                output = crate::protocol_serde::shape_internal_server_error::de_internal_server_error_json_err(_response_body, output)
                    .map_err(crate::operation::deregister_managed_instance::DeregisterManagedInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInstanceId" => crate::operation::deregister_managed_instance::DeregisterManagedInstanceError::InvalidInstanceId({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidInstanceIdBuilder::default();
                output = crate::protocol_serde::shape_invalid_instance_id::de_invalid_instance_id_json_err(_response_body, output)
                    .map_err(crate::operation::deregister_managed_instance::DeregisterManagedInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::deregister_managed_instance::DeregisterManagedInstanceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_deregister_managed_instance_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::deregister_managed_instance::DeregisterManagedInstanceOutput,
    crate::operation::deregister_managed_instance::DeregisterManagedInstanceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::deregister_managed_instance::builders::DeregisterManagedInstanceOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_deregister_managed_instance_input(
    input: &crate::operation::deregister_managed_instance::DeregisterManagedInstanceInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_deregister_managed_instance_input::ser_deregister_managed_instance_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
