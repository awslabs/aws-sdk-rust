// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_change_request_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_change_request_execution::StartChangeRequestExecutionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_1, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2) = &input.document_name {
        object.key("DocumentName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.document_version {
        object.key("DocumentVersion").string(var_3.as_str());
    }
    if let Some(var_4) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Parameters").start_object();
        for (key_6, value_7) in var_4 {
            {
                let mut array_8 = object_5.key(key_6.as_str()).start_array();
                for item_9 in value_7 {
                    {
                        array_8.value().string(item_9.as_str());
                    }
                }
                array_8.finish();
            }
        }
        object_5.finish();
    }
    if let Some(var_10) = &input.change_request_name {
        object.key("ChangeRequestName").string(var_10.as_str());
    }
    if let Some(var_11) = &input.client_token {
        object.key("ClientToken").string(var_11.as_str());
    }
    if input.auto_approve {
        object.key("AutoApprove").boolean(input.auto_approve);
    }
    if let Some(var_12) = &input.runbooks {
        let mut array_13 = object.key("Runbooks").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_runbook::ser_runbook(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.scheduled_end_time {
        object
            .key("ScheduledEndTime")
            .date_time(var_20, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_21) = &input.change_details {
        object.key("ChangeDetails").string(var_21.as_str());
    }
    Ok(())
}
