// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_maintenance_window_task_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskOutput,
    crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DoesNotExistException" => crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError::DoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DoesNotExistExceptionBuilder::default();
                output = crate::protocol_serde::shape_does_not_exist_exception::de_does_not_exist_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerError" => crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError::InternalServerError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerErrorBuilder::default();
                output = crate::protocol_serde::shape_internal_server_error::de_internal_server_error_json_err(_response_body, output)
                    .map_err(crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_maintenance_window_task_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskOutput,
    crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::update_maintenance_window_task::builders::UpdateMaintenanceWindowTaskOutputBuilder::default();
        output = crate::protocol_serde::shape_update_maintenance_window_task::de_update_maintenance_window_task(_response_body, output)
            .map_err(crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_update_maintenance_window_task_input(
    input: &crate::operation::update_maintenance_window_task::UpdateMaintenanceWindowTaskInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_update_maintenance_window_task_input::ser_update_maintenance_window_task_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_update_maintenance_window_task(
    value: &[u8],
    mut builder: crate::operation::update_maintenance_window_task::builders::UpdateMaintenanceWindowTaskOutputBuilder,
) -> Result<
    crate::operation::update_maintenance_window_task::builders::UpdateMaintenanceWindowTaskOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "WindowId" => {
                        builder = builder.set_window_id(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?,
                        );
                    }
                    "WindowTaskId" => {
                        builder = builder.set_window_task_id(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?,
                        );
                    }
                    "Targets" => {
                        builder = builder.set_targets(crate::protocol_serde::shape_targets::de_targets(tokens)?);
                    }
                    "TaskArn" => {
                        builder = builder.set_task_arn(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?,
                        );
                    }
                    "ServiceRoleArn" => {
                        builder = builder.set_service_role_arn(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?,
                        );
                    }
                    "TaskParameters" => {
                        builder = builder.set_task_parameters(
                            crate::protocol_serde::shape_maintenance_window_task_parameters::de_maintenance_window_task_parameters(tokens)?,
                        );
                    }
                    "TaskInvocationParameters" => {
                        builder = builder.set_task_invocation_parameters(
                            crate::protocol_serde::shape_maintenance_window_task_invocation_parameters::de_maintenance_window_task_invocation_parameters(tokens)?
                        );
                    }
                    "Priority" => {
                        builder = builder.set_priority(
                            ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                .map(i32::try_from)
                                .transpose()?,
                        );
                    }
                    "MaxConcurrency" => {
                        builder = builder.set_max_concurrency(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?,
                        );
                    }
                    "MaxErrors" => {
                        builder = builder.set_max_errors(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?,
                        );
                    }
                    "LoggingInfo" => {
                        builder = builder.set_logging_info(crate::protocol_serde::shape_logging_info::de_logging_info(tokens)?);
                    }
                    "Name" => {
                        builder = builder.set_name(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?,
                        );
                    }
                    "Description" => {
                        builder = builder.set_description(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?,
                        );
                    }
                    "CutoffBehavior" => {
                        builder = builder.set_cutoff_behavior(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| {
                                    s.to_unescaped()
                                        .map(|u| crate::types::MaintenanceWindowTaskCutoffBehavior::from(u.as_ref()))
                                })
                                .transpose()?,
                        );
                    }
                    "AlarmConfiguration" => {
                        builder = builder.set_alarm_configuration(crate::protocol_serde::shape_alarm_configuration::de_alarm_configuration(tokens)?);
                    }
                    _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
