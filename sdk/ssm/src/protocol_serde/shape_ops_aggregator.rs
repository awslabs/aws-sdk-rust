// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_ops_aggregator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::OpsAggregator,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.aggregator_type {
        object.key("AggregatorType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.type_name {
        object.key("TypeName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.attribute_name {
        object.key("AttributeName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.values {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Values").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.filters {
        let mut array_9 = object.key("Filters").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_ops_filter::ser_ops_filter(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.aggregators {
        let mut array_13 = object.key("Aggregators").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_ops_aggregator::ser_ops_aggregator(
                    &mut object_15,
                    item_14,
                )?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
