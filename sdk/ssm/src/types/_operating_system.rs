// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `OperatingSystem`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let operatingsystem = unimplemented!();
/// match operatingsystem {
///     OperatingSystem::AlmaLinux => { /* ... */ },
///     OperatingSystem::AmazonLinux => { /* ... */ },
///     OperatingSystem::AmazonLinux2 => { /* ... */ },
///     OperatingSystem::AmazonLinux2022 => { /* ... */ },
///     OperatingSystem::AmazonLinux2023 => { /* ... */ },
///     OperatingSystem::CentOs => { /* ... */ },
///     OperatingSystem::Debian => { /* ... */ },
///     OperatingSystem::MacOs => { /* ... */ },
///     OperatingSystem::OracleLinux => { /* ... */ },
///     OperatingSystem::Raspbian => { /* ... */ },
///     OperatingSystem::RedhatEnterpriseLinux => { /* ... */ },
///     OperatingSystem::RockyLinux => { /* ... */ },
///     OperatingSystem::Suse => { /* ... */ },
///     OperatingSystem::Ubuntu => { /* ... */ },
///     OperatingSystem::Windows => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `operatingsystem` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `OperatingSystem::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `OperatingSystem::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `OperatingSystem::NewFeature` is defined.
/// Specifically, when `operatingsystem` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `OperatingSystem::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum OperatingSystem {
    #[allow(missing_docs)] // documentation missing in model
    AlmaLinux,
    #[allow(missing_docs)] // documentation missing in model
    AmazonLinux,
    #[allow(missing_docs)] // documentation missing in model
    AmazonLinux2,
    #[allow(missing_docs)] // documentation missing in model
    AmazonLinux2022,
    #[allow(missing_docs)] // documentation missing in model
    AmazonLinux2023,
    #[allow(missing_docs)] // documentation missing in model
    CentOs,
    #[allow(missing_docs)] // documentation missing in model
    Debian,
    #[allow(missing_docs)] // documentation missing in model
    MacOs,
    #[allow(missing_docs)] // documentation missing in model
    OracleLinux,
    #[allow(missing_docs)] // documentation missing in model
    Raspbian,
    #[allow(missing_docs)] // documentation missing in model
    RedhatEnterpriseLinux,
    #[allow(missing_docs)] // documentation missing in model
    RockyLinux,
    #[allow(missing_docs)] // documentation missing in model
    Suse,
    #[allow(missing_docs)] // documentation missing in model
    Ubuntu,
    #[allow(missing_docs)] // documentation missing in model
    Windows,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for OperatingSystem {
    fn from(s: &str) -> Self {
        match s {
            "ALMA_LINUX" => OperatingSystem::AlmaLinux,
            "AMAZON_LINUX" => OperatingSystem::AmazonLinux,
            "AMAZON_LINUX_2" => OperatingSystem::AmazonLinux2,
            "AMAZON_LINUX_2022" => OperatingSystem::AmazonLinux2022,
            "AMAZON_LINUX_2023" => OperatingSystem::AmazonLinux2023,
            "CENTOS" => OperatingSystem::CentOs,
            "DEBIAN" => OperatingSystem::Debian,
            "MACOS" => OperatingSystem::MacOs,
            "ORACLE_LINUX" => OperatingSystem::OracleLinux,
            "RASPBIAN" => OperatingSystem::Raspbian,
            "REDHAT_ENTERPRISE_LINUX" => OperatingSystem::RedhatEnterpriseLinux,
            "ROCKY_LINUX" => OperatingSystem::RockyLinux,
            "SUSE" => OperatingSystem::Suse,
            "UBUNTU" => OperatingSystem::Ubuntu,
            "WINDOWS" => OperatingSystem::Windows,
            other => OperatingSystem::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for OperatingSystem {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(OperatingSystem::from(s))
    }
}
impl OperatingSystem {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            OperatingSystem::AlmaLinux => "ALMA_LINUX",
            OperatingSystem::AmazonLinux => "AMAZON_LINUX",
            OperatingSystem::AmazonLinux2 => "AMAZON_LINUX_2",
            OperatingSystem::AmazonLinux2022 => "AMAZON_LINUX_2022",
            OperatingSystem::AmazonLinux2023 => "AMAZON_LINUX_2023",
            OperatingSystem::CentOs => "CENTOS",
            OperatingSystem::Debian => "DEBIAN",
            OperatingSystem::MacOs => "MACOS",
            OperatingSystem::OracleLinux => "ORACLE_LINUX",
            OperatingSystem::Raspbian => "RASPBIAN",
            OperatingSystem::RedhatEnterpriseLinux => "REDHAT_ENTERPRISE_LINUX",
            OperatingSystem::RockyLinux => "ROCKY_LINUX",
            OperatingSystem::Suse => "SUSE",
            OperatingSystem::Ubuntu => "UBUNTU",
            OperatingSystem::Windows => "WINDOWS",
            OperatingSystem::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ALMA_LINUX",
            "AMAZON_LINUX",
            "AMAZON_LINUX_2",
            "AMAZON_LINUX_2022",
            "AMAZON_LINUX_2023",
            "CENTOS",
            "DEBIAN",
            "MACOS",
            "ORACLE_LINUX",
            "RASPBIAN",
            "REDHAT_ENTERPRISE_LINUX",
            "ROCKY_LINUX",
            "SUSE",
            "UBUNTU",
            "WINDOWS",
        ]
    }
}
impl ::std::convert::AsRef<str> for OperatingSystem {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl OperatingSystem {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for OperatingSystem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            OperatingSystem::AlmaLinux => write!(f, "ALMA_LINUX"),
            OperatingSystem::AmazonLinux => write!(f, "AMAZON_LINUX"),
            OperatingSystem::AmazonLinux2 => write!(f, "AMAZON_LINUX_2"),
            OperatingSystem::AmazonLinux2022 => write!(f, "AMAZON_LINUX_2022"),
            OperatingSystem::AmazonLinux2023 => write!(f, "AMAZON_LINUX_2023"),
            OperatingSystem::CentOs => write!(f, "CENTOS"),
            OperatingSystem::Debian => write!(f, "DEBIAN"),
            OperatingSystem::MacOs => write!(f, "MACOS"),
            OperatingSystem::OracleLinux => write!(f, "ORACLE_LINUX"),
            OperatingSystem::Raspbian => write!(f, "RASPBIAN"),
            OperatingSystem::RedhatEnterpriseLinux => write!(f, "REDHAT_ENTERPRISE_LINUX"),
            OperatingSystem::RockyLinux => write!(f, "ROCKY_LINUX"),
            OperatingSystem::Suse => write!(f, "SUSE"),
            OperatingSystem::Ubuntu => write!(f, "UBUNTU"),
            OperatingSystem::Windows => write!(f, "WINDOWS"),
            OperatingSystem::Unknown(value) => write!(f, "{value}"),
        }
    }
}
