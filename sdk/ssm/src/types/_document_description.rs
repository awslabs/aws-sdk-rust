// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon Web Services Systems Manager document (SSM document). </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentDescription {
    /// <p>The SHA1 hash of the document, which you can use for verification.</p>
    #[doc(hidden)]
    pub sha1: std::option::Option<std::string::String>,
    /// <p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note>
    /// <p>Sha1 hashes have been deprecated.</p>
    /// </note>
    #[doc(hidden)]
    pub hash: std::option::Option<std::string::String>,
    /// <p>The hash type of the document. Valid values include <code>Sha256</code> or <code>Sha1</code>.</p> <note>
    /// <p>Sha1 hashes have been deprecated.</p>
    /// </note>
    #[doc(hidden)]
    pub hash_type: std::option::Option<crate::types::DocumentHashType>,
    /// <p>The name of the SSM document.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The friendly name of the SSM document. This value can differ for each version of the document. If you want to update this value, see <code>UpdateDocument</code>.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The version of the artifact associated with the document.</p>
    #[doc(hidden)]
    pub version_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services user account that created the document.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>The date when the document was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the SSM document.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DocumentStatus>,
    /// <p>A message returned by Amazon Web Services Systems Manager that explains the <code>Status</code> value. For example, a <code>Failed</code> status might be explained by the <code>StatusInformation</code> message, "The specified S3 bucket doesn't exist. Verify that the URL of the S3 bucket is correct."</p>
    #[doc(hidden)]
    pub status_information: std::option::Option<std::string::String>,
    /// <p>The document version.</p>
    #[doc(hidden)]
    pub document_version: std::option::Option<std::string::String>,
    /// <p>A description of the document. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A description of the parameters for a document.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<std::vec::Vec<crate::types::DocumentParameter>>,
    /// <p>The list of operating system (OS) platforms compatible with this SSM document. </p>
    #[doc(hidden)]
    pub platform_types: std::option::Option<std::vec::Vec<crate::types::PlatformType>>,
    /// <p>The type of document.</p>
    #[doc(hidden)]
    pub document_type: std::option::Option<crate::types::DocumentType>,
    /// <p>The schema version.</p>
    #[doc(hidden)]
    pub schema_version: std::option::Option<std::string::String>,
    /// <p>The latest version of the document.</p>
    #[doc(hidden)]
    pub latest_version: std::option::Option<std::string::String>,
    /// <p>The default version.</p>
    #[doc(hidden)]
    pub default_version: std::option::Option<std::string::String>,
    /// <p>The document format, either JSON or YAML.</p>
    #[doc(hidden)]
    pub document_format: std::option::Option<crate::types::DocumentFormat>,
    /// <p>The target type which defines the kinds of resources the document can run on. For example, <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
    #[doc(hidden)]
    pub target_type: std::option::Option<std::string::String>,
    /// <p>The tags, or metadata, that have been applied to the document.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Details about the document attachments, including names, locations, sizes, and so on.</p>
    #[doc(hidden)]
    pub attachments_information:
        std::option::Option<std::vec::Vec<crate::types::AttachmentInformation>>,
    /// <p>A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document.</p>
    #[doc(hidden)]
    pub requires: std::option::Option<std::vec::Vec<crate::types::DocumentRequires>>,
    /// <p>The user in your organization who created the document.</p>
    #[doc(hidden)]
    pub author: std::option::Option<std::string::String>,
    /// <p>Details about the review of a document.</p>
    #[doc(hidden)]
    pub review_information: std::option::Option<std::vec::Vec<crate::types::ReviewInformation>>,
    /// <p>The version of the document currently approved for use in the organization.</p>
    #[doc(hidden)]
    pub approved_version: std::option::Option<std::string::String>,
    /// <p>The version of the document that is currently under review.</p>
    #[doc(hidden)]
    pub pending_review_version: std::option::Option<std::string::String>,
    /// <p>The current status of the review.</p>
    #[doc(hidden)]
    pub review_status: std::option::Option<crate::types::ReviewStatus>,
    /// <p>The classification of a document to help you identify and categorize its use.</p>
    #[doc(hidden)]
    pub category: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The value that identifies a document's category.</p>
    #[doc(hidden)]
    pub category_enum: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DocumentDescription {
    /// <p>The SHA1 hash of the document, which you can use for verification.</p>
    pub fn sha1(&self) -> std::option::Option<&str> {
        self.sha1.as_deref()
    }
    /// <p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note>
    /// <p>Sha1 hashes have been deprecated.</p>
    /// </note>
    pub fn hash(&self) -> std::option::Option<&str> {
        self.hash.as_deref()
    }
    /// <p>The hash type of the document. Valid values include <code>Sha256</code> or <code>Sha1</code>.</p> <note>
    /// <p>Sha1 hashes have been deprecated.</p>
    /// </note>
    pub fn hash_type(&self) -> std::option::Option<&crate::types::DocumentHashType> {
        self.hash_type.as_ref()
    }
    /// <p>The name of the SSM document.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The friendly name of the SSM document. This value can differ for each version of the document. If you want to update this value, see <code>UpdateDocument</code>.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The version of the artifact associated with the document.</p>
    pub fn version_name(&self) -> std::option::Option<&str> {
        self.version_name.as_deref()
    }
    /// <p>The Amazon Web Services user account that created the document.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The date when the document was created.</p>
    pub fn created_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The status of the SSM document.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::DocumentStatus> {
        self.status.as_ref()
    }
    /// <p>A message returned by Amazon Web Services Systems Manager that explains the <code>Status</code> value. For example, a <code>Failed</code> status might be explained by the <code>StatusInformation</code> message, "The specified S3 bucket doesn't exist. Verify that the URL of the S3 bucket is correct."</p>
    pub fn status_information(&self) -> std::option::Option<&str> {
        self.status_information.as_deref()
    }
    /// <p>The document version.</p>
    pub fn document_version(&self) -> std::option::Option<&str> {
        self.document_version.as_deref()
    }
    /// <p>A description of the document. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A description of the parameters for a document.</p>
    pub fn parameters(&self) -> std::option::Option<&[crate::types::DocumentParameter]> {
        self.parameters.as_deref()
    }
    /// <p>The list of operating system (OS) platforms compatible with this SSM document. </p>
    pub fn platform_types(&self) -> std::option::Option<&[crate::types::PlatformType]> {
        self.platform_types.as_deref()
    }
    /// <p>The type of document.</p>
    pub fn document_type(&self) -> std::option::Option<&crate::types::DocumentType> {
        self.document_type.as_ref()
    }
    /// <p>The schema version.</p>
    pub fn schema_version(&self) -> std::option::Option<&str> {
        self.schema_version.as_deref()
    }
    /// <p>The latest version of the document.</p>
    pub fn latest_version(&self) -> std::option::Option<&str> {
        self.latest_version.as_deref()
    }
    /// <p>The default version.</p>
    pub fn default_version(&self) -> std::option::Option<&str> {
        self.default_version.as_deref()
    }
    /// <p>The document format, either JSON or YAML.</p>
    pub fn document_format(&self) -> std::option::Option<&crate::types::DocumentFormat> {
        self.document_format.as_ref()
    }
    /// <p>The target type which defines the kinds of resources the document can run on. For example, <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
    pub fn target_type(&self) -> std::option::Option<&str> {
        self.target_type.as_deref()
    }
    /// <p>The tags, or metadata, that have been applied to the document.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>Details about the document attachments, including names, locations, sizes, and so on.</p>
    pub fn attachments_information(
        &self,
    ) -> std::option::Option<&[crate::types::AttachmentInformation]> {
        self.attachments_information.as_deref()
    }
    /// <p>A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document.</p>
    pub fn requires(&self) -> std::option::Option<&[crate::types::DocumentRequires]> {
        self.requires.as_deref()
    }
    /// <p>The user in your organization who created the document.</p>
    pub fn author(&self) -> std::option::Option<&str> {
        self.author.as_deref()
    }
    /// <p>Details about the review of a document.</p>
    pub fn review_information(&self) -> std::option::Option<&[crate::types::ReviewInformation]> {
        self.review_information.as_deref()
    }
    /// <p>The version of the document currently approved for use in the organization.</p>
    pub fn approved_version(&self) -> std::option::Option<&str> {
        self.approved_version.as_deref()
    }
    /// <p>The version of the document that is currently under review.</p>
    pub fn pending_review_version(&self) -> std::option::Option<&str> {
        self.pending_review_version.as_deref()
    }
    /// <p>The current status of the review.</p>
    pub fn review_status(&self) -> std::option::Option<&crate::types::ReviewStatus> {
        self.review_status.as_ref()
    }
    /// <p>The classification of a document to help you identify and categorize its use.</p>
    pub fn category(&self) -> std::option::Option<&[std::string::String]> {
        self.category.as_deref()
    }
    /// <p>The value that identifies a document's category.</p>
    pub fn category_enum(&self) -> std::option::Option<&[std::string::String]> {
        self.category_enum.as_deref()
    }
}
impl DocumentDescription {
    /// Creates a new builder-style object to manufacture [`DocumentDescription`](crate::types::DocumentDescription).
    pub fn builder() -> crate::types::builders::DocumentDescriptionBuilder {
        crate::types::builders::DocumentDescriptionBuilder::default()
    }
}

/// A builder for [`DocumentDescription`](crate::types::DocumentDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DocumentDescriptionBuilder {
    pub(crate) sha1: std::option::Option<std::string::String>,
    pub(crate) hash: std::option::Option<std::string::String>,
    pub(crate) hash_type: std::option::Option<crate::types::DocumentHashType>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) version_name: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) created_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::DocumentStatus>,
    pub(crate) status_information: std::option::Option<std::string::String>,
    pub(crate) document_version: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) parameters: std::option::Option<std::vec::Vec<crate::types::DocumentParameter>>,
    pub(crate) platform_types: std::option::Option<std::vec::Vec<crate::types::PlatformType>>,
    pub(crate) document_type: std::option::Option<crate::types::DocumentType>,
    pub(crate) schema_version: std::option::Option<std::string::String>,
    pub(crate) latest_version: std::option::Option<std::string::String>,
    pub(crate) default_version: std::option::Option<std::string::String>,
    pub(crate) document_format: std::option::Option<crate::types::DocumentFormat>,
    pub(crate) target_type: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) attachments_information:
        std::option::Option<std::vec::Vec<crate::types::AttachmentInformation>>,
    pub(crate) requires: std::option::Option<std::vec::Vec<crate::types::DocumentRequires>>,
    pub(crate) author: std::option::Option<std::string::String>,
    pub(crate) review_information:
        std::option::Option<std::vec::Vec<crate::types::ReviewInformation>>,
    pub(crate) approved_version: std::option::Option<std::string::String>,
    pub(crate) pending_review_version: std::option::Option<std::string::String>,
    pub(crate) review_status: std::option::Option<crate::types::ReviewStatus>,
    pub(crate) category: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) category_enum: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DocumentDescriptionBuilder {
    /// <p>The SHA1 hash of the document, which you can use for verification.</p>
    pub fn sha1(mut self, input: impl Into<std::string::String>) -> Self {
        self.sha1 = Some(input.into());
        self
    }
    /// <p>The SHA1 hash of the document, which you can use for verification.</p>
    pub fn set_sha1(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sha1 = input;
        self
    }
    /// <p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note>
    /// <p>Sha1 hashes have been deprecated.</p>
    /// </note>
    pub fn hash(mut self, input: impl Into<std::string::String>) -> Self {
        self.hash = Some(input.into());
        self
    }
    /// <p>The Sha256 or Sha1 hash created by the system when the document was created. </p> <note>
    /// <p>Sha1 hashes have been deprecated.</p>
    /// </note>
    pub fn set_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hash = input;
        self
    }
    /// <p>The hash type of the document. Valid values include <code>Sha256</code> or <code>Sha1</code>.</p> <note>
    /// <p>Sha1 hashes have been deprecated.</p>
    /// </note>
    pub fn hash_type(mut self, input: crate::types::DocumentHashType) -> Self {
        self.hash_type = Some(input);
        self
    }
    /// <p>The hash type of the document. Valid values include <code>Sha256</code> or <code>Sha1</code>.</p> <note>
    /// <p>Sha1 hashes have been deprecated.</p>
    /// </note>
    pub fn set_hash_type(
        mut self,
        input: std::option::Option<crate::types::DocumentHashType>,
    ) -> Self {
        self.hash_type = input;
        self
    }
    /// <p>The name of the SSM document.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the SSM document.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The friendly name of the SSM document. This value can differ for each version of the document. If you want to update this value, see <code>UpdateDocument</code>.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The friendly name of the SSM document. This value can differ for each version of the document. If you want to update this value, see <code>UpdateDocument</code>.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The version of the artifact associated with the document.</p>
    pub fn version_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.version_name = Some(input.into());
        self
    }
    /// <p>The version of the artifact associated with the document.</p>
    pub fn set_version_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// <p>The Amazon Web Services user account that created the document.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services user account that created the document.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The date when the document was created.</p>
    pub fn created_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>The date when the document was created.</p>
    pub fn set_created_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The status of the SSM document.</p>
    pub fn status(mut self, input: crate::types::DocumentStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the SSM document.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::DocumentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>A message returned by Amazon Web Services Systems Manager that explains the <code>Status</code> value. For example, a <code>Failed</code> status might be explained by the <code>StatusInformation</code> message, "The specified S3 bucket doesn't exist. Verify that the URL of the S3 bucket is correct."</p>
    pub fn status_information(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_information = Some(input.into());
        self
    }
    /// <p>A message returned by Amazon Web Services Systems Manager that explains the <code>Status</code> value. For example, a <code>Failed</code> status might be explained by the <code>StatusInformation</code> message, "The specified S3 bucket doesn't exist. Verify that the URL of the S3 bucket is correct."</p>
    pub fn set_status_information(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.status_information = input;
        self
    }
    /// <p>The document version.</p>
    pub fn document_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_version = Some(input.into());
        self
    }
    /// <p>The document version.</p>
    pub fn set_document_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_version = input;
        self
    }
    /// <p>A description of the document. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the document. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A description of the parameters for a document.</p>
    pub fn parameters(mut self, input: crate::types::DocumentParameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = Some(v);
        self
    }
    /// <p>A description of the parameters for a document.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DocumentParameter>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Appends an item to `platform_types`.
    ///
    /// To override the contents of this collection use [`set_platform_types`](Self::set_platform_types).
    ///
    /// <p>The list of operating system (OS) platforms compatible with this SSM document. </p>
    pub fn platform_types(mut self, input: crate::types::PlatformType) -> Self {
        let mut v = self.platform_types.unwrap_or_default();
        v.push(input);
        self.platform_types = Some(v);
        self
    }
    /// <p>The list of operating system (OS) platforms compatible with this SSM document. </p>
    pub fn set_platform_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PlatformType>>,
    ) -> Self {
        self.platform_types = input;
        self
    }
    /// <p>The type of document.</p>
    pub fn document_type(mut self, input: crate::types::DocumentType) -> Self {
        self.document_type = Some(input);
        self
    }
    /// <p>The type of document.</p>
    pub fn set_document_type(
        mut self,
        input: std::option::Option<crate::types::DocumentType>,
    ) -> Self {
        self.document_type = input;
        self
    }
    /// <p>The schema version.</p>
    pub fn schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version = Some(input.into());
        self
    }
    /// <p>The schema version.</p>
    pub fn set_schema_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The latest version of the document.</p>
    pub fn latest_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.latest_version = Some(input.into());
        self
    }
    /// <p>The latest version of the document.</p>
    pub fn set_latest_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.latest_version = input;
        self
    }
    /// <p>The default version.</p>
    pub fn default_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_version = Some(input.into());
        self
    }
    /// <p>The default version.</p>
    pub fn set_default_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_version = input;
        self
    }
    /// <p>The document format, either JSON or YAML.</p>
    pub fn document_format(mut self, input: crate::types::DocumentFormat) -> Self {
        self.document_format = Some(input);
        self
    }
    /// <p>The document format, either JSON or YAML.</p>
    pub fn set_document_format(
        mut self,
        input: std::option::Option<crate::types::DocumentFormat>,
    ) -> Self {
        self.document_format = input;
        self
    }
    /// <p>The target type which defines the kinds of resources the document can run on. For example, <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
    pub fn target_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_type = Some(input.into());
        self
    }
    /// <p>The target type which defines the kinds of resources the document can run on. For example, <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
    pub fn set_target_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_type = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags, or metadata, that have been applied to the document.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags, or metadata, that have been applied to the document.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Appends an item to `attachments_information`.
    ///
    /// To override the contents of this collection use [`set_attachments_information`](Self::set_attachments_information).
    ///
    /// <p>Details about the document attachments, including names, locations, sizes, and so on.</p>
    pub fn attachments_information(mut self, input: crate::types::AttachmentInformation) -> Self {
        let mut v = self.attachments_information.unwrap_or_default();
        v.push(input);
        self.attachments_information = Some(v);
        self
    }
    /// <p>Details about the document attachments, including names, locations, sizes, and so on.</p>
    pub fn set_attachments_information(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AttachmentInformation>>,
    ) -> Self {
        self.attachments_information = input;
        self
    }
    /// Appends an item to `requires`.
    ///
    /// To override the contents of this collection use [`set_requires`](Self::set_requires).
    ///
    /// <p>A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document.</p>
    pub fn requires(mut self, input: crate::types::DocumentRequires) -> Self {
        let mut v = self.requires.unwrap_or_default();
        v.push(input);
        self.requires = Some(v);
        self
    }
    /// <p>A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document.</p>
    pub fn set_requires(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DocumentRequires>>,
    ) -> Self {
        self.requires = input;
        self
    }
    /// <p>The user in your organization who created the document.</p>
    pub fn author(mut self, input: impl Into<std::string::String>) -> Self {
        self.author = Some(input.into());
        self
    }
    /// <p>The user in your organization who created the document.</p>
    pub fn set_author(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.author = input;
        self
    }
    /// Appends an item to `review_information`.
    ///
    /// To override the contents of this collection use [`set_review_information`](Self::set_review_information).
    ///
    /// <p>Details about the review of a document.</p>
    pub fn review_information(mut self, input: crate::types::ReviewInformation) -> Self {
        let mut v = self.review_information.unwrap_or_default();
        v.push(input);
        self.review_information = Some(v);
        self
    }
    /// <p>Details about the review of a document.</p>
    pub fn set_review_information(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReviewInformation>>,
    ) -> Self {
        self.review_information = input;
        self
    }
    /// <p>The version of the document currently approved for use in the organization.</p>
    pub fn approved_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.approved_version = Some(input.into());
        self
    }
    /// <p>The version of the document currently approved for use in the organization.</p>
    pub fn set_approved_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.approved_version = input;
        self
    }
    /// <p>The version of the document that is currently under review.</p>
    pub fn pending_review_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.pending_review_version = Some(input.into());
        self
    }
    /// <p>The version of the document that is currently under review.</p>
    pub fn set_pending_review_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.pending_review_version = input;
        self
    }
    /// <p>The current status of the review.</p>
    pub fn review_status(mut self, input: crate::types::ReviewStatus) -> Self {
        self.review_status = Some(input);
        self
    }
    /// <p>The current status of the review.</p>
    pub fn set_review_status(
        mut self,
        input: std::option::Option<crate::types::ReviewStatus>,
    ) -> Self {
        self.review_status = input;
        self
    }
    /// Appends an item to `category`.
    ///
    /// To override the contents of this collection use [`set_category`](Self::set_category).
    ///
    /// <p>The classification of a document to help you identify and categorize its use.</p>
    pub fn category(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.category.unwrap_or_default();
        v.push(input.into());
        self.category = Some(v);
        self
    }
    /// <p>The classification of a document to help you identify and categorize its use.</p>
    pub fn set_category(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.category = input;
        self
    }
    /// Appends an item to `category_enum`.
    ///
    /// To override the contents of this collection use [`set_category_enum`](Self::set_category_enum).
    ///
    /// <p>The value that identifies a document's category.</p>
    pub fn category_enum(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.category_enum.unwrap_or_default();
        v.push(input.into());
        self.category_enum = Some(v);
        self
    }
    /// <p>The value that identifies a document's category.</p>
    pub fn set_category_enum(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.category_enum = input;
        self
    }
    /// Consumes the builder and constructs a [`DocumentDescription`](crate::types::DocumentDescription).
    pub fn build(self) -> crate::types::DocumentDescription {
        crate::types::DocumentDescription {
            sha1: self.sha1,
            hash: self.hash,
            hash_type: self.hash_type,
            name: self.name,
            display_name: self.display_name,
            version_name: self.version_name,
            owner: self.owner,
            created_date: self.created_date,
            status: self.status,
            status_information: self.status_information,
            document_version: self.document_version,
            description: self.description,
            parameters: self.parameters,
            platform_types: self.platform_types,
            document_type: self.document_type,
            schema_version: self.schema_version,
            latest_version: self.latest_version,
            default_version: self.default_version,
            document_format: self.document_format,
            target_type: self.target_type,
            tags: self.tags,
            attachments_information: self.attachments_information,
            requires: self.requires,
            author: self.author,
            review_information: self.review_information,
            approved_version: self.approved_version,
            pending_review_version: self.pending_review_version,
            review_status: self.review_status,
            category: self.category,
            category_enum: self.category_enum,
        }
    }
}
