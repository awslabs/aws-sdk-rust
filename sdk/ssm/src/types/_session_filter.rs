// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a filter for Session Manager information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SessionFilter {
    /// <p>The name of the filter.</p>
    pub key: crate::types::SessionFilterKey,
    /// <p>The filter value. Valid values for each filter key are as follows:</p>
    /// <ul>
    /// <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li>
    /// <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li>
    /// <li> <p>Target: Specify a managed node to which session connections have been made.</p> </li>
    /// <li> <p>Owner: Specify an Amazon Web Services user to see a list of sessions started by that user.</p> </li>
    /// <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p>
    /// <ul>
    /// <li> <p>Connected</p> </li>
    /// <li> <p>Connecting</p> </li>
    /// <li> <p>Disconnected</p> </li>
    /// <li> <p>Terminated</p> </li>
    /// <li> <p>Terminating</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul> </li>
    /// <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li>
    /// </ul>
    pub value: ::std::string::String,
}
impl SessionFilter {
    /// <p>The name of the filter.</p>
    pub fn key(&self) -> &crate::types::SessionFilterKey {
        &self.key
    }
    /// <p>The filter value. Valid values for each filter key are as follows:</p>
    /// <ul>
    /// <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li>
    /// <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li>
    /// <li> <p>Target: Specify a managed node to which session connections have been made.</p> </li>
    /// <li> <p>Owner: Specify an Amazon Web Services user to see a list of sessions started by that user.</p> </li>
    /// <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p>
    /// <ul>
    /// <li> <p>Connected</p> </li>
    /// <li> <p>Connecting</p> </li>
    /// <li> <p>Disconnected</p> </li>
    /// <li> <p>Terminated</p> </li>
    /// <li> <p>Terminating</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul> </li>
    /// <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li>
    /// </ul>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl SessionFilter {
    /// Creates a new builder-style object to manufacture [`SessionFilter`](crate::types::SessionFilter).
    pub fn builder() -> crate::types::builders::SessionFilterBuilder {
        crate::types::builders::SessionFilterBuilder::default()
    }
}

/// A builder for [`SessionFilter`](crate::types::SessionFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SessionFilterBuilder {
    pub(crate) key: ::std::option::Option<crate::types::SessionFilterKey>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl SessionFilterBuilder {
    /// <p>The name of the filter.</p>
    /// This field is required.
    pub fn key(mut self, input: crate::types::SessionFilterKey) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the filter.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::SessionFilterKey>) -> Self {
        self.key = input;
        self
    }
    /// <p>The name of the filter.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::SessionFilterKey> {
        &self.key
    }
    /// <p>The filter value. Valid values for each filter key are as follows:</p>
    /// <ul>
    /// <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li>
    /// <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li>
    /// <li> <p>Target: Specify a managed node to which session connections have been made.</p> </li>
    /// <li> <p>Owner: Specify an Amazon Web Services user to see a list of sessions started by that user.</p> </li>
    /// <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p>
    /// <ul>
    /// <li> <p>Connected</p> </li>
    /// <li> <p>Connecting</p> </li>
    /// <li> <p>Disconnected</p> </li>
    /// <li> <p>Terminated</p> </li>
    /// <li> <p>Terminating</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul> </li>
    /// <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The filter value. Valid values for each filter key are as follows:</p>
    /// <ul>
    /// <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li>
    /// <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li>
    /// <li> <p>Target: Specify a managed node to which session connections have been made.</p> </li>
    /// <li> <p>Owner: Specify an Amazon Web Services user to see a list of sessions started by that user.</p> </li>
    /// <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p>
    /// <ul>
    /// <li> <p>Connected</p> </li>
    /// <li> <p>Connecting</p> </li>
    /// <li> <p>Disconnected</p> </li>
    /// <li> <p>Terminated</p> </li>
    /// <li> <p>Terminating</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul> </li>
    /// <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li>
    /// </ul>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The filter value. Valid values for each filter key are as follows:</p>
    /// <ul>
    /// <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li>
    /// <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li>
    /// <li> <p>Target: Specify a managed node to which session connections have been made.</p> </li>
    /// <li> <p>Owner: Specify an Amazon Web Services user to see a list of sessions started by that user.</p> </li>
    /// <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p>
    /// <ul>
    /// <li> <p>Connected</p> </li>
    /// <li> <p>Connecting</p> </li>
    /// <li> <p>Disconnected</p> </li>
    /// <li> <p>Terminated</p> </li>
    /// <li> <p>Terminating</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul> </li>
    /// <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li>
    /// </ul>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`SessionFilter`](crate::types::SessionFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::SessionFilterBuilder::key)
    /// - [`value`](crate::types::builders::SessionFilterBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::SessionFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SessionFilter {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building SessionFilter",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building SessionFilter",
                )
            })?,
        })
    }
}
