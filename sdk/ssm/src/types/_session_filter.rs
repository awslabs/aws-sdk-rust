// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a filter for Session Manager information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SessionFilter {
    /// <p>The name of the filter.</p>
    #[doc(hidden)]
    pub key: std::option::Option<crate::types::SessionFilterKey>,
    /// <p>The filter value. Valid values for each filter key are as follows:</p>
    /// <ul>
    /// <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li>
    /// <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li>
    /// <li> <p>Target: Specify a managed node to which session connections have been made.</p> </li>
    /// <li> <p>Owner: Specify an Amazon Web Services user account to see a list of sessions started by that user.</p> </li>
    /// <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p>
    /// <ul>
    /// <li> <p>Connected</p> </li>
    /// <li> <p>Connecting</p> </li>
    /// <li> <p>Disconnected</p> </li>
    /// <li> <p>Terminated</p> </li>
    /// <li> <p>Terminating</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul> </li>
    /// <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl SessionFilter {
    /// <p>The name of the filter.</p>
    pub fn key(&self) -> std::option::Option<&crate::types::SessionFilterKey> {
        self.key.as_ref()
    }
    /// <p>The filter value. Valid values for each filter key are as follows:</p>
    /// <ul>
    /// <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li>
    /// <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li>
    /// <li> <p>Target: Specify a managed node to which session connections have been made.</p> </li>
    /// <li> <p>Owner: Specify an Amazon Web Services user account to see a list of sessions started by that user.</p> </li>
    /// <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p>
    /// <ul>
    /// <li> <p>Connected</p> </li>
    /// <li> <p>Connecting</p> </li>
    /// <li> <p>Disconnected</p> </li>
    /// <li> <p>Terminated</p> </li>
    /// <li> <p>Terminating</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul> </li>
    /// <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li>
    /// </ul>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl SessionFilter {
    /// Creates a new builder-style object to manufacture [`SessionFilter`](crate::types::SessionFilter).
    pub fn builder() -> crate::types::builders::SessionFilterBuilder {
        crate::types::builders::SessionFilterBuilder::default()
    }
}

/// A builder for [`SessionFilter`](crate::types::SessionFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SessionFilterBuilder {
    pub(crate) key: std::option::Option<crate::types::SessionFilterKey>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl SessionFilterBuilder {
    /// <p>The name of the filter.</p>
    pub fn key(mut self, input: crate::types::SessionFilterKey) -> Self {
        self.key = Some(input);
        self
    }
    /// <p>The name of the filter.</p>
    pub fn set_key(mut self, input: std::option::Option<crate::types::SessionFilterKey>) -> Self {
        self.key = input;
        self
    }
    /// <p>The filter value. Valid values for each filter key are as follows:</p>
    /// <ul>
    /// <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li>
    /// <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li>
    /// <li> <p>Target: Specify a managed node to which session connections have been made.</p> </li>
    /// <li> <p>Owner: Specify an Amazon Web Services user account to see a list of sessions started by that user.</p> </li>
    /// <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p>
    /// <ul>
    /// <li> <p>Connected</p> </li>
    /// <li> <p>Connecting</p> </li>
    /// <li> <p>Disconnected</p> </li>
    /// <li> <p>Terminated</p> </li>
    /// <li> <p>Terminating</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul> </li>
    /// <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li>
    /// </ul>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The filter value. Valid values for each filter key are as follows:</p>
    /// <ul>
    /// <li> <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p> </li>
    /// <li> <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify 2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p> </li>
    /// <li> <p>Target: Specify a managed node to which session connections have been made.</p> </li>
    /// <li> <p>Owner: Specify an Amazon Web Services user account to see a list of sessions started by that user.</p> </li>
    /// <li> <p>Status: Specify a valid session status to see a list of all sessions with that status. Status values you can specify include:</p>
    /// <ul>
    /// <li> <p>Connected</p> </li>
    /// <li> <p>Connecting</p> </li>
    /// <li> <p>Disconnected</p> </li>
    /// <li> <p>Terminated</p> </li>
    /// <li> <p>Terminating</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul> </li>
    /// <li> <p>SessionId: Specify a session ID to return details about the session.</p> </li>
    /// </ul>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`SessionFilter`](crate::types::SessionFilter).
    pub fn build(self) -> crate::types::SessionFilter {
        crate::types::SessionFilter {
            key: self.key,
            value: self.value,
        }
    }
}
