// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of rules defining the approval rules for a patch baseline.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PatchRuleGroup {
    /// <p>The rules that make up the rule group.</p>
    #[doc(hidden)]
    pub patch_rules: std::option::Option<std::vec::Vec<crate::types::PatchRule>>,
}
impl PatchRuleGroup {
    /// <p>The rules that make up the rule group.</p>
    pub fn patch_rules(&self) -> std::option::Option<&[crate::types::PatchRule]> {
        self.patch_rules.as_deref()
    }
}
impl PatchRuleGroup {
    /// Creates a new builder-style object to manufacture [`PatchRuleGroup`](crate::types::PatchRuleGroup).
    pub fn builder() -> crate::types::builders::PatchRuleGroupBuilder {
        crate::types::builders::PatchRuleGroupBuilder::default()
    }
}

/// A builder for [`PatchRuleGroup`](crate::types::PatchRuleGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PatchRuleGroupBuilder {
    pub(crate) patch_rules: std::option::Option<std::vec::Vec<crate::types::PatchRule>>,
}
impl PatchRuleGroupBuilder {
    /// Appends an item to `patch_rules`.
    ///
    /// To override the contents of this collection use [`set_patch_rules`](Self::set_patch_rules).
    ///
    /// <p>The rules that make up the rule group.</p>
    pub fn patch_rules(mut self, input: crate::types::PatchRule) -> Self {
        let mut v = self.patch_rules.unwrap_or_default();
        v.push(input);
        self.patch_rules = Some(v);
        self
    }
    /// <p>The rules that make up the rule group.</p>
    pub fn set_patch_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PatchRule>>,
    ) -> Self {
        self.patch_rules = input;
        self
    }
    /// Consumes the builder and constructs a [`PatchRuleGroup`](crate::types::PatchRuleGroup).
    pub fn build(self) -> crate::types::PatchRuleGroup {
        crate::types::PatchRuleGroup {
            patch_rules: self.patch_rules,
        }
    }
}
