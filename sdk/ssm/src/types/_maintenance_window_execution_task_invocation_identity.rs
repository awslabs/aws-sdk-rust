// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the information about a task invocation for a particular target as part of a task execution performed as part of a maintenance window execution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MaintenanceWindowExecutionTaskInvocationIdentity {
    /// <p>The ID of the maintenance window execution that ran the task.</p>
    #[doc(hidden)]
    pub window_execution_id: std::option::Option<std::string::String>,
    /// <p>The ID of the specific task execution in the maintenance window execution.</p>
    #[doc(hidden)]
    pub task_execution_id: std::option::Option<std::string::String>,
    /// <p>The ID of the task invocation.</p>
    #[doc(hidden)]
    pub invocation_id: std::option::Option<std::string::String>,
    /// <p>The ID of the action performed in the service that actually handled the task invocation. If the task type is <code>RUN_COMMAND</code>, this value is the command ID.</p>
    #[doc(hidden)]
    pub execution_id: std::option::Option<std::string::String>,
    /// <p>The task type.</p>
    #[doc(hidden)]
    pub task_type: std::option::Option<crate::types::MaintenanceWindowTaskType>,
    /// <p>The parameters that were provided for the invocation when it was run.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<std::string::String>,
    /// <p>The status of the task invocation.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::MaintenanceWindowExecutionStatus>,
    /// <p>The details explaining the status of the task invocation. Not available for all status values. </p>
    #[doc(hidden)]
    pub status_details: std::option::Option<std::string::String>,
    /// <p>The time the invocation started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the invocation finished.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>User-provided value that was specified when the target was registered with the maintenance window. This was also included in any Amazon CloudWatch Events events raised during the task invocation.</p>
    #[doc(hidden)]
    pub owner_information: std::option::Option<std::string::String>,
    /// <p>The ID of the target definition in this maintenance window the invocation was performed for.</p>
    #[doc(hidden)]
    pub window_target_id: std::option::Option<std::string::String>,
}
impl MaintenanceWindowExecutionTaskInvocationIdentity {
    /// <p>The ID of the maintenance window execution that ran the task.</p>
    pub fn window_execution_id(&self) -> std::option::Option<&str> {
        self.window_execution_id.as_deref()
    }
    /// <p>The ID of the specific task execution in the maintenance window execution.</p>
    pub fn task_execution_id(&self) -> std::option::Option<&str> {
        self.task_execution_id.as_deref()
    }
    /// <p>The ID of the task invocation.</p>
    pub fn invocation_id(&self) -> std::option::Option<&str> {
        self.invocation_id.as_deref()
    }
    /// <p>The ID of the action performed in the service that actually handled the task invocation. If the task type is <code>RUN_COMMAND</code>, this value is the command ID.</p>
    pub fn execution_id(&self) -> std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The task type.</p>
    pub fn task_type(&self) -> std::option::Option<&crate::types::MaintenanceWindowTaskType> {
        self.task_type.as_ref()
    }
    /// <p>The parameters that were provided for the invocation when it was run.</p>
    pub fn parameters(&self) -> std::option::Option<&str> {
        self.parameters.as_deref()
    }
    /// <p>The status of the task invocation.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::MaintenanceWindowExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>The details explaining the status of the task invocation. Not available for all status values. </p>
    pub fn status_details(&self) -> std::option::Option<&str> {
        self.status_details.as_deref()
    }
    /// <p>The time the invocation started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time the invocation finished.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>User-provided value that was specified when the target was registered with the maintenance window. This was also included in any Amazon CloudWatch Events events raised during the task invocation.</p>
    pub fn owner_information(&self) -> std::option::Option<&str> {
        self.owner_information.as_deref()
    }
    /// <p>The ID of the target definition in this maintenance window the invocation was performed for.</p>
    pub fn window_target_id(&self) -> std::option::Option<&str> {
        self.window_target_id.as_deref()
    }
}
impl std::fmt::Debug for MaintenanceWindowExecutionTaskInvocationIdentity {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MaintenanceWindowExecutionTaskInvocationIdentity");
        formatter.field("window_execution_id", &self.window_execution_id);
        formatter.field("task_execution_id", &self.task_execution_id);
        formatter.field("invocation_id", &self.invocation_id);
        formatter.field("execution_id", &self.execution_id);
        formatter.field("task_type", &self.task_type);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("status_details", &self.status_details);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("owner_information", &"*** Sensitive Data Redacted ***");
        formatter.field("window_target_id", &self.window_target_id);
        formatter.finish()
    }
}
impl MaintenanceWindowExecutionTaskInvocationIdentity {
    /// Creates a new builder-style object to manufacture [`MaintenanceWindowExecutionTaskInvocationIdentity`](crate::types::MaintenanceWindowExecutionTaskInvocationIdentity).
    pub fn builder(
    ) -> crate::types::builders::MaintenanceWindowExecutionTaskInvocationIdentityBuilder {
        crate::types::builders::MaintenanceWindowExecutionTaskInvocationIdentityBuilder::default()
    }
}

/// A builder for [`MaintenanceWindowExecutionTaskInvocationIdentity`](crate::types::MaintenanceWindowExecutionTaskInvocationIdentity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct MaintenanceWindowExecutionTaskInvocationIdentityBuilder {
    pub(crate) window_execution_id: std::option::Option<std::string::String>,
    pub(crate) task_execution_id: std::option::Option<std::string::String>,
    pub(crate) invocation_id: std::option::Option<std::string::String>,
    pub(crate) execution_id: std::option::Option<std::string::String>,
    pub(crate) task_type: std::option::Option<crate::types::MaintenanceWindowTaskType>,
    pub(crate) parameters: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::MaintenanceWindowExecutionStatus>,
    pub(crate) status_details: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) owner_information: std::option::Option<std::string::String>,
    pub(crate) window_target_id: std::option::Option<std::string::String>,
}
impl MaintenanceWindowExecutionTaskInvocationIdentityBuilder {
    /// <p>The ID of the maintenance window execution that ran the task.</p>
    pub fn window_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_execution_id = Some(input.into());
        self
    }
    /// <p>The ID of the maintenance window execution that ran the task.</p>
    pub fn set_window_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.window_execution_id = input;
        self
    }
    /// <p>The ID of the specific task execution in the maintenance window execution.</p>
    pub fn task_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_execution_id = Some(input.into());
        self
    }
    /// <p>The ID of the specific task execution in the maintenance window execution.</p>
    pub fn set_task_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.task_execution_id = input;
        self
    }
    /// <p>The ID of the task invocation.</p>
    pub fn invocation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.invocation_id = Some(input.into());
        self
    }
    /// <p>The ID of the task invocation.</p>
    pub fn set_invocation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.invocation_id = input;
        self
    }
    /// <p>The ID of the action performed in the service that actually handled the task invocation. If the task type is <code>RUN_COMMAND</code>, this value is the command ID.</p>
    pub fn execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_id = Some(input.into());
        self
    }
    /// <p>The ID of the action performed in the service that actually handled the task invocation. If the task type is <code>RUN_COMMAND</code>, this value is the command ID.</p>
    pub fn set_execution_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The task type.</p>
    pub fn task_type(mut self, input: crate::types::MaintenanceWindowTaskType) -> Self {
        self.task_type = Some(input);
        self
    }
    /// <p>The task type.</p>
    pub fn set_task_type(
        mut self,
        input: std::option::Option<crate::types::MaintenanceWindowTaskType>,
    ) -> Self {
        self.task_type = input;
        self
    }
    /// <p>The parameters that were provided for the invocation when it was run.</p>
    pub fn parameters(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameters = Some(input.into());
        self
    }
    /// <p>The parameters that were provided for the invocation when it was run.</p>
    pub fn set_parameters(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The status of the task invocation.</p>
    pub fn status(mut self, input: crate::types::MaintenanceWindowExecutionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the task invocation.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::MaintenanceWindowExecutionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The details explaining the status of the task invocation. Not available for all status values. </p>
    pub fn status_details(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_details = Some(input.into());
        self
    }
    /// <p>The details explaining the status of the task invocation. Not available for all status values. </p>
    pub fn set_status_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_details = input;
        self
    }
    /// <p>The time the invocation started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time the invocation started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time the invocation finished.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The time the invocation finished.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>User-provided value that was specified when the target was registered with the maintenance window. This was also included in any Amazon CloudWatch Events events raised during the task invocation.</p>
    pub fn owner_information(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_information = Some(input.into());
        self
    }
    /// <p>User-provided value that was specified when the target was registered with the maintenance window. This was also included in any Amazon CloudWatch Events events raised during the task invocation.</p>
    pub fn set_owner_information(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.owner_information = input;
        self
    }
    /// <p>The ID of the target definition in this maintenance window the invocation was performed for.</p>
    pub fn window_target_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_target_id = Some(input.into());
        self
    }
    /// <p>The ID of the target definition in this maintenance window the invocation was performed for.</p>
    pub fn set_window_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.window_target_id = input;
        self
    }
    /// Consumes the builder and constructs a [`MaintenanceWindowExecutionTaskInvocationIdentity`](crate::types::MaintenanceWindowExecutionTaskInvocationIdentity).
    pub fn build(self) -> crate::types::MaintenanceWindowExecutionTaskInvocationIdentity {
        crate::types::MaintenanceWindowExecutionTaskInvocationIdentity {
            window_execution_id: self.window_execution_id,
            task_execution_id: self.task_execution_id,
            invocation_id: self.invocation_id,
            execution_id: self.execution_id,
            task_type: self.task_type,
            parameters: self.parameters,
            status: self.status,
            status_details: self.status_details,
            start_time: self.start_time,
            end_time: self.end_time,
            owner_information: self.owner_information,
            window_target_id: self.window_target_id,
        }
    }
}
impl std::fmt::Debug for MaintenanceWindowExecutionTaskInvocationIdentityBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter =
            f.debug_struct("MaintenanceWindowExecutionTaskInvocationIdentityBuilder");
        formatter.field("window_execution_id", &self.window_execution_id);
        formatter.field("task_execution_id", &self.task_execution_id);
        formatter.field("invocation_id", &self.invocation_id);
        formatter.field("execution_id", &self.execution_id);
        formatter.field("task_type", &self.task_type);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("status_details", &self.status_details);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("owner_information", &"*** Sensitive Data Redacted ***");
        formatter.field("window_target_id", &self.window_target_id);
        formatter.finish()
    }
}
