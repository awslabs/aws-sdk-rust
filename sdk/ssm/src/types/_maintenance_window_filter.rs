// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter used in the request. Supported filter keys depend on the API operation that includes the filter. API operations that use <code>MaintenanceWindowFilter&gt;</code> include the following:</p>
/// <ul>
/// <li> <p> <code>DescribeMaintenanceWindowExecutions</code> </p> </li>
/// <li> <p> <code>DescribeMaintenanceWindowExecutionTaskInvocations</code> </p> </li>
/// <li> <p> <code>DescribeMaintenanceWindowExecutionTasks</code> </p> </li>
/// <li> <p> <code>DescribeMaintenanceWindows</code> </p> </li>
/// <li> <p> <code>DescribeMaintenanceWindowTargets</code> </p> </li>
/// <li> <p> <code>DescribeMaintenanceWindowTasks</code> </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MaintenanceWindowFilter {
    /// <p>The name of the filter.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The filter values.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl MaintenanceWindowFilter {
    /// <p>The name of the filter.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The filter values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl MaintenanceWindowFilter {
    /// Creates a new builder-style object to manufacture [`MaintenanceWindowFilter`](crate::types::MaintenanceWindowFilter).
    pub fn builder() -> crate::types::builders::MaintenanceWindowFilterBuilder {
        crate::types::builders::MaintenanceWindowFilterBuilder::default()
    }
}

/// A builder for [`MaintenanceWindowFilter`](crate::types::MaintenanceWindowFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MaintenanceWindowFilterBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl MaintenanceWindowFilterBuilder {
    /// <p>The name of the filter.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the filter.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The name of the filter.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The filter values.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter values.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The filter values.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`MaintenanceWindowFilter`](crate::types::MaintenanceWindowFilter).
    pub fn build(self) -> crate::types::MaintenanceWindowFilter {
        crate::types::MaintenanceWindowFilter {
            key: self.key,
            values: self.values,
        }
    }
}
