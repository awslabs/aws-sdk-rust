// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Inventory query results.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InventoryResultEntity {
    /// <p>ID of the inventory result entity. For example, for managed node inventory the result will be the managed node ID. For EC2 instance inventory, the result will be the instance ID. </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The data section in the inventory result entity JSON.</p>
    #[doc(hidden)]
    pub data: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::InventoryResultItem>,
    >,
}
impl InventoryResultEntity {
    /// <p>ID of the inventory result entity. For example, for managed node inventory the result will be the managed node ID. For EC2 instance inventory, the result will be the instance ID. </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The data section in the inventory result entity JSON.</p>
    pub fn data(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::InventoryResultItem>,
    > {
        self.data.as_ref()
    }
}
impl InventoryResultEntity {
    /// Creates a new builder-style object to manufacture [`InventoryResultEntity`](crate::types::InventoryResultEntity).
    pub fn builder() -> crate::types::builders::InventoryResultEntityBuilder {
        crate::types::builders::InventoryResultEntityBuilder::default()
    }
}

/// A builder for [`InventoryResultEntity`](crate::types::InventoryResultEntity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InventoryResultEntityBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) data: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::InventoryResultItem>,
    >,
}
impl InventoryResultEntityBuilder {
    /// <p>ID of the inventory result entity. For example, for managed node inventory the result will be the managed node ID. For EC2 instance inventory, the result will be the instance ID. </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>ID of the inventory result entity. For example, for managed node inventory the result will be the managed node ID. For EC2 instance inventory, the result will be the instance ID. </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Adds a key-value pair to `data`.
    ///
    /// To override the contents of this collection use [`set_data`](Self::set_data).
    ///
    /// <p>The data section in the inventory result entity JSON.</p>
    pub fn data(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::InventoryResultItem,
    ) -> Self {
        let mut hash_map = self.data.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.data = Some(hash_map);
        self
    }
    /// <p>The data section in the inventory result entity JSON.</p>
    pub fn set_data(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::InventoryResultItem>,
        >,
    ) -> Self {
        self.data = input;
        self
    }
    /// Consumes the builder and constructs a [`InventoryResultEntity`](crate::types::InventoryResultEntity).
    pub fn build(self) -> crate::types::InventoryResultEntity {
        crate::types::InventoryResultEntity {
            id: self.id,
            data: self.data,
        }
    }
}
