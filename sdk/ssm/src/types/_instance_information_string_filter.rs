// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filters to describe or get information about your managed nodes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceInformationStringFilter {
    /// <p>The filter key name to describe your managed nodes.</p>
    /// <p>Valid filter key values: ActivationIds | AgentVersion | AssociationStatus | IamRole | InstanceIds | PingStatus | PlatformTypes | ResourceType | SourceIds | SourceTypes | "tag-key" | "tag:<code>{keyname}</code> </p>
    /// <ul>
    /// <li> <p>Valid values for the <code>AssociationStatus</code> filter key: Success | Pending | Failed</p> </li>
    /// <li> <p>Valid values for the <code>PingStatus</code> filter key: Online | ConnectionLost | Inactive (deprecated)</p> </li>
    /// <li> <p>Valid values for the <code>PlatformType</code> filter key: Windows | Linux | MacOS</p> </li>
    /// <li> <p>Valid values for the <code>ResourceType</code> filter key: EC2Instance | ManagedInstance</p> </li>
    /// <li> <p>Valid values for the <code>SourceType</code> filter key: AWS::EC2::Instance | AWS::SSM::ManagedInstance | AWS::IoT::Thing</p> </li>
    /// <li> <p>Valid tag examples: <code>Key=tag-key,Values=Purpose</code> | <code>Key=tag:Purpose,Values=Test</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The filter values.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl InstanceInformationStringFilter {
    /// <p>The filter key name to describe your managed nodes.</p>
    /// <p>Valid filter key values: ActivationIds | AgentVersion | AssociationStatus | IamRole | InstanceIds | PingStatus | PlatformTypes | ResourceType | SourceIds | SourceTypes | "tag-key" | "tag:<code>{keyname}</code> </p>
    /// <ul>
    /// <li> <p>Valid values for the <code>AssociationStatus</code> filter key: Success | Pending | Failed</p> </li>
    /// <li> <p>Valid values for the <code>PingStatus</code> filter key: Online | ConnectionLost | Inactive (deprecated)</p> </li>
    /// <li> <p>Valid values for the <code>PlatformType</code> filter key: Windows | Linux | MacOS</p> </li>
    /// <li> <p>Valid values for the <code>ResourceType</code> filter key: EC2Instance | ManagedInstance</p> </li>
    /// <li> <p>Valid values for the <code>SourceType</code> filter key: AWS::EC2::Instance | AWS::SSM::ManagedInstance | AWS::IoT::Thing</p> </li>
    /// <li> <p>Valid tag examples: <code>Key=tag-key,Values=Purpose</code> | <code>Key=tag:Purpose,Values=Test</code>.</p> </li>
    /// </ul>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The filter values.</p>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
}
impl InstanceInformationStringFilter {
    /// Creates a new builder-style object to manufacture [`InstanceInformationStringFilter`](crate::types::InstanceInformationStringFilter).
    pub fn builder() -> crate::types::builders::InstanceInformationStringFilterBuilder {
        crate::types::builders::InstanceInformationStringFilterBuilder::default()
    }
}

/// A builder for [`InstanceInformationStringFilter`](crate::types::InstanceInformationStringFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceInformationStringFilterBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl InstanceInformationStringFilterBuilder {
    /// <p>The filter key name to describe your managed nodes.</p>
    /// <p>Valid filter key values: ActivationIds | AgentVersion | AssociationStatus | IamRole | InstanceIds | PingStatus | PlatformTypes | ResourceType | SourceIds | SourceTypes | "tag-key" | "tag:<code>{keyname}</code> </p>
    /// <ul>
    /// <li> <p>Valid values for the <code>AssociationStatus</code> filter key: Success | Pending | Failed</p> </li>
    /// <li> <p>Valid values for the <code>PingStatus</code> filter key: Online | ConnectionLost | Inactive (deprecated)</p> </li>
    /// <li> <p>Valid values for the <code>PlatformType</code> filter key: Windows | Linux | MacOS</p> </li>
    /// <li> <p>Valid values for the <code>ResourceType</code> filter key: EC2Instance | ManagedInstance</p> </li>
    /// <li> <p>Valid values for the <code>SourceType</code> filter key: AWS::EC2::Instance | AWS::SSM::ManagedInstance | AWS::IoT::Thing</p> </li>
    /// <li> <p>Valid tag examples: <code>Key=tag-key,Values=Purpose</code> | <code>Key=tag:Purpose,Values=Test</code>.</p> </li>
    /// </ul>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The filter key name to describe your managed nodes.</p>
    /// <p>Valid filter key values: ActivationIds | AgentVersion | AssociationStatus | IamRole | InstanceIds | PingStatus | PlatformTypes | ResourceType | SourceIds | SourceTypes | "tag-key" | "tag:<code>{keyname}</code> </p>
    /// <ul>
    /// <li> <p>Valid values for the <code>AssociationStatus</code> filter key: Success | Pending | Failed</p> </li>
    /// <li> <p>Valid values for the <code>PingStatus</code> filter key: Online | ConnectionLost | Inactive (deprecated)</p> </li>
    /// <li> <p>Valid values for the <code>PlatformType</code> filter key: Windows | Linux | MacOS</p> </li>
    /// <li> <p>Valid values for the <code>ResourceType</code> filter key: EC2Instance | ManagedInstance</p> </li>
    /// <li> <p>Valid values for the <code>SourceType</code> filter key: AWS::EC2::Instance | AWS::SSM::ManagedInstance | AWS::IoT::Thing</p> </li>
    /// <li> <p>Valid tag examples: <code>Key=tag-key,Values=Purpose</code> | <code>Key=tag:Purpose,Values=Test</code>.</p> </li>
    /// </ul>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The filter values.</p>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>The filter values.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceInformationStringFilter`](crate::types::InstanceInformationStringFilter).
    pub fn build(self) -> crate::types::InstanceInformationStringFilter {
        crate::types::InstanceInformationStringFilter {
            key: self.key,
            values: self.values,
        }
    }
}
