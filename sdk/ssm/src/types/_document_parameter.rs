// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters specified in a System Manager document that run on the server when the command is run. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentParameter {
    /// <p>The name of the parameter.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of parameter. The type can be either String or StringList.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DocumentParameterType>,
    /// <p>A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<std::string::String>,
}
impl DocumentParameter {
    /// <p>The name of the parameter.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of parameter. The type can be either String or StringList.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DocumentParameterType> {
        self.r#type.as_ref()
    }
    /// <p>A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.</p>
    pub fn default_value(&self) -> std::option::Option<&str> {
        self.default_value.as_deref()
    }
}
impl DocumentParameter {
    /// Creates a new builder-style object to manufacture [`DocumentParameter`](crate::types::DocumentParameter).
    pub fn builder() -> crate::types::builders::DocumentParameterBuilder {
        crate::types::builders::DocumentParameterBuilder::default()
    }
}

/// A builder for [`DocumentParameter`](crate::types::DocumentParameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DocumentParameterBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::DocumentParameterType>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) default_value: std::option::Option<std::string::String>,
}
impl DocumentParameterBuilder {
    /// <p>The name of the parameter.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the parameter.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of parameter. The type can be either String or StringList.</p>
    pub fn r#type(mut self, input: crate::types::DocumentParameterType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of parameter. The type can be either String or StringList.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::DocumentParameterType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of what the parameter does, how to use it, the default value, and whether or not the parameter is optional.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.</p>
    pub fn default_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_value = Some(input.into());
        self
    }
    /// <p>If specified, the default values for the parameters. Parameters without a default value are required. Parameters with a default value are optional.</p>
    pub fn set_default_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// Consumes the builder and constructs a [`DocumentParameter`](crate::types::DocumentParameter).
    pub fn build(self) -> crate::types::DocumentParameter {
        crate::types::DocumentParameter {
            name: self.name,
            r#type: self.r#type,
            description: self.description,
            default_value: self.default_value,
        }
    }
}
