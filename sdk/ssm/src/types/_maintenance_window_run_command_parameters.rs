// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for a <code>RUN_COMMAND</code> task type.</p>
/// <p>For information about specifying and updating task parameters, see <code>RegisterTaskWithMaintenanceWindow</code> and <code>UpdateMaintenanceWindowTask</code>.</p> <note>
/// <p> <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
/// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
/// <p>For <code>RUN_COMMAND</code> tasks, Systems Manager uses specified values for <code>TaskParameters</code> and <code>LoggingInfo</code> only if no values are specified for <code>TaskInvocationParameters</code>. </p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MaintenanceWindowRunCommandParameters {
    /// <p>Information about the commands to run.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
    /// <p>Configuration options for sending command output to Amazon CloudWatch Logs.</p>
    #[doc(hidden)]
    pub cloud_watch_output_config: std::option::Option<crate::types::CloudWatchOutputConfig>,
    /// <p>The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.</p>
    #[doc(hidden)]
    pub document_hash: std::option::Option<std::string::String>,
    /// <p>SHA-256 or SHA-1. SHA-1 hashes have been deprecated.</p>
    #[doc(hidden)]
    pub document_hash_type: std::option::Option<crate::types::DocumentHashType>,
    /// <p>The Amazon Web Services Systems Manager document (SSM document) version to use in the request. You can specify <code>$DEFAULT</code>, <code>$LATEST</code>, or a specific version number. If you run commands by using the Amazon Web Services CLI, then you must escape the first two options by using a backslash. If you specify a version number, then you don't need to use the backslash. For example:</p>
    /// <p> <code>--document-version "\$DEFAULT"</code> </p>
    /// <p> <code>--document-version "\$LATEST"</code> </p>
    /// <p> <code>--document-version "3"</code> </p>
    #[doc(hidden)]
    pub document_version: std::option::Option<std::string::String>,
    /// <p>Configurations for sending notifications about command status changes on a per-managed node basis.</p>
    #[doc(hidden)]
    pub notification_config: std::option::Option<crate::types::NotificationConfig>,
    /// <p>The name of the Amazon Simple Storage Service (Amazon S3) bucket.</p>
    #[doc(hidden)]
    pub output_s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The S3 bucket subfolder.</p>
    #[doc(hidden)]
    pub output_s3_key_prefix: std::option::Option<std::string::String>,
    /// <p>The parameters for the <code>RUN_COMMAND</code> task execution.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
    #[doc(hidden)]
    pub service_role_arn: std::option::Option<std::string::String>,
    /// <p>If this time is reached and the command hasn't already started running, it doesn't run.</p>
    #[doc(hidden)]
    pub timeout_seconds: std::option::Option<i32>,
}
impl MaintenanceWindowRunCommandParameters {
    /// <p>Information about the commands to run.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>Configuration options for sending command output to Amazon CloudWatch Logs.</p>
    pub fn cloud_watch_output_config(
        &self,
    ) -> std::option::Option<&crate::types::CloudWatchOutputConfig> {
        self.cloud_watch_output_config.as_ref()
    }
    /// <p>The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.</p>
    pub fn document_hash(&self) -> std::option::Option<&str> {
        self.document_hash.as_deref()
    }
    /// <p>SHA-256 or SHA-1. SHA-1 hashes have been deprecated.</p>
    pub fn document_hash_type(&self) -> std::option::Option<&crate::types::DocumentHashType> {
        self.document_hash_type.as_ref()
    }
    /// <p>The Amazon Web Services Systems Manager document (SSM document) version to use in the request. You can specify <code>$DEFAULT</code>, <code>$LATEST</code>, or a specific version number. If you run commands by using the Amazon Web Services CLI, then you must escape the first two options by using a backslash. If you specify a version number, then you don't need to use the backslash. For example:</p>
    /// <p> <code>--document-version "\$DEFAULT"</code> </p>
    /// <p> <code>--document-version "\$LATEST"</code> </p>
    /// <p> <code>--document-version "3"</code> </p>
    pub fn document_version(&self) -> std::option::Option<&str> {
        self.document_version.as_deref()
    }
    /// <p>Configurations for sending notifications about command status changes on a per-managed node basis.</p>
    pub fn notification_config(&self) -> std::option::Option<&crate::types::NotificationConfig> {
        self.notification_config.as_ref()
    }
    /// <p>The name of the Amazon Simple Storage Service (Amazon S3) bucket.</p>
    pub fn output_s3_bucket_name(&self) -> std::option::Option<&str> {
        self.output_s3_bucket_name.as_deref()
    }
    /// <p>The S3 bucket subfolder.</p>
    pub fn output_s3_key_prefix(&self) -> std::option::Option<&str> {
        self.output_s3_key_prefix.as_deref()
    }
    /// <p>The parameters for the <code>RUN_COMMAND</code> task execution.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.parameters.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
    pub fn service_role_arn(&self) -> std::option::Option<&str> {
        self.service_role_arn.as_deref()
    }
    /// <p>If this time is reached and the command hasn't already started running, it doesn't run.</p>
    pub fn timeout_seconds(&self) -> std::option::Option<i32> {
        self.timeout_seconds
    }
}
impl std::fmt::Debug for MaintenanceWindowRunCommandParameters {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MaintenanceWindowRunCommandParameters");
        formatter.field("comment", &self.comment);
        formatter.field("cloud_watch_output_config", &self.cloud_watch_output_config);
        formatter.field("document_hash", &self.document_hash);
        formatter.field("document_hash_type", &self.document_hash_type);
        formatter.field("document_version", &self.document_version);
        formatter.field("notification_config", &self.notification_config);
        formatter.field("output_s3_bucket_name", &self.output_s3_bucket_name);
        formatter.field("output_s3_key_prefix", &self.output_s3_key_prefix);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("service_role_arn", &self.service_role_arn);
        formatter.field("timeout_seconds", &self.timeout_seconds);
        formatter.finish()
    }
}
impl MaintenanceWindowRunCommandParameters {
    /// Creates a new builder-style object to manufacture [`MaintenanceWindowRunCommandParameters`](crate::types::MaintenanceWindowRunCommandParameters).
    pub fn builder() -> crate::types::builders::MaintenanceWindowRunCommandParametersBuilder {
        crate::types::builders::MaintenanceWindowRunCommandParametersBuilder::default()
    }
}

/// A builder for [`MaintenanceWindowRunCommandParameters`](crate::types::MaintenanceWindowRunCommandParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct MaintenanceWindowRunCommandParametersBuilder {
    pub(crate) comment: std::option::Option<std::string::String>,
    pub(crate) cloud_watch_output_config: std::option::Option<crate::types::CloudWatchOutputConfig>,
    pub(crate) document_hash: std::option::Option<std::string::String>,
    pub(crate) document_hash_type: std::option::Option<crate::types::DocumentHashType>,
    pub(crate) document_version: std::option::Option<std::string::String>,
    pub(crate) notification_config: std::option::Option<crate::types::NotificationConfig>,
    pub(crate) output_s3_bucket_name: std::option::Option<std::string::String>,
    pub(crate) output_s3_key_prefix: std::option::Option<std::string::String>,
    pub(crate) parameters: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) service_role_arn: std::option::Option<std::string::String>,
    pub(crate) timeout_seconds: std::option::Option<i32>,
}
impl MaintenanceWindowRunCommandParametersBuilder {
    /// <p>Information about the commands to run.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>Information about the commands to run.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>Configuration options for sending command output to Amazon CloudWatch Logs.</p>
    pub fn cloud_watch_output_config(
        mut self,
        input: crate::types::CloudWatchOutputConfig,
    ) -> Self {
        self.cloud_watch_output_config = Some(input);
        self
    }
    /// <p>Configuration options for sending command output to Amazon CloudWatch Logs.</p>
    pub fn set_cloud_watch_output_config(
        mut self,
        input: std::option::Option<crate::types::CloudWatchOutputConfig>,
    ) -> Self {
        self.cloud_watch_output_config = input;
        self
    }
    /// <p>The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.</p>
    pub fn document_hash(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_hash = Some(input.into());
        self
    }
    /// <p>The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.</p>
    pub fn set_document_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_hash = input;
        self
    }
    /// <p>SHA-256 or SHA-1. SHA-1 hashes have been deprecated.</p>
    pub fn document_hash_type(mut self, input: crate::types::DocumentHashType) -> Self {
        self.document_hash_type = Some(input);
        self
    }
    /// <p>SHA-256 or SHA-1. SHA-1 hashes have been deprecated.</p>
    pub fn set_document_hash_type(
        mut self,
        input: std::option::Option<crate::types::DocumentHashType>,
    ) -> Self {
        self.document_hash_type = input;
        self
    }
    /// <p>The Amazon Web Services Systems Manager document (SSM document) version to use in the request. You can specify <code>$DEFAULT</code>, <code>$LATEST</code>, or a specific version number. If you run commands by using the Amazon Web Services CLI, then you must escape the first two options by using a backslash. If you specify a version number, then you don't need to use the backslash. For example:</p>
    /// <p> <code>--document-version "\$DEFAULT"</code> </p>
    /// <p> <code>--document-version "\$LATEST"</code> </p>
    /// <p> <code>--document-version "3"</code> </p>
    pub fn document_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_version = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Systems Manager document (SSM document) version to use in the request. You can specify <code>$DEFAULT</code>, <code>$LATEST</code>, or a specific version number. If you run commands by using the Amazon Web Services CLI, then you must escape the first two options by using a backslash. If you specify a version number, then you don't need to use the backslash. For example:</p>
    /// <p> <code>--document-version "\$DEFAULT"</code> </p>
    /// <p> <code>--document-version "\$LATEST"</code> </p>
    /// <p> <code>--document-version "3"</code> </p>
    pub fn set_document_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_version = input;
        self
    }
    /// <p>Configurations for sending notifications about command status changes on a per-managed node basis.</p>
    pub fn notification_config(mut self, input: crate::types::NotificationConfig) -> Self {
        self.notification_config = Some(input);
        self
    }
    /// <p>Configurations for sending notifications about command status changes on a per-managed node basis.</p>
    pub fn set_notification_config(
        mut self,
        input: std::option::Option<crate::types::NotificationConfig>,
    ) -> Self {
        self.notification_config = input;
        self
    }
    /// <p>The name of the Amazon Simple Storage Service (Amazon S3) bucket.</p>
    pub fn output_s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.output_s3_bucket_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon Simple Storage Service (Amazon S3) bucket.</p>
    pub fn set_output_s3_bucket_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.output_s3_bucket_name = input;
        self
    }
    /// <p>The S3 bucket subfolder.</p>
    pub fn output_s3_key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.output_s3_key_prefix = Some(input.into());
        self
    }
    /// <p>The S3 bucket subfolder.</p>
    pub fn set_output_s3_key_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.output_s3_key_prefix = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters for the <code>RUN_COMMAND</code> task execution.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = Some(hash_map);
        self
    }
    /// <p>The parameters for the <code>RUN_COMMAND</code> task execution.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
    pub fn service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
    pub fn set_service_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role_arn = input;
        self
    }
    /// <p>If this time is reached and the command hasn't already started running, it doesn't run.</p>
    pub fn timeout_seconds(mut self, input: i32) -> Self {
        self.timeout_seconds = Some(input);
        self
    }
    /// <p>If this time is reached and the command hasn't already started running, it doesn't run.</p>
    pub fn set_timeout_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`MaintenanceWindowRunCommandParameters`](crate::types::MaintenanceWindowRunCommandParameters).
    pub fn build(self) -> crate::types::MaintenanceWindowRunCommandParameters {
        crate::types::MaintenanceWindowRunCommandParameters {
            comment: self.comment,
            cloud_watch_output_config: self.cloud_watch_output_config,
            document_hash: self.document_hash,
            document_hash_type: self.document_hash_type,
            document_version: self.document_version,
            notification_config: self.notification_config,
            output_s3_bucket_name: self.output_s3_bucket_name,
            output_s3_key_prefix: self.output_s3_key_prefix,
            parameters: self.parameters,
            service_role_arn: self.service_role_arn,
            timeout_seconds: self.timeout_seconds,
        }
    }
}
impl std::fmt::Debug for MaintenanceWindowRunCommandParametersBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MaintenanceWindowRunCommandParametersBuilder");
        formatter.field("comment", &self.comment);
        formatter.field("cloud_watch_output_config", &self.cloud_watch_output_config);
        formatter.field("document_hash", &self.document_hash);
        formatter.field("document_hash_type", &self.document_hash_type);
        formatter.field("document_version", &self.document_version);
        formatter.field("notification_config", &self.notification_config);
        formatter.field("output_s3_bucket_name", &self.output_s3_bucket_name);
        formatter.field("output_s3_key_prefix", &self.output_s3_key_prefix);
        formatter.field("parameters", &"*** Sensitive Data Redacted ***");
        formatter.field("service_role_arn", &self.service_role_arn);
        formatter.field("timeout_seconds", &self.timeout_seconds);
        formatter.finish()
    }
}
