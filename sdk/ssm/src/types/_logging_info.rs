// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an Amazon Simple Storage Service (Amazon S3) bucket to write managed node-level logs to.</p> <note>
/// <p> <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoggingInfo {
    /// <p>The name of an S3 bucket where execution logs are stored.</p>
    #[doc(hidden)]
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>(Optional) The S3 bucket subfolder. </p>
    #[doc(hidden)]
    pub s3_key_prefix: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region where the S3 bucket is located.</p>
    #[doc(hidden)]
    pub s3_region: std::option::Option<std::string::String>,
}
impl LoggingInfo {
    /// <p>The name of an S3 bucket where execution logs are stored.</p>
    pub fn s3_bucket_name(&self) -> std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>(Optional) The S3 bucket subfolder. </p>
    pub fn s3_key_prefix(&self) -> std::option::Option<&str> {
        self.s3_key_prefix.as_deref()
    }
    /// <p>The Amazon Web Services Region where the S3 bucket is located.</p>
    pub fn s3_region(&self) -> std::option::Option<&str> {
        self.s3_region.as_deref()
    }
}
impl LoggingInfo {
    /// Creates a new builder-style object to manufacture [`LoggingInfo`](crate::types::LoggingInfo).
    pub fn builder() -> crate::types::builders::LoggingInfoBuilder {
        crate::types::builders::LoggingInfoBuilder::default()
    }
}

/// A builder for [`LoggingInfo`](crate::types::LoggingInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoggingInfoBuilder {
    pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
    pub(crate) s3_key_prefix: std::option::Option<std::string::String>,
    pub(crate) s3_region: std::option::Option<std::string::String>,
}
impl LoggingInfoBuilder {
    /// <p>The name of an S3 bucket where execution logs are stored.</p>
    pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_name = Some(input.into());
        self
    }
    /// <p>The name of an S3 bucket where execution logs are stored.</p>
    pub fn set_s3_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>(Optional) The S3 bucket subfolder. </p>
    pub fn s3_key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_key_prefix = Some(input.into());
        self
    }
    /// <p>(Optional) The S3 bucket subfolder. </p>
    pub fn set_s3_key_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_key_prefix = input;
        self
    }
    /// <p>The Amazon Web Services Region where the S3 bucket is located.</p>
    pub fn s3_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the S3 bucket is located.</p>
    pub fn set_s3_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_region = input;
        self
    }
    /// Consumes the builder and constructs a [`LoggingInfo`](crate::types::LoggingInfo).
    pub fn build(self) -> crate::types::LoggingInfo {
        crate::types::LoggingInfo {
            s3_bucket_name: self.s3_bucket_name,
            s3_key_prefix: self.s3_key_prefix,
            s3_region: self.s3_region,
        }
    }
}
