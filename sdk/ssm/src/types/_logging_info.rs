// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an Amazon Simple Storage Service (Amazon S3) bucket to write managed node-level logs to.</p> <note>
/// <p> <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoggingInfo {
    /// <p>The name of an S3 bucket where execution logs are stored.</p>
    pub s3_bucket_name: ::std::string::String,
    /// <p>(Optional) The S3 bucket subfolder. </p>
    pub s3_key_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the S3 bucket is located.</p>
    pub s3_region: ::std::string::String,
}
impl LoggingInfo {
    /// <p>The name of an S3 bucket where execution logs are stored.</p>
    pub fn s3_bucket_name(&self) -> &str {
        use std::ops::Deref;
        self.s3_bucket_name.deref()
    }
    /// <p>(Optional) The S3 bucket subfolder. </p>
    pub fn s3_key_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_key_prefix.as_deref()
    }
    /// <p>The Amazon Web Services Region where the S3 bucket is located.</p>
    pub fn s3_region(&self) -> &str {
        use std::ops::Deref;
        self.s3_region.deref()
    }
}
impl LoggingInfo {
    /// Creates a new builder-style object to manufacture [`LoggingInfo`](crate::types::LoggingInfo).
    pub fn builder() -> crate::types::builders::LoggingInfoBuilder {
        crate::types::builders::LoggingInfoBuilder::default()
    }
}

/// A builder for [`LoggingInfo`](crate::types::LoggingInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoggingInfoBuilder {
    pub(crate) s3_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_key_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) s3_region: ::std::option::Option<::std::string::String>,
}
impl LoggingInfoBuilder {
    /// <p>The name of an S3 bucket where execution logs are stored.</p>
    /// This field is required.
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an S3 bucket where execution logs are stored.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The name of an S3 bucket where execution logs are stored.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_name
    }
    /// <p>(Optional) The S3 bucket subfolder. </p>
    pub fn s3_key_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_key_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Optional) The S3 bucket subfolder. </p>
    pub fn set_s3_key_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_key_prefix = input;
        self
    }
    /// <p>(Optional) The S3 bucket subfolder. </p>
    pub fn get_s3_key_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_key_prefix
    }
    /// <p>The Amazon Web Services Region where the S3 bucket is located.</p>
    /// This field is required.
    pub fn s3_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the S3 bucket is located.</p>
    pub fn set_s3_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the S3 bucket is located.</p>
    pub fn get_s3_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_region
    }
    /// Consumes the builder and constructs a [`LoggingInfo`](crate::types::LoggingInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_bucket_name`](crate::types::builders::LoggingInfoBuilder::s3_bucket_name)
    /// - [`s3_region`](crate::types::builders::LoggingInfoBuilder::s3_region)
    pub fn build(self) -> ::std::result::Result<crate::types::LoggingInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LoggingInfo {
            s3_bucket_name: self.s3_bucket_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_bucket_name",
                    "s3_bucket_name was not specified but it is required when building LoggingInfo",
                )
            })?,
            s3_key_prefix: self.s3_key_prefix,
            s3_region: self.s3_region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_region",
                    "s3_region was not specified but it is required when building LoggingInfo",
                )
            })?,
        })
    }
}
