// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `PatchFilterKey`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let patchfilterkey = unimplemented!();
/// match patchfilterkey {
///     PatchFilterKey::AdvisoryId => { /* ... */ },
///     PatchFilterKey::Arch => { /* ... */ },
///     PatchFilterKey::BugzillaId => { /* ... */ },
///     PatchFilterKey::Classification => { /* ... */ },
///     PatchFilterKey::CveId => { /* ... */ },
///     PatchFilterKey::Epoch => { /* ... */ },
///     PatchFilterKey::MsrcSeverity => { /* ... */ },
///     PatchFilterKey::Name => { /* ... */ },
///     PatchFilterKey::PatchId => { /* ... */ },
///     PatchFilterKey::PatchSet => { /* ... */ },
///     PatchFilterKey::Priority => { /* ... */ },
///     PatchFilterKey::Product => { /* ... */ },
///     PatchFilterKey::ProductFamily => { /* ... */ },
///     PatchFilterKey::Release => { /* ... */ },
///     PatchFilterKey::Repository => { /* ... */ },
///     PatchFilterKey::Section => { /* ... */ },
///     PatchFilterKey::Security => { /* ... */ },
///     PatchFilterKey::Severity => { /* ... */ },
///     PatchFilterKey::Version => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `patchfilterkey` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `PatchFilterKey::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `PatchFilterKey::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `PatchFilterKey::NewFeature` is defined.
/// Specifically, when `patchfilterkey` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `PatchFilterKey::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum PatchFilterKey {
    #[allow(missing_docs)] // documentation missing in model
    AdvisoryId,
    #[allow(missing_docs)] // documentation missing in model
    Arch,
    #[allow(missing_docs)] // documentation missing in model
    BugzillaId,
    #[allow(missing_docs)] // documentation missing in model
    Classification,
    #[allow(missing_docs)] // documentation missing in model
    CveId,
    #[allow(missing_docs)] // documentation missing in model
    Epoch,
    #[allow(missing_docs)] // documentation missing in model
    MsrcSeverity,
    #[allow(missing_docs)] // documentation missing in model
    Name,
    #[allow(missing_docs)] // documentation missing in model
    PatchId,
    #[allow(missing_docs)] // documentation missing in model
    PatchSet,
    #[allow(missing_docs)] // documentation missing in model
    Priority,
    #[allow(missing_docs)] // documentation missing in model
    Product,
    #[allow(missing_docs)] // documentation missing in model
    ProductFamily,
    #[allow(missing_docs)] // documentation missing in model
    Release,
    #[allow(missing_docs)] // documentation missing in model
    Repository,
    #[allow(missing_docs)] // documentation missing in model
    Section,
    #[allow(missing_docs)] // documentation missing in model
    Security,
    #[allow(missing_docs)] // documentation missing in model
    Severity,
    #[allow(missing_docs)] // documentation missing in model
    Version,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for PatchFilterKey {
    fn from(s: &str) -> Self {
        match s {
            "ADVISORY_ID" => PatchFilterKey::AdvisoryId,
            "ARCH" => PatchFilterKey::Arch,
            "BUGZILLA_ID" => PatchFilterKey::BugzillaId,
            "CLASSIFICATION" => PatchFilterKey::Classification,
            "CVE_ID" => PatchFilterKey::CveId,
            "EPOCH" => PatchFilterKey::Epoch,
            "MSRC_SEVERITY" => PatchFilterKey::MsrcSeverity,
            "NAME" => PatchFilterKey::Name,
            "PATCH_ID" => PatchFilterKey::PatchId,
            "PATCH_SET" => PatchFilterKey::PatchSet,
            "PRIORITY" => PatchFilterKey::Priority,
            "PRODUCT" => PatchFilterKey::Product,
            "PRODUCT_FAMILY" => PatchFilterKey::ProductFamily,
            "RELEASE" => PatchFilterKey::Release,
            "REPOSITORY" => PatchFilterKey::Repository,
            "SECTION" => PatchFilterKey::Section,
            "SECURITY" => PatchFilterKey::Security,
            "SEVERITY" => PatchFilterKey::Severity,
            "VERSION" => PatchFilterKey::Version,
            other => {
                PatchFilterKey::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for PatchFilterKey {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(PatchFilterKey::from(s))
    }
}
impl PatchFilterKey {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            PatchFilterKey::AdvisoryId => "ADVISORY_ID",
            PatchFilterKey::Arch => "ARCH",
            PatchFilterKey::BugzillaId => "BUGZILLA_ID",
            PatchFilterKey::Classification => "CLASSIFICATION",
            PatchFilterKey::CveId => "CVE_ID",
            PatchFilterKey::Epoch => "EPOCH",
            PatchFilterKey::MsrcSeverity => "MSRC_SEVERITY",
            PatchFilterKey::Name => "NAME",
            PatchFilterKey::PatchId => "PATCH_ID",
            PatchFilterKey::PatchSet => "PATCH_SET",
            PatchFilterKey::Priority => "PRIORITY",
            PatchFilterKey::Product => "PRODUCT",
            PatchFilterKey::ProductFamily => "PRODUCT_FAMILY",
            PatchFilterKey::Release => "RELEASE",
            PatchFilterKey::Repository => "REPOSITORY",
            PatchFilterKey::Section => "SECTION",
            PatchFilterKey::Security => "SECURITY",
            PatchFilterKey::Severity => "SEVERITY",
            PatchFilterKey::Version => "VERSION",
            PatchFilterKey::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ADVISORY_ID",
            "ARCH",
            "BUGZILLA_ID",
            "CLASSIFICATION",
            "CVE_ID",
            "EPOCH",
            "MSRC_SEVERITY",
            "NAME",
            "PATCH_ID",
            "PATCH_SET",
            "PRIORITY",
            "PRODUCT",
            "PRODUCT_FAMILY",
            "RELEASE",
            "REPOSITORY",
            "SECTION",
            "SECURITY",
            "SEVERITY",
            "VERSION",
        ]
    }
}
impl AsRef<str> for PatchFilterKey {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
