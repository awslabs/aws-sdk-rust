// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The OpsData summary.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpsEntityItem {
    /// <p>The time the OpsData was captured.</p>
    pub capture_time: ::std::option::Option<::std::string::String>,
    /// <p>The details of an OpsData summary.</p>
    pub content: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>>,
}
impl OpsEntityItem {
    /// <p>The time the OpsData was captured.</p>
    pub fn capture_time(&self) -> ::std::option::Option<&str> {
        self.capture_time.as_deref()
    }
    /// <p>The details of an OpsData summary.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.content.is_none()`.
    pub fn content(&self) -> &[::std::collections::HashMap<::std::string::String, ::std::string::String>] {
        self.content.as_deref().unwrap_or_default()
    }
}
impl OpsEntityItem {
    /// Creates a new builder-style object to manufacture [`OpsEntityItem`](crate::types::OpsEntityItem).
    pub fn builder() -> crate::types::builders::OpsEntityItemBuilder {
        crate::types::builders::OpsEntityItemBuilder::default()
    }
}

/// A builder for [`OpsEntityItem`](crate::types::OpsEntityItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OpsEntityItemBuilder {
    pub(crate) capture_time: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>>,
}
impl OpsEntityItemBuilder {
    /// <p>The time the OpsData was captured.</p>
    pub fn capture_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capture_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time the OpsData was captured.</p>
    pub fn set_capture_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capture_time = input;
        self
    }
    /// <p>The time the OpsData was captured.</p>
    pub fn get_capture_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.capture_time
    }
    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// <p>The details of an OpsData summary.</p>
    pub fn content(mut self, input: ::std::collections::HashMap<::std::string::String, ::std::string::String>) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = ::std::option::Option::Some(v);
        self
    }
    /// <p>The details of an OpsData summary.</p>
    pub fn set_content(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>>,
    ) -> Self {
        self.content = input;
        self
    }
    /// <p>The details of an OpsData summary.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>> {
        &self.content
    }
    /// Consumes the builder and constructs a [`OpsEntityItem`](crate::types::OpsEntityItem).
    pub fn build(self) -> crate::types::OpsEntityItem {
        crate::types::OpsEntityItem {
            capture_time: self.capture_time,
            content: self.content,
        }
    }
}
