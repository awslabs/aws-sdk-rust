// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of patch filters, typically used for approval rules.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PatchFilterGroup {
    /// <p>The set of patch filters that make up the group.</p>
    #[doc(hidden)]
    pub patch_filters: std::option::Option<std::vec::Vec<crate::types::PatchFilter>>,
}
impl PatchFilterGroup {
    /// <p>The set of patch filters that make up the group.</p>
    pub fn patch_filters(&self) -> std::option::Option<&[crate::types::PatchFilter]> {
        self.patch_filters.as_deref()
    }
}
impl PatchFilterGroup {
    /// Creates a new builder-style object to manufacture [`PatchFilterGroup`](crate::types::PatchFilterGroup).
    pub fn builder() -> crate::types::builders::PatchFilterGroupBuilder {
        crate::types::builders::PatchFilterGroupBuilder::default()
    }
}

/// A builder for [`PatchFilterGroup`](crate::types::PatchFilterGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PatchFilterGroupBuilder {
    pub(crate) patch_filters: std::option::Option<std::vec::Vec<crate::types::PatchFilter>>,
}
impl PatchFilterGroupBuilder {
    /// Appends an item to `patch_filters`.
    ///
    /// To override the contents of this collection use [`set_patch_filters`](Self::set_patch_filters).
    ///
    /// <p>The set of patch filters that make up the group.</p>
    pub fn patch_filters(mut self, input: crate::types::PatchFilter) -> Self {
        let mut v = self.patch_filters.unwrap_or_default();
        v.push(input);
        self.patch_filters = Some(v);
        self
    }
    /// <p>The set of patch filters that make up the group.</p>
    pub fn set_patch_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PatchFilter>>,
    ) -> Self {
        self.patch_filters = input;
        self
    }
    /// Consumes the builder and constructs a [`PatchFilterGroup`](crate::types::PatchFilterGroup).
    pub fn build(self) -> crate::types::PatchFilterGroup {
        crate::types::PatchFilterGroup {
            patch_filters: self.patch_filters,
        }
    }
}
