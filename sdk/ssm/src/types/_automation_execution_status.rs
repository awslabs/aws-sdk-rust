// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AutomationExecutionStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let automationexecutionstatus = unimplemented!();
/// match automationexecutionstatus {
///     AutomationExecutionStatus::Approved => { /* ... */ },
///     AutomationExecutionStatus::Cancelled => { /* ... */ },
///     AutomationExecutionStatus::Cancelling => { /* ... */ },
///     AutomationExecutionStatus::ChangeCalendarOverrideApproved => { /* ... */ },
///     AutomationExecutionStatus::ChangeCalendarOverrideRejected => { /* ... */ },
///     AutomationExecutionStatus::CompletedWithFailure => { /* ... */ },
///     AutomationExecutionStatus::CompletedWithSuccess => { /* ... */ },
///     AutomationExecutionStatus::Failed => { /* ... */ },
///     AutomationExecutionStatus::Inprogress => { /* ... */ },
///     AutomationExecutionStatus::Pending => { /* ... */ },
///     AutomationExecutionStatus::PendingApproval => { /* ... */ },
///     AutomationExecutionStatus::PendingChangeCalendarOverride => { /* ... */ },
///     AutomationExecutionStatus::Rejected => { /* ... */ },
///     AutomationExecutionStatus::RunbookInprogress => { /* ... */ },
///     AutomationExecutionStatus::Scheduled => { /* ... */ },
///     AutomationExecutionStatus::Success => { /* ... */ },
///     AutomationExecutionStatus::Timedout => { /* ... */ },
///     AutomationExecutionStatus::Waiting => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `automationexecutionstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AutomationExecutionStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AutomationExecutionStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AutomationExecutionStatus::NewFeature` is defined.
/// Specifically, when `automationexecutionstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AutomationExecutionStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AutomationExecutionStatus {
    #[allow(missing_docs)] // documentation missing in model
    Approved,
    #[allow(missing_docs)] // documentation missing in model
    Cancelled,
    #[allow(missing_docs)] // documentation missing in model
    Cancelling,
    #[allow(missing_docs)] // documentation missing in model
    ChangeCalendarOverrideApproved,
    #[allow(missing_docs)] // documentation missing in model
    ChangeCalendarOverrideRejected,
    #[allow(missing_docs)] // documentation missing in model
    CompletedWithFailure,
    #[allow(missing_docs)] // documentation missing in model
    CompletedWithSuccess,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    Inprogress,
    #[allow(missing_docs)] // documentation missing in model
    Pending,
    #[allow(missing_docs)] // documentation missing in model
    PendingApproval,
    #[allow(missing_docs)] // documentation missing in model
    PendingChangeCalendarOverride,
    #[allow(missing_docs)] // documentation missing in model
    Rejected,
    #[allow(missing_docs)] // documentation missing in model
    RunbookInprogress,
    #[allow(missing_docs)] // documentation missing in model
    Scheduled,
    #[allow(missing_docs)] // documentation missing in model
    Success,
    #[allow(missing_docs)] // documentation missing in model
    Timedout,
    #[allow(missing_docs)] // documentation missing in model
    Waiting,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AutomationExecutionStatus {
    fn from(s: &str) -> Self {
        match s {
            "Approved" => AutomationExecutionStatus::Approved,
            "Cancelled" => AutomationExecutionStatus::Cancelled,
            "Cancelling" => AutomationExecutionStatus::Cancelling,
            "ChangeCalendarOverrideApproved" => {
                AutomationExecutionStatus::ChangeCalendarOverrideApproved
            }
            "ChangeCalendarOverrideRejected" => {
                AutomationExecutionStatus::ChangeCalendarOverrideRejected
            }
            "CompletedWithFailure" => AutomationExecutionStatus::CompletedWithFailure,
            "CompletedWithSuccess" => AutomationExecutionStatus::CompletedWithSuccess,
            "Failed" => AutomationExecutionStatus::Failed,
            "InProgress" => AutomationExecutionStatus::Inprogress,
            "Pending" => AutomationExecutionStatus::Pending,
            "PendingApproval" => AutomationExecutionStatus::PendingApproval,
            "PendingChangeCalendarOverride" => {
                AutomationExecutionStatus::PendingChangeCalendarOverride
            }
            "Rejected" => AutomationExecutionStatus::Rejected,
            "RunbookInProgress" => AutomationExecutionStatus::RunbookInprogress,
            "Scheduled" => AutomationExecutionStatus::Scheduled,
            "Success" => AutomationExecutionStatus::Success,
            "TimedOut" => AutomationExecutionStatus::Timedout,
            "Waiting" => AutomationExecutionStatus::Waiting,
            other => AutomationExecutionStatus::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for AutomationExecutionStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AutomationExecutionStatus::from(s))
    }
}
impl AutomationExecutionStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AutomationExecutionStatus::Approved => "Approved",
            AutomationExecutionStatus::Cancelled => "Cancelled",
            AutomationExecutionStatus::Cancelling => "Cancelling",
            AutomationExecutionStatus::ChangeCalendarOverrideApproved => {
                "ChangeCalendarOverrideApproved"
            }
            AutomationExecutionStatus::ChangeCalendarOverrideRejected => {
                "ChangeCalendarOverrideRejected"
            }
            AutomationExecutionStatus::CompletedWithFailure => "CompletedWithFailure",
            AutomationExecutionStatus::CompletedWithSuccess => "CompletedWithSuccess",
            AutomationExecutionStatus::Failed => "Failed",
            AutomationExecutionStatus::Inprogress => "InProgress",
            AutomationExecutionStatus::Pending => "Pending",
            AutomationExecutionStatus::PendingApproval => "PendingApproval",
            AutomationExecutionStatus::PendingChangeCalendarOverride => {
                "PendingChangeCalendarOverride"
            }
            AutomationExecutionStatus::Rejected => "Rejected",
            AutomationExecutionStatus::RunbookInprogress => "RunbookInProgress",
            AutomationExecutionStatus::Scheduled => "Scheduled",
            AutomationExecutionStatus::Success => "Success",
            AutomationExecutionStatus::Timedout => "TimedOut",
            AutomationExecutionStatus::Waiting => "Waiting",
            AutomationExecutionStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Approved",
            "Cancelled",
            "Cancelling",
            "ChangeCalendarOverrideApproved",
            "ChangeCalendarOverrideRejected",
            "CompletedWithFailure",
            "CompletedWithSuccess",
            "Failed",
            "InProgress",
            "Pending",
            "PendingApproval",
            "PendingChangeCalendarOverride",
            "Rejected",
            "RunbookInProgress",
            "Scheduled",
            "Success",
            "TimedOut",
            "Waiting",
        ]
    }
}
impl AsRef<str> for AutomationExecutionStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
