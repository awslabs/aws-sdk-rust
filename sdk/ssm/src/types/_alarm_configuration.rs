// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for the CloudWatch alarm you want to apply to an automation or command.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AlarmConfiguration {
    /// <p>If you specify <code>true</code> for this value, your automation or command continue to run even if we can't gather information about the state of your CloudWatch alarm. The default value is <code>false</code>.</p>
    #[doc(hidden)]
    pub ignore_poll_alarm_failure: bool,
    /// <p>The name of the CloudWatch alarm specified in the configuration.</p>
    #[doc(hidden)]
    pub alarms: std::option::Option<std::vec::Vec<crate::types::Alarm>>,
}
impl AlarmConfiguration {
    /// <p>If you specify <code>true</code> for this value, your automation or command continue to run even if we can't gather information about the state of your CloudWatch alarm. The default value is <code>false</code>.</p>
    pub fn ignore_poll_alarm_failure(&self) -> bool {
        self.ignore_poll_alarm_failure
    }
    /// <p>The name of the CloudWatch alarm specified in the configuration.</p>
    pub fn alarms(&self) -> std::option::Option<&[crate::types::Alarm]> {
        self.alarms.as_deref()
    }
}
impl AlarmConfiguration {
    /// Creates a new builder-style object to manufacture [`AlarmConfiguration`](crate::types::AlarmConfiguration).
    pub fn builder() -> crate::types::builders::AlarmConfigurationBuilder {
        crate::types::builders::AlarmConfigurationBuilder::default()
    }
}

/// A builder for [`AlarmConfiguration`](crate::types::AlarmConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AlarmConfigurationBuilder {
    pub(crate) ignore_poll_alarm_failure: std::option::Option<bool>,
    pub(crate) alarms: std::option::Option<std::vec::Vec<crate::types::Alarm>>,
}
impl AlarmConfigurationBuilder {
    /// <p>If you specify <code>true</code> for this value, your automation or command continue to run even if we can't gather information about the state of your CloudWatch alarm. The default value is <code>false</code>.</p>
    pub fn ignore_poll_alarm_failure(mut self, input: bool) -> Self {
        self.ignore_poll_alarm_failure = Some(input);
        self
    }
    /// <p>If you specify <code>true</code> for this value, your automation or command continue to run even if we can't gather information about the state of your CloudWatch alarm. The default value is <code>false</code>.</p>
    pub fn set_ignore_poll_alarm_failure(mut self, input: std::option::Option<bool>) -> Self {
        self.ignore_poll_alarm_failure = input;
        self
    }
    /// Appends an item to `alarms`.
    ///
    /// To override the contents of this collection use [`set_alarms`](Self::set_alarms).
    ///
    /// <p>The name of the CloudWatch alarm specified in the configuration.</p>
    pub fn alarms(mut self, input: crate::types::Alarm) -> Self {
        let mut v = self.alarms.unwrap_or_default();
        v.push(input);
        self.alarms = Some(v);
        self
    }
    /// <p>The name of the CloudWatch alarm specified in the configuration.</p>
    pub fn set_alarms(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Alarm>>,
    ) -> Self {
        self.alarms = input;
        self
    }
    /// Consumes the builder and constructs a [`AlarmConfiguration`](crate::types::AlarmConfiguration).
    pub fn build(self) -> crate::types::AlarmConfiguration {
        crate::types::AlarmConfiguration {
            ignore_poll_alarm_failure: self.ignore_poll_alarm_failure.unwrap_or_default(),
            alarms: self.alarms,
        }
    }
}
