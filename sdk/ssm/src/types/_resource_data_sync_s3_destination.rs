// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the target S3 bucket for the resource data sync.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceDataSyncS3Destination {
    /// <p>The name of the S3 bucket where the aggregated data is stored.</p>
    pub bucket_name: ::std::string::String,
    /// <p>An Amazon S3 prefix for the bucket.</p>
    pub prefix: ::std::option::Option<::std::string::String>,
    /// <p>A supported sync format. The following format is currently supported: JsonSerDe</p>
    pub sync_format: crate::types::ResourceDataSyncS3Format,
    /// <p>The Amazon Web Services Region with the S3 bucket targeted by the resource data sync.</p>
    pub region: ::std::string::String,
    /// <p>The ARN of an encryption key for a destination in Amazon S3. Must belong to the same Region as the destination S3 bucket.</p>
    pub awskms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Enables destination data sharing. By default, this field is <code>null</code>.</p>
    pub destination_data_sharing: ::std::option::Option<crate::types::ResourceDataSyncDestinationDataSharing>,
}
impl ResourceDataSyncS3Destination {
    /// <p>The name of the S3 bucket where the aggregated data is stored.</p>
    pub fn bucket_name(&self) -> &str {
        use std::ops::Deref;
        self.bucket_name.deref()
    }
    /// <p>An Amazon S3 prefix for the bucket.</p>
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>A supported sync format. The following format is currently supported: JsonSerDe</p>
    pub fn sync_format(&self) -> &crate::types::ResourceDataSyncS3Format {
        &self.sync_format
    }
    /// <p>The Amazon Web Services Region with the S3 bucket targeted by the resource data sync.</p>
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
    /// <p>The ARN of an encryption key for a destination in Amazon S3. Must belong to the same Region as the destination S3 bucket.</p>
    pub fn awskms_key_arn(&self) -> ::std::option::Option<&str> {
        self.awskms_key_arn.as_deref()
    }
    /// <p>Enables destination data sharing. By default, this field is <code>null</code>.</p>
    pub fn destination_data_sharing(&self) -> ::std::option::Option<&crate::types::ResourceDataSyncDestinationDataSharing> {
        self.destination_data_sharing.as_ref()
    }
}
impl ResourceDataSyncS3Destination {
    /// Creates a new builder-style object to manufacture [`ResourceDataSyncS3Destination`](crate::types::ResourceDataSyncS3Destination).
    pub fn builder() -> crate::types::builders::ResourceDataSyncS3DestinationBuilder {
        crate::types::builders::ResourceDataSyncS3DestinationBuilder::default()
    }
}

/// A builder for [`ResourceDataSyncS3Destination`](crate::types::ResourceDataSyncS3Destination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceDataSyncS3DestinationBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) sync_format: ::std::option::Option<crate::types::ResourceDataSyncS3Format>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) awskms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_data_sharing: ::std::option::Option<crate::types::ResourceDataSyncDestinationDataSharing>,
}
impl ResourceDataSyncS3DestinationBuilder {
    /// <p>The name of the S3 bucket where the aggregated data is stored.</p>
    /// This field is required.
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket where the aggregated data is stored.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The name of the S3 bucket where the aggregated data is stored.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>An Amazon S3 prefix for the bucket.</p>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon S3 prefix for the bucket.</p>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>An Amazon S3 prefix for the bucket.</p>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// <p>A supported sync format. The following format is currently supported: JsonSerDe</p>
    /// This field is required.
    pub fn sync_format(mut self, input: crate::types::ResourceDataSyncS3Format) -> Self {
        self.sync_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>A supported sync format. The following format is currently supported: JsonSerDe</p>
    pub fn set_sync_format(mut self, input: ::std::option::Option<crate::types::ResourceDataSyncS3Format>) -> Self {
        self.sync_format = input;
        self
    }
    /// <p>A supported sync format. The following format is currently supported: JsonSerDe</p>
    pub fn get_sync_format(&self) -> &::std::option::Option<crate::types::ResourceDataSyncS3Format> {
        &self.sync_format
    }
    /// <p>The Amazon Web Services Region with the S3 bucket targeted by the resource data sync.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region with the S3 bucket targeted by the resource data sync.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region with the S3 bucket targeted by the resource data sync.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The ARN of an encryption key for a destination in Amazon S3. Must belong to the same Region as the destination S3 bucket.</p>
    pub fn awskms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.awskms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an encryption key for a destination in Amazon S3. Must belong to the same Region as the destination S3 bucket.</p>
    pub fn set_awskms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.awskms_key_arn = input;
        self
    }
    /// <p>The ARN of an encryption key for a destination in Amazon S3. Must belong to the same Region as the destination S3 bucket.</p>
    pub fn get_awskms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.awskms_key_arn
    }
    /// <p>Enables destination data sharing. By default, this field is <code>null</code>.</p>
    pub fn destination_data_sharing(mut self, input: crate::types::ResourceDataSyncDestinationDataSharing) -> Self {
        self.destination_data_sharing = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables destination data sharing. By default, this field is <code>null</code>.</p>
    pub fn set_destination_data_sharing(mut self, input: ::std::option::Option<crate::types::ResourceDataSyncDestinationDataSharing>) -> Self {
        self.destination_data_sharing = input;
        self
    }
    /// <p>Enables destination data sharing. By default, this field is <code>null</code>.</p>
    pub fn get_destination_data_sharing(&self) -> &::std::option::Option<crate::types::ResourceDataSyncDestinationDataSharing> {
        &self.destination_data_sharing
    }
    /// Consumes the builder and constructs a [`ResourceDataSyncS3Destination`](crate::types::ResourceDataSyncS3Destination).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket_name`](crate::types::builders::ResourceDataSyncS3DestinationBuilder::bucket_name)
    /// - [`sync_format`](crate::types::builders::ResourceDataSyncS3DestinationBuilder::sync_format)
    /// - [`region`](crate::types::builders::ResourceDataSyncS3DestinationBuilder::region)
    pub fn build(self) -> ::std::result::Result<crate::types::ResourceDataSyncS3Destination, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResourceDataSyncS3Destination {
            bucket_name: self.bucket_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_name",
                    "bucket_name was not specified but it is required when building ResourceDataSyncS3Destination",
                )
            })?,
            prefix: self.prefix,
            sync_format: self.sync_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sync_format",
                    "sync_format was not specified but it is required when building ResourceDataSyncS3Destination",
                )
            })?,
            region: self.region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region",
                    "region was not specified but it is required when building ResourceDataSyncS3Destination",
                )
            })?,
            awskms_key_arn: self.awskms_key_arn,
            destination_data_sharing: self.destination_data_sharing,
        })
    }
}
