// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AutomationExecutionFilterKey`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let automationexecutionfilterkey = unimplemented!();
/// match automationexecutionfilterkey {
///     AutomationExecutionFilterKey::AutomationSubtype => { /* ... */ },
///     AutomationExecutionFilterKey::AutomationType => { /* ... */ },
///     AutomationExecutionFilterKey::CurrentAction => { /* ... */ },
///     AutomationExecutionFilterKey::DocumentNamePrefix => { /* ... */ },
///     AutomationExecutionFilterKey::ExecutionId => { /* ... */ },
///     AutomationExecutionFilterKey::ExecutionStatus => { /* ... */ },
///     AutomationExecutionFilterKey::OpsItemId => { /* ... */ },
///     AutomationExecutionFilterKey::ParentExecutionId => { /* ... */ },
///     AutomationExecutionFilterKey::StartTimeAfter => { /* ... */ },
///     AutomationExecutionFilterKey::StartTimeBefore => { /* ... */ },
///     AutomationExecutionFilterKey::TagKey => { /* ... */ },
///     AutomationExecutionFilterKey::TargetResourceGroup => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `automationexecutionfilterkey` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AutomationExecutionFilterKey::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AutomationExecutionFilterKey::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AutomationExecutionFilterKey::NewFeature` is defined.
/// Specifically, when `automationexecutionfilterkey` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AutomationExecutionFilterKey::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AutomationExecutionFilterKey {
    #[allow(missing_docs)] // documentation missing in model
    AutomationSubtype,
    #[allow(missing_docs)] // documentation missing in model
    AutomationType,
    #[allow(missing_docs)] // documentation missing in model
    CurrentAction,
    #[allow(missing_docs)] // documentation missing in model
    DocumentNamePrefix,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionId,
    #[allow(missing_docs)] // documentation missing in model
    ExecutionStatus,
    #[allow(missing_docs)] // documentation missing in model
    OpsItemId,
    #[allow(missing_docs)] // documentation missing in model
    ParentExecutionId,
    #[allow(missing_docs)] // documentation missing in model
    StartTimeAfter,
    #[allow(missing_docs)] // documentation missing in model
    StartTimeBefore,
    #[allow(missing_docs)] // documentation missing in model
    TagKey,
    #[allow(missing_docs)] // documentation missing in model
    TargetResourceGroup,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AutomationExecutionFilterKey {
    fn from(s: &str) -> Self {
        match s {
            "AutomationSubtype" => AutomationExecutionFilterKey::AutomationSubtype,
            "AutomationType" => AutomationExecutionFilterKey::AutomationType,
            "CurrentAction" => AutomationExecutionFilterKey::CurrentAction,
            "DocumentNamePrefix" => AutomationExecutionFilterKey::DocumentNamePrefix,
            "ExecutionId" => AutomationExecutionFilterKey::ExecutionId,
            "ExecutionStatus" => AutomationExecutionFilterKey::ExecutionStatus,
            "OpsItemId" => AutomationExecutionFilterKey::OpsItemId,
            "ParentExecutionId" => AutomationExecutionFilterKey::ParentExecutionId,
            "StartTimeAfter" => AutomationExecutionFilterKey::StartTimeAfter,
            "StartTimeBefore" => AutomationExecutionFilterKey::StartTimeBefore,
            "TagKey" => AutomationExecutionFilterKey::TagKey,
            "TargetResourceGroup" => AutomationExecutionFilterKey::TargetResourceGroup,
            other => AutomationExecutionFilterKey::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for AutomationExecutionFilterKey {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AutomationExecutionFilterKey::from(s))
    }
}
impl AutomationExecutionFilterKey {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AutomationExecutionFilterKey::AutomationSubtype => "AutomationSubtype",
            AutomationExecutionFilterKey::AutomationType => "AutomationType",
            AutomationExecutionFilterKey::CurrentAction => "CurrentAction",
            AutomationExecutionFilterKey::DocumentNamePrefix => "DocumentNamePrefix",
            AutomationExecutionFilterKey::ExecutionId => "ExecutionId",
            AutomationExecutionFilterKey::ExecutionStatus => "ExecutionStatus",
            AutomationExecutionFilterKey::OpsItemId => "OpsItemId",
            AutomationExecutionFilterKey::ParentExecutionId => "ParentExecutionId",
            AutomationExecutionFilterKey::StartTimeAfter => "StartTimeAfter",
            AutomationExecutionFilterKey::StartTimeBefore => "StartTimeBefore",
            AutomationExecutionFilterKey::TagKey => "TagKey",
            AutomationExecutionFilterKey::TargetResourceGroup => "TargetResourceGroup",
            AutomationExecutionFilterKey::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AutomationSubtype",
            "AutomationType",
            "CurrentAction",
            "DocumentNamePrefix",
            "ExecutionId",
            "ExecutionStatus",
            "OpsItemId",
            "ParentExecutionId",
            "StartTimeAfter",
            "StartTimeBefore",
            "TagKey",
            "TargetResourceGroup",
        ]
    }
}
impl AsRef<str> for AutomationExecutionFilterKey {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
