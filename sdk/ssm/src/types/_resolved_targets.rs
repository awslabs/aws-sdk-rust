// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about targets that resolved during the Automation execution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResolvedTargets {
    /// <p>A list of parameter values sent to targets that resolved during the Automation execution.</p>
    #[doc(hidden)]
    pub parameter_values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A boolean value indicating whether the resolved target list is truncated.</p>
    #[doc(hidden)]
    pub truncated: bool,
}
impl ResolvedTargets {
    /// <p>A list of parameter values sent to targets that resolved during the Automation execution.</p>
    pub fn parameter_values(&self) -> std::option::Option<&[std::string::String]> {
        self.parameter_values.as_deref()
    }
    /// <p>A boolean value indicating whether the resolved target list is truncated.</p>
    pub fn truncated(&self) -> bool {
        self.truncated
    }
}
impl ResolvedTargets {
    /// Creates a new builder-style object to manufacture [`ResolvedTargets`](crate::types::ResolvedTargets).
    pub fn builder() -> crate::types::builders::ResolvedTargetsBuilder {
        crate::types::builders::ResolvedTargetsBuilder::default()
    }
}

/// A builder for [`ResolvedTargets`](crate::types::ResolvedTargets).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResolvedTargetsBuilder {
    pub(crate) parameter_values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) truncated: std::option::Option<bool>,
}
impl ResolvedTargetsBuilder {
    /// Appends an item to `parameter_values`.
    ///
    /// To override the contents of this collection use [`set_parameter_values`](Self::set_parameter_values).
    ///
    /// <p>A list of parameter values sent to targets that resolved during the Automation execution.</p>
    pub fn parameter_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.parameter_values.unwrap_or_default();
        v.push(input.into());
        self.parameter_values = Some(v);
        self
    }
    /// <p>A list of parameter values sent to targets that resolved during the Automation execution.</p>
    pub fn set_parameter_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.parameter_values = input;
        self
    }
    /// <p>A boolean value indicating whether the resolved target list is truncated.</p>
    pub fn truncated(mut self, input: bool) -> Self {
        self.truncated = Some(input);
        self
    }
    /// <p>A boolean value indicating whether the resolved target list is truncated.</p>
    pub fn set_truncated(mut self, input: std::option::Option<bool>) -> Self {
        self.truncated = input;
        self
    }
    /// Consumes the builder and constructs a [`ResolvedTargets`](crate::types::ResolvedTargets).
    pub fn build(self) -> crate::types::ResolvedTargets {
        crate::types::ResolvedTargets {
            parameter_values: self.parameter_values,
            truncated: self.truncated.unwrap_or_default(),
        }
    }
}
