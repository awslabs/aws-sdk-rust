// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data type name for including resource data sync state. There are four sync states:</p>
/// <p> <code>OrganizationNotExists</code> (Your organization doesn't exist)</p>
/// <p> <code>NoPermissions</code> (The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Amazon Web Services Systems Manager Explorer.)</p>
/// <p> <code>InvalidOrganizationalUnit</code> (You specified or selected an invalid unit in the resource data sync configuration.)</p>
/// <p> <code>TrustedAccessDisabled</code> (You disabled Systems Manager access in the organization in Organizations.)</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceDataSyncSourceWithState {
    /// <p>The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in Organizations) or <code>singleAccountMultiRegions</code>.</p>
    pub source_type: ::std::option::Option<::std::string::String>,
    /// <p>The field name in <code>SyncSource</code> for the <code>ResourceDataSyncAwsOrganizationsSource</code> type.</p>
    pub aws_organizations_source: ::std::option::Option<crate::types::ResourceDataSyncAwsOrganizationsSource>,
    /// <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
    pub source_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those Regions come online.</p>
    pub include_future_regions: bool,
    /// <p>The data type name for including resource data sync state. There are four sync states:</p>
    /// <p> <code>OrganizationNotExists</code>: Your organization doesn't exist.</p>
    /// <p> <code>NoPermissions</code>: The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Explorer.</p>
    /// <p> <code>InvalidOrganizationalUnit</code>: You specified or selected an invalid unit in the resource data sync configuration.</p>
    /// <p> <code>TrustedAccessDisabled</code>: You disabled Systems Manager access in the organization in Organizations.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub enable_all_ops_data_sources: bool,
}
impl ResourceDataSyncSourceWithState {
    /// <p>The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in Organizations) or <code>singleAccountMultiRegions</code>.</p>
    pub fn source_type(&self) -> ::std::option::Option<&str> {
        self.source_type.as_deref()
    }
    /// <p>The field name in <code>SyncSource</code> for the <code>ResourceDataSyncAwsOrganizationsSource</code> type.</p>
    pub fn aws_organizations_source(&self) -> ::std::option::Option<&crate::types::ResourceDataSyncAwsOrganizationsSource> {
        self.aws_organizations_source.as_ref()
    }
    /// <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_regions.is_none()`.
    pub fn source_regions(&self) -> &[::std::string::String] {
        self.source_regions.as_deref().unwrap_or_default()
    }
    /// <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those Regions come online.</p>
    pub fn include_future_regions(&self) -> bool {
        self.include_future_regions
    }
    /// <p>The data type name for including resource data sync state. There are four sync states:</p>
    /// <p> <code>OrganizationNotExists</code>: Your organization doesn't exist.</p>
    /// <p> <code>NoPermissions</code>: The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Explorer.</p>
    /// <p> <code>InvalidOrganizationalUnit</code>: You specified or selected an invalid unit in the resource data sync configuration.</p>
    /// <p> <code>TrustedAccessDisabled</code>: You disabled Systems Manager access in the organization in Organizations.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn enable_all_ops_data_sources(&self) -> bool {
        self.enable_all_ops_data_sources
    }
}
impl ResourceDataSyncSourceWithState {
    /// Creates a new builder-style object to manufacture [`ResourceDataSyncSourceWithState`](crate::types::ResourceDataSyncSourceWithState).
    pub fn builder() -> crate::types::builders::ResourceDataSyncSourceWithStateBuilder {
        crate::types::builders::ResourceDataSyncSourceWithStateBuilder::default()
    }
}

/// A builder for [`ResourceDataSyncSourceWithState`](crate::types::ResourceDataSyncSourceWithState).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceDataSyncSourceWithStateBuilder {
    pub(crate) source_type: ::std::option::Option<::std::string::String>,
    pub(crate) aws_organizations_source: ::std::option::Option<crate::types::ResourceDataSyncAwsOrganizationsSource>,
    pub(crate) source_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) include_future_regions: ::std::option::Option<bool>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) enable_all_ops_data_sources: ::std::option::Option<bool>,
}
impl ResourceDataSyncSourceWithStateBuilder {
    /// <p>The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in Organizations) or <code>singleAccountMultiRegions</code>.</p>
    pub fn source_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in Organizations) or <code>singleAccountMultiRegions</code>.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in Organizations) or <code>singleAccountMultiRegions</code>.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_type
    }
    /// <p>The field name in <code>SyncSource</code> for the <code>ResourceDataSyncAwsOrganizationsSource</code> type.</p>
    pub fn aws_organizations_source(mut self, input: crate::types::ResourceDataSyncAwsOrganizationsSource) -> Self {
        self.aws_organizations_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field name in <code>SyncSource</code> for the <code>ResourceDataSyncAwsOrganizationsSource</code> type.</p>
    pub fn set_aws_organizations_source(mut self, input: ::std::option::Option<crate::types::ResourceDataSyncAwsOrganizationsSource>) -> Self {
        self.aws_organizations_source = input;
        self
    }
    /// <p>The field name in <code>SyncSource</code> for the <code>ResourceDataSyncAwsOrganizationsSource</code> type.</p>
    pub fn get_aws_organizations_source(&self) -> &::std::option::Option<crate::types::ResourceDataSyncAwsOrganizationsSource> {
        &self.aws_organizations_source
    }
    /// Appends an item to `source_regions`.
    ///
    /// To override the contents of this collection use [`set_source_regions`](Self::set_source_regions).
    ///
    /// <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
    pub fn source_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_regions.unwrap_or_default();
        v.push(input.into());
        self.source_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
    pub fn set_source_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_regions = input;
        self
    }
    /// <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
    pub fn get_source_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_regions
    }
    /// <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those Regions come online.</p>
    pub fn include_future_regions(mut self, input: bool) -> Self {
        self.include_future_regions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those Regions come online.</p>
    pub fn set_include_future_regions(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_future_regions = input;
        self
    }
    /// <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those Regions come online.</p>
    pub fn get_include_future_regions(&self) -> &::std::option::Option<bool> {
        &self.include_future_regions
    }
    /// <p>The data type name for including resource data sync state. There are four sync states:</p>
    /// <p> <code>OrganizationNotExists</code>: Your organization doesn't exist.</p>
    /// <p> <code>NoPermissions</code>: The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Explorer.</p>
    /// <p> <code>InvalidOrganizationalUnit</code>: You specified or selected an invalid unit in the resource data sync configuration.</p>
    /// <p> <code>TrustedAccessDisabled</code>: You disabled Systems Manager access in the organization in Organizations.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data type name for including resource data sync state. There are four sync states:</p>
    /// <p> <code>OrganizationNotExists</code>: Your organization doesn't exist.</p>
    /// <p> <code>NoPermissions</code>: The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Explorer.</p>
    /// <p> <code>InvalidOrganizationalUnit</code>: You specified or selected an invalid unit in the resource data sync configuration.</p>
    /// <p> <code>TrustedAccessDisabled</code>: You disabled Systems Manager access in the organization in Organizations.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The data type name for including resource data sync state. There are four sync states:</p>
    /// <p> <code>OrganizationNotExists</code>: Your organization doesn't exist.</p>
    /// <p> <code>NoPermissions</code>: The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Explorer.</p>
    /// <p> <code>InvalidOrganizationalUnit</code>: You specified or selected an invalid unit in the resource data sync configuration.</p>
    /// <p> <code>TrustedAccessDisabled</code>: You disabled Systems Manager access in the organization in Organizations.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn enable_all_ops_data_sources(mut self, input: bool) -> Self {
        self.enable_all_ops_data_sources = ::std::option::Option::Some(input);
        self
    }
    /// <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn set_enable_all_ops_data_sources(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_all_ops_data_sources = input;
        self
    }
    /// <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn get_enable_all_ops_data_sources(&self) -> &::std::option::Option<bool> {
        &self.enable_all_ops_data_sources
    }
    /// Consumes the builder and constructs a [`ResourceDataSyncSourceWithState`](crate::types::ResourceDataSyncSourceWithState).
    pub fn build(self) -> crate::types::ResourceDataSyncSourceWithState {
        crate::types::ResourceDataSyncSourceWithState {
            source_type: self.source_type,
            aws_organizations_source: self.aws_organizations_source,
            source_regions: self.source_regions,
            include_future_regions: self.include_future_regions.unwrap_or_default(),
            state: self.state,
            enable_all_ops_data_sources: self.enable_all_ops_data_sources.unwrap_or_default(),
        }
    }
}
