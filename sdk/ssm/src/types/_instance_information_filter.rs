// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a filter for a specific list of managed nodes. You can filter node information by using tags. You specify tags by using a key-value mapping.</p>
/// <p>Use this operation instead of the <code>DescribeInstanceInformationRequest$InstanceInformationFilterList</code> method. The <code>InstanceInformationFilterList</code> method is a legacy method and doesn't support tags. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceInformationFilter {
    /// <p>The name of the filter. </p>
    #[doc(hidden)]
    pub key: std::option::Option<crate::types::InstanceInformationFilterKey>,
    /// <p>The filter values.</p>
    #[doc(hidden)]
    pub value_set: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl InstanceInformationFilter {
    /// <p>The name of the filter. </p>
    pub fn key(&self) -> std::option::Option<&crate::types::InstanceInformationFilterKey> {
        self.key.as_ref()
    }
    /// <p>The filter values.</p>
    pub fn value_set(&self) -> std::option::Option<&[std::string::String]> {
        self.value_set.as_deref()
    }
}
impl InstanceInformationFilter {
    /// Creates a new builder-style object to manufacture [`InstanceInformationFilter`](crate::types::InstanceInformationFilter).
    pub fn builder() -> crate::types::builders::InstanceInformationFilterBuilder {
        crate::types::builders::InstanceInformationFilterBuilder::default()
    }
}

/// A builder for [`InstanceInformationFilter`](crate::types::InstanceInformationFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceInformationFilterBuilder {
    pub(crate) key: std::option::Option<crate::types::InstanceInformationFilterKey>,
    pub(crate) value_set: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl InstanceInformationFilterBuilder {
    /// <p>The name of the filter. </p>
    pub fn key(mut self, input: crate::types::InstanceInformationFilterKey) -> Self {
        self.key = Some(input);
        self
    }
    /// <p>The name of the filter. </p>
    pub fn set_key(
        mut self,
        input: std::option::Option<crate::types::InstanceInformationFilterKey>,
    ) -> Self {
        self.key = input;
        self
    }
    /// Appends an item to `value_set`.
    ///
    /// To override the contents of this collection use [`set_value_set`](Self::set_value_set).
    ///
    /// <p>The filter values.</p>
    pub fn value_set(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.value_set.unwrap_or_default();
        v.push(input.into());
        self.value_set = Some(v);
        self
    }
    /// <p>The filter values.</p>
    pub fn set_value_set(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.value_set = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceInformationFilter`](crate::types::InstanceInformationFilter).
    pub fn build(self) -> crate::types::InstanceInformationFilter {
        crate::types::InstanceInformationFilter {
            key: self.key,
            value_set: self.value_set,
        }
    }
}
