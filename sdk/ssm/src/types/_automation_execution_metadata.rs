// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a specific Automation execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomationExecutionMetadata {
    /// <p>The execution ID.</p>
    pub automation_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Automation runbook used during execution.</p>
    pub document_name: ::std::option::Option<::std::string::String>,
    /// <p>The document version used during the execution.</p>
    pub document_version: ::std::option::Option<::std::string::String>,
    /// <p>The status of the execution.</p>
    pub automation_execution_status: ::std::option::Option<crate::types::AutomationExecutionStatus>,
    /// <p>The time the execution started.</p>
    pub execution_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the execution finished. This isn't populated if the execution is still in progress.</p>
    pub execution_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The IAM role ARN of the user who ran the automation.</p>
    pub executed_by: ::std::option::Option<::std::string::String>,
    /// <p>An S3 bucket where execution information is stored.</p>
    pub log_file: ::std::option::Option<::std::string::String>,
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub outputs: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    /// <p>The Automation execution mode.</p>
    pub mode: ::std::option::Option<crate::types::ExecutionMode>,
    /// <p>The execution ID of the parent automation.</p>
    pub parent_automation_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the step that is currently running.</p>
    pub current_step_name: ::std::option::Option<::std::string::String>,
    /// <p>The action of the step that is currently running.</p>
    pub current_action: ::std::option::Option<::std::string::String>,
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub target_parameter_name: ::std::option::Option<::std::string::String>,
    /// <p>The targets defined by the user when starting the automation.</p>
    pub targets: ::std::option::Option<::std::vec::Vec<crate::types::Target>>,
    /// <p>The specified key-value mapping of document parameters to target resources.</p>
    pub target_maps:
        ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>>,
    /// <p>A list of targets that resolved during the execution.</p>
    pub resolved_targets: ::std::option::Option<crate::types::ResolvedTargets>,
    /// <p>The <code>MaxConcurrency</code> value specified by the user when starting the automation.</p>
    pub max_concurrency: ::std::option::Option<::std::string::String>,
    /// <p>The <code>MaxErrors</code> value specified by the user when starting the automation.</p>
    pub max_errors: ::std::option::Option<::std::string::String>,
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub target: ::std::option::Option<::std::string::String>,
    /// <p>Use this filter with <code>DescribeAutomationExecutions</code>. Specify either Local or CrossAccount. CrossAccount is an Automation that runs in multiple Amazon Web Services Regions and Amazon Web Services accounts. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html">Running Automation workflows in multiple Amazon Web Services Regions and accounts</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
    pub automation_type: ::std::option::Option<crate::types::AutomationType>,
    /// <p>The details for the CloudWatch alarm applied to your automation.</p>
    pub alarm_configuration: ::std::option::Option<crate::types::AlarmConfiguration>,
    /// <p>The CloudWatch alarm that was invoked by the automation.</p>
    pub triggered_alarms: ::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>>,
    /// <p>The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>.</p>
    pub automation_subtype: ::std::option::Option<crate::types::AutomationSubtype>,
    /// <p>The date and time the Automation operation is scheduled to start.</p>
    pub scheduled_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the Automation runbooks that are run during a runbook workflow in Change Manager.</p> <note>
    /// <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p>
    /// </note>
    pub runbooks: ::std::option::Option<::std::vec::Vec<crate::types::Runbook>>,
    /// <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
    pub ops_item_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of a State Manager association used in the Automation operation.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Change Manager change request.</p>
    pub change_request_name: ::std::option::Option<::std::string::String>,
}
impl AutomationExecutionMetadata {
    /// <p>The execution ID.</p>
    pub fn automation_execution_id(&self) -> ::std::option::Option<&str> {
        self.automation_execution_id.as_deref()
    }
    /// <p>The name of the Automation runbook used during execution.</p>
    pub fn document_name(&self) -> ::std::option::Option<&str> {
        self.document_name.as_deref()
    }
    /// <p>The document version used during the execution.</p>
    pub fn document_version(&self) -> ::std::option::Option<&str> {
        self.document_version.as_deref()
    }
    /// <p>The status of the execution.</p>
    pub fn automation_execution_status(&self) -> ::std::option::Option<&crate::types::AutomationExecutionStatus> {
        self.automation_execution_status.as_ref()
    }
    /// <p>The time the execution started.</p>
    pub fn execution_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.execution_start_time.as_ref()
    }
    /// <p>The time the execution finished. This isn't populated if the execution is still in progress.</p>
    pub fn execution_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.execution_end_time.as_ref()
    }
    /// <p>The IAM role ARN of the user who ran the automation.</p>
    pub fn executed_by(&self) -> ::std::option::Option<&str> {
        self.executed_by.as_deref()
    }
    /// <p>An S3 bucket where execution information is stored.</p>
    pub fn log_file(&self) -> ::std::option::Option<&str> {
        self.log_file.as_deref()
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn outputs(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.outputs.as_ref()
    }
    /// <p>The Automation execution mode.</p>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::ExecutionMode> {
        self.mode.as_ref()
    }
    /// <p>The execution ID of the parent automation.</p>
    pub fn parent_automation_execution_id(&self) -> ::std::option::Option<&str> {
        self.parent_automation_execution_id.as_deref()
    }
    /// <p>The name of the step that is currently running.</p>
    pub fn current_step_name(&self) -> ::std::option::Option<&str> {
        self.current_step_name.as_deref()
    }
    /// <p>The action of the step that is currently running.</p>
    pub fn current_action(&self) -> ::std::option::Option<&str> {
        self.current_action.as_deref()
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn target_parameter_name(&self) -> ::std::option::Option<&str> {
        self.target_parameter_name.as_deref()
    }
    /// <p>The targets defined by the user when starting the automation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.targets.is_none()`.
    pub fn targets(&self) -> &[crate::types::Target] {
        self.targets.as_deref().unwrap_or_default()
    }
    /// <p>The specified key-value mapping of document parameters to target resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_maps.is_none()`.
    pub fn target_maps(&self) -> &[::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>] {
        self.target_maps.as_deref().unwrap_or_default()
    }
    /// <p>A list of targets that resolved during the execution.</p>
    pub fn resolved_targets(&self) -> ::std::option::Option<&crate::types::ResolvedTargets> {
        self.resolved_targets.as_ref()
    }
    /// <p>The <code>MaxConcurrency</code> value specified by the user when starting the automation.</p>
    pub fn max_concurrency(&self) -> ::std::option::Option<&str> {
        self.max_concurrency.as_deref()
    }
    /// <p>The <code>MaxErrors</code> value specified by the user when starting the automation.</p>
    pub fn max_errors(&self) -> ::std::option::Option<&str> {
        self.max_errors.as_deref()
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn target(&self) -> ::std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>Use this filter with <code>DescribeAutomationExecutions</code>. Specify either Local or CrossAccount. CrossAccount is an Automation that runs in multiple Amazon Web Services Regions and Amazon Web Services accounts. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html">Running Automation workflows in multiple Amazon Web Services Regions and accounts</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
    pub fn automation_type(&self) -> ::std::option::Option<&crate::types::AutomationType> {
        self.automation_type.as_ref()
    }
    /// <p>The details for the CloudWatch alarm applied to your automation.</p>
    pub fn alarm_configuration(&self) -> ::std::option::Option<&crate::types::AlarmConfiguration> {
        self.alarm_configuration.as_ref()
    }
    /// <p>The CloudWatch alarm that was invoked by the automation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.triggered_alarms.is_none()`.
    pub fn triggered_alarms(&self) -> &[crate::types::AlarmStateInformation] {
        self.triggered_alarms.as_deref().unwrap_or_default()
    }
    /// <p>The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>.</p>
    pub fn automation_subtype(&self) -> ::std::option::Option<&crate::types::AutomationSubtype> {
        self.automation_subtype.as_ref()
    }
    /// <p>The date and time the Automation operation is scheduled to start.</p>
    pub fn scheduled_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.scheduled_time.as_ref()
    }
    /// <p>Information about the Automation runbooks that are run during a runbook workflow in Change Manager.</p> <note>
    /// <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.runbooks.is_none()`.
    pub fn runbooks(&self) -> &[crate::types::Runbook] {
        self.runbooks.as_deref().unwrap_or_default()
    }
    /// <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
    pub fn ops_item_id(&self) -> ::std::option::Option<&str> {
        self.ops_item_id.as_deref()
    }
    /// <p>The ID of a State Manager association used in the Automation operation.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The name of the Change Manager change request.</p>
    pub fn change_request_name(&self) -> ::std::option::Option<&str> {
        self.change_request_name.as_deref()
    }
}
impl AutomationExecutionMetadata {
    /// Creates a new builder-style object to manufacture [`AutomationExecutionMetadata`](crate::types::AutomationExecutionMetadata).
    pub fn builder() -> crate::types::builders::AutomationExecutionMetadataBuilder {
        crate::types::builders::AutomationExecutionMetadataBuilder::default()
    }
}

/// A builder for [`AutomationExecutionMetadata`](crate::types::AutomationExecutionMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AutomationExecutionMetadataBuilder {
    pub(crate) automation_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) document_name: ::std::option::Option<::std::string::String>,
    pub(crate) document_version: ::std::option::Option<::std::string::String>,
    pub(crate) automation_execution_status: ::std::option::Option<crate::types::AutomationExecutionStatus>,
    pub(crate) execution_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) execution_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) executed_by: ::std::option::Option<::std::string::String>,
    pub(crate) log_file: ::std::option::Option<::std::string::String>,
    pub(crate) outputs: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    pub(crate) mode: ::std::option::Option<crate::types::ExecutionMode>,
    pub(crate) parent_automation_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) current_step_name: ::std::option::Option<::std::string::String>,
    pub(crate) current_action: ::std::option::Option<::std::string::String>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
    pub(crate) target_parameter_name: ::std::option::Option<::std::string::String>,
    pub(crate) targets: ::std::option::Option<::std::vec::Vec<crate::types::Target>>,
    pub(crate) target_maps:
        ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>>,
    pub(crate) resolved_targets: ::std::option::Option<crate::types::ResolvedTargets>,
    pub(crate) max_concurrency: ::std::option::Option<::std::string::String>,
    pub(crate) max_errors: ::std::option::Option<::std::string::String>,
    pub(crate) target: ::std::option::Option<::std::string::String>,
    pub(crate) automation_type: ::std::option::Option<crate::types::AutomationType>,
    pub(crate) alarm_configuration: ::std::option::Option<crate::types::AlarmConfiguration>,
    pub(crate) triggered_alarms: ::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>>,
    pub(crate) automation_subtype: ::std::option::Option<crate::types::AutomationSubtype>,
    pub(crate) scheduled_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) runbooks: ::std::option::Option<::std::vec::Vec<crate::types::Runbook>>,
    pub(crate) ops_item_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) change_request_name: ::std::option::Option<::std::string::String>,
}
impl AutomationExecutionMetadataBuilder {
    /// <p>The execution ID.</p>
    pub fn automation_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.automation_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution ID.</p>
    pub fn set_automation_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.automation_execution_id = input;
        self
    }
    /// <p>The execution ID.</p>
    pub fn get_automation_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.automation_execution_id
    }
    /// <p>The name of the Automation runbook used during execution.</p>
    pub fn document_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Automation runbook used during execution.</p>
    pub fn set_document_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_name = input;
        self
    }
    /// <p>The name of the Automation runbook used during execution.</p>
    pub fn get_document_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_name
    }
    /// <p>The document version used during the execution.</p>
    pub fn document_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The document version used during the execution.</p>
    pub fn set_document_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_version = input;
        self
    }
    /// <p>The document version used during the execution.</p>
    pub fn get_document_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_version
    }
    /// <p>The status of the execution.</p>
    pub fn automation_execution_status(mut self, input: crate::types::AutomationExecutionStatus) -> Self {
        self.automation_execution_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the execution.</p>
    pub fn set_automation_execution_status(mut self, input: ::std::option::Option<crate::types::AutomationExecutionStatus>) -> Self {
        self.automation_execution_status = input;
        self
    }
    /// <p>The status of the execution.</p>
    pub fn get_automation_execution_status(&self) -> &::std::option::Option<crate::types::AutomationExecutionStatus> {
        &self.automation_execution_status
    }
    /// <p>The time the execution started.</p>
    pub fn execution_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.execution_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the execution started.</p>
    pub fn set_execution_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.execution_start_time = input;
        self
    }
    /// <p>The time the execution started.</p>
    pub fn get_execution_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.execution_start_time
    }
    /// <p>The time the execution finished. This isn't populated if the execution is still in progress.</p>
    pub fn execution_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.execution_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the execution finished. This isn't populated if the execution is still in progress.</p>
    pub fn set_execution_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.execution_end_time = input;
        self
    }
    /// <p>The time the execution finished. This isn't populated if the execution is still in progress.</p>
    pub fn get_execution_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.execution_end_time
    }
    /// <p>The IAM role ARN of the user who ran the automation.</p>
    pub fn executed_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.executed_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN of the user who ran the automation.</p>
    pub fn set_executed_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.executed_by = input;
        self
    }
    /// <p>The IAM role ARN of the user who ran the automation.</p>
    pub fn get_executed_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.executed_by
    }
    /// <p>An S3 bucket where execution information is stored.</p>
    pub fn log_file(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_file = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An S3 bucket where execution information is stored.</p>
    pub fn set_log_file(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_file = input;
        self
    }
    /// <p>An S3 bucket where execution information is stored.</p>
    pub fn get_log_file(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_file
    }
    /// Adds a key-value pair to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn outputs(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.outputs.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.outputs = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn set_outputs(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.outputs = input;
        self
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn get_outputs(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.outputs
    }
    /// <p>The Automation execution mode.</p>
    pub fn mode(mut self, input: crate::types::ExecutionMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Automation execution mode.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::ExecutionMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The Automation execution mode.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::ExecutionMode> {
        &self.mode
    }
    /// <p>The execution ID of the parent automation.</p>
    pub fn parent_automation_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_automation_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution ID of the parent automation.</p>
    pub fn set_parent_automation_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_automation_execution_id = input;
        self
    }
    /// <p>The execution ID of the parent automation.</p>
    pub fn get_parent_automation_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_automation_execution_id
    }
    /// <p>The name of the step that is currently running.</p>
    pub fn current_step_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_step_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the step that is currently running.</p>
    pub fn set_current_step_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_step_name = input;
        self
    }
    /// <p>The name of the step that is currently running.</p>
    pub fn get_current_step_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_step_name
    }
    /// <p>The action of the step that is currently running.</p>
    pub fn current_action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action of the step that is currently running.</p>
    pub fn set_current_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_action = input;
        self
    }
    /// <p>The action of the step that is currently running.</p>
    pub fn get_current_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_action
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn target_parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn set_target_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_parameter_name = input;
        self
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn get_target_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_parameter_name
    }
    /// Appends an item to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The targets defined by the user when starting the automation.</p>
    pub fn targets(mut self, input: crate::types::Target) -> Self {
        let mut v = self.targets.unwrap_or_default();
        v.push(input);
        self.targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The targets defined by the user when starting the automation.</p>
    pub fn set_targets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Target>>) -> Self {
        self.targets = input;
        self
    }
    /// <p>The targets defined by the user when starting the automation.</p>
    pub fn get_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Target>> {
        &self.targets
    }
    /// Appends an item to `target_maps`.
    ///
    /// To override the contents of this collection use [`set_target_maps`](Self::set_target_maps).
    ///
    /// <p>The specified key-value mapping of document parameters to target resources.</p>
    pub fn target_maps(mut self, input: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>) -> Self {
        let mut v = self.target_maps.unwrap_or_default();
        v.push(input);
        self.target_maps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The specified key-value mapping of document parameters to target resources.</p>
    pub fn set_target_maps(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>>,
    ) -> Self {
        self.target_maps = input;
        self
    }
    /// <p>The specified key-value mapping of document parameters to target resources.</p>
    pub fn get_target_maps(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>> {
        &self.target_maps
    }
    /// <p>A list of targets that resolved during the execution.</p>
    pub fn resolved_targets(mut self, input: crate::types::ResolvedTargets) -> Self {
        self.resolved_targets = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of targets that resolved during the execution.</p>
    pub fn set_resolved_targets(mut self, input: ::std::option::Option<crate::types::ResolvedTargets>) -> Self {
        self.resolved_targets = input;
        self
    }
    /// <p>A list of targets that resolved during the execution.</p>
    pub fn get_resolved_targets(&self) -> &::std::option::Option<crate::types::ResolvedTargets> {
        &self.resolved_targets
    }
    /// <p>The <code>MaxConcurrency</code> value specified by the user when starting the automation.</p>
    pub fn max_concurrency(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_concurrency = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>MaxConcurrency</code> value specified by the user when starting the automation.</p>
    pub fn set_max_concurrency(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_concurrency = input;
        self
    }
    /// <p>The <code>MaxConcurrency</code> value specified by the user when starting the automation.</p>
    pub fn get_max_concurrency(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_concurrency
    }
    /// <p>The <code>MaxErrors</code> value specified by the user when starting the automation.</p>
    pub fn max_errors(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_errors = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>MaxErrors</code> value specified by the user when starting the automation.</p>
    pub fn set_max_errors(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_errors = input;
        self
    }
    /// <p>The <code>MaxErrors</code> value specified by the user when starting the automation.</p>
    pub fn get_max_errors(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_errors
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.target
    }
    /// <p>Use this filter with <code>DescribeAutomationExecutions</code>. Specify either Local or CrossAccount. CrossAccount is an Automation that runs in multiple Amazon Web Services Regions and Amazon Web Services accounts. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html">Running Automation workflows in multiple Amazon Web Services Regions and accounts</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
    pub fn automation_type(mut self, input: crate::types::AutomationType) -> Self {
        self.automation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this filter with <code>DescribeAutomationExecutions</code>. Specify either Local or CrossAccount. CrossAccount is an Automation that runs in multiple Amazon Web Services Regions and Amazon Web Services accounts. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html">Running Automation workflows in multiple Amazon Web Services Regions and accounts</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
    pub fn set_automation_type(mut self, input: ::std::option::Option<crate::types::AutomationType>) -> Self {
        self.automation_type = input;
        self
    }
    /// <p>Use this filter with <code>DescribeAutomationExecutions</code>. Specify either Local or CrossAccount. CrossAccount is an Automation that runs in multiple Amazon Web Services Regions and Amazon Web Services accounts. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html">Running Automation workflows in multiple Amazon Web Services Regions and accounts</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
    pub fn get_automation_type(&self) -> &::std::option::Option<crate::types::AutomationType> {
        &self.automation_type
    }
    /// <p>The details for the CloudWatch alarm applied to your automation.</p>
    pub fn alarm_configuration(mut self, input: crate::types::AlarmConfiguration) -> Self {
        self.alarm_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details for the CloudWatch alarm applied to your automation.</p>
    pub fn set_alarm_configuration(mut self, input: ::std::option::Option<crate::types::AlarmConfiguration>) -> Self {
        self.alarm_configuration = input;
        self
    }
    /// <p>The details for the CloudWatch alarm applied to your automation.</p>
    pub fn get_alarm_configuration(&self) -> &::std::option::Option<crate::types::AlarmConfiguration> {
        &self.alarm_configuration
    }
    /// Appends an item to `triggered_alarms`.
    ///
    /// To override the contents of this collection use [`set_triggered_alarms`](Self::set_triggered_alarms).
    ///
    /// <p>The CloudWatch alarm that was invoked by the automation.</p>
    pub fn triggered_alarms(mut self, input: crate::types::AlarmStateInformation) -> Self {
        let mut v = self.triggered_alarms.unwrap_or_default();
        v.push(input);
        self.triggered_alarms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The CloudWatch alarm that was invoked by the automation.</p>
    pub fn set_triggered_alarms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>>) -> Self {
        self.triggered_alarms = input;
        self
    }
    /// <p>The CloudWatch alarm that was invoked by the automation.</p>
    pub fn get_triggered_alarms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>> {
        &self.triggered_alarms
    }
    /// <p>The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>.</p>
    pub fn automation_subtype(mut self, input: crate::types::AutomationSubtype) -> Self {
        self.automation_subtype = ::std::option::Option::Some(input);
        self
    }
    /// <p>The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>.</p>
    pub fn set_automation_subtype(mut self, input: ::std::option::Option<crate::types::AutomationSubtype>) -> Self {
        self.automation_subtype = input;
        self
    }
    /// <p>The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>.</p>
    pub fn get_automation_subtype(&self) -> &::std::option::Option<crate::types::AutomationSubtype> {
        &self.automation_subtype
    }
    /// <p>The date and time the Automation operation is scheduled to start.</p>
    pub fn scheduled_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.scheduled_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the Automation operation is scheduled to start.</p>
    pub fn set_scheduled_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.scheduled_time = input;
        self
    }
    /// <p>The date and time the Automation operation is scheduled to start.</p>
    pub fn get_scheduled_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.scheduled_time
    }
    /// Appends an item to `runbooks`.
    ///
    /// To override the contents of this collection use [`set_runbooks`](Self::set_runbooks).
    ///
    /// <p>Information about the Automation runbooks that are run during a runbook workflow in Change Manager.</p> <note>
    /// <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p>
    /// </note>
    pub fn runbooks(mut self, input: crate::types::Runbook) -> Self {
        let mut v = self.runbooks.unwrap_or_default();
        v.push(input);
        self.runbooks = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the Automation runbooks that are run during a runbook workflow in Change Manager.</p> <note>
    /// <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p>
    /// </note>
    pub fn set_runbooks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Runbook>>) -> Self {
        self.runbooks = input;
        self
    }
    /// <p>Information about the Automation runbooks that are run during a runbook workflow in Change Manager.</p> <note>
    /// <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p>
    /// </note>
    pub fn get_runbooks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Runbook>> {
        &self.runbooks
    }
    /// <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
    pub fn ops_item_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ops_item_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
    pub fn set_ops_item_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ops_item_id = input;
        self
    }
    /// <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
    pub fn get_ops_item_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ops_item_id
    }
    /// <p>The ID of a State Manager association used in the Automation operation.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a State Manager association used in the Automation operation.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The ID of a State Manager association used in the Automation operation.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>The name of the Change Manager change request.</p>
    pub fn change_request_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_request_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Change Manager change request.</p>
    pub fn set_change_request_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_request_name = input;
        self
    }
    /// <p>The name of the Change Manager change request.</p>
    pub fn get_change_request_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_request_name
    }
    /// Consumes the builder and constructs a [`AutomationExecutionMetadata`](crate::types::AutomationExecutionMetadata).
    pub fn build(self) -> crate::types::AutomationExecutionMetadata {
        crate::types::AutomationExecutionMetadata {
            automation_execution_id: self.automation_execution_id,
            document_name: self.document_name,
            document_version: self.document_version,
            automation_execution_status: self.automation_execution_status,
            execution_start_time: self.execution_start_time,
            execution_end_time: self.execution_end_time,
            executed_by: self.executed_by,
            log_file: self.log_file,
            outputs: self.outputs,
            mode: self.mode,
            parent_automation_execution_id: self.parent_automation_execution_id,
            current_step_name: self.current_step_name,
            current_action: self.current_action,
            failure_message: self.failure_message,
            target_parameter_name: self.target_parameter_name,
            targets: self.targets,
            target_maps: self.target_maps,
            resolved_targets: self.resolved_targets,
            max_concurrency: self.max_concurrency,
            max_errors: self.max_errors,
            target: self.target,
            automation_type: self.automation_type,
            alarm_configuration: self.alarm_configuration,
            triggered_alarms: self.triggered_alarms,
            automation_subtype: self.automation_subtype,
            scheduled_time: self.scheduled_time,
            runbooks: self.runbooks,
            ops_item_id: self.ops_item_id,
            association_id: self.association_id,
            change_request_name: self.change_request_name,
        }
    }
}
