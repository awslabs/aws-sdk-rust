// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>One or more association documents on the managed node. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceAssociation {
    /// <p>The association ID.</p>
    #[doc(hidden)]
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The managed node ID.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The content of the association document for the managed node(s).</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
    /// <p>Version information for the association on the managed node.</p>
    #[doc(hidden)]
    pub association_version: std::option::Option<std::string::String>,
}
impl InstanceAssociation {
    /// <p>The association ID.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The managed node ID.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The content of the association document for the managed node(s).</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>Version information for the association on the managed node.</p>
    pub fn association_version(&self) -> std::option::Option<&str> {
        self.association_version.as_deref()
    }
}
impl InstanceAssociation {
    /// Creates a new builder-style object to manufacture [`InstanceAssociation`](crate::types::InstanceAssociation).
    pub fn builder() -> crate::types::builders::InstanceAssociationBuilder {
        crate::types::builders::InstanceAssociationBuilder::default()
    }
}

/// A builder for [`InstanceAssociation`](crate::types::InstanceAssociation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceAssociationBuilder {
    pub(crate) association_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<std::string::String>,
    pub(crate) association_version: std::option::Option<std::string::String>,
}
impl InstanceAssociationBuilder {
    /// <p>The association ID.</p>
    pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.association_id = Some(input.into());
        self
    }
    /// <p>The association ID.</p>
    pub fn set_association_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The managed node ID.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The managed node ID.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The content of the association document for the managed node(s).</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The content of the association document for the managed node(s).</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>Version information for the association on the managed node.</p>
    pub fn association_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.association_version = Some(input.into());
        self
    }
    /// <p>Version information for the association on the managed node.</p>
    pub fn set_association_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.association_version = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceAssociation`](crate::types::InstanceAssociation).
    pub fn build(self) -> crate::types::InstanceAssociation {
        crate::types::InstanceAssociation {
            association_id: self.association_id,
            instance_id: self.instance_id,
            content: self.content,
            association_version: self.association_version,
        }
    }
}
