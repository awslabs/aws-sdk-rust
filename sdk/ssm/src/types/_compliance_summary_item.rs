// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of compliance information by compliance type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ComplianceSummaryItem {
    /// <p>The type of compliance item. For example, the compliance type can be Association, Patch, or Custom:string.</p>
    #[doc(hidden)]
    pub compliance_type: std::option::Option<std::string::String>,
    /// <p>A list of COMPLIANT items for the specified compliance type.</p>
    #[doc(hidden)]
    pub compliant_summary: std::option::Option<crate::types::CompliantSummary>,
    /// <p>A list of NON_COMPLIANT items for the specified compliance type.</p>
    #[doc(hidden)]
    pub non_compliant_summary: std::option::Option<crate::types::NonCompliantSummary>,
}
impl ComplianceSummaryItem {
    /// <p>The type of compliance item. For example, the compliance type can be Association, Patch, or Custom:string.</p>
    pub fn compliance_type(&self) -> std::option::Option<&str> {
        self.compliance_type.as_deref()
    }
    /// <p>A list of COMPLIANT items for the specified compliance type.</p>
    pub fn compliant_summary(&self) -> std::option::Option<&crate::types::CompliantSummary> {
        self.compliant_summary.as_ref()
    }
    /// <p>A list of NON_COMPLIANT items for the specified compliance type.</p>
    pub fn non_compliant_summary(&self) -> std::option::Option<&crate::types::NonCompliantSummary> {
        self.non_compliant_summary.as_ref()
    }
}
impl ComplianceSummaryItem {
    /// Creates a new builder-style object to manufacture [`ComplianceSummaryItem`](crate::types::ComplianceSummaryItem).
    pub fn builder() -> crate::types::builders::ComplianceSummaryItemBuilder {
        crate::types::builders::ComplianceSummaryItemBuilder::default()
    }
}

/// A builder for [`ComplianceSummaryItem`](crate::types::ComplianceSummaryItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ComplianceSummaryItemBuilder {
    pub(crate) compliance_type: std::option::Option<std::string::String>,
    pub(crate) compliant_summary: std::option::Option<crate::types::CompliantSummary>,
    pub(crate) non_compliant_summary: std::option::Option<crate::types::NonCompliantSummary>,
}
impl ComplianceSummaryItemBuilder {
    /// <p>The type of compliance item. For example, the compliance type can be Association, Patch, or Custom:string.</p>
    pub fn compliance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.compliance_type = Some(input.into());
        self
    }
    /// <p>The type of compliance item. For example, the compliance type can be Association, Patch, or Custom:string.</p>
    pub fn set_compliance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.compliance_type = input;
        self
    }
    /// <p>A list of COMPLIANT items for the specified compliance type.</p>
    pub fn compliant_summary(mut self, input: crate::types::CompliantSummary) -> Self {
        self.compliant_summary = Some(input);
        self
    }
    /// <p>A list of COMPLIANT items for the specified compliance type.</p>
    pub fn set_compliant_summary(
        mut self,
        input: std::option::Option<crate::types::CompliantSummary>,
    ) -> Self {
        self.compliant_summary = input;
        self
    }
    /// <p>A list of NON_COMPLIANT items for the specified compliance type.</p>
    pub fn non_compliant_summary(mut self, input: crate::types::NonCompliantSummary) -> Self {
        self.non_compliant_summary = Some(input);
        self
    }
    /// <p>A list of NON_COMPLIANT items for the specified compliance type.</p>
    pub fn set_non_compliant_summary(
        mut self,
        input: std::option::Option<crate::types::NonCompliantSummary>,
    ) -> Self {
        self.non_compliant_summary = input;
        self
    }
    /// Consumes the builder and constructs a [`ComplianceSummaryItem`](crate::types::ComplianceSummaryItem).
    pub fn build(self) -> crate::types::ComplianceSummaryItem {
        crate::types::ComplianceSummaryItem {
            compliance_type: self.compliance_type,
            compliant_summary: self.compliant_summary,
            non_compliant_summary: self.non_compliant_summary,
        }
    }
}
