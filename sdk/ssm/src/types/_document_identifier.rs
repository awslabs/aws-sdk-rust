// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the name of a SSM document.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentIdentifier {
    /// <p>The name of the SSM document.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The date the SSM document was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An optional field where you can specify a friendly name for the SSM document. This value can differ for each version of the document. If you want to update this value, see <code>UpdateDocument</code>.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services user account that created the document.</p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p>An optional field specifying the version of the artifact associated with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and can't be changed.</p>
    #[doc(hidden)]
    pub version_name: std::option::Option<std::string::String>,
    /// <p>The operating system platform. </p>
    #[doc(hidden)]
    pub platform_types: std::option::Option<std::vec::Vec<crate::types::PlatformType>>,
    /// <p>The document version.</p>
    #[doc(hidden)]
    pub document_version: std::option::Option<std::string::String>,
    /// <p>The document type.</p>
    #[doc(hidden)]
    pub document_type: std::option::Option<crate::types::DocumentType>,
    /// <p>The schema version.</p>
    #[doc(hidden)]
    pub schema_version: std::option::Option<std::string::String>,
    /// <p>The document format, either JSON or YAML.</p>
    #[doc(hidden)]
    pub document_format: std::option::Option<crate::types::DocumentFormat>,
    /// <p>The target type which defines the kinds of resources the document can run on. For example, <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
    #[doc(hidden)]
    pub target_type: std::option::Option<std::string::String>,
    /// <p>The tags, or metadata, that have been applied to the document.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document.</p>
    #[doc(hidden)]
    pub requires: std::option::Option<std::vec::Vec<crate::types::DocumentRequires>>,
    /// <p>The current status of a document review.</p>
    #[doc(hidden)]
    pub review_status: std::option::Option<crate::types::ReviewStatus>,
    /// <p>The user in your organization who created the document.</p>
    #[doc(hidden)]
    pub author: std::option::Option<std::string::String>,
}
impl DocumentIdentifier {
    /// <p>The name of the SSM document.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The date the SSM document was created.</p>
    pub fn created_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>An optional field where you can specify a friendly name for the SSM document. This value can differ for each version of the document. If you want to update this value, see <code>UpdateDocument</code>.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The Amazon Web Services user account that created the document.</p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>An optional field specifying the version of the artifact associated with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and can't be changed.</p>
    pub fn version_name(&self) -> std::option::Option<&str> {
        self.version_name.as_deref()
    }
    /// <p>The operating system platform. </p>
    pub fn platform_types(&self) -> std::option::Option<&[crate::types::PlatformType]> {
        self.platform_types.as_deref()
    }
    /// <p>The document version.</p>
    pub fn document_version(&self) -> std::option::Option<&str> {
        self.document_version.as_deref()
    }
    /// <p>The document type.</p>
    pub fn document_type(&self) -> std::option::Option<&crate::types::DocumentType> {
        self.document_type.as_ref()
    }
    /// <p>The schema version.</p>
    pub fn schema_version(&self) -> std::option::Option<&str> {
        self.schema_version.as_deref()
    }
    /// <p>The document format, either JSON or YAML.</p>
    pub fn document_format(&self) -> std::option::Option<&crate::types::DocumentFormat> {
        self.document_format.as_ref()
    }
    /// <p>The target type which defines the kinds of resources the document can run on. For example, <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
    pub fn target_type(&self) -> std::option::Option<&str> {
        self.target_type.as_deref()
    }
    /// <p>The tags, or metadata, that have been applied to the document.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document.</p>
    pub fn requires(&self) -> std::option::Option<&[crate::types::DocumentRequires]> {
        self.requires.as_deref()
    }
    /// <p>The current status of a document review.</p>
    pub fn review_status(&self) -> std::option::Option<&crate::types::ReviewStatus> {
        self.review_status.as_ref()
    }
    /// <p>The user in your organization who created the document.</p>
    pub fn author(&self) -> std::option::Option<&str> {
        self.author.as_deref()
    }
}
impl DocumentIdentifier {
    /// Creates a new builder-style object to manufacture [`DocumentIdentifier`](crate::types::DocumentIdentifier).
    pub fn builder() -> crate::types::builders::DocumentIdentifierBuilder {
        crate::types::builders::DocumentIdentifierBuilder::default()
    }
}

/// A builder for [`DocumentIdentifier`](crate::types::DocumentIdentifier).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DocumentIdentifierBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) created_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) version_name: std::option::Option<std::string::String>,
    pub(crate) platform_types: std::option::Option<std::vec::Vec<crate::types::PlatformType>>,
    pub(crate) document_version: std::option::Option<std::string::String>,
    pub(crate) document_type: std::option::Option<crate::types::DocumentType>,
    pub(crate) schema_version: std::option::Option<std::string::String>,
    pub(crate) document_format: std::option::Option<crate::types::DocumentFormat>,
    pub(crate) target_type: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) requires: std::option::Option<std::vec::Vec<crate::types::DocumentRequires>>,
    pub(crate) review_status: std::option::Option<crate::types::ReviewStatus>,
    pub(crate) author: std::option::Option<std::string::String>,
}
impl DocumentIdentifierBuilder {
    /// <p>The name of the SSM document.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the SSM document.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The date the SSM document was created.</p>
    pub fn created_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>The date the SSM document was created.</p>
    pub fn set_created_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_date = input;
        self
    }
    /// <p>An optional field where you can specify a friendly name for the SSM document. This value can differ for each version of the document. If you want to update this value, see <code>UpdateDocument</code>.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>An optional field where you can specify a friendly name for the SSM document. This value can differ for each version of the document. If you want to update this value, see <code>UpdateDocument</code>.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The Amazon Web Services user account that created the document.</p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services user account that created the document.</p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>An optional field specifying the version of the artifact associated with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and can't be changed.</p>
    pub fn version_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.version_name = Some(input.into());
        self
    }
    /// <p>An optional field specifying the version of the artifact associated with the document. For example, "Release 12, Update 6". This value is unique across all versions of a document, and can't be changed.</p>
    pub fn set_version_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version_name = input;
        self
    }
    /// Appends an item to `platform_types`.
    ///
    /// To override the contents of this collection use [`set_platform_types`](Self::set_platform_types).
    ///
    /// <p>The operating system platform. </p>
    pub fn platform_types(mut self, input: crate::types::PlatformType) -> Self {
        let mut v = self.platform_types.unwrap_or_default();
        v.push(input);
        self.platform_types = Some(v);
        self
    }
    /// <p>The operating system platform. </p>
    pub fn set_platform_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PlatformType>>,
    ) -> Self {
        self.platform_types = input;
        self
    }
    /// <p>The document version.</p>
    pub fn document_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_version = Some(input.into());
        self
    }
    /// <p>The document version.</p>
    pub fn set_document_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_version = input;
        self
    }
    /// <p>The document type.</p>
    pub fn document_type(mut self, input: crate::types::DocumentType) -> Self {
        self.document_type = Some(input);
        self
    }
    /// <p>The document type.</p>
    pub fn set_document_type(
        mut self,
        input: std::option::Option<crate::types::DocumentType>,
    ) -> Self {
        self.document_type = input;
        self
    }
    /// <p>The schema version.</p>
    pub fn schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version = Some(input.into());
        self
    }
    /// <p>The schema version.</p>
    pub fn set_schema_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The document format, either JSON or YAML.</p>
    pub fn document_format(mut self, input: crate::types::DocumentFormat) -> Self {
        self.document_format = Some(input);
        self
    }
    /// <p>The document format, either JSON or YAML.</p>
    pub fn set_document_format(
        mut self,
        input: std::option::Option<crate::types::DocumentFormat>,
    ) -> Self {
        self.document_format = input;
        self
    }
    /// <p>The target type which defines the kinds of resources the document can run on. For example, <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
    pub fn target_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_type = Some(input.into());
        self
    }
    /// <p>The target type which defines the kinds of resources the document can run on. For example, <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
    pub fn set_target_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_type = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags, or metadata, that have been applied to the document.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags, or metadata, that have been applied to the document.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Appends an item to `requires`.
    ///
    /// To override the contents of this collection use [`set_requires`](Self::set_requires).
    ///
    /// <p>A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document.</p>
    pub fn requires(mut self, input: crate::types::DocumentRequires) -> Self {
        let mut v = self.requires.unwrap_or_default();
        v.push(input);
        self.requires = Some(v);
        self
    }
    /// <p>A list of SSM documents required by a document. For example, an <code>ApplicationConfiguration</code> document requires an <code>ApplicationConfigurationSchema</code> document.</p>
    pub fn set_requires(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DocumentRequires>>,
    ) -> Self {
        self.requires = input;
        self
    }
    /// <p>The current status of a document review.</p>
    pub fn review_status(mut self, input: crate::types::ReviewStatus) -> Self {
        self.review_status = Some(input);
        self
    }
    /// <p>The current status of a document review.</p>
    pub fn set_review_status(
        mut self,
        input: std::option::Option<crate::types::ReviewStatus>,
    ) -> Self {
        self.review_status = input;
        self
    }
    /// <p>The user in your organization who created the document.</p>
    pub fn author(mut self, input: impl Into<std::string::String>) -> Self {
        self.author = Some(input.into());
        self
    }
    /// <p>The user in your organization who created the document.</p>
    pub fn set_author(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.author = input;
        self
    }
    /// Consumes the builder and constructs a [`DocumentIdentifier`](crate::types::DocumentIdentifier).
    pub fn build(self) -> crate::types::DocumentIdentifier {
        crate::types::DocumentIdentifier {
            name: self.name,
            created_date: self.created_date,
            display_name: self.display_name,
            owner: self.owner,
            version_name: self.version_name,
            platform_types: self.platform_types,
            document_version: self.document_version,
            document_type: self.document_type,
            schema_version: self.schema_version,
            document_format: self.document_format,
            target_type: self.target_type,
            tags: self.tags,
            requires: self.requires,
            review_status: self.review_status,
            author: self.author,
        }
    }
}
