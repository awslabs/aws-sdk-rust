// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Includes information about the specified association execution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociationExecutionTarget {
    /// <p>The association ID.</p>
    #[doc(hidden)]
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The association version.</p>
    #[doc(hidden)]
    pub association_version: std::option::Option<std::string::String>,
    /// <p>The execution ID.</p>
    #[doc(hidden)]
    pub execution_id: std::option::Option<std::string::String>,
    /// <p>The resource ID, for example, the managed node ID where the association ran.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The resource type, for example, EC2.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The association execution status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>Detailed information about the execution status.</p>
    #[doc(hidden)]
    pub detailed_status: std::option::Option<std::string::String>,
    /// <p>The date of the last execution.</p>
    #[doc(hidden)]
    pub last_execution_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The location where the association details are saved.</p>
    #[doc(hidden)]
    pub output_source: std::option::Option<crate::types::OutputSource>,
}
impl AssociationExecutionTarget {
    /// <p>The association ID.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The association version.</p>
    pub fn association_version(&self) -> std::option::Option<&str> {
        self.association_version.as_deref()
    }
    /// <p>The execution ID.</p>
    pub fn execution_id(&self) -> std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The resource ID, for example, the managed node ID where the association ran.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The resource type, for example, EC2.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The association execution status.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Detailed information about the execution status.</p>
    pub fn detailed_status(&self) -> std::option::Option<&str> {
        self.detailed_status.as_deref()
    }
    /// <p>The date of the last execution.</p>
    pub fn last_execution_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_execution_date.as_ref()
    }
    /// <p>The location where the association details are saved.</p>
    pub fn output_source(&self) -> std::option::Option<&crate::types::OutputSource> {
        self.output_source.as_ref()
    }
}
impl AssociationExecutionTarget {
    /// Creates a new builder-style object to manufacture [`AssociationExecutionTarget`](crate::types::AssociationExecutionTarget).
    pub fn builder() -> crate::types::builders::AssociationExecutionTargetBuilder {
        crate::types::builders::AssociationExecutionTargetBuilder::default()
    }
}

/// A builder for [`AssociationExecutionTarget`](crate::types::AssociationExecutionTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociationExecutionTargetBuilder {
    pub(crate) association_id: std::option::Option<std::string::String>,
    pub(crate) association_version: std::option::Option<std::string::String>,
    pub(crate) execution_id: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) detailed_status: std::option::Option<std::string::String>,
    pub(crate) last_execution_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) output_source: std::option::Option<crate::types::OutputSource>,
}
impl AssociationExecutionTargetBuilder {
    /// <p>The association ID.</p>
    pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.association_id = Some(input.into());
        self
    }
    /// <p>The association ID.</p>
    pub fn set_association_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The association version.</p>
    pub fn association_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.association_version = Some(input.into());
        self
    }
    /// <p>The association version.</p>
    pub fn set_association_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.association_version = input;
        self
    }
    /// <p>The execution ID.</p>
    pub fn execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_id = Some(input.into());
        self
    }
    /// <p>The execution ID.</p>
    pub fn set_execution_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The resource ID, for example, the managed node ID where the association ran.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The resource ID, for example, the managed node ID where the association ran.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The resource type, for example, EC2.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The resource type, for example, EC2.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The association execution status.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The association execution status.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Detailed information about the execution status.</p>
    pub fn detailed_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.detailed_status = Some(input.into());
        self
    }
    /// <p>Detailed information about the execution status.</p>
    pub fn set_detailed_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detailed_status = input;
        self
    }
    /// <p>The date of the last execution.</p>
    pub fn last_execution_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_execution_date = Some(input);
        self
    }
    /// <p>The date of the last execution.</p>
    pub fn set_last_execution_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_execution_date = input;
        self
    }
    /// <p>The location where the association details are saved.</p>
    pub fn output_source(mut self, input: crate::types::OutputSource) -> Self {
        self.output_source = Some(input);
        self
    }
    /// <p>The location where the association details are saved.</p>
    pub fn set_output_source(
        mut self,
        input: std::option::Option<crate::types::OutputSource>,
    ) -> Self {
        self.output_source = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociationExecutionTarget`](crate::types::AssociationExecutionTarget).
    pub fn build(self) -> crate::types::AssociationExecutionTarget {
        crate::types::AssociationExecutionTarget {
            association_id: self.association_id,
            association_version: self.association_version,
            execution_id: self.execution_id,
            resource_id: self.resource_id,
            resource_type: self.resource_type,
            status: self.status,
            detailed_status: self.detailed_status,
            last_execution_date: self.last_execution_date,
            output_source: self.output_source,
        }
    }
}
