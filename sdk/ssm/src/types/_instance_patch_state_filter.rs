// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a filter used in <code>DescribeInstancePatchStatesForPatchGroup</code> to scope down the information returned by the API.</p>
/// <p> <b>Example</b>: To filter for all managed nodes in a patch group having more than three patches with a <code>FailedCount</code> status, use the following for the filter:</p>
/// <ul>
/// <li> <p>Value for <code>Key</code>: <code>FailedCount</code> </p> </li>
/// <li> <p>Value for <code>Type</code>: <code>GreaterThan</code> </p> </li>
/// <li> <p>Value for <code>Values</code>: <code>3</code> </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstancePatchStateFilter {
    /// <p>The key for the filter. Supported values include the following:</p>
    /// <ul>
    /// <li> <p> <code>InstalledCount</code> </p> </li>
    /// <li> <p> <code>InstalledOtherCount</code> </p> </li>
    /// <li> <p> <code>InstalledPendingRebootCount</code> </p> </li>
    /// <li> <p> <code>InstalledRejectedCount</code> </p> </li>
    /// <li> <p> <code>MissingCount</code> </p> </li>
    /// <li> <p> <code>FailedCount</code> </p> </li>
    /// <li> <p> <code>UnreportedNotApplicableCount</code> </p> </li>
    /// <li> <p> <code>NotApplicableCount</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The value for the filter. Must be an integer greater than or equal to 0.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The type of comparison that should be performed for the value.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::InstancePatchStateOperatorType>,
}
impl InstancePatchStateFilter {
    /// <p>The key for the filter. Supported values include the following:</p>
    /// <ul>
    /// <li> <p> <code>InstalledCount</code> </p> </li>
    /// <li> <p> <code>InstalledOtherCount</code> </p> </li>
    /// <li> <p> <code>InstalledPendingRebootCount</code> </p> </li>
    /// <li> <p> <code>InstalledRejectedCount</code> </p> </li>
    /// <li> <p> <code>MissingCount</code> </p> </li>
    /// <li> <p> <code>FailedCount</code> </p> </li>
    /// <li> <p> <code>UnreportedNotApplicableCount</code> </p> </li>
    /// <li> <p> <code>NotApplicableCount</code> </p> </li>
    /// </ul>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The value for the filter. Must be an integer greater than or equal to 0.</p>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
    /// <p>The type of comparison that should be performed for the value.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::InstancePatchStateOperatorType> {
        self.r#type.as_ref()
    }
}
impl InstancePatchStateFilter {
    /// Creates a new builder-style object to manufacture [`InstancePatchStateFilter`](crate::types::InstancePatchStateFilter).
    pub fn builder() -> crate::types::builders::InstancePatchStateFilterBuilder {
        crate::types::builders::InstancePatchStateFilterBuilder::default()
    }
}

/// A builder for [`InstancePatchStateFilter`](crate::types::InstancePatchStateFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstancePatchStateFilterBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) r#type: std::option::Option<crate::types::InstancePatchStateOperatorType>,
}
impl InstancePatchStateFilterBuilder {
    /// <p>The key for the filter. Supported values include the following:</p>
    /// <ul>
    /// <li> <p> <code>InstalledCount</code> </p> </li>
    /// <li> <p> <code>InstalledOtherCount</code> </p> </li>
    /// <li> <p> <code>InstalledPendingRebootCount</code> </p> </li>
    /// <li> <p> <code>InstalledRejectedCount</code> </p> </li>
    /// <li> <p> <code>MissingCount</code> </p> </li>
    /// <li> <p> <code>FailedCount</code> </p> </li>
    /// <li> <p> <code>UnreportedNotApplicableCount</code> </p> </li>
    /// <li> <p> <code>NotApplicableCount</code> </p> </li>
    /// </ul>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The key for the filter. Supported values include the following:</p>
    /// <ul>
    /// <li> <p> <code>InstalledCount</code> </p> </li>
    /// <li> <p> <code>InstalledOtherCount</code> </p> </li>
    /// <li> <p> <code>InstalledPendingRebootCount</code> </p> </li>
    /// <li> <p> <code>InstalledRejectedCount</code> </p> </li>
    /// <li> <p> <code>MissingCount</code> </p> </li>
    /// <li> <p> <code>FailedCount</code> </p> </li>
    /// <li> <p> <code>UnreportedNotApplicableCount</code> </p> </li>
    /// <li> <p> <code>NotApplicableCount</code> </p> </li>
    /// </ul>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The value for the filter. Must be an integer greater than or equal to 0.</p>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>The value for the filter. Must be an integer greater than or equal to 0.</p>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// <p>The type of comparison that should be performed for the value.</p>
    pub fn r#type(mut self, input: crate::types::InstancePatchStateOperatorType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of comparison that should be performed for the value.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::InstancePatchStateOperatorType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`InstancePatchStateFilter`](crate::types::InstancePatchStateFilter).
    pub fn build(self) -> crate::types::InstancePatchStateFilter {
        crate::types::InstancePatchStateFilter {
            key: self.key,
            values: self.values,
            r#type: self.r#type,
        }
    }
}
