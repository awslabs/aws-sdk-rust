// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about parameter usage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ParameterHistory {
    /// <p>The name of the parameter.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of parameter used.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ParameterType>,
    /// <p>The ID of the query key used for this parameter.</p>
    #[doc(hidden)]
    pub key_id: std::option::Option<std::string::String>,
    /// <p>Date the parameter was last changed or updated.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services user who last changed the parameter.</p>
    #[doc(hidden)]
    pub last_modified_user: std::option::Option<std::string::String>,
    /// <p>Information about the parameter.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The parameter value.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>Parameter names can include the following letters and symbols.</p>
    /// <p>a-zA-Z0-9_.-</p>
    #[doc(hidden)]
    pub allowed_pattern: std::option::Option<std::string::String>,
    /// <p>The parameter version.</p>
    #[doc(hidden)]
    pub version: i64,
    /// <p>Labels assigned to the parameter version.</p>
    #[doc(hidden)]
    pub labels: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The parameter tier.</p>
    #[doc(hidden)]
    pub tier: std::option::Option<crate::types::ParameterTier>,
    /// <p>Information about the policies assigned to a parameter.</p>
    /// <p> <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html">Assigning parameter policies</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    #[doc(hidden)]
    pub policies: std::option::Option<std::vec::Vec<crate::types::ParameterInlinePolicy>>,
    /// <p>The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The default is <code>text</code>.</p>
    #[doc(hidden)]
    pub data_type: std::option::Option<std::string::String>,
}
impl ParameterHistory {
    /// <p>The name of the parameter.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of parameter used.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ParameterType> {
        self.r#type.as_ref()
    }
    /// <p>The ID of the query key used for this parameter.</p>
    pub fn key_id(&self) -> std::option::Option<&str> {
        self.key_id.as_deref()
    }
    /// <p>Date the parameter was last changed or updated.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services user who last changed the parameter.</p>
    pub fn last_modified_user(&self) -> std::option::Option<&str> {
        self.last_modified_user.as_deref()
    }
    /// <p>Information about the parameter.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The parameter value.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>Parameter names can include the following letters and symbols.</p>
    /// <p>a-zA-Z0-9_.-</p>
    pub fn allowed_pattern(&self) -> std::option::Option<&str> {
        self.allowed_pattern.as_deref()
    }
    /// <p>The parameter version.</p>
    pub fn version(&self) -> i64 {
        self.version
    }
    /// <p>Labels assigned to the parameter version.</p>
    pub fn labels(&self) -> std::option::Option<&[std::string::String]> {
        self.labels.as_deref()
    }
    /// <p>The parameter tier.</p>
    pub fn tier(&self) -> std::option::Option<&crate::types::ParameterTier> {
        self.tier.as_ref()
    }
    /// <p>Information about the policies assigned to a parameter.</p>
    /// <p> <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html">Assigning parameter policies</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn policies(&self) -> std::option::Option<&[crate::types::ParameterInlinePolicy]> {
        self.policies.as_deref()
    }
    /// <p>The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The default is <code>text</code>.</p>
    pub fn data_type(&self) -> std::option::Option<&str> {
        self.data_type.as_deref()
    }
}
impl std::fmt::Debug for ParameterHistory {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ParameterHistory");
        formatter.field("name", &self.name);
        formatter.field("r#type", &self.r#type);
        formatter.field("key_id", &self.key_id);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.field("last_modified_user", &self.last_modified_user);
        formatter.field("description", &self.description);
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("allowed_pattern", &self.allowed_pattern);
        formatter.field("version", &self.version);
        formatter.field("labels", &self.labels);
        formatter.field("tier", &self.tier);
        formatter.field("policies", &self.policies);
        formatter.field("data_type", &self.data_type);
        formatter.finish()
    }
}
impl ParameterHistory {
    /// Creates a new builder-style object to manufacture [`ParameterHistory`](crate::types::ParameterHistory).
    pub fn builder() -> crate::types::builders::ParameterHistoryBuilder {
        crate::types::builders::ParameterHistoryBuilder::default()
    }
}

/// A builder for [`ParameterHistory`](crate::types::ParameterHistory).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ParameterHistoryBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ParameterType>,
    pub(crate) key_id: std::option::Option<std::string::String>,
    pub(crate) last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_user: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) allowed_pattern: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<i64>,
    pub(crate) labels: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tier: std::option::Option<crate::types::ParameterTier>,
    pub(crate) policies: std::option::Option<std::vec::Vec<crate::types::ParameterInlinePolicy>>,
    pub(crate) data_type: std::option::Option<std::string::String>,
}
impl ParameterHistoryBuilder {
    /// <p>The name of the parameter.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the parameter.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of parameter used.</p>
    pub fn r#type(mut self, input: crate::types::ParameterType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of parameter used.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ParameterType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The ID of the query key used for this parameter.</p>
    pub fn key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_id = Some(input.into());
        self
    }
    /// <p>The ID of the query key used for this parameter.</p>
    pub fn set_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_id = input;
        self
    }
    /// <p>Date the parameter was last changed or updated.</p>
    pub fn last_modified_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = Some(input);
        self
    }
    /// <p>Date the parameter was last changed or updated.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services user who last changed the parameter.</p>
    pub fn last_modified_user(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_user = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services user who last changed the parameter.</p>
    pub fn set_last_modified_user(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_modified_user = input;
        self
    }
    /// <p>Information about the parameter.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Information about the parameter.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The parameter value.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The parameter value.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>Parameter names can include the following letters and symbols.</p>
    /// <p>a-zA-Z0-9_.-</p>
    pub fn allowed_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.allowed_pattern = Some(input.into());
        self
    }
    /// <p>Parameter names can include the following letters and symbols.</p>
    /// <p>a-zA-Z0-9_.-</p>
    pub fn set_allowed_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.allowed_pattern = input;
        self
    }
    /// <p>The parameter version.</p>
    pub fn version(mut self, input: i64) -> Self {
        self.version = Some(input);
        self
    }
    /// <p>The parameter version.</p>
    pub fn set_version(mut self, input: std::option::Option<i64>) -> Self {
        self.version = input;
        self
    }
    /// Appends an item to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>Labels assigned to the parameter version.</p>
    pub fn labels(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.labels.unwrap_or_default();
        v.push(input.into());
        self.labels = Some(v);
        self
    }
    /// <p>Labels assigned to the parameter version.</p>
    pub fn set_labels(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.labels = input;
        self
    }
    /// <p>The parameter tier.</p>
    pub fn tier(mut self, input: crate::types::ParameterTier) -> Self {
        self.tier = Some(input);
        self
    }
    /// <p>The parameter tier.</p>
    pub fn set_tier(mut self, input: std::option::Option<crate::types::ParameterTier>) -> Self {
        self.tier = input;
        self
    }
    /// Appends an item to `policies`.
    ///
    /// To override the contents of this collection use [`set_policies`](Self::set_policies).
    ///
    /// <p>Information about the policies assigned to a parameter.</p>
    /// <p> <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html">Assigning parameter policies</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn policies(mut self, input: crate::types::ParameterInlinePolicy) -> Self {
        let mut v = self.policies.unwrap_or_default();
        v.push(input);
        self.policies = Some(v);
        self
    }
    /// <p>Information about the policies assigned to a parameter.</p>
    /// <p> <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html">Assigning parameter policies</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn set_policies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ParameterInlinePolicy>>,
    ) -> Self {
        self.policies = input;
        self
    }
    /// <p>The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The default is <code>text</code>.</p>
    pub fn data_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_type = Some(input.into());
        self
    }
    /// <p>The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The default is <code>text</code>.</p>
    pub fn set_data_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ParameterHistory`](crate::types::ParameterHistory).
    pub fn build(self) -> crate::types::ParameterHistory {
        crate::types::ParameterHistory {
            name: self.name,
            r#type: self.r#type,
            key_id: self.key_id,
            last_modified_date: self.last_modified_date,
            last_modified_user: self.last_modified_user,
            description: self.description,
            value: self.value,
            allowed_pattern: self.allowed_pattern,
            version: self.version.unwrap_or_default(),
            labels: self.labels,
            tier: self.tier,
            policies: self.policies,
            data_type: self.data_type,
        }
    }
}
impl std::fmt::Debug for ParameterHistoryBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ParameterHistoryBuilder");
        formatter.field("name", &self.name);
        formatter.field("r#type", &self.r#type);
        formatter.field("key_id", &self.key_id);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.field("last_modified_user", &self.last_modified_user);
        formatter.field("description", &self.description);
        formatter.field("value", &"*** Sensitive Data Redacted ***");
        formatter.field("allowed_pattern", &self.allowed_pattern);
        formatter.field("version", &self.version);
        formatter.field("labels", &self.labels);
        formatter.field("tier", &self.tier);
        formatter.field("policies", &self.policies);
        formatter.field("data_type", &self.data_type);
        formatter.finish()
    }
}
