// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>One or more aggregators for viewing counts of OpsData using different dimensions such as <code>Source</code>, <code>CreatedTime</code>, or <code>Source and CreatedTime</code>, to name a few.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpsAggregator {
    /// <p>Either a <code>Range</code> or <code>Count</code> aggregator for limiting an OpsData summary.</p>
    pub aggregator_type: ::std::option::Option<::std::string::String>,
    /// <p>The data type name to use for viewing counts of OpsData.</p>
    pub type_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of an OpsData attribute on which to limit the count of OpsData.</p>
    pub attribute_name: ::std::option::Option<::std::string::String>,
    /// <p>The aggregator value.</p>
    pub values: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The aggregator filters.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::OpsFilter>>,
    /// <p>A nested aggregator for viewing counts of OpsData.</p>
    pub aggregators: ::std::option::Option<::std::vec::Vec<crate::types::OpsAggregator>>,
}
impl OpsAggregator {
    /// <p>Either a <code>Range</code> or <code>Count</code> aggregator for limiting an OpsData summary.</p>
    pub fn aggregator_type(&self) -> ::std::option::Option<&str> {
        self.aggregator_type.as_deref()
    }
    /// <p>The data type name to use for viewing counts of OpsData.</p>
    pub fn type_name(&self) -> ::std::option::Option<&str> {
        self.type_name.as_deref()
    }
    /// <p>The name of an OpsData attribute on which to limit the count of OpsData.</p>
    pub fn attribute_name(&self) -> ::std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p>The aggregator value.</p>
    pub fn values(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.values.as_ref()
    }
    /// <p>The aggregator filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::OpsFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>A nested aggregator for viewing counts of OpsData.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aggregators.is_none()`.
    pub fn aggregators(&self) -> &[crate::types::OpsAggregator] {
        self.aggregators.as_deref().unwrap_or_default()
    }
}
impl OpsAggregator {
    /// Creates a new builder-style object to manufacture [`OpsAggregator`](crate::types::OpsAggregator).
    pub fn builder() -> crate::types::builders::OpsAggregatorBuilder {
        crate::types::builders::OpsAggregatorBuilder::default()
    }
}

/// A builder for [`OpsAggregator`](crate::types::OpsAggregator).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OpsAggregatorBuilder {
    pub(crate) aggregator_type: ::std::option::Option<::std::string::String>,
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::OpsFilter>>,
    pub(crate) aggregators: ::std::option::Option<::std::vec::Vec<crate::types::OpsAggregator>>,
}
impl OpsAggregatorBuilder {
    /// <p>Either a <code>Range</code> or <code>Count</code> aggregator for limiting an OpsData summary.</p>
    pub fn aggregator_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aggregator_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Either a <code>Range</code> or <code>Count</code> aggregator for limiting an OpsData summary.</p>
    pub fn set_aggregator_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aggregator_type = input;
        self
    }
    /// <p>Either a <code>Range</code> or <code>Count</code> aggregator for limiting an OpsData summary.</p>
    pub fn get_aggregator_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.aggregator_type
    }
    /// <p>The data type name to use for viewing counts of OpsData.</p>
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data type name to use for viewing counts of OpsData.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The data type name to use for viewing counts of OpsData.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// <p>The name of an OpsData attribute on which to limit the count of OpsData.</p>
    pub fn attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an OpsData attribute on which to limit the count of OpsData.</p>
    pub fn set_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The name of an OpsData attribute on which to limit the count of OpsData.</p>
    pub fn get_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_name
    }
    /// Adds a key-value pair to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The aggregator value.</p>
    pub fn values(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.values.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.values = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The aggregator value.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The aggregator value.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.values
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The aggregator filters.</p>
    pub fn filters(mut self, input: crate::types::OpsFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The aggregator filters.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OpsFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The aggregator filters.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OpsFilter>> {
        &self.filters
    }
    /// Appends an item to `aggregators`.
    ///
    /// To override the contents of this collection use [`set_aggregators`](Self::set_aggregators).
    ///
    /// <p>A nested aggregator for viewing counts of OpsData.</p>
    pub fn aggregators(mut self, input: crate::types::OpsAggregator) -> Self {
        let mut v = self.aggregators.unwrap_or_default();
        v.push(input);
        self.aggregators = ::std::option::Option::Some(v);
        self
    }
    /// <p>A nested aggregator for viewing counts of OpsData.</p>
    pub fn set_aggregators(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OpsAggregator>>) -> Self {
        self.aggregators = input;
        self
    }
    /// <p>A nested aggregator for viewing counts of OpsData.</p>
    pub fn get_aggregators(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OpsAggregator>> {
        &self.aggregators
    }
    /// Consumes the builder and constructs a [`OpsAggregator`](crate::types::OpsAggregator).
    pub fn build(self) -> crate::types::OpsAggregator {
        crate::types::OpsAggregator {
            aggregator_type: self.aggregator_type,
            type_name: self.type_name,
            attribute_name: self.attribute_name,
            values: self.values,
            filters: self.filters,
            aggregators: self.aggregators,
        }
    }
}
