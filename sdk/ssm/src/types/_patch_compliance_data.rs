// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the state of a patch on a particular managed node as it relates to the patch baseline used to patch the node.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PatchComplianceData {
    /// <p>The title of the patch.</p>
    pub title: ::std::string::String,
    /// <p>The operating system-specific ID of the patch.</p>
    pub kb_id: ::std::string::String,
    /// <p>The classification of the patch, such as <code>SecurityUpdates</code>, <code>Updates</code>, and <code>CriticalUpdates</code>.</p>
    pub classification: ::std::string::String,
    /// <p>The severity of the patch such as <code>Critical</code>, <code>Important</code>, and <code>Moderate</code>.</p>
    pub severity: ::std::string::String,
    /// <p>The state of the patch on the managed node, such as INSTALLED or FAILED.</p>
    /// <p>For descriptions of each patch state, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch">About patch compliance</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub state: crate::types::PatchComplianceDataState,
    /// <p>The date/time the patch was installed on the managed node. Not all operating systems provide this level of information.</p>
    pub installed_time: ::aws_smithy_types::DateTime,
    /// <p>The IDs of one or more Common Vulnerabilities and Exposure (CVE) issues that are resolved by the patch.</p>
    pub cve_ids: ::std::option::Option<::std::string::String>,
}
impl PatchComplianceData {
    /// <p>The title of the patch.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The operating system-specific ID of the patch.</p>
    pub fn kb_id(&self) -> &str {
        use std::ops::Deref;
        self.kb_id.deref()
    }
    /// <p>The classification of the patch, such as <code>SecurityUpdates</code>, <code>Updates</code>, and <code>CriticalUpdates</code>.</p>
    pub fn classification(&self) -> &str {
        use std::ops::Deref;
        self.classification.deref()
    }
    /// <p>The severity of the patch such as <code>Critical</code>, <code>Important</code>, and <code>Moderate</code>.</p>
    pub fn severity(&self) -> &str {
        use std::ops::Deref;
        self.severity.deref()
    }
    /// <p>The state of the patch on the managed node, such as INSTALLED or FAILED.</p>
    /// <p>For descriptions of each patch state, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch">About patch compliance</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn state(&self) -> &crate::types::PatchComplianceDataState {
        &self.state
    }
    /// <p>The date/time the patch was installed on the managed node. Not all operating systems provide this level of information.</p>
    pub fn installed_time(&self) -> &::aws_smithy_types::DateTime {
        &self.installed_time
    }
    /// <p>The IDs of one or more Common Vulnerabilities and Exposure (CVE) issues that are resolved by the patch.</p>
    pub fn cve_ids(&self) -> ::std::option::Option<&str> {
        self.cve_ids.as_deref()
    }
}
impl PatchComplianceData {
    /// Creates a new builder-style object to manufacture [`PatchComplianceData`](crate::types::PatchComplianceData).
    pub fn builder() -> crate::types::builders::PatchComplianceDataBuilder {
        crate::types::builders::PatchComplianceDataBuilder::default()
    }
}

/// A builder for [`PatchComplianceData`](crate::types::PatchComplianceData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PatchComplianceDataBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) kb_id: ::std::option::Option<::std::string::String>,
    pub(crate) classification: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::PatchComplianceDataState>,
    pub(crate) installed_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) cve_ids: ::std::option::Option<::std::string::String>,
}
impl PatchComplianceDataBuilder {
    /// <p>The title of the patch.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the patch.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the patch.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The operating system-specific ID of the patch.</p>
    /// This field is required.
    pub fn kb_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kb_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The operating system-specific ID of the patch.</p>
    pub fn set_kb_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kb_id = input;
        self
    }
    /// <p>The operating system-specific ID of the patch.</p>
    pub fn get_kb_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kb_id
    }
    /// <p>The classification of the patch, such as <code>SecurityUpdates</code>, <code>Updates</code>, and <code>CriticalUpdates</code>.</p>
    /// This field is required.
    pub fn classification(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.classification = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The classification of the patch, such as <code>SecurityUpdates</code>, <code>Updates</code>, and <code>CriticalUpdates</code>.</p>
    pub fn set_classification(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.classification = input;
        self
    }
    /// <p>The classification of the patch, such as <code>SecurityUpdates</code>, <code>Updates</code>, and <code>CriticalUpdates</code>.</p>
    pub fn get_classification(&self) -> &::std::option::Option<::std::string::String> {
        &self.classification
    }
    /// <p>The severity of the patch such as <code>Critical</code>, <code>Important</code>, and <code>Moderate</code>.</p>
    /// This field is required.
    pub fn severity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.severity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The severity of the patch such as <code>Critical</code>, <code>Important</code>, and <code>Moderate</code>.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The severity of the patch such as <code>Critical</code>, <code>Important</code>, and <code>Moderate</code>.</p>
    pub fn get_severity(&self) -> &::std::option::Option<::std::string::String> {
        &self.severity
    }
    /// <p>The state of the patch on the managed node, such as INSTALLED or FAILED.</p>
    /// <p>For descriptions of each patch state, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch">About patch compliance</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::PatchComplianceDataState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the patch on the managed node, such as INSTALLED or FAILED.</p>
    /// <p>For descriptions of each patch state, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch">About patch compliance</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::PatchComplianceDataState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the patch on the managed node, such as INSTALLED or FAILED.</p>
    /// <p>For descriptions of each patch state, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch">About patch compliance</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::PatchComplianceDataState> {
        &self.state
    }
    /// <p>The date/time the patch was installed on the managed node. Not all operating systems provide this level of information.</p>
    /// This field is required.
    pub fn installed_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.installed_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date/time the patch was installed on the managed node. Not all operating systems provide this level of information.</p>
    pub fn set_installed_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.installed_time = input;
        self
    }
    /// <p>The date/time the patch was installed on the managed node. Not all operating systems provide this level of information.</p>
    pub fn get_installed_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.installed_time
    }
    /// <p>The IDs of one or more Common Vulnerabilities and Exposure (CVE) issues that are resolved by the patch.</p>
    pub fn cve_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cve_ids = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IDs of one or more Common Vulnerabilities and Exposure (CVE) issues that are resolved by the patch.</p>
    pub fn set_cve_ids(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cve_ids = input;
        self
    }
    /// <p>The IDs of one or more Common Vulnerabilities and Exposure (CVE) issues that are resolved by the patch.</p>
    pub fn get_cve_ids(&self) -> &::std::option::Option<::std::string::String> {
        &self.cve_ids
    }
    /// Consumes the builder and constructs a [`PatchComplianceData`](crate::types::PatchComplianceData).
    /// This method will fail if any of the following fields are not set:
    /// - [`title`](crate::types::builders::PatchComplianceDataBuilder::title)
    /// - [`kb_id`](crate::types::builders::PatchComplianceDataBuilder::kb_id)
    /// - [`classification`](crate::types::builders::PatchComplianceDataBuilder::classification)
    /// - [`severity`](crate::types::builders::PatchComplianceDataBuilder::severity)
    /// - [`state`](crate::types::builders::PatchComplianceDataBuilder::state)
    /// - [`installed_time`](crate::types::builders::PatchComplianceDataBuilder::installed_time)
    pub fn build(self) -> ::std::result::Result<crate::types::PatchComplianceData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PatchComplianceData {
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building PatchComplianceData",
                )
            })?,
            kb_id: self.kb_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "kb_id",
                    "kb_id was not specified but it is required when building PatchComplianceData",
                )
            })?,
            classification: self.classification.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "classification",
                    "classification was not specified but it is required when building PatchComplianceData",
                )
            })?,
            severity: self.severity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "severity",
                    "severity was not specified but it is required when building PatchComplianceData",
                )
            })?,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building PatchComplianceData",
                )
            })?,
            installed_time: self.installed_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "installed_time",
                    "installed_time was not specified but it is required when building PatchComplianceData",
                )
            })?,
            cve_ids: self.cve_ids,
        })
    }
}
