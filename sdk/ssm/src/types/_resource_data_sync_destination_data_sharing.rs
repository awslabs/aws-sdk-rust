// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Synchronize Amazon Web Services Systems Manager Inventory data from multiple Amazon Web Services accounts defined in Organizations to a centralized Amazon S3 bucket. Data is synchronized to individual key prefixes in the central bucket. Each key prefix represents a different Amazon Web Services account ID.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceDataSyncDestinationDataSharing {
    /// <p>The sharing data type. Only <code>Organization</code> is supported.</p>
    #[doc(hidden)]
    pub destination_data_sharing_type: std::option::Option<std::string::String>,
}
impl ResourceDataSyncDestinationDataSharing {
    /// <p>The sharing data type. Only <code>Organization</code> is supported.</p>
    pub fn destination_data_sharing_type(&self) -> std::option::Option<&str> {
        self.destination_data_sharing_type.as_deref()
    }
}
impl ResourceDataSyncDestinationDataSharing {
    /// Creates a new builder-style object to manufacture [`ResourceDataSyncDestinationDataSharing`](crate::types::ResourceDataSyncDestinationDataSharing).
    pub fn builder() -> crate::types::builders::ResourceDataSyncDestinationDataSharingBuilder {
        crate::types::builders::ResourceDataSyncDestinationDataSharingBuilder::default()
    }
}

/// A builder for [`ResourceDataSyncDestinationDataSharing`](crate::types::ResourceDataSyncDestinationDataSharing).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceDataSyncDestinationDataSharingBuilder {
    pub(crate) destination_data_sharing_type: std::option::Option<std::string::String>,
}
impl ResourceDataSyncDestinationDataSharingBuilder {
    /// <p>The sharing data type. Only <code>Organization</code> is supported.</p>
    pub fn destination_data_sharing_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_data_sharing_type = Some(input.into());
        self
    }
    /// <p>The sharing data type. Only <code>Organization</code> is supported.</p>
    pub fn set_destination_data_sharing_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_data_sharing_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceDataSyncDestinationDataSharing`](crate::types::ResourceDataSyncDestinationDataSharing).
    pub fn build(self) -> crate::types::ResourceDataSyncDestinationDataSharing {
        crate::types::ResourceDataSyncDestinationDataSharing {
            destination_data_sharing_type: self.destination_data_sharing_type,
        }
    }
}
