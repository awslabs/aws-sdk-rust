// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Includes information about the specified association.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociationExecution {
    /// <p>The association ID.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The association version.</p>
    pub association_version: ::std::option::Option<::std::string::String>,
    /// <p>The execution ID for the association.</p>
    pub execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the association execution.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Detailed status information about the execution.</p>
    pub detailed_status: ::std::option::Option<::std::string::String>,
    /// <p>The time the execution started.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date of the last execution.</p>
    pub last_execution_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An aggregate status of the resources in the execution based on the status type.</p>
    pub resource_count_by_status: ::std::option::Option<::std::string::String>,
    /// <p>The details for the CloudWatch alarm you want to apply to an automation or command.</p>
    pub alarm_configuration: ::std::option::Option<crate::types::AlarmConfiguration>,
    /// <p>The CloudWatch alarms that were invoked by the association.</p>
    pub triggered_alarms: ::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>>,
}
impl AssociationExecution {
    /// <p>The association ID.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The association version.</p>
    pub fn association_version(&self) -> ::std::option::Option<&str> {
        self.association_version.as_deref()
    }
    /// <p>The execution ID for the association.</p>
    pub fn execution_id(&self) -> ::std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The status of the association execution.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Detailed status information about the execution.</p>
    pub fn detailed_status(&self) -> ::std::option::Option<&str> {
        self.detailed_status.as_deref()
    }
    /// <p>The time the execution started.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The date of the last execution.</p>
    pub fn last_execution_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_execution_date.as_ref()
    }
    /// <p>An aggregate status of the resources in the execution based on the status type.</p>
    pub fn resource_count_by_status(&self) -> ::std::option::Option<&str> {
        self.resource_count_by_status.as_deref()
    }
    /// <p>The details for the CloudWatch alarm you want to apply to an automation or command.</p>
    pub fn alarm_configuration(&self) -> ::std::option::Option<&crate::types::AlarmConfiguration> {
        self.alarm_configuration.as_ref()
    }
    /// <p>The CloudWatch alarms that were invoked by the association.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.triggered_alarms.is_none()`.
    pub fn triggered_alarms(&self) -> &[crate::types::AlarmStateInformation] {
        self.triggered_alarms.as_deref().unwrap_or_default()
    }
}
impl AssociationExecution {
    /// Creates a new builder-style object to manufacture [`AssociationExecution`](crate::types::AssociationExecution).
    pub fn builder() -> crate::types::builders::AssociationExecutionBuilder {
        crate::types::builders::AssociationExecutionBuilder::default()
    }
}

/// A builder for [`AssociationExecution`](crate::types::AssociationExecution).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociationExecutionBuilder {
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_version: ::std::option::Option<::std::string::String>,
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) detailed_status: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_execution_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resource_count_by_status: ::std::option::Option<::std::string::String>,
    pub(crate) alarm_configuration: ::std::option::Option<crate::types::AlarmConfiguration>,
    pub(crate) triggered_alarms: ::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>>,
}
impl AssociationExecutionBuilder {
    /// <p>The association ID.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The association ID.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The association ID.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>The association version.</p>
    pub fn association_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The association version.</p>
    pub fn set_association_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_version = input;
        self
    }
    /// <p>The association version.</p>
    pub fn get_association_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_version
    }
    /// <p>The execution ID for the association.</p>
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution ID for the association.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The execution ID for the association.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The status of the association execution.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the association execution.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the association execution.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Detailed status information about the execution.</p>
    pub fn detailed_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detailed_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Detailed status information about the execution.</p>
    pub fn set_detailed_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detailed_status = input;
        self
    }
    /// <p>Detailed status information about the execution.</p>
    pub fn get_detailed_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.detailed_status
    }
    /// <p>The time the execution started.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the execution started.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time the execution started.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date of the last execution.</p>
    pub fn last_execution_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_execution_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date of the last execution.</p>
    pub fn set_last_execution_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_execution_date = input;
        self
    }
    /// <p>The date of the last execution.</p>
    pub fn get_last_execution_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_execution_date
    }
    /// <p>An aggregate status of the resources in the execution based on the status type.</p>
    pub fn resource_count_by_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_count_by_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An aggregate status of the resources in the execution based on the status type.</p>
    pub fn set_resource_count_by_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_count_by_status = input;
        self
    }
    /// <p>An aggregate status of the resources in the execution based on the status type.</p>
    pub fn get_resource_count_by_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_count_by_status
    }
    /// <p>The details for the CloudWatch alarm you want to apply to an automation or command.</p>
    pub fn alarm_configuration(mut self, input: crate::types::AlarmConfiguration) -> Self {
        self.alarm_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details for the CloudWatch alarm you want to apply to an automation or command.</p>
    pub fn set_alarm_configuration(mut self, input: ::std::option::Option<crate::types::AlarmConfiguration>) -> Self {
        self.alarm_configuration = input;
        self
    }
    /// <p>The details for the CloudWatch alarm you want to apply to an automation or command.</p>
    pub fn get_alarm_configuration(&self) -> &::std::option::Option<crate::types::AlarmConfiguration> {
        &self.alarm_configuration
    }
    /// Appends an item to `triggered_alarms`.
    ///
    /// To override the contents of this collection use [`set_triggered_alarms`](Self::set_triggered_alarms).
    ///
    /// <p>The CloudWatch alarms that were invoked by the association.</p>
    pub fn triggered_alarms(mut self, input: crate::types::AlarmStateInformation) -> Self {
        let mut v = self.triggered_alarms.unwrap_or_default();
        v.push(input);
        self.triggered_alarms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The CloudWatch alarms that were invoked by the association.</p>
    pub fn set_triggered_alarms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>>) -> Self {
        self.triggered_alarms = input;
        self
    }
    /// <p>The CloudWatch alarms that were invoked by the association.</p>
    pub fn get_triggered_alarms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AlarmStateInformation>> {
        &self.triggered_alarms
    }
    /// Consumes the builder and constructs a [`AssociationExecution`](crate::types::AssociationExecution).
    pub fn build(self) -> crate::types::AssociationExecution {
        crate::types::AssociationExecution {
            association_id: self.association_id,
            association_version: self.association_version,
            execution_id: self.execution_id,
            status: self.status,
            detailed_status: self.detailed_status,
            created_time: self.created_time,
            last_execution_date: self.last_execution_date,
            resource_count_by_status: self.resource_count_by_status,
            alarm_configuration: self.alarm_configuration,
            triggered_alarms: self.triggered_alarms,
        }
    }
}
