// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The maintenance window to which the specified target belongs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MaintenanceWindowIdentityForTarget {
    /// <p>The ID of the maintenance window.</p>
    #[doc(hidden)]
    pub window_id: std::option::Option<std::string::String>,
    /// <p>The name of the maintenance window.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl MaintenanceWindowIdentityForTarget {
    /// <p>The ID of the maintenance window.</p>
    pub fn window_id(&self) -> std::option::Option<&str> {
        self.window_id.as_deref()
    }
    /// <p>The name of the maintenance window.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl MaintenanceWindowIdentityForTarget {
    /// Creates a new builder-style object to manufacture [`MaintenanceWindowIdentityForTarget`](crate::types::MaintenanceWindowIdentityForTarget).
    pub fn builder() -> crate::types::builders::MaintenanceWindowIdentityForTargetBuilder {
        crate::types::builders::MaintenanceWindowIdentityForTargetBuilder::default()
    }
}

/// A builder for [`MaintenanceWindowIdentityForTarget`](crate::types::MaintenanceWindowIdentityForTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MaintenanceWindowIdentityForTargetBuilder {
    pub(crate) window_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl MaintenanceWindowIdentityForTargetBuilder {
    /// <p>The ID of the maintenance window.</p>
    pub fn window_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.window_id = Some(input.into());
        self
    }
    /// <p>The ID of the maintenance window.</p>
    pub fn set_window_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.window_id = input;
        self
    }
    /// <p>The name of the maintenance window.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the maintenance window.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`MaintenanceWindowIdentityForTarget`](crate::types::MaintenanceWindowIdentityForTarget).
    pub fn build(self) -> crate::types::MaintenanceWindowIdentityForTarget {
        crate::types::MaintenanceWindowIdentityForTarget {
            window_id: self.window_id,
            name: self.name,
        }
    }
}
