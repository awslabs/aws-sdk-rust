// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for a <code>STEP_FUNCTIONS</code> task.</p>
/// <p>For information about specifying and updating task parameters, see <code>RegisterTaskWithMaintenanceWindow</code> and <code>UpdateMaintenanceWindowTask</code>.</p> <note>
/// <p> <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
/// <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>
/// <p>For Step Functions tasks, Systems Manager ignores any values specified for <code>TaskParameters</code> and <code>LoggingInfo</code>.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MaintenanceWindowStepFunctionsParameters {
    /// <p>The inputs for the <code>STEP_FUNCTIONS</code> task.</p>
    #[doc(hidden)]
    pub input: std::option::Option<std::string::String>,
    /// <p>The name of the <code>STEP_FUNCTIONS</code> task.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl MaintenanceWindowStepFunctionsParameters {
    /// <p>The inputs for the <code>STEP_FUNCTIONS</code> task.</p>
    pub fn input(&self) -> std::option::Option<&str> {
        self.input.as_deref()
    }
    /// <p>The name of the <code>STEP_FUNCTIONS</code> task.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl std::fmt::Debug for MaintenanceWindowStepFunctionsParameters {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MaintenanceWindowStepFunctionsParameters");
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.finish()
    }
}
impl MaintenanceWindowStepFunctionsParameters {
    /// Creates a new builder-style object to manufacture [`MaintenanceWindowStepFunctionsParameters`](crate::types::MaintenanceWindowStepFunctionsParameters).
    pub fn builder() -> crate::types::builders::MaintenanceWindowStepFunctionsParametersBuilder {
        crate::types::builders::MaintenanceWindowStepFunctionsParametersBuilder::default()
    }
}

/// A builder for [`MaintenanceWindowStepFunctionsParameters`](crate::types::MaintenanceWindowStepFunctionsParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct MaintenanceWindowStepFunctionsParametersBuilder {
    pub(crate) input: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl MaintenanceWindowStepFunctionsParametersBuilder {
    /// <p>The inputs for the <code>STEP_FUNCTIONS</code> task.</p>
    pub fn input(mut self, input: impl Into<std::string::String>) -> Self {
        self.input = Some(input.into());
        self
    }
    /// <p>The inputs for the <code>STEP_FUNCTIONS</code> task.</p>
    pub fn set_input(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input = input;
        self
    }
    /// <p>The name of the <code>STEP_FUNCTIONS</code> task.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the <code>STEP_FUNCTIONS</code> task.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`MaintenanceWindowStepFunctionsParameters`](crate::types::MaintenanceWindowStepFunctionsParameters).
    pub fn build(self) -> crate::types::MaintenanceWindowStepFunctionsParameters {
        crate::types::MaintenanceWindowStepFunctionsParameters {
            input: self.input,
            name: self.name,
        }
    }
}
impl std::fmt::Debug for MaintenanceWindowStepFunctionsParametersBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MaintenanceWindowStepFunctionsParametersBuilder");
        formatter.field("input", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &self.name);
        formatter.finish()
    }
}
