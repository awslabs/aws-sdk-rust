// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The inventory item result attribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResultAttribute {
    /// <p>Name of the inventory item type. Valid value: <code>AWS:InstanceInformation</code>. Default Value: <code>AWS:InstanceInformation</code>.</p>
    #[doc(hidden)]
    pub type_name: std::option::Option<std::string::String>,
}
impl ResultAttribute {
    /// <p>Name of the inventory item type. Valid value: <code>AWS:InstanceInformation</code>. Default Value: <code>AWS:InstanceInformation</code>.</p>
    pub fn type_name(&self) -> std::option::Option<&str> {
        self.type_name.as_deref()
    }
}
impl ResultAttribute {
    /// Creates a new builder-style object to manufacture [`ResultAttribute`](crate::types::ResultAttribute).
    pub fn builder() -> crate::types::builders::ResultAttributeBuilder {
        crate::types::builders::ResultAttributeBuilder::default()
    }
}

/// A builder for [`ResultAttribute`](crate::types::ResultAttribute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResultAttributeBuilder {
    pub(crate) type_name: std::option::Option<std::string::String>,
}
impl ResultAttributeBuilder {
    /// <p>Name of the inventory item type. Valid value: <code>AWS:InstanceInformation</code>. Default Value: <code>AWS:InstanceInformation</code>.</p>
    pub fn type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.type_name = Some(input.into());
        self
    }
    /// <p>Name of the inventory item type. Valid value: <code>AWS:InstanceInformation</code>. Default Value: <code>AWS:InstanceInformation</code>.</p>
    pub fn set_type_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ResultAttribute`](crate::types::ResultAttribute).
    pub fn build(self) -> crate::types::ResultAttribute {
        crate::types::ResultAttribute {
            type_name: self.type_name,
        }
    }
}
