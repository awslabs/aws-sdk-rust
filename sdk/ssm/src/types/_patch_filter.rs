// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Defines which patches should be included in a patch baseline.</p>
/// <p>A patch filter consists of a key and a set of values. The filter key is a patch property. For example, the available filter keys for <code>WINDOWS</code> are <code>PATCH_SET</code>, <code>PRODUCT</code>, <code>PRODUCT_FAMILY</code>, <code>CLASSIFICATION</code>, and <code>MSRC_SEVERITY</code>.</p>
/// <p>The filter values define a matching criterion for the patch property indicated by the key. For example, if the filter key is <code>PRODUCT</code> and the filter values are <code>["Office 2013", "Office 2016"]</code>, then the filter accepts all patches where product name is either "Office 2013" or "Office 2016". The filter values can be exact values for the patch property given as a key, or a wildcard (*), which matches all values.</p>
/// <p>You can view lists of valid values for the patch properties by running the <code>DescribePatchProperties</code> command. For information about which patch properties can be used with each major operating system, see <code>DescribePatchProperties</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PatchFilter {
    /// <p>The key for the filter.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid keys for each operating system type.</p>
    pub key: crate::types::PatchFilterKey,
    /// <p>The value for the filter key.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid values for each key based on operating system type.</p>
    pub values: ::std::vec::Vec<::std::string::String>,
}
impl PatchFilter {
    /// <p>The key for the filter.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid keys for each operating system type.</p>
    pub fn key(&self) -> &crate::types::PatchFilterKey {
        &self.key
    }
    /// <p>The value for the filter key.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid values for each key based on operating system type.</p>
    pub fn values(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.values.deref()
    }
}
impl PatchFilter {
    /// Creates a new builder-style object to manufacture [`PatchFilter`](crate::types::PatchFilter).
    pub fn builder() -> crate::types::builders::PatchFilterBuilder {
        crate::types::builders::PatchFilterBuilder::default()
    }
}

/// A builder for [`PatchFilter`](crate::types::PatchFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PatchFilterBuilder {
    pub(crate) key: ::std::option::Option<crate::types::PatchFilterKey>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PatchFilterBuilder {
    /// <p>The key for the filter.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid keys for each operating system type.</p>
    /// This field is required.
    pub fn key(mut self, input: crate::types::PatchFilterKey) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The key for the filter.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid keys for each operating system type.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::PatchFilterKey>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key for the filter.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid keys for each operating system type.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::PatchFilterKey> {
        &self.key
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The value for the filter key.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid values for each key based on operating system type.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The value for the filter key.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid values for each key based on operating system type.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The value for the filter key.</p>
    /// <p>Run the <code>DescribePatchProperties</code> command to view lists of valid values for each key based on operating system type.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`PatchFilter`](crate::types::PatchFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::PatchFilterBuilder::key)
    /// - [`values`](crate::types::builders::PatchFilterBuilder::values)
    pub fn build(self) -> ::std::result::Result<crate::types::PatchFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PatchFilter {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building PatchFilter",
                )
            })?,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building PatchFilter",
                )
            })?,
        })
    }
}
