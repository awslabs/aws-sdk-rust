// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about the current state of an individual Automation execution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutomationExecution {
    /// <p>The execution ID.</p>
    #[doc(hidden)]
    pub automation_execution_id: std::option::Option<std::string::String>,
    /// <p>The name of the Automation runbook used during the execution.</p>
    #[doc(hidden)]
    pub document_name: std::option::Option<std::string::String>,
    /// <p>The version of the document to use during execution.</p>
    #[doc(hidden)]
    pub document_version: std::option::Option<std::string::String>,
    /// <p>The time the execution started.</p>
    #[doc(hidden)]
    pub execution_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the execution finished.</p>
    #[doc(hidden)]
    pub execution_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The execution status of the Automation.</p>
    #[doc(hidden)]
    pub automation_execution_status: std::option::Option<crate::types::AutomationExecutionStatus>,
    /// <p>A list of details about the current state of all steps that comprise an execution. An Automation runbook contains a list of steps that are run in order.</p>
    #[doc(hidden)]
    pub step_executions: std::option::Option<std::vec::Vec<crate::types::StepExecution>>,
    /// <p>A boolean value that indicates if the response contains the full list of the Automation step executions. If true, use the DescribeAutomationStepExecutions API operation to get the full list of step executions.</p>
    #[doc(hidden)]
    pub step_executions_truncated: bool,
    /// <p>The key-value map of execution parameters, which were supplied when calling <code>StartAutomationExecution</code>.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    #[doc(hidden)]
    pub outputs: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>A message describing why an execution has failed, if the status is set to Failed.</p>
    #[doc(hidden)]
    pub failure_message: std::option::Option<std::string::String>,
    /// <p>The automation execution mode.</p>
    #[doc(hidden)]
    pub mode: std::option::Option<crate::types::ExecutionMode>,
    /// <p>The AutomationExecutionId of the parent automation.</p>
    #[doc(hidden)]
    pub parent_automation_execution_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the user who ran the automation.</p>
    #[doc(hidden)]
    pub executed_by: std::option::Option<std::string::String>,
    /// <p>The name of the step that is currently running.</p>
    #[doc(hidden)]
    pub current_step_name: std::option::Option<std::string::String>,
    /// <p>The action of the step that is currently running.</p>
    #[doc(hidden)]
    pub current_action: std::option::Option<std::string::String>,
    /// <p>The parameter name.</p>
    #[doc(hidden)]
    pub target_parameter_name: std::option::Option<std::string::String>,
    /// <p>The specified targets.</p>
    #[doc(hidden)]
    pub targets: std::option::Option<std::vec::Vec<crate::types::Target>>,
    /// <p>The specified key-value mapping of document parameters to target resources.</p>
    #[doc(hidden)]
    pub target_maps: std::option::Option<
        std::vec::Vec<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    >,
    /// <p>A list of resolved targets in the rate control execution.</p>
    #[doc(hidden)]
    pub resolved_targets: std::option::Option<crate::types::ResolvedTargets>,
    /// <p>The <code>MaxConcurrency</code> value specified by the user when the execution started.</p>
    #[doc(hidden)]
    pub max_concurrency: std::option::Option<std::string::String>,
    /// <p>The MaxErrors value specified by the user when the execution started.</p>
    #[doc(hidden)]
    pub max_errors: std::option::Option<std::string::String>,
    /// <p>The target of the execution.</p>
    #[doc(hidden)]
    pub target: std::option::Option<std::string::String>,
    /// <p>The combination of Amazon Web Services Regions and/or Amazon Web Services accounts where you want to run the Automation.</p>
    #[doc(hidden)]
    pub target_locations: std::option::Option<std::vec::Vec<crate::types::TargetLocation>>,
    /// <p>An aggregate of step execution statuses displayed in the Amazon Web Services Systems Manager console for a multi-Region and multi-account Automation execution.</p>
    #[doc(hidden)]
    pub progress_counters: std::option::Option<crate::types::ProgressCounters>,
    /// <p>The details for the CloudWatch alarm applied to your automation.</p>
    #[doc(hidden)]
    pub alarm_configuration: std::option::Option<crate::types::AlarmConfiguration>,
    /// <p>The CloudWatch alarm that was invoked by the automation.</p>
    #[doc(hidden)]
    pub triggered_alarms: std::option::Option<std::vec::Vec<crate::types::AlarmStateInformation>>,
    /// <p>The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>.</p>
    #[doc(hidden)]
    pub automation_subtype: std::option::Option<crate::types::AutomationSubtype>,
    /// <p>The date and time the Automation operation is scheduled to start.</p>
    #[doc(hidden)]
    pub scheduled_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Information about the Automation runbooks that are run as part of a runbook workflow.</p> <note>
    /// <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p>
    /// </note>
    #[doc(hidden)]
    pub runbooks: std::option::Option<std::vec::Vec<crate::types::Runbook>>,
    /// <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
    #[doc(hidden)]
    pub ops_item_id: std::option::Option<std::string::String>,
    /// <p>The ID of a State Manager association used in the Automation operation.</p>
    #[doc(hidden)]
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The name of the Change Manager change request.</p>
    #[doc(hidden)]
    pub change_request_name: std::option::Option<std::string::String>,
}
impl AutomationExecution {
    /// <p>The execution ID.</p>
    pub fn automation_execution_id(&self) -> std::option::Option<&str> {
        self.automation_execution_id.as_deref()
    }
    /// <p>The name of the Automation runbook used during the execution.</p>
    pub fn document_name(&self) -> std::option::Option<&str> {
        self.document_name.as_deref()
    }
    /// <p>The version of the document to use during execution.</p>
    pub fn document_version(&self) -> std::option::Option<&str> {
        self.document_version.as_deref()
    }
    /// <p>The time the execution started.</p>
    pub fn execution_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.execution_start_time.as_ref()
    }
    /// <p>The time the execution finished.</p>
    pub fn execution_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.execution_end_time.as_ref()
    }
    /// <p>The execution status of the Automation.</p>
    pub fn automation_execution_status(
        &self,
    ) -> std::option::Option<&crate::types::AutomationExecutionStatus> {
        self.automation_execution_status.as_ref()
    }
    /// <p>A list of details about the current state of all steps that comprise an execution. An Automation runbook contains a list of steps that are run in order.</p>
    pub fn step_executions(&self) -> std::option::Option<&[crate::types::StepExecution]> {
        self.step_executions.as_deref()
    }
    /// <p>A boolean value that indicates if the response contains the full list of the Automation step executions. If true, use the DescribeAutomationStepExecutions API operation to get the full list of step executions.</p>
    pub fn step_executions_truncated(&self) -> bool {
        self.step_executions_truncated
    }
    /// <p>The key-value map of execution parameters, which were supplied when calling <code>StartAutomationExecution</code>.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.parameters.as_ref()
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn outputs(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.outputs.as_ref()
    }
    /// <p>A message describing why an execution has failed, if the status is set to Failed.</p>
    pub fn failure_message(&self) -> std::option::Option<&str> {
        self.failure_message.as_deref()
    }
    /// <p>The automation execution mode.</p>
    pub fn mode(&self) -> std::option::Option<&crate::types::ExecutionMode> {
        self.mode.as_ref()
    }
    /// <p>The AutomationExecutionId of the parent automation.</p>
    pub fn parent_automation_execution_id(&self) -> std::option::Option<&str> {
        self.parent_automation_execution_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the user who ran the automation.</p>
    pub fn executed_by(&self) -> std::option::Option<&str> {
        self.executed_by.as_deref()
    }
    /// <p>The name of the step that is currently running.</p>
    pub fn current_step_name(&self) -> std::option::Option<&str> {
        self.current_step_name.as_deref()
    }
    /// <p>The action of the step that is currently running.</p>
    pub fn current_action(&self) -> std::option::Option<&str> {
        self.current_action.as_deref()
    }
    /// <p>The parameter name.</p>
    pub fn target_parameter_name(&self) -> std::option::Option<&str> {
        self.target_parameter_name.as_deref()
    }
    /// <p>The specified targets.</p>
    pub fn targets(&self) -> std::option::Option<&[crate::types::Target]> {
        self.targets.as_deref()
    }
    /// <p>The specified key-value mapping of document parameters to target resources.</p>
    pub fn target_maps(
        &self,
    ) -> std::option::Option<
        &[std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>],
    > {
        self.target_maps.as_deref()
    }
    /// <p>A list of resolved targets in the rate control execution.</p>
    pub fn resolved_targets(&self) -> std::option::Option<&crate::types::ResolvedTargets> {
        self.resolved_targets.as_ref()
    }
    /// <p>The <code>MaxConcurrency</code> value specified by the user when the execution started.</p>
    pub fn max_concurrency(&self) -> std::option::Option<&str> {
        self.max_concurrency.as_deref()
    }
    /// <p>The MaxErrors value specified by the user when the execution started.</p>
    pub fn max_errors(&self) -> std::option::Option<&str> {
        self.max_errors.as_deref()
    }
    /// <p>The target of the execution.</p>
    pub fn target(&self) -> std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>The combination of Amazon Web Services Regions and/or Amazon Web Services accounts where you want to run the Automation.</p>
    pub fn target_locations(&self) -> std::option::Option<&[crate::types::TargetLocation]> {
        self.target_locations.as_deref()
    }
    /// <p>An aggregate of step execution statuses displayed in the Amazon Web Services Systems Manager console for a multi-Region and multi-account Automation execution.</p>
    pub fn progress_counters(&self) -> std::option::Option<&crate::types::ProgressCounters> {
        self.progress_counters.as_ref()
    }
    /// <p>The details for the CloudWatch alarm applied to your automation.</p>
    pub fn alarm_configuration(&self) -> std::option::Option<&crate::types::AlarmConfiguration> {
        self.alarm_configuration.as_ref()
    }
    /// <p>The CloudWatch alarm that was invoked by the automation.</p>
    pub fn triggered_alarms(&self) -> std::option::Option<&[crate::types::AlarmStateInformation]> {
        self.triggered_alarms.as_deref()
    }
    /// <p>The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>.</p>
    pub fn automation_subtype(&self) -> std::option::Option<&crate::types::AutomationSubtype> {
        self.automation_subtype.as_ref()
    }
    /// <p>The date and time the Automation operation is scheduled to start.</p>
    pub fn scheduled_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.scheduled_time.as_ref()
    }
    /// <p>Information about the Automation runbooks that are run as part of a runbook workflow.</p> <note>
    /// <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p>
    /// </note>
    pub fn runbooks(&self) -> std::option::Option<&[crate::types::Runbook]> {
        self.runbooks.as_deref()
    }
    /// <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
    pub fn ops_item_id(&self) -> std::option::Option<&str> {
        self.ops_item_id.as_deref()
    }
    /// <p>The ID of a State Manager association used in the Automation operation.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The name of the Change Manager change request.</p>
    pub fn change_request_name(&self) -> std::option::Option<&str> {
        self.change_request_name.as_deref()
    }
}
impl AutomationExecution {
    /// Creates a new builder-style object to manufacture [`AutomationExecution`](crate::types::AutomationExecution).
    pub fn builder() -> crate::types::builders::AutomationExecutionBuilder {
        crate::types::builders::AutomationExecutionBuilder::default()
    }
}

/// A builder for [`AutomationExecution`](crate::types::AutomationExecution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutomationExecutionBuilder {
    pub(crate) automation_execution_id: std::option::Option<std::string::String>,
    pub(crate) document_name: std::option::Option<std::string::String>,
    pub(crate) document_version: std::option::Option<std::string::String>,
    pub(crate) execution_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) execution_end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) automation_execution_status:
        std::option::Option<crate::types::AutomationExecutionStatus>,
    pub(crate) step_executions: std::option::Option<std::vec::Vec<crate::types::StepExecution>>,
    pub(crate) step_executions_truncated: std::option::Option<bool>,
    pub(crate) parameters: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) outputs: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) failure_message: std::option::Option<std::string::String>,
    pub(crate) mode: std::option::Option<crate::types::ExecutionMode>,
    pub(crate) parent_automation_execution_id: std::option::Option<std::string::String>,
    pub(crate) executed_by: std::option::Option<std::string::String>,
    pub(crate) current_step_name: std::option::Option<std::string::String>,
    pub(crate) current_action: std::option::Option<std::string::String>,
    pub(crate) target_parameter_name: std::option::Option<std::string::String>,
    pub(crate) targets: std::option::Option<std::vec::Vec<crate::types::Target>>,
    pub(crate) target_maps: std::option::Option<
        std::vec::Vec<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    >,
    pub(crate) resolved_targets: std::option::Option<crate::types::ResolvedTargets>,
    pub(crate) max_concurrency: std::option::Option<std::string::String>,
    pub(crate) max_errors: std::option::Option<std::string::String>,
    pub(crate) target: std::option::Option<std::string::String>,
    pub(crate) target_locations: std::option::Option<std::vec::Vec<crate::types::TargetLocation>>,
    pub(crate) progress_counters: std::option::Option<crate::types::ProgressCounters>,
    pub(crate) alarm_configuration: std::option::Option<crate::types::AlarmConfiguration>,
    pub(crate) triggered_alarms:
        std::option::Option<std::vec::Vec<crate::types::AlarmStateInformation>>,
    pub(crate) automation_subtype: std::option::Option<crate::types::AutomationSubtype>,
    pub(crate) scheduled_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) runbooks: std::option::Option<std::vec::Vec<crate::types::Runbook>>,
    pub(crate) ops_item_id: std::option::Option<std::string::String>,
    pub(crate) association_id: std::option::Option<std::string::String>,
    pub(crate) change_request_name: std::option::Option<std::string::String>,
}
impl AutomationExecutionBuilder {
    /// <p>The execution ID.</p>
    pub fn automation_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.automation_execution_id = Some(input.into());
        self
    }
    /// <p>The execution ID.</p>
    pub fn set_automation_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.automation_execution_id = input;
        self
    }
    /// <p>The name of the Automation runbook used during the execution.</p>
    pub fn document_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_name = Some(input.into());
        self
    }
    /// <p>The name of the Automation runbook used during the execution.</p>
    pub fn set_document_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_name = input;
        self
    }
    /// <p>The version of the document to use during execution.</p>
    pub fn document_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_version = Some(input.into());
        self
    }
    /// <p>The version of the document to use during execution.</p>
    pub fn set_document_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_version = input;
        self
    }
    /// <p>The time the execution started.</p>
    pub fn execution_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.execution_start_time = Some(input);
        self
    }
    /// <p>The time the execution started.</p>
    pub fn set_execution_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.execution_start_time = input;
        self
    }
    /// <p>The time the execution finished.</p>
    pub fn execution_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.execution_end_time = Some(input);
        self
    }
    /// <p>The time the execution finished.</p>
    pub fn set_execution_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.execution_end_time = input;
        self
    }
    /// <p>The execution status of the Automation.</p>
    pub fn automation_execution_status(
        mut self,
        input: crate::types::AutomationExecutionStatus,
    ) -> Self {
        self.automation_execution_status = Some(input);
        self
    }
    /// <p>The execution status of the Automation.</p>
    pub fn set_automation_execution_status(
        mut self,
        input: std::option::Option<crate::types::AutomationExecutionStatus>,
    ) -> Self {
        self.automation_execution_status = input;
        self
    }
    /// Appends an item to `step_executions`.
    ///
    /// To override the contents of this collection use [`set_step_executions`](Self::set_step_executions).
    ///
    /// <p>A list of details about the current state of all steps that comprise an execution. An Automation runbook contains a list of steps that are run in order.</p>
    pub fn step_executions(mut self, input: crate::types::StepExecution) -> Self {
        let mut v = self.step_executions.unwrap_or_default();
        v.push(input);
        self.step_executions = Some(v);
        self
    }
    /// <p>A list of details about the current state of all steps that comprise an execution. An Automation runbook contains a list of steps that are run in order.</p>
    pub fn set_step_executions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StepExecution>>,
    ) -> Self {
        self.step_executions = input;
        self
    }
    /// <p>A boolean value that indicates if the response contains the full list of the Automation step executions. If true, use the DescribeAutomationStepExecutions API operation to get the full list of step executions.</p>
    pub fn step_executions_truncated(mut self, input: bool) -> Self {
        self.step_executions_truncated = Some(input);
        self
    }
    /// <p>A boolean value that indicates if the response contains the full list of the Automation step executions. If true, use the DescribeAutomationStepExecutions API operation to get the full list of step executions.</p>
    pub fn set_step_executions_truncated(mut self, input: std::option::Option<bool>) -> Self {
        self.step_executions_truncated = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The key-value map of execution parameters, which were supplied when calling <code>StartAutomationExecution</code>.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = Some(hash_map);
        self
    }
    /// <p>The key-value map of execution parameters, which were supplied when calling <code>StartAutomationExecution</code>.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Adds a key-value pair to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn outputs(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.outputs.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.outputs = Some(hash_map);
        self
    }
    /// <p>The list of execution outputs as defined in the Automation runbook.</p>
    pub fn set_outputs(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.outputs = input;
        self
    }
    /// <p>A message describing why an execution has failed, if the status is set to Failed.</p>
    pub fn failure_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_message = Some(input.into());
        self
    }
    /// <p>A message describing why an execution has failed, if the status is set to Failed.</p>
    pub fn set_failure_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>The automation execution mode.</p>
    pub fn mode(mut self, input: crate::types::ExecutionMode) -> Self {
        self.mode = Some(input);
        self
    }
    /// <p>The automation execution mode.</p>
    pub fn set_mode(mut self, input: std::option::Option<crate::types::ExecutionMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The AutomationExecutionId of the parent automation.</p>
    pub fn parent_automation_execution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_automation_execution_id = Some(input.into());
        self
    }
    /// <p>The AutomationExecutionId of the parent automation.</p>
    pub fn set_parent_automation_execution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parent_automation_execution_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who ran the automation.</p>
    pub fn executed_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.executed_by = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user who ran the automation.</p>
    pub fn set_executed_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.executed_by = input;
        self
    }
    /// <p>The name of the step that is currently running.</p>
    pub fn current_step_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_step_name = Some(input.into());
        self
    }
    /// <p>The name of the step that is currently running.</p>
    pub fn set_current_step_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.current_step_name = input;
        self
    }
    /// <p>The action of the step that is currently running.</p>
    pub fn current_action(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_action = Some(input.into());
        self
    }
    /// <p>The action of the step that is currently running.</p>
    pub fn set_current_action(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.current_action = input;
        self
    }
    /// <p>The parameter name.</p>
    pub fn target_parameter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_parameter_name = Some(input.into());
        self
    }
    /// <p>The parameter name.</p>
    pub fn set_target_parameter_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_parameter_name = input;
        self
    }
    /// Appends an item to `targets`.
    ///
    /// To override the contents of this collection use [`set_targets`](Self::set_targets).
    ///
    /// <p>The specified targets.</p>
    pub fn targets(mut self, input: crate::types::Target) -> Self {
        let mut v = self.targets.unwrap_or_default();
        v.push(input);
        self.targets = Some(v);
        self
    }
    /// <p>The specified targets.</p>
    pub fn set_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Target>>,
    ) -> Self {
        self.targets = input;
        self
    }
    /// Appends an item to `target_maps`.
    ///
    /// To override the contents of this collection use [`set_target_maps`](Self::set_target_maps).
    ///
    /// <p>The specified key-value mapping of document parameters to target resources.</p>
    pub fn target_maps(
        mut self,
        input: std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    ) -> Self {
        let mut v = self.target_maps.unwrap_or_default();
        v.push(input);
        self.target_maps = Some(v);
        self
    }
    /// <p>The specified key-value mapping of document parameters to target resources.</p>
    pub fn set_target_maps(
        mut self,
        input: std::option::Option<
            std::vec::Vec<
                std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
            >,
        >,
    ) -> Self {
        self.target_maps = input;
        self
    }
    /// <p>A list of resolved targets in the rate control execution.</p>
    pub fn resolved_targets(mut self, input: crate::types::ResolvedTargets) -> Self {
        self.resolved_targets = Some(input);
        self
    }
    /// <p>A list of resolved targets in the rate control execution.</p>
    pub fn set_resolved_targets(
        mut self,
        input: std::option::Option<crate::types::ResolvedTargets>,
    ) -> Self {
        self.resolved_targets = input;
        self
    }
    /// <p>The <code>MaxConcurrency</code> value specified by the user when the execution started.</p>
    pub fn max_concurrency(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_concurrency = Some(input.into());
        self
    }
    /// <p>The <code>MaxConcurrency</code> value specified by the user when the execution started.</p>
    pub fn set_max_concurrency(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_concurrency = input;
        self
    }
    /// <p>The MaxErrors value specified by the user when the execution started.</p>
    pub fn max_errors(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_errors = Some(input.into());
        self
    }
    /// <p>The MaxErrors value specified by the user when the execution started.</p>
    pub fn set_max_errors(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_errors = input;
        self
    }
    /// <p>The target of the execution.</p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.target = Some(input.into());
        self
    }
    /// <p>The target of the execution.</p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// Appends an item to `target_locations`.
    ///
    /// To override the contents of this collection use [`set_target_locations`](Self::set_target_locations).
    ///
    /// <p>The combination of Amazon Web Services Regions and/or Amazon Web Services accounts where you want to run the Automation.</p>
    pub fn target_locations(mut self, input: crate::types::TargetLocation) -> Self {
        let mut v = self.target_locations.unwrap_or_default();
        v.push(input);
        self.target_locations = Some(v);
        self
    }
    /// <p>The combination of Amazon Web Services Regions and/or Amazon Web Services accounts where you want to run the Automation.</p>
    pub fn set_target_locations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TargetLocation>>,
    ) -> Self {
        self.target_locations = input;
        self
    }
    /// <p>An aggregate of step execution statuses displayed in the Amazon Web Services Systems Manager console for a multi-Region and multi-account Automation execution.</p>
    pub fn progress_counters(mut self, input: crate::types::ProgressCounters) -> Self {
        self.progress_counters = Some(input);
        self
    }
    /// <p>An aggregate of step execution statuses displayed in the Amazon Web Services Systems Manager console for a multi-Region and multi-account Automation execution.</p>
    pub fn set_progress_counters(
        mut self,
        input: std::option::Option<crate::types::ProgressCounters>,
    ) -> Self {
        self.progress_counters = input;
        self
    }
    /// <p>The details for the CloudWatch alarm applied to your automation.</p>
    pub fn alarm_configuration(mut self, input: crate::types::AlarmConfiguration) -> Self {
        self.alarm_configuration = Some(input);
        self
    }
    /// <p>The details for the CloudWatch alarm applied to your automation.</p>
    pub fn set_alarm_configuration(
        mut self,
        input: std::option::Option<crate::types::AlarmConfiguration>,
    ) -> Self {
        self.alarm_configuration = input;
        self
    }
    /// Appends an item to `triggered_alarms`.
    ///
    /// To override the contents of this collection use [`set_triggered_alarms`](Self::set_triggered_alarms).
    ///
    /// <p>The CloudWatch alarm that was invoked by the automation.</p>
    pub fn triggered_alarms(mut self, input: crate::types::AlarmStateInformation) -> Self {
        let mut v = self.triggered_alarms.unwrap_or_default();
        v.push(input);
        self.triggered_alarms = Some(v);
        self
    }
    /// <p>The CloudWatch alarm that was invoked by the automation.</p>
    pub fn set_triggered_alarms(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AlarmStateInformation>>,
    ) -> Self {
        self.triggered_alarms = input;
        self
    }
    /// <p>The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>.</p>
    pub fn automation_subtype(mut self, input: crate::types::AutomationSubtype) -> Self {
        self.automation_subtype = Some(input);
        self
    }
    /// <p>The subtype of the Automation operation. Currently, the only supported value is <code>ChangeRequest</code>.</p>
    pub fn set_automation_subtype(
        mut self,
        input: std::option::Option<crate::types::AutomationSubtype>,
    ) -> Self {
        self.automation_subtype = input;
        self
    }
    /// <p>The date and time the Automation operation is scheduled to start.</p>
    pub fn scheduled_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.scheduled_time = Some(input);
        self
    }
    /// <p>The date and time the Automation operation is scheduled to start.</p>
    pub fn set_scheduled_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.scheduled_time = input;
        self
    }
    /// Appends an item to `runbooks`.
    ///
    /// To override the contents of this collection use [`set_runbooks`](Self::set_runbooks).
    ///
    /// <p>Information about the Automation runbooks that are run as part of a runbook workflow.</p> <note>
    /// <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p>
    /// </note>
    pub fn runbooks(mut self, input: crate::types::Runbook) -> Self {
        let mut v = self.runbooks.unwrap_or_default();
        v.push(input);
        self.runbooks = Some(v);
        self
    }
    /// <p>Information about the Automation runbooks that are run as part of a runbook workflow.</p> <note>
    /// <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p>
    /// </note>
    pub fn set_runbooks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Runbook>>,
    ) -> Self {
        self.runbooks = input;
        self
    }
    /// <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
    pub fn ops_item_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ops_item_id = Some(input.into());
        self
    }
    /// <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
    pub fn set_ops_item_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ops_item_id = input;
        self
    }
    /// <p>The ID of a State Manager association used in the Automation operation.</p>
    pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.association_id = Some(input.into());
        self
    }
    /// <p>The ID of a State Manager association used in the Automation operation.</p>
    pub fn set_association_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The name of the Change Manager change request.</p>
    pub fn change_request_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.change_request_name = Some(input.into());
        self
    }
    /// <p>The name of the Change Manager change request.</p>
    pub fn set_change_request_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.change_request_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AutomationExecution`](crate::types::AutomationExecution).
    pub fn build(self) -> crate::types::AutomationExecution {
        crate::types::AutomationExecution {
            automation_execution_id: self.automation_execution_id,
            document_name: self.document_name,
            document_version: self.document_version,
            execution_start_time: self.execution_start_time,
            execution_end_time: self.execution_end_time,
            automation_execution_status: self.automation_execution_status,
            step_executions: self.step_executions,
            step_executions_truncated: self.step_executions_truncated.unwrap_or_default(),
            parameters: self.parameters,
            outputs: self.outputs,
            failure_message: self.failure_message,
            mode: self.mode,
            parent_automation_execution_id: self.parent_automation_execution_id,
            executed_by: self.executed_by,
            current_step_name: self.current_step_name,
            current_action: self.current_action,
            target_parameter_name: self.target_parameter_name,
            targets: self.targets,
            target_maps: self.target_maps,
            resolved_targets: self.resolved_targets,
            max_concurrency: self.max_concurrency,
            max_errors: self.max_errors,
            target: self.target,
            target_locations: self.target_locations,
            progress_counters: self.progress_counters,
            alarm_configuration: self.alarm_configuration,
            triggered_alarms: self.triggered_alarms,
            automation_subtype: self.automation_subtype,
            scheduled_time: self.scheduled_time,
            runbooks: self.runbooks,
            ops_item_id: self.ops_item_id,
            association_id: self.association_id,
            change_request_name: self.change_request_name,
        }
    }
}
