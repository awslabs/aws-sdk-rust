// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>One or more filters. Use a filter to return a more specific list of documents.</p>
/// <p>For keys, you can specify one or more tags that have been applied to a document. </p>
/// <p>You can also use Amazon Web Services-provided keys, some of which have specific allowed values. These keys and their associated values are as follows:</p>
/// <dl>
/// <dt>
/// DocumentType
/// </dt>
/// <dd>
/// <ul>
/// <li> <p> <code>ApplicationConfiguration</code> </p> </li>
/// <li> <p> <code>ApplicationConfigurationSchema</code> </p> </li>
/// <li> <p> <code>Automation</code> </p> </li>
/// <li> <p> <code>ChangeCalendar</code> </p> </li>
/// <li> <p> <code>Command</code> </p> </li>
/// <li> <p> <code>Package</code> </p> </li>
/// <li> <p> <code>Policy</code> </p> </li>
/// <li> <p> <code>Session</code> </p> </li>
/// </ul>
/// </dd>
/// <dt>
/// Owner
/// </dt>
/// <dd>
/// <p>Note that only one <code>Owner</code> can be specified in a request. For example: <code>Key=Owner,Values=Self</code>.</p>
/// <ul>
/// <li> <p> <code>Amazon</code> </p> </li>
/// <li> <p> <code>Private</code> </p> </li>
/// <li> <p> <code>Public</code> </p> </li>
/// <li> <p> <code>Self</code> </p> </li>
/// <li> <p> <code>ThirdParty</code> </p> </li>
/// </ul>
/// </dd>
/// <dt>
/// PlatformTypes
/// </dt>
/// <dd>
/// <ul>
/// <li> <p> <code>Linux</code> </p> </li>
/// <li> <p> <code>Windows</code> </p> </li>
/// </ul>
/// </dd>
/// </dl>
/// <p> <code>Name</code> is another Amazon Web Services-provided key. If you use <code>Name</code> as a key, you can use a name prefix to return a list of documents. For example, in the Amazon Web Services CLI, to return a list of all documents that begin with <code>Te</code>, run the following command:</p>
/// <p> <code>aws ssm list-documents --filters Key=Name,Values=Te</code> </p>
/// <p>You can also use the <code>TargetType</code> Amazon Web Services-provided key. For a list of valid resource type values that can be used with this key, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and property types reference</a> in the <i>CloudFormation User Guide</i>.</p>
/// <p>If you specify more than two keys, only documents that are identified by all the tags are returned in the results. If you specify more than two values for a key, documents that are identified by any of the values are returned in the results.</p>
/// <p>To specify a custom key-value pair, use the format <code>Key=tag:tagName,Values=valueName</code>.</p>
/// <p>For example, if you created a key called region and are using the Amazon Web Services CLI to call the <code>list-documents</code> command: </p>
/// <p> <code>aws ssm list-documents --filters Key=tag:region,Values=east,west Key=Owner,Values=Self</code> </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentKeyValuesFilter {
    /// <p>The name of the filter key.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The value for the filter key.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DocumentKeyValuesFilter {
    /// <p>The name of the filter key.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The value for the filter key.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl DocumentKeyValuesFilter {
    /// Creates a new builder-style object to manufacture [`DocumentKeyValuesFilter`](crate::types::DocumentKeyValuesFilter).
    pub fn builder() -> crate::types::builders::DocumentKeyValuesFilterBuilder {
        crate::types::builders::DocumentKeyValuesFilterBuilder::default()
    }
}

/// A builder for [`DocumentKeyValuesFilter`](crate::types::DocumentKeyValuesFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DocumentKeyValuesFilterBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DocumentKeyValuesFilterBuilder {
    /// <p>The name of the filter key.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the filter key.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The name of the filter key.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The value for the filter key.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The value for the filter key.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The value for the filter key.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`DocumentKeyValuesFilter`](crate::types::DocumentKeyValuesFilter).
    pub fn build(self) -> crate::types::DocumentKeyValuesFilter {
        crate::types::DocumentKeyValuesFilter {
            key: self.key,
            values: self.values,
        }
    }
}
