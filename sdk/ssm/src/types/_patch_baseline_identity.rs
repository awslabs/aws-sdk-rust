// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the basic information about a patch baseline.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PatchBaselineIdentity {
    /// <p>The ID of the patch baseline.</p>
    #[doc(hidden)]
    pub baseline_id: std::option::Option<std::string::String>,
    /// <p>The name of the patch baseline.</p>
    #[doc(hidden)]
    pub baseline_name: std::option::Option<std::string::String>,
    /// <p>Defines the operating system the patch baseline applies to. The default value is <code>WINDOWS</code>. </p>
    #[doc(hidden)]
    pub operating_system: std::option::Option<crate::types::OperatingSystem>,
    /// <p>The description of the patch baseline.</p>
    #[doc(hidden)]
    pub baseline_description: std::option::Option<std::string::String>,
    /// <p>Whether this is the default baseline. Amazon Web Services Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.</p>
    #[doc(hidden)]
    pub default_baseline: bool,
}
impl PatchBaselineIdentity {
    /// <p>The ID of the patch baseline.</p>
    pub fn baseline_id(&self) -> std::option::Option<&str> {
        self.baseline_id.as_deref()
    }
    /// <p>The name of the patch baseline.</p>
    pub fn baseline_name(&self) -> std::option::Option<&str> {
        self.baseline_name.as_deref()
    }
    /// <p>Defines the operating system the patch baseline applies to. The default value is <code>WINDOWS</code>. </p>
    pub fn operating_system(&self) -> std::option::Option<&crate::types::OperatingSystem> {
        self.operating_system.as_ref()
    }
    /// <p>The description of the patch baseline.</p>
    pub fn baseline_description(&self) -> std::option::Option<&str> {
        self.baseline_description.as_deref()
    }
    /// <p>Whether this is the default baseline. Amazon Web Services Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.</p>
    pub fn default_baseline(&self) -> bool {
        self.default_baseline
    }
}
impl PatchBaselineIdentity {
    /// Creates a new builder-style object to manufacture [`PatchBaselineIdentity`](crate::types::PatchBaselineIdentity).
    pub fn builder() -> crate::types::builders::PatchBaselineIdentityBuilder {
        crate::types::builders::PatchBaselineIdentityBuilder::default()
    }
}

/// A builder for [`PatchBaselineIdentity`](crate::types::PatchBaselineIdentity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PatchBaselineIdentityBuilder {
    pub(crate) baseline_id: std::option::Option<std::string::String>,
    pub(crate) baseline_name: std::option::Option<std::string::String>,
    pub(crate) operating_system: std::option::Option<crate::types::OperatingSystem>,
    pub(crate) baseline_description: std::option::Option<std::string::String>,
    pub(crate) default_baseline: std::option::Option<bool>,
}
impl PatchBaselineIdentityBuilder {
    /// <p>The ID of the patch baseline.</p>
    pub fn baseline_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.baseline_id = Some(input.into());
        self
    }
    /// <p>The ID of the patch baseline.</p>
    pub fn set_baseline_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.baseline_id = input;
        self
    }
    /// <p>The name of the patch baseline.</p>
    pub fn baseline_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.baseline_name = Some(input.into());
        self
    }
    /// <p>The name of the patch baseline.</p>
    pub fn set_baseline_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.baseline_name = input;
        self
    }
    /// <p>Defines the operating system the patch baseline applies to. The default value is <code>WINDOWS</code>. </p>
    pub fn operating_system(mut self, input: crate::types::OperatingSystem) -> Self {
        self.operating_system = Some(input);
        self
    }
    /// <p>Defines the operating system the patch baseline applies to. The default value is <code>WINDOWS</code>. </p>
    pub fn set_operating_system(
        mut self,
        input: std::option::Option<crate::types::OperatingSystem>,
    ) -> Self {
        self.operating_system = input;
        self
    }
    /// <p>The description of the patch baseline.</p>
    pub fn baseline_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.baseline_description = Some(input.into());
        self
    }
    /// <p>The description of the patch baseline.</p>
    pub fn set_baseline_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.baseline_description = input;
        self
    }
    /// <p>Whether this is the default baseline. Amazon Web Services Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.</p>
    pub fn default_baseline(mut self, input: bool) -> Self {
        self.default_baseline = Some(input);
        self
    }
    /// <p>Whether this is the default baseline. Amazon Web Services Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.</p>
    pub fn set_default_baseline(mut self, input: std::option::Option<bool>) -> Self {
        self.default_baseline = input;
        self
    }
    /// Consumes the builder and constructs a [`PatchBaselineIdentity`](crate::types::PatchBaselineIdentity).
    pub fn build(self) -> crate::types::PatchBaselineIdentity {
        crate::types::PatchBaselineIdentity {
            baseline_id: self.baseline_id,
            baseline_name: self.baseline_name,
            operating_system: self.operating_system,
            baseline_description: self.baseline_description,
            default_baseline: self.default_baseline.unwrap_or_default(),
        }
    }
}
