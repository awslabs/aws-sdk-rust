// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the source of the data included in the resource data sync.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceDataSyncSource {
    /// <p>The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in Organizations) or <code>SingleAccountMultiRegions</code>.</p>
    #[doc(hidden)]
    pub source_type: std::option::Option<std::string::String>,
    /// <p>Information about the <code>AwsOrganizationsSource</code> resource data sync source. A sync source of this type can synchronize data from Organizations.</p>
    #[doc(hidden)]
    pub aws_organizations_source:
        std::option::Option<crate::types::ResourceDataSyncAwsOrganizationsSource>,
    /// <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
    #[doc(hidden)]
    pub source_regions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those Regions come online.</p>
    #[doc(hidden)]
    pub include_future_regions: bool,
    /// <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    #[doc(hidden)]
    pub enable_all_ops_data_sources: bool,
}
impl ResourceDataSyncSource {
    /// <p>The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in Organizations) or <code>SingleAccountMultiRegions</code>.</p>
    pub fn source_type(&self) -> std::option::Option<&str> {
        self.source_type.as_deref()
    }
    /// <p>Information about the <code>AwsOrganizationsSource</code> resource data sync source. A sync source of this type can synchronize data from Organizations.</p>
    pub fn aws_organizations_source(
        &self,
    ) -> std::option::Option<&crate::types::ResourceDataSyncAwsOrganizationsSource> {
        self.aws_organizations_source.as_ref()
    }
    /// <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
    pub fn source_regions(&self) -> std::option::Option<&[std::string::String]> {
        self.source_regions.as_deref()
    }
    /// <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those Regions come online.</p>
    pub fn include_future_regions(&self) -> bool {
        self.include_future_regions
    }
    /// <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn enable_all_ops_data_sources(&self) -> bool {
        self.enable_all_ops_data_sources
    }
}
impl ResourceDataSyncSource {
    /// Creates a new builder-style object to manufacture [`ResourceDataSyncSource`](crate::types::ResourceDataSyncSource).
    pub fn builder() -> crate::types::builders::ResourceDataSyncSourceBuilder {
        crate::types::builders::ResourceDataSyncSourceBuilder::default()
    }
}

/// A builder for [`ResourceDataSyncSource`](crate::types::ResourceDataSyncSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceDataSyncSourceBuilder {
    pub(crate) source_type: std::option::Option<std::string::String>,
    pub(crate) aws_organizations_source:
        std::option::Option<crate::types::ResourceDataSyncAwsOrganizationsSource>,
    pub(crate) source_regions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) include_future_regions: std::option::Option<bool>,
    pub(crate) enable_all_ops_data_sources: std::option::Option<bool>,
}
impl ResourceDataSyncSourceBuilder {
    /// <p>The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in Organizations) or <code>SingleAccountMultiRegions</code>.</p>
    pub fn source_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_type = Some(input.into());
        self
    }
    /// <p>The type of data source for the resource data sync. <code>SourceType</code> is either <code>AwsOrganizations</code> (if an organization is present in Organizations) or <code>SingleAccountMultiRegions</code>.</p>
    pub fn set_source_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>Information about the <code>AwsOrganizationsSource</code> resource data sync source. A sync source of this type can synchronize data from Organizations.</p>
    pub fn aws_organizations_source(
        mut self,
        input: crate::types::ResourceDataSyncAwsOrganizationsSource,
    ) -> Self {
        self.aws_organizations_source = Some(input);
        self
    }
    /// <p>Information about the <code>AwsOrganizationsSource</code> resource data sync source. A sync source of this type can synchronize data from Organizations.</p>
    pub fn set_aws_organizations_source(
        mut self,
        input: std::option::Option<crate::types::ResourceDataSyncAwsOrganizationsSource>,
    ) -> Self {
        self.aws_organizations_source = input;
        self
    }
    /// Appends an item to `source_regions`.
    ///
    /// To override the contents of this collection use [`set_source_regions`](Self::set_source_regions).
    ///
    /// <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
    pub fn source_regions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.source_regions.unwrap_or_default();
        v.push(input.into());
        self.source_regions = Some(v);
        self
    }
    /// <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
    pub fn set_source_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.source_regions = input;
        self
    }
    /// <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those Regions come online.</p>
    pub fn include_future_regions(mut self, input: bool) -> Self {
        self.include_future_regions = Some(input);
        self
    }
    /// <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those Regions come online.</p>
    pub fn set_include_future_regions(mut self, input: std::option::Option<bool>) -> Self {
        self.include_future_regions = input;
        self
    }
    /// <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn enable_all_ops_data_sources(mut self, input: bool) -> Self {
        self.enable_all_ops_data_sources = Some(input);
        self
    }
    /// <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    pub fn set_enable_all_ops_data_sources(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_all_ops_data_sources = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceDataSyncSource`](crate::types::ResourceDataSyncSource).
    pub fn build(self) -> crate::types::ResourceDataSyncSource {
        crate::types::ResourceDataSyncSource {
            source_type: self.source_type,
            aws_organizations_source: self.aws_organizations_source,
            source_regions: self.source_regions,
            include_future_regions: self.include_future_regions.unwrap_or_default(),
            enable_all_ops_data_sources: self.enable_all_ops_data_sources.unwrap_or_default(),
        }
    }
}
