// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the inventory type and attribute for the aggregation execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InventoryAggregator {
    /// <p>The inventory type and attribute name for aggregation.</p>
    pub expression: ::std::option::Option<::std::string::String>,
    /// <p>Nested aggregators to further refine aggregation for an inventory type.</p>
    pub aggregators: ::std::option::Option<::std::vec::Vec<crate::types::InventoryAggregator>>,
    /// <p>A user-defined set of one or more filters on which to aggregate inventory data. Groups return a count of resources that match and don't match the specified criteria.</p>
    pub groups: ::std::option::Option<::std::vec::Vec<crate::types::InventoryGroup>>,
}
impl InventoryAggregator {
    /// <p>The inventory type and attribute name for aggregation.</p>
    pub fn expression(&self) -> ::std::option::Option<&str> {
        self.expression.as_deref()
    }
    /// <p>Nested aggregators to further refine aggregation for an inventory type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aggregators.is_none()`.
    pub fn aggregators(&self) -> &[crate::types::InventoryAggregator] {
        self.aggregators.as_deref().unwrap_or_default()
    }
    /// <p>A user-defined set of one or more filters on which to aggregate inventory data. Groups return a count of resources that match and don't match the specified criteria.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.groups.is_none()`.
    pub fn groups(&self) -> &[crate::types::InventoryGroup] {
        self.groups.as_deref().unwrap_or_default()
    }
}
impl InventoryAggregator {
    /// Creates a new builder-style object to manufacture [`InventoryAggregator`](crate::types::InventoryAggregator).
    pub fn builder() -> crate::types::builders::InventoryAggregatorBuilder {
        crate::types::builders::InventoryAggregatorBuilder::default()
    }
}

/// A builder for [`InventoryAggregator`](crate::types::InventoryAggregator).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InventoryAggregatorBuilder {
    pub(crate) expression: ::std::option::Option<::std::string::String>,
    pub(crate) aggregators: ::std::option::Option<::std::vec::Vec<crate::types::InventoryAggregator>>,
    pub(crate) groups: ::std::option::Option<::std::vec::Vec<crate::types::InventoryGroup>>,
}
impl InventoryAggregatorBuilder {
    /// <p>The inventory type and attribute name for aggregation.</p>
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The inventory type and attribute name for aggregation.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The inventory type and attribute name for aggregation.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// Appends an item to `aggregators`.
    ///
    /// To override the contents of this collection use [`set_aggregators`](Self::set_aggregators).
    ///
    /// <p>Nested aggregators to further refine aggregation for an inventory type.</p>
    pub fn aggregators(mut self, input: crate::types::InventoryAggregator) -> Self {
        let mut v = self.aggregators.unwrap_or_default();
        v.push(input);
        self.aggregators = ::std::option::Option::Some(v);
        self
    }
    /// <p>Nested aggregators to further refine aggregation for an inventory type.</p>
    pub fn set_aggregators(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InventoryAggregator>>) -> Self {
        self.aggregators = input;
        self
    }
    /// <p>Nested aggregators to further refine aggregation for an inventory type.</p>
    pub fn get_aggregators(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InventoryAggregator>> {
        &self.aggregators
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>A user-defined set of one or more filters on which to aggregate inventory data. Groups return a count of resources that match and don't match the specified criteria.</p>
    pub fn groups(mut self, input: crate::types::InventoryGroup) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>A user-defined set of one or more filters on which to aggregate inventory data. Groups return a count of resources that match and don't match the specified criteria.</p>
    pub fn set_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InventoryGroup>>) -> Self {
        self.groups = input;
        self
    }
    /// <p>A user-defined set of one or more filters on which to aggregate inventory data. Groups return a count of resources that match and don't match the specified criteria.</p>
    pub fn get_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InventoryGroup>> {
        &self.groups
    }
    /// Consumes the builder and constructs a [`InventoryAggregator`](crate::types::InventoryAggregator).
    pub fn build(self) -> crate::types::InventoryAggregator {
        crate::types::InventoryAggregator {
            expression: self.expression,
            aggregators: self.aggregators,
            groups: self.groups,
        }
    }
}
