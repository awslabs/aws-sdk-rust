// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the <code>AwsOrganizationsSource</code> resource data sync source. A sync source of this type can synchronize data from Organizations or, if an Amazon Web Services organization isn't present, from multiple Amazon Web Services Regions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceDataSyncAwsOrganizationsSource {
    /// <p>If an Amazon Web Services organization is present, this is either <code>OrganizationalUnits</code> or <code>EntireOrganization</code>. For <code>OrganizationalUnits</code>, the data is aggregated from a set of organization units. For <code>EntireOrganization</code>, the data is aggregated from the entire Amazon Web Services organization.</p>
    #[doc(hidden)]
    pub organization_source_type: std::option::Option<std::string::String>,
    /// <p>The Organizations organization units included in the sync.</p>
    #[doc(hidden)]
    pub organizational_units:
        std::option::Option<std::vec::Vec<crate::types::ResourceDataSyncOrganizationalUnit>>,
}
impl ResourceDataSyncAwsOrganizationsSource {
    /// <p>If an Amazon Web Services organization is present, this is either <code>OrganizationalUnits</code> or <code>EntireOrganization</code>. For <code>OrganizationalUnits</code>, the data is aggregated from a set of organization units. For <code>EntireOrganization</code>, the data is aggregated from the entire Amazon Web Services organization.</p>
    pub fn organization_source_type(&self) -> std::option::Option<&str> {
        self.organization_source_type.as_deref()
    }
    /// <p>The Organizations organization units included in the sync.</p>
    pub fn organizational_units(
        &self,
    ) -> std::option::Option<&[crate::types::ResourceDataSyncOrganizationalUnit]> {
        self.organizational_units.as_deref()
    }
}
impl ResourceDataSyncAwsOrganizationsSource {
    /// Creates a new builder-style object to manufacture [`ResourceDataSyncAwsOrganizationsSource`](crate::types::ResourceDataSyncAwsOrganizationsSource).
    pub fn builder() -> crate::types::builders::ResourceDataSyncAwsOrganizationsSourceBuilder {
        crate::types::builders::ResourceDataSyncAwsOrganizationsSourceBuilder::default()
    }
}

/// A builder for [`ResourceDataSyncAwsOrganizationsSource`](crate::types::ResourceDataSyncAwsOrganizationsSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceDataSyncAwsOrganizationsSourceBuilder {
    pub(crate) organization_source_type: std::option::Option<std::string::String>,
    pub(crate) organizational_units:
        std::option::Option<std::vec::Vec<crate::types::ResourceDataSyncOrganizationalUnit>>,
}
impl ResourceDataSyncAwsOrganizationsSourceBuilder {
    /// <p>If an Amazon Web Services organization is present, this is either <code>OrganizationalUnits</code> or <code>EntireOrganization</code>. For <code>OrganizationalUnits</code>, the data is aggregated from a set of organization units. For <code>EntireOrganization</code>, the data is aggregated from the entire Amazon Web Services organization.</p>
    pub fn organization_source_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_source_type = Some(input.into());
        self
    }
    /// <p>If an Amazon Web Services organization is present, this is either <code>OrganizationalUnits</code> or <code>EntireOrganization</code>. For <code>OrganizationalUnits</code>, the data is aggregated from a set of organization units. For <code>EntireOrganization</code>, the data is aggregated from the entire Amazon Web Services organization.</p>
    pub fn set_organization_source_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.organization_source_type = input;
        self
    }
    /// Appends an item to `organizational_units`.
    ///
    /// To override the contents of this collection use [`set_organizational_units`](Self::set_organizational_units).
    ///
    /// <p>The Organizations organization units included in the sync.</p>
    pub fn organizational_units(
        mut self,
        input: crate::types::ResourceDataSyncOrganizationalUnit,
    ) -> Self {
        let mut v = self.organizational_units.unwrap_or_default();
        v.push(input);
        self.organizational_units = Some(v);
        self
    }
    /// <p>The Organizations organization units included in the sync.</p>
    pub fn set_organizational_units(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceDataSyncOrganizationalUnit>>,
    ) -> Self {
        self.organizational_units = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceDataSyncAwsOrganizationsSource`](crate::types::ResourceDataSyncAwsOrganizationsSource).
    pub fn build(self) -> crate::types::ResourceDataSyncAwsOrganizationsSource {
        crate::types::ResourceDataSyncAwsOrganizationsSource {
            organization_source_type: self.organization_source_type,
            organizational_units: self.organizational_units,
        }
    }
}
