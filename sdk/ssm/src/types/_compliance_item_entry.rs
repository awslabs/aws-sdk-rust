// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a compliance item.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComplianceItemEntry {
    /// <p>The compliance item ID. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The title of the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch; for example: Security Update for Active Directory Federation Services. </p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified.</p>
    pub severity: crate::types::ComplianceSeverity,
    /// <p>The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.</p>
    pub status: crate::types::ComplianceStatus,
    /// <p>A "Key": "Value" tag combination for the compliance item.</p>
    pub details: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ComplianceItemEntry {
    /// <p>The compliance item ID. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The title of the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch; for example: Security Update for Active Directory Federation Services. </p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified.</p>
    pub fn severity(&self) -> &crate::types::ComplianceSeverity {
        &self.severity
    }
    /// <p>The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.</p>
    pub fn status(&self) -> &crate::types::ComplianceStatus {
        &self.status
    }
    /// <p>A "Key": "Value" tag combination for the compliance item.</p>
    pub fn details(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.details.as_ref()
    }
}
impl ComplianceItemEntry {
    /// Creates a new builder-style object to manufacture [`ComplianceItemEntry`](crate::types::ComplianceItemEntry).
    pub fn builder() -> crate::types::builders::ComplianceItemEntryBuilder {
        crate::types::builders::ComplianceItemEntryBuilder::default()
    }
}

/// A builder for [`ComplianceItemEntry`](crate::types::ComplianceItemEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ComplianceItemEntryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<crate::types::ComplianceSeverity>,
    pub(crate) status: ::std::option::Option<crate::types::ComplianceStatus>,
    pub(crate) details: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ComplianceItemEntryBuilder {
    /// <p>The compliance item ID. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The compliance item ID. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The compliance item ID. For example, if the compliance item is a Windows patch, the ID could be the number of the KB article.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The title of the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch; for example: Security Update for Active Directory Federation Services. </p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch; for example: Security Update for Active Directory Federation Services. </p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the compliance item. For example, if the compliance item is a Windows patch, the title could be the title of the KB article for the patch; for example: Security Update for Active Directory Federation Services. </p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified.</p>
    /// This field is required.
    pub fn severity(mut self, input: crate::types::ComplianceSeverity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::ComplianceSeverity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The severity of the compliance status. Severity can be one of the following: Critical, High, Medium, Low, Informational, Unspecified.</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::ComplianceSeverity> {
        &self.severity
    }
    /// <p>The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ComplianceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ComplianceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ComplianceStatus> {
        &self.status
    }
    /// Adds a key-value pair to `details`.
    ///
    /// To override the contents of this collection use [`set_details`](Self::set_details).
    ///
    /// <p>A "Key": "Value" tag combination for the compliance item.</p>
    pub fn details(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.details.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.details = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A "Key": "Value" tag combination for the compliance item.</p>
    pub fn set_details(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.details = input;
        self
    }
    /// <p>A "Key": "Value" tag combination for the compliance item.</p>
    pub fn get_details(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.details
    }
    /// Consumes the builder and constructs a [`ComplianceItemEntry`](crate::types::ComplianceItemEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`severity`](crate::types::builders::ComplianceItemEntryBuilder::severity)
    /// - [`status`](crate::types::builders::ComplianceItemEntryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ComplianceItemEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ComplianceItemEntry {
            id: self.id,
            title: self.title,
            severity: self.severity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "severity",
                    "severity was not specified but it is required when building ComplianceItemEntry",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ComplianceItemEntry",
                )
            })?,
            details: self.details,
        })
    }
}
