// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetCommandInvocation`](crate::operation::get_command_invocation::builders::GetCommandInvocationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`command_id(impl Into<String>)`](crate::operation::get_command_invocation::builders::GetCommandInvocationFluentBuilder::command_id) / [`set_command_id(Option<String>)`](crate::operation::get_command_invocation::builders::GetCommandInvocationFluentBuilder::set_command_id): <p>(Required) The parent command ID of the invocation plugin.</p>
    ///   - [`instance_id(impl Into<String>)`](crate::operation::get_command_invocation::builders::GetCommandInvocationFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::get_command_invocation::builders::GetCommandInvocationFluentBuilder::set_instance_id): <p>(Required) The ID of the managed node targeted by the command. A <i>managed node</i> can be an Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, and on-premises server or VM in your hybrid environment that is configured for Amazon Web Services Systems Manager.</p>
    ///   - [`plugin_name(impl Into<String>)`](crate::operation::get_command_invocation::builders::GetCommandInvocationFluentBuilder::plugin_name) / [`set_plugin_name(Option<String>)`](crate::operation::get_command_invocation::builders::GetCommandInvocationFluentBuilder::set_plugin_name): <p>The name of the step for which you want detailed results. If the document contains only one step, you can omit the name and details for that step. If the document contains more than one step, you must specify the name of the step for which you want to view details. Be sure to specify the name of the step, not the name of a plugin like <code>aws:RunShellScript</code>.</p>  <p>To find the <code>PluginName</code>, check the document content and find the name of the step you want details for. Alternatively, use <code>ListCommandInvocations</code> with the <code>CommandId</code> and <code>Details</code> parameters. The <code>PluginName</code> is the <code>Name</code> attribute of the <code>CommandPlugin</code> object in the <code>CommandPlugins</code> list.</p>
    /// - On success, responds with [`GetCommandInvocationOutput`](crate::operation::get_command_invocation::GetCommandInvocationOutput) with field(s):
    ///   - [`command_id(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::command_id): <p>The parent command ID of the invocation plugin.</p>
    ///   - [`instance_id(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::instance_id): <p>The ID of the managed node targeted by the command. A <i>managed node</i> can be an Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, or on-premises server or VM in your hybrid environment that is configured for Amazon Web Services Systems Manager.</p>
    ///   - [`comment(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::comment): <p>The comment text for the command.</p>
    ///   - [`document_name(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::document_name): <p>The name of the document that was run. For example, <code>AWS-RunShellScript</code>.</p>
    ///   - [`document_version(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::document_version): <p>The Systems Manager document (SSM document) version used in the request.</p>
    ///   - [`plugin_name(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::plugin_name): <p>The name of the plugin, or <i>step name</i>, for which details are reported. For example, <code>aws:RunShellScript</code> is a plugin.</p>
    ///   - [`response_code(i32)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::response_code): <p>The error level response code for the plugin script. If the response code is <code>-1</code>, then the command hasn't started running on the managed node, or it wasn't received by the node.</p>
    ///   - [`execution_start_date_time(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::execution_start_date_time): <p>The date and time the plugin started running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedBefore</code> filter.</p>  <p> <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code> </p>  <p>If the plugin hasn't started to run, the string is empty.</p>
    ///   - [`execution_elapsed_time(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::execution_elapsed_time): <p>Duration since <code>ExecutionStartDateTime</code>.</p>
    ///   - [`execution_end_date_time(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::execution_end_date_time): <p>The date and time the plugin finished running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the <code>InvokedAfter</code> filter.</p>  <p> <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code> </p>  <p>If the plugin hasn't started to run, the string is empty.</p>
    ///   - [`status(Option<CommandInvocationStatus>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::status): <p>The status of this invocation plugin. This status can be different than <code>StatusDetails</code>.</p>
    ///   - [`status_details(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::status_details): <p>A detailed status of the command execution for an invocation. <code>StatusDetails</code> includes more information than <code>Status</code> because it includes states resulting from error and concurrency control parameters. <code>StatusDetails</code> can show different results than <code>Status</code>. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command statuses</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. <code>StatusDetails</code> can be one of the following values:</p>  <ul>   <li> <p>Pending: The command hasn't been sent to the managed node.</p> </li>   <li> <p>In Progress: The command has been sent to the managed node but hasn't reached a terminal state.</p> </li>   <li> <p>Delayed: The system attempted to send the command to the target, but the target wasn't available. The managed node might not be available because of network issues, because the node was stopped, or for similar reasons. The system will try to send the command again.</p> </li>   <li> <p>Success: The command or plugin ran successfully. This is a terminal state.</p> </li>   <li> <p>Delivery Timed Out: The command wasn't delivered to the managed node before the delivery timeout expired. Delivery timeouts don't count against the parent command's <code>MaxErrors</code> limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>   <li> <p>Execution Timed Out: The command started to run on the managed node, but the execution wasn't complete before the timeout expired. Execution timeouts count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>   <li> <p>Failed: The command wasn't run successfully on the managed node. For a plugin, this indicates that the result code wasn't zero. For a command invocation, this indicates that the result code for one or more plugins wasn't zero. Invocation failures count against the <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p> </li>   <li> <p>Cancelled: The command was terminated before it was completed. This is a terminal state.</p> </li>   <li> <p>Undeliverable: The command can't be delivered to the managed node. The node might not exist or might not be responding. Undeliverable invocations don't count against the parent command's <code>MaxErrors</code> limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.</p> </li>   <li> <p>Terminated: The parent command exceeded its <code>MaxErrors</code> limit and subsequent command invocations were canceled by the system. This is a terminal state.</p> </li>  </ul>
    ///   - [`standard_output_content(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::standard_output_content): <p>The first 24,000 characters written by the plugin to <code>stdout</code>. If the command hasn't finished running, if <code>ExecutionStatus</code> is neither Succeeded nor Failed, then this string is empty.</p>
    ///   - [`standard_output_url(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::standard_output_url): <p>The URL for the complete text written by the plugin to <code>stdout</code> in Amazon Simple Storage Service (Amazon S3). If an S3 bucket wasn't specified, then this string is empty.</p>
    ///   - [`standard_error_content(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::standard_error_content): <p>The first 8,000 characters written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    ///   - [`standard_error_url(Option<String>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::standard_error_url): <p>The URL for the complete text written by the plugin to <code>stderr</code>. If the command hasn't finished running, then this string is empty.</p>
    ///   - [`cloud_watch_output_config(Option<CloudWatchOutputConfig>)`](crate::operation::get_command_invocation::GetCommandInvocationOutput::cloud_watch_output_config): <p>Amazon CloudWatch Logs information where Systems Manager sent the command output.</p>
    /// - On failure, responds with [`SdkError<GetCommandInvocationError>`](crate::operation::get_command_invocation::GetCommandInvocationError)
    pub fn get_command_invocation(
        &self,
    ) -> crate::operation::get_command_invocation::builders::GetCommandInvocationFluentBuilder {
        crate::operation::get_command_invocation::builders::GetCommandInvocationFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
