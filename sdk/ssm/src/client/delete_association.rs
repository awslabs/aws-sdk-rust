// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteAssociation`](crate::client::fluent_builders::DeleteAssociation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteAssociation::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteAssociation::set_name): <p>The name of the SSM document.</p>
    ///   - [`instance_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAssociation::instance_id) / [`set_instance_id(Option<String>)`](crate::client::fluent_builders::DeleteAssociation::set_instance_id): <p>The managed node ID.</p> <note>   <p> <code>InstanceId</code> has been deprecated. To specify a managed node ID for an association, use the <code>Targets</code> parameter. Requests that include the parameter <code>InstanceID</code> with Systems Manager documents (SSM documents) that use schema version 2.0 or later will fail. In addition, if you use the parameter <code>InstanceId</code>, you can't use the parameters <code>AssociationName</code>, <code>DocumentVersion</code>, <code>MaxErrors</code>, <code>MaxConcurrency</code>, <code>OutputLocation</code>, or <code>ScheduleExpression</code>. To use these parameters, you must use the <code>Targets</code> parameter.</p>  </note>
    ///   - [`association_id(impl Into<String>)`](crate::client::fluent_builders::DeleteAssociation::association_id) / [`set_association_id(Option<String>)`](crate::client::fluent_builders::DeleteAssociation::set_association_id): <p>The association ID that you want to delete.</p>
    /// - On success, responds with [`DeleteAssociationOutput`](crate::output::DeleteAssociationOutput)
    /// - On failure, responds with [`SdkError<DeleteAssociationError>`](crate::error::DeleteAssociationError)
    pub fn delete_association(&self) -> crate::client::fluent_builders::DeleteAssociation {
        crate::client::fluent_builders::DeleteAssociation::new(self.handle.clone())
    }
}
