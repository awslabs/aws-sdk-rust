// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateOpsMetadata`](crate::client::fluent_builders::CreateOpsMetadata) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_id(impl Into<String>)`](crate::client::fluent_builders::CreateOpsMetadata::resource_id) / [`set_resource_id(Option<String>)`](crate::client::fluent_builders::CreateOpsMetadata::set_resource_id): <p>A resource ID for a new Application Manager application.</p>
    ///   - [`metadata(HashMap<String, MetadataValue>)`](crate::client::fluent_builders::CreateOpsMetadata::metadata) / [`set_metadata(Option<HashMap<String, MetadataValue>>)`](crate::client::fluent_builders::CreateOpsMetadata::set_metadata): <p>Metadata for a new Application Manager application. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateOpsMetadata::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateOpsMetadata::set_tags): <p>Optional metadata that you assign to a resource. You can specify a maximum of five tags for an OpsMetadata object. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag an OpsMetadata object to identify an environment or target Amazon Web Services Region. In this case, you could specify the following key-value pairs:</p>  <ul>   <li> <p> <code>Key=Environment,Value=Production</code> </p> </li>   <li> <p> <code>Key=Region,Value=us-east-2</code> </p> </li>  </ul>
    /// - On success, responds with [`CreateOpsMetadataOutput`](crate::output::CreateOpsMetadataOutput) with field(s):
    ///   - [`ops_metadata_arn(Option<String>)`](crate::output::CreateOpsMetadataOutput::ops_metadata_arn): <p>The Amazon Resource Name (ARN) of the OpsMetadata Object or blob created by the call.</p>
    /// - On failure, responds with [`SdkError<CreateOpsMetadataError>`](crate::error::CreateOpsMetadataError)
    pub fn create_ops_metadata(&self) -> crate::client::fluent_builders::CreateOpsMetadata {
        crate::client::fluent_builders::CreateOpsMetadata::new(self.handle.clone())
    }
}
