// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeAvailablePatches`](crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(PatchOrchestratorFilter)`](crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder::filters) / [`set_filters(Option<Vec::<PatchOrchestratorFilter>>)`](crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder::set_filters):<br>required: **false**<br><p>Each element in the array is a structure containing a key-value pair.</p>  <p> <b>Windows Server</b> </p>  <p>Supported keys for Windows Server managed node patches include the following:</p>  <ul>   <li> <p> <b> <code>PATCH_SET</code> </b> </p> <p>Sample values: <code>OS</code> | <code>APPLICATION</code> </p> </li>   <li> <p> <b> <code>PRODUCT</code> </b> </p> <p>Sample values: <code>WindowsServer2012</code> | <code>Office 2010</code> | <code>MicrosoftDefenderAntivirus</code> </p> </li>   <li> <p> <b> <code>PRODUCT_FAMILY</code> </b> </p> <p>Sample values: <code>Windows</code> | <code>Office</code> </p> </li>   <li> <p> <b> <code>MSRC_SEVERITY</code> </b> </p> <p>Sample values: <code>ServicePacks</code> | <code>Important</code> | <code>Moderate</code> </p> </li>   <li> <p> <b> <code>CLASSIFICATION</code> </b> </p> <p>Sample values: <code>ServicePacks</code> | <code>SecurityUpdates</code> | <code>DefinitionUpdates</code> </p> </li>   <li> <p> <b> <code>PATCH_ID</code> </b> </p> <p>Sample values: <code>KB123456</code> | <code>KB4516046</code> </p> </li>  </ul>  <p> <b>Linux</b> </p> <important>   <p>When specifying filters for Linux patches, you must specify a key-pair for <code>PRODUCT</code>. For example, using the Command Line Interface (CLI), the following command fails:</p>   <p> <code>aws ssm describe-available-patches --filters Key=CVE_ID,Values=CVE-2018-3615</code> </p>   <p>However, the following command succeeds:</p>   <p> <code>aws ssm describe-available-patches --filters Key=PRODUCT,Values=AmazonLinux2018.03 Key=CVE_ID,Values=CVE-2018-3615</code> </p>  </important>  <p>Supported keys for Linux managed node patches include the following:</p>  <ul>   <li> <p> <b> <code>PRODUCT</code> </b> </p> <p>Sample values: <code>AmazonLinux2018.03</code> | <code>AmazonLinux2.0</code> </p> </li>   <li> <p> <b> <code>NAME</code> </b> </p> <p>Sample values: <code>kernel-headers</code> | <code>samba-python</code> | <code>php</code> </p> </li>   <li> <p> <b> <code>SEVERITY</code> </b> </p> <p>Sample values: <code>Critical</code> | <code>Important</code> | <code>Medium</code> | <code>Low</code> </p> </li>   <li> <p> <b> <code>EPOCH</code> </b> </p> <p>Sample values: <code>0</code> | <code>1</code> </p> </li>   <li> <p> <b> <code>VERSION</code> </b> </p> <p>Sample values: <code>78.6.1</code> | <code>4.10.16</code> </p> </li>   <li> <p> <b> <code>RELEASE</code> </b> </p> <p>Sample values: <code>9.56.amzn1</code> | <code>1.amzn2</code> </p> </li>   <li> <p> <b> <code>ARCH</code> </b> </p> <p>Sample values: <code>i686</code> | <code>x86_64</code> </p> </li>   <li> <p> <b> <code>REPOSITORY</code> </b> </p> <p>Sample values: <code>Core</code> | <code>Updates</code> </p> </li>   <li> <p> <b> <code>ADVISORY_ID</code> </b> </p> <p>Sample values: <code>ALAS-2018-1058</code> | <code>ALAS2-2021-1594</code> </p> </li>   <li> <p> <b> <code>CVE_ID</code> </b> </p> <p>Sample values: <code>CVE-2018-3615</code> | <code>CVE-2020-1472</code> </p> </li>   <li> <p> <b> <code>BUGZILLA_ID</code> </b> </p> <p>Sample values: <code>1463241</code> </p> </li>  </ul><br>
    ///   - [`max_results(i32)`](crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of patches to return (per page).</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder::set_next_token):<br>required: **false**<br><p>The token for the next set of items to return. (You received this token from a previous call.)</p><br>
    /// - On success, responds with [`DescribeAvailablePatchesOutput`](crate::operation::describe_available_patches::DescribeAvailablePatchesOutput) with field(s):
    ///   - [`patches(Option<Vec::<Patch>>)`](crate::operation::describe_available_patches::DescribeAvailablePatchesOutput::patches): <p>An array of patches. Each entry in the array is a patch structure.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::describe_available_patches::DescribeAvailablePatchesOutput::next_token): <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    /// - On failure, responds with [`SdkError<DescribeAvailablePatchesError>`](crate::operation::describe_available_patches::DescribeAvailablePatchesError)
    pub fn describe_available_patches(&self) -> crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder {
        crate::operation::describe_available_patches::builders::DescribeAvailablePatchesFluentBuilder::new(self.handle.clone())
    }
}
