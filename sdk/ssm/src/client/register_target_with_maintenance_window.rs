// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterTargetWithMaintenanceWindow`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`window_id(impl Into<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::window_id) / [`set_window_id(Option<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::set_window_id): <p>The ID of the maintenance window the target should be registered with.</p>
    ///   - [`resource_type(MaintenanceWindowResourceType)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::resource_type) / [`set_resource_type(Option<MaintenanceWindowResourceType>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::set_resource_type): <p>The type of target being registered with the maintenance window.</p>
    ///   - [`targets(Vec<Target>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::targets) / [`set_targets(Option<Vec<Target>>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::set_targets): <p>The targets to register with the maintenance window. In other words, the managed nodes to run commands on when the maintenance window runs.</p> <note>   <p>If a single maintenance window task is registered with multiple targets, its task invocations occur sequentially and not in parallel. If your task must run on multiple targets at the same time, register a task for each target individually and assign each task the same priority level.</p>  </note>  <p>You can specify targets using managed node IDs, resource group names, or tags that have been applied to managed nodes.</p>  <p> <b>Example 1</b>: Specify managed node IDs</p>  <p> <code>Key=InstanceIds,Values=   <instance-id-1>    ,    <instance-id-2>     ,     <instance-id-3></instance-id-3>    </instance-id-2>   </instance-id-1></code> </p>  <p> <b>Example 2</b>: Use tag key-pairs applied to managed nodes</p>  <p> <code>Key=tag:   <my-tag-key>    ,Values=    <my-tag-value-1>     ,     <my-tag-value-2></my-tag-value-2>    </my-tag-value-1>   </my-tag-key></code> </p>  <p> <b>Example 3</b>: Use tag-keys applied to managed nodes</p>  <p> <code>Key=tag-key,Values=   <my-tag-key-1>    ,    <my-tag-key-2></my-tag-key-2>   </my-tag-key-1></code> </p>  <p> <b>Example 4</b>: Use resource group names</p>  <p> <code>Key=resource-groups:Name,Values=   <resource-group-name></resource-group-name></code> </p>  <p> <b>Example 5</b>: Use filters for resource group types</p>  <p> <code>Key=resource-groups:ResourceTypeFilters,Values=   <resource-type-1>    ,    <resource-type-2></resource-type-2>   </resource-type-1></code> </p> <note>   <p>For <code>Key=resource-groups:ResourceTypeFilters</code>, specify resource types in the following format</p>   <p> <code>Key=resource-groups:ResourceTypeFilters,Values=AWS::EC2::INSTANCE,AWS::EC2::VPC</code> </p>  </note>  <p>For more information about these examples formats, including the best use case for each one, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html">Examples: Register targets with a maintenance window</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    ///   - [`owner_information(impl Into<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::owner_information) / [`set_owner_information(Option<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::set_owner_information): <p>User-provided value that will be included in any Amazon CloudWatch Events events raised while running tasks for these targets in this maintenance window.</p>
    ///   - [`name(impl Into<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::set_name): <p>An optional name for the target.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::set_description): <p>An optional description for the target.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::set_client_token): <p>User-provided idempotency token.</p>
    /// - On success, responds with [`RegisterTargetWithMaintenanceWindowOutput`](crate::operation::register_target_with_maintenance_window::RegisterTargetWithMaintenanceWindowOutput) with field(s):
    ///   - [`window_target_id(Option<String>)`](crate::operation::register_target_with_maintenance_window::RegisterTargetWithMaintenanceWindowOutput::window_target_id): <p>The ID of the target definition in this maintenance window.</p>
    /// - On failure, responds with [`SdkError<RegisterTargetWithMaintenanceWindowError>`](crate::operation::register_target_with_maintenance_window::RegisterTargetWithMaintenanceWindowError)
    pub fn register_target_with_maintenance_window(&self) -> crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder{
        crate::operation::register_target_with_maintenance_window::builders::RegisterTargetWithMaintenanceWindowFluentBuilder::new(self.handle.clone())
    }
}
