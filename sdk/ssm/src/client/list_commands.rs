// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListCommands`](crate::operation::list_commands::builders::ListCommandsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`command_id(impl Into<String>)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::command_id) / [`set_command_id(Option<String>)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::set_command_id):<br>required: **false**<br><p>(Optional) If provided, lists only the specified command.</p><br>
    ///   - [`instance_id(impl Into<String>)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::set_instance_id):<br>required: **false**<br><p>(Optional) Lists commands issued against this managed node ID.</p> <note>   <p>You can't specify a managed node ID in the same command that you specify <code>Status</code> = <code>Pending</code>. This is because the command hasn't reached the managed node yet.</p>  </note><br>
    ///   - [`max_results(i32)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::set_max_results):<br>required: **false**<br><p>(Optional) The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::set_next_token):<br>required: **false**<br><p>(Optional) The token for the next set of items to return. (You received this token from a previous call.)</p><br>
    ///   - [`filters(CommandFilter)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::filters) / [`set_filters(Option<Vec::<CommandFilter>>)`](crate::operation::list_commands::builders::ListCommandsFluentBuilder::set_filters):<br>required: **false**<br><p>(Optional) One or more filters. Use a filter to return a more specific list of results. </p><br>
    /// - On success, responds with [`ListCommandsOutput`](crate::operation::list_commands::ListCommandsOutput) with field(s):
    ///   - [`commands(Option<Vec::<Command>>)`](crate::operation::list_commands::ListCommandsOutput::commands): <p>(Optional) The list of commands requested by the user. </p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_commands::ListCommandsOutput::next_token): <p>(Optional) The token for the next set of items to return. (You received this token from a previous call.)</p>
    /// - On failure, responds with [`SdkError<ListCommandsError>`](crate::operation::list_commands::ListCommandsError)
    pub fn list_commands(&self) -> crate::operation::list_commands::builders::ListCommandsFluentBuilder {
        crate::operation::list_commands::builders::ListCommandsFluentBuilder::new(self.handle.clone())
    }
}
