// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterTaskWithMaintenanceWindow`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`window_id(impl Into<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::window_id) / [`set_window_id(Option<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_window_id):<br>required: **true**<br><p>The ID of the maintenance window the task should be added to.</p><br>
    ///   - [`targets(Target)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::targets) / [`set_targets(Option<Vec::<Target>>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_targets):<br>required: **false**<br><p>The targets (either managed nodes or maintenance window targets).</p> <note>   <p>One or more targets must be specified for maintenance window Run Command-type tasks. Depending on the task, targets are optional for other maintenance window task types (Automation, Lambda, and Step Functions). For more information about running tasks that don't specify targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">Registering maintenance window tasks without targets</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>  </note>  <p>Specify managed nodes using the following format: </p>  <p> <code>Key=InstanceIds,Values=   <instance-id-1>    ,    <instance-id-2></instance-id-2>   </instance-id-1></code> </p>  <p>Specify maintenance window targets using the following format:</p>  <p> <code>Key=WindowTargetIds,Values=   <window-target-id-1>    ,    <window-target-id-2></window-target-id-2>   </window-target-id-1></code> </p><br>
    ///   - [`task_arn(impl Into<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::task_arn) / [`set_task_arn(Option<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_task_arn):<br>required: **true**<br><p>The ARN of the task to run.</p><br>
    ///   - [`service_role_arn(impl Into<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::service_role_arn) / [`set_service_role_arn(Option<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_service_role_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of the IAM service role for Amazon Web Services Systems Manager to assume when running a maintenance window task. If you do not specify a service role ARN, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created when you run <code>RegisterTaskWithMaintenanceWindow</code>.</p>  <p>For more information, see the following topics in the in the <i>Amazon Web Services Systems Manager User Guide</i>:</p>  <ul>   <li> <p> <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/using-service-linked-roles.html#slr-permissions">Using service-linked roles for Systems Manager</a> </p> </li>   <li> <p> <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-permissions.html#maintenance-window-tasks-service-role">Should I use a service-linked role or a custom service role to run maintenance window tasks? </a> </p> </li>  </ul><br>
    ///   - [`task_type(MaintenanceWindowTaskType)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::task_type) / [`set_task_type(Option<MaintenanceWindowTaskType>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_task_type):<br>required: **true**<br><p>The type of task being registered.</p><br>
    ///   - [`task_parameters(impl Into<String>, MaintenanceWindowTaskParameterValueExpression)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::task_parameters) / [`set_task_parameters(Option<HashMap::<String, MaintenanceWindowTaskParameterValueExpression>>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_task_parameters):<br>required: **false**<br><p>The parameters that should be passed to the task when it is run.</p> <note>   <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>  </note><br>
    ///   - [`task_invocation_parameters(MaintenanceWindowTaskInvocationParameters)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::task_invocation_parameters) / [`set_task_invocation_parameters(Option<MaintenanceWindowTaskInvocationParameters>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_task_invocation_parameters):<br>required: **false**<br><p>The parameters that the task should use during execution. Populate only the fields that match the task type. All other fields should be empty. </p><br>
    ///   - [`priority(i32)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::priority) / [`set_priority(Option<i32>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_priority):<br>required: **false**<br><p>The priority of the task in the maintenance window, the lower the number the higher the priority. Tasks in a maintenance window are scheduled in priority order with tasks that have the same priority scheduled in parallel.</p><br>
    ///   - [`max_concurrency(impl Into<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::max_concurrency) / [`set_max_concurrency(Option<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_max_concurrency):<br>required: **false**<br><p>The maximum number of targets this task can be run for, in parallel.</p> <note>   <p>Although this element is listed as "Required: No", a value can be omitted only when you are registering or updating a <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">targetless task</a> You must provide a value in all other cases.</p>   <p>For maintenance window tasks without a target specified, you can't supply a value for this option. Instead, the system inserts a placeholder value of <code>1</code>. This value doesn't affect the running of your task.</p>  </note><br>
    ///   - [`max_errors(impl Into<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::max_errors) / [`set_max_errors(Option<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_max_errors):<br>required: **false**<br><p>The maximum number of errors allowed before this task stops being scheduled.</p> <note>   <p>Although this element is listed as "Required: No", a value can be omitted only when you are registering or updating a <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">targetless task</a> You must provide a value in all other cases.</p>   <p>For maintenance window tasks without a target specified, you can't supply a value for this option. Instead, the system inserts a placeholder value of <code>1</code>. This value doesn't affect the running of your task.</p>  </note><br>
    ///   - [`logging_info(LoggingInfo)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::logging_info) / [`set_logging_info(Option<LoggingInfo>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_logging_info):<br>required: **false**<br><p>A structure containing information about an Amazon Simple Storage Service (Amazon S3) bucket to write managed node-level logs to. </p> <note>   <p> <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance window task types, see <code>MaintenanceWindowTaskInvocationParameters</code>.</p>  </note><br>
    ///   - [`name(impl Into<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_name):<br>required: **false**<br><p>An optional name for the task.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_description):<br>required: **false**<br><p>An optional description for the task.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_client_token):<br>required: **false**<br><p>User-provided idempotency token.</p><br>
    ///   - [`cutoff_behavior(MaintenanceWindowTaskCutoffBehavior)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::cutoff_behavior) / [`set_cutoff_behavior(Option<MaintenanceWindowTaskCutoffBehavior>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_cutoff_behavior):<br>required: **false**<br><p>Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. </p>  <ul>   <li> <p> <code>CONTINUE_TASK</code>: When the cutoff time is reached, any tasks that are running continue. The default value.</p> </li>   <li> <p> <code>CANCEL_TASK</code>:</p>    <ul>     <li> <p>For Automation, Lambda, Step Functions tasks: When the cutoff time is reached, any task invocations that are already running continue, but no new task invocations are started.</p> </li>     <li> <p>For Run Command tasks: When the cutoff time is reached, the system sends a <code>CancelCommand</code> operation that attempts to cancel the command associated with the task. However, there is no guarantee that the command will be terminated and the underlying process stopped.</p> </li>    </ul> <p>The status for tasks that are not completed is <code>TIMED_OUT</code>.</p> </li>  </ul><br>
    ///   - [`alarm_configuration(AlarmConfiguration)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::alarm_configuration) / [`set_alarm_configuration(Option<AlarmConfiguration>)`](crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::set_alarm_configuration):<br>required: **false**<br><p>The CloudWatch alarm you want to apply to your maintenance window task.</p><br>
    /// - On success, responds with [`RegisterTaskWithMaintenanceWindowOutput`](crate::operation::register_task_with_maintenance_window::RegisterTaskWithMaintenanceWindowOutput) with field(s):
    ///   - [`window_task_id(Option<String>)`](crate::operation::register_task_with_maintenance_window::RegisterTaskWithMaintenanceWindowOutput::window_task_id): <p>The ID of the task in the maintenance window.</p>
    /// - On failure, responds with [`SdkError<RegisterTaskWithMaintenanceWindowError>`](crate::operation::register_task_with_maintenance_window::RegisterTaskWithMaintenanceWindowError)
    pub fn register_task_with_maintenance_window(
        &self,
    ) -> crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder {
        crate::operation::register_task_with_maintenance_window::builders::RegisterTaskWithMaintenanceWindowFluentBuilder::new(self.handle.clone())
    }
}
