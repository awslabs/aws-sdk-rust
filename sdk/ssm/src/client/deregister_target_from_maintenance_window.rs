// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeregisterTargetFromMaintenanceWindow`](crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`window_id(impl Into<String>)`](crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowFluentBuilder::window_id) / [`set_window_id(Option<String>)`](crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowFluentBuilder::set_window_id):<br>required: **true**<br><p>The ID of the maintenance window the target should be removed from.</p><br>
    ///   - [`window_target_id(impl Into<String>)`](crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowFluentBuilder::window_target_id) / [`set_window_target_id(Option<String>)`](crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowFluentBuilder::set_window_target_id):<br>required: **true**<br><p>The ID of the target definition to remove.</p><br>
    ///   - [`safe(bool)`](crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowFluentBuilder::safe) / [`set_safe(Option<bool>)`](crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowFluentBuilder::set_safe):<br>required: **false**<br><p>The system checks if the target is being referenced by a task. If the target is being referenced, the system returns an error and doesn't deregister the target from the maintenance window.</p><br>
    /// - On success, responds with [`DeregisterTargetFromMaintenanceWindowOutput`](crate::operation::deregister_target_from_maintenance_window::DeregisterTargetFromMaintenanceWindowOutput) with field(s):
    ///   - [`window_id(Option<String>)`](crate::operation::deregister_target_from_maintenance_window::DeregisterTargetFromMaintenanceWindowOutput::window_id): <p>The ID of the maintenance window the target was removed from.</p>
    ///   - [`window_target_id(Option<String>)`](crate::operation::deregister_target_from_maintenance_window::DeregisterTargetFromMaintenanceWindowOutput::window_target_id): <p>The ID of the removed target definition.</p>
    /// - On failure, responds with [`SdkError<DeregisterTargetFromMaintenanceWindowError>`](crate::operation::deregister_target_from_maintenance_window::DeregisterTargetFromMaintenanceWindowError)
    pub fn deregister_target_from_maintenance_window(
        &self,
    ) -> crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowFluentBuilder {
        crate::operation::deregister_target_from_maintenance_window::builders::DeregisterTargetFromMaintenanceWindowFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
