// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdatePatchBaseline`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`baseline_id(impl Into<String>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::baseline_id) / [`set_baseline_id(Option<String>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_baseline_id): <p>The ID of the patch baseline to update.</p>
    ///   - [`name(impl Into<String>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_name): <p>The name of the patch baseline.</p>
    ///   - [`global_filters(PatchFilterGroup)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::global_filters) / [`set_global_filters(Option<PatchFilterGroup>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_global_filters): <p>A set of global filters used to include patches in the baseline.</p>
    ///   - [`approval_rules(PatchRuleGroup)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::approval_rules) / [`set_approval_rules(Option<PatchRuleGroup>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_approval_rules): <p>A set of rules used to include patches in the baseline.</p>
    ///   - [`approved_patches(Vec<String>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::approved_patches) / [`set_approved_patches(Option<Vec<String>>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_approved_patches): <p>A list of explicitly approved patches for the baseline.</p>  <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    ///   - [`approved_patches_compliance_level(PatchComplianceLevel)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::approved_patches_compliance_level) / [`set_approved_patches_compliance_level(Option<PatchComplianceLevel>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_approved_patches_compliance_level): <p>Assigns a new compliance severity level to an existing patch baseline.</p>
    ///   - [`approved_patches_enable_non_security(bool)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::approved_patches_enable_non_security) / [`set_approved_patches_enable_non_security(Option<bool>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_approved_patches_enable_non_security): <p>Indicates whether the list of approved patches includes non-security updates that should be applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed nodes only.</p>
    ///   - [`rejected_patches(Vec<String>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::rejected_patches) / [`set_rejected_patches(Option<Vec<String>>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_rejected_patches): <p>A list of explicitly rejected patches for the baseline.</p>  <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    ///   - [`rejected_patches_action(PatchAction)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::rejected_patches_action) / [`set_rejected_patches_action(Option<PatchAction>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_rejected_patches_action): <p>The action for Patch Manager to take on patches included in the <code>RejectedPackages</code> list.</p>  <ul>   <li> <p> <b> <code>ALLOW_AS_DEPENDENCY</code> </b>: A package in the <code>Rejected</code> patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as <code>InstalledOther</code>. This is the default action if no option is specified.</p> </li>   <li> <p> <b> <code>BLOCK</code> </b>: Packages in the <code>RejectedPatches</code> list, and packages that include them as dependencies, aren't installed under any circumstances. If a package was installed before it was added to the <code>Rejected</code> patches list, it is considered non-compliant with the patch baseline, and its status is reported as <code>InstalledRejected</code>.</p> </li>  </ul>
    ///   - [`description(impl Into<String>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_description): <p>A description of the patch baseline.</p>
    ///   - [`sources(Vec<PatchSource>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::sources) / [`set_sources(Option<Vec<PatchSource>>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_sources): <p>Information about the patches to use to update the managed nodes, including target operating systems and source repositories. Applies to Linux managed nodes only.</p>
    ///   - [`replace(bool)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::replace) / [`set_replace(Option<bool>)`](crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::set_replace): <p>If True, then all fields that are required by the <code>CreatePatchBaseline</code> operation are also required for this API request. Optional fields that aren't specified are set to null.</p>
    /// - On success, responds with [`UpdatePatchBaselineOutput`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput) with field(s):
    ///   - [`baseline_id(Option<String>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::baseline_id): <p>The ID of the deleted patch baseline.</p>
    ///   - [`name(Option<String>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::name): <p>The name of the patch baseline.</p>
    ///   - [`operating_system(Option<OperatingSystem>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::operating_system): <p>The operating system rule used by the updated patch baseline.</p>
    ///   - [`global_filters(Option<PatchFilterGroup>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::global_filters): <p>A set of global filters used to exclude patches from the baseline.</p>
    ///   - [`approval_rules(Option<PatchRuleGroup>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::approval_rules): <p>A set of rules used to include patches in the baseline.</p>
    ///   - [`approved_patches(Option<Vec<String>>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::approved_patches): <p>A list of explicitly approved patches for the baseline.</p>
    ///   - [`approved_patches_compliance_level(Option<PatchComplianceLevel>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::approved_patches_compliance_level): <p>The compliance severity level assigned to the patch baseline after the update completed.</p>
    ///   - [`approved_patches_enable_non_security(Option<bool>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::approved_patches_enable_non_security): <p>Indicates whether the list of approved patches includes non-security updates that should be applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed nodes only.</p>
    ///   - [`rejected_patches(Option<Vec<String>>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::rejected_patches): <p>A list of explicitly rejected patches for the baseline.</p>
    ///   - [`rejected_patches_action(Option<PatchAction>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::rejected_patches_action): <p>The action specified to take on patches included in the <code>RejectedPatches</code> list. A patch can be allowed only if it is a dependency of another package, or blocked entirely along with packages that include it as a dependency.</p>
    ///   - [`created_date(Option<DateTime>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::created_date): <p>The date when the patch baseline was created.</p>
    ///   - [`modified_date(Option<DateTime>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::modified_date): <p>The date when the patch baseline was last modified.</p>
    ///   - [`description(Option<String>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::description): <p>A description of the patch baseline.</p>
    ///   - [`sources(Option<Vec<PatchSource>>)`](crate::operation::update_patch_baseline::UpdatePatchBaselineOutput::sources): <p>Information about the patches to use to update the managed nodes, including target operating systems and source repositories. Applies to Linux managed nodes only.</p>
    /// - On failure, responds with [`SdkError<UpdatePatchBaselineError>`](crate::operation::update_patch_baseline::UpdatePatchBaselineError)
    pub fn update_patch_baseline(
        &self,
    ) -> crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder {
        crate::operation::update_patch_baseline::builders::UpdatePatchBaselineFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
