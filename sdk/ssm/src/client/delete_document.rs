// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteDocument`](crate::client::fluent_builders::DeleteDocument) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteDocument::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteDocument::set_name): <p>The name of the document.</p>
    ///   - [`document_version(impl Into<String>)`](crate::client::fluent_builders::DeleteDocument::document_version) / [`set_document_version(Option<String>)`](crate::client::fluent_builders::DeleteDocument::set_document_version): <p>The version of the document that you want to delete. If not provided, all versions of the document are deleted.</p>
    ///   - [`version_name(impl Into<String>)`](crate::client::fluent_builders::DeleteDocument::version_name) / [`set_version_name(Option<String>)`](crate::client::fluent_builders::DeleteDocument::set_version_name): <p>The version name of the document that you want to delete. If not provided, all versions of the document are deleted.</p>
    ///   - [`force(bool)`](crate::client::fluent_builders::DeleteDocument::force) / [`set_force(bool)`](crate::client::fluent_builders::DeleteDocument::set_force): <p>Some SSM document types require that you specify a <code>Force</code> flag before you can delete the document. For example, you must specify a <code>Force</code> flag to delete a document of type <code>ApplicationConfigurationSchema</code>. You can restrict access to the <code>Force</code> flag in an Identity and Access Management (IAM) policy.</p>
    /// - On success, responds with [`DeleteDocumentOutput`](crate::output::DeleteDocumentOutput)
    /// - On failure, responds with [`SdkError<DeleteDocumentError>`](crate::error::DeleteDocumentError)
    pub fn delete_document(&self) -> crate::client::fluent_builders::DeleteDocument {
        crate::client::fluent_builders::DeleteDocument::new(self.handle.clone())
    }
}
