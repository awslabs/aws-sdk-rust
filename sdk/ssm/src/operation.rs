// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Adds or overwrites one or more tags for the specified resource. Tags are metadata that you
/// can assign to your documents, managed instances, maintenance windows, Parameter Store parameters,
/// and patch baselines. Tags enable you to categorize your resources in different ways, for example,
/// by purpose, owner, or environment. Each tag consists of a key and an optional value, both of
/// which you define. For example, you could define a set of tags for your account's managed
/// instances that helps you track each instance's owner and stack level. For example:</p>
/// <ul>
/// <li>
/// <p>
/// <code>Key=Owner,Value=DbAdmin</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Key=Owner,Value=SysAdmin</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Key=Owner,Value=Dev</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Key=Stack,Value=Production</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Key=Stack,Value=Pre-Production</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Key=Stack,Value=Test</code>
/// </p>
/// </li>
/// </ul>
/// <p>Each resource can have a maximum of 50 tags.</p>
/// <p>We recommend that you devise a set of tag keys that meets your needs for each resource type.
/// Using a consistent set of tag keys makes it easier for you to manage your resources. You can
/// search and filter the resources based on the tags you add. Tags don't have any semantic meaning
/// to and are interpreted strictly as a string of characters. </p>
/// <p>For more information about using tags with Amazon Elastic Compute Cloud (Amazon EC2) instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2
/// resources</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddTagsToResource {
    _private: (),
}
impl AddTagsToResource {
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput)
    pub fn builder() -> crate::input::add_tags_to_resource_input::Builder {
        crate::input::add_tags_to_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddTagsToResource {
    type Output = std::result::Result<
        crate::output::AddTagsToResourceOutput,
        crate::error::AddTagsToResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_tags_to_resource_error(response)
        } else {
            crate::operation_deser::parse_add_tags_to_resource_response(response)
        }
    }
}

/// <p>Associates a related item to a Systems Manager OpsCenter OpsItem. For example, you can associate an
/// Incident Manager incident or analysis with an OpsItem. Incident Manager and OpsCenter are capabilities of
/// Amazon Web Services Systems Manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateOpsItemRelatedItem {
    _private: (),
}
impl AssociateOpsItemRelatedItem {
    /// Creates a new builder-style object to manufacture [`AssociateOpsItemRelatedItemInput`](crate::input::AssociateOpsItemRelatedItemInput)
    pub fn builder() -> crate::input::associate_ops_item_related_item_input::Builder {
        crate::input::associate_ops_item_related_item_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateOpsItemRelatedItem {
    type Output = std::result::Result<
        crate::output::AssociateOpsItemRelatedItemOutput,
        crate::error::AssociateOpsItemRelatedItemError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_ops_item_related_item_error(response)
        } else {
            crate::operation_deser::parse_associate_ops_item_related_item_response(response)
        }
    }
}

/// <p>Attempts to cancel the command specified by the Command ID. There is no guarantee that the
/// command will be terminated and the underlying process stopped.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelCommand {
    _private: (),
}
impl CancelCommand {
    /// Creates a new builder-style object to manufacture [`CancelCommandInput`](crate::input::CancelCommandInput)
    pub fn builder() -> crate::input::cancel_command_input::Builder {
        crate::input::cancel_command_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelCommand {
    type Output =
        std::result::Result<crate::output::CancelCommandOutput, crate::error::CancelCommandError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_command_error(response)
        } else {
            crate::operation_deser::parse_cancel_command_response(response)
        }
    }
}

/// <p>Stops a maintenance window execution that is already in progress and cancels any tasks in
/// the window that haven't already starting running. Tasks already in progress will continue to
/// completion.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelMaintenanceWindowExecution {
    _private: (),
}
impl CancelMaintenanceWindowExecution {
    /// Creates a new builder-style object to manufacture [`CancelMaintenanceWindowExecutionInput`](crate::input::CancelMaintenanceWindowExecutionInput)
    pub fn builder() -> crate::input::cancel_maintenance_window_execution_input::Builder {
        crate::input::cancel_maintenance_window_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelMaintenanceWindowExecution {
    type Output = std::result::Result<
        crate::output::CancelMaintenanceWindowExecutionOutput,
        crate::error::CancelMaintenanceWindowExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_maintenance_window_execution_error(response)
        } else {
            crate::operation_deser::parse_cancel_maintenance_window_execution_response(response)
        }
    }
}

/// <p>Generates an activation code and activation ID you can use to register your on-premises
/// server or virtual machine (VM) with Amazon Web Services Systems Manager. Registering these machines with Systems Manager makes it
/// possible to manage them using Systems Manager capabilities. You use the activation code and ID when
/// installing SSM Agent on machines in your hybrid environment. For more information about
/// requirements for managing on-premises instances and VMs using Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html">Setting up
/// Amazon Web Services Systems Manager for hybrid environments</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
/// <note>
/// <p>On-premises servers or VMs that are registered with Systems Manager and Amazon Elastic Compute Cloud (Amazon EC2) instances
/// that you manage with Systems Manager are all called <i>managed instances</i>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateActivation {
    _private: (),
}
impl CreateActivation {
    /// Creates a new builder-style object to manufacture [`CreateActivationInput`](crate::input::CreateActivationInput)
    pub fn builder() -> crate::input::create_activation_input::Builder {
        crate::input::create_activation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateActivation {
    type Output = std::result::Result<
        crate::output::CreateActivationOutput,
        crate::error::CreateActivationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_activation_error(response)
        } else {
            crate::operation_deser::parse_create_activation_response(response)
        }
    }
}

/// <p>A State Manager association defines the state that you want to maintain on your instances.
/// For example, an association can specify that anti-virus software must be installed and running on
/// your instances, or that certain ports must be closed. For static targets, the association
/// specifies a schedule for when the configuration is reapplied. For dynamic targets, such as an
/// Amazon Web Services resource group or an Amazon Web Services autoscaling group, State Manager, a capability of Amazon Web Services Systems Manager
/// applies the configuration when new instances are added to the group. The association also
/// specifies actions to take when applying the configuration. For example, an association for
/// anti-virus software might run once a day. If the software isn't installed, then State Manager
/// installs it. If the software is installed, but the service isn't running, then the association
/// might instruct State Manager to start the service. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAssociation {
    _private: (),
}
impl CreateAssociation {
    /// Creates a new builder-style object to manufacture [`CreateAssociationInput`](crate::input::CreateAssociationInput)
    pub fn builder() -> crate::input::create_association_input::Builder {
        crate::input::create_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAssociation {
    type Output = std::result::Result<
        crate::output::CreateAssociationOutput,
        crate::error::CreateAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_association_error(response)
        } else {
            crate::operation_deser::parse_create_association_response(response)
        }
    }
}

/// <p>Associates the specified Amazon Web Services Systems Manager document (SSM document) with the specified instances or
/// targets.</p>
/// <p>When you associate a document with one or more instances using instance IDs or tags,
/// Amazon Web Services Systems Manager Agent (SSM Agent) running on the instance processes the document and configures the
/// instance as specified.</p>
/// <p>If you associate a document with an instance that already has an associated document, the
/// system returns the AssociationAlreadyExists exception.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAssociationBatch {
    _private: (),
}
impl CreateAssociationBatch {
    /// Creates a new builder-style object to manufacture [`CreateAssociationBatchInput`](crate::input::CreateAssociationBatchInput)
    pub fn builder() -> crate::input::create_association_batch_input::Builder {
        crate::input::create_association_batch_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAssociationBatch {
    type Output = std::result::Result<
        crate::output::CreateAssociationBatchOutput,
        crate::error::CreateAssociationBatchError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_association_batch_error(response)
        } else {
            crate::operation_deser::parse_create_association_batch_response(response)
        }
    }
}

/// <p>Creates a Amazon Web Services Systems Manager (SSM document). An SSM document defines the actions that Systems Manager performs
/// on your managed instances. For more information about SSM documents, including information about
/// supported schemas, features, and syntax, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html">Amazon Web Services Systems Manager Documents</a> in the
/// <i>Amazon Web Services Systems Manager User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDocument {
    _private: (),
}
impl CreateDocument {
    /// Creates a new builder-style object to manufacture [`CreateDocumentInput`](crate::input::CreateDocumentInput)
    pub fn builder() -> crate::input::create_document_input::Builder {
        crate::input::create_document_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDocument {
    type Output =
        std::result::Result<crate::output::CreateDocumentOutput, crate::error::CreateDocumentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_document_error(response)
        } else {
            crate::operation_deser::parse_create_document_response(response)
        }
    }
}

/// <p>Creates a new maintenance window.</p>
/// <note>
/// <p>The value you specify for <code>Duration</code> determines the specific end time for the
/// maintenance window based on the time it begins. No maintenance window tasks are permitted to
/// start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>.
/// For example, if the maintenance window starts at 3 PM, the duration is three hours, and the
/// value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start
/// after 5 PM.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMaintenanceWindow {
    _private: (),
}
impl CreateMaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`CreateMaintenanceWindowInput`](crate::input::CreateMaintenanceWindowInput)
    pub fn builder() -> crate::input::create_maintenance_window_input::Builder {
        crate::input::create_maintenance_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMaintenanceWindow {
    type Output = std::result::Result<
        crate::output::CreateMaintenanceWindowOutput,
        crate::error::CreateMaintenanceWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_maintenance_window_error(response)
        } else {
            crate::operation_deser::parse_create_maintenance_window_response(response)
        }
    }
}

/// <p>Creates a new OpsItem. You must have permission in Identity and Access Management (IAM) to create a new OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
/// OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
/// <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
/// remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
/// more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">Amazon Web Services Systems Manager OpsCenter</a> in the
/// <i>Amazon Web Services Systems Manager User Guide</i>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateOpsItem {
    _private: (),
}
impl CreateOpsItem {
    /// Creates a new builder-style object to manufacture [`CreateOpsItemInput`](crate::input::CreateOpsItemInput)
    pub fn builder() -> crate::input::create_ops_item_input::Builder {
        crate::input::create_ops_item_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateOpsItem {
    type Output =
        std::result::Result<crate::output::CreateOpsItemOutput, crate::error::CreateOpsItemError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_ops_item_error(response)
        } else {
            crate::operation_deser::parse_create_ops_item_response(response)
        }
    }
}

/// <p>If you create a new application in Application Manager, Amazon Web Services Systems Manager calls this API operation to specify
/// information about the new application, including the application type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateOpsMetadata {
    _private: (),
}
impl CreateOpsMetadata {
    /// Creates a new builder-style object to manufacture [`CreateOpsMetadataInput`](crate::input::CreateOpsMetadataInput)
    pub fn builder() -> crate::input::create_ops_metadata_input::Builder {
        crate::input::create_ops_metadata_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateOpsMetadata {
    type Output = std::result::Result<
        crate::output::CreateOpsMetadataOutput,
        crate::error::CreateOpsMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_ops_metadata_error(response)
        } else {
            crate::operation_deser::parse_create_ops_metadata_response(response)
        }
    }
}

/// <p>Creates a patch baseline.</p>
/// <note>
/// <p>For information about valid key-value pairs in <code>PatchFilters</code> for each supported
/// operating system type, see <a>PatchFilter</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePatchBaseline {
    _private: (),
}
impl CreatePatchBaseline {
    /// Creates a new builder-style object to manufacture [`CreatePatchBaselineInput`](crate::input::CreatePatchBaselineInput)
    pub fn builder() -> crate::input::create_patch_baseline_input::Builder {
        crate::input::create_patch_baseline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePatchBaseline {
    type Output = std::result::Result<
        crate::output::CreatePatchBaselineOutput,
        crate::error::CreatePatchBaselineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_patch_baseline_error(response)
        } else {
            crate::operation_deser::parse_create_patch_baseline_response(response)
        }
    }
}

/// <p>A resource data sync helps you view data from multiple sources in a single location.
/// Amazon Web Services Systems Manager offers two types of resource data sync: <code>SyncToDestination</code> and
/// <code>SyncFromSource</code>.</p>
/// <p>You can configure Systems Manager Inventory to use the <code>SyncToDestination</code> type to
/// synchronize Inventory data from multiple Amazon Web Services Regions to a single Amazon Simple Storage Service (Amazon S3) bucket. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-datasync.html">Configuring resource data
/// sync for Inventory</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
/// <p>You can configure Systems Manager Explorer to use the <code>SyncFromSource</code> type to synchronize
/// operational work items (OpsItems) and operational data (OpsData) from multiple Amazon Web Services Regions to a
/// single Amazon S3 bucket. This type can synchronize OpsItems and OpsData from multiple
/// Amazon Web Services accounts and Amazon Web Services Regions or <code>EntireOrganization</code> by using Organizations. For more
/// information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resource-data-sync.html">Setting up Systems Manager
/// Explorer to display data from multiple accounts and Regions</a> in the
/// <i>Amazon Web Services Systems Manager User Guide</i>.</p>
/// <p>A resource data sync is an asynchronous operation that returns immediately. After a
/// successful initial sync is completed, the system continuously syncs data. To check the status of
/// a sync, use the <a>ListResourceDataSync</a>.</p>
/// <note>
/// <p>By default, data isn't encrypted in Amazon S3. We strongly recommend that you
/// enable encryption in Amazon S3 to ensure secure data storage. We also recommend that you
/// secure access to the Amazon S3 bucket by creating a restrictive bucket policy. </p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateResourceDataSync {
    _private: (),
}
impl CreateResourceDataSync {
    /// Creates a new builder-style object to manufacture [`CreateResourceDataSyncInput`](crate::input::CreateResourceDataSyncInput)
    pub fn builder() -> crate::input::create_resource_data_sync_input::Builder {
        crate::input::create_resource_data_sync_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateResourceDataSync {
    type Output = std::result::Result<
        crate::output::CreateResourceDataSyncOutput,
        crate::error::CreateResourceDataSyncError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_resource_data_sync_error(response)
        } else {
            crate::operation_deser::parse_create_resource_data_sync_response(response)
        }
    }
}

/// <p>Deletes an activation. You aren't required to delete an activation. If you delete an
/// activation, you can no longer use it to register additional managed instances. Deleting an
/// activation doesn't de-register managed instances. You must manually de-register managed
/// instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteActivation {
    _private: (),
}
impl DeleteActivation {
    /// Creates a new builder-style object to manufacture [`DeleteActivationInput`](crate::input::DeleteActivationInput)
    pub fn builder() -> crate::input::delete_activation_input::Builder {
        crate::input::delete_activation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteActivation {
    type Output = std::result::Result<
        crate::output::DeleteActivationOutput,
        crate::error::DeleteActivationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_activation_error(response)
        } else {
            crate::operation_deser::parse_delete_activation_response(response)
        }
    }
}

/// <p>Disassociates the specified Amazon Web Services Systems Manager document (SSM document) from the specified instance.
/// If you created the association by using the <code>Targets</code> parameter, then you must delete
/// the association by using the association ID.</p>
/// <p>When you disassociate a document from an instance, it doesn't change the configuration of
/// the instance. To change the configuration state of an instance after you disassociate a document,
/// you must create a new document with the desired configuration and associate it with the
/// instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAssociation {
    _private: (),
}
impl DeleteAssociation {
    /// Creates a new builder-style object to manufacture [`DeleteAssociationInput`](crate::input::DeleteAssociationInput)
    pub fn builder() -> crate::input::delete_association_input::Builder {
        crate::input::delete_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAssociation {
    type Output = std::result::Result<
        crate::output::DeleteAssociationOutput,
        crate::error::DeleteAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_association_error(response)
        } else {
            crate::operation_deser::parse_delete_association_response(response)
        }
    }
}

/// <p>Deletes the Amazon Web Services Systems Manager document (SSM document) and all instance associations to the
/// document.</p>
/// <p>Before you delete the document, we recommend that you use <a>DeleteAssociation</a> to disassociate all instances that are associated with the document.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDocument {
    _private: (),
}
impl DeleteDocument {
    /// Creates a new builder-style object to manufacture [`DeleteDocumentInput`](crate::input::DeleteDocumentInput)
    pub fn builder() -> crate::input::delete_document_input::Builder {
        crate::input::delete_document_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDocument {
    type Output =
        std::result::Result<crate::output::DeleteDocumentOutput, crate::error::DeleteDocumentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_document_error(response)
        } else {
            crate::operation_deser::parse_delete_document_response(response)
        }
    }
}

/// <p>Delete a custom inventory type or the data associated with a custom Inventory type. Deleting
/// a custom inventory type is also referred to as deleting a custom inventory schema.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInventory {
    _private: (),
}
impl DeleteInventory {
    /// Creates a new builder-style object to manufacture [`DeleteInventoryInput`](crate::input::DeleteInventoryInput)
    pub fn builder() -> crate::input::delete_inventory_input::Builder {
        crate::input::delete_inventory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInventory {
    type Output = std::result::Result<
        crate::output::DeleteInventoryOutput,
        crate::error::DeleteInventoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_inventory_error(response)
        } else {
            crate::operation_deser::parse_delete_inventory_response(response)
        }
    }
}

/// <p>Deletes a maintenance window.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMaintenanceWindow {
    _private: (),
}
impl DeleteMaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`DeleteMaintenanceWindowInput`](crate::input::DeleteMaintenanceWindowInput)
    pub fn builder() -> crate::input::delete_maintenance_window_input::Builder {
        crate::input::delete_maintenance_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteMaintenanceWindow {
    type Output = std::result::Result<
        crate::output::DeleteMaintenanceWindowOutput,
        crate::error::DeleteMaintenanceWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_maintenance_window_error(response)
        } else {
            crate::operation_deser::parse_delete_maintenance_window_response(response)
        }
    }
}

/// <p>Delete OpsMetadata related to an application.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteOpsMetadata {
    _private: (),
}
impl DeleteOpsMetadata {
    /// Creates a new builder-style object to manufacture [`DeleteOpsMetadataInput`](crate::input::DeleteOpsMetadataInput)
    pub fn builder() -> crate::input::delete_ops_metadata_input::Builder {
        crate::input::delete_ops_metadata_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteOpsMetadata {
    type Output = std::result::Result<
        crate::output::DeleteOpsMetadataOutput,
        crate::error::DeleteOpsMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_ops_metadata_error(response)
        } else {
            crate::operation_deser::parse_delete_ops_metadata_response(response)
        }
    }
}

/// <p>Delete a parameter from the system. After deleting a parameter, wait for at least 30 seconds
/// to create a parameter with the same name.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteParameter {
    _private: (),
}
impl DeleteParameter {
    /// Creates a new builder-style object to manufacture [`DeleteParameterInput`](crate::input::DeleteParameterInput)
    pub fn builder() -> crate::input::delete_parameter_input::Builder {
        crate::input::delete_parameter_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteParameter {
    type Output = std::result::Result<
        crate::output::DeleteParameterOutput,
        crate::error::DeleteParameterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_parameter_error(response)
        } else {
            crate::operation_deser::parse_delete_parameter_response(response)
        }
    }
}

/// <p>Delete a list of parameters. After deleting a parameter, wait for at least 30 seconds to
/// create a parameter with the same name.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteParameters {
    _private: (),
}
impl DeleteParameters {
    /// Creates a new builder-style object to manufacture [`DeleteParametersInput`](crate::input::DeleteParametersInput)
    pub fn builder() -> crate::input::delete_parameters_input::Builder {
        crate::input::delete_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteParameters {
    type Output = std::result::Result<
        crate::output::DeleteParametersOutput,
        crate::error::DeleteParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_parameters_error(response)
        } else {
            crate::operation_deser::parse_delete_parameters_response(response)
        }
    }
}

/// <p>Deletes a patch baseline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePatchBaseline {
    _private: (),
}
impl DeletePatchBaseline {
    /// Creates a new builder-style object to manufacture [`DeletePatchBaselineInput`](crate::input::DeletePatchBaselineInput)
    pub fn builder() -> crate::input::delete_patch_baseline_input::Builder {
        crate::input::delete_patch_baseline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePatchBaseline {
    type Output = std::result::Result<
        crate::output::DeletePatchBaselineOutput,
        crate::error::DeletePatchBaselineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_patch_baseline_error(response)
        } else {
            crate::operation_deser::parse_delete_patch_baseline_response(response)
        }
    }
}

/// <p>Deletes a resource data sync configuration. After the configuration is deleted, changes to
/// data on managed instances are no longer synced to or from the target. Deleting a sync
/// configuration doesn't delete data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteResourceDataSync {
    _private: (),
}
impl DeleteResourceDataSync {
    /// Creates a new builder-style object to manufacture [`DeleteResourceDataSyncInput`](crate::input::DeleteResourceDataSyncInput)
    pub fn builder() -> crate::input::delete_resource_data_sync_input::Builder {
        crate::input::delete_resource_data_sync_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteResourceDataSync {
    type Output = std::result::Result<
        crate::output::DeleteResourceDataSyncOutput,
        crate::error::DeleteResourceDataSyncError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_resource_data_sync_error(response)
        } else {
            crate::operation_deser::parse_delete_resource_data_sync_response(response)
        }
    }
}

/// <p>Removes the server or virtual machine from the list of registered servers. You can
/// reregister the instance again at any time. If you don't plan to use Run Command on the server, we
/// suggest uninstalling SSM Agent first.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterManagedInstance {
    _private: (),
}
impl DeregisterManagedInstance {
    /// Creates a new builder-style object to manufacture [`DeregisterManagedInstanceInput`](crate::input::DeregisterManagedInstanceInput)
    pub fn builder() -> crate::input::deregister_managed_instance_input::Builder {
        crate::input::deregister_managed_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterManagedInstance {
    type Output = std::result::Result<
        crate::output::DeregisterManagedInstanceOutput,
        crate::error::DeregisterManagedInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_managed_instance_error(response)
        } else {
            crate::operation_deser::parse_deregister_managed_instance_response(response)
        }
    }
}

/// <p>Removes a patch group from a patch baseline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterPatchBaselineForPatchGroup {
    _private: (),
}
impl DeregisterPatchBaselineForPatchGroup {
    /// Creates a new builder-style object to manufacture [`DeregisterPatchBaselineForPatchGroupInput`](crate::input::DeregisterPatchBaselineForPatchGroupInput)
    pub fn builder() -> crate::input::deregister_patch_baseline_for_patch_group_input::Builder {
        crate::input::deregister_patch_baseline_for_patch_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterPatchBaselineForPatchGroup {
    type Output = std::result::Result<
        crate::output::DeregisterPatchBaselineForPatchGroupOutput,
        crate::error::DeregisterPatchBaselineForPatchGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_patch_baseline_for_patch_group_error(response)
        } else {
            crate::operation_deser::parse_deregister_patch_baseline_for_patch_group_response(
                response,
            )
        }
    }
}

/// <p>Removes a target from a maintenance window.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterTargetFromMaintenanceWindow {
    _private: (),
}
impl DeregisterTargetFromMaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`DeregisterTargetFromMaintenanceWindowInput`](crate::input::DeregisterTargetFromMaintenanceWindowInput)
    pub fn builder() -> crate::input::deregister_target_from_maintenance_window_input::Builder {
        crate::input::deregister_target_from_maintenance_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterTargetFromMaintenanceWindow {
    type Output = std::result::Result<
        crate::output::DeregisterTargetFromMaintenanceWindowOutput,
        crate::error::DeregisterTargetFromMaintenanceWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_target_from_maintenance_window_error(response)
        } else {
            crate::operation_deser::parse_deregister_target_from_maintenance_window_response(
                response,
            )
        }
    }
}

/// <p>Removes a task from a maintenance window.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterTaskFromMaintenanceWindow {
    _private: (),
}
impl DeregisterTaskFromMaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`DeregisterTaskFromMaintenanceWindowInput`](crate::input::DeregisterTaskFromMaintenanceWindowInput)
    pub fn builder() -> crate::input::deregister_task_from_maintenance_window_input::Builder {
        crate::input::deregister_task_from_maintenance_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterTaskFromMaintenanceWindow {
    type Output = std::result::Result<
        crate::output::DeregisterTaskFromMaintenanceWindowOutput,
        crate::error::DeregisterTaskFromMaintenanceWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_task_from_maintenance_window_error(response)
        } else {
            crate::operation_deser::parse_deregister_task_from_maintenance_window_response(response)
        }
    }
}

/// <p>Describes details about the activation, such as the date and time the activation was
/// created, its expiration date, the Identity and Access Management (IAM) role assigned to
/// the instances in the activation, and the number of instances registered by using this
/// activation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeActivations {
    _private: (),
}
impl DescribeActivations {
    /// Creates a new builder-style object to manufacture [`DescribeActivationsInput`](crate::input::DescribeActivationsInput)
    pub fn builder() -> crate::input::describe_activations_input::Builder {
        crate::input::describe_activations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeActivations {
    type Output = std::result::Result<
        crate::output::DescribeActivationsOutput,
        crate::error::DescribeActivationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_activations_error(response)
        } else {
            crate::operation_deser::parse_describe_activations_response(response)
        }
    }
}

/// <p>Describes the association for the specified target or instance. If you created the
/// association by using the <code>Targets</code> parameter, then you must retrieve the association
/// by using the association ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAssociation {
    _private: (),
}
impl DescribeAssociation {
    /// Creates a new builder-style object to manufacture [`DescribeAssociationInput`](crate::input::DescribeAssociationInput)
    pub fn builder() -> crate::input::describe_association_input::Builder {
        crate::input::describe_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAssociation {
    type Output = std::result::Result<
        crate::output::DescribeAssociationOutput,
        crate::error::DescribeAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_association_error(response)
        } else {
            crate::operation_deser::parse_describe_association_response(response)
        }
    }
}

/// <p>Views all executions for a specific association ID. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAssociationExecutions {
    _private: (),
}
impl DescribeAssociationExecutions {
    /// Creates a new builder-style object to manufacture [`DescribeAssociationExecutionsInput`](crate::input::DescribeAssociationExecutionsInput)
    pub fn builder() -> crate::input::describe_association_executions_input::Builder {
        crate::input::describe_association_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAssociationExecutions {
    type Output = std::result::Result<
        crate::output::DescribeAssociationExecutionsOutput,
        crate::error::DescribeAssociationExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_association_executions_error(response)
        } else {
            crate::operation_deser::parse_describe_association_executions_response(response)
        }
    }
}

/// <p>Views information about a specific execution of a specific association.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAssociationExecutionTargets {
    _private: (),
}
impl DescribeAssociationExecutionTargets {
    /// Creates a new builder-style object to manufacture [`DescribeAssociationExecutionTargetsInput`](crate::input::DescribeAssociationExecutionTargetsInput)
    pub fn builder() -> crate::input::describe_association_execution_targets_input::Builder {
        crate::input::describe_association_execution_targets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAssociationExecutionTargets {
    type Output = std::result::Result<
        crate::output::DescribeAssociationExecutionTargetsOutput,
        crate::error::DescribeAssociationExecutionTargetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_association_execution_targets_error(response)
        } else {
            crate::operation_deser::parse_describe_association_execution_targets_response(response)
        }
    }
}

/// <p>Provides details about all active and terminated Automation executions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAutomationExecutions {
    _private: (),
}
impl DescribeAutomationExecutions {
    /// Creates a new builder-style object to manufacture [`DescribeAutomationExecutionsInput`](crate::input::DescribeAutomationExecutionsInput)
    pub fn builder() -> crate::input::describe_automation_executions_input::Builder {
        crate::input::describe_automation_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAutomationExecutions {
    type Output = std::result::Result<
        crate::output::DescribeAutomationExecutionsOutput,
        crate::error::DescribeAutomationExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_automation_executions_error(response)
        } else {
            crate::operation_deser::parse_describe_automation_executions_response(response)
        }
    }
}

/// <p>Information about all active and terminated step executions in an Automation
/// workflow.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAutomationStepExecutions {
    _private: (),
}
impl DescribeAutomationStepExecutions {
    /// Creates a new builder-style object to manufacture [`DescribeAutomationStepExecutionsInput`](crate::input::DescribeAutomationStepExecutionsInput)
    pub fn builder() -> crate::input::describe_automation_step_executions_input::Builder {
        crate::input::describe_automation_step_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAutomationStepExecutions {
    type Output = std::result::Result<
        crate::output::DescribeAutomationStepExecutionsOutput,
        crate::error::DescribeAutomationStepExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_automation_step_executions_error(response)
        } else {
            crate::operation_deser::parse_describe_automation_step_executions_response(response)
        }
    }
}

/// <p>Lists all patches eligible to be included in a patch baseline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAvailablePatches {
    _private: (),
}
impl DescribeAvailablePatches {
    /// Creates a new builder-style object to manufacture [`DescribeAvailablePatchesInput`](crate::input::DescribeAvailablePatchesInput)
    pub fn builder() -> crate::input::describe_available_patches_input::Builder {
        crate::input::describe_available_patches_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAvailablePatches {
    type Output = std::result::Result<
        crate::output::DescribeAvailablePatchesOutput,
        crate::error::DescribeAvailablePatchesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_available_patches_error(response)
        } else {
            crate::operation_deser::parse_describe_available_patches_response(response)
        }
    }
}

/// <p>Describes the specified Amazon Web Services Systems Manager document (SSM document).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDocument {
    _private: (),
}
impl DescribeDocument {
    /// Creates a new builder-style object to manufacture [`DescribeDocumentInput`](crate::input::DescribeDocumentInput)
    pub fn builder() -> crate::input::describe_document_input::Builder {
        crate::input::describe_document_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDocument {
    type Output = std::result::Result<
        crate::output::DescribeDocumentOutput,
        crate::error::DescribeDocumentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_document_error(response)
        } else {
            crate::operation_deser::parse_describe_document_response(response)
        }
    }
}

/// <p>Describes the permissions for a Amazon Web Services Systems Manager document (SSM document). If you created the
/// document, you are the owner. If a document is shared, it can either be shared privately (by
/// specifying a user's Amazon Web Services account ID) or publicly (<i>All</i>). </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDocumentPermission {
    _private: (),
}
impl DescribeDocumentPermission {
    /// Creates a new builder-style object to manufacture [`DescribeDocumentPermissionInput`](crate::input::DescribeDocumentPermissionInput)
    pub fn builder() -> crate::input::describe_document_permission_input::Builder {
        crate::input::describe_document_permission_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDocumentPermission {
    type Output = std::result::Result<
        crate::output::DescribeDocumentPermissionOutput,
        crate::error::DescribeDocumentPermissionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_document_permission_error(response)
        } else {
            crate::operation_deser::parse_describe_document_permission_response(response)
        }
    }
}

/// <p>All associations for the instance(s).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEffectiveInstanceAssociations {
    _private: (),
}
impl DescribeEffectiveInstanceAssociations {
    /// Creates a new builder-style object to manufacture [`DescribeEffectiveInstanceAssociationsInput`](crate::input::DescribeEffectiveInstanceAssociationsInput)
    pub fn builder() -> crate::input::describe_effective_instance_associations_input::Builder {
        crate::input::describe_effective_instance_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEffectiveInstanceAssociations {
    type Output = std::result::Result<
        crate::output::DescribeEffectiveInstanceAssociationsOutput,
        crate::error::DescribeEffectiveInstanceAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_effective_instance_associations_error(response)
        } else {
            crate::operation_deser::parse_describe_effective_instance_associations_response(
                response,
            )
        }
    }
}

/// <p>Retrieves the current effective patches (the patch and the approval state) for the specified
/// patch baseline. Applies to patch baselines for Windows only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEffectivePatchesForPatchBaseline {
    _private: (),
}
impl DescribeEffectivePatchesForPatchBaseline {
    /// Creates a new builder-style object to manufacture [`DescribeEffectivePatchesForPatchBaselineInput`](crate::input::DescribeEffectivePatchesForPatchBaselineInput)
    pub fn builder() -> crate::input::describe_effective_patches_for_patch_baseline_input::Builder {
        crate::input::describe_effective_patches_for_patch_baseline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEffectivePatchesForPatchBaseline {
    type Output = std::result::Result<
        crate::output::DescribeEffectivePatchesForPatchBaselineOutput,
        crate::error::DescribeEffectivePatchesForPatchBaselineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_effective_patches_for_patch_baseline_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_effective_patches_for_patch_baseline_response(
                response,
            )
        }
    }
}

/// <p>The status of the associations for the instance(s).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceAssociationsStatus {
    _private: (),
}
impl DescribeInstanceAssociationsStatus {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceAssociationsStatusInput`](crate::input::DescribeInstanceAssociationsStatusInput)
    pub fn builder() -> crate::input::describe_instance_associations_status_input::Builder {
        crate::input::describe_instance_associations_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstanceAssociationsStatus {
    type Output = std::result::Result<
        crate::output::DescribeInstanceAssociationsStatusOutput,
        crate::error::DescribeInstanceAssociationsStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_associations_status_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_associations_status_response(response)
        }
    }
}

/// <p>Describes one or more of your instances, including information about the operating system
/// platform, the version of SSM Agent installed on the instance, instance status, and so on.</p>
/// <p>If you specify one or more instance IDs, it returns information for those instances. If you
/// don't specify instance IDs, it returns information for all your instances. If you specify an
/// instance ID that isn't valid or an instance that you don't own, you receive an error.</p>
/// <note>
/// <p>The <code>IamRole</code> field for this API operation is the Identity and Access Management
/// (IAM) role assigned to on-premises instances. This call doesn't return the
/// IAM role for EC2 instances.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceInformation {
    _private: (),
}
impl DescribeInstanceInformation {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceInformationInput`](crate::input::DescribeInstanceInformationInput)
    pub fn builder() -> crate::input::describe_instance_information_input::Builder {
        crate::input::describe_instance_information_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstanceInformation {
    type Output = std::result::Result<
        crate::output::DescribeInstanceInformationOutput,
        crate::error::DescribeInstanceInformationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_information_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_information_response(response)
        }
    }
}

/// <p>Retrieves information about the patches on the specified instance and their state relative
/// to the patch baseline being used for the instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstancePatches {
    _private: (),
}
impl DescribeInstancePatches {
    /// Creates a new builder-style object to manufacture [`DescribeInstancePatchesInput`](crate::input::DescribeInstancePatchesInput)
    pub fn builder() -> crate::input::describe_instance_patches_input::Builder {
        crate::input::describe_instance_patches_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstancePatches {
    type Output = std::result::Result<
        crate::output::DescribeInstancePatchesOutput,
        crate::error::DescribeInstancePatchesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_patches_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_patches_response(response)
        }
    }
}

/// <p>Retrieves the high-level patch state of one or more instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstancePatchStates {
    _private: (),
}
impl DescribeInstancePatchStates {
    /// Creates a new builder-style object to manufacture [`DescribeInstancePatchStatesInput`](crate::input::DescribeInstancePatchStatesInput)
    pub fn builder() -> crate::input::describe_instance_patch_states_input::Builder {
        crate::input::describe_instance_patch_states_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstancePatchStates {
    type Output = std::result::Result<
        crate::output::DescribeInstancePatchStatesOutput,
        crate::error::DescribeInstancePatchStatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_patch_states_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_patch_states_response(response)
        }
    }
}

/// <p>Retrieves the high-level patch state for the instances in the specified patch group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstancePatchStatesForPatchGroup {
    _private: (),
}
impl DescribeInstancePatchStatesForPatchGroup {
    /// Creates a new builder-style object to manufacture [`DescribeInstancePatchStatesForPatchGroupInput`](crate::input::DescribeInstancePatchStatesForPatchGroupInput)
    pub fn builder() -> crate::input::describe_instance_patch_states_for_patch_group_input::Builder
    {
        crate::input::describe_instance_patch_states_for_patch_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstancePatchStatesForPatchGroup {
    type Output = std::result::Result<
        crate::output::DescribeInstancePatchStatesForPatchGroupOutput,
        crate::error::DescribeInstancePatchStatesForPatchGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_patch_states_for_patch_group_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_instance_patch_states_for_patch_group_response(
                response,
            )
        }
    }
}

/// <p>Describes a specific delete inventory operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInventoryDeletions {
    _private: (),
}
impl DescribeInventoryDeletions {
    /// Creates a new builder-style object to manufacture [`DescribeInventoryDeletionsInput`](crate::input::DescribeInventoryDeletionsInput)
    pub fn builder() -> crate::input::describe_inventory_deletions_input::Builder {
        crate::input::describe_inventory_deletions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInventoryDeletions {
    type Output = std::result::Result<
        crate::output::DescribeInventoryDeletionsOutput,
        crate::error::DescribeInventoryDeletionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_inventory_deletions_error(response)
        } else {
            crate::operation_deser::parse_describe_inventory_deletions_response(response)
        }
    }
}

/// <p>Lists the executions of a maintenance window. This includes information about when the
/// maintenance window was scheduled to be active, and information about tasks registered and run
/// with the maintenance window.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMaintenanceWindowExecutions {
    _private: (),
}
impl DescribeMaintenanceWindowExecutions {
    /// Creates a new builder-style object to manufacture [`DescribeMaintenanceWindowExecutionsInput`](crate::input::DescribeMaintenanceWindowExecutionsInput)
    pub fn builder() -> crate::input::describe_maintenance_window_executions_input::Builder {
        crate::input::describe_maintenance_window_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMaintenanceWindowExecutions {
    type Output = std::result::Result<
        crate::output::DescribeMaintenanceWindowExecutionsOutput,
        crate::error::DescribeMaintenanceWindowExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_maintenance_window_executions_error(response)
        } else {
            crate::operation_deser::parse_describe_maintenance_window_executions_response(response)
        }
    }
}

/// <p>Retrieves the individual task executions (one per target) for a particular task run as part
/// of a maintenance window execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMaintenanceWindowExecutionTaskInvocations {
    _private: (),
}
impl DescribeMaintenanceWindowExecutionTaskInvocations {
    /// Creates a new builder-style object to manufacture [`DescribeMaintenanceWindowExecutionTaskInvocationsInput`](crate::input::DescribeMaintenanceWindowExecutionTaskInvocationsInput)
    pub fn builder(
    ) -> crate::input::describe_maintenance_window_execution_task_invocations_input::Builder {
        crate::input::describe_maintenance_window_execution_task_invocations_input::Builder::default(
        )
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for DescribeMaintenanceWindowExecutionTaskInvocations
{
    type Output = std::result::Result<
        crate::output::DescribeMaintenanceWindowExecutionTaskInvocationsOutput,
        crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_maintenance_window_execution_task_invocations_error(response)
        } else {
            crate::operation_deser::parse_describe_maintenance_window_execution_task_invocations_response(response)
        }
    }
}

/// <p>For a given maintenance window execution, lists the tasks that were run.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMaintenanceWindowExecutionTasks {
    _private: (),
}
impl DescribeMaintenanceWindowExecutionTasks {
    /// Creates a new builder-style object to manufacture [`DescribeMaintenanceWindowExecutionTasksInput`](crate::input::DescribeMaintenanceWindowExecutionTasksInput)
    pub fn builder() -> crate::input::describe_maintenance_window_execution_tasks_input::Builder {
        crate::input::describe_maintenance_window_execution_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMaintenanceWindowExecutionTasks {
    type Output = std::result::Result<
        crate::output::DescribeMaintenanceWindowExecutionTasksOutput,
        crate::error::DescribeMaintenanceWindowExecutionTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_maintenance_window_execution_tasks_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_maintenance_window_execution_tasks_response(
                response,
            )
        }
    }
}

/// <p>Retrieves the maintenance windows in an Amazon Web Services account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMaintenanceWindows {
    _private: (),
}
impl DescribeMaintenanceWindows {
    /// Creates a new builder-style object to manufacture [`DescribeMaintenanceWindowsInput`](crate::input::DescribeMaintenanceWindowsInput)
    pub fn builder() -> crate::input::describe_maintenance_windows_input::Builder {
        crate::input::describe_maintenance_windows_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMaintenanceWindows {
    type Output = std::result::Result<
        crate::output::DescribeMaintenanceWindowsOutput,
        crate::error::DescribeMaintenanceWindowsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_maintenance_windows_error(response)
        } else {
            crate::operation_deser::parse_describe_maintenance_windows_response(response)
        }
    }
}

/// <p>Retrieves information about upcoming executions of a maintenance window.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMaintenanceWindowSchedule {
    _private: (),
}
impl DescribeMaintenanceWindowSchedule {
    /// Creates a new builder-style object to manufacture [`DescribeMaintenanceWindowScheduleInput`](crate::input::DescribeMaintenanceWindowScheduleInput)
    pub fn builder() -> crate::input::describe_maintenance_window_schedule_input::Builder {
        crate::input::describe_maintenance_window_schedule_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMaintenanceWindowSchedule {
    type Output = std::result::Result<
        crate::output::DescribeMaintenanceWindowScheduleOutput,
        crate::error::DescribeMaintenanceWindowScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_maintenance_window_schedule_error(response)
        } else {
            crate::operation_deser::parse_describe_maintenance_window_schedule_response(response)
        }
    }
}

/// <p>Retrieves information about the maintenance window targets or tasks that an instance is
/// associated with.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMaintenanceWindowsForTarget {
    _private: (),
}
impl DescribeMaintenanceWindowsForTarget {
    /// Creates a new builder-style object to manufacture [`DescribeMaintenanceWindowsForTargetInput`](crate::input::DescribeMaintenanceWindowsForTargetInput)
    pub fn builder() -> crate::input::describe_maintenance_windows_for_target_input::Builder {
        crate::input::describe_maintenance_windows_for_target_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMaintenanceWindowsForTarget {
    type Output = std::result::Result<
        crate::output::DescribeMaintenanceWindowsForTargetOutput,
        crate::error::DescribeMaintenanceWindowsForTargetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_maintenance_windows_for_target_error(response)
        } else {
            crate::operation_deser::parse_describe_maintenance_windows_for_target_response(response)
        }
    }
}

/// <p>Lists the targets registered with the maintenance window.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMaintenanceWindowTargets {
    _private: (),
}
impl DescribeMaintenanceWindowTargets {
    /// Creates a new builder-style object to manufacture [`DescribeMaintenanceWindowTargetsInput`](crate::input::DescribeMaintenanceWindowTargetsInput)
    pub fn builder() -> crate::input::describe_maintenance_window_targets_input::Builder {
        crate::input::describe_maintenance_window_targets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMaintenanceWindowTargets {
    type Output = std::result::Result<
        crate::output::DescribeMaintenanceWindowTargetsOutput,
        crate::error::DescribeMaintenanceWindowTargetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_maintenance_window_targets_error(response)
        } else {
            crate::operation_deser::parse_describe_maintenance_window_targets_response(response)
        }
    }
}

/// <p>Lists the tasks in a maintenance window.</p>
/// <note>
/// <p>For maintenance window tasks without a specified target, you can't supply values for
/// <code>--max-errors</code> and <code>--max-concurrency</code>. Instead, the system inserts a
/// placeholder value of <code>1</code>, which may be reported in the response to this command.
/// These values don't affect the running of your task and can be ignored.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMaintenanceWindowTasks {
    _private: (),
}
impl DescribeMaintenanceWindowTasks {
    /// Creates a new builder-style object to manufacture [`DescribeMaintenanceWindowTasksInput`](crate::input::DescribeMaintenanceWindowTasksInput)
    pub fn builder() -> crate::input::describe_maintenance_window_tasks_input::Builder {
        crate::input::describe_maintenance_window_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMaintenanceWindowTasks {
    type Output = std::result::Result<
        crate::output::DescribeMaintenanceWindowTasksOutput,
        crate::error::DescribeMaintenanceWindowTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_maintenance_window_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_maintenance_window_tasks_response(response)
        }
    }
}

/// <p>Query a set of OpsItems. You must have permission in Identity and Access Management (IAM) to query a list of OpsItems. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
/// OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
/// <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
/// remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
/// more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the
/// <i>Amazon Web Services Systems Manager User Guide</i>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeOpsItems {
    _private: (),
}
impl DescribeOpsItems {
    /// Creates a new builder-style object to manufacture [`DescribeOpsItemsInput`](crate::input::DescribeOpsItemsInput)
    pub fn builder() -> crate::input::describe_ops_items_input::Builder {
        crate::input::describe_ops_items_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeOpsItems {
    type Output = std::result::Result<
        crate::output::DescribeOpsItemsOutput,
        crate::error::DescribeOpsItemsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_ops_items_error(response)
        } else {
            crate::operation_deser::parse_describe_ops_items_response(response)
        }
    }
}

/// <p>Get information about a parameter.</p>
/// <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code>
/// in the request, the response includes information up to the limit specified. The number of items
/// returned, however, can be between zero and the value of <code>MaxResults</code>. If the service
/// reaches an internal limit while processing the results, it stops the operation and returns the
/// matching values up to that point and a <code>NextToken</code>. You can specify the
/// <code>NextToken</code> in a subsequent call to get the next set of results.</p>
/// <important>
/// <p>If you change the KMS key alias for the KMS key used to encrypt a parameter, then you must
/// also update the key alias the parameter uses to reference KMS. Otherwise,
/// <code>DescribeParameters</code> retrieves whatever the original key alias was
/// referencing.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeParameters {
    _private: (),
}
impl DescribeParameters {
    /// Creates a new builder-style object to manufacture [`DescribeParametersInput`](crate::input::DescribeParametersInput)
    pub fn builder() -> crate::input::describe_parameters_input::Builder {
        crate::input::describe_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeParameters {
    type Output = std::result::Result<
        crate::output::DescribeParametersOutput,
        crate::error::DescribeParametersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_parameters_error(response)
        } else {
            crate::operation_deser::parse_describe_parameters_response(response)
        }
    }
}

/// <p>Lists the patch baselines in your Amazon Web Services account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePatchBaselines {
    _private: (),
}
impl DescribePatchBaselines {
    /// Creates a new builder-style object to manufacture [`DescribePatchBaselinesInput`](crate::input::DescribePatchBaselinesInput)
    pub fn builder() -> crate::input::describe_patch_baselines_input::Builder {
        crate::input::describe_patch_baselines_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePatchBaselines {
    type Output = std::result::Result<
        crate::output::DescribePatchBaselinesOutput,
        crate::error::DescribePatchBaselinesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_patch_baselines_error(response)
        } else {
            crate::operation_deser::parse_describe_patch_baselines_response(response)
        }
    }
}

/// <p>Lists all patch groups that have been registered with patch baselines.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePatchGroups {
    _private: (),
}
impl DescribePatchGroups {
    /// Creates a new builder-style object to manufacture [`DescribePatchGroupsInput`](crate::input::DescribePatchGroupsInput)
    pub fn builder() -> crate::input::describe_patch_groups_input::Builder {
        crate::input::describe_patch_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePatchGroups {
    type Output = std::result::Result<
        crate::output::DescribePatchGroupsOutput,
        crate::error::DescribePatchGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_patch_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_patch_groups_response(response)
        }
    }
}

/// <p>Returns high-level aggregated patch compliance state information for a patch group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePatchGroupState {
    _private: (),
}
impl DescribePatchGroupState {
    /// Creates a new builder-style object to manufacture [`DescribePatchGroupStateInput`](crate::input::DescribePatchGroupStateInput)
    pub fn builder() -> crate::input::describe_patch_group_state_input::Builder {
        crate::input::describe_patch_group_state_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePatchGroupState {
    type Output = std::result::Result<
        crate::output::DescribePatchGroupStateOutput,
        crate::error::DescribePatchGroupStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_patch_group_state_error(response)
        } else {
            crate::operation_deser::parse_describe_patch_group_state_response(response)
        }
    }
}

/// <p>Lists the properties of available patches organized by product, product family,
/// classification, severity, and other properties of available patches. You can use the reported
/// properties in the filters you specify in requests for operations such as <a>CreatePatchBaseline</a>, <a>UpdatePatchBaseline</a>, <a>DescribeAvailablePatches</a>, and <a>DescribePatchBaselines</a>.</p>
/// <p>The following section lists the properties that can be used in filters for each major
/// operating system type:</p>
/// <dl>
/// <dt>AMAZON_LINUX</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
/// <code>SEVERITY</code>
/// </p>
/// </dd>
/// <dt>AMAZON_LINUX_2</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
/// <code>SEVERITY</code>
/// </p>
/// </dd>
/// <dt>CENTOS</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
/// <code>SEVERITY</code>
/// </p>
/// </dd>
/// <dt>DEBIAN</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>PRIORITY</code>
/// </p>
/// </dd>
/// <dt>MACOS</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code>
/// </p>
/// </dd>
/// <dt>ORACLE_LINUX</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
/// <code>SEVERITY</code>
/// </p>
/// </dd>
/// <dt>REDHAT_ENTERPRISE_LINUX</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
/// <code>SEVERITY</code>
/// </p>
/// </dd>
/// <dt>SUSE</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
/// <code>SEVERITY</code>
/// </p>
/// </dd>
/// <dt>UBUNTU</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>PRIORITY</code>
/// </p>
/// </dd>
/// <dt>WINDOWS</dt>
/// <dd>
/// <p>Valid properties: <code>PRODUCT</code> | <code>PRODUCT_FAMILY</code> |
/// <code>CLASSIFICATION</code> | <code>MSRC_SEVERITY</code>
/// </p>
/// </dd>
/// </dl>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePatchProperties {
    _private: (),
}
impl DescribePatchProperties {
    /// Creates a new builder-style object to manufacture [`DescribePatchPropertiesInput`](crate::input::DescribePatchPropertiesInput)
    pub fn builder() -> crate::input::describe_patch_properties_input::Builder {
        crate::input::describe_patch_properties_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePatchProperties {
    type Output = std::result::Result<
        crate::output::DescribePatchPropertiesOutput,
        crate::error::DescribePatchPropertiesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_patch_properties_error(response)
        } else {
            crate::operation_deser::parse_describe_patch_properties_response(response)
        }
    }
}

/// <p>Retrieves a list of all active sessions (both connected and disconnected) or terminated
/// sessions from the past 30 days.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSessions {
    _private: (),
}
impl DescribeSessions {
    /// Creates a new builder-style object to manufacture [`DescribeSessionsInput`](crate::input::DescribeSessionsInput)
    pub fn builder() -> crate::input::describe_sessions_input::Builder {
        crate::input::describe_sessions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSessions {
    type Output = std::result::Result<
        crate::output::DescribeSessionsOutput,
        crate::error::DescribeSessionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_sessions_error(response)
        } else {
            crate::operation_deser::parse_describe_sessions_response(response)
        }
    }
}

/// <p>Deletes the association between an OpsItem and a related item. For example, this API
/// operation can delete an Incident Manager incident from an OpsItem. Incident Manager is a capability of
/// Amazon Web Services Systems Manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateOpsItemRelatedItem {
    _private: (),
}
impl DisassociateOpsItemRelatedItem {
    /// Creates a new builder-style object to manufacture [`DisassociateOpsItemRelatedItemInput`](crate::input::DisassociateOpsItemRelatedItemInput)
    pub fn builder() -> crate::input::disassociate_ops_item_related_item_input::Builder {
        crate::input::disassociate_ops_item_related_item_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateOpsItemRelatedItem {
    type Output = std::result::Result<
        crate::output::DisassociateOpsItemRelatedItemOutput,
        crate::error::DisassociateOpsItemRelatedItemError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_ops_item_related_item_error(response)
        } else {
            crate::operation_deser::parse_disassociate_ops_item_related_item_response(response)
        }
    }
}

/// <p>Get detailed information about a particular Automation execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAutomationExecution {
    _private: (),
}
impl GetAutomationExecution {
    /// Creates a new builder-style object to manufacture [`GetAutomationExecutionInput`](crate::input::GetAutomationExecutionInput)
    pub fn builder() -> crate::input::get_automation_execution_input::Builder {
        crate::input::get_automation_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAutomationExecution {
    type Output = std::result::Result<
        crate::output::GetAutomationExecutionOutput,
        crate::error::GetAutomationExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_automation_execution_error(response)
        } else {
            crate::operation_deser::parse_get_automation_execution_response(response)
        }
    }
}

/// <p>Gets the state of a Amazon Web Services Systems Manager change calendar at the current time or a specified time. If
/// you specify a time, <code>GetCalendarState</code> returns the state of the calendar at that
/// specific time, and returns the next time that the change calendar state will transition. If you
/// don't specify a time, <code>GetCalendarState</code> uses the current time. Change Calendar
/// entries have two possible states: <code>OPEN</code> or <code>CLOSED</code>.</p>
/// <p>If you specify more than one calendar in a request, the command returns the status of
/// <code>OPEN</code> only if all calendars in the request are open. If one or more calendars in the
/// request are closed, the status returned is <code>CLOSED</code>.</p>
/// <p>For more information about Change Calendar, a capability of Amazon Web Services Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar.html">Amazon Web Services Systems Manager Change Calendar</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCalendarState {
    _private: (),
}
impl GetCalendarState {
    /// Creates a new builder-style object to manufacture [`GetCalendarStateInput`](crate::input::GetCalendarStateInput)
    pub fn builder() -> crate::input::get_calendar_state_input::Builder {
        crate::input::get_calendar_state_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCalendarState {
    type Output = std::result::Result<
        crate::output::GetCalendarStateOutput,
        crate::error::GetCalendarStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_calendar_state_error(response)
        } else {
            crate::operation_deser::parse_get_calendar_state_response(response)
        }
    }
}

/// <p>Returns detailed information about command execution for an invocation or plugin.</p>
/// <p>
/// <code>GetCommandInvocation</code> only gives the execution status of a plugin in a document.
/// To get the command execution status on a specific instance, use <a>ListCommandInvocations</a>. To get the command execution status across instances, use
/// <a>ListCommands</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCommandInvocation {
    _private: (),
}
impl GetCommandInvocation {
    /// Creates a new builder-style object to manufacture [`GetCommandInvocationInput`](crate::input::GetCommandInvocationInput)
    pub fn builder() -> crate::input::get_command_invocation_input::Builder {
        crate::input::get_command_invocation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCommandInvocation {
    type Output = std::result::Result<
        crate::output::GetCommandInvocationOutput,
        crate::error::GetCommandInvocationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_command_invocation_error(response)
        } else {
            crate::operation_deser::parse_get_command_invocation_response(response)
        }
    }
}

/// <p>Retrieves the Session Manager connection status for an instance to determine whether it is running and
/// ready to receive Session Manager connections.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConnectionStatus {
    _private: (),
}
impl GetConnectionStatus {
    /// Creates a new builder-style object to manufacture [`GetConnectionStatusInput`](crate::input::GetConnectionStatusInput)
    pub fn builder() -> crate::input::get_connection_status_input::Builder {
        crate::input::get_connection_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConnectionStatus {
    type Output = std::result::Result<
        crate::output::GetConnectionStatusOutput,
        crate::error::GetConnectionStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_connection_status_error(response)
        } else {
            crate::operation_deser::parse_get_connection_status_response(response)
        }
    }
}

/// <p>Retrieves the default patch baseline. Amazon Web Services Systems Manager supports creating multiple default patch
/// baselines. For example, you can create a default patch baseline for each operating system.</p>
/// <p>If you don't specify an operating system value, the default patch baseline for Windows is
/// returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDefaultPatchBaseline {
    _private: (),
}
impl GetDefaultPatchBaseline {
    /// Creates a new builder-style object to manufacture [`GetDefaultPatchBaselineInput`](crate::input::GetDefaultPatchBaselineInput)
    pub fn builder() -> crate::input::get_default_patch_baseline_input::Builder {
        crate::input::get_default_patch_baseline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDefaultPatchBaseline {
    type Output = std::result::Result<
        crate::output::GetDefaultPatchBaselineOutput,
        crate::error::GetDefaultPatchBaselineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_default_patch_baseline_error(response)
        } else {
            crate::operation_deser::parse_get_default_patch_baseline_response(response)
        }
    }
}

/// <p>Retrieves the current snapshot for the patch baseline the instance uses. This API is
/// primarily used by the <code>AWS-RunPatchBaseline</code> Systems Manager document (SSM document).</p>
/// <note>
/// <p>If you run the command locally, such as with the Command Line Interface (CLI), the system attempts to use your local Amazon Web Services credentials and the operation fails. To avoid
/// this, you can run the command in the Amazon Web Services Systems Manager console. Use Run Command, a capability of
/// Amazon Web Services Systems Manager, with an SSM document that enables you to target an instance with a script or command.
/// For example, run the command using the <code>AWS-RunShellScript</code> document or the
/// <code>AWS-RunPowerShellScript</code> document.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDeployablePatchSnapshotForInstance {
    _private: (),
}
impl GetDeployablePatchSnapshotForInstance {
    /// Creates a new builder-style object to manufacture [`GetDeployablePatchSnapshotForInstanceInput`](crate::input::GetDeployablePatchSnapshotForInstanceInput)
    pub fn builder() -> crate::input::get_deployable_patch_snapshot_for_instance_input::Builder {
        crate::input::get_deployable_patch_snapshot_for_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDeployablePatchSnapshotForInstance {
    type Output = std::result::Result<
        crate::output::GetDeployablePatchSnapshotForInstanceOutput,
        crate::error::GetDeployablePatchSnapshotForInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_deployable_patch_snapshot_for_instance_error(response)
        } else {
            crate::operation_deser::parse_get_deployable_patch_snapshot_for_instance_response(
                response,
            )
        }
    }
}

/// <p>Gets the contents of the specified Amazon Web Services Systems Manager document (SSM document).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDocument {
    _private: (),
}
impl GetDocument {
    /// Creates a new builder-style object to manufacture [`GetDocumentInput`](crate::input::GetDocumentInput)
    pub fn builder() -> crate::input::get_document_input::Builder {
        crate::input::get_document_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDocument {
    type Output =
        std::result::Result<crate::output::GetDocumentOutput, crate::error::GetDocumentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_document_error(response)
        } else {
            crate::operation_deser::parse_get_document_response(response)
        }
    }
}

/// <p>Query inventory information. This includes instance status, such as <code>Stopped</code> or
/// <code>Terminated</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetInventory {
    _private: (),
}
impl GetInventory {
    /// Creates a new builder-style object to manufacture [`GetInventoryInput`](crate::input::GetInventoryInput)
    pub fn builder() -> crate::input::get_inventory_input::Builder {
        crate::input::get_inventory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetInventory {
    type Output =
        std::result::Result<crate::output::GetInventoryOutput, crate::error::GetInventoryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_inventory_error(response)
        } else {
            crate::operation_deser::parse_get_inventory_response(response)
        }
    }
}

/// <p>Return a list of inventory type names for the account, or return a list of attribute names
/// for a specific Inventory item type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetInventorySchema {
    _private: (),
}
impl GetInventorySchema {
    /// Creates a new builder-style object to manufacture [`GetInventorySchemaInput`](crate::input::GetInventorySchemaInput)
    pub fn builder() -> crate::input::get_inventory_schema_input::Builder {
        crate::input::get_inventory_schema_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetInventorySchema {
    type Output = std::result::Result<
        crate::output::GetInventorySchemaOutput,
        crate::error::GetInventorySchemaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_inventory_schema_error(response)
        } else {
            crate::operation_deser::parse_get_inventory_schema_response(response)
        }
    }
}

/// <p>Retrieves a maintenance window.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMaintenanceWindow {
    _private: (),
}
impl GetMaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`GetMaintenanceWindowInput`](crate::input::GetMaintenanceWindowInput)
    pub fn builder() -> crate::input::get_maintenance_window_input::Builder {
        crate::input::get_maintenance_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMaintenanceWindow {
    type Output = std::result::Result<
        crate::output::GetMaintenanceWindowOutput,
        crate::error::GetMaintenanceWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_maintenance_window_error(response)
        } else {
            crate::operation_deser::parse_get_maintenance_window_response(response)
        }
    }
}

/// <p>Retrieves details about a specific a maintenance window execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMaintenanceWindowExecution {
    _private: (),
}
impl GetMaintenanceWindowExecution {
    /// Creates a new builder-style object to manufacture [`GetMaintenanceWindowExecutionInput`](crate::input::GetMaintenanceWindowExecutionInput)
    pub fn builder() -> crate::input::get_maintenance_window_execution_input::Builder {
        crate::input::get_maintenance_window_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMaintenanceWindowExecution {
    type Output = std::result::Result<
        crate::output::GetMaintenanceWindowExecutionOutput,
        crate::error::GetMaintenanceWindowExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_maintenance_window_execution_error(response)
        } else {
            crate::operation_deser::parse_get_maintenance_window_execution_response(response)
        }
    }
}

/// <p>Retrieves the details about a specific task run as part of a maintenance window
/// execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMaintenanceWindowExecutionTask {
    _private: (),
}
impl GetMaintenanceWindowExecutionTask {
    /// Creates a new builder-style object to manufacture [`GetMaintenanceWindowExecutionTaskInput`](crate::input::GetMaintenanceWindowExecutionTaskInput)
    pub fn builder() -> crate::input::get_maintenance_window_execution_task_input::Builder {
        crate::input::get_maintenance_window_execution_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMaintenanceWindowExecutionTask {
    type Output = std::result::Result<
        crate::output::GetMaintenanceWindowExecutionTaskOutput,
        crate::error::GetMaintenanceWindowExecutionTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_maintenance_window_execution_task_error(response)
        } else {
            crate::operation_deser::parse_get_maintenance_window_execution_task_response(response)
        }
    }
}

/// <p>Retrieves information about a specific task running on a specific target.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMaintenanceWindowExecutionTaskInvocation {
    _private: (),
}
impl GetMaintenanceWindowExecutionTaskInvocation {
    /// Creates a new builder-style object to manufacture [`GetMaintenanceWindowExecutionTaskInvocationInput`](crate::input::GetMaintenanceWindowExecutionTaskInvocationInput)
    pub fn builder() -> crate::input::get_maintenance_window_execution_task_invocation_input::Builder
    {
        crate::input::get_maintenance_window_execution_task_invocation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMaintenanceWindowExecutionTaskInvocation {
    type Output = std::result::Result<
        crate::output::GetMaintenanceWindowExecutionTaskInvocationOutput,
        crate::error::GetMaintenanceWindowExecutionTaskInvocationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_maintenance_window_execution_task_invocation_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_maintenance_window_execution_task_invocation_response(
                response,
            )
        }
    }
}

/// <p>Lists the tasks in a maintenance window.</p>
/// <note>
/// <p>For maintenance window tasks without a specified target, you can't supply values for
/// <code>--max-errors</code> and <code>--max-concurrency</code>. Instead, the system inserts a
/// placeholder value of <code>1</code>, which may be reported in the response to this command.
/// These values don't affect the running of your task and can be ignored.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMaintenanceWindowTask {
    _private: (),
}
impl GetMaintenanceWindowTask {
    /// Creates a new builder-style object to manufacture [`GetMaintenanceWindowTaskInput`](crate::input::GetMaintenanceWindowTaskInput)
    pub fn builder() -> crate::input::get_maintenance_window_task_input::Builder {
        crate::input::get_maintenance_window_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMaintenanceWindowTask {
    type Output = std::result::Result<
        crate::output::GetMaintenanceWindowTaskOutput,
        crate::error::GetMaintenanceWindowTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_maintenance_window_task_error(response)
        } else {
            crate::operation_deser::parse_get_maintenance_window_task_response(response)
        }
    }
}

/// <p>Get information about an OpsItem by using the ID. You must have permission in Identity and Access Management (IAM) to view information about an OpsItem. For more information,
/// see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
/// OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
/// <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
/// remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
/// more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the
/// <i>Amazon Web Services Systems Manager User Guide</i>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetOpsItem {
    _private: (),
}
impl GetOpsItem {
    /// Creates a new builder-style object to manufacture [`GetOpsItemInput`](crate::input::GetOpsItemInput)
    pub fn builder() -> crate::input::get_ops_item_input::Builder {
        crate::input::get_ops_item_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetOpsItem {
    type Output =
        std::result::Result<crate::output::GetOpsItemOutput, crate::error::GetOpsItemError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_ops_item_error(response)
        } else {
            crate::operation_deser::parse_get_ops_item_response(response)
        }
    }
}

/// <p>View operational metadata related to an application in Application Manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetOpsMetadata {
    _private: (),
}
impl GetOpsMetadata {
    /// Creates a new builder-style object to manufacture [`GetOpsMetadataInput`](crate::input::GetOpsMetadataInput)
    pub fn builder() -> crate::input::get_ops_metadata_input::Builder {
        crate::input::get_ops_metadata_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetOpsMetadata {
    type Output =
        std::result::Result<crate::output::GetOpsMetadataOutput, crate::error::GetOpsMetadataError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_ops_metadata_error(response)
        } else {
            crate::operation_deser::parse_get_ops_metadata_response(response)
        }
    }
}

/// <p>View a summary of operations metadata (OpsData) based on specified filters and aggregators.
/// OpsData can include information about Amazon Web Services Systems Manager OpsCenter operational workitems (OpsItems) as
/// well as information about any Amazon Web Services resource or service configured to report OpsData to Amazon Web Services Systems Manager
/// Explorer. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetOpsSummary {
    _private: (),
}
impl GetOpsSummary {
    /// Creates a new builder-style object to manufacture [`GetOpsSummaryInput`](crate::input::GetOpsSummaryInput)
    pub fn builder() -> crate::input::get_ops_summary_input::Builder {
        crate::input::get_ops_summary_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetOpsSummary {
    type Output =
        std::result::Result<crate::output::GetOpsSummaryOutput, crate::error::GetOpsSummaryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_ops_summary_error(response)
        } else {
            crate::operation_deser::parse_get_ops_summary_response(response)
        }
    }
}

/// <p>Get information about a single parameter by specifying the parameter name.</p>
/// <note>
/// <p>To get information about more than one parameter at a time, use the <a>GetParameters</a> operation.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetParameter {
    _private: (),
}
impl GetParameter {
    /// Creates a new builder-style object to manufacture [`GetParameterInput`](crate::input::GetParameterInput)
    pub fn builder() -> crate::input::get_parameter_input::Builder {
        crate::input::get_parameter_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetParameter {
    type Output =
        std::result::Result<crate::output::GetParameterOutput, crate::error::GetParameterError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_parameter_error(response)
        } else {
            crate::operation_deser::parse_get_parameter_response(response)
        }
    }
}

/// <p>Retrieves the history of all changes to a parameter.</p>
/// <important>
/// <p>If you change the KMS key alias for the KMS key used to encrypt a parameter, then you must
/// also update the key alias the parameter uses to reference KMS. Otherwise,
/// <code>GetParameterHistory</code> retrieves whatever the original key alias was
/// referencing.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetParameterHistory {
    _private: (),
}
impl GetParameterHistory {
    /// Creates a new builder-style object to manufacture [`GetParameterHistoryInput`](crate::input::GetParameterHistoryInput)
    pub fn builder() -> crate::input::get_parameter_history_input::Builder {
        crate::input::get_parameter_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetParameterHistory {
    type Output = std::result::Result<
        crate::output::GetParameterHistoryOutput,
        crate::error::GetParameterHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_parameter_history_error(response)
        } else {
            crate::operation_deser::parse_get_parameter_history_response(response)
        }
    }
}

/// <p>Get information about one or more parameters by specifying multiple parameter names.</p>
/// <note>
/// <p>To get information about a single parameter, you can use the <a>GetParameter</a>
/// operation instead.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetParameters {
    _private: (),
}
impl GetParameters {
    /// Creates a new builder-style object to manufacture [`GetParametersInput`](crate::input::GetParametersInput)
    pub fn builder() -> crate::input::get_parameters_input::Builder {
        crate::input::get_parameters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetParameters {
    type Output =
        std::result::Result<crate::output::GetParametersOutput, crate::error::GetParametersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_parameters_error(response)
        } else {
            crate::operation_deser::parse_get_parameters_response(response)
        }
    }
}

/// <p>Retrieve information about one or more parameters in a specific hierarchy. </p>
/// <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code>
/// in the request, the response includes information up to the limit specified. The number of items
/// returned, however, can be between zero and the value of <code>MaxResults</code>. If the service
/// reaches an internal limit while processing the results, it stops the operation and returns the
/// matching values up to that point and a <code>NextToken</code>. You can specify the
/// <code>NextToken</code> in a subsequent call to get the next set of results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetParametersByPath {
    _private: (),
}
impl GetParametersByPath {
    /// Creates a new builder-style object to manufacture [`GetParametersByPathInput`](crate::input::GetParametersByPathInput)
    pub fn builder() -> crate::input::get_parameters_by_path_input::Builder {
        crate::input::get_parameters_by_path_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetParametersByPath {
    type Output = std::result::Result<
        crate::output::GetParametersByPathOutput,
        crate::error::GetParametersByPathError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_parameters_by_path_error(response)
        } else {
            crate::operation_deser::parse_get_parameters_by_path_response(response)
        }
    }
}

/// <p>Retrieves information about a patch baseline.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPatchBaseline {
    _private: (),
}
impl GetPatchBaseline {
    /// Creates a new builder-style object to manufacture [`GetPatchBaselineInput`](crate::input::GetPatchBaselineInput)
    pub fn builder() -> crate::input::get_patch_baseline_input::Builder {
        crate::input::get_patch_baseline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPatchBaseline {
    type Output = std::result::Result<
        crate::output::GetPatchBaselineOutput,
        crate::error::GetPatchBaselineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_patch_baseline_error(response)
        } else {
            crate::operation_deser::parse_get_patch_baseline_response(response)
        }
    }
}

/// <p>Retrieves the patch baseline that should be used for the specified patch group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPatchBaselineForPatchGroup {
    _private: (),
}
impl GetPatchBaselineForPatchGroup {
    /// Creates a new builder-style object to manufacture [`GetPatchBaselineForPatchGroupInput`](crate::input::GetPatchBaselineForPatchGroupInput)
    pub fn builder() -> crate::input::get_patch_baseline_for_patch_group_input::Builder {
        crate::input::get_patch_baseline_for_patch_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPatchBaselineForPatchGroup {
    type Output = std::result::Result<
        crate::output::GetPatchBaselineForPatchGroupOutput,
        crate::error::GetPatchBaselineForPatchGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_patch_baseline_for_patch_group_error(response)
        } else {
            crate::operation_deser::parse_get_patch_baseline_for_patch_group_response(response)
        }
    }
}

/// <p>
/// <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
/// defines how a user interacts with or uses a service or a feature of a service. For example, if an
/// Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
/// service team might create a default setting of <code>false</code>. This means the user can't use
/// this feature unless they change the setting to <code>true</code> and intentionally opt in for a
/// paid feature.</p>
/// <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
/// the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
/// but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
/// permission for the setting. Use the <a>UpdateServiceSetting</a> API operation to
/// change the default setting. Or use the <a>ResetServiceSetting</a> to change the value
/// back to the original value defined by the Amazon Web Services service team.</p>
/// <p>Query the current service setting for the Amazon Web Services account. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServiceSetting {
    _private: (),
}
impl GetServiceSetting {
    /// Creates a new builder-style object to manufacture [`GetServiceSettingInput`](crate::input::GetServiceSettingInput)
    pub fn builder() -> crate::input::get_service_setting_input::Builder {
        crate::input::get_service_setting_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServiceSetting {
    type Output = std::result::Result<
        crate::output::GetServiceSettingOutput,
        crate::error::GetServiceSettingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_setting_error(response)
        } else {
            crate::operation_deser::parse_get_service_setting_response(response)
        }
    }
}

/// <p>A parameter label is a user-defined alias to help you manage different versions of a
/// parameter. When you modify a parameter, Amazon Web Services Systems Manager automatically saves a new version and
/// increments the version number by one. A label can help you remember the purpose of a parameter
/// when there are multiple versions. </p>
/// <p>Parameter labels have the following requirements and restrictions.</p>
/// <ul>
/// <li>
/// <p>A version of a parameter can have a maximum of 10 labels.</p>
/// </li>
/// <li>
/// <p>You can't attach the same label to different versions of the same parameter. For example,
/// if version 1 has the label Production, then you can't attach Production to version 2.</p>
/// </li>
/// <li>
/// <p>You can move a label from one version of a parameter to another.</p>
/// </li>
/// <li>
/// <p>You can't create a label when you create a new parameter. You must attach a label to a
/// specific version of a parameter.</p>
/// </li>
/// <li>
/// <p>If you no longer want to use a parameter label, then you can either delete it or move it
/// to a different version of a parameter.</p>
/// </li>
/// <li>
/// <p>A label can have a maximum of 100 characters.</p>
/// </li>
/// <li>
/// <p>Labels can contain letters (case sensitive), numbers, periods (.), hyphens (-), or
/// underscores (_).</p>
/// </li>
/// <li>
/// <p>Labels can't begin with a number, "<code>aws</code>" or "<code>ssm</code>" (not case
/// sensitive). If a label fails to meet these requirements, then the label isn't associated with a
/// parameter and the system displays it in the list of InvalidLabels.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct LabelParameterVersion {
    _private: (),
}
impl LabelParameterVersion {
    /// Creates a new builder-style object to manufacture [`LabelParameterVersionInput`](crate::input::LabelParameterVersionInput)
    pub fn builder() -> crate::input::label_parameter_version_input::Builder {
        crate::input::label_parameter_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for LabelParameterVersion {
    type Output = std::result::Result<
        crate::output::LabelParameterVersionOutput,
        crate::error::LabelParameterVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_label_parameter_version_error(response)
        } else {
            crate::operation_deser::parse_label_parameter_version_response(response)
        }
    }
}

/// <p>Returns all State Manager associations in the current Amazon Web Services account and Amazon Web Services Region. You
/// can limit the results to a specific State Manager association document or instance by specifying
/// a filter. State Manager is a capability of Amazon Web Services Systems Manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssociations {
    _private: (),
}
impl ListAssociations {
    /// Creates a new builder-style object to manufacture [`ListAssociationsInput`](crate::input::ListAssociationsInput)
    pub fn builder() -> crate::input::list_associations_input::Builder {
        crate::input::list_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssociations {
    type Output = std::result::Result<
        crate::output::ListAssociationsOutput,
        crate::error::ListAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_associations_error(response)
        } else {
            crate::operation_deser::parse_list_associations_response(response)
        }
    }
}

/// <p>Retrieves all versions of an association for a specific association ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssociationVersions {
    _private: (),
}
impl ListAssociationVersions {
    /// Creates a new builder-style object to manufacture [`ListAssociationVersionsInput`](crate::input::ListAssociationVersionsInput)
    pub fn builder() -> crate::input::list_association_versions_input::Builder {
        crate::input::list_association_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssociationVersions {
    type Output = std::result::Result<
        crate::output::ListAssociationVersionsOutput,
        crate::error::ListAssociationVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_association_versions_error(response)
        } else {
            crate::operation_deser::parse_list_association_versions_response(response)
        }
    }
}

/// <p>An invocation is copy of a command sent to a specific instance. A command can apply to one
/// or more instances. A command invocation applies to one instance. For example, if a user runs
/// <code>SendCommand</code> against three instances, then a command invocation is created for each
/// requested instance ID. <code>ListCommandInvocations</code> provide status about command
/// execution.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCommandInvocations {
    _private: (),
}
impl ListCommandInvocations {
    /// Creates a new builder-style object to manufacture [`ListCommandInvocationsInput`](crate::input::ListCommandInvocationsInput)
    pub fn builder() -> crate::input::list_command_invocations_input::Builder {
        crate::input::list_command_invocations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCommandInvocations {
    type Output = std::result::Result<
        crate::output::ListCommandInvocationsOutput,
        crate::error::ListCommandInvocationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_command_invocations_error(response)
        } else {
            crate::operation_deser::parse_list_command_invocations_response(response)
        }
    }
}

/// <p>Lists the commands requested by users of the Amazon Web Services account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCommands {
    _private: (),
}
impl ListCommands {
    /// Creates a new builder-style object to manufacture [`ListCommandsInput`](crate::input::ListCommandsInput)
    pub fn builder() -> crate::input::list_commands_input::Builder {
        crate::input::list_commands_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCommands {
    type Output =
        std::result::Result<crate::output::ListCommandsOutput, crate::error::ListCommandsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_commands_error(response)
        } else {
            crate::operation_deser::parse_list_commands_response(response)
        }
    }
}

/// <p>For a specified resource ID, this API operation returns a list of compliance statuses for
/// different resource types. Currently, you can only specify one resource ID per call. List results
/// depend on the criteria specified in the filter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListComplianceItems {
    _private: (),
}
impl ListComplianceItems {
    /// Creates a new builder-style object to manufacture [`ListComplianceItemsInput`](crate::input::ListComplianceItemsInput)
    pub fn builder() -> crate::input::list_compliance_items_input::Builder {
        crate::input::list_compliance_items_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListComplianceItems {
    type Output = std::result::Result<
        crate::output::ListComplianceItemsOutput,
        crate::error::ListComplianceItemsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_compliance_items_error(response)
        } else {
            crate::operation_deser::parse_list_compliance_items_response(response)
        }
    }
}

/// <p>Returns a summary count of compliant and non-compliant resources for a compliance type. For
/// example, this call can return State Manager associations, patches, or custom compliance types
/// according to the filter criteria that you specify.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListComplianceSummaries {
    _private: (),
}
impl ListComplianceSummaries {
    /// Creates a new builder-style object to manufacture [`ListComplianceSummariesInput`](crate::input::ListComplianceSummariesInput)
    pub fn builder() -> crate::input::list_compliance_summaries_input::Builder {
        crate::input::list_compliance_summaries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListComplianceSummaries {
    type Output = std::result::Result<
        crate::output::ListComplianceSummariesOutput,
        crate::error::ListComplianceSummariesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_compliance_summaries_error(response)
        } else {
            crate::operation_deser::parse_list_compliance_summaries_response(response)
        }
    }
}

/// <p>Information about approval reviews for a version of a change template in Change Manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDocumentMetadataHistory {
    _private: (),
}
impl ListDocumentMetadataHistory {
    /// Creates a new builder-style object to manufacture [`ListDocumentMetadataHistoryInput`](crate::input::ListDocumentMetadataHistoryInput)
    pub fn builder() -> crate::input::list_document_metadata_history_input::Builder {
        crate::input::list_document_metadata_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDocumentMetadataHistory {
    type Output = std::result::Result<
        crate::output::ListDocumentMetadataHistoryOutput,
        crate::error::ListDocumentMetadataHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_document_metadata_history_error(response)
        } else {
            crate::operation_deser::parse_list_document_metadata_history_response(response)
        }
    }
}

/// <p>Returns all Systems Manager (SSM) documents in the current Amazon Web Services account and Amazon Web Services Region. You can
/// limit the results of this request by using a filter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDocuments {
    _private: (),
}
impl ListDocuments {
    /// Creates a new builder-style object to manufacture [`ListDocumentsInput`](crate::input::ListDocumentsInput)
    pub fn builder() -> crate::input::list_documents_input::Builder {
        crate::input::list_documents_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDocuments {
    type Output =
        std::result::Result<crate::output::ListDocumentsOutput, crate::error::ListDocumentsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_documents_error(response)
        } else {
            crate::operation_deser::parse_list_documents_response(response)
        }
    }
}

/// <p>List all versions for a document.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDocumentVersions {
    _private: (),
}
impl ListDocumentVersions {
    /// Creates a new builder-style object to manufacture [`ListDocumentVersionsInput`](crate::input::ListDocumentVersionsInput)
    pub fn builder() -> crate::input::list_document_versions_input::Builder {
        crate::input::list_document_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDocumentVersions {
    type Output = std::result::Result<
        crate::output::ListDocumentVersionsOutput,
        crate::error::ListDocumentVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_document_versions_error(response)
        } else {
            crate::operation_deser::parse_list_document_versions_response(response)
        }
    }
}

/// <p>A list of inventory items returned by the request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListInventoryEntries {
    _private: (),
}
impl ListInventoryEntries {
    /// Creates a new builder-style object to manufacture [`ListInventoryEntriesInput`](crate::input::ListInventoryEntriesInput)
    pub fn builder() -> crate::input::list_inventory_entries_input::Builder {
        crate::input::list_inventory_entries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListInventoryEntries {
    type Output = std::result::Result<
        crate::output::ListInventoryEntriesOutput,
        crate::error::ListInventoryEntriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_inventory_entries_error(response)
        } else {
            crate::operation_deser::parse_list_inventory_entries_response(response)
        }
    }
}

/// <p>Returns a list of all OpsItem events in the current Amazon Web Services Region and Amazon Web Services account. You can
/// limit the results to events associated with specific OpsItems by specifying a filter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListOpsItemEvents {
    _private: (),
}
impl ListOpsItemEvents {
    /// Creates a new builder-style object to manufacture [`ListOpsItemEventsInput`](crate::input::ListOpsItemEventsInput)
    pub fn builder() -> crate::input::list_ops_item_events_input::Builder {
        crate::input::list_ops_item_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListOpsItemEvents {
    type Output = std::result::Result<
        crate::output::ListOpsItemEventsOutput,
        crate::error::ListOpsItemEventsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_ops_item_events_error(response)
        } else {
            crate::operation_deser::parse_list_ops_item_events_response(response)
        }
    }
}

/// <p>Lists all related-item resources associated with a Systems Manager OpsCenter OpsItem. OpsCenter is a
/// capability of Amazon Web Services Systems Manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListOpsItemRelatedItems {
    _private: (),
}
impl ListOpsItemRelatedItems {
    /// Creates a new builder-style object to manufacture [`ListOpsItemRelatedItemsInput`](crate::input::ListOpsItemRelatedItemsInput)
    pub fn builder() -> crate::input::list_ops_item_related_items_input::Builder {
        crate::input::list_ops_item_related_items_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListOpsItemRelatedItems {
    type Output = std::result::Result<
        crate::output::ListOpsItemRelatedItemsOutput,
        crate::error::ListOpsItemRelatedItemsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_ops_item_related_items_error(response)
        } else {
            crate::operation_deser::parse_list_ops_item_related_items_response(response)
        }
    }
}

/// <p>Amazon Web Services Systems Manager calls this API operation when displaying all Application Manager OpsMetadata objects or
/// blobs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListOpsMetadata {
    _private: (),
}
impl ListOpsMetadata {
    /// Creates a new builder-style object to manufacture [`ListOpsMetadataInput`](crate::input::ListOpsMetadataInput)
    pub fn builder() -> crate::input::list_ops_metadata_input::Builder {
        crate::input::list_ops_metadata_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListOpsMetadata {
    type Output = std::result::Result<
        crate::output::ListOpsMetadataOutput,
        crate::error::ListOpsMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_ops_metadata_error(response)
        } else {
            crate::operation_deser::parse_list_ops_metadata_response(response)
        }
    }
}

/// <p>Returns a resource-level summary count. The summary includes information about compliant and
/// non-compliant statuses and detailed compliance-item severity counts, according to the filter
/// criteria you specify.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListResourceComplianceSummaries {
    _private: (),
}
impl ListResourceComplianceSummaries {
    /// Creates a new builder-style object to manufacture [`ListResourceComplianceSummariesInput`](crate::input::ListResourceComplianceSummariesInput)
    pub fn builder() -> crate::input::list_resource_compliance_summaries_input::Builder {
        crate::input::list_resource_compliance_summaries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListResourceComplianceSummaries {
    type Output = std::result::Result<
        crate::output::ListResourceComplianceSummariesOutput,
        crate::error::ListResourceComplianceSummariesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_resource_compliance_summaries_error(response)
        } else {
            crate::operation_deser::parse_list_resource_compliance_summaries_response(response)
        }
    }
}

/// <p>Lists your resource data sync configurations. Includes information about the last time a
/// sync attempted to start, the last sync status, and the last time a sync successfully
/// completed.</p>
/// <p>The number of sync configurations might be too large to return using a single call to
/// <code>ListResourceDataSync</code>. You can limit the number of sync configurations returned by
/// using the <code>MaxResults</code> parameter. To determine whether there are more sync
/// configurations to list, check the value of <code>NextToken</code> in the output. If there are
/// more sync configurations to list, you can request them by specifying the <code>NextToken</code>
/// returned in the call to the parameter of a subsequent call. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListResourceDataSync {
    _private: (),
}
impl ListResourceDataSync {
    /// Creates a new builder-style object to manufacture [`ListResourceDataSyncInput`](crate::input::ListResourceDataSyncInput)
    pub fn builder() -> crate::input::list_resource_data_sync_input::Builder {
        crate::input::list_resource_data_sync_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListResourceDataSync {
    type Output = std::result::Result<
        crate::output::ListResourceDataSyncOutput,
        crate::error::ListResourceDataSyncError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_resource_data_sync_error(response)
        } else {
            crate::operation_deser::parse_list_resource_data_sync_response(response)
        }
    }
}

/// <p>Returns a list of the tags assigned to the specified resource.</p>
/// <p>For information about the ID format for each supported resource type, see <a>AddTagsToResource</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Shares a Amazon Web Services Systems Manager document (SSM document)publicly or privately. If you share a document
/// privately, you must specify the Amazon Web Services user account IDs for those people who can use the
/// document. If you share a document publicly, you must specify <i>All</i> as the
/// account ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDocumentPermission {
    _private: (),
}
impl ModifyDocumentPermission {
    /// Creates a new builder-style object to manufacture [`ModifyDocumentPermissionInput`](crate::input::ModifyDocumentPermissionInput)
    pub fn builder() -> crate::input::modify_document_permission_input::Builder {
        crate::input::modify_document_permission_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDocumentPermission {
    type Output = std::result::Result<
        crate::output::ModifyDocumentPermissionOutput,
        crate::error::ModifyDocumentPermissionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_document_permission_error(response)
        } else {
            crate::operation_deser::parse_modify_document_permission_response(response)
        }
    }
}

/// <p>Registers a compliance type and other compliance details on a designated resource. This
/// operation lets you register custom compliance details with a resource. This call overwrites
/// existing compliance information on the resource, so you must provide a full list of compliance
/// items each time that you send the request.</p>
/// <p>ComplianceType can be one of the following:</p>
/// <ul>
/// <li>
/// <p>ExecutionId: The execution ID when the patch, association, or custom compliance item was
/// applied.</p>
/// </li>
/// <li>
/// <p>ExecutionType: Specify patch, association, or Custom:<code>string</code>.</p>
/// </li>
/// <li>
/// <p>ExecutionTime. The time the patch, association, or custom compliance item was applied to
/// the instance.</p>
/// </li>
/// <li>
/// <p>Id: The patch, association, or custom compliance ID.</p>
/// </li>
/// <li>
/// <p>Title: A title.</p>
/// </li>
/// <li>
/// <p>Status: The status of the compliance item. For example, <code>approved</code> for patches,
/// or <code>Failed</code> for associations.</p>
/// </li>
/// <li>
/// <p>Severity: A patch severity. For example, <code>critical</code>.</p>
/// </li>
/// <li>
/// <p>DocumentName: An SSM document name. For example, <code>AWS-RunPatchBaseline</code>.</p>
/// </li>
/// <li>
/// <p>DocumentVersion: An SSM document version number. For example, 4.</p>
/// </li>
/// <li>
/// <p>Classification: A patch classification. For example, <code>security updates</code>.</p>
/// </li>
/// <li>
/// <p>PatchBaselineId: A patch baseline ID.</p>
/// </li>
/// <li>
/// <p>PatchSeverity: A patch severity. For example, <code>Critical</code>.</p>
/// </li>
/// <li>
/// <p>PatchState: A patch state. For example, <code>InstancesWithFailedPatches</code>.</p>
/// </li>
/// <li>
/// <p>PatchGroup: The name of a patch group.</p>
/// </li>
/// <li>
/// <p>InstalledTime: The time the association, patch, or custom compliance item was applied to
/// the resource. Specify the time by using the following format: yyyy-MM-dd'T'HH:mm:ss'Z'</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutComplianceItems {
    _private: (),
}
impl PutComplianceItems {
    /// Creates a new builder-style object to manufacture [`PutComplianceItemsInput`](crate::input::PutComplianceItemsInput)
    pub fn builder() -> crate::input::put_compliance_items_input::Builder {
        crate::input::put_compliance_items_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutComplianceItems {
    type Output = std::result::Result<
        crate::output::PutComplianceItemsOutput,
        crate::error::PutComplianceItemsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_compliance_items_error(response)
        } else {
            crate::operation_deser::parse_put_compliance_items_response(response)
        }
    }
}

/// <p>Bulk update custom inventory items on one more instance. The request adds an inventory item,
/// if it doesn't already exist, or updates an inventory item, if it does exist.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutInventory {
    _private: (),
}
impl PutInventory {
    /// Creates a new builder-style object to manufacture [`PutInventoryInput`](crate::input::PutInventoryInput)
    pub fn builder() -> crate::input::put_inventory_input::Builder {
        crate::input::put_inventory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutInventory {
    type Output =
        std::result::Result<crate::output::PutInventoryOutput, crate::error::PutInventoryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_inventory_error(response)
        } else {
            crate::operation_deser::parse_put_inventory_response(response)
        }
    }
}

/// <p>Add a parameter to the system.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutParameter {
    _private: (),
}
impl PutParameter {
    /// Creates a new builder-style object to manufacture [`PutParameterInput`](crate::input::PutParameterInput)
    pub fn builder() -> crate::input::put_parameter_input::Builder {
        crate::input::put_parameter_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutParameter {
    type Output =
        std::result::Result<crate::output::PutParameterOutput, crate::error::PutParameterError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_parameter_error(response)
        } else {
            crate::operation_deser::parse_put_parameter_response(response)
        }
    }
}

/// <p>Defines the default patch baseline for the relevant operating system.</p>
/// <p>To reset the Amazon Web Services-predefined patch baseline as the default, specify the full patch baseline
/// Amazon Resource Name (ARN) as the baseline ID value. For example, for CentOS, specify
/// <code>arn:aws:ssm:us-east-2:733109147000:patchbaseline/pb-0574b43a65ea646ed</code> instead of
/// <code>pb-0574b43a65ea646ed</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterDefaultPatchBaseline {
    _private: (),
}
impl RegisterDefaultPatchBaseline {
    /// Creates a new builder-style object to manufacture [`RegisterDefaultPatchBaselineInput`](crate::input::RegisterDefaultPatchBaselineInput)
    pub fn builder() -> crate::input::register_default_patch_baseline_input::Builder {
        crate::input::register_default_patch_baseline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterDefaultPatchBaseline {
    type Output = std::result::Result<
        crate::output::RegisterDefaultPatchBaselineOutput,
        crate::error::RegisterDefaultPatchBaselineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_default_patch_baseline_error(response)
        } else {
            crate::operation_deser::parse_register_default_patch_baseline_response(response)
        }
    }
}

/// <p>Registers a patch baseline for a patch group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterPatchBaselineForPatchGroup {
    _private: (),
}
impl RegisterPatchBaselineForPatchGroup {
    /// Creates a new builder-style object to manufacture [`RegisterPatchBaselineForPatchGroupInput`](crate::input::RegisterPatchBaselineForPatchGroupInput)
    pub fn builder() -> crate::input::register_patch_baseline_for_patch_group_input::Builder {
        crate::input::register_patch_baseline_for_patch_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterPatchBaselineForPatchGroup {
    type Output = std::result::Result<
        crate::output::RegisterPatchBaselineForPatchGroupOutput,
        crate::error::RegisterPatchBaselineForPatchGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_patch_baseline_for_patch_group_error(response)
        } else {
            crate::operation_deser::parse_register_patch_baseline_for_patch_group_response(response)
        }
    }
}

/// <p>Registers a target with a maintenance window.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterTargetWithMaintenanceWindow {
    _private: (),
}
impl RegisterTargetWithMaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`RegisterTargetWithMaintenanceWindowInput`](crate::input::RegisterTargetWithMaintenanceWindowInput)
    pub fn builder() -> crate::input::register_target_with_maintenance_window_input::Builder {
        crate::input::register_target_with_maintenance_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterTargetWithMaintenanceWindow {
    type Output = std::result::Result<
        crate::output::RegisterTargetWithMaintenanceWindowOutput,
        crate::error::RegisterTargetWithMaintenanceWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_target_with_maintenance_window_error(response)
        } else {
            crate::operation_deser::parse_register_target_with_maintenance_window_response(response)
        }
    }
}

/// <p>Adds a new task to a maintenance window.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterTaskWithMaintenanceWindow {
    _private: (),
}
impl RegisterTaskWithMaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`RegisterTaskWithMaintenanceWindowInput`](crate::input::RegisterTaskWithMaintenanceWindowInput)
    pub fn builder() -> crate::input::register_task_with_maintenance_window_input::Builder {
        crate::input::register_task_with_maintenance_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterTaskWithMaintenanceWindow {
    type Output = std::result::Result<
        crate::output::RegisterTaskWithMaintenanceWindowOutput,
        crate::error::RegisterTaskWithMaintenanceWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_task_with_maintenance_window_error(response)
        } else {
            crate::operation_deser::parse_register_task_with_maintenance_window_response(response)
        }
    }
}

/// <p>Removes tag keys from the specified resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveTagsFromResource {
    _private: (),
}
impl RemoveTagsFromResource {
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput)
    pub fn builder() -> crate::input::remove_tags_from_resource_input::Builder {
        crate::input::remove_tags_from_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveTagsFromResource {
    type Output = std::result::Result<
        crate::output::RemoveTagsFromResourceOutput,
        crate::error::RemoveTagsFromResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_tags_from_resource_error(response)
        } else {
            crate::operation_deser::parse_remove_tags_from_resource_response(response)
        }
    }
}

/// <p>
/// <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
/// defines how a user interacts with or uses a service or a feature of a service. For example, if an
/// Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
/// service team might create a default setting of "false". This means the user can't use this
/// feature unless they change the setting to "true" and intentionally opt in for a paid
/// feature.</p>
/// <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
/// the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
/// but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
/// permission for the setting. Use the <a>GetServiceSetting</a> API operation to view the
/// current value. Use the <a>UpdateServiceSetting</a> API operation to change the default
/// setting. </p>
/// <p>Reset the service setting for the account to the default value as provisioned by the Amazon Web Services
/// service team. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetServiceSetting {
    _private: (),
}
impl ResetServiceSetting {
    /// Creates a new builder-style object to manufacture [`ResetServiceSettingInput`](crate::input::ResetServiceSettingInput)
    pub fn builder() -> crate::input::reset_service_setting_input::Builder {
        crate::input::reset_service_setting_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetServiceSetting {
    type Output = std::result::Result<
        crate::output::ResetServiceSettingOutput,
        crate::error::ResetServiceSettingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_service_setting_error(response)
        } else {
            crate::operation_deser::parse_reset_service_setting_response(response)
        }
    }
}

/// <p>Reconnects a session to an instance after it has been disconnected. Connections can be
/// resumed for disconnected sessions, but not terminated sessions.</p>
/// <note>
/// <p>This command is primarily for use by client machines to automatically reconnect during
/// intermittent network issues. It isn't intended for any other use.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResumeSession {
    _private: (),
}
impl ResumeSession {
    /// Creates a new builder-style object to manufacture [`ResumeSessionInput`](crate::input::ResumeSessionInput)
    pub fn builder() -> crate::input::resume_session_input::Builder {
        crate::input::resume_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResumeSession {
    type Output =
        std::result::Result<crate::output::ResumeSessionOutput, crate::error::ResumeSessionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_resume_session_error(response)
        } else {
            crate::operation_deser::parse_resume_session_response(response)
        }
    }
}

/// <p>Sends a signal to an Automation execution to change the current behavior or status of the
/// execution. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendAutomationSignal {
    _private: (),
}
impl SendAutomationSignal {
    /// Creates a new builder-style object to manufacture [`SendAutomationSignalInput`](crate::input::SendAutomationSignalInput)
    pub fn builder() -> crate::input::send_automation_signal_input::Builder {
        crate::input::send_automation_signal_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendAutomationSignal {
    type Output = std::result::Result<
        crate::output::SendAutomationSignalOutput,
        crate::error::SendAutomationSignalError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_automation_signal_error(response)
        } else {
            crate::operation_deser::parse_send_automation_signal_response(response)
        }
    }
}

/// <p>Runs commands on one or more managed instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendCommand {
    _private: (),
}
impl SendCommand {
    /// Creates a new builder-style object to manufacture [`SendCommandInput`](crate::input::SendCommandInput)
    pub fn builder() -> crate::input::send_command_input::Builder {
        crate::input::send_command_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendCommand {
    type Output =
        std::result::Result<crate::output::SendCommandOutput, crate::error::SendCommandError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_command_error(response)
        } else {
            crate::operation_deser::parse_send_command_response(response)
        }
    }
}

/// <p>Runs an association immediately and only one time. This operation can be helpful when
/// troubleshooting associations.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartAssociationsOnce {
    _private: (),
}
impl StartAssociationsOnce {
    /// Creates a new builder-style object to manufacture [`StartAssociationsOnceInput`](crate::input::StartAssociationsOnceInput)
    pub fn builder() -> crate::input::start_associations_once_input::Builder {
        crate::input::start_associations_once_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartAssociationsOnce {
    type Output = std::result::Result<
        crate::output::StartAssociationsOnceOutput,
        crate::error::StartAssociationsOnceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_associations_once_error(response)
        } else {
            crate::operation_deser::parse_start_associations_once_response(response)
        }
    }
}

/// <p>Initiates execution of an Automation runbook.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartAutomationExecution {
    _private: (),
}
impl StartAutomationExecution {
    /// Creates a new builder-style object to manufacture [`StartAutomationExecutionInput`](crate::input::StartAutomationExecutionInput)
    pub fn builder() -> crate::input::start_automation_execution_input::Builder {
        crate::input::start_automation_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartAutomationExecution {
    type Output = std::result::Result<
        crate::output::StartAutomationExecutionOutput,
        crate::error::StartAutomationExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_automation_execution_error(response)
        } else {
            crate::operation_deser::parse_start_automation_execution_response(response)
        }
    }
}

/// <p>Creates a change request for Change Manager. The Automation runbooks specified in the
/// change request run only after all required approvals for the change request have been
/// received.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartChangeRequestExecution {
    _private: (),
}
impl StartChangeRequestExecution {
    /// Creates a new builder-style object to manufacture [`StartChangeRequestExecutionInput`](crate::input::StartChangeRequestExecutionInput)
    pub fn builder() -> crate::input::start_change_request_execution_input::Builder {
        crate::input::start_change_request_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartChangeRequestExecution {
    type Output = std::result::Result<
        crate::output::StartChangeRequestExecutionOutput,
        crate::error::StartChangeRequestExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_change_request_execution_error(response)
        } else {
            crate::operation_deser::parse_start_change_request_execution_response(response)
        }
    }
}

/// <p>Initiates a connection to a target (for example, an instance) for a Session Manager session. Returns a
/// URL and token that can be used to open a WebSocket connection for sending input and receiving
/// outputs.</p>
/// <note>
/// <p>Amazon Web Services CLI usage: <code>start-session</code> is an interactive command that requires the Session Manager
/// plugin to be installed on the client machine making the call. For information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html">Install
/// the Session Manager plugin for the Amazon Web Services CLI</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
/// <p>Amazon Web Services Tools for PowerShell usage: Start-SSMSession isn't currently supported by Amazon Web Services Tools
/// for PowerShell on Windows local machines.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartSession {
    _private: (),
}
impl StartSession {
    /// Creates a new builder-style object to manufacture [`StartSessionInput`](crate::input::StartSessionInput)
    pub fn builder() -> crate::input::start_session_input::Builder {
        crate::input::start_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartSession {
    type Output =
        std::result::Result<crate::output::StartSessionOutput, crate::error::StartSessionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_session_error(response)
        } else {
            crate::operation_deser::parse_start_session_response(response)
        }
    }
}

/// <p>Stop an Automation that is currently running.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopAutomationExecution {
    _private: (),
}
impl StopAutomationExecution {
    /// Creates a new builder-style object to manufacture [`StopAutomationExecutionInput`](crate::input::StopAutomationExecutionInput)
    pub fn builder() -> crate::input::stop_automation_execution_input::Builder {
        crate::input::stop_automation_execution_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopAutomationExecution {
    type Output = std::result::Result<
        crate::output::StopAutomationExecutionOutput,
        crate::error::StopAutomationExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_automation_execution_error(response)
        } else {
            crate::operation_deser::parse_stop_automation_execution_response(response)
        }
    }
}

/// <p>Permanently ends a session and closes the data connection between the Session Manager client and
/// SSM Agent on the instance. A terminated session isn't be resumed.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TerminateSession {
    _private: (),
}
impl TerminateSession {
    /// Creates a new builder-style object to manufacture [`TerminateSessionInput`](crate::input::TerminateSessionInput)
    pub fn builder() -> crate::input::terminate_session_input::Builder {
        crate::input::terminate_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TerminateSession {
    type Output = std::result::Result<
        crate::output::TerminateSessionOutput,
        crate::error::TerminateSessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_terminate_session_error(response)
        } else {
            crate::operation_deser::parse_terminate_session_response(response)
        }
    }
}

/// <p>Remove a label or labels from a parameter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnlabelParameterVersion {
    _private: (),
}
impl UnlabelParameterVersion {
    /// Creates a new builder-style object to manufacture [`UnlabelParameterVersionInput`](crate::input::UnlabelParameterVersionInput)
    pub fn builder() -> crate::input::unlabel_parameter_version_input::Builder {
        crate::input::unlabel_parameter_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnlabelParameterVersion {
    type Output = std::result::Result<
        crate::output::UnlabelParameterVersionOutput,
        crate::error::UnlabelParameterVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unlabel_parameter_version_error(response)
        } else {
            crate::operation_deser::parse_unlabel_parameter_version_response(response)
        }
    }
}

/// <p>Updates an association. You can update the association name and version, the document
/// version, schedule, parameters, and Amazon Simple Storage Service (Amazon S3) output. </p>
/// <p>In order to call this API operation, your Identity and Access Management (IAM) user
/// account, group, or role must be configured with permission to call the <a>DescribeAssociation</a> API operation. If you don't have permission to call
/// <code>DescribeAssociation</code>, then you receive the following error: <code>An error occurred
/// (AccessDeniedException) when calling the UpdateAssociation operation: User: <user_arn>
/// isn't authorized to perform: ssm:DescribeAssociation on resource:
/// <resource_arn></code>
/// </p>
/// <important>
/// <p>When you update an association, the association immediately runs against the specified
/// targets.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssociation {
    _private: (),
}
impl UpdateAssociation {
    /// Creates a new builder-style object to manufacture [`UpdateAssociationInput`](crate::input::UpdateAssociationInput)
    pub fn builder() -> crate::input::update_association_input::Builder {
        crate::input::update_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAssociation {
    type Output = std::result::Result<
        crate::output::UpdateAssociationOutput,
        crate::error::UpdateAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_association_error(response)
        } else {
            crate::operation_deser::parse_update_association_response(response)
        }
    }
}

/// <p>Updates the status of the Amazon Web Services Systems Manager document (SSM document) associated with the specified
/// instance.</p>
/// <p>
/// <code>UpdateAssociationStatus</code> is primarily used by the Amazon Web Services Systems Manager Agent (SSM Agent) to
/// report status updates about your associations and is only used for associations created with the
/// <code>InstanceId</code> legacy parameter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssociationStatus {
    _private: (),
}
impl UpdateAssociationStatus {
    /// Creates a new builder-style object to manufacture [`UpdateAssociationStatusInput`](crate::input::UpdateAssociationStatusInput)
    pub fn builder() -> crate::input::update_association_status_input::Builder {
        crate::input::update_association_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAssociationStatus {
    type Output = std::result::Result<
        crate::output::UpdateAssociationStatusOutput,
        crate::error::UpdateAssociationStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_association_status_error(response)
        } else {
            crate::operation_deser::parse_update_association_status_response(response)
        }
    }
}

/// <p>Updates one or more values for an SSM document.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDocument {
    _private: (),
}
impl UpdateDocument {
    /// Creates a new builder-style object to manufacture [`UpdateDocumentInput`](crate::input::UpdateDocumentInput)
    pub fn builder() -> crate::input::update_document_input::Builder {
        crate::input::update_document_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDocument {
    type Output =
        std::result::Result<crate::output::UpdateDocumentOutput, crate::error::UpdateDocumentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_document_error(response)
        } else {
            crate::operation_deser::parse_update_document_response(response)
        }
    }
}

/// <p>Set the default version of a document. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDocumentDefaultVersion {
    _private: (),
}
impl UpdateDocumentDefaultVersion {
    /// Creates a new builder-style object to manufacture [`UpdateDocumentDefaultVersionInput`](crate::input::UpdateDocumentDefaultVersionInput)
    pub fn builder() -> crate::input::update_document_default_version_input::Builder {
        crate::input::update_document_default_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDocumentDefaultVersion {
    type Output = std::result::Result<
        crate::output::UpdateDocumentDefaultVersionOutput,
        crate::error::UpdateDocumentDefaultVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_document_default_version_error(response)
        } else {
            crate::operation_deser::parse_update_document_default_version_response(response)
        }
    }
}

/// <p>Updates information related to approval reviews for a specific version of a change template
/// in Change Manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDocumentMetadata {
    _private: (),
}
impl UpdateDocumentMetadata {
    /// Creates a new builder-style object to manufacture [`UpdateDocumentMetadataInput`](crate::input::UpdateDocumentMetadataInput)
    pub fn builder() -> crate::input::update_document_metadata_input::Builder {
        crate::input::update_document_metadata_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDocumentMetadata {
    type Output = std::result::Result<
        crate::output::UpdateDocumentMetadataOutput,
        crate::error::UpdateDocumentMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_document_metadata_error(response)
        } else {
            crate::operation_deser::parse_update_document_metadata_response(response)
        }
    }
}

/// <p>Updates an existing maintenance window. Only specified parameters are modified.</p>
/// <note>
/// <p>The value you specify for <code>Duration</code> determines the specific end time for the
/// maintenance window based on the time it begins. No maintenance window tasks are permitted to
/// start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>.
/// For example, if the maintenance window starts at 3 PM, the duration is three hours, and the
/// value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start
/// after 5 PM.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMaintenanceWindow {
    _private: (),
}
impl UpdateMaintenanceWindow {
    /// Creates a new builder-style object to manufacture [`UpdateMaintenanceWindowInput`](crate::input::UpdateMaintenanceWindowInput)
    pub fn builder() -> crate::input::update_maintenance_window_input::Builder {
        crate::input::update_maintenance_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateMaintenanceWindow {
    type Output = std::result::Result<
        crate::output::UpdateMaintenanceWindowOutput,
        crate::error::UpdateMaintenanceWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_maintenance_window_error(response)
        } else {
            crate::operation_deser::parse_update_maintenance_window_response(response)
        }
    }
}

/// <p>Modifies the target of an existing maintenance window. You
/// can change the following:</p>
/// <ul>
/// <li>
/// <p>Name</p>
/// </li>
/// <li>
/// <p>Description</p>
/// </li>
/// <li>
/// <p>Owner</p>
/// </li>
/// <li>
/// <p>IDs for an ID target</p>
/// </li>
/// <li>
/// <p>Tags for a Tag target</p>
/// </li>
/// <li>
/// <p>From any supported tag type to another. The three supported tag types are ID target, Tag
/// target, and resource group. For more information, see <a>Target</a>.</p>
/// </li>
/// </ul>
/// <note>
/// <p>If a parameter is null, then the corresponding field isn't modified.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMaintenanceWindowTarget {
    _private: (),
}
impl UpdateMaintenanceWindowTarget {
    /// Creates a new builder-style object to manufacture [`UpdateMaintenanceWindowTargetInput`](crate::input::UpdateMaintenanceWindowTargetInput)
    pub fn builder() -> crate::input::update_maintenance_window_target_input::Builder {
        crate::input::update_maintenance_window_target_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateMaintenanceWindowTarget {
    type Output = std::result::Result<
        crate::output::UpdateMaintenanceWindowTargetOutput,
        crate::error::UpdateMaintenanceWindowTargetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_maintenance_window_target_error(response)
        } else {
            crate::operation_deser::parse_update_maintenance_window_target_response(response)
        }
    }
}

/// <p>Modifies a task assigned to a maintenance window. You can't change the task type, but you
/// can change the following values:</p>
/// <ul>
/// <li>
/// <p>
/// <code>TaskARN</code>. For example, you can change a <code>RUN_COMMAND</code> task from
/// <code>AWS-RunPowerShellScript</code> to <code>AWS-RunShellScript</code>.</p>
/// </li>
/// <li>
/// <p>
/// <code>ServiceRoleArn</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>TaskInvocationParameters</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>Priority</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>MaxConcurrency</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>MaxErrors</code>
/// </p>
/// </li>
/// </ul>
/// <note>
/// <p>One or more targets must be specified for maintenance window Run Command-type tasks.
/// Depending on the task, targets are optional for other maintenance window task types (Automation,
/// Lambda, and Step Functions). For more information about running tasks
/// that don't specify targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">Registering
/// maintenance window tasks without targets</a> in the
/// <i>Amazon Web Services Systems Manager User Guide</i>.</p>
/// </note>
/// <p>If the value for a parameter in <code>UpdateMaintenanceWindowTask</code> is null, then the
/// corresponding field isn't modified. If you set <code>Replace</code> to true, then all fields
/// required by the <a>RegisterTaskWithMaintenanceWindow</a> operation are required for
/// this request. Optional fields that aren't specified are set to null.</p>
/// <important>
/// <p>When you update a maintenance window task that has options specified in
/// <code>TaskInvocationParameters</code>, you must provide again all the
/// <code>TaskInvocationParameters</code> values that you want to retain. The values you don't
/// specify again are removed. For example, suppose that when you registered a Run Command task, you
/// specified <code>TaskInvocationParameters</code> values for <code>Comment</code>,
/// <code>NotificationConfig</code>, and <code>OutputS3BucketName</code>. If you update the
/// maintenance window task and specify only a different <code>OutputS3BucketName</code> value, the
/// values for <code>Comment</code> and <code>NotificationConfig</code> are removed.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMaintenanceWindowTask {
    _private: (),
}
impl UpdateMaintenanceWindowTask {
    /// Creates a new builder-style object to manufacture [`UpdateMaintenanceWindowTaskInput`](crate::input::UpdateMaintenanceWindowTaskInput)
    pub fn builder() -> crate::input::update_maintenance_window_task_input::Builder {
        crate::input::update_maintenance_window_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateMaintenanceWindowTask {
    type Output = std::result::Result<
        crate::output::UpdateMaintenanceWindowTaskOutput,
        crate::error::UpdateMaintenanceWindowTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_maintenance_window_task_error(response)
        } else {
            crate::operation_deser::parse_update_maintenance_window_task_response(response)
        }
    }
}

/// <p>Changes the Identity and Access Management (IAM) role that is assigned to the
/// on-premises instance or virtual machines (VM). IAM roles are first assigned to
/// these hybrid instances during the activation process. For more information, see <a>CreateActivation</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateManagedInstanceRole {
    _private: (),
}
impl UpdateManagedInstanceRole {
    /// Creates a new builder-style object to manufacture [`UpdateManagedInstanceRoleInput`](crate::input::UpdateManagedInstanceRoleInput)
    pub fn builder() -> crate::input::update_managed_instance_role_input::Builder {
        crate::input::update_managed_instance_role_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateManagedInstanceRole {
    type Output = std::result::Result<
        crate::output::UpdateManagedInstanceRoleOutput,
        crate::error::UpdateManagedInstanceRoleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_managed_instance_role_error(response)
        } else {
            crate::operation_deser::parse_update_managed_instance_role_response(response)
        }
    }
}

/// <p>Edit or change an OpsItem. You must have permission in Identity and Access Management (IAM) to update an OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
/// OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
/// <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
/// remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
/// more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the
/// <i>Amazon Web Services Systems Manager User Guide</i>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateOpsItem {
    _private: (),
}
impl UpdateOpsItem {
    /// Creates a new builder-style object to manufacture [`UpdateOpsItemInput`](crate::input::UpdateOpsItemInput)
    pub fn builder() -> crate::input::update_ops_item_input::Builder {
        crate::input::update_ops_item_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateOpsItem {
    type Output =
        std::result::Result<crate::output::UpdateOpsItemOutput, crate::error::UpdateOpsItemError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_ops_item_error(response)
        } else {
            crate::operation_deser::parse_update_ops_item_response(response)
        }
    }
}

/// <p>Amazon Web Services Systems Manager calls this API operation when you edit OpsMetadata in Application Manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateOpsMetadata {
    _private: (),
}
impl UpdateOpsMetadata {
    /// Creates a new builder-style object to manufacture [`UpdateOpsMetadataInput`](crate::input::UpdateOpsMetadataInput)
    pub fn builder() -> crate::input::update_ops_metadata_input::Builder {
        crate::input::update_ops_metadata_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateOpsMetadata {
    type Output = std::result::Result<
        crate::output::UpdateOpsMetadataOutput,
        crate::error::UpdateOpsMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_ops_metadata_error(response)
        } else {
            crate::operation_deser::parse_update_ops_metadata_response(response)
        }
    }
}

/// <p>Modifies an existing patch baseline. Fields not specified in the request are left
/// unchanged.</p>
/// <note>
/// <p>For information about valid key-value pairs in <code>PatchFilters</code> for each supported
/// operating system type, see <a>PatchFilter</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePatchBaseline {
    _private: (),
}
impl UpdatePatchBaseline {
    /// Creates a new builder-style object to manufacture [`UpdatePatchBaselineInput`](crate::input::UpdatePatchBaselineInput)
    pub fn builder() -> crate::input::update_patch_baseline_input::Builder {
        crate::input::update_patch_baseline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdatePatchBaseline {
    type Output = std::result::Result<
        crate::output::UpdatePatchBaselineOutput,
        crate::error::UpdatePatchBaselineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_patch_baseline_error(response)
        } else {
            crate::operation_deser::parse_update_patch_baseline_response(response)
        }
    }
}

/// <p>Update a resource data sync. After you create a resource data sync for a Region, you can't
/// change the account options for that sync. For example, if you create a sync in the us-east-2
/// (Ohio) Region and you choose the <code>Include only the current account</code> option, you can't
/// edit that sync later and choose the <code>Include all accounts from my Organizations
/// configuration</code> option. Instead, you must delete the first resource data sync, and create a
/// new one.</p>
/// <note>
/// <p>This API operation only supports a resource data sync that was created with a
/// SyncFromSource <code>SyncType</code>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateResourceDataSync {
    _private: (),
}
impl UpdateResourceDataSync {
    /// Creates a new builder-style object to manufacture [`UpdateResourceDataSyncInput`](crate::input::UpdateResourceDataSyncInput)
    pub fn builder() -> crate::input::update_resource_data_sync_input::Builder {
        crate::input::update_resource_data_sync_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateResourceDataSync {
    type Output = std::result::Result<
        crate::output::UpdateResourceDataSyncOutput,
        crate::error::UpdateResourceDataSyncError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_resource_data_sync_error(response)
        } else {
            crate::operation_deser::parse_update_resource_data_sync_response(response)
        }
    }
}

/// <p>
/// <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
/// defines how a user interacts with or uses a service or a feature of a service. For example, if an
/// Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
/// service team might create a default setting of "false". This means the user can't use this
/// feature unless they change the setting to "true" and intentionally opt in for a paid
/// feature.</p>
/// <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
/// the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
/// but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
/// permission for the setting. Use the <a>GetServiceSetting</a> API operation to view the
/// current value. Or, use the <a>ResetServiceSetting</a> to change the value back to the
/// original value defined by the Amazon Web Services service team.</p>
/// <p>Update the service setting for the account. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServiceSetting {
    _private: (),
}
impl UpdateServiceSetting {
    /// Creates a new builder-style object to manufacture [`UpdateServiceSettingInput`](crate::input::UpdateServiceSettingInput)
    pub fn builder() -> crate::input::update_service_setting_input::Builder {
        crate::input::update_service_setting_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateServiceSetting {
    type Output = std::result::Result<
        crate::output::UpdateServiceSettingOutput,
        crate::error::UpdateServiceSettingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_service_setting_error(response)
        } else {
            crate::operation_deser::parse_update_service_setting_response(response)
        }
    }
}
