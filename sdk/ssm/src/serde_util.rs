// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn alarm_configuration_correct_errors(
    mut builder: crate::types::builders::AlarmConfigurationBuilder,
) -> crate::types::builders::AlarmConfigurationBuilder {
    if builder.alarms.is_none() {
        builder.alarms = Some(Default::default())
    }
    builder
}

pub(crate) fn logging_info_correct_errors(mut builder: crate::types::builders::LoggingInfoBuilder) -> crate::types::builders::LoggingInfoBuilder {
    if builder.s3_bucket_name.is_none() {
        builder.s3_bucket_name = Some(Default::default())
    }
    if builder.s3_region.is_none() {
        builder.s3_region = Some(Default::default())
    }
    builder
}

pub(crate) fn patch_filter_group_correct_errors(
    mut builder: crate::types::builders::PatchFilterGroupBuilder,
) -> crate::types::builders::PatchFilterGroupBuilder {
    if builder.patch_filters.is_none() {
        builder.patch_filters = Some(Default::default())
    }
    builder
}

pub(crate) fn patch_rule_group_correct_errors(
    mut builder: crate::types::builders::PatchRuleGroupBuilder,
) -> crate::types::builders::PatchRuleGroupBuilder {
    if builder.patch_rules.is_none() {
        builder.patch_rules = Some(Default::default())
    }
    builder
}

pub(crate) fn alarm_state_information_correct_errors(
    mut builder: crate::types::builders::AlarmStateInformationBuilder,
) -> crate::types::builders::AlarmStateInformationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ExternalAlarmState>().ok()
    }
    builder
}

pub(crate) fn association_status_correct_errors(
    mut builder: crate::types::builders::AssociationStatusBuilder,
) -> crate::types::builders::AssociationStatusBuilder {
    if builder.date.is_none() {
        builder.date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::AssociationStatusName>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn document_requires_correct_errors(
    mut builder: crate::types::builders::DocumentRequiresBuilder,
) -> crate::types::builders::DocumentRequiresBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_patch_state_correct_errors(
    mut builder: crate::types::builders::InstancePatchStateBuilder,
) -> crate::types::builders::InstancePatchStateBuilder {
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    if builder.patch_group.is_none() {
        builder.patch_group = Some(Default::default())
    }
    if builder.baseline_id.is_none() {
        builder.baseline_id = Some(Default::default())
    }
    if builder.operation_start_time.is_none() {
        builder.operation_start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.operation_end_time.is_none() {
        builder.operation_end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.operation.is_none() {
        builder.operation = "no value was set".parse::<crate::types::PatchOperationType>().ok()
    }
    builder
}

pub(crate) fn inventory_item_schema_correct_errors(
    mut builder: crate::types::builders::InventoryItemSchemaBuilder,
) -> crate::types::builders::InventoryItemSchemaBuilder {
    if builder.type_name.is_none() {
        builder.type_name = Some(Default::default())
    }
    if builder.attributes.is_none() {
        builder.attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn patch_compliance_data_correct_errors(
    mut builder: crate::types::builders::PatchComplianceDataBuilder,
) -> crate::types::builders::PatchComplianceDataBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.kb_id.is_none() {
        builder.kb_id = Some(Default::default())
    }
    if builder.classification.is_none() {
        builder.classification = Some(Default::default())
    }
    if builder.severity.is_none() {
        builder.severity = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::PatchComplianceDataState>().ok()
    }
    if builder.installed_time.is_none() {
        builder.installed_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn patch_source_correct_errors(mut builder: crate::types::builders::PatchSourceBuilder) -> crate::types::builders::PatchSourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.products.is_none() {
        builder.products = Some(Default::default())
    }
    if builder.configuration.is_none() {
        builder.configuration = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn alarm_correct_errors(mut builder: crate::types::builders::AlarmBuilder) -> crate::types::builders::AlarmBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn compliance_execution_summary_correct_errors(
    mut builder: crate::types::builders::ComplianceExecutionSummaryBuilder,
) -> crate::types::builders::ComplianceExecutionSummaryBuilder {
    if builder.execution_time.is_none() {
        builder.execution_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_association_batch_request_entry_correct_errors(
    mut builder: crate::types::builders::CreateAssociationBatchRequestEntryBuilder,
) -> crate::types::builders::CreateAssociationBatchRequestEntryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn patch_filter_correct_errors(mut builder: crate::types::builders::PatchFilterBuilder) -> crate::types::builders::PatchFilterBuilder {
    if builder.key.is_none() {
        builder.key = "no value was set".parse::<crate::types::PatchFilterKey>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn patch_rule_correct_errors(mut builder: crate::types::builders::PatchRuleBuilder) -> crate::types::builders::PatchRuleBuilder {
    if builder.patch_filter_group.is_none() {
        builder.patch_filter_group = {
            let builder = crate::types::builders::PatchFilterGroupBuilder::default();
            crate::serde_util::patch_filter_group_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn related_ops_item_correct_errors(
    mut builder: crate::types::builders::RelatedOpsItemBuilder,
) -> crate::types::builders::RelatedOpsItemBuilder {
    if builder.ops_item_id.is_none() {
        builder.ops_item_id = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_data_sync_s3_destination_correct_errors(
    mut builder: crate::types::builders::ResourceDataSyncS3DestinationBuilder,
) -> crate::types::builders::ResourceDataSyncS3DestinationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.sync_format.is_none() {
        builder.sync_format = "no value was set".parse::<crate::types::ResourceDataSyncS3Format>().ok()
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    builder
}

pub(crate) fn runbook_correct_errors(mut builder: crate::types::builders::RunbookBuilder) -> crate::types::builders::RunbookBuilder {
    if builder.document_name.is_none() {
        builder.document_name = Some(Default::default())
    }
    builder
}

pub(crate) fn inventory_item_attribute_correct_errors(
    mut builder: crate::types::builders::InventoryItemAttributeBuilder,
) -> crate::types::builders::InventoryItemAttributeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::InventoryAttributeDataType>().ok()
    }
    builder
}

pub(crate) fn inventory_result_item_correct_errors(
    mut builder: crate::types::builders::InventoryResultItemBuilder,
) -> crate::types::builders::InventoryResultItemBuilder {
    if builder.type_name.is_none() {
        builder.type_name = Some(Default::default())
    }
    if builder.schema_version.is_none() {
        builder.schema_version = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_data_sync_aws_organizations_source_correct_errors(
    mut builder: crate::types::builders::ResourceDataSyncAwsOrganizationsSourceBuilder,
) -> crate::types::builders::ResourceDataSyncAwsOrganizationsSourceBuilder {
    if builder.organization_source_type.is_none() {
        builder.organization_source_type = Some(Default::default())
    }
    builder
}
