// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Error returned if an attempt is made to register a patch group with a patch baseline that is already registered with a different patch baseline.</p>
    AlreadyExistsException(crate::error::AlreadyExistsException),
    /// <p>You must disassociate a document from all managed nodes before you can delete it.</p>
    AssociatedInstances(crate::error::AssociatedInstances),
    /// <p>The specified association already exists.</p>
    AssociationAlreadyExists(crate::error::AssociationAlreadyExists),
    /// <p>The specified association doesn't exist.</p>
    AssociationDoesNotExist(crate::error::AssociationDoesNotExist),
    /// <p>The specified execution ID doesn't exist. Verify the ID number and try again.</p>
    AssociationExecutionDoesNotExist(crate::error::AssociationExecutionDoesNotExist),
    /// <p>You can have at most 2,000 active associations.</p>
    AssociationLimitExceeded(crate::error::AssociationLimitExceeded),
    /// <p>You have reached the maximum number versions allowed for an association. Each association has a limit of 1,000 versions. </p>
    AssociationVersionLimitExceeded(crate::error::AssociationVersionLimitExceeded),
    /// <p>Indicates that the Change Manager change template used in the change request was rejected or is still in a pending state.</p>
    AutomationDefinitionNotApprovedException(
        crate::error::AutomationDefinitionNotApprovedException,
    ),
    /// <p>An Automation runbook with the specified name couldn't be found.</p>
    AutomationDefinitionNotFoundException(crate::error::AutomationDefinitionNotFoundException),
    /// <p>An Automation runbook with the specified name and version couldn't be found.</p>
    AutomationDefinitionVersionNotFoundException(
        crate::error::AutomationDefinitionVersionNotFoundException,
    ),
    /// <p>The number of simultaneously running Automation executions exceeded the allowable limit.</p>
    AutomationExecutionLimitExceededException(
        crate::error::AutomationExecutionLimitExceededException,
    ),
    /// <p>There is no automation execution information for the requested automation execution ID.</p>
    AutomationExecutionNotFoundException(crate::error::AutomationExecutionNotFoundException),
    /// <p>The specified step name and execution ID don't exist. Verify the information and try again.</p>
    AutomationStepNotFoundException(crate::error::AutomationStepNotFoundException),
    /// <p>You specified too many custom compliance types. You can specify a maximum of 10 different types. </p>
    ComplianceTypeCountLimitExceededException(
        crate::error::ComplianceTypeCountLimitExceededException,
    ),
    /// <p>You have exceeded the limit for custom schemas. Delete one or more custom schemas and try again.</p>
    CustomSchemaCountLimitExceededException(crate::error::CustomSchemaCountLimitExceededException),
    /// <p>The specified document already exists.</p>
    DocumentAlreadyExists(crate::error::DocumentAlreadyExists),
    /// <p>You can have at most 500 active SSM documents.</p>
    DocumentLimitExceeded(crate::error::DocumentLimitExceeded),
    /// <p>The document can't be shared with more Amazon Web Services user accounts. You can specify a maximum of 20 accounts per API operation to share a private document.</p>
    /// <p>By default, you can share a private document with a maximum of 1,000 accounts and publicly share up to five documents.</p>
    /// <p>If you need to increase the quota for privately or publicly shared Systems Manager documents, contact Amazon Web Services Support.</p>
    DocumentPermissionLimit(crate::error::DocumentPermissionLimit),
    /// <p>The document has too many versions. Delete one or more document versions and try again.</p>
    DocumentVersionLimitExceeded(crate::error::DocumentVersionLimitExceeded),
    /// <p>Error returned when the ID specified for a resource, such as a maintenance window or patch baseline, doesn't exist.</p>
    /// <p>For information about resource quotas in Amazon Web Services Systems Manager, see <a href="https://docs.aws.amazon.com/general/latest/gr/ssm.html#limits_ssm">Systems Manager service quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    DoesNotExistException(crate::error::DoesNotExistException),
    /// <p>The content of the association document matches another document. Change the content of the document and try again.</p>
    DuplicateDocumentContent(crate::error::DuplicateDocumentContent),
    /// <p>The version name has already been used in this document. Specify a different version name, and then try again.</p>
    DuplicateDocumentVersionName(crate::error::DuplicateDocumentVersionName),
    /// <p>You can't specify a managed node ID in more than one association.</p>
    DuplicateInstanceId(crate::error::DuplicateInstanceId),
    /// <p>You attempted to register a <code>LAMBDA</code> or <code>STEP_FUNCTIONS</code> task in a region where the corresponding service isn't available. </p>
    FeatureNotAvailableException(crate::error::FeatureNotAvailableException),
    /// <p>A hierarchy can have a maximum of 15 levels. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-parameter-name-constraints.html">Requirements and constraints for parameter names</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
    HierarchyLevelLimitExceededException(crate::error::HierarchyLevelLimitExceededException),
    /// <p>Parameter Store doesn't support changing a parameter type in a hierarchy. For example, you can't change a parameter from a <code>String</code> type to a <code>SecureString</code> type. You must create a new, unique parameter.</p>
    HierarchyTypeMismatchException(crate::error::HierarchyTypeMismatchException),
    /// <p>Error returned when an idempotent operation is retried and the parameters don't match the original call to the API with the same idempotency token. </p>
    IdempotentParameterMismatch(crate::error::IdempotentParameterMismatch),
    /// <p>There is a conflict in the policies specified for this parameter. You can't, for example, specify two Expiration policies for a parameter. Review your policies, and try again.</p>
    IncompatiblePolicyException(crate::error::IncompatiblePolicyException),
    /// <p>An error occurred on the server side.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>The activation isn't valid. The activation might have been deleted, or the ActivationId and the ActivationCode don't match.</p>
    InvalidActivation(crate::error::InvalidActivation),
    /// <p>The activation ID isn't valid. Verify the you entered the correct ActivationId or ActivationCode and try again.</p>
    InvalidActivationId(crate::error::InvalidActivationId),
    /// <p>The specified aggregator isn't valid for inventory groups. Verify that the aggregator uses a valid inventory type such as <code>AWS:Application</code> or <code>AWS:InstanceInformation</code>.</p>
    InvalidAggregatorException(crate::error::InvalidAggregatorException),
    /// <p>The request doesn't meet the regular expression requirement.</p>
    InvalidAllowedPatternException(crate::error::InvalidAllowedPatternException),
    /// <p>The association isn't valid or doesn't exist. </p>
    InvalidAssociation(crate::error::InvalidAssociation),
    /// <p>The version you specified isn't valid. Use ListAssociationVersions to view all versions of an association according to the association ID. Or, use the <code>$LATEST</code> parameter to view the latest version of the association.</p>
    InvalidAssociationVersion(crate::error::InvalidAssociationVersion),
    /// <p>The supplied parameters for invoking the specified Automation runbook are incorrect. For example, they may not match the set of parameters permitted for the specified Automation document.</p>
    InvalidAutomationExecutionParametersException(
        crate::error::InvalidAutomationExecutionParametersException,
    ),
    /// <p>The signal isn't valid for the current Automation execution.</p>
    InvalidAutomationSignalException(crate::error::InvalidAutomationSignalException),
    /// <p>The specified update status operation isn't valid.</p>
    InvalidAutomationStatusUpdateException(crate::error::InvalidAutomationStatusUpdateException),
    /// <p>The specified command ID isn't valid. Verify the ID and try again.</p>
    InvalidCommandId(crate::error::InvalidCommandId),
    /// <p>One or more of the parameters specified for the delete operation isn't valid. Verify all parameters and try again.</p>
    InvalidDeleteInventoryParametersException(
        crate::error::InvalidDeleteInventoryParametersException,
    ),
    /// <p>The ID specified for the delete operation doesn't exist or isn't valid. Verify the ID and try again.</p>
    InvalidDeletionIdException(crate::error::InvalidDeletionIdException),
    /// <p>The specified SSM document doesn't exist.</p>
    InvalidDocument(crate::error::InvalidDocument),
    /// <p>The content for the document isn't valid.</p>
    InvalidDocumentContent(crate::error::InvalidDocumentContent),
    /// <p>You attempted to delete a document while it is still shared. You must stop sharing the document before you can delete it.</p>
    InvalidDocumentOperation(crate::error::InvalidDocumentOperation),
    /// <p>The version of the document schema isn't supported.</p>
    InvalidDocumentSchemaVersion(crate::error::InvalidDocumentSchemaVersion),
    /// <p>The SSM document type isn't valid. Valid document types are described in the <code>DocumentType</code> property.</p>
    InvalidDocumentType(crate::error::InvalidDocumentType),
    /// <p>The document version isn't valid or doesn't exist.</p>
    InvalidDocumentVersion(crate::error::InvalidDocumentVersion),
    /// <p>The filter name isn't valid. Verify the you entered the correct name and try again.</p>
    InvalidFilter(crate::error::InvalidFilter),
    /// <p>The specified key isn't valid.</p>
    InvalidFilterKey(crate::error::InvalidFilterKey),
    /// <p>The specified filter option isn't valid. Valid options are Equals and BeginsWith. For Path filter, valid options are Recursive and OneLevel.</p>
    InvalidFilterOption(crate::error::InvalidFilterOption),
    /// <p>The filter value isn't valid. Verify the value and try again.</p>
    InvalidFilterValue(crate::error::InvalidFilterValue),
    /// <p>The following problems can cause this exception:</p>
    /// <ul>
    /// <li> <p>You don't have permission to access the managed node.</p> </li>
    /// <li> <p>Amazon Web Services Systems Manager Agent(SSM Agent) isn't running. Verify that SSM Agent is running.</p> </li>
    /// <li> <p>SSM Agent isn't registered with the SSM endpoint. Try reinstalling SSM Agent.</p> </li>
    /// <li> <p>The managed node isn't in valid state. Valid states are: <code>Running</code>, <code>Pending</code>, <code>Stopped</code>, and <code>Stopping</code>. Invalid states are: <code>Shutting-down</code> and <code>Terminated</code>.</p> </li>
    /// </ul>
    InvalidInstanceId(crate::error::InvalidInstanceId),
    /// <p>The specified filter value isn't valid.</p>
    InvalidInstanceInformationFilterValue(crate::error::InvalidInstanceInformationFilterValue),
    /// <p>The specified inventory group isn't valid.</p>
    InvalidInventoryGroupException(crate::error::InvalidInventoryGroupException),
    /// <p>You specified invalid keys or values in the <code>Context</code> attribute for <code>InventoryItem</code>. Verify the keys and values, and try again.</p>
    InvalidInventoryItemContextException(crate::error::InvalidInventoryItemContextException),
    /// <p>The request isn't valid.</p>
    InvalidInventoryRequestException(crate::error::InvalidInventoryRequestException),
    /// <p>One or more content items isn't valid.</p>
    InvalidItemContentException(crate::error::InvalidItemContentException),
    /// <p>The query key ID isn't valid.</p>
    InvalidKeyId(crate::error::InvalidKeyId),
    /// <p>The specified token isn't valid.</p>
    InvalidNextToken(crate::error::InvalidNextToken),
    /// <p>One or more configuration items isn't valid. Verify that a valid Amazon Resource Name (ARN) was provided for an Amazon Simple Notification Service topic.</p>
    InvalidNotificationConfig(crate::error::InvalidNotificationConfig),
    /// <p>The delete inventory option specified isn't valid. Verify the option and try again.</p>
    InvalidOptionException(crate::error::InvalidOptionException),
    /// <p>The S3 bucket doesn't exist.</p>
    InvalidOutputFolder(crate::error::InvalidOutputFolder),
    /// <p>The output location isn't valid or doesn't exist.</p>
    InvalidOutputLocation(crate::error::InvalidOutputLocation),
    /// <p>You must specify values for all required parameters in the Amazon Web Services Systems Manager document (SSM document). You can only supply values to parameters defined in the SSM document.</p>
    InvalidParameters(crate::error::InvalidParameters),
    /// <p>The permission type isn't supported. <i>Share</i> is the only supported permission type.</p>
    InvalidPermissionType(crate::error::InvalidPermissionType),
    /// <p>The plugin name isn't valid.</p>
    InvalidPluginName(crate::error::InvalidPluginName),
    /// <p>A policy attribute or its value is invalid. </p>
    InvalidPolicyAttributeException(crate::error::InvalidPolicyAttributeException),
    /// <p>The policy type isn't supported. Parameter Store supports the following policy types: Expiration, ExpirationNotification, and NoChangeNotification.</p>
    InvalidPolicyTypeException(crate::error::InvalidPolicyTypeException),
    /// <p>The resource ID isn't valid. Verify that you entered the correct ID and try again.</p>
    InvalidResourceId(crate::error::InvalidResourceId),
    /// <p>The resource type isn't valid. For example, if you are attempting to tag an EC2 instance, the instance must be a registered managed node.</p>
    InvalidResourceType(crate::error::InvalidResourceType),
    /// <p>The specified inventory item result attribute isn't valid.</p>
    InvalidResultAttributeException(crate::error::InvalidResultAttributeException),
    /// <p>The role name can't contain invalid characters. Also verify that you specified an IAM role for notifications that includes the required trust policy. For information about configuring the IAM role for Run Command notifications, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/rc-sns-notifications.html">Configuring Amazon SNS Notifications for Run Command</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    InvalidRole(crate::error::InvalidRole),
    /// <p>The schedule is invalid. Verify your cron or rate expression and try again.</p>
    InvalidSchedule(crate::error::InvalidSchedule),
    /// <p>The specified tag key or value isn't valid.</p>
    InvalidTag(crate::error::InvalidTag),
    /// <p>The target isn't valid or doesn't exist. It might not be configured for Systems Manager or you might not have permission to perform the operation.</p>
    InvalidTarget(crate::error::InvalidTarget),
    /// <p>TargetMap parameter isn't valid.</p>
    InvalidTargetMaps(crate::error::InvalidTargetMaps),
    /// <p>The parameter type name isn't valid.</p>
    InvalidTypeNameException(crate::error::InvalidTypeNameException),
    /// <p>The update isn't valid.</p>
    InvalidUpdate(crate::error::InvalidUpdate),
    /// <p>The command ID and managed node ID you specified didn't match any invocations. Verify the command ID and the managed node ID and try again. </p>
    InvocationDoesNotExist(crate::error::InvocationDoesNotExist),
    /// <p>The inventory item has invalid content. </p>
    ItemContentMismatchException(crate::error::ItemContentMismatchException),
    /// <p>The inventory item size has exceeded the size limit.</p>
    ItemSizeLimitExceededException(crate::error::ItemSizeLimitExceededException),
    /// <p>The size limit of a document is 64 KB.</p>
    MaxDocumentSizeExceeded(crate::error::MaxDocumentSizeExceeded),
    /// <p>You don't have permission to view OpsItems in the specified account. Verify that your account is configured either as a Systems Manager delegated administrator or that you are logged into the Organizations management account.</p>
    OpsItemAccessDeniedException(crate::error::OpsItemAccessDeniedException),
    /// <p>The OpsItem already exists.</p>
    OpsItemAlreadyExistsException(crate::error::OpsItemAlreadyExistsException),
    /// <p>A specified parameter argument isn't valid. Verify the available arguments and try again.</p>
    OpsItemInvalidParameterException(crate::error::OpsItemInvalidParameterException),
    /// <p>The request caused OpsItems to exceed one or more quotas. For information about OpsItem quotas, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-learn-more.html#OpsCenter-learn-more-limits">What are the resource limits for OpsCenter?</a>.</p>
    OpsItemLimitExceededException(crate::error::OpsItemLimitExceededException),
    /// <p>The specified OpsItem ID doesn't exist. Verify the ID and try again.</p>
    OpsItemNotFoundException(crate::error::OpsItemNotFoundException),
    /// <p>The Amazon Resource Name (ARN) is already associated with the OpsItem.</p>
    OpsItemRelatedItemAlreadyExistsException(
        crate::error::OpsItemRelatedItemAlreadyExistsException,
    ),
    /// <p>The association wasn't found using the parameters you specified in the call. Verify the information and try again.</p>
    OpsItemRelatedItemAssociationNotFoundException(
        crate::error::OpsItemRelatedItemAssociationNotFoundException,
    ),
    /// <p>An OpsMetadata object already exists for the selected resource.</p>
    OpsMetadataAlreadyExistsException(crate::error::OpsMetadataAlreadyExistsException),
    /// <p>One of the arguments passed is invalid. </p>
    OpsMetadataInvalidArgumentException(crate::error::OpsMetadataInvalidArgumentException),
    /// <p>The OpsMetadata object exceeds the maximum number of OpsMetadata keys that you can assign to an application in Application Manager.</p>
    OpsMetadataKeyLimitExceededException(crate::error::OpsMetadataKeyLimitExceededException),
    /// <p>Your account reached the maximum number of OpsMetadata objects allowed by Application Manager. The maximum is 200 OpsMetadata objects. Delete one or more OpsMetadata object and try again.</p>
    OpsMetadataLimitExceededException(crate::error::OpsMetadataLimitExceededException),
    /// <p>The OpsMetadata object doesn't exist. </p>
    OpsMetadataNotFoundException(crate::error::OpsMetadataNotFoundException),
    /// <p>The system is processing too many concurrent updates. Wait a few moments and try again.</p>
    OpsMetadataTooManyUpdatesException(crate::error::OpsMetadataTooManyUpdatesException),
    /// <p>The parameter already exists. You can't create duplicate parameters.</p>
    ParameterAlreadyExists(crate::error::ParameterAlreadyExists),
    /// <p>You have exceeded the number of parameters for this Amazon Web Services account. Delete one or more parameters and try again.</p>
    ParameterLimitExceeded(crate::error::ParameterLimitExceeded),
    /// <p>Parameter Store retains the 100 most recently created versions of a parameter. After this number of versions has been created, Parameter Store deletes the oldest version when a new one is created. However, if the oldest version has a <i>label</i> attached to it, Parameter Store won't delete the version and instead presents this error message:</p>
    /// <p> <code>An error occurred (ParameterMaxVersionLimitExceeded) when calling the PutParameter operation: You attempted to create a new version of <i>parameter-name</i> by calling the PutParameter API with the overwrite flag. Version <i>version-number</i>, the oldest version, can't be deleted because it has a label associated with it. Move the label to another version of the parameter, and try again.</code> </p>
    /// <p>This safeguard is to prevent parameter versions with mission critical labels assigned to them from being deleted. To continue creating new parameters, first move the label from the oldest version of the parameter to a newer one for use in your operations. For information about moving parameter labels, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-labels.html#sysman-paramstore-labels-console-move">Move a parameter label (console)</a> or <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-labels.html#sysman-paramstore-labels-cli-move">Move a parameter label (CLI)</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
    ParameterMaxVersionLimitExceeded(crate::error::ParameterMaxVersionLimitExceeded),
    /// <p>The parameter couldn't be found. Verify the name and try again.</p>
    ParameterNotFound(crate::error::ParameterNotFound),
    /// <p>The parameter name isn't valid.</p>
    ParameterPatternMismatchException(crate::error::ParameterPatternMismatchException),
    /// <p>A parameter version can have a maximum of ten labels.</p>
    ParameterVersionLabelLimitExceeded(crate::error::ParameterVersionLabelLimitExceeded),
    /// <p>The specified parameter version wasn't found. Verify the parameter name and version, and try again.</p>
    ParameterVersionNotFound(crate::error::ParameterVersionNotFound),
    /// <p>You specified more than the maximum number of allowed policies for the parameter. The maximum is 10.</p>
    PoliciesLimitExceededException(crate::error::PoliciesLimitExceededException),
    /// <p>A sync configuration with the same name already exists.</p>
    ResourceDataSyncAlreadyExistsException(crate::error::ResourceDataSyncAlreadyExistsException),
    /// <p>Another <code>UpdateResourceDataSync</code> request is being processed. Wait a few minutes and try again.</p>
    ResourceDataSyncConflictException(crate::error::ResourceDataSyncConflictException),
    /// <p>You have exceeded the allowed maximum sync configurations.</p>
    ResourceDataSyncCountExceededException(crate::error::ResourceDataSyncCountExceededException),
    /// <p>The specified sync configuration is invalid.</p>
    ResourceDataSyncInvalidConfigurationException(
        crate::error::ResourceDataSyncInvalidConfigurationException,
    ),
    /// <p>The specified sync name wasn't found.</p>
    ResourceDataSyncNotFoundException(crate::error::ResourceDataSyncNotFoundException),
    /// <p>Error returned if an attempt is made to delete a patch baseline that is registered for a patch group.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>Error returned when the caller has exceeded the default resource quotas. For example, too many maintenance windows or patch baselines have been created.</p>
    /// <p>For information about resource quotas in Systems Manager, see <a href="https://docs.aws.amazon.com/general/latest/gr/ssm.html#limits_ssm">Systems Manager service quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
    ResourceLimitExceededException(crate::error::ResourceLimitExceededException),
    /// <p>The hash provided in the call doesn't match the stored hash. This exception is thrown when trying to update an obsolete policy version or when multiple requests to update a policy are sent.</p>
    ResourcePolicyConflictException(crate::error::ResourcePolicyConflictException),
    /// <p>One or more parameters specified for the call aren't valid. Verify the parameters and their values and try again.</p>
    ResourcePolicyInvalidParameterException(crate::error::ResourcePolicyInvalidParameterException),
    /// <p>The <code>PutResourcePolicy</code> API action enforces two limits. A policy can't be greater than 1024 bytes in size. And only one policy can be attached to <code>OpsItemGroup</code>. Verify these limits and try again.</p>
    ResourcePolicyLimitExceededException(crate::error::ResourcePolicyLimitExceededException),
    /// <p>The specified service setting wasn't found. Either the service name or the setting hasn't been provisioned by the Amazon Web Services service team.</p>
    ServiceSettingNotFound(crate::error::ServiceSettingNotFound),
    /// <p>The updated status is the same as the current status.</p>
    StatusUnchanged(crate::error::StatusUnchanged),
    /// <p>The sub-type count exceeded the limit for the inventory type.</p>
    SubTypeCountLimitExceededException(crate::error::SubTypeCountLimitExceededException),
    /// <p>You specified the <code>Safe</code> option for the DeregisterTargetFromMaintenanceWindow operation, but the target is still referenced in a task.</p>
    TargetInUseException(crate::error::TargetInUseException),
    /// <p>The specified target managed node for the session isn't fully configured for use with Session Manager. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-getting-started.html">Getting started with Session Manager</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. This error is also returned if you attempt to start a session on a managed node that is located in a different account or Region</p>
    TargetNotConnected(crate::error::TargetNotConnected),
    /// <p>The <code>Targets</code> parameter includes too many tags. Remove one or more tags and try the command again.</p>
    TooManyTagsError(crate::error::TooManyTagsError),
    /// <p>There are concurrent updates for a resource that supports one update at a time.</p>
    TooManyUpdates(crate::error::TooManyUpdates),
    /// <p>The size of inventory data has exceeded the total size limit for the resource.</p>
    TotalSizeLimitExceededException(crate::error::TotalSizeLimitExceededException),
    /// <p>The calendar entry contained in the specified SSM document isn't supported.</p>
    UnsupportedCalendarException(crate::error::UnsupportedCalendarException),
    /// <p>Patching for applications released by Microsoft is only available on EC2 instances and advanced instances. To patch applications released by Microsoft on on-premises servers and VMs, you must enable advanced instances. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances-advanced.html">Enabling the advanced-instances tier</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
    UnsupportedFeatureRequiredException(crate::error::UnsupportedFeatureRequiredException),
    /// <p>The <code>Context</code> attribute that you specified for the <code>InventoryItem</code> isn't allowed for this inventory type. You can only use the <code>Context</code> attribute with inventory types like <code>AWS:ComplianceItem</code>.</p>
    UnsupportedInventoryItemContextException(
        crate::error::UnsupportedInventoryItemContextException,
    ),
    /// <p>Inventory item type schema version has to match supported versions in the service. Check output of GetInventorySchema to see the available schema version for each type.</p>
    UnsupportedInventorySchemaVersionException(
        crate::error::UnsupportedInventorySchemaVersionException,
    ),
    /// <p>The operating systems you specified isn't supported, or the operation isn't supported for the operating system.</p>
    UnsupportedOperatingSystem(crate::error::UnsupportedOperatingSystem),
    /// <p>The parameter type isn't supported.</p>
    UnsupportedParameterType(crate::error::UnsupportedParameterType),
    /// <p>The document doesn't support the platform type of the given managed node ID(s). For example, you sent an document for a Windows managed node to a Linux node.</p>
    UnsupportedPlatformType(crate::error::UnsupportedPlatformType),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AlreadyExistsException(inner) => inner.fmt(f),
            Error::AssociatedInstances(inner) => inner.fmt(f),
            Error::AssociationAlreadyExists(inner) => inner.fmt(f),
            Error::AssociationDoesNotExist(inner) => inner.fmt(f),
            Error::AssociationExecutionDoesNotExist(inner) => inner.fmt(f),
            Error::AssociationLimitExceeded(inner) => inner.fmt(f),
            Error::AssociationVersionLimitExceeded(inner) => inner.fmt(f),
            Error::AutomationDefinitionNotApprovedException(inner) => inner.fmt(f),
            Error::AutomationDefinitionNotFoundException(inner) => inner.fmt(f),
            Error::AutomationDefinitionVersionNotFoundException(inner) => inner.fmt(f),
            Error::AutomationExecutionLimitExceededException(inner) => inner.fmt(f),
            Error::AutomationExecutionNotFoundException(inner) => inner.fmt(f),
            Error::AutomationStepNotFoundException(inner) => inner.fmt(f),
            Error::ComplianceTypeCountLimitExceededException(inner) => inner.fmt(f),
            Error::CustomSchemaCountLimitExceededException(inner) => inner.fmt(f),
            Error::DocumentAlreadyExists(inner) => inner.fmt(f),
            Error::DocumentLimitExceeded(inner) => inner.fmt(f),
            Error::DocumentPermissionLimit(inner) => inner.fmt(f),
            Error::DocumentVersionLimitExceeded(inner) => inner.fmt(f),
            Error::DoesNotExistException(inner) => inner.fmt(f),
            Error::DuplicateDocumentContent(inner) => inner.fmt(f),
            Error::DuplicateDocumentVersionName(inner) => inner.fmt(f),
            Error::DuplicateInstanceId(inner) => inner.fmt(f),
            Error::FeatureNotAvailableException(inner) => inner.fmt(f),
            Error::HierarchyLevelLimitExceededException(inner) => inner.fmt(f),
            Error::HierarchyTypeMismatchException(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatch(inner) => inner.fmt(f),
            Error::IncompatiblePolicyException(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidActivation(inner) => inner.fmt(f),
            Error::InvalidActivationId(inner) => inner.fmt(f),
            Error::InvalidAggregatorException(inner) => inner.fmt(f),
            Error::InvalidAllowedPatternException(inner) => inner.fmt(f),
            Error::InvalidAssociation(inner) => inner.fmt(f),
            Error::InvalidAssociationVersion(inner) => inner.fmt(f),
            Error::InvalidAutomationExecutionParametersException(inner) => inner.fmt(f),
            Error::InvalidAutomationSignalException(inner) => inner.fmt(f),
            Error::InvalidAutomationStatusUpdateException(inner) => inner.fmt(f),
            Error::InvalidCommandId(inner) => inner.fmt(f),
            Error::InvalidDeleteInventoryParametersException(inner) => inner.fmt(f),
            Error::InvalidDeletionIdException(inner) => inner.fmt(f),
            Error::InvalidDocument(inner) => inner.fmt(f),
            Error::InvalidDocumentContent(inner) => inner.fmt(f),
            Error::InvalidDocumentOperation(inner) => inner.fmt(f),
            Error::InvalidDocumentSchemaVersion(inner) => inner.fmt(f),
            Error::InvalidDocumentType(inner) => inner.fmt(f),
            Error::InvalidDocumentVersion(inner) => inner.fmt(f),
            Error::InvalidFilter(inner) => inner.fmt(f),
            Error::InvalidFilterKey(inner) => inner.fmt(f),
            Error::InvalidFilterOption(inner) => inner.fmt(f),
            Error::InvalidFilterValue(inner) => inner.fmt(f),
            Error::InvalidInstanceId(inner) => inner.fmt(f),
            Error::InvalidInstanceInformationFilterValue(inner) => inner.fmt(f),
            Error::InvalidInventoryGroupException(inner) => inner.fmt(f),
            Error::InvalidInventoryItemContextException(inner) => inner.fmt(f),
            Error::InvalidInventoryRequestException(inner) => inner.fmt(f),
            Error::InvalidItemContentException(inner) => inner.fmt(f),
            Error::InvalidKeyId(inner) => inner.fmt(f),
            Error::InvalidNextToken(inner) => inner.fmt(f),
            Error::InvalidNotificationConfig(inner) => inner.fmt(f),
            Error::InvalidOptionException(inner) => inner.fmt(f),
            Error::InvalidOutputFolder(inner) => inner.fmt(f),
            Error::InvalidOutputLocation(inner) => inner.fmt(f),
            Error::InvalidParameters(inner) => inner.fmt(f),
            Error::InvalidPermissionType(inner) => inner.fmt(f),
            Error::InvalidPluginName(inner) => inner.fmt(f),
            Error::InvalidPolicyAttributeException(inner) => inner.fmt(f),
            Error::InvalidPolicyTypeException(inner) => inner.fmt(f),
            Error::InvalidResourceId(inner) => inner.fmt(f),
            Error::InvalidResourceType(inner) => inner.fmt(f),
            Error::InvalidResultAttributeException(inner) => inner.fmt(f),
            Error::InvalidRole(inner) => inner.fmt(f),
            Error::InvalidSchedule(inner) => inner.fmt(f),
            Error::InvalidTag(inner) => inner.fmt(f),
            Error::InvalidTarget(inner) => inner.fmt(f),
            Error::InvalidTargetMaps(inner) => inner.fmt(f),
            Error::InvalidTypeNameException(inner) => inner.fmt(f),
            Error::InvalidUpdate(inner) => inner.fmt(f),
            Error::InvocationDoesNotExist(inner) => inner.fmt(f),
            Error::ItemContentMismatchException(inner) => inner.fmt(f),
            Error::ItemSizeLimitExceededException(inner) => inner.fmt(f),
            Error::MaxDocumentSizeExceeded(inner) => inner.fmt(f),
            Error::OpsItemAccessDeniedException(inner) => inner.fmt(f),
            Error::OpsItemAlreadyExistsException(inner) => inner.fmt(f),
            Error::OpsItemInvalidParameterException(inner) => inner.fmt(f),
            Error::OpsItemLimitExceededException(inner) => inner.fmt(f),
            Error::OpsItemNotFoundException(inner) => inner.fmt(f),
            Error::OpsItemRelatedItemAlreadyExistsException(inner) => inner.fmt(f),
            Error::OpsItemRelatedItemAssociationNotFoundException(inner) => inner.fmt(f),
            Error::OpsMetadataAlreadyExistsException(inner) => inner.fmt(f),
            Error::OpsMetadataInvalidArgumentException(inner) => inner.fmt(f),
            Error::OpsMetadataKeyLimitExceededException(inner) => inner.fmt(f),
            Error::OpsMetadataLimitExceededException(inner) => inner.fmt(f),
            Error::OpsMetadataNotFoundException(inner) => inner.fmt(f),
            Error::OpsMetadataTooManyUpdatesException(inner) => inner.fmt(f),
            Error::ParameterAlreadyExists(inner) => inner.fmt(f),
            Error::ParameterLimitExceeded(inner) => inner.fmt(f),
            Error::ParameterMaxVersionLimitExceeded(inner) => inner.fmt(f),
            Error::ParameterNotFound(inner) => inner.fmt(f),
            Error::ParameterPatternMismatchException(inner) => inner.fmt(f),
            Error::ParameterVersionLabelLimitExceeded(inner) => inner.fmt(f),
            Error::ParameterVersionNotFound(inner) => inner.fmt(f),
            Error::PoliciesLimitExceededException(inner) => inner.fmt(f),
            Error::ResourceDataSyncAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceDataSyncConflictException(inner) => inner.fmt(f),
            Error::ResourceDataSyncCountExceededException(inner) => inner.fmt(f),
            Error::ResourceDataSyncInvalidConfigurationException(inner) => inner.fmt(f),
            Error::ResourceDataSyncNotFoundException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ResourcePolicyConflictException(inner) => inner.fmt(f),
            Error::ResourcePolicyInvalidParameterException(inner) => inner.fmt(f),
            Error::ResourcePolicyLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceSettingNotFound(inner) => inner.fmt(f),
            Error::StatusUnchanged(inner) => inner.fmt(f),
            Error::SubTypeCountLimitExceededException(inner) => inner.fmt(f),
            Error::TargetInUseException(inner) => inner.fmt(f),
            Error::TargetNotConnected(inner) => inner.fmt(f),
            Error::TooManyTagsError(inner) => inner.fmt(f),
            Error::TooManyUpdates(inner) => inner.fmt(f),
            Error::TotalSizeLimitExceededException(inner) => inner.fmt(f),
            Error::UnsupportedCalendarException(inner) => inner.fmt(f),
            Error::UnsupportedFeatureRequiredException(inner) => inner.fmt(f),
            Error::UnsupportedInventoryItemContextException(inner) => inner.fmt(f),
            Error::UnsupportedInventorySchemaVersionException(inner) => inner.fmt(f),
            Error::UnsupportedOperatingSystem(inner) => inner.fmt(f),
            Error::UnsupportedParameterType(inner) => inner.fmt(f),
            Error::UnsupportedPlatformType(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToResourceError> for Error {
    fn from(err: crate::error::AddTagsToResourceError) -> Self {
        match err {
            crate::error::AddTagsToResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AddTagsToResourceError::InvalidResourceId(inner) => {
                Error::InvalidResourceId(inner)
            }
            crate::error::AddTagsToResourceError::InvalidResourceType(inner) => {
                Error::InvalidResourceType(inner)
            }
            crate::error::AddTagsToResourceError::TooManyTagsError(inner) => {
                Error::TooManyTagsError(inner)
            }
            crate::error::AddTagsToResourceError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateOpsItemRelatedItemError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateOpsItemRelatedItemError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateOpsItemRelatedItemError> for Error {
    fn from(err: crate::error::AssociateOpsItemRelatedItemError) -> Self {
        match err {
            crate::error::AssociateOpsItemRelatedItemError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::AssociateOpsItemRelatedItemError::OpsItemInvalidParameterException(inner) => Error::OpsItemInvalidParameterException(inner),
            crate::error::AssociateOpsItemRelatedItemError::OpsItemLimitExceededException(inner) => Error::OpsItemLimitExceededException(inner),
            crate::error::AssociateOpsItemRelatedItemError::OpsItemNotFoundException(inner) => Error::OpsItemNotFoundException(inner),
            crate::error::AssociateOpsItemRelatedItemError::OpsItemRelatedItemAlreadyExistsException(inner) => Error::OpsItemRelatedItemAlreadyExistsException(inner),
            crate::error::AssociateOpsItemRelatedItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelCommandError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelCommandError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelCommandError> for Error {
    fn from(err: crate::error::CancelCommandError) -> Self {
        match err {
            crate::error::CancelCommandError::DuplicateInstanceId(inner) => {
                Error::DuplicateInstanceId(inner)
            }
            crate::error::CancelCommandError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CancelCommandError::InvalidCommandId(inner) => {
                Error::InvalidCommandId(inner)
            }
            crate::error::CancelCommandError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::CancelCommandError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CancelMaintenanceWindowExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CancelMaintenanceWindowExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelMaintenanceWindowExecutionError> for Error {
    fn from(err: crate::error::CancelMaintenanceWindowExecutionError) -> Self {
        match err {
            crate::error::CancelMaintenanceWindowExecutionError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::CancelMaintenanceWindowExecutionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CancelMaintenanceWindowExecutionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateActivationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateActivationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateActivationError> for Error {
    fn from(err: crate::error::CreateActivationError) -> Self {
        match err {
            crate::error::CreateActivationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateActivationError::InvalidParameters(inner) => {
                Error::InvalidParameters(inner)
            }
            crate::error::CreateActivationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAssociationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAssociationError> for Error {
    fn from(err: crate::error::CreateAssociationError) -> Self {
        match err {
            crate::error::CreateAssociationError::AssociationAlreadyExists(inner) => {
                Error::AssociationAlreadyExists(inner)
            }
            crate::error::CreateAssociationError::AssociationLimitExceeded(inner) => {
                Error::AssociationLimitExceeded(inner)
            }
            crate::error::CreateAssociationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateAssociationError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::CreateAssociationError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::CreateAssociationError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::CreateAssociationError::InvalidOutputLocation(inner) => {
                Error::InvalidOutputLocation(inner)
            }
            crate::error::CreateAssociationError::InvalidParameters(inner) => {
                Error::InvalidParameters(inner)
            }
            crate::error::CreateAssociationError::InvalidSchedule(inner) => {
                Error::InvalidSchedule(inner)
            }
            crate::error::CreateAssociationError::InvalidTag(inner) => Error::InvalidTag(inner),
            crate::error::CreateAssociationError::InvalidTarget(inner) => {
                Error::InvalidTarget(inner)
            }
            crate::error::CreateAssociationError::InvalidTargetMaps(inner) => {
                Error::InvalidTargetMaps(inner)
            }
            crate::error::CreateAssociationError::UnsupportedPlatformType(inner) => {
                Error::UnsupportedPlatformType(inner)
            }
            crate::error::CreateAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAssociationBatchError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAssociationBatchError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAssociationBatchError> for Error {
    fn from(err: crate::error::CreateAssociationBatchError) -> Self {
        match err {
            crate::error::CreateAssociationBatchError::AssociationLimitExceeded(inner) => {
                Error::AssociationLimitExceeded(inner)
            }
            crate::error::CreateAssociationBatchError::DuplicateInstanceId(inner) => {
                Error::DuplicateInstanceId(inner)
            }
            crate::error::CreateAssociationBatchError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateAssociationBatchError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::CreateAssociationBatchError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::CreateAssociationBatchError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::CreateAssociationBatchError::InvalidOutputLocation(inner) => {
                Error::InvalidOutputLocation(inner)
            }
            crate::error::CreateAssociationBatchError::InvalidParameters(inner) => {
                Error::InvalidParameters(inner)
            }
            crate::error::CreateAssociationBatchError::InvalidSchedule(inner) => {
                Error::InvalidSchedule(inner)
            }
            crate::error::CreateAssociationBatchError::InvalidTarget(inner) => {
                Error::InvalidTarget(inner)
            }
            crate::error::CreateAssociationBatchError::InvalidTargetMaps(inner) => {
                Error::InvalidTargetMaps(inner)
            }
            crate::error::CreateAssociationBatchError::UnsupportedPlatformType(inner) => {
                Error::UnsupportedPlatformType(inner)
            }
            crate::error::CreateAssociationBatchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDocumentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDocumentError> for Error {
    fn from(err: crate::error::CreateDocumentError) -> Self {
        match err {
            crate::error::CreateDocumentError::DocumentAlreadyExists(inner) => {
                Error::DocumentAlreadyExists(inner)
            }
            crate::error::CreateDocumentError::DocumentLimitExceeded(inner) => {
                Error::DocumentLimitExceeded(inner)
            }
            crate::error::CreateDocumentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateDocumentError::InvalidDocumentContent(inner) => {
                Error::InvalidDocumentContent(inner)
            }
            crate::error::CreateDocumentError::InvalidDocumentSchemaVersion(inner) => {
                Error::InvalidDocumentSchemaVersion(inner)
            }
            crate::error::CreateDocumentError::MaxDocumentSizeExceeded(inner) => {
                Error::MaxDocumentSizeExceeded(inner)
            }
            crate::error::CreateDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMaintenanceWindowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateMaintenanceWindowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMaintenanceWindowError> for Error {
    fn from(err: crate::error::CreateMaintenanceWindowError) -> Self {
        match err {
            crate::error::CreateMaintenanceWindowError::IdempotentParameterMismatch(inner) => {
                Error::IdempotentParameterMismatch(inner)
            }
            crate::error::CreateMaintenanceWindowError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateMaintenanceWindowError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateMaintenanceWindowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOpsItemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateOpsItemError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOpsItemError> for Error {
    fn from(err: crate::error::CreateOpsItemError) -> Self {
        match err {
            crate::error::CreateOpsItemError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateOpsItemError::OpsItemAccessDeniedException(inner) => {
                Error::OpsItemAccessDeniedException(inner)
            }
            crate::error::CreateOpsItemError::OpsItemAlreadyExistsException(inner) => {
                Error::OpsItemAlreadyExistsException(inner)
            }
            crate::error::CreateOpsItemError::OpsItemInvalidParameterException(inner) => {
                Error::OpsItemInvalidParameterException(inner)
            }
            crate::error::CreateOpsItemError::OpsItemLimitExceededException(inner) => {
                Error::OpsItemLimitExceededException(inner)
            }
            crate::error::CreateOpsItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOpsMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateOpsMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOpsMetadataError> for Error {
    fn from(err: crate::error::CreateOpsMetadataError) -> Self {
        match err {
            crate::error::CreateOpsMetadataError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateOpsMetadataError::OpsMetadataAlreadyExistsException(inner) => {
                Error::OpsMetadataAlreadyExistsException(inner)
            }
            crate::error::CreateOpsMetadataError::OpsMetadataInvalidArgumentException(inner) => {
                Error::OpsMetadataInvalidArgumentException(inner)
            }
            crate::error::CreateOpsMetadataError::OpsMetadataLimitExceededException(inner) => {
                Error::OpsMetadataLimitExceededException(inner)
            }
            crate::error::CreateOpsMetadataError::OpsMetadataTooManyUpdatesException(inner) => {
                Error::OpsMetadataTooManyUpdatesException(inner)
            }
            crate::error::CreateOpsMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePatchBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePatchBaselineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePatchBaselineError> for Error {
    fn from(err: crate::error::CreatePatchBaselineError) -> Self {
        match err {
            crate::error::CreatePatchBaselineError::IdempotentParameterMismatch(inner) => {
                Error::IdempotentParameterMismatch(inner)
            }
            crate::error::CreatePatchBaselineError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreatePatchBaselineError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreatePatchBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResourceDataSyncError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateResourceDataSyncError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResourceDataSyncError> for Error {
    fn from(err: crate::error::CreateResourceDataSyncError) -> Self {
        match err {
            crate::error::CreateResourceDataSyncError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::CreateResourceDataSyncError::ResourceDataSyncAlreadyExistsException(inner) => Error::ResourceDataSyncAlreadyExistsException(inner),
            crate::error::CreateResourceDataSyncError::ResourceDataSyncCountExceededException(inner) => Error::ResourceDataSyncCountExceededException(inner),
            crate::error::CreateResourceDataSyncError::ResourceDataSyncInvalidConfigurationException(inner) => Error::ResourceDataSyncInvalidConfigurationException(inner),
            crate::error::CreateResourceDataSyncError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteActivationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteActivationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteActivationError> for Error {
    fn from(err: crate::error::DeleteActivationError) -> Self {
        match err {
            crate::error::DeleteActivationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteActivationError::InvalidActivation(inner) => {
                Error::InvalidActivation(inner)
            }
            crate::error::DeleteActivationError::InvalidActivationId(inner) => {
                Error::InvalidActivationId(inner)
            }
            crate::error::DeleteActivationError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::DeleteActivationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAssociationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAssociationError> for Error {
    fn from(err: crate::error::DeleteAssociationError) -> Self {
        match err {
            crate::error::DeleteAssociationError::AssociationDoesNotExist(inner) => {
                Error::AssociationDoesNotExist(inner)
            }
            crate::error::DeleteAssociationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteAssociationError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::DeleteAssociationError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::DeleteAssociationError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::DeleteAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDocumentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDocumentError> for Error {
    fn from(err: crate::error::DeleteDocumentError) -> Self {
        match err {
            crate::error::DeleteDocumentError::AssociatedInstances(inner) => {
                Error::AssociatedInstances(inner)
            }
            crate::error::DeleteDocumentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteDocumentError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::DeleteDocumentError::InvalidDocumentOperation(inner) => {
                Error::InvalidDocumentOperation(inner)
            }
            crate::error::DeleteDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInventoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteInventoryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInventoryError> for Error {
    fn from(err: crate::error::DeleteInventoryError) -> Self {
        match err {
            crate::error::DeleteInventoryError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteInventoryError::InvalidDeleteInventoryParametersException(
                inner,
            ) => Error::InvalidDeleteInventoryParametersException(inner),
            crate::error::DeleteInventoryError::InvalidInventoryRequestException(inner) => {
                Error::InvalidInventoryRequestException(inner)
            }
            crate::error::DeleteInventoryError::InvalidOptionException(inner) => {
                Error::InvalidOptionException(inner)
            }
            crate::error::DeleteInventoryError::InvalidTypeNameException(inner) => {
                Error::InvalidTypeNameException(inner)
            }
            crate::error::DeleteInventoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMaintenanceWindowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteMaintenanceWindowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMaintenanceWindowError> for Error {
    fn from(err: crate::error::DeleteMaintenanceWindowError) -> Self {
        match err {
            crate::error::DeleteMaintenanceWindowError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteMaintenanceWindowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOpsMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteOpsMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOpsMetadataError> for Error {
    fn from(err: crate::error::DeleteOpsMetadataError) -> Self {
        match err {
            crate::error::DeleteOpsMetadataError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteOpsMetadataError::OpsMetadataInvalidArgumentException(inner) => {
                Error::OpsMetadataInvalidArgumentException(inner)
            }
            crate::error::DeleteOpsMetadataError::OpsMetadataNotFoundException(inner) => {
                Error::OpsMetadataNotFoundException(inner)
            }
            crate::error::DeleteOpsMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteParameterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteParameterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteParameterError> for Error {
    fn from(err: crate::error::DeleteParameterError) -> Self {
        match err {
            crate::error::DeleteParameterError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteParameterError::ParameterNotFound(inner) => {
                Error::ParameterNotFound(inner)
            }
            crate::error::DeleteParameterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteParametersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteParametersError> for Error {
    fn from(err: crate::error::DeleteParametersError) -> Self {
        match err {
            crate::error::DeleteParametersError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePatchBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeletePatchBaselineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePatchBaselineError> for Error {
    fn from(err: crate::error::DeletePatchBaselineError) -> Self {
        match err {
            crate::error::DeletePatchBaselineError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeletePatchBaselineError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeletePatchBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourceDataSyncError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResourceDataSyncError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourceDataSyncError> for Error {
    fn from(err: crate::error::DeleteResourceDataSyncError) -> Self {
        match err {
            crate::error::DeleteResourceDataSyncError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DeleteResourceDataSyncError::ResourceDataSyncInvalidConfigurationException(inner) => Error::ResourceDataSyncInvalidConfigurationException(inner),
            crate::error::DeleteResourceDataSyncError::ResourceDataSyncNotFoundException(inner) => Error::ResourceDataSyncNotFoundException(inner),
            crate::error::DeleteResourceDataSyncError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourcePolicyError> for Error {
    fn from(err: crate::error::DeleteResourcePolicyError) -> Self {
        match err {
            crate::error::DeleteResourcePolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteResourcePolicyError::ResourcePolicyConflictException(inner) => {
                Error::ResourcePolicyConflictException(inner)
            }
            crate::error::DeleteResourcePolicyError::ResourcePolicyInvalidParameterException(
                inner,
            ) => Error::ResourcePolicyInvalidParameterException(inner),
            crate::error::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterManagedInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterManagedInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterManagedInstanceError> for Error {
    fn from(err: crate::error::DeregisterManagedInstanceError) -> Self {
        match err {
            crate::error::DeregisterManagedInstanceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeregisterManagedInstanceError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::DeregisterManagedInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeregisterPatchBaselineForPatchGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeregisterPatchBaselineForPatchGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterPatchBaselineForPatchGroupError> for Error {
    fn from(err: crate::error::DeregisterPatchBaselineForPatchGroupError) -> Self {
        match err {
            crate::error::DeregisterPatchBaselineForPatchGroupError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeregisterPatchBaselineForPatchGroupError::InvalidResourceId(inner) => {
                Error::InvalidResourceId(inner)
            }
            crate::error::DeregisterPatchBaselineForPatchGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeregisterTargetFromMaintenanceWindowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeregisterTargetFromMaintenanceWindowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterTargetFromMaintenanceWindowError> for Error {
    fn from(err: crate::error::DeregisterTargetFromMaintenanceWindowError) -> Self {
        match err {
            crate::error::DeregisterTargetFromMaintenanceWindowError::DoesNotExistException(
                inner,
            ) => Error::DoesNotExistException(inner),
            crate::error::DeregisterTargetFromMaintenanceWindowError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::error::DeregisterTargetFromMaintenanceWindowError::TargetInUseException(
                inner,
            ) => Error::TargetInUseException(inner),
            crate::error::DeregisterTargetFromMaintenanceWindowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeregisterTaskFromMaintenanceWindowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeregisterTaskFromMaintenanceWindowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterTaskFromMaintenanceWindowError> for Error {
    fn from(err: crate::error::DeregisterTaskFromMaintenanceWindowError) -> Self {
        match err {
            crate::error::DeregisterTaskFromMaintenanceWindowError::DoesNotExistException(
                inner,
            ) => Error::DoesNotExistException(inner),
            crate::error::DeregisterTaskFromMaintenanceWindowError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeregisterTaskFromMaintenanceWindowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeActivationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeActivationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeActivationsError> for Error {
    fn from(err: crate::error::DescribeActivationsError) -> Self {
        match err {
            crate::error::DescribeActivationsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeActivationsError::InvalidFilter(inner) => {
                Error::InvalidFilter(inner)
            }
            crate::error::DescribeActivationsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeActivationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAssociationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAssociationError> for Error {
    fn from(err: crate::error::DescribeAssociationError) -> Self {
        match err {
            crate::error::DescribeAssociationError::AssociationDoesNotExist(inner) => {
                Error::AssociationDoesNotExist(inner)
            }
            crate::error::DescribeAssociationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeAssociationError::InvalidAssociationVersion(inner) => {
                Error::InvalidAssociationVersion(inner)
            }
            crate::error::DescribeAssociationError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::DescribeAssociationError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::DescribeAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAssociationExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAssociationExecutionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAssociationExecutionsError> for Error {
    fn from(err: crate::error::DescribeAssociationExecutionsError) -> Self {
        match err {
            crate::error::DescribeAssociationExecutionsError::AssociationDoesNotExist(inner) => {
                Error::AssociationDoesNotExist(inner)
            }
            crate::error::DescribeAssociationExecutionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeAssociationExecutionsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeAssociationExecutionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeAssociationExecutionTargetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAssociationExecutionTargetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAssociationExecutionTargetsError> for Error {
    fn from(err: crate::error::DescribeAssociationExecutionTargetsError) -> Self {
        match err {
            crate::error::DescribeAssociationExecutionTargetsError::AssociationDoesNotExist(inner) => Error::AssociationDoesNotExist(inner),
            crate::error::DescribeAssociationExecutionTargetsError::AssociationExecutionDoesNotExist(inner) => Error::AssociationExecutionDoesNotExist(inner),
            crate::error::DescribeAssociationExecutionTargetsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DescribeAssociationExecutionTargetsError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::error::DescribeAssociationExecutionTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAutomationExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAutomationExecutionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAutomationExecutionsError> for Error {
    fn from(err: crate::error::DescribeAutomationExecutionsError) -> Self {
        match err {
            crate::error::DescribeAutomationExecutionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeAutomationExecutionsError::InvalidFilterKey(inner) => {
                Error::InvalidFilterKey(inner)
            }
            crate::error::DescribeAutomationExecutionsError::InvalidFilterValue(inner) => {
                Error::InvalidFilterValue(inner)
            }
            crate::error::DescribeAutomationExecutionsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeAutomationExecutionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeAutomationStepExecutionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAutomationStepExecutionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAutomationStepExecutionsError> for Error {
    fn from(err: crate::error::DescribeAutomationStepExecutionsError) -> Self {
        match err {
            crate::error::DescribeAutomationStepExecutionsError::AutomationExecutionNotFoundException(inner) => Error::AutomationExecutionNotFoundException(inner),
            crate::error::DescribeAutomationStepExecutionsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DescribeAutomationStepExecutionsError::InvalidFilterKey(inner) => Error::InvalidFilterKey(inner),
            crate::error::DescribeAutomationStepExecutionsError::InvalidFilterValue(inner) => Error::InvalidFilterValue(inner),
            crate::error::DescribeAutomationStepExecutionsError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::error::DescribeAutomationStepExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAvailablePatchesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAvailablePatchesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAvailablePatchesError> for Error {
    fn from(err: crate::error::DescribeAvailablePatchesError) -> Self {
        match err {
            crate::error::DescribeAvailablePatchesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeAvailablePatchesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDocumentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDocumentError> for Error {
    fn from(err: crate::error::DescribeDocumentError) -> Self {
        match err {
            crate::error::DescribeDocumentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeDocumentError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::DescribeDocumentError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::DescribeDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDocumentPermissionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDocumentPermissionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDocumentPermissionError> for Error {
    fn from(err: crate::error::DescribeDocumentPermissionError) -> Self {
        match err {
            crate::error::DescribeDocumentPermissionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeDocumentPermissionError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::DescribeDocumentPermissionError::InvalidDocumentOperation(inner) => {
                Error::InvalidDocumentOperation(inner)
            }
            crate::error::DescribeDocumentPermissionError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeDocumentPermissionError::InvalidPermissionType(inner) => {
                Error::InvalidPermissionType(inner)
            }
            crate::error::DescribeDocumentPermissionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeEffectiveInstanceAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEffectiveInstanceAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEffectiveInstanceAssociationsError> for Error {
    fn from(err: crate::error::DescribeEffectiveInstanceAssociationsError) -> Self {
        match err {
            crate::error::DescribeEffectiveInstanceAssociationsError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::error::DescribeEffectiveInstanceAssociationsError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::DescribeEffectiveInstanceAssociationsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeEffectiveInstanceAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeEffectivePatchesForPatchBaselineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEffectivePatchesForPatchBaselineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEffectivePatchesForPatchBaselineError> for Error {
    fn from(err: crate::error::DescribeEffectivePatchesForPatchBaselineError) -> Self {
        match err {
            crate::error::DescribeEffectivePatchesForPatchBaselineError::DoesNotExistException(inner) => Error::DoesNotExistException(inner),
            crate::error::DescribeEffectivePatchesForPatchBaselineError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DescribeEffectivePatchesForPatchBaselineError::InvalidResourceId(inner) => Error::InvalidResourceId(inner),
            crate::error::DescribeEffectivePatchesForPatchBaselineError::UnsupportedOperatingSystem(inner) => Error::UnsupportedOperatingSystem(inner),
            crate::error::DescribeEffectivePatchesForPatchBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeInstanceAssociationsStatusError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeInstanceAssociationsStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstanceAssociationsStatusError> for Error {
    fn from(err: crate::error::DescribeInstanceAssociationsStatusError) -> Self {
        match err {
            crate::error::DescribeInstanceAssociationsStatusError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeInstanceAssociationsStatusError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::DescribeInstanceAssociationsStatusError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeInstanceAssociationsStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInstanceInformationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInstanceInformationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstanceInformationError> for Error {
    fn from(err: crate::error::DescribeInstanceInformationError) -> Self {
        match err {
            crate::error::DescribeInstanceInformationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DescribeInstanceInformationError::InvalidFilterKey(inner) => Error::InvalidFilterKey(inner),
            crate::error::DescribeInstanceInformationError::InvalidInstanceId(inner) => Error::InvalidInstanceId(inner),
            crate::error::DescribeInstanceInformationError::InvalidInstanceInformationFilterValue(inner) => Error::InvalidInstanceInformationFilterValue(inner),
            crate::error::DescribeInstanceInformationError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::error::DescribeInstanceInformationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInstancePatchesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInstancePatchesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstancePatchesError> for Error {
    fn from(err: crate::error::DescribeInstancePatchesError) -> Self {
        match err {
            crate::error::DescribeInstancePatchesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeInstancePatchesError::InvalidFilter(inner) => {
                Error::InvalidFilter(inner)
            }
            crate::error::DescribeInstancePatchesError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::DescribeInstancePatchesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeInstancePatchesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInstancePatchStatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInstancePatchStatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstancePatchStatesError> for Error {
    fn from(err: crate::error::DescribeInstancePatchStatesError) -> Self {
        match err {
            crate::error::DescribeInstancePatchStatesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeInstancePatchStatesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeInstancePatchStatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeInstancePatchStatesForPatchGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeInstancePatchStatesForPatchGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstancePatchStatesForPatchGroupError> for Error {
    fn from(err: crate::error::DescribeInstancePatchStatesForPatchGroupError) -> Self {
        match err {
            crate::error::DescribeInstancePatchStatesForPatchGroupError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::error::DescribeInstancePatchStatesForPatchGroupError::InvalidFilter(inner) => {
                Error::InvalidFilter(inner)
            }
            crate::error::DescribeInstancePatchStatesForPatchGroupError::InvalidNextToken(
                inner,
            ) => Error::InvalidNextToken(inner),
            crate::error::DescribeInstancePatchStatesForPatchGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInventoryDeletionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInventoryDeletionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInventoryDeletionsError> for Error {
    fn from(err: crate::error::DescribeInventoryDeletionsError) -> Self {
        match err {
            crate::error::DescribeInventoryDeletionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeInventoryDeletionsError::InvalidDeletionIdException(inner) => {
                Error::InvalidDeletionIdException(inner)
            }
            crate::error::DescribeInventoryDeletionsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeInventoryDeletionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowExecutionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowExecutionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMaintenanceWindowExecutionsError> for Error {
    fn from(err: crate::error::DescribeMaintenanceWindowExecutionsError) -> Self {
        match err {
            crate::error::DescribeMaintenanceWindowExecutionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeMaintenanceWindowExecutionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError> for Error {
    fn from(err: crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError) -> Self {
        match err {
            crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError::DoesNotExistException(inner) => Error::DoesNotExistException(inner),
            crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DescribeMaintenanceWindowExecutionTaskInvocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowExecutionTasksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowExecutionTasksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMaintenanceWindowExecutionTasksError> for Error {
    fn from(err: crate::error::DescribeMaintenanceWindowExecutionTasksError) -> Self {
        match err {
            crate::error::DescribeMaintenanceWindowExecutionTasksError::DoesNotExistException(
                inner,
            ) => Error::DoesNotExistException(inner),
            crate::error::DescribeMaintenanceWindowExecutionTasksError::InternalServerError(
                inner,
            ) => Error::InternalServerError(inner),
            crate::error::DescribeMaintenanceWindowExecutionTasksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMaintenanceWindowsError> for Error {
    fn from(err: crate::error::DescribeMaintenanceWindowsError) -> Self {
        match err {
            crate::error::DescribeMaintenanceWindowsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeMaintenanceWindowsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowScheduleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMaintenanceWindowScheduleError> for Error {
    fn from(err: crate::error::DescribeMaintenanceWindowScheduleError) -> Self {
        match err {
            crate::error::DescribeMaintenanceWindowScheduleError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::DescribeMaintenanceWindowScheduleError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeMaintenanceWindowScheduleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowsForTargetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowsForTargetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMaintenanceWindowsForTargetError> for Error {
    fn from(err: crate::error::DescribeMaintenanceWindowsForTargetError) -> Self {
        match err {
            crate::error::DescribeMaintenanceWindowsForTargetError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeMaintenanceWindowsForTargetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowTargetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMaintenanceWindowTargetsError> for Error {
    fn from(err: crate::error::DescribeMaintenanceWindowTargetsError) -> Self {
        match err {
            crate::error::DescribeMaintenanceWindowTargetsError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::DescribeMaintenanceWindowTargetsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeMaintenanceWindowTargetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeMaintenanceWindowTasksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeMaintenanceWindowTasksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMaintenanceWindowTasksError> for Error {
    fn from(err: crate::error::DescribeMaintenanceWindowTasksError) -> Self {
        match err {
            crate::error::DescribeMaintenanceWindowTasksError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::DescribeMaintenanceWindowTasksError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeMaintenanceWindowTasksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeOpsItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeOpsItemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOpsItemsError> for Error {
    fn from(err: crate::error::DescribeOpsItemsError) -> Self {
        match err {
            crate::error::DescribeOpsItemsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeOpsItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeParametersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeParametersError> for Error {
    fn from(err: crate::error::DescribeParametersError) -> Self {
        match err {
            crate::error::DescribeParametersError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeParametersError::InvalidFilterKey(inner) => {
                Error::InvalidFilterKey(inner)
            }
            crate::error::DescribeParametersError::InvalidFilterOption(inner) => {
                Error::InvalidFilterOption(inner)
            }
            crate::error::DescribeParametersError::InvalidFilterValue(inner) => {
                Error::InvalidFilterValue(inner)
            }
            crate::error::DescribeParametersError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePatchBaselinesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePatchBaselinesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePatchBaselinesError> for Error {
    fn from(err: crate::error::DescribePatchBaselinesError) -> Self {
        match err {
            crate::error::DescribePatchBaselinesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribePatchBaselinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePatchGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePatchGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePatchGroupsError> for Error {
    fn from(err: crate::error::DescribePatchGroupsError) -> Self {
        match err {
            crate::error::DescribePatchGroupsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribePatchGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePatchGroupStateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePatchGroupStateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePatchGroupStateError> for Error {
    fn from(err: crate::error::DescribePatchGroupStateError) -> Self {
        match err {
            crate::error::DescribePatchGroupStateError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribePatchGroupStateError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribePatchGroupStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePatchPropertiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePatchPropertiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePatchPropertiesError> for Error {
    fn from(err: crate::error::DescribePatchPropertiesError) -> Self {
        match err {
            crate::error::DescribePatchPropertiesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribePatchPropertiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSessionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSessionsError> for Error {
    fn from(err: crate::error::DescribeSessionsError) -> Self {
        match err {
            crate::error::DescribeSessionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeSessionsError::InvalidFilterKey(inner) => {
                Error::InvalidFilterKey(inner)
            }
            crate::error::DescribeSessionsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisassociateOpsItemRelatedItemError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateOpsItemRelatedItemError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateOpsItemRelatedItemError> for Error {
    fn from(err: crate::error::DisassociateOpsItemRelatedItemError) -> Self {
        match err {
            crate::error::DisassociateOpsItemRelatedItemError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DisassociateOpsItemRelatedItemError::OpsItemInvalidParameterException(inner) => Error::OpsItemInvalidParameterException(inner),
            crate::error::DisassociateOpsItemRelatedItemError::OpsItemNotFoundException(inner) => Error::OpsItemNotFoundException(inner),
            crate::error::DisassociateOpsItemRelatedItemError::OpsItemRelatedItemAssociationNotFoundException(inner) => Error::OpsItemRelatedItemAssociationNotFoundException(inner),
            crate::error::DisassociateOpsItemRelatedItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAutomationExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAutomationExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAutomationExecutionError> for Error {
    fn from(err: crate::error::GetAutomationExecutionError) -> Self {
        match err {
            crate::error::GetAutomationExecutionError::AutomationExecutionNotFoundException(
                inner,
            ) => Error::AutomationExecutionNotFoundException(inner),
            crate::error::GetAutomationExecutionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetAutomationExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCalendarStateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCalendarStateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCalendarStateError> for Error {
    fn from(err: crate::error::GetCalendarStateError) -> Self {
        match err {
            crate::error::GetCalendarStateError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetCalendarStateError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::GetCalendarStateError::InvalidDocumentType(inner) => {
                Error::InvalidDocumentType(inner)
            }
            crate::error::GetCalendarStateError::UnsupportedCalendarException(inner) => {
                Error::UnsupportedCalendarException(inner)
            }
            crate::error::GetCalendarStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCommandInvocationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCommandInvocationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCommandInvocationError> for Error {
    fn from(err: crate::error::GetCommandInvocationError) -> Self {
        match err {
            crate::error::GetCommandInvocationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetCommandInvocationError::InvalidCommandId(inner) => {
                Error::InvalidCommandId(inner)
            }
            crate::error::GetCommandInvocationError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::GetCommandInvocationError::InvalidPluginName(inner) => {
                Error::InvalidPluginName(inner)
            }
            crate::error::GetCommandInvocationError::InvocationDoesNotExist(inner) => {
                Error::InvocationDoesNotExist(inner)
            }
            crate::error::GetCommandInvocationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConnectionStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetConnectionStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConnectionStatusError> for Error {
    fn from(err: crate::error::GetConnectionStatusError) -> Self {
        match err {
            crate::error::GetConnectionStatusError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetConnectionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDefaultPatchBaselineError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDefaultPatchBaselineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDefaultPatchBaselineError> for Error {
    fn from(err: crate::error::GetDefaultPatchBaselineError) -> Self {
        match err {
            crate::error::GetDefaultPatchBaselineError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetDefaultPatchBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetDeployablePatchSnapshotForInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetDeployablePatchSnapshotForInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDeployablePatchSnapshotForInstanceError> for Error {
    fn from(err: crate::error::GetDeployablePatchSnapshotForInstanceError) -> Self {
        match err {
            crate::error::GetDeployablePatchSnapshotForInstanceError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::GetDeployablePatchSnapshotForInstanceError::UnsupportedFeatureRequiredException(inner) => Error::UnsupportedFeatureRequiredException(inner),
            crate::error::GetDeployablePatchSnapshotForInstanceError::UnsupportedOperatingSystem(inner) => Error::UnsupportedOperatingSystem(inner),
            crate::error::GetDeployablePatchSnapshotForInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDocumentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDocumentError> for Error {
    fn from(err: crate::error::GetDocumentError) -> Self {
        match err {
            crate::error::GetDocumentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetDocumentError::InvalidDocument(inner) => Error::InvalidDocument(inner),
            crate::error::GetDocumentError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::GetDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInventoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetInventoryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInventoryError> for Error {
    fn from(err: crate::error::GetInventoryError) -> Self {
        match err {
            crate::error::GetInventoryError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetInventoryError::InvalidAggregatorException(inner) => {
                Error::InvalidAggregatorException(inner)
            }
            crate::error::GetInventoryError::InvalidFilter(inner) => Error::InvalidFilter(inner),
            crate::error::GetInventoryError::InvalidInventoryGroupException(inner) => {
                Error::InvalidInventoryGroupException(inner)
            }
            crate::error::GetInventoryError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::GetInventoryError::InvalidResultAttributeException(inner) => {
                Error::InvalidResultAttributeException(inner)
            }
            crate::error::GetInventoryError::InvalidTypeNameException(inner) => {
                Error::InvalidTypeNameException(inner)
            }
            crate::error::GetInventoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInventorySchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInventorySchemaError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInventorySchemaError> for Error {
    fn from(err: crate::error::GetInventorySchemaError) -> Self {
        match err {
            crate::error::GetInventorySchemaError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetInventorySchemaError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::GetInventorySchemaError::InvalidTypeNameException(inner) => {
                Error::InvalidTypeNameException(inner)
            }
            crate::error::GetInventorySchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMaintenanceWindowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMaintenanceWindowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMaintenanceWindowError> for Error {
    fn from(err: crate::error::GetMaintenanceWindowError) -> Self {
        match err {
            crate::error::GetMaintenanceWindowError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::GetMaintenanceWindowError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetMaintenanceWindowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMaintenanceWindowExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMaintenanceWindowExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMaintenanceWindowExecutionError> for Error {
    fn from(err: crate::error::GetMaintenanceWindowExecutionError) -> Self {
        match err {
            crate::error::GetMaintenanceWindowExecutionError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::GetMaintenanceWindowExecutionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetMaintenanceWindowExecutionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetMaintenanceWindowExecutionTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetMaintenanceWindowExecutionTaskError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMaintenanceWindowExecutionTaskError> for Error {
    fn from(err: crate::error::GetMaintenanceWindowExecutionTaskError) -> Self {
        match err {
            crate::error::GetMaintenanceWindowExecutionTaskError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::GetMaintenanceWindowExecutionTaskError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetMaintenanceWindowExecutionTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetMaintenanceWindowExecutionTaskInvocationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetMaintenanceWindowExecutionTaskInvocationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMaintenanceWindowExecutionTaskInvocationError> for Error {
    fn from(err: crate::error::GetMaintenanceWindowExecutionTaskInvocationError) -> Self {
        match err {
            crate::error::GetMaintenanceWindowExecutionTaskInvocationError::DoesNotExistException(inner) => Error::DoesNotExistException(inner),
            crate::error::GetMaintenanceWindowExecutionTaskInvocationError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::GetMaintenanceWindowExecutionTaskInvocationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMaintenanceWindowTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMaintenanceWindowTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMaintenanceWindowTaskError> for Error {
    fn from(err: crate::error::GetMaintenanceWindowTaskError) -> Self {
        match err {
            crate::error::GetMaintenanceWindowTaskError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::GetMaintenanceWindowTaskError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetMaintenanceWindowTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOpsItemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetOpsItemError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOpsItemError> for Error {
    fn from(err: crate::error::GetOpsItemError) -> Self {
        match err {
            crate::error::GetOpsItemError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetOpsItemError::OpsItemAccessDeniedException(inner) => {
                Error::OpsItemAccessDeniedException(inner)
            }
            crate::error::GetOpsItemError::OpsItemNotFoundException(inner) => {
                Error::OpsItemNotFoundException(inner)
            }
            crate::error::GetOpsItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOpsMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetOpsMetadataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOpsMetadataError> for Error {
    fn from(err: crate::error::GetOpsMetadataError) -> Self {
        match err {
            crate::error::GetOpsMetadataError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetOpsMetadataError::OpsMetadataInvalidArgumentException(inner) => {
                Error::OpsMetadataInvalidArgumentException(inner)
            }
            crate::error::GetOpsMetadataError::OpsMetadataNotFoundException(inner) => {
                Error::OpsMetadataNotFoundException(inner)
            }
            crate::error::GetOpsMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOpsSummaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetOpsSummaryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOpsSummaryError> for Error {
    fn from(err: crate::error::GetOpsSummaryError) -> Self {
        match err {
            crate::error::GetOpsSummaryError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetOpsSummaryError::InvalidAggregatorException(inner) => {
                Error::InvalidAggregatorException(inner)
            }
            crate::error::GetOpsSummaryError::InvalidFilter(inner) => Error::InvalidFilter(inner),
            crate::error::GetOpsSummaryError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::GetOpsSummaryError::InvalidTypeNameException(inner) => {
                Error::InvalidTypeNameException(inner)
            }
            crate::error::GetOpsSummaryError::ResourceDataSyncNotFoundException(inner) => {
                Error::ResourceDataSyncNotFoundException(inner)
            }
            crate::error::GetOpsSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetParameterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetParameterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetParameterError> for Error {
    fn from(err: crate::error::GetParameterError) -> Self {
        match err {
            crate::error::GetParameterError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetParameterError::InvalidKeyId(inner) => Error::InvalidKeyId(inner),
            crate::error::GetParameterError::ParameterNotFound(inner) => {
                Error::ParameterNotFound(inner)
            }
            crate::error::GetParameterError::ParameterVersionNotFound(inner) => {
                Error::ParameterVersionNotFound(inner)
            }
            crate::error::GetParameterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetParameterHistoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetParameterHistoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetParameterHistoryError> for Error {
    fn from(err: crate::error::GetParameterHistoryError) -> Self {
        match err {
            crate::error::GetParameterHistoryError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetParameterHistoryError::InvalidKeyId(inner) => {
                Error::InvalidKeyId(inner)
            }
            crate::error::GetParameterHistoryError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::GetParameterHistoryError::ParameterNotFound(inner) => {
                Error::ParameterNotFound(inner)
            }
            crate::error::GetParameterHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetParametersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetParametersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetParametersError> for Error {
    fn from(err: crate::error::GetParametersError) -> Self {
        match err {
            crate::error::GetParametersError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetParametersError::InvalidKeyId(inner) => Error::InvalidKeyId(inner),
            crate::error::GetParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetParametersByPathError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetParametersByPathError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetParametersByPathError> for Error {
    fn from(err: crate::error::GetParametersByPathError) -> Self {
        match err {
            crate::error::GetParametersByPathError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetParametersByPathError::InvalidFilterKey(inner) => {
                Error::InvalidFilterKey(inner)
            }
            crate::error::GetParametersByPathError::InvalidFilterOption(inner) => {
                Error::InvalidFilterOption(inner)
            }
            crate::error::GetParametersByPathError::InvalidFilterValue(inner) => {
                Error::InvalidFilterValue(inner)
            }
            crate::error::GetParametersByPathError::InvalidKeyId(inner) => {
                Error::InvalidKeyId(inner)
            }
            crate::error::GetParametersByPathError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::GetParametersByPathError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPatchBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPatchBaselineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPatchBaselineError> for Error {
    fn from(err: crate::error::GetPatchBaselineError) -> Self {
        match err {
            crate::error::GetPatchBaselineError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::GetPatchBaselineError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetPatchBaselineError::InvalidResourceId(inner) => {
                Error::InvalidResourceId(inner)
            }
            crate::error::GetPatchBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPatchBaselineForPatchGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPatchBaselineForPatchGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPatchBaselineForPatchGroupError> for Error {
    fn from(err: crate::error::GetPatchBaselineForPatchGroupError) -> Self {
        match err {
            crate::error::GetPatchBaselineForPatchGroupError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetPatchBaselineForPatchGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResourcePoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResourcePoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResourcePoliciesError> for Error {
    fn from(err: crate::error::GetResourcePoliciesError) -> Self {
        match err {
            crate::error::GetResourcePoliciesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetResourcePoliciesError::ResourcePolicyInvalidParameterException(
                inner,
            ) => Error::ResourcePolicyInvalidParameterException(inner),
            crate::error::GetResourcePoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServiceSettingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetServiceSettingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceSettingError> for Error {
    fn from(err: crate::error::GetServiceSettingError) -> Self {
        match err {
            crate::error::GetServiceSettingError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetServiceSettingError::ServiceSettingNotFound(inner) => {
                Error::ServiceSettingNotFound(inner)
            }
            crate::error::GetServiceSettingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::LabelParameterVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::LabelParameterVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::LabelParameterVersionError> for Error {
    fn from(err: crate::error::LabelParameterVersionError) -> Self {
        match err {
            crate::error::LabelParameterVersionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::LabelParameterVersionError::ParameterNotFound(inner) => {
                Error::ParameterNotFound(inner)
            }
            crate::error::LabelParameterVersionError::ParameterVersionLabelLimitExceeded(inner) => {
                Error::ParameterVersionLabelLimitExceeded(inner)
            }
            crate::error::LabelParameterVersionError::ParameterVersionNotFound(inner) => {
                Error::ParameterVersionNotFound(inner)
            }
            crate::error::LabelParameterVersionError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::LabelParameterVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssociationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAssociationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssociationsError> for Error {
    fn from(err: crate::error::ListAssociationsError) -> Self {
        match err {
            crate::error::ListAssociationsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListAssociationsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssociationVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAssociationVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssociationVersionsError> for Error {
    fn from(err: crate::error::ListAssociationVersionsError) -> Self {
        match err {
            crate::error::ListAssociationVersionsError::AssociationDoesNotExist(inner) => {
                Error::AssociationDoesNotExist(inner)
            }
            crate::error::ListAssociationVersionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListAssociationVersionsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListAssociationVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCommandInvocationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCommandInvocationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCommandInvocationsError> for Error {
    fn from(err: crate::error::ListCommandInvocationsError) -> Self {
        match err {
            crate::error::ListCommandInvocationsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListCommandInvocationsError::InvalidCommandId(inner) => {
                Error::InvalidCommandId(inner)
            }
            crate::error::ListCommandInvocationsError::InvalidFilterKey(inner) => {
                Error::InvalidFilterKey(inner)
            }
            crate::error::ListCommandInvocationsError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::ListCommandInvocationsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListCommandInvocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCommandsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListCommandsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCommandsError> for Error {
    fn from(err: crate::error::ListCommandsError) -> Self {
        match err {
            crate::error::ListCommandsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListCommandsError::InvalidCommandId(inner) => {
                Error::InvalidCommandId(inner)
            }
            crate::error::ListCommandsError::InvalidFilterKey(inner) => {
                Error::InvalidFilterKey(inner)
            }
            crate::error::ListCommandsError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::ListCommandsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListCommandsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListComplianceItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListComplianceItemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListComplianceItemsError> for Error {
    fn from(err: crate::error::ListComplianceItemsError) -> Self {
        match err {
            crate::error::ListComplianceItemsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListComplianceItemsError::InvalidFilter(inner) => {
                Error::InvalidFilter(inner)
            }
            crate::error::ListComplianceItemsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListComplianceItemsError::InvalidResourceId(inner) => {
                Error::InvalidResourceId(inner)
            }
            crate::error::ListComplianceItemsError::InvalidResourceType(inner) => {
                Error::InvalidResourceType(inner)
            }
            crate::error::ListComplianceItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListComplianceSummariesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListComplianceSummariesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListComplianceSummariesError> for Error {
    fn from(err: crate::error::ListComplianceSummariesError) -> Self {
        match err {
            crate::error::ListComplianceSummariesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListComplianceSummariesError::InvalidFilter(inner) => {
                Error::InvalidFilter(inner)
            }
            crate::error::ListComplianceSummariesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListComplianceSummariesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDocumentMetadataHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDocumentMetadataHistoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDocumentMetadataHistoryError> for Error {
    fn from(err: crate::error::ListDocumentMetadataHistoryError) -> Self {
        match err {
            crate::error::ListDocumentMetadataHistoryError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListDocumentMetadataHistoryError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::ListDocumentMetadataHistoryError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::ListDocumentMetadataHistoryError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListDocumentMetadataHistoryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDocumentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDocumentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDocumentsError> for Error {
    fn from(err: crate::error::ListDocumentsError) -> Self {
        match err {
            crate::error::ListDocumentsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListDocumentsError::InvalidFilterKey(inner) => {
                Error::InvalidFilterKey(inner)
            }
            crate::error::ListDocumentsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListDocumentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDocumentVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDocumentVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDocumentVersionsError> for Error {
    fn from(err: crate::error::ListDocumentVersionsError) -> Self {
        match err {
            crate::error::ListDocumentVersionsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListDocumentVersionsError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::ListDocumentVersionsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListDocumentVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInventoryEntriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListInventoryEntriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInventoryEntriesError> for Error {
    fn from(err: crate::error::ListInventoryEntriesError) -> Self {
        match err {
            crate::error::ListInventoryEntriesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListInventoryEntriesError::InvalidFilter(inner) => {
                Error::InvalidFilter(inner)
            }
            crate::error::ListInventoryEntriesError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::ListInventoryEntriesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListInventoryEntriesError::InvalidTypeNameException(inner) => {
                Error::InvalidTypeNameException(inner)
            }
            crate::error::ListInventoryEntriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOpsItemEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOpsItemEventsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOpsItemEventsError> for Error {
    fn from(err: crate::error::ListOpsItemEventsError) -> Self {
        match err {
            crate::error::ListOpsItemEventsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListOpsItemEventsError::OpsItemInvalidParameterException(inner) => {
                Error::OpsItemInvalidParameterException(inner)
            }
            crate::error::ListOpsItemEventsError::OpsItemLimitExceededException(inner) => {
                Error::OpsItemLimitExceededException(inner)
            }
            crate::error::ListOpsItemEventsError::OpsItemNotFoundException(inner) => {
                Error::OpsItemNotFoundException(inner)
            }
            crate::error::ListOpsItemEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOpsItemRelatedItemsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOpsItemRelatedItemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOpsItemRelatedItemsError> for Error {
    fn from(err: crate::error::ListOpsItemRelatedItemsError) -> Self {
        match err {
            crate::error::ListOpsItemRelatedItemsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListOpsItemRelatedItemsError::OpsItemInvalidParameterException(inner) => {
                Error::OpsItemInvalidParameterException(inner)
            }
            crate::error::ListOpsItemRelatedItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOpsMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListOpsMetadataError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOpsMetadataError> for Error {
    fn from(err: crate::error::ListOpsMetadataError) -> Self {
        match err {
            crate::error::ListOpsMetadataError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListOpsMetadataError::OpsMetadataInvalidArgumentException(inner) => {
                Error::OpsMetadataInvalidArgumentException(inner)
            }
            crate::error::ListOpsMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListResourceComplianceSummariesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListResourceComplianceSummariesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceComplianceSummariesError> for Error {
    fn from(err: crate::error::ListResourceComplianceSummariesError) -> Self {
        match err {
            crate::error::ListResourceComplianceSummariesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListResourceComplianceSummariesError::InvalidFilter(inner) => {
                Error::InvalidFilter(inner)
            }
            crate::error::ListResourceComplianceSummariesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::ListResourceComplianceSummariesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourceDataSyncError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourceDataSyncError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceDataSyncError> for Error {
    fn from(err: crate::error::ListResourceDataSyncError) -> Self {
        match err {
            crate::error::ListResourceDataSyncError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::ListResourceDataSyncError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::error::ListResourceDataSyncError::ResourceDataSyncInvalidConfigurationException(inner) => Error::ResourceDataSyncInvalidConfigurationException(inner),
            crate::error::ListResourceDataSyncError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListTagsForResourceError::InvalidResourceId(inner) => {
                Error::InvalidResourceId(inner)
            }
            crate::error::ListTagsForResourceError::InvalidResourceType(inner) => {
                Error::InvalidResourceType(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDocumentPermissionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDocumentPermissionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDocumentPermissionError> for Error {
    fn from(err: crate::error::ModifyDocumentPermissionError) -> Self {
        match err {
            crate::error::ModifyDocumentPermissionError::DocumentLimitExceeded(inner) => {
                Error::DocumentLimitExceeded(inner)
            }
            crate::error::ModifyDocumentPermissionError::DocumentPermissionLimit(inner) => {
                Error::DocumentPermissionLimit(inner)
            }
            crate::error::ModifyDocumentPermissionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ModifyDocumentPermissionError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::ModifyDocumentPermissionError::InvalidPermissionType(inner) => {
                Error::InvalidPermissionType(inner)
            }
            crate::error::ModifyDocumentPermissionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutComplianceItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutComplianceItemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutComplianceItemsError> for Error {
    fn from(err: crate::error::PutComplianceItemsError) -> Self {
        match err {
            crate::error::PutComplianceItemsError::ComplianceTypeCountLimitExceededException(
                inner,
            ) => Error::ComplianceTypeCountLimitExceededException(inner),
            crate::error::PutComplianceItemsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::PutComplianceItemsError::InvalidItemContentException(inner) => {
                Error::InvalidItemContentException(inner)
            }
            crate::error::PutComplianceItemsError::InvalidResourceId(inner) => {
                Error::InvalidResourceId(inner)
            }
            crate::error::PutComplianceItemsError::InvalidResourceType(inner) => {
                Error::InvalidResourceType(inner)
            }
            crate::error::PutComplianceItemsError::ItemSizeLimitExceededException(inner) => {
                Error::ItemSizeLimitExceededException(inner)
            }
            crate::error::PutComplianceItemsError::TotalSizeLimitExceededException(inner) => {
                Error::TotalSizeLimitExceededException(inner)
            }
            crate::error::PutComplianceItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutInventoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutInventoryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutInventoryError> for Error {
    fn from(err: crate::error::PutInventoryError) -> Self {
        match err {
            crate::error::PutInventoryError::CustomSchemaCountLimitExceededException(inner) => {
                Error::CustomSchemaCountLimitExceededException(inner)
            }
            crate::error::PutInventoryError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::PutInventoryError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::PutInventoryError::InvalidInventoryItemContextException(inner) => {
                Error::InvalidInventoryItemContextException(inner)
            }
            crate::error::PutInventoryError::InvalidItemContentException(inner) => {
                Error::InvalidItemContentException(inner)
            }
            crate::error::PutInventoryError::InvalidTypeNameException(inner) => {
                Error::InvalidTypeNameException(inner)
            }
            crate::error::PutInventoryError::ItemContentMismatchException(inner) => {
                Error::ItemContentMismatchException(inner)
            }
            crate::error::PutInventoryError::ItemSizeLimitExceededException(inner) => {
                Error::ItemSizeLimitExceededException(inner)
            }
            crate::error::PutInventoryError::SubTypeCountLimitExceededException(inner) => {
                Error::SubTypeCountLimitExceededException(inner)
            }
            crate::error::PutInventoryError::TotalSizeLimitExceededException(inner) => {
                Error::TotalSizeLimitExceededException(inner)
            }
            crate::error::PutInventoryError::UnsupportedInventoryItemContextException(inner) => {
                Error::UnsupportedInventoryItemContextException(inner)
            }
            crate::error::PutInventoryError::UnsupportedInventorySchemaVersionException(inner) => {
                Error::UnsupportedInventorySchemaVersionException(inner)
            }
            crate::error::PutInventoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutParameterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutParameterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutParameterError> for Error {
    fn from(err: crate::error::PutParameterError) -> Self {
        match err {
            crate::error::PutParameterError::HierarchyLevelLimitExceededException(inner) => {
                Error::HierarchyLevelLimitExceededException(inner)
            }
            crate::error::PutParameterError::HierarchyTypeMismatchException(inner) => {
                Error::HierarchyTypeMismatchException(inner)
            }
            crate::error::PutParameterError::IncompatiblePolicyException(inner) => {
                Error::IncompatiblePolicyException(inner)
            }
            crate::error::PutParameterError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::PutParameterError::InvalidAllowedPatternException(inner) => {
                Error::InvalidAllowedPatternException(inner)
            }
            crate::error::PutParameterError::InvalidKeyId(inner) => Error::InvalidKeyId(inner),
            crate::error::PutParameterError::InvalidPolicyAttributeException(inner) => {
                Error::InvalidPolicyAttributeException(inner)
            }
            crate::error::PutParameterError::InvalidPolicyTypeException(inner) => {
                Error::InvalidPolicyTypeException(inner)
            }
            crate::error::PutParameterError::ParameterAlreadyExists(inner) => {
                Error::ParameterAlreadyExists(inner)
            }
            crate::error::PutParameterError::ParameterLimitExceeded(inner) => {
                Error::ParameterLimitExceeded(inner)
            }
            crate::error::PutParameterError::ParameterMaxVersionLimitExceeded(inner) => {
                Error::ParameterMaxVersionLimitExceeded(inner)
            }
            crate::error::PutParameterError::ParameterPatternMismatchException(inner) => {
                Error::ParameterPatternMismatchException(inner)
            }
            crate::error::PutParameterError::PoliciesLimitExceededException(inner) => {
                Error::PoliciesLimitExceededException(inner)
            }
            crate::error::PutParameterError::TooManyUpdates(inner) => Error::TooManyUpdates(inner),
            crate::error::PutParameterError::UnsupportedParameterType(inner) => {
                Error::UnsupportedParameterType(inner)
            }
            crate::error::PutParameterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutResourcePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutResourcePolicyError> for Error {
    fn from(err: crate::error::PutResourcePolicyError) -> Self {
        match err {
            crate::error::PutResourcePolicyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::PutResourcePolicyError::ResourcePolicyConflictException(inner) => {
                Error::ResourcePolicyConflictException(inner)
            }
            crate::error::PutResourcePolicyError::ResourcePolicyInvalidParameterException(
                inner,
            ) => Error::ResourcePolicyInvalidParameterException(inner),
            crate::error::PutResourcePolicyError::ResourcePolicyLimitExceededException(inner) => {
                Error::ResourcePolicyLimitExceededException(inner)
            }
            crate::error::PutResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterDefaultPatchBaselineError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterDefaultPatchBaselineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterDefaultPatchBaselineError> for Error {
    fn from(err: crate::error::RegisterDefaultPatchBaselineError) -> Self {
        match err {
            crate::error::RegisterDefaultPatchBaselineError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::RegisterDefaultPatchBaselineError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::RegisterDefaultPatchBaselineError::InvalidResourceId(inner) => {
                Error::InvalidResourceId(inner)
            }
            crate::error::RegisterDefaultPatchBaselineError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::RegisterPatchBaselineForPatchGroupError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RegisterPatchBaselineForPatchGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterPatchBaselineForPatchGroupError> for Error {
    fn from(err: crate::error::RegisterPatchBaselineForPatchGroupError) -> Self {
        match err {
            crate::error::RegisterPatchBaselineForPatchGroupError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::error::RegisterPatchBaselineForPatchGroupError::DoesNotExistException(inner) => Error::DoesNotExistException(inner),
            crate::error::RegisterPatchBaselineForPatchGroupError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::RegisterPatchBaselineForPatchGroupError::InvalidResourceId(inner) => Error::InvalidResourceId(inner),
            crate::error::RegisterPatchBaselineForPatchGroupError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::RegisterPatchBaselineForPatchGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::RegisterTargetWithMaintenanceWindowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RegisterTargetWithMaintenanceWindowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterTargetWithMaintenanceWindowError> for Error {
    fn from(err: crate::error::RegisterTargetWithMaintenanceWindowError) -> Self {
        match err {
            crate::error::RegisterTargetWithMaintenanceWindowError::DoesNotExistException(inner) => Error::DoesNotExistException(inner),
            crate::error::RegisterTargetWithMaintenanceWindowError::IdempotentParameterMismatch(inner) => Error::IdempotentParameterMismatch(inner),
            crate::error::RegisterTargetWithMaintenanceWindowError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::RegisterTargetWithMaintenanceWindowError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::RegisterTargetWithMaintenanceWindowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RegisterTaskWithMaintenanceWindowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RegisterTaskWithMaintenanceWindowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterTaskWithMaintenanceWindowError> for Error {
    fn from(err: crate::error::RegisterTaskWithMaintenanceWindowError) -> Self {
        match err {
            crate::error::RegisterTaskWithMaintenanceWindowError::DoesNotExistException(inner) => Error::DoesNotExistException(inner),
            crate::error::RegisterTaskWithMaintenanceWindowError::FeatureNotAvailableException(inner) => Error::FeatureNotAvailableException(inner),
            crate::error::RegisterTaskWithMaintenanceWindowError::IdempotentParameterMismatch(inner) => Error::IdempotentParameterMismatch(inner),
            crate::error::RegisterTaskWithMaintenanceWindowError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::RegisterTaskWithMaintenanceWindowError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::RegisterTaskWithMaintenanceWindowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::error::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::error::RemoveTagsFromResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::RemoveTagsFromResourceError::InvalidResourceId(inner) => {
                Error::InvalidResourceId(inner)
            }
            crate::error::RemoveTagsFromResourceError::InvalidResourceType(inner) => {
                Error::InvalidResourceType(inner)
            }
            crate::error::RemoveTagsFromResourceError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetServiceSettingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetServiceSettingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetServiceSettingError> for Error {
    fn from(err: crate::error::ResetServiceSettingError) -> Self {
        match err {
            crate::error::ResetServiceSettingError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ResetServiceSettingError::ServiceSettingNotFound(inner) => {
                Error::ServiceSettingNotFound(inner)
            }
            crate::error::ResetServiceSettingError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::ResetServiceSettingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResumeSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ResumeSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResumeSessionError> for Error {
    fn from(err: crate::error::ResumeSessionError) -> Self {
        match err {
            crate::error::ResumeSessionError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::ResumeSessionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ResumeSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendAutomationSignalError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SendAutomationSignalError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendAutomationSignalError> for Error {
    fn from(err: crate::error::SendAutomationSignalError) -> Self {
        match err {
            crate::error::SendAutomationSignalError::AutomationExecutionNotFoundException(
                inner,
            ) => Error::AutomationExecutionNotFoundException(inner),
            crate::error::SendAutomationSignalError::AutomationStepNotFoundException(inner) => {
                Error::AutomationStepNotFoundException(inner)
            }
            crate::error::SendAutomationSignalError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::SendAutomationSignalError::InvalidAutomationSignalException(inner) => {
                Error::InvalidAutomationSignalException(inner)
            }
            crate::error::SendAutomationSignalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendCommandError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendCommandError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendCommandError> for Error {
    fn from(err: crate::error::SendCommandError) -> Self {
        match err {
            crate::error::SendCommandError::DuplicateInstanceId(inner) => {
                Error::DuplicateInstanceId(inner)
            }
            crate::error::SendCommandError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::SendCommandError::InvalidDocument(inner) => Error::InvalidDocument(inner),
            crate::error::SendCommandError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::SendCommandError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::SendCommandError::InvalidNotificationConfig(inner) => {
                Error::InvalidNotificationConfig(inner)
            }
            crate::error::SendCommandError::InvalidOutputFolder(inner) => {
                Error::InvalidOutputFolder(inner)
            }
            crate::error::SendCommandError::InvalidParameters(inner) => {
                Error::InvalidParameters(inner)
            }
            crate::error::SendCommandError::InvalidRole(inner) => Error::InvalidRole(inner),
            crate::error::SendCommandError::MaxDocumentSizeExceeded(inner) => {
                Error::MaxDocumentSizeExceeded(inner)
            }
            crate::error::SendCommandError::UnsupportedPlatformType(inner) => {
                Error::UnsupportedPlatformType(inner)
            }
            crate::error::SendCommandError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartAssociationsOnceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartAssociationsOnceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartAssociationsOnceError> for Error {
    fn from(err: crate::error::StartAssociationsOnceError) -> Self {
        match err {
            crate::error::StartAssociationsOnceError::AssociationDoesNotExist(inner) => {
                Error::AssociationDoesNotExist(inner)
            }
            crate::error::StartAssociationsOnceError::InvalidAssociation(inner) => {
                Error::InvalidAssociation(inner)
            }
            crate::error::StartAssociationsOnceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartAutomationExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartAutomationExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartAutomationExecutionError> for Error {
    fn from(err: crate::error::StartAutomationExecutionError) -> Self {
        match err {
            crate::error::StartAutomationExecutionError::AutomationDefinitionNotFoundException(inner) => Error::AutomationDefinitionNotFoundException(inner),
            crate::error::StartAutomationExecutionError::AutomationDefinitionVersionNotFoundException(inner) => Error::AutomationDefinitionVersionNotFoundException(inner),
            crate::error::StartAutomationExecutionError::AutomationExecutionLimitExceededException(inner) => Error::AutomationExecutionLimitExceededException(inner),
            crate::error::StartAutomationExecutionError::IdempotentParameterMismatch(inner) => Error::IdempotentParameterMismatch(inner),
            crate::error::StartAutomationExecutionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::StartAutomationExecutionError::InvalidAutomationExecutionParametersException(inner) => Error::InvalidAutomationExecutionParametersException(inner),
            crate::error::StartAutomationExecutionError::InvalidTarget(inner) => Error::InvalidTarget(inner),
            crate::error::StartAutomationExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartChangeRequestExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartChangeRequestExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartChangeRequestExecutionError> for Error {
    fn from(err: crate::error::StartChangeRequestExecutionError) -> Self {
        match err {
            crate::error::StartChangeRequestExecutionError::AutomationDefinitionNotApprovedException(inner) => Error::AutomationDefinitionNotApprovedException(inner),
            crate::error::StartChangeRequestExecutionError::AutomationDefinitionNotFoundException(inner) => Error::AutomationDefinitionNotFoundException(inner),
            crate::error::StartChangeRequestExecutionError::AutomationDefinitionVersionNotFoundException(inner) => Error::AutomationDefinitionVersionNotFoundException(inner),
            crate::error::StartChangeRequestExecutionError::AutomationExecutionLimitExceededException(inner) => Error::AutomationExecutionLimitExceededException(inner),
            crate::error::StartChangeRequestExecutionError::IdempotentParameterMismatch(inner) => Error::IdempotentParameterMismatch(inner),
            crate::error::StartChangeRequestExecutionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::StartChangeRequestExecutionError::InvalidAutomationExecutionParametersException(inner) => Error::InvalidAutomationExecutionParametersException(inner),
            crate::error::StartChangeRequestExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartSessionError> for Error {
    fn from(err: crate::error::StartSessionError) -> Self {
        match err {
            crate::error::StartSessionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::StartSessionError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::StartSessionError::TargetNotConnected(inner) => {
                Error::TargetNotConnected(inner)
            }
            crate::error::StartSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopAutomationExecutionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopAutomationExecutionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopAutomationExecutionError> for Error {
    fn from(err: crate::error::StopAutomationExecutionError) -> Self {
        match err {
            crate::error::StopAutomationExecutionError::AutomationExecutionNotFoundException(
                inner,
            ) => Error::AutomationExecutionNotFoundException(inner),
            crate::error::StopAutomationExecutionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::StopAutomationExecutionError::InvalidAutomationStatusUpdateException(
                inner,
            ) => Error::InvalidAutomationStatusUpdateException(inner),
            crate::error::StopAutomationExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TerminateSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TerminateSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TerminateSessionError> for Error {
    fn from(err: crate::error::TerminateSessionError) -> Self {
        match err {
            crate::error::TerminateSessionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::TerminateSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UnlabelParameterVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UnlabelParameterVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UnlabelParameterVersionError> for Error {
    fn from(err: crate::error::UnlabelParameterVersionError) -> Self {
        match err {
            crate::error::UnlabelParameterVersionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UnlabelParameterVersionError::ParameterNotFound(inner) => {
                Error::ParameterNotFound(inner)
            }
            crate::error::UnlabelParameterVersionError::ParameterVersionNotFound(inner) => {
                Error::ParameterVersionNotFound(inner)
            }
            crate::error::UnlabelParameterVersionError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::UnlabelParameterVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAssociationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssociationError> for Error {
    fn from(err: crate::error::UpdateAssociationError) -> Self {
        match err {
            crate::error::UpdateAssociationError::AssociationDoesNotExist(inner) => {
                Error::AssociationDoesNotExist(inner)
            }
            crate::error::UpdateAssociationError::AssociationVersionLimitExceeded(inner) => {
                Error::AssociationVersionLimitExceeded(inner)
            }
            crate::error::UpdateAssociationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateAssociationError::InvalidAssociationVersion(inner) => {
                Error::InvalidAssociationVersion(inner)
            }
            crate::error::UpdateAssociationError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::UpdateAssociationError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::UpdateAssociationError::InvalidOutputLocation(inner) => {
                Error::InvalidOutputLocation(inner)
            }
            crate::error::UpdateAssociationError::InvalidParameters(inner) => {
                Error::InvalidParameters(inner)
            }
            crate::error::UpdateAssociationError::InvalidSchedule(inner) => {
                Error::InvalidSchedule(inner)
            }
            crate::error::UpdateAssociationError::InvalidTarget(inner) => {
                Error::InvalidTarget(inner)
            }
            crate::error::UpdateAssociationError::InvalidTargetMaps(inner) => {
                Error::InvalidTargetMaps(inner)
            }
            crate::error::UpdateAssociationError::InvalidUpdate(inner) => {
                Error::InvalidUpdate(inner)
            }
            crate::error::UpdateAssociationError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::UpdateAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAssociationStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAssociationStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssociationStatusError> for Error {
    fn from(err: crate::error::UpdateAssociationStatusError) -> Self {
        match err {
            crate::error::UpdateAssociationStatusError::AssociationDoesNotExist(inner) => {
                Error::AssociationDoesNotExist(inner)
            }
            crate::error::UpdateAssociationStatusError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateAssociationStatusError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::UpdateAssociationStatusError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::UpdateAssociationStatusError::StatusUnchanged(inner) => {
                Error::StatusUnchanged(inner)
            }
            crate::error::UpdateAssociationStatusError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::UpdateAssociationStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateDocumentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDocumentError> for Error {
    fn from(err: crate::error::UpdateDocumentError) -> Self {
        match err {
            crate::error::UpdateDocumentError::DocumentVersionLimitExceeded(inner) => {
                Error::DocumentVersionLimitExceeded(inner)
            }
            crate::error::UpdateDocumentError::DuplicateDocumentContent(inner) => {
                Error::DuplicateDocumentContent(inner)
            }
            crate::error::UpdateDocumentError::DuplicateDocumentVersionName(inner) => {
                Error::DuplicateDocumentVersionName(inner)
            }
            crate::error::UpdateDocumentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateDocumentError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::UpdateDocumentError::InvalidDocumentContent(inner) => {
                Error::InvalidDocumentContent(inner)
            }
            crate::error::UpdateDocumentError::InvalidDocumentOperation(inner) => {
                Error::InvalidDocumentOperation(inner)
            }
            crate::error::UpdateDocumentError::InvalidDocumentSchemaVersion(inner) => {
                Error::InvalidDocumentSchemaVersion(inner)
            }
            crate::error::UpdateDocumentError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::UpdateDocumentError::MaxDocumentSizeExceeded(inner) => {
                Error::MaxDocumentSizeExceeded(inner)
            }
            crate::error::UpdateDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDocumentDefaultVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDocumentDefaultVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDocumentDefaultVersionError> for Error {
    fn from(err: crate::error::UpdateDocumentDefaultVersionError) -> Self {
        match err {
            crate::error::UpdateDocumentDefaultVersionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateDocumentDefaultVersionError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::UpdateDocumentDefaultVersionError::InvalidDocumentSchemaVersion(
                inner,
            ) => Error::InvalidDocumentSchemaVersion(inner),
            crate::error::UpdateDocumentDefaultVersionError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::UpdateDocumentDefaultVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDocumentMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDocumentMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDocumentMetadataError> for Error {
    fn from(err: crate::error::UpdateDocumentMetadataError) -> Self {
        match err {
            crate::error::UpdateDocumentMetadataError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateDocumentMetadataError::InvalidDocument(inner) => {
                Error::InvalidDocument(inner)
            }
            crate::error::UpdateDocumentMetadataError::InvalidDocumentOperation(inner) => {
                Error::InvalidDocumentOperation(inner)
            }
            crate::error::UpdateDocumentMetadataError::InvalidDocumentVersion(inner) => {
                Error::InvalidDocumentVersion(inner)
            }
            crate::error::UpdateDocumentMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMaintenanceWindowError> for Error {
    fn from(err: crate::error::UpdateMaintenanceWindowError) -> Self {
        match err {
            crate::error::UpdateMaintenanceWindowError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::UpdateMaintenanceWindowError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateMaintenanceWindowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowTargetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMaintenanceWindowTargetError> for Error {
    fn from(err: crate::error::UpdateMaintenanceWindowTargetError) -> Self {
        match err {
            crate::error::UpdateMaintenanceWindowTargetError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::UpdateMaintenanceWindowTargetError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateMaintenanceWindowTargetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMaintenanceWindowTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMaintenanceWindowTaskError> for Error {
    fn from(err: crate::error::UpdateMaintenanceWindowTaskError) -> Self {
        match err {
            crate::error::UpdateMaintenanceWindowTaskError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::UpdateMaintenanceWindowTaskError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateMaintenanceWindowTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateManagedInstanceRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateManagedInstanceRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateManagedInstanceRoleError> for Error {
    fn from(err: crate::error::UpdateManagedInstanceRoleError) -> Self {
        match err {
            crate::error::UpdateManagedInstanceRoleError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateManagedInstanceRoleError::InvalidInstanceId(inner) => {
                Error::InvalidInstanceId(inner)
            }
            crate::error::UpdateManagedInstanceRoleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateOpsItemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateOpsItemError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateOpsItemError> for Error {
    fn from(err: crate::error::UpdateOpsItemError) -> Self {
        match err {
            crate::error::UpdateOpsItemError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateOpsItemError::OpsItemAccessDeniedException(inner) => {
                Error::OpsItemAccessDeniedException(inner)
            }
            crate::error::UpdateOpsItemError::OpsItemAlreadyExistsException(inner) => {
                Error::OpsItemAlreadyExistsException(inner)
            }
            crate::error::UpdateOpsItemError::OpsItemInvalidParameterException(inner) => {
                Error::OpsItemInvalidParameterException(inner)
            }
            crate::error::UpdateOpsItemError::OpsItemLimitExceededException(inner) => {
                Error::OpsItemLimitExceededException(inner)
            }
            crate::error::UpdateOpsItemError::OpsItemNotFoundException(inner) => {
                Error::OpsItemNotFoundException(inner)
            }
            crate::error::UpdateOpsItemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateOpsMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateOpsMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateOpsMetadataError> for Error {
    fn from(err: crate::error::UpdateOpsMetadataError) -> Self {
        match err {
            crate::error::UpdateOpsMetadataError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateOpsMetadataError::OpsMetadataInvalidArgumentException(inner) => {
                Error::OpsMetadataInvalidArgumentException(inner)
            }
            crate::error::UpdateOpsMetadataError::OpsMetadataKeyLimitExceededException(inner) => {
                Error::OpsMetadataKeyLimitExceededException(inner)
            }
            crate::error::UpdateOpsMetadataError::OpsMetadataNotFoundException(inner) => {
                Error::OpsMetadataNotFoundException(inner)
            }
            crate::error::UpdateOpsMetadataError::OpsMetadataTooManyUpdatesException(inner) => {
                Error::OpsMetadataTooManyUpdatesException(inner)
            }
            crate::error::UpdateOpsMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePatchBaselineError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePatchBaselineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePatchBaselineError> for Error {
    fn from(err: crate::error::UpdatePatchBaselineError) -> Self {
        match err {
            crate::error::UpdatePatchBaselineError::DoesNotExistException(inner) => {
                Error::DoesNotExistException(inner)
            }
            crate::error::UpdatePatchBaselineError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdatePatchBaselineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResourceDataSyncError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateResourceDataSyncError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResourceDataSyncError> for Error {
    fn from(err: crate::error::UpdateResourceDataSyncError) -> Self {
        match err {
            crate::error::UpdateResourceDataSyncError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::UpdateResourceDataSyncError::ResourceDataSyncConflictException(inner) => Error::ResourceDataSyncConflictException(inner),
            crate::error::UpdateResourceDataSyncError::ResourceDataSyncInvalidConfigurationException(inner) => Error::ResourceDataSyncInvalidConfigurationException(inner),
            crate::error::UpdateResourceDataSyncError::ResourceDataSyncNotFoundException(inner) => Error::ResourceDataSyncNotFoundException(inner),
            crate::error::UpdateResourceDataSyncError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceSettingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateServiceSettingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceSettingError> for Error {
    fn from(err: crate::error::UpdateServiceSettingError) -> Self {
        match err {
            crate::error::UpdateServiceSettingError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateServiceSettingError::ServiceSettingNotFound(inner) => {
                Error::ServiceSettingNotFound(inner)
            }
            crate::error::UpdateServiceSettingError::TooManyUpdates(inner) => {
                Error::TooManyUpdates(inner)
            }
            crate::error::UpdateServiceSettingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AlreadyExistsException(e) => e.request_id(),
            Self::AssociatedInstances(e) => e.request_id(),
            Self::AssociationAlreadyExists(e) => e.request_id(),
            Self::AssociationDoesNotExist(e) => e.request_id(),
            Self::AssociationExecutionDoesNotExist(e) => e.request_id(),
            Self::AssociationLimitExceeded(e) => e.request_id(),
            Self::AssociationVersionLimitExceeded(e) => e.request_id(),
            Self::AutomationDefinitionNotApprovedException(e) => e.request_id(),
            Self::AutomationDefinitionNotFoundException(e) => e.request_id(),
            Self::AutomationDefinitionVersionNotFoundException(e) => e.request_id(),
            Self::AutomationExecutionLimitExceededException(e) => e.request_id(),
            Self::AutomationExecutionNotFoundException(e) => e.request_id(),
            Self::AutomationStepNotFoundException(e) => e.request_id(),
            Self::ComplianceTypeCountLimitExceededException(e) => e.request_id(),
            Self::CustomSchemaCountLimitExceededException(e) => e.request_id(),
            Self::DocumentAlreadyExists(e) => e.request_id(),
            Self::DocumentLimitExceeded(e) => e.request_id(),
            Self::DocumentPermissionLimit(e) => e.request_id(),
            Self::DocumentVersionLimitExceeded(e) => e.request_id(),
            Self::DoesNotExistException(e) => e.request_id(),
            Self::DuplicateDocumentContent(e) => e.request_id(),
            Self::DuplicateDocumentVersionName(e) => e.request_id(),
            Self::DuplicateInstanceId(e) => e.request_id(),
            Self::FeatureNotAvailableException(e) => e.request_id(),
            Self::HierarchyLevelLimitExceededException(e) => e.request_id(),
            Self::HierarchyTypeMismatchException(e) => e.request_id(),
            Self::IdempotentParameterMismatch(e) => e.request_id(),
            Self::IncompatiblePolicyException(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::InvalidActivation(e) => e.request_id(),
            Self::InvalidActivationId(e) => e.request_id(),
            Self::InvalidAggregatorException(e) => e.request_id(),
            Self::InvalidAllowedPatternException(e) => e.request_id(),
            Self::InvalidAssociation(e) => e.request_id(),
            Self::InvalidAssociationVersion(e) => e.request_id(),
            Self::InvalidAutomationExecutionParametersException(e) => e.request_id(),
            Self::InvalidAutomationSignalException(e) => e.request_id(),
            Self::InvalidAutomationStatusUpdateException(e) => e.request_id(),
            Self::InvalidCommandId(e) => e.request_id(),
            Self::InvalidDeleteInventoryParametersException(e) => e.request_id(),
            Self::InvalidDeletionIdException(e) => e.request_id(),
            Self::InvalidDocument(e) => e.request_id(),
            Self::InvalidDocumentContent(e) => e.request_id(),
            Self::InvalidDocumentOperation(e) => e.request_id(),
            Self::InvalidDocumentSchemaVersion(e) => e.request_id(),
            Self::InvalidDocumentType(e) => e.request_id(),
            Self::InvalidDocumentVersion(e) => e.request_id(),
            Self::InvalidFilter(e) => e.request_id(),
            Self::InvalidFilterKey(e) => e.request_id(),
            Self::InvalidFilterOption(e) => e.request_id(),
            Self::InvalidFilterValue(e) => e.request_id(),
            Self::InvalidInstanceId(e) => e.request_id(),
            Self::InvalidInstanceInformationFilterValue(e) => e.request_id(),
            Self::InvalidInventoryGroupException(e) => e.request_id(),
            Self::InvalidInventoryItemContextException(e) => e.request_id(),
            Self::InvalidInventoryRequestException(e) => e.request_id(),
            Self::InvalidItemContentException(e) => e.request_id(),
            Self::InvalidKeyId(e) => e.request_id(),
            Self::InvalidNextToken(e) => e.request_id(),
            Self::InvalidNotificationConfig(e) => e.request_id(),
            Self::InvalidOptionException(e) => e.request_id(),
            Self::InvalidOutputFolder(e) => e.request_id(),
            Self::InvalidOutputLocation(e) => e.request_id(),
            Self::InvalidParameters(e) => e.request_id(),
            Self::InvalidPermissionType(e) => e.request_id(),
            Self::InvalidPluginName(e) => e.request_id(),
            Self::InvalidPolicyAttributeException(e) => e.request_id(),
            Self::InvalidPolicyTypeException(e) => e.request_id(),
            Self::InvalidResourceId(e) => e.request_id(),
            Self::InvalidResourceType(e) => e.request_id(),
            Self::InvalidResultAttributeException(e) => e.request_id(),
            Self::InvalidRole(e) => e.request_id(),
            Self::InvalidSchedule(e) => e.request_id(),
            Self::InvalidTag(e) => e.request_id(),
            Self::InvalidTarget(e) => e.request_id(),
            Self::InvalidTargetMaps(e) => e.request_id(),
            Self::InvalidTypeNameException(e) => e.request_id(),
            Self::InvalidUpdate(e) => e.request_id(),
            Self::InvocationDoesNotExist(e) => e.request_id(),
            Self::ItemContentMismatchException(e) => e.request_id(),
            Self::ItemSizeLimitExceededException(e) => e.request_id(),
            Self::MaxDocumentSizeExceeded(e) => e.request_id(),
            Self::OpsItemAccessDeniedException(e) => e.request_id(),
            Self::OpsItemAlreadyExistsException(e) => e.request_id(),
            Self::OpsItemInvalidParameterException(e) => e.request_id(),
            Self::OpsItemLimitExceededException(e) => e.request_id(),
            Self::OpsItemNotFoundException(e) => e.request_id(),
            Self::OpsItemRelatedItemAlreadyExistsException(e) => e.request_id(),
            Self::OpsItemRelatedItemAssociationNotFoundException(e) => e.request_id(),
            Self::OpsMetadataAlreadyExistsException(e) => e.request_id(),
            Self::OpsMetadataInvalidArgumentException(e) => e.request_id(),
            Self::OpsMetadataKeyLimitExceededException(e) => e.request_id(),
            Self::OpsMetadataLimitExceededException(e) => e.request_id(),
            Self::OpsMetadataNotFoundException(e) => e.request_id(),
            Self::OpsMetadataTooManyUpdatesException(e) => e.request_id(),
            Self::ParameterAlreadyExists(e) => e.request_id(),
            Self::ParameterLimitExceeded(e) => e.request_id(),
            Self::ParameterMaxVersionLimitExceeded(e) => e.request_id(),
            Self::ParameterNotFound(e) => e.request_id(),
            Self::ParameterPatternMismatchException(e) => e.request_id(),
            Self::ParameterVersionLabelLimitExceeded(e) => e.request_id(),
            Self::ParameterVersionNotFound(e) => e.request_id(),
            Self::PoliciesLimitExceededException(e) => e.request_id(),
            Self::ResourceDataSyncAlreadyExistsException(e) => e.request_id(),
            Self::ResourceDataSyncConflictException(e) => e.request_id(),
            Self::ResourceDataSyncCountExceededException(e) => e.request_id(),
            Self::ResourceDataSyncInvalidConfigurationException(e) => e.request_id(),
            Self::ResourceDataSyncNotFoundException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ResourcePolicyConflictException(e) => e.request_id(),
            Self::ResourcePolicyInvalidParameterException(e) => e.request_id(),
            Self::ResourcePolicyLimitExceededException(e) => e.request_id(),
            Self::ServiceSettingNotFound(e) => e.request_id(),
            Self::StatusUnchanged(e) => e.request_id(),
            Self::SubTypeCountLimitExceededException(e) => e.request_id(),
            Self::TargetInUseException(e) => e.request_id(),
            Self::TargetNotConnected(e) => e.request_id(),
            Self::TooManyTagsError(e) => e.request_id(),
            Self::TooManyUpdates(e) => e.request_id(),
            Self::TotalSizeLimitExceededException(e) => e.request_id(),
            Self::UnsupportedCalendarException(e) => e.request_id(),
            Self::UnsupportedFeatureRequiredException(e) => e.request_id(),
            Self::UnsupportedInventoryItemContextException(e) => e.request_id(),
            Self::UnsupportedInventorySchemaVersionException(e) => e.request_id(),
            Self::UnsupportedOperatingSystem(e) => e.request_id(),
            Self::UnsupportedParameterType(e) => e.request_id(),
            Self::UnsupportedPlatformType(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
