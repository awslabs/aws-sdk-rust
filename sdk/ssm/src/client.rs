// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Simple Systems Manager (SSM)
///
/// Client for invoking operations on Amazon Simple Systems Manager (SSM). Each operation on Amazon Simple Systems Manager (SSM) is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
/// ## Constructing a `Client`
///
/// A [`Config`] is required to construct a client. For most use cases, the [`aws-config`]
/// crate should be used to automatically resolve this config using
/// [`aws_config::load_from_env()`], since this will resolve an [`SdkConfig`] which can be shared
/// across multiple different AWS SDK clients. This config resolution process can be customized
/// by calling [`aws_config::from_env()`] instead, which returns a [`ConfigLoader`] that uses
/// the [builder pattern] to customize the default config.
///
/// In the simplest case, creating a client looks as follows:
/// ```rust,no_run
/// # async fn wrapper() {
/// let config = aws_config::load_from_env().await;
/// let client = aws_sdk_ssm::Client::new(&config);
/// # }
/// ```
///
/// Occasionally, SDKs may have additional service-specific that can be set on the [`Config`] that
/// is absent from [`SdkConfig`], or slightly different settings for a specific client may be desired.
/// The [`Config`] struct implements `From<&SdkConfig>`, so setting these specific settings can be
/// done as follows:
///
/// ```rust,no_run
/// # async fn wrapper() {
/// let sdk_config = aws_config::load_from_env().await;
/// let config = aws_sdk_ssm::config::Builder::from(&sdk_config)
/// # /*
///     .some_service_specific_setting("value")
/// # */
///     .build();
/// # }
/// ```
///
/// See the [`aws-config` docs] and [`Config`] for more information on customizing configuration.
///
/// _Note:_ Client construction is expensive due to connection thread pool initialization, and should
/// be done once at application start-up.
///
/// [`Config`]: crate::Config
/// [`ConfigLoader`]: https://docs.rs/aws-config/*/aws_config/struct.ConfigLoader.html
/// [`SdkConfig`]: https://docs.rs/aws-config/*/aws_config/struct.SdkConfig.html
/// [`aws-config` docs]: https://docs.rs/aws-config/*
/// [`aws-config`]: https://crates.io/crates/aws-config
/// [`aws_config::from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.from_env.html
/// [`aws_config::load_from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.load_from_env.html
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#builders-enable-construction-of-complex-values-c-builder
/// # Using the `Client`
///
/// A client has a function for every operation that can be performed by the service.
/// For example, the [`AddTagsToResource`](crate::operation::add_tags_to_resource) operation has
/// a [`Client::add_tags_to_resource`], function which returns a builder for that operation.
/// The fluent builder ultimately has a `call()` function that returns an async future that
/// returns a result, as illustrated below:
///
/// ```rust,ignore
/// let result = client.add_tags_to_resource()
///     .resource_type("example")
///     .call()
///     .await;
/// ```
///
/// The underlying HTTP requests that get made by this can be modified with the `customize_operation`
/// function on the fluent builder. See the [`customize`](crate::client::customize) module for more
/// information.
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .reconnect_mode(retry_config.reconnect_mode())
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

mod add_tags_to_resource;

mod associate_ops_item_related_item;

mod cancel_command;

mod cancel_maintenance_window_execution;

mod create_activation;

mod create_association;

mod create_association_batch;

mod create_document;

mod create_maintenance_window;

mod create_ops_item;

mod create_ops_metadata;

mod create_patch_baseline;

mod create_resource_data_sync;

/// Operation customization and supporting types.
///
/// The underlying HTTP requests made during an operation can be customized
/// by calling the `customize()` method on the builder returned from a client
/// operation call. For example, this can be used to add an additional HTTP header:
///
/// ```ignore
/// # async fn wrapper() -> Result<(), aws_sdk_ssm::Error> {
/// # let client: aws_sdk_ssm::Client = unimplemented!();
/// use http::header::{HeaderName, HeaderValue};
///
/// let result = client.add_tags_to_resource()
///     .customize()
///     .await?
///     .mutate_request(|req| {
///         // Add `x-example-header` with value
///         req.headers_mut()
///             .insert(
///                 HeaderName::from_static("x-example-header"),
///                 HeaderValue::from_static("1"),
///             );
///     })
///     .send()
///     .await;
/// # }
/// ```
pub mod customize;

mod delete_activation;

mod delete_association;

mod delete_document;

mod delete_inventory;

mod delete_maintenance_window;

mod delete_ops_metadata;

mod delete_parameter;

mod delete_parameters;

mod delete_patch_baseline;

mod delete_resource_data_sync;

mod delete_resource_policy;

mod deregister_managed_instance;

mod deregister_patch_baseline_for_patch_group;

mod deregister_target_from_maintenance_window;

mod deregister_task_from_maintenance_window;

mod describe_activations;

mod describe_association;

mod describe_association_execution_targets;

mod describe_association_executions;

mod describe_automation_executions;

mod describe_automation_step_executions;

mod describe_available_patches;

mod describe_document;

mod describe_document_permission;

mod describe_effective_instance_associations;

mod describe_effective_patches_for_patch_baseline;

mod describe_instance_associations_status;

mod describe_instance_information;

mod describe_instance_patch_states;

mod describe_instance_patch_states_for_patch_group;

mod describe_instance_patches;

mod describe_inventory_deletions;

mod describe_maintenance_window_execution_task_invocations;

mod describe_maintenance_window_execution_tasks;

mod describe_maintenance_window_executions;

mod describe_maintenance_window_schedule;

mod describe_maintenance_window_targets;

mod describe_maintenance_window_tasks;

mod describe_maintenance_windows;

mod describe_maintenance_windows_for_target;

mod describe_ops_items;

mod describe_parameters;

mod describe_patch_baselines;

mod describe_patch_group_state;

mod describe_patch_groups;

mod describe_patch_properties;

mod describe_sessions;

mod disassociate_ops_item_related_item;

mod get_automation_execution;

mod get_calendar_state;

mod get_command_invocation;

mod get_connection_status;

mod get_default_patch_baseline;

mod get_deployable_patch_snapshot_for_instance;

mod get_document;

mod get_inventory;

mod get_inventory_schema;

mod get_maintenance_window;

mod get_maintenance_window_execution;

mod get_maintenance_window_execution_task;

mod get_maintenance_window_execution_task_invocation;

mod get_maintenance_window_task;

mod get_ops_item;

mod get_ops_metadata;

mod get_ops_summary;

mod get_parameter;

mod get_parameter_history;

mod get_parameters;

mod get_parameters_by_path;

mod get_patch_baseline;

mod get_patch_baseline_for_patch_group;

mod get_resource_policies;

mod get_service_setting;

mod label_parameter_version;

mod list_association_versions;

mod list_associations;

mod list_command_invocations;

mod list_commands;

mod list_compliance_items;

mod list_compliance_summaries;

mod list_document_metadata_history;

mod list_document_versions;

mod list_documents;

mod list_inventory_entries;

mod list_ops_item_events;

mod list_ops_item_related_items;

mod list_ops_metadata;

mod list_resource_compliance_summaries;

mod list_resource_data_sync;

mod list_tags_for_resource;

mod modify_document_permission;

mod put_compliance_items;

mod put_inventory;

mod put_parameter;

mod put_resource_policy;

mod register_default_patch_baseline;

mod register_patch_baseline_for_patch_group;

mod register_target_with_maintenance_window;

mod register_task_with_maintenance_window;

mod remove_tags_from_resource;

mod reset_service_setting;

mod resume_session;

mod send_automation_signal;

mod send_command;

mod start_associations_once;

mod start_automation_execution;

mod start_change_request_execution;

mod start_session;

mod stop_automation_execution;

mod terminate_session;

mod unlabel_parameter_version;

mod update_association;

mod update_association_status;

mod update_document;

mod update_document_default_version;

mod update_document_metadata;

mod update_maintenance_window;

mod update_maintenance_window_target;

mod update_maintenance_window_task;

mod update_managed_instance_role;

mod update_ops_item;

mod update_ops_metadata;

mod update_patch_baseline;

mod update_resource_data_sync;

mod update_service_setting;
