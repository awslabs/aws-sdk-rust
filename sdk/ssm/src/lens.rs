// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_activations_output_next_token(
    input: &crate::operation::describe_activations::DescribeActivationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_association_execution_targets_output_next_token(
    input: &crate::operation::describe_association_execution_targets::DescribeAssociationExecutionTargetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_association_executions_output_next_token(
    input: &crate::operation::describe_association_executions::DescribeAssociationExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_automation_executions_output_next_token(
    input: &crate::operation::describe_automation_executions::DescribeAutomationExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_automation_step_executions_output_next_token(
    input: &crate::operation::describe_automation_step_executions::DescribeAutomationStepExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_available_patches_output_next_token(
    input: &crate::operation::describe_available_patches::DescribeAvailablePatchesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_effective_instance_associations_output_next_token(
    input: &crate::operation::describe_effective_instance_associations::DescribeEffectiveInstanceAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_effective_patches_for_patch_baseline_output_next_token(
    input: &crate::operation::describe_effective_patches_for_patch_baseline::DescribeEffectivePatchesForPatchBaselineOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_instance_associations_status_output_next_token(
    input: &crate::operation::describe_instance_associations_status::DescribeInstanceAssociationsStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_instance_information_output_next_token(
    input: &crate::operation::describe_instance_information::DescribeInstanceInformationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_instance_patch_states_output_next_token(
    input: &crate::operation::describe_instance_patch_states::DescribeInstancePatchStatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_instance_patch_states_for_patch_group_output_next_token(
    input: &crate::operation::describe_instance_patch_states_for_patch_group::DescribeInstancePatchStatesForPatchGroupOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_instance_patches_output_next_token(
    input: &crate::operation::describe_instance_patches::DescribeInstancePatchesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_inventory_deletions_output_next_token(
    input: &crate::operation::describe_inventory_deletions::DescribeInventoryDeletionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_maintenance_window_execution_task_invocations_output_next_token(
    input: &crate::operation::describe_maintenance_window_execution_task_invocations::DescribeMaintenanceWindowExecutionTaskInvocationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_maintenance_window_execution_tasks_output_next_token(
    input: &crate::operation::describe_maintenance_window_execution_tasks::DescribeMaintenanceWindowExecutionTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_maintenance_window_executions_output_next_token(
    input: &crate::operation::describe_maintenance_window_executions::DescribeMaintenanceWindowExecutionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_maintenance_window_schedule_output_next_token(
    input: &crate::operation::describe_maintenance_window_schedule::DescribeMaintenanceWindowScheduleOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_maintenance_window_targets_output_next_token(
    input: &crate::operation::describe_maintenance_window_targets::DescribeMaintenanceWindowTargetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_maintenance_window_tasks_output_next_token(
    input: &crate::operation::describe_maintenance_window_tasks::DescribeMaintenanceWindowTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_maintenance_windows_output_next_token(
    input: &crate::operation::describe_maintenance_windows::DescribeMaintenanceWindowsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_maintenance_windows_for_target_output_next_token(
    input: &crate::operation::describe_maintenance_windows_for_target::DescribeMaintenanceWindowsForTargetOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_ops_items_output_next_token(
    input: &crate::operation::describe_ops_items::DescribeOpsItemsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_parameters_output_next_token(
    input: &crate::operation::describe_parameters::DescribeParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_patch_baselines_output_next_token(
    input: &crate::operation::describe_patch_baselines::DescribePatchBaselinesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_patch_groups_output_next_token(
    input: &crate::operation::describe_patch_groups::DescribePatchGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_patch_properties_output_next_token(
    input: &crate::operation::describe_patch_properties::DescribePatchPropertiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_sessions_output_next_token(
    input: &crate::operation::describe_sessions::DescribeSessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_inventory_output_next_token(
    input: &crate::operation::get_inventory::GetInventoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_inventory_schema_output_next_token(
    input: &crate::operation::get_inventory_schema::GetInventorySchemaOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_ops_summary_output_next_token(
    input: &crate::operation::get_ops_summary::GetOpsSummaryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_parameter_history_output_next_token(
    input: &crate::operation::get_parameter_history::GetParameterHistoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_parameters_by_path_output_next_token(
    input: &crate::operation::get_parameters_by_path::GetParametersByPathOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_resource_policies_output_next_token(
    input: &crate::operation::get_resource_policies::GetResourcePoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_association_versions_output_next_token(
    input: &crate::operation::list_association_versions::ListAssociationVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_associations_output_next_token(
    input: &crate::operation::list_associations::ListAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_command_invocations_output_next_token(
    input: &crate::operation::list_command_invocations::ListCommandInvocationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_commands_output_next_token(
    input: &crate::operation::list_commands::ListCommandsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_compliance_items_output_next_token(
    input: &crate::operation::list_compliance_items::ListComplianceItemsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_compliance_summaries_output_next_token(
    input: &crate::operation::list_compliance_summaries::ListComplianceSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_document_versions_output_next_token(
    input: &crate::operation::list_document_versions::ListDocumentVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_documents_output_next_token(
    input: &crate::operation::list_documents::ListDocumentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_ops_item_events_output_next_token(
    input: &crate::operation::list_ops_item_events::ListOpsItemEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_ops_item_related_items_output_next_token(
    input: &crate::operation::list_ops_item_related_items::ListOpsItemRelatedItemsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_ops_metadata_output_next_token(
    input: &crate::operation::list_ops_metadata::ListOpsMetadataOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resource_compliance_summaries_output_next_token(
    input: &crate::operation::list_resource_compliance_summaries::ListResourceComplianceSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resource_data_sync_output_next_token(
    input: &crate::operation::list_resource_data_sync::ListResourceDataSyncOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_activations_output_activation_list(
    input: crate::operation::describe_activations::DescribeActivationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Activation>> {
    let input = match input.activation_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_association_execution_targets_output_association_execution_targets(
    input: crate::operation::describe_association_execution_targets::DescribeAssociationExecutionTargetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AssociationExecutionTarget>> {
    let input = match input.association_execution_targets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_association_executions_output_association_executions(
    input: crate::operation::describe_association_executions::DescribeAssociationExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AssociationExecution>> {
    let input = match input.association_executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_automation_executions_output_automation_execution_metadata_list(
    input: crate::operation::describe_automation_executions::DescribeAutomationExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AutomationExecutionMetadata>> {
    let input = match input.automation_execution_metadata_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_automation_step_executions_output_step_executions(
    input: crate::operation::describe_automation_step_executions::DescribeAutomationStepExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StepExecution>> {
    let input = match input.step_executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_available_patches_output_patches(
    input: crate::operation::describe_available_patches::DescribeAvailablePatchesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Patch>> {
    let input = match input.patches {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_effective_instance_associations_output_associations(
    input: crate::operation::describe_effective_instance_associations::DescribeEffectiveInstanceAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::InstanceAssociation>> {
    let input = match input.associations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_effective_patches_for_patch_baseline_output_effective_patches(
    input: crate::operation::describe_effective_patches_for_patch_baseline::DescribeEffectivePatchesForPatchBaselineOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EffectivePatch>> {
    let input = match input.effective_patches {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_instance_associations_status_output_instance_association_status_infos(
    input: crate::operation::describe_instance_associations_status::DescribeInstanceAssociationsStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::InstanceAssociationStatusInfo>> {
    let input = match input.instance_association_status_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_instance_information_output_instance_information_list(
    input: crate::operation::describe_instance_information::DescribeInstanceInformationOutput,
) -> std::option::Option<std::vec::Vec<crate::types::InstanceInformation>> {
    let input = match input.instance_information_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_instance_patch_states_output_instance_patch_states(
    input: crate::operation::describe_instance_patch_states::DescribeInstancePatchStatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::InstancePatchState>> {
    let input = match input.instance_patch_states {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_instance_patch_states_for_patch_group_output_instance_patch_states(
    input: crate::operation::describe_instance_patch_states_for_patch_group::DescribeInstancePatchStatesForPatchGroupOutput,
) -> std::option::Option<std::vec::Vec<crate::types::InstancePatchState>> {
    let input = match input.instance_patch_states {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_instance_patches_output_patches(
    input: crate::operation::describe_instance_patches::DescribeInstancePatchesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PatchComplianceData>> {
    let input = match input.patches {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_inventory_deletions_output_inventory_deletions(
    input: crate::operation::describe_inventory_deletions::DescribeInventoryDeletionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::InventoryDeletionStatusItem>> {
    let input = match input.inventory_deletions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_maintenance_window_execution_task_invocations_output_window_execution_task_invocation_identities(
    input: crate::operation::describe_maintenance_window_execution_task_invocations::DescribeMaintenanceWindowExecutionTaskInvocationsOutput,
) -> std::option::Option<
    std::vec::Vec<crate::types::MaintenanceWindowExecutionTaskInvocationIdentity>,
> {
    let input = match input.window_execution_task_invocation_identities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_maintenance_window_execution_tasks_output_window_execution_task_identities(
    input: crate::operation::describe_maintenance_window_execution_tasks::DescribeMaintenanceWindowExecutionTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MaintenanceWindowExecutionTaskIdentity>> {
    let input = match input.window_execution_task_identities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_maintenance_window_executions_output_window_executions(
    input: crate::operation::describe_maintenance_window_executions::DescribeMaintenanceWindowExecutionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MaintenanceWindowExecution>> {
    let input = match input.window_executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_maintenance_window_schedule_output_scheduled_window_executions(
    input: crate::operation::describe_maintenance_window_schedule::DescribeMaintenanceWindowScheduleOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ScheduledWindowExecution>> {
    let input = match input.scheduled_window_executions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_maintenance_window_targets_output_targets(
    input: crate::operation::describe_maintenance_window_targets::DescribeMaintenanceWindowTargetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MaintenanceWindowTarget>> {
    let input = match input.targets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_maintenance_window_tasks_output_tasks(
    input: crate::operation::describe_maintenance_window_tasks::DescribeMaintenanceWindowTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MaintenanceWindowTask>> {
    let input = match input.tasks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_maintenance_windows_output_window_identities(
    input: crate::operation::describe_maintenance_windows::DescribeMaintenanceWindowsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MaintenanceWindowIdentity>> {
    let input = match input.window_identities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_maintenance_windows_for_target_output_window_identities(
    input: crate::operation::describe_maintenance_windows_for_target::DescribeMaintenanceWindowsForTargetOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MaintenanceWindowIdentityForTarget>> {
    let input = match input.window_identities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_ops_items_output_ops_item_summaries(
    input: crate::operation::describe_ops_items::DescribeOpsItemsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OpsItemSummary>> {
    let input = match input.ops_item_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_patch_baselines_output_baseline_identities(
    input: crate::operation::describe_patch_baselines::DescribePatchBaselinesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PatchBaselineIdentity>> {
    let input = match input.baseline_identities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_patch_groups_output_mappings(
    input: crate::operation::describe_patch_groups::DescribePatchGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PatchGroupPatchBaselineMapping>> {
    let input = match input.mappings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_patch_properties_output_properties(
    input: crate::operation::describe_patch_properties::DescribePatchPropertiesOutput,
) -> std::option::Option<
    std::vec::Vec<std::collections::HashMap<std::string::String, std::string::String>>,
> {
    let input = match input.properties {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_sessions_output_sessions(
    input: crate::operation::describe_sessions::DescribeSessionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Session>> {
    let input = match input.sessions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_inventory_output_entities(
    input: crate::operation::get_inventory::GetInventoryOutput,
) -> std::option::Option<std::vec::Vec<crate::types::InventoryResultEntity>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_inventory_schema_output_schemas(
    input: crate::operation::get_inventory_schema::GetInventorySchemaOutput,
) -> std::option::Option<std::vec::Vec<crate::types::InventoryItemSchema>> {
    let input = match input.schemas {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_ops_summary_output_entities(
    input: crate::operation::get_ops_summary::GetOpsSummaryOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OpsEntity>> {
    let input = match input.entities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_resource_policies_output_policies(
    input: crate::operation::get_resource_policies::GetResourcePoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GetResourcePoliciesResponseEntry>> {
    let input = match input.policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_association_versions_output_association_versions(
    input: crate::operation::list_association_versions::ListAssociationVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AssociationVersionInfo>> {
    let input = match input.association_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_associations_output_associations(
    input: crate::operation::list_associations::ListAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Association>> {
    let input = match input.associations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_command_invocations_output_command_invocations(
    input: crate::operation::list_command_invocations::ListCommandInvocationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CommandInvocation>> {
    let input = match input.command_invocations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_commands_output_commands(
    input: crate::operation::list_commands::ListCommandsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Command>> {
    let input = match input.commands {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_compliance_items_output_compliance_items(
    input: crate::operation::list_compliance_items::ListComplianceItemsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ComplianceItem>> {
    let input = match input.compliance_items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_compliance_summaries_output_compliance_summary_items(
    input: crate::operation::list_compliance_summaries::ListComplianceSummariesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ComplianceSummaryItem>> {
    let input = match input.compliance_summary_items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_document_versions_output_document_versions(
    input: crate::operation::list_document_versions::ListDocumentVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DocumentVersionInfo>> {
    let input = match input.document_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_documents_output_document_identifiers(
    input: crate::operation::list_documents::ListDocumentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DocumentIdentifier>> {
    let input = match input.document_identifiers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_ops_item_events_output_summaries(
    input: crate::operation::list_ops_item_events::ListOpsItemEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OpsItemEventSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_ops_item_related_items_output_summaries(
    input: crate::operation::list_ops_item_related_items::ListOpsItemRelatedItemsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OpsItemRelatedItemSummary>> {
    let input = match input.summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_ops_metadata_output_ops_metadata_list(
    input: crate::operation::list_ops_metadata::ListOpsMetadataOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OpsMetadata>> {
    let input = match input.ops_metadata_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_resource_compliance_summaries_output_resource_compliance_summary_items(
    input: crate::operation::list_resource_compliance_summaries::ListResourceComplianceSummariesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ResourceComplianceSummaryItem>> {
    let input = match input.resource_compliance_summary_items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_resource_data_sync_output_resource_data_sync_items(
    input: crate::operation::list_resource_data_sync::ListResourceDataSyncOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ResourceDataSyncItem>> {
    let input = match input.resource_data_sync_items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
