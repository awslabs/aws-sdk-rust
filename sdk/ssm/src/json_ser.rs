// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_tags_to_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.resource_type {
        object.key("ResourceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_ops_item_related_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateOpsItemRelatedItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.ops_item_id {
        object.key("OpsItemId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.association_type {
        object.key("AssociationType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.resource_type {
        object.key("ResourceType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.resource_uri {
        object.key("ResourceUri").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_command_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelCommandInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.command_id {
        object.key("CommandId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.instance_ids {
        let mut array_13 = object.key("InstanceIds").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_maintenance_window_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMaintenanceWindowExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_15.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_activation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActivationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.description {
        object.key("Description").string(var_16.as_str());
    }
    if let Some(var_17) = &input.default_instance_name {
        object.key("DefaultInstanceName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.iam_role {
        object.key("IamRole").string(var_18.as_str());
    }
    if let Some(var_19) = &input.registration_limit {
        object.key("RegistrationLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.expiration_date {
        object
            .key("ExpirationDate")
            .date_time(var_20, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.registration_metadata {
        let mut array_26 = object.key("RegistrationMetadata").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_crate_model_registration_metadata_item(
                    &mut object_28,
                    item_27,
                )?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.name {
        object.key("Name").string(var_29.as_str());
    }
    if let Some(var_30) = &input.document_version {
        object.key("DocumentVersion").string(var_30.as_str());
    }
    if let Some(var_31) = &input.instance_id {
        object.key("InstanceId").string(var_31.as_str());
    }
    if let Some(var_32) = &input.parameters {
        let mut object_33 = object.key("Parameters").start_object();
        for (key_34, value_35) in var_32 {
            {
                let mut array_36 = object_33.key(key_34).start_array();
                for item_37 in value_35 {
                    {
                        array_36.value().string(item_37.as_str());
                    }
                }
                array_36.finish();
            }
        }
        object_33.finish();
    }
    if let Some(var_38) = &input.targets {
        let mut array_39 = object.key("Targets").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_42.as_str());
    }
    if let Some(var_43) = &input.output_location {
        let mut object_44 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(
            &mut object_44,
            var_43,
        )?;
        object_44.finish();
    }
    if let Some(var_45) = &input.association_name {
        object.key("AssociationName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.automation_target_parameter_name {
        object
            .key("AutomationTargetParameterName")
            .string(var_46.as_str());
    }
    if let Some(var_47) = &input.max_errors {
        object.key("MaxErrors").string(var_47.as_str());
    }
    if let Some(var_48) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_48.as_str());
    }
    if let Some(var_49) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_49.as_str());
    }
    if let Some(var_50) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_50.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_51) = &input.calendar_names {
        let mut array_52 = object.key("CalendarNames").start_array();
        for item_53 in var_51 {
            {
                array_52.value().string(item_53.as_str());
            }
        }
        array_52.finish();
    }
    if let Some(var_54) = &input.target_locations {
        let mut array_55 = object.key("TargetLocations").start_array();
        for item_56 in var_54 {
            {
                let mut object_57 = array_55.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_57,
                    item_56,
                )?;
                object_57.finish();
            }
        }
        array_55.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_association_batch_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssociationBatchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_58) = &input.entries {
        let mut array_59 = object.key("Entries").start_array();
        for item_60 in var_58 {
            {
                let mut object_61 = array_59.value().start_object();
                crate::json_ser::serialize_structure_crate_model_create_association_batch_request_entry(&mut object_61, item_60)?;
                object_61.finish();
            }
        }
        array_59.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.content {
        object.key("Content").string(var_62.as_str());
    }
    if let Some(var_63) = &input.requires {
        let mut array_64 = object.key("Requires").start_array();
        for item_65 in var_63 {
            {
                let mut object_66 = array_64.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_requires(
                    &mut object_66,
                    item_65,
                )?;
                object_66.finish();
            }
        }
        array_64.finish();
    }
    if let Some(var_67) = &input.attachments {
        let mut array_68 = object.key("Attachments").start_array();
        for item_69 in var_67 {
            {
                let mut object_70 = array_68.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachments_source(
                    &mut object_70,
                    item_69,
                )?;
                object_70.finish();
            }
        }
        array_68.finish();
    }
    if let Some(var_71) = &input.name {
        object.key("Name").string(var_71.as_str());
    }
    if let Some(var_72) = &input.display_name {
        object.key("DisplayName").string(var_72.as_str());
    }
    if let Some(var_73) = &input.version_name {
        object.key("VersionName").string(var_73.as_str());
    }
    if let Some(var_74) = &input.document_type {
        object.key("DocumentType").string(var_74.as_str());
    }
    if let Some(var_75) = &input.document_format {
        object.key("DocumentFormat").string(var_75.as_str());
    }
    if let Some(var_76) = &input.target_type {
        object.key("TargetType").string(var_76.as_str());
    }
    if let Some(var_77) = &input.tags {
        let mut array_78 = object.key("Tags").start_array();
        for item_79 in var_77 {
            {
                let mut object_80 = array_78.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_80, item_79)?;
                object_80.finish();
            }
        }
        array_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.name {
        object.key("Name").string(var_81.as_str());
    }
    if let Some(var_82) = &input.description {
        object.key("Description").string(var_82.as_str());
    }
    if let Some(var_83) = &input.start_date {
        object.key("StartDate").string(var_83.as_str());
    }
    if let Some(var_84) = &input.end_date {
        object.key("EndDate").string(var_84.as_str());
    }
    if let Some(var_85) = &input.schedule {
        object.key("Schedule").string(var_85.as_str());
    }
    if let Some(var_86) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_86.as_str());
    }
    if let Some(var_87) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_87).into()),
        );
    }
    {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.duration).into()),
        );
    }
    {
        object.key("Cutoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.cutoff).into()),
        );
    }
    {
        object
            .key("AllowUnassociatedTargets")
            .boolean(input.allow_unassociated_targets);
    }
    if let Some(var_88) = &input.client_token {
        object.key("ClientToken").string(var_88.as_str());
    }
    if let Some(var_89) = &input.tags {
        let mut array_90 = object.key("Tags").start_array();
        for item_91 in var_89 {
            {
                let mut object_92 = array_90.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_92, item_91)?;
                object_92.finish();
            }
        }
        array_90.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ops_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOpsItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.description {
        object.key("Description").string(var_93.as_str());
    }
    if let Some(var_94) = &input.ops_item_type {
        object.key("OpsItemType").string(var_94.as_str());
    }
    if let Some(var_95) = &input.operational_data {
        let mut object_96 = object.key("OperationalData").start_object();
        for (key_97, value_98) in var_95 {
            {
                let mut object_99 = object_96.key(key_97).start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_data_value(
                    &mut object_99,
                    value_98,
                )?;
                object_99.finish();
            }
        }
        object_96.finish();
    }
    if let Some(var_100) = &input.notifications {
        let mut array_101 = object.key("Notifications").start_array();
        for item_102 in var_100 {
            {
                let mut object_103 = array_101.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_notification(
                    &mut object_103,
                    item_102,
                )?;
                object_103.finish();
            }
        }
        array_101.finish();
    }
    if let Some(var_104) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    if let Some(var_105) = &input.related_ops_items {
        let mut array_106 = object.key("RelatedOpsItems").start_array();
        for item_107 in var_105 {
            {
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_ops_item(
                    &mut object_108,
                    item_107,
                )?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.source {
        object.key("Source").string(var_109.as_str());
    }
    if let Some(var_110) = &input.title {
        object.key("Title").string(var_110.as_str());
    }
    if let Some(var_111) = &input.tags {
        let mut array_112 = object.key("Tags").start_array();
        for item_113 in var_111 {
            {
                let mut object_114 = array_112.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_114, item_113)?;
                object_114.finish();
            }
        }
        array_112.finish();
    }
    if let Some(var_115) = &input.category {
        object.key("Category").string(var_115.as_str());
    }
    if let Some(var_116) = &input.severity {
        object.key("Severity").string(var_116.as_str());
    }
    if let Some(var_117) = &input.actual_start_time {
        object
            .key("ActualStartTime")
            .date_time(var_117, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_118) = &input.actual_end_time {
        object
            .key("ActualEndTime")
            .date_time(var_118, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_119) = &input.planned_start_time {
        object
            .key("PlannedStartTime")
            .date_time(var_119, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_120) = &input.planned_end_time {
        object
            .key("PlannedEndTime")
            .date_time(var_120, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.resource_id {
        object.key("ResourceId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.metadata {
        let mut object_123 = object.key("Metadata").start_object();
        for (key_124, value_125) in var_122 {
            {
                let mut object_126 = object_123.key(key_124).start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_value(
                    &mut object_126,
                    value_125,
                )?;
                object_126.finish();
            }
        }
        object_123.finish();
    }
    if let Some(var_127) = &input.tags {
        let mut array_128 = object.key("Tags").start_array();
        for item_129 in var_127 {
            {
                let mut object_130 = array_128.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_130, item_129)?;
                object_130.finish();
            }
        }
        array_128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.operating_system {
        object.key("OperatingSystem").string(var_131.as_str());
    }
    if let Some(var_132) = &input.name {
        object.key("Name").string(var_132.as_str());
    }
    if let Some(var_133) = &input.global_filters {
        let mut object_134 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_134,
            var_133,
        )?;
        object_134.finish();
    }
    if let Some(var_135) = &input.approval_rules {
        let mut object_136 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(
            &mut object_136,
            var_135,
        )?;
        object_136.finish();
    }
    if let Some(var_137) = &input.approved_patches {
        let mut array_138 = object.key("ApprovedPatches").start_array();
        for item_139 in var_137 {
            {
                array_138.value().string(item_139.as_str());
            }
        }
        array_138.finish();
    }
    if let Some(var_140) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_140.as_str());
    }
    if let Some(var_141) = &input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(*var_141);
    }
    if let Some(var_142) = &input.rejected_patches {
        let mut array_143 = object.key("RejectedPatches").start_array();
        for item_144 in var_142 {
            {
                array_143.value().string(item_144.as_str());
            }
        }
        array_143.finish();
    }
    if let Some(var_145) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_145.as_str());
    }
    if let Some(var_146) = &input.description {
        object.key("Description").string(var_146.as_str());
    }
    if let Some(var_147) = &input.sources {
        let mut array_148 = object.key("Sources").start_array();
        for item_149 in var_147 {
            {
                let mut object_150 = array_148.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(
                    &mut object_150,
                    item_149,
                )?;
                object_150.finish();
            }
        }
        array_148.finish();
    }
    if let Some(var_151) = &input.client_token {
        object.key("ClientToken").string(var_151.as_str());
    }
    if let Some(var_152) = &input.tags {
        let mut array_153 = object.key("Tags").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_155, item_154)?;
                object_155.finish();
            }
        }
        array_153.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_156) = &input.sync_name {
        object.key("SyncName").string(var_156.as_str());
    }
    if let Some(var_157) = &input.s3_destination {
        let mut object_158 = object.key("S3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_s3_destination(
            &mut object_158,
            var_157,
        )?;
        object_158.finish();
    }
    if let Some(var_159) = &input.sync_type {
        object.key("SyncType").string(var_159.as_str());
    }
    if let Some(var_160) = &input.sync_source {
        let mut object_161 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_source(
            &mut object_161,
            var_160,
        )?;
        object_161.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_activation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActivationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_162) = &input.activation_id {
        object.key("ActivationId").string(var_162.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.name {
        object.key("Name").string(var_163.as_str());
    }
    if let Some(var_164) = &input.instance_id {
        object.key("InstanceId").string(var_164.as_str());
    }
    if let Some(var_165) = &input.association_id {
        object.key("AssociationId").string(var_165.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.name {
        object.key("Name").string(var_166.as_str());
    }
    if let Some(var_167) = &input.document_version {
        object.key("DocumentVersion").string(var_167.as_str());
    }
    if let Some(var_168) = &input.version_name {
        object.key("VersionName").string(var_168.as_str());
    }
    if input.force {
        object.key("Force").boolean(input.force);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_inventory_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInventoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.type_name {
        object.key("TypeName").string(var_169.as_str());
    }
    if let Some(var_170) = &input.schema_delete_option {
        object.key("SchemaDeleteOption").string(var_170.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_171) = &input.client_token {
        object.key("ClientToken").string(var_171.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.window_id {
        object.key("WindowId").string(var_172.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_173) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_173.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_parameter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteParameterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.name {
        object.key("Name").string(var_174.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_175) = &input.names {
        let mut array_176 = object.key("Names").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177.as_str());
            }
        }
        array_176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.baseline_id {
        object.key("BaselineId").string(var_178.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.sync_name {
        object.key("SyncName").string(var_179.as_str());
    }
    if let Some(var_180) = &input.sync_type {
        object.key("SyncType").string(var_180.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_managed_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterManagedInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.instance_id {
        object.key("InstanceId").string(var_181.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_patch_baseline_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterPatchBaselineForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.baseline_id {
        object.key("BaselineId").string(var_182.as_str());
    }
    if let Some(var_183) = &input.patch_group {
        object.key("PatchGroup").string(var_183.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_target_from_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTargetFromMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.window_id {
        object.key("WindowId").string(var_184.as_str());
    }
    if let Some(var_185) = &input.window_target_id {
        object.key("WindowTargetId").string(var_185.as_str());
    }
    if let Some(var_186) = &input.safe {
        object.key("Safe").boolean(*var_186);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_task_from_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTaskFromMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_187) = &input.window_id {
        object.key("WindowId").string(var_187.as_str());
    }
    if let Some(var_188) = &input.window_task_id {
        object.key("WindowTaskId").string(var_188.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_activations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActivationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.filters {
        let mut array_190 = object.key("Filters").start_array();
        for item_191 in var_189 {
            {
                let mut object_192 = array_190.value().start_object();
                crate::json_ser::serialize_structure_crate_model_describe_activations_filter(
                    &mut object_192,
                    item_191,
                )?;
                object_192.finish();
            }
        }
        array_190.finish();
    }
    if let Some(var_193) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_193).into()),
        );
    }
    if let Some(var_194) = &input.next_token {
        object.key("NextToken").string(var_194.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.name {
        object.key("Name").string(var_195.as_str());
    }
    if let Some(var_196) = &input.instance_id {
        object.key("InstanceId").string(var_196.as_str());
    }
    if let Some(var_197) = &input.association_id {
        object.key("AssociationId").string(var_197.as_str());
    }
    if let Some(var_198) = &input.association_version {
        object.key("AssociationVersion").string(var_198.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_199) = &input.association_id {
        object.key("AssociationId").string(var_199.as_str());
    }
    if let Some(var_200) = &input.filters {
        let mut array_201 = object.key("Filters").start_array();
        for item_202 in var_200 {
            {
                let mut object_203 = array_201.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_execution_filter(
                    &mut object_203,
                    item_202,
                )?;
                object_203.finish();
            }
        }
        array_201.finish();
    }
    if let Some(var_204) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_204).into()),
        );
    }
    if let Some(var_205) = &input.next_token {
        object.key("NextToken").string(var_205.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_association_execution_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationExecutionTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.association_id {
        object.key("AssociationId").string(var_206.as_str());
    }
    if let Some(var_207) = &input.execution_id {
        object.key("ExecutionId").string(var_207.as_str());
    }
    if let Some(var_208) = &input.filters {
        let mut array_209 = object.key("Filters").start_array();
        for item_210 in var_208 {
            {
                let mut object_211 = array_209.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_execution_targets_filter(&mut object_211, item_210)?;
                object_211.finish();
            }
        }
        array_209.finish();
    }
    if let Some(var_212) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    if let Some(var_213) = &input.next_token {
        object.key("NextToken").string(var_213.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_automation_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutomationExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_214) = &input.filters {
        let mut array_215 = object.key("Filters").start_array();
        for item_216 in var_214 {
            {
                let mut object_217 = array_215.value().start_object();
                crate::json_ser::serialize_structure_crate_model_automation_execution_filter(
                    &mut object_217,
                    item_216,
                )?;
                object_217.finish();
            }
        }
        array_215.finish();
    }
    if let Some(var_218) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_218).into()),
        );
    }
    if let Some(var_219) = &input.next_token {
        object.key("NextToken").string(var_219.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_automation_step_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutomationStepExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_220.as_str());
    }
    if let Some(var_221) = &input.filters {
        let mut array_222 = object.key("Filters").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_step_execution_filter(
                    &mut object_224,
                    item_223,
                )?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    if let Some(var_225) = &input.next_token {
        object.key("NextToken").string(var_225.as_str());
    }
    if let Some(var_226) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_226).into()),
        );
    }
    if let Some(var_227) = &input.reverse_order {
        object.key("ReverseOrder").boolean(*var_227);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_available_patches_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAvailablePatchesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.filters {
        let mut array_229 = object.key("Filters").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_231,
                    item_230,
                )?;
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_232).into()),
        );
    }
    if let Some(var_233) = &input.next_token {
        object.key("NextToken").string(var_233.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.name {
        object.key("Name").string(var_234.as_str());
    }
    if let Some(var_235) = &input.document_version {
        object.key("DocumentVersion").string(var_235.as_str());
    }
    if let Some(var_236) = &input.version_name {
        object.key("VersionName").string(var_236.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_document_permission_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentPermissionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.name {
        object.key("Name").string(var_237.as_str());
    }
    if let Some(var_238) = &input.permission_type {
        object.key("PermissionType").string(var_238.as_str());
    }
    if let Some(var_239) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_239).into()),
        );
    }
    if let Some(var_240) = &input.next_token {
        object.key("NextToken").string(var_240.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_effective_instance_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEffectiveInstanceAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.instance_id {
        object.key("InstanceId").string(var_241.as_str());
    }
    if let Some(var_242) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_242).into()),
        );
    }
    if let Some(var_243) = &input.next_token {
        object.key("NextToken").string(var_243.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_effective_patches_for_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEffectivePatchesForPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.baseline_id {
        object.key("BaselineId").string(var_244.as_str());
    }
    if let Some(var_245) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_245).into()),
        );
    }
    if let Some(var_246) = &input.next_token {
        object.key("NextToken").string(var_246.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_associations_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstanceAssociationsStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.instance_id {
        object.key("InstanceId").string(var_247.as_str());
    }
    if let Some(var_248) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_248).into()),
        );
    }
    if let Some(var_249) = &input.next_token {
        object.key("NextToken").string(var_249.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_information_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstanceInformationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_250) = &input.instance_information_filter_list {
        let mut array_251 = object.key("InstanceInformationFilterList").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_information_filter(
                    &mut object_253,
                    item_252,
                )?;
                object_253.finish();
            }
        }
        array_251.finish();
    }
    if let Some(var_254) = &input.filters {
        let mut array_255 = object.key("Filters").start_array();
        for item_256 in var_254 {
            {
                let mut object_257 = array_255.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_information_string_filter(&mut object_257, item_256)?;
                object_257.finish();
            }
        }
        array_255.finish();
    }
    if let Some(var_258) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_258).into()),
        );
    }
    if let Some(var_259) = &input.next_token {
        object.key("NextToken").string(var_259.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patches_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.instance_id {
        object.key("InstanceId").string(var_260.as_str());
    }
    if let Some(var_261) = &input.filters {
        let mut array_262 = object.key("Filters").start_array();
        for item_263 in var_261 {
            {
                let mut object_264 = array_262.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_264,
                    item_263,
                )?;
                object_264.finish();
            }
        }
        array_262.finish();
    }
    if let Some(var_265) = &input.next_token {
        object.key("NextToken").string(var_265.as_str());
    }
    if let Some(var_266) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_266).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patch_states_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchStatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_267) = &input.instance_ids {
        let mut array_268 = object.key("InstanceIds").start_array();
        for item_269 in var_267 {
            {
                array_268.value().string(item_269.as_str());
            }
        }
        array_268.finish();
    }
    if let Some(var_270) = &input.next_token {
        object.key("NextToken").string(var_270.as_str());
    }
    if let Some(var_271) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_271).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_instance_patch_states_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchStatesForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.patch_group {
        object.key("PatchGroup").string(var_272.as_str());
    }
    if let Some(var_273) = &input.filters {
        let mut array_274 = object.key("Filters").start_array();
        for item_275 in var_273 {
            {
                let mut object_276 = array_274.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_patch_state_filter(
                    &mut object_276,
                    item_275,
                )?;
                object_276.finish();
            }
        }
        array_274.finish();
    }
    if let Some(var_277) = &input.next_token {
        object.key("NextToken").string(var_277.as_str());
    }
    if let Some(var_278) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inventory_deletions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInventoryDeletionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_279) = &input.deletion_id {
        object.key("DeletionId").string(var_279.as_str());
    }
    if let Some(var_280) = &input.next_token {
        object.key("NextToken").string(var_280.as_str());
    }
    if let Some(var_281) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_281).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_282) = &input.window_id {
        object.key("WindowId").string(var_282.as_str());
    }
    if let Some(var_283) = &input.filters {
        let mut array_284 = object.key("Filters").start_array();
        for item_285 in var_283 {
            {
                let mut object_286 = array_284.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_286,
                    item_285,
                )?;
                object_286.finish();
            }
        }
        array_284.finish();
    }
    if let Some(var_287) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_287).into()),
        );
    }
    if let Some(var_288) = &input.next_token {
        object.key("NextToken").string(var_288.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_execution_task_invocations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionTaskInvocationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_289) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_289.as_str());
    }
    if let Some(var_290) = &input.task_id {
        object.key("TaskId").string(var_290.as_str());
    }
    if let Some(var_291) = &input.filters {
        let mut array_292 = object.key("Filters").start_array();
        for item_293 in var_291 {
            {
                let mut object_294 = array_292.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_294,
                    item_293,
                )?;
                object_294.finish();
            }
        }
        array_292.finish();
    }
    if let Some(var_295) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_295).into()),
        );
    }
    if let Some(var_296) = &input.next_token {
        object.key("NextToken").string(var_296.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_execution_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_297) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_297.as_str());
    }
    if let Some(var_298) = &input.filters {
        let mut array_299 = object.key("Filters").start_array();
        for item_300 in var_298 {
            {
                let mut object_301 = array_299.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_301,
                    item_300,
                )?;
                object_301.finish();
            }
        }
        array_299.finish();
    }
    if let Some(var_302) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_302).into()),
        );
    }
    if let Some(var_303) = &input.next_token {
        object.key("NextToken").string(var_303.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_windows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_304) = &input.filters {
        let mut array_305 = object.key("Filters").start_array();
        for item_306 in var_304 {
            {
                let mut object_307 = array_305.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_307,
                    item_306,
                )?;
                object_307.finish();
            }
        }
        array_305.finish();
    }
    if let Some(var_308) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_308).into()),
        );
    }
    if let Some(var_309) = &input.next_token {
        object.key("NextToken").string(var_309.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_schedule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowScheduleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.window_id {
        object.key("WindowId").string(var_310.as_str());
    }
    if let Some(var_311) = &input.targets {
        let mut array_312 = object.key("Targets").start_array();
        for item_313 in var_311 {
            {
                let mut object_314 = array_312.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_314, item_313)?;
                object_314.finish();
            }
        }
        array_312.finish();
    }
    if let Some(var_315) = &input.resource_type {
        object.key("ResourceType").string(var_315.as_str());
    }
    if let Some(var_316) = &input.filters {
        let mut array_317 = object.key("Filters").start_array();
        for item_318 in var_316 {
            {
                let mut object_319 = array_317.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_319,
                    item_318,
                )?;
                object_319.finish();
            }
        }
        array_317.finish();
    }
    if let Some(var_320) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_320).into()),
        );
    }
    if let Some(var_321) = &input.next_token {
        object.key("NextToken").string(var_321.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_windows_for_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowsForTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_322) = &input.targets {
        let mut array_323 = object.key("Targets").start_array();
        for item_324 in var_322 {
            {
                let mut object_325 = array_323.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_325, item_324)?;
                object_325.finish();
            }
        }
        array_323.finish();
    }
    if let Some(var_326) = &input.resource_type {
        object.key("ResourceType").string(var_326.as_str());
    }
    if let Some(var_327) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_327).into()),
        );
    }
    if let Some(var_328) = &input.next_token {
        object.key("NextToken").string(var_328.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_targets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowTargetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.window_id {
        object.key("WindowId").string(var_329.as_str());
    }
    if let Some(var_330) = &input.filters {
        let mut array_331 = object.key("Filters").start_array();
        for item_332 in var_330 {
            {
                let mut object_333 = array_331.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_333,
                    item_332,
                )?;
                object_333.finish();
            }
        }
        array_331.finish();
    }
    if let Some(var_334) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_334).into()),
        );
    }
    if let Some(var_335) = &input.next_token {
        object.key("NextToken").string(var_335.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_maintenance_window_tasks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowTasksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.window_id {
        object.key("WindowId").string(var_336.as_str());
    }
    if let Some(var_337) = &input.filters {
        let mut array_338 = object.key("Filters").start_array();
        for item_339 in var_337 {
            {
                let mut object_340 = array_338.value().start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_filter(
                    &mut object_340,
                    item_339,
                )?;
                object_340.finish();
            }
        }
        array_338.finish();
    }
    if let Some(var_341) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_341).into()),
        );
    }
    if let Some(var_342) = &input.next_token {
        object.key("NextToken").string(var_342.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_ops_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOpsItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.ops_item_filters {
        let mut array_344 = object.key("OpsItemFilters").start_array();
        for item_345 in var_343 {
            {
                let mut object_346 = array_344.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_filter(
                    &mut object_346,
                    item_345,
                )?;
                object_346.finish();
            }
        }
        array_344.finish();
    }
    if let Some(var_347) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_347).into()),
        );
    }
    if let Some(var_348) = &input.next_token {
        object.key("NextToken").string(var_348.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.filters {
        let mut array_350 = object.key("Filters").start_array();
        for item_351 in var_349 {
            {
                let mut object_352 = array_350.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameters_filter(
                    &mut object_352,
                    item_351,
                )?;
                object_352.finish();
            }
        }
        array_350.finish();
    }
    if let Some(var_353) = &input.parameter_filters {
        let mut array_354 = object.key("ParameterFilters").start_array();
        for item_355 in var_353 {
            {
                let mut object_356 = array_354.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter_string_filter(
                    &mut object_356,
                    item_355,
                )?;
                object_356.finish();
            }
        }
        array_354.finish();
    }
    if let Some(var_357) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_357).into()),
        );
    }
    if let Some(var_358) = &input.next_token {
        object.key("NextToken").string(var_358.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_baselines_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchBaselinesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_359) = &input.filters {
        let mut array_360 = object.key("Filters").start_array();
        for item_361 in var_359 {
            {
                let mut object_362 = array_360.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_362,
                    item_361,
                )?;
                object_362.finish();
            }
        }
        array_360.finish();
    }
    if let Some(var_363) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_363).into()),
        );
    }
    if let Some(var_364) = &input.next_token {
        object.key("NextToken").string(var_364.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_365) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_365).into()),
        );
    }
    if let Some(var_366) = &input.filters {
        let mut array_367 = object.key("Filters").start_array();
        for item_368 in var_366 {
            {
                let mut object_369 = array_367.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_orchestrator_filter(
                    &mut object_369,
                    item_368,
                )?;
                object_369.finish();
            }
        }
        array_367.finish();
    }
    if let Some(var_370) = &input.next_token {
        object.key("NextToken").string(var_370.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_group_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchGroupStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.patch_group {
        object.key("PatchGroup").string(var_371.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_patch_properties_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchPropertiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.operating_system {
        object.key("OperatingSystem").string(var_372.as_str());
    }
    if let Some(var_373) = &input.property {
        object.key("Property").string(var_373.as_str());
    }
    if let Some(var_374) = &input.patch_set {
        object.key("PatchSet").string(var_374.as_str());
    }
    if let Some(var_375) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_375).into()),
        );
    }
    if let Some(var_376) = &input.next_token {
        object.key("NextToken").string(var_376.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.state {
        object.key("State").string(var_377.as_str());
    }
    if let Some(var_378) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_378).into()),
        );
    }
    if let Some(var_379) = &input.next_token {
        object.key("NextToken").string(var_379.as_str());
    }
    if let Some(var_380) = &input.filters {
        let mut array_381 = object.key("Filters").start_array();
        for item_382 in var_380 {
            {
                let mut object_383 = array_381.value().start_object();
                crate::json_ser::serialize_structure_crate_model_session_filter(
                    &mut object_383,
                    item_382,
                )?;
                object_383.finish();
            }
        }
        array_381.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_ops_item_related_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateOpsItemRelatedItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_384) = &input.ops_item_id {
        object.key("OpsItemId").string(var_384.as_str());
    }
    if let Some(var_385) = &input.association_id {
        object.key("AssociationId").string(var_385.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_automation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutomationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_386) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_386.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_calendar_state_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCalendarStateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.calendar_names {
        let mut array_388 = object.key("CalendarNames").start_array();
        for item_389 in var_387 {
            {
                array_388.value().string(item_389.as_str());
            }
        }
        array_388.finish();
    }
    if let Some(var_390) = &input.at_time {
        object.key("AtTime").string(var_390.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_command_invocation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCommandInvocationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.command_id {
        object.key("CommandId").string(var_391.as_str());
    }
    if let Some(var_392) = &input.instance_id {
        object.key("InstanceId").string(var_392.as_str());
    }
    if let Some(var_393) = &input.plugin_name {
        object.key("PluginName").string(var_393.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_connection_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_394) = &input.target {
        object.key("Target").string(var_394.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_default_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDefaultPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_395) = &input.operating_system {
        object.key("OperatingSystem").string(var_395.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_deployable_patch_snapshot_for_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeployablePatchSnapshotForInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.instance_id {
        object.key("InstanceId").string(var_396.as_str());
    }
    if let Some(var_397) = &input.snapshot_id {
        object.key("SnapshotId").string(var_397.as_str());
    }
    if let Some(var_398) = &input.baseline_override {
        let mut object_399 = object.key("BaselineOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_baseline_override(
            &mut object_399,
            var_398,
        )?;
        object_399.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_400) = &input.name {
        object.key("Name").string(var_400.as_str());
    }
    if let Some(var_401) = &input.version_name {
        object.key("VersionName").string(var_401.as_str());
    }
    if let Some(var_402) = &input.document_version {
        object.key("DocumentVersion").string(var_402.as_str());
    }
    if let Some(var_403) = &input.document_format {
        object.key("DocumentFormat").string(var_403.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_inventory_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInventoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.filters {
        let mut array_405 = object.key("Filters").start_array();
        for item_406 in var_404 {
            {
                let mut object_407 = array_405.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_407,
                    item_406,
                )?;
                object_407.finish();
            }
        }
        array_405.finish();
    }
    if let Some(var_408) = &input.aggregators {
        let mut array_409 = object.key("Aggregators").start_array();
        for item_410 in var_408 {
            {
                let mut object_411 = array_409.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_aggregator(
                    &mut object_411,
                    item_410,
                )?;
                object_411.finish();
            }
        }
        array_409.finish();
    }
    if let Some(var_412) = &input.result_attributes {
        let mut array_413 = object.key("ResultAttributes").start_array();
        for item_414 in var_412 {
            {
                let mut object_415 = array_413.value().start_object();
                crate::json_ser::serialize_structure_crate_model_result_attribute(
                    &mut object_415,
                    item_414,
                )?;
                object_415.finish();
            }
        }
        array_413.finish();
    }
    if let Some(var_416) = &input.next_token {
        object.key("NextToken").string(var_416.as_str());
    }
    if let Some(var_417) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_417).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_inventory_schema_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInventorySchemaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.type_name {
        object.key("TypeName").string(var_418.as_str());
    }
    if let Some(var_419) = &input.next_token {
        object.key("NextToken").string(var_419.as_str());
    }
    if let Some(var_420) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_420).into()),
        );
    }
    if input.aggregator {
        object.key("Aggregator").boolean(input.aggregator);
    }
    if let Some(var_421) = &input.sub_type {
        object.key("SubType").boolean(*var_421);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_422) = &input.window_id {
        object.key("WindowId").string(var_422.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_423.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_424) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_424.as_str());
    }
    if let Some(var_425) = &input.task_id {
        object.key("TaskId").string(var_425.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_execution_task_invocation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionTaskInvocationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_426.as_str());
    }
    if let Some(var_427) = &input.task_id {
        object.key("TaskId").string(var_427.as_str());
    }
    if let Some(var_428) = &input.invocation_id {
        object.key("InvocationId").string(var_428.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_maintenance_window_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.window_id {
        object.key("WindowId").string(var_429.as_str());
    }
    if let Some(var_430) = &input.window_task_id {
        object.key("WindowTaskId").string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.ops_item_id {
        object.key("OpsItemId").string(var_431.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_432.as_str());
    }
    if let Some(var_433) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_433).into()),
        );
    }
    if let Some(var_434) = &input.next_token {
        object.key("NextToken").string(var_434.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_ops_summary_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsSummaryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_435) = &input.sync_name {
        object.key("SyncName").string(var_435.as_str());
    }
    if let Some(var_436) = &input.filters {
        let mut array_437 = object.key("Filters").start_array();
        for item_438 in var_436 {
            {
                let mut object_439 = array_437.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_filter(
                    &mut object_439,
                    item_438,
                )?;
                object_439.finish();
            }
        }
        array_437.finish();
    }
    if let Some(var_440) = &input.aggregators {
        let mut array_441 = object.key("Aggregators").start_array();
        for item_442 in var_440 {
            {
                let mut object_443 = array_441.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_aggregator(
                    &mut object_443,
                    item_442,
                )?;
                object_443.finish();
            }
        }
        array_441.finish();
    }
    if let Some(var_444) = &input.result_attributes {
        let mut array_445 = object.key("ResultAttributes").start_array();
        for item_446 in var_444 {
            {
                let mut object_447 = array_445.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_result_attribute(
                    &mut object_447,
                    item_446,
                )?;
                object_447.finish();
            }
        }
        array_445.finish();
    }
    if let Some(var_448) = &input.next_token {
        object.key("NextToken").string(var_448.as_str());
    }
    if let Some(var_449) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_449).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParameterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_450) = &input.name {
        object.key("Name").string(var_450.as_str());
    }
    if let Some(var_451) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_451);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameter_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParameterHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_452) = &input.name {
        object.key("Name").string(var_452.as_str());
    }
    if let Some(var_453) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_453);
    }
    if let Some(var_454) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_454).into()),
        );
    }
    if let Some(var_455) = &input.next_token {
        object.key("NextToken").string(var_455.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_456) = &input.names {
        let mut array_457 = object.key("Names").start_array();
        for item_458 in var_456 {
            {
                array_457.value().string(item_458.as_str());
            }
        }
        array_457.finish();
    }
    if let Some(var_459) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_459);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_parameters_by_path_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersByPathInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_460) = &input.path {
        object.key("Path").string(var_460.as_str());
    }
    if let Some(var_461) = &input.recursive {
        object.key("Recursive").boolean(*var_461);
    }
    if let Some(var_462) = &input.parameter_filters {
        let mut array_463 = object.key("ParameterFilters").start_array();
        for item_464 in var_462 {
            {
                let mut object_465 = array_463.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameter_string_filter(
                    &mut object_465,
                    item_464,
                )?;
                object_465.finish();
            }
        }
        array_463.finish();
    }
    if let Some(var_466) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_466);
    }
    if let Some(var_467) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_467).into()),
        );
    }
    if let Some(var_468) = &input.next_token {
        object.key("NextToken").string(var_468.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_469) = &input.baseline_id {
        object.key("BaselineId").string(var_469.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_patch_baseline_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPatchBaselineForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_470) = &input.patch_group {
        object.key("PatchGroup").string(var_470.as_str());
    }
    if let Some(var_471) = &input.operating_system {
        object.key("OperatingSystem").string(var_471.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_service_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetServiceSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.setting_id {
        object.key("SettingId").string(var_472.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_label_parameter_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::LabelParameterVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.name {
        object.key("Name").string(var_473.as_str());
    }
    if let Some(var_474) = &input.parameter_version {
        object.key("ParameterVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_474).into()),
        );
    }
    if let Some(var_475) = &input.labels {
        let mut array_476 = object.key("Labels").start_array();
        for item_477 in var_475 {
            {
                array_476.value().string(item_477.as_str());
            }
        }
        array_476.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.association_filter_list {
        let mut array_479 = object.key("AssociationFilterList").start_array();
        for item_480 in var_478 {
            {
                let mut object_481 = array_479.value().start_object();
                crate::json_ser::serialize_structure_crate_model_association_filter(
                    &mut object_481,
                    item_480,
                )?;
                object_481.finish();
            }
        }
        array_479.finish();
    }
    if let Some(var_482) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_482).into()),
        );
    }
    if let Some(var_483) = &input.next_token {
        object.key("NextToken").string(var_483.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_association_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_484) = &input.association_id {
        object.key("AssociationId").string(var_484.as_str());
    }
    if let Some(var_485) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_485).into()),
        );
    }
    if let Some(var_486) = &input.next_token {
        object.key("NextToken").string(var_486.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_command_invocations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCommandInvocationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_487) = &input.command_id {
        object.key("CommandId").string(var_487.as_str());
    }
    if let Some(var_488) = &input.instance_id {
        object.key("InstanceId").string(var_488.as_str());
    }
    if let Some(var_489) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_489).into()),
        );
    }
    if let Some(var_490) = &input.next_token {
        object.key("NextToken").string(var_490.as_str());
    }
    if let Some(var_491) = &input.filters {
        let mut array_492 = object.key("Filters").start_array();
        for item_493 in var_491 {
            {
                let mut object_494 = array_492.value().start_object();
                crate::json_ser::serialize_structure_crate_model_command_filter(
                    &mut object_494,
                    item_493,
                )?;
                object_494.finish();
            }
        }
        array_492.finish();
    }
    if input.details {
        object.key("Details").boolean(input.details);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_commands_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCommandsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_495) = &input.command_id {
        object.key("CommandId").string(var_495.as_str());
    }
    if let Some(var_496) = &input.instance_id {
        object.key("InstanceId").string(var_496.as_str());
    }
    if let Some(var_497) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_497).into()),
        );
    }
    if let Some(var_498) = &input.next_token {
        object.key("NextToken").string(var_498.as_str());
    }
    if let Some(var_499) = &input.filters {
        let mut array_500 = object.key("Filters").start_array();
        for item_501 in var_499 {
            {
                let mut object_502 = array_500.value().start_object();
                crate::json_ser::serialize_structure_crate_model_command_filter(
                    &mut object_502,
                    item_501,
                )?;
                object_502.finish();
            }
        }
        array_500.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compliance_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComplianceItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_503) = &input.filters {
        let mut array_504 = object.key("Filters").start_array();
        for item_505 in var_503 {
            {
                let mut object_506 = array_504.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(
                    &mut object_506,
                    item_505,
                )?;
                object_506.finish();
            }
        }
        array_504.finish();
    }
    if let Some(var_507) = &input.resource_ids {
        let mut array_508 = object.key("ResourceIds").start_array();
        for item_509 in var_507 {
            {
                array_508.value().string(item_509.as_str());
            }
        }
        array_508.finish();
    }
    if let Some(var_510) = &input.resource_types {
        let mut array_511 = object.key("ResourceTypes").start_array();
        for item_512 in var_510 {
            {
                array_511.value().string(item_512.as_str());
            }
        }
        array_511.finish();
    }
    if let Some(var_513) = &input.next_token {
        object.key("NextToken").string(var_513.as_str());
    }
    if let Some(var_514) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_514).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_compliance_summaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComplianceSummariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_515) = &input.filters {
        let mut array_516 = object.key("Filters").start_array();
        for item_517 in var_515 {
            {
                let mut object_518 = array_516.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(
                    &mut object_518,
                    item_517,
                )?;
                object_518.finish();
            }
        }
        array_516.finish();
    }
    if let Some(var_519) = &input.next_token {
        object.key("NextToken").string(var_519.as_str());
    }
    if let Some(var_520) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_520).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_document_metadata_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentMetadataHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_521) = &input.name {
        object.key("Name").string(var_521.as_str());
    }
    if let Some(var_522) = &input.document_version {
        object.key("DocumentVersion").string(var_522.as_str());
    }
    if let Some(var_523) = &input.metadata {
        object.key("Metadata").string(var_523.as_str());
    }
    if let Some(var_524) = &input.next_token {
        object.key("NextToken").string(var_524.as_str());
    }
    if let Some(var_525) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_525).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_documents_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_526) = &input.document_filter_list {
        let mut array_527 = object.key("DocumentFilterList").start_array();
        for item_528 in var_526 {
            {
                let mut object_529 = array_527.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_filter(
                    &mut object_529,
                    item_528,
                )?;
                object_529.finish();
            }
        }
        array_527.finish();
    }
    if let Some(var_530) = &input.filters {
        let mut array_531 = object.key("Filters").start_array();
        for item_532 in var_530 {
            {
                let mut object_533 = array_531.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_key_values_filter(
                    &mut object_533,
                    item_532,
                )?;
                object_533.finish();
            }
        }
        array_531.finish();
    }
    if let Some(var_534) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_534).into()),
        );
    }
    if let Some(var_535) = &input.next_token {
        object.key("NextToken").string(var_535.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_document_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_536) = &input.name {
        object.key("Name").string(var_536.as_str());
    }
    if let Some(var_537) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_537).into()),
        );
    }
    if let Some(var_538) = &input.next_token {
        object.key("NextToken").string(var_538.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_inventory_entries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInventoryEntriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_539) = &input.instance_id {
        object.key("InstanceId").string(var_539.as_str());
    }
    if let Some(var_540) = &input.type_name {
        object.key("TypeName").string(var_540.as_str());
    }
    if let Some(var_541) = &input.filters {
        let mut array_542 = object.key("Filters").start_array();
        for item_543 in var_541 {
            {
                let mut object_544 = array_542.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_544,
                    item_543,
                )?;
                object_544.finish();
            }
        }
        array_542.finish();
    }
    if let Some(var_545) = &input.next_token {
        object.key("NextToken").string(var_545.as_str());
    }
    if let Some(var_546) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_546).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_item_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsItemEventsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_547) = &input.filters {
        let mut array_548 = object.key("Filters").start_array();
        for item_549 in var_547 {
            {
                let mut object_550 = array_548.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_event_filter(
                    &mut object_550,
                    item_549,
                )?;
                object_550.finish();
            }
        }
        array_548.finish();
    }
    if let Some(var_551) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_551).into()),
        );
    }
    if let Some(var_552) = &input.next_token {
        object.key("NextToken").string(var_552.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_item_related_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsItemRelatedItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_553) = &input.ops_item_id {
        object.key("OpsItemId").string(var_553.as_str());
    }
    if let Some(var_554) = &input.filters {
        let mut array_555 = object.key("Filters").start_array();
        for item_556 in var_554 {
            {
                let mut object_557 = array_555.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_related_items_filter(
                    &mut object_557,
                    item_556,
                )?;
                object_557.finish();
            }
        }
        array_555.finish();
    }
    if let Some(var_558) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_558).into()),
        );
    }
    if let Some(var_559) = &input.next_token {
        object.key("NextToken").string(var_559.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_560) = &input.filters {
        let mut array_561 = object.key("Filters").start_array();
        for item_562 in var_560 {
            {
                let mut object_563 = array_561.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_metadata_filter(
                    &mut object_563,
                    item_562,
                )?;
                object_563.finish();
            }
        }
        array_561.finish();
    }
    if let Some(var_564) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_564).into()),
        );
    }
    if let Some(var_565) = &input.next_token {
        object.key("NextToken").string(var_565.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_compliance_summaries_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceComplianceSummariesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_566) = &input.filters {
        let mut array_567 = object.key("Filters").start_array();
        for item_568 in var_566 {
            {
                let mut object_569 = array_567.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_string_filter(
                    &mut object_569,
                    item_568,
                )?;
                object_569.finish();
            }
        }
        array_567.finish();
    }
    if let Some(var_570) = &input.next_token {
        object.key("NextToken").string(var_570.as_str());
    }
    if let Some(var_571) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_571).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_572) = &input.sync_type {
        object.key("SyncType").string(var_572.as_str());
    }
    if let Some(var_573) = &input.next_token {
        object.key("NextToken").string(var_573.as_str());
    }
    if let Some(var_574) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_574).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_575) = &input.resource_type {
        object.key("ResourceType").string(var_575.as_str());
    }
    if let Some(var_576) = &input.resource_id {
        object.key("ResourceId").string(var_576.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_document_permission_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyDocumentPermissionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_577) = &input.name {
        object.key("Name").string(var_577.as_str());
    }
    if let Some(var_578) = &input.permission_type {
        object.key("PermissionType").string(var_578.as_str());
    }
    if let Some(var_579) = &input.account_ids_to_add {
        let mut array_580 = object.key("AccountIdsToAdd").start_array();
        for item_581 in var_579 {
            {
                array_580.value().string(item_581.as_str());
            }
        }
        array_580.finish();
    }
    if let Some(var_582) = &input.account_ids_to_remove {
        let mut array_583 = object.key("AccountIdsToRemove").start_array();
        for item_584 in var_582 {
            {
                array_583.value().string(item_584.as_str());
            }
        }
        array_583.finish();
    }
    if let Some(var_585) = &input.shared_document_version {
        object.key("SharedDocumentVersion").string(var_585.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_compliance_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutComplianceItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_586) = &input.resource_id {
        object.key("ResourceId").string(var_586.as_str());
    }
    if let Some(var_587) = &input.resource_type {
        object.key("ResourceType").string(var_587.as_str());
    }
    if let Some(var_588) = &input.compliance_type {
        object.key("ComplianceType").string(var_588.as_str());
    }
    if let Some(var_589) = &input.execution_summary {
        let mut object_590 = object.key("ExecutionSummary").start_object();
        crate::json_ser::serialize_structure_crate_model_compliance_execution_summary(
            &mut object_590,
            var_589,
        )?;
        object_590.finish();
    }
    if let Some(var_591) = &input.items {
        let mut array_592 = object.key("Items").start_array();
        for item_593 in var_591 {
            {
                let mut object_594 = array_592.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compliance_item_entry(
                    &mut object_594,
                    item_593,
                )?;
                object_594.finish();
            }
        }
        array_592.finish();
    }
    if let Some(var_595) = &input.item_content_hash {
        object.key("ItemContentHash").string(var_595.as_str());
    }
    if let Some(var_596) = &input.upload_type {
        object.key("UploadType").string(var_596.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_inventory_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutInventoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_597) = &input.instance_id {
        object.key("InstanceId").string(var_597.as_str());
    }
    if let Some(var_598) = &input.items {
        let mut array_599 = object.key("Items").start_array();
        for item_600 in var_598 {
            {
                let mut object_601 = array_599.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_item(
                    &mut object_601,
                    item_600,
                )?;
                object_601.finish();
            }
        }
        array_599.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_parameter_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutParameterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_602) = &input.name {
        object.key("Name").string(var_602.as_str());
    }
    if let Some(var_603) = &input.description {
        object.key("Description").string(var_603.as_str());
    }
    if let Some(var_604) = &input.value {
        object.key("Value").string(var_604.as_str());
    }
    if let Some(var_605) = &input.r#type {
        object.key("Type").string(var_605.as_str());
    }
    if let Some(var_606) = &input.key_id {
        object.key("KeyId").string(var_606.as_str());
    }
    if let Some(var_607) = &input.overwrite {
        object.key("Overwrite").boolean(*var_607);
    }
    if let Some(var_608) = &input.allowed_pattern {
        object.key("AllowedPattern").string(var_608.as_str());
    }
    if let Some(var_609) = &input.tags {
        let mut array_610 = object.key("Tags").start_array();
        for item_611 in var_609 {
            {
                let mut object_612 = array_610.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_612, item_611)?;
                object_612.finish();
            }
        }
        array_610.finish();
    }
    if let Some(var_613) = &input.tier {
        object.key("Tier").string(var_613.as_str());
    }
    if let Some(var_614) = &input.policies {
        object.key("Policies").string(var_614.as_str());
    }
    if let Some(var_615) = &input.data_type {
        object.key("DataType").string(var_615.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_default_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDefaultPatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_616) = &input.baseline_id {
        object.key("BaselineId").string(var_616.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_patch_baseline_for_patch_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterPatchBaselineForPatchGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_617) = &input.baseline_id {
        object.key("BaselineId").string(var_617.as_str());
    }
    if let Some(var_618) = &input.patch_group {
        object.key("PatchGroup").string(var_618.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_target_with_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTargetWithMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_619) = &input.window_id {
        object.key("WindowId").string(var_619.as_str());
    }
    if let Some(var_620) = &input.resource_type {
        object.key("ResourceType").string(var_620.as_str());
    }
    if let Some(var_621) = &input.targets {
        let mut array_622 = object.key("Targets").start_array();
        for item_623 in var_621 {
            {
                let mut object_624 = array_622.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_624, item_623)?;
                object_624.finish();
            }
        }
        array_622.finish();
    }
    if let Some(var_625) = &input.owner_information {
        object.key("OwnerInformation").string(var_625.as_str());
    }
    if let Some(var_626) = &input.name {
        object.key("Name").string(var_626.as_str());
    }
    if let Some(var_627) = &input.description {
        object.key("Description").string(var_627.as_str());
    }
    if let Some(var_628) = &input.client_token {
        object.key("ClientToken").string(var_628.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_task_with_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTaskWithMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_629) = &input.window_id {
        object.key("WindowId").string(var_629.as_str());
    }
    if let Some(var_630) = &input.targets {
        let mut array_631 = object.key("Targets").start_array();
        for item_632 in var_630 {
            {
                let mut object_633 = array_631.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_633, item_632)?;
                object_633.finish();
            }
        }
        array_631.finish();
    }
    if let Some(var_634) = &input.task_arn {
        object.key("TaskArn").string(var_634.as_str());
    }
    if let Some(var_635) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_635.as_str());
    }
    if let Some(var_636) = &input.task_type {
        object.key("TaskType").string(var_636.as_str());
    }
    if let Some(var_637) = &input.task_parameters {
        let mut object_638 = object.key("TaskParameters").start_object();
        for (key_639, value_640) in var_637 {
            {
                let mut object_641 = object_638.key(key_639).start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(&mut object_641, value_640)?;
                object_641.finish();
            }
        }
        object_638.finish();
    }
    if let Some(var_642) = &input.task_invocation_parameters {
        let mut object_643 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_task_invocation_parameters(&mut object_643, var_642)?;
        object_643.finish();
    }
    if let Some(var_644) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_644).into()),
        );
    }
    if let Some(var_645) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_645.as_str());
    }
    if let Some(var_646) = &input.max_errors {
        object.key("MaxErrors").string(var_646.as_str());
    }
    if let Some(var_647) = &input.logging_info {
        let mut object_648 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_648, var_647)?;
        object_648.finish();
    }
    if let Some(var_649) = &input.name {
        object.key("Name").string(var_649.as_str());
    }
    if let Some(var_650) = &input.description {
        object.key("Description").string(var_650.as_str());
    }
    if let Some(var_651) = &input.client_token {
        object.key("ClientToken").string(var_651.as_str());
    }
    if let Some(var_652) = &input.cutoff_behavior {
        object.key("CutoffBehavior").string(var_652.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_tags_from_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_653) = &input.resource_type {
        object.key("ResourceType").string(var_653.as_str());
    }
    if let Some(var_654) = &input.resource_id {
        object.key("ResourceId").string(var_654.as_str());
    }
    if let Some(var_655) = &input.tag_keys {
        let mut array_656 = object.key("TagKeys").start_array();
        for item_657 in var_655 {
            {
                array_656.value().string(item_657.as_str());
            }
        }
        array_656.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_service_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetServiceSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_658) = &input.setting_id {
        object.key("SettingId").string(var_658.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_659) = &input.session_id {
        object.key("SessionId").string(var_659.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_automation_signal_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendAutomationSignalInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_660) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_660.as_str());
    }
    if let Some(var_661) = &input.signal_type {
        object.key("SignalType").string(var_661.as_str());
    }
    if let Some(var_662) = &input.payload {
        let mut object_663 = object.key("Payload").start_object();
        for (key_664, value_665) in var_662 {
            {
                let mut array_666 = object_663.key(key_664).start_array();
                for item_667 in value_665 {
                    {
                        array_666.value().string(item_667.as_str());
                    }
                }
                array_666.finish();
            }
        }
        object_663.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_command_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendCommandInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_668) = &input.instance_ids {
        let mut array_669 = object.key("InstanceIds").start_array();
        for item_670 in var_668 {
            {
                array_669.value().string(item_670.as_str());
            }
        }
        array_669.finish();
    }
    if let Some(var_671) = &input.targets {
        let mut array_672 = object.key("Targets").start_array();
        for item_673 in var_671 {
            {
                let mut object_674 = array_672.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_674, item_673)?;
                object_674.finish();
            }
        }
        array_672.finish();
    }
    if let Some(var_675) = &input.document_name {
        object.key("DocumentName").string(var_675.as_str());
    }
    if let Some(var_676) = &input.document_version {
        object.key("DocumentVersion").string(var_676.as_str());
    }
    if let Some(var_677) = &input.document_hash {
        object.key("DocumentHash").string(var_677.as_str());
    }
    if let Some(var_678) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_678.as_str());
    }
    if let Some(var_679) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_679).into()),
        );
    }
    if let Some(var_680) = &input.comment {
        object.key("Comment").string(var_680.as_str());
    }
    if let Some(var_681) = &input.parameters {
        let mut object_682 = object.key("Parameters").start_object();
        for (key_683, value_684) in var_681 {
            {
                let mut array_685 = object_682.key(key_683).start_array();
                for item_686 in value_684 {
                    {
                        array_685.value().string(item_686.as_str());
                    }
                }
                array_685.finish();
            }
        }
        object_682.finish();
    }
    if let Some(var_687) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_687.as_str());
    }
    if let Some(var_688) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_688.as_str());
    }
    if let Some(var_689) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_689.as_str());
    }
    if let Some(var_690) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_690.as_str());
    }
    if let Some(var_691) = &input.max_errors {
        object.key("MaxErrors").string(var_691.as_str());
    }
    if let Some(var_692) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_692.as_str());
    }
    if let Some(var_693) = &input.notification_config {
        let mut object_694 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_config(
            &mut object_694,
            var_693,
        )?;
        object_694.finish();
    }
    if let Some(var_695) = &input.cloud_watch_output_config {
        let mut object_696 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_output_config(
            &mut object_696,
            var_695,
        )?;
        object_696.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_associations_once_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAssociationsOnceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_697) = &input.association_ids {
        let mut array_698 = object.key("AssociationIds").start_array();
        for item_699 in var_697 {
            {
                array_698.value().string(item_699.as_str());
            }
        }
        array_698.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_automation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAutomationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_700) = &input.document_name {
        object.key("DocumentName").string(var_700.as_str());
    }
    if let Some(var_701) = &input.document_version {
        object.key("DocumentVersion").string(var_701.as_str());
    }
    if let Some(var_702) = &input.parameters {
        let mut object_703 = object.key("Parameters").start_object();
        for (key_704, value_705) in var_702 {
            {
                let mut array_706 = object_703.key(key_704).start_array();
                for item_707 in value_705 {
                    {
                        array_706.value().string(item_707.as_str());
                    }
                }
                array_706.finish();
            }
        }
        object_703.finish();
    }
    if let Some(var_708) = &input.client_token {
        object.key("ClientToken").string(var_708.as_str());
    }
    if let Some(var_709) = &input.mode {
        object.key("Mode").string(var_709.as_str());
    }
    if let Some(var_710) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_710.as_str());
    }
    if let Some(var_711) = &input.targets {
        let mut array_712 = object.key("Targets").start_array();
        for item_713 in var_711 {
            {
                let mut object_714 = array_712.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_714, item_713)?;
                object_714.finish();
            }
        }
        array_712.finish();
    }
    if let Some(var_715) = &input.target_maps {
        let mut array_716 = object.key("TargetMaps").start_array();
        for item_717 in var_715 {
            {
                let mut object_718 = array_716.value().start_object();
                for (key_719, value_720) in item_717 {
                    {
                        let mut array_721 = object_718.key(key_719).start_array();
                        for item_722 in value_720 {
                            {
                                array_721.value().string(item_722.as_str());
                            }
                        }
                        array_721.finish();
                    }
                }
                object_718.finish();
            }
        }
        array_716.finish();
    }
    if let Some(var_723) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_723.as_str());
    }
    if let Some(var_724) = &input.max_errors {
        object.key("MaxErrors").string(var_724.as_str());
    }
    if let Some(var_725) = &input.target_locations {
        let mut array_726 = object.key("TargetLocations").start_array();
        for item_727 in var_725 {
            {
                let mut object_728 = array_726.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_728,
                    item_727,
                )?;
                object_728.finish();
            }
        }
        array_726.finish();
    }
    if let Some(var_729) = &input.tags {
        let mut array_730 = object.key("Tags").start_array();
        for item_731 in var_729 {
            {
                let mut object_732 = array_730.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_732, item_731)?;
                object_732.finish();
            }
        }
        array_730.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_change_request_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartChangeRequestExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_733) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .date_time(var_733, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_734) = &input.document_name {
        object.key("DocumentName").string(var_734.as_str());
    }
    if let Some(var_735) = &input.document_version {
        object.key("DocumentVersion").string(var_735.as_str());
    }
    if let Some(var_736) = &input.parameters {
        let mut object_737 = object.key("Parameters").start_object();
        for (key_738, value_739) in var_736 {
            {
                let mut array_740 = object_737.key(key_738).start_array();
                for item_741 in value_739 {
                    {
                        array_740.value().string(item_741.as_str());
                    }
                }
                array_740.finish();
            }
        }
        object_737.finish();
    }
    if let Some(var_742) = &input.change_request_name {
        object.key("ChangeRequestName").string(var_742.as_str());
    }
    if let Some(var_743) = &input.client_token {
        object.key("ClientToken").string(var_743.as_str());
    }
    if input.auto_approve {
        object.key("AutoApprove").boolean(input.auto_approve);
    }
    if let Some(var_744) = &input.runbooks {
        let mut array_745 = object.key("Runbooks").start_array();
        for item_746 in var_744 {
            {
                let mut object_747 = array_745.value().start_object();
                crate::json_ser::serialize_structure_crate_model_runbook(
                    &mut object_747,
                    item_746,
                )?;
                object_747.finish();
            }
        }
        array_745.finish();
    }
    if let Some(var_748) = &input.tags {
        let mut array_749 = object.key("Tags").start_array();
        for item_750 in var_748 {
            {
                let mut object_751 = array_749.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_751, item_750)?;
                object_751.finish();
            }
        }
        array_749.finish();
    }
    if let Some(var_752) = &input.scheduled_end_time {
        object
            .key("ScheduledEndTime")
            .date_time(var_752, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_753) = &input.change_details {
        object.key("ChangeDetails").string(var_753.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_754) = &input.target {
        object.key("Target").string(var_754.as_str());
    }
    if let Some(var_755) = &input.document_name {
        object.key("DocumentName").string(var_755.as_str());
    }
    if let Some(var_756) = &input.reason {
        object.key("Reason").string(var_756.as_str());
    }
    if let Some(var_757) = &input.parameters {
        let mut object_758 = object.key("Parameters").start_object();
        for (key_759, value_760) in var_757 {
            {
                let mut array_761 = object_758.key(key_759).start_array();
                for item_762 in value_760 {
                    {
                        array_761.value().string(item_762.as_str());
                    }
                }
                array_761.finish();
            }
        }
        object_758.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_automation_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutomationExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_763) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_763.as_str());
    }
    if let Some(var_764) = &input.r#type {
        object.key("Type").string(var_764.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_765) = &input.session_id {
        object.key("SessionId").string(var_765.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_unlabel_parameter_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UnlabelParameterVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_766) = &input.name {
        object.key("Name").string(var_766.as_str());
    }
    if let Some(var_767) = &input.parameter_version {
        object.key("ParameterVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_767).into()),
        );
    }
    if let Some(var_768) = &input.labels {
        let mut array_769 = object.key("Labels").start_array();
        for item_770 in var_768 {
            {
                array_769.value().string(item_770.as_str());
            }
        }
        array_769.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_association_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssociationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_771) = &input.association_id {
        object.key("AssociationId").string(var_771.as_str());
    }
    if let Some(var_772) = &input.parameters {
        let mut object_773 = object.key("Parameters").start_object();
        for (key_774, value_775) in var_772 {
            {
                let mut array_776 = object_773.key(key_774).start_array();
                for item_777 in value_775 {
                    {
                        array_776.value().string(item_777.as_str());
                    }
                }
                array_776.finish();
            }
        }
        object_773.finish();
    }
    if let Some(var_778) = &input.document_version {
        object.key("DocumentVersion").string(var_778.as_str());
    }
    if let Some(var_779) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_779.as_str());
    }
    if let Some(var_780) = &input.output_location {
        let mut object_781 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(
            &mut object_781,
            var_780,
        )?;
        object_781.finish();
    }
    if let Some(var_782) = &input.name {
        object.key("Name").string(var_782.as_str());
    }
    if let Some(var_783) = &input.targets {
        let mut array_784 = object.key("Targets").start_array();
        for item_785 in var_783 {
            {
                let mut object_786 = array_784.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_786, item_785)?;
                object_786.finish();
            }
        }
        array_784.finish();
    }
    if let Some(var_787) = &input.association_name {
        object.key("AssociationName").string(var_787.as_str());
    }
    if let Some(var_788) = &input.association_version {
        object.key("AssociationVersion").string(var_788.as_str());
    }
    if let Some(var_789) = &input.automation_target_parameter_name {
        object
            .key("AutomationTargetParameterName")
            .string(var_789.as_str());
    }
    if let Some(var_790) = &input.max_errors {
        object.key("MaxErrors").string(var_790.as_str());
    }
    if let Some(var_791) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_791.as_str());
    }
    if let Some(var_792) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_792.as_str());
    }
    if let Some(var_793) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_793.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_794) = &input.calendar_names {
        let mut array_795 = object.key("CalendarNames").start_array();
        for item_796 in var_794 {
            {
                array_795.value().string(item_796.as_str());
            }
        }
        array_795.finish();
    }
    if let Some(var_797) = &input.target_locations {
        let mut array_798 = object.key("TargetLocations").start_array();
        for item_799 in var_797 {
            {
                let mut object_800 = array_798.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_800,
                    item_799,
                )?;
                object_800.finish();
            }
        }
        array_798.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_association_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssociationStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_801) = &input.name {
        object.key("Name").string(var_801.as_str());
    }
    if let Some(var_802) = &input.instance_id {
        object.key("InstanceId").string(var_802.as_str());
    }
    if let Some(var_803) = &input.association_status {
        let mut object_804 = object.key("AssociationStatus").start_object();
        crate::json_ser::serialize_structure_crate_model_association_status(
            &mut object_804,
            var_803,
        )?;
        object_804.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_805) = &input.content {
        object.key("Content").string(var_805.as_str());
    }
    if let Some(var_806) = &input.attachments {
        let mut array_807 = object.key("Attachments").start_array();
        for item_808 in var_806 {
            {
                let mut object_809 = array_807.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attachments_source(
                    &mut object_809,
                    item_808,
                )?;
                object_809.finish();
            }
        }
        array_807.finish();
    }
    if let Some(var_810) = &input.name {
        object.key("Name").string(var_810.as_str());
    }
    if let Some(var_811) = &input.display_name {
        object.key("DisplayName").string(var_811.as_str());
    }
    if let Some(var_812) = &input.version_name {
        object.key("VersionName").string(var_812.as_str());
    }
    if let Some(var_813) = &input.document_version {
        object.key("DocumentVersion").string(var_813.as_str());
    }
    if let Some(var_814) = &input.document_format {
        object.key("DocumentFormat").string(var_814.as_str());
    }
    if let Some(var_815) = &input.target_type {
        object.key("TargetType").string(var_815.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_default_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentDefaultVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_816) = &input.name {
        object.key("Name").string(var_816.as_str());
    }
    if let Some(var_817) = &input.document_version {
        object.key("DocumentVersion").string(var_817.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_document_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_818) = &input.name {
        object.key("Name").string(var_818.as_str());
    }
    if let Some(var_819) = &input.document_version {
        object.key("DocumentVersion").string(var_819.as_str());
    }
    if let Some(var_820) = &input.document_reviews {
        let mut object_821 = object.key("DocumentReviews").start_object();
        crate::json_ser::serialize_structure_crate_model_document_reviews(
            &mut object_821,
            var_820,
        )?;
        object_821.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_822) = &input.window_id {
        object.key("WindowId").string(var_822.as_str());
    }
    if let Some(var_823) = &input.name {
        object.key("Name").string(var_823.as_str());
    }
    if let Some(var_824) = &input.description {
        object.key("Description").string(var_824.as_str());
    }
    if let Some(var_825) = &input.start_date {
        object.key("StartDate").string(var_825.as_str());
    }
    if let Some(var_826) = &input.end_date {
        object.key("EndDate").string(var_826.as_str());
    }
    if let Some(var_827) = &input.schedule {
        object.key("Schedule").string(var_827.as_str());
    }
    if let Some(var_828) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_828.as_str());
    }
    if let Some(var_829) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_829).into()),
        );
    }
    if let Some(var_830) = &input.duration {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_830).into()),
        );
    }
    if let Some(var_831) = &input.cutoff {
        object.key("Cutoff").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_831).into()),
        );
    }
    if let Some(var_832) = &input.allow_unassociated_targets {
        object.key("AllowUnassociatedTargets").boolean(*var_832);
    }
    if let Some(var_833) = &input.enabled {
        object.key("Enabled").boolean(*var_833);
    }
    if let Some(var_834) = &input.replace {
        object.key("Replace").boolean(*var_834);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_target_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowTargetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_835) = &input.window_id {
        object.key("WindowId").string(var_835.as_str());
    }
    if let Some(var_836) = &input.window_target_id {
        object.key("WindowTargetId").string(var_836.as_str());
    }
    if let Some(var_837) = &input.targets {
        let mut array_838 = object.key("Targets").start_array();
        for item_839 in var_837 {
            {
                let mut object_840 = array_838.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_840, item_839)?;
                object_840.finish();
            }
        }
        array_838.finish();
    }
    if let Some(var_841) = &input.owner_information {
        object.key("OwnerInformation").string(var_841.as_str());
    }
    if let Some(var_842) = &input.name {
        object.key("Name").string(var_842.as_str());
    }
    if let Some(var_843) = &input.description {
        object.key("Description").string(var_843.as_str());
    }
    if let Some(var_844) = &input.replace {
        object.key("Replace").boolean(*var_844);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_maintenance_window_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_845) = &input.window_id {
        object.key("WindowId").string(var_845.as_str());
    }
    if let Some(var_846) = &input.window_task_id {
        object.key("WindowTaskId").string(var_846.as_str());
    }
    if let Some(var_847) = &input.targets {
        let mut array_848 = object.key("Targets").start_array();
        for item_849 in var_847 {
            {
                let mut object_850 = array_848.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_850, item_849)?;
                object_850.finish();
            }
        }
        array_848.finish();
    }
    if let Some(var_851) = &input.task_arn {
        object.key("TaskArn").string(var_851.as_str());
    }
    if let Some(var_852) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_852.as_str());
    }
    if let Some(var_853) = &input.task_parameters {
        let mut object_854 = object.key("TaskParameters").start_object();
        for (key_855, value_856) in var_853 {
            {
                let mut object_857 = object_854.key(key_855).start_object();
                crate::json_ser::serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(&mut object_857, value_856)?;
                object_857.finish();
            }
        }
        object_854.finish();
    }
    if let Some(var_858) = &input.task_invocation_parameters {
        let mut object_859 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_task_invocation_parameters(&mut object_859, var_858)?;
        object_859.finish();
    }
    if let Some(var_860) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_860).into()),
        );
    }
    if let Some(var_861) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_861.as_str());
    }
    if let Some(var_862) = &input.max_errors {
        object.key("MaxErrors").string(var_862.as_str());
    }
    if let Some(var_863) = &input.logging_info {
        let mut object_864 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_864, var_863)?;
        object_864.finish();
    }
    if let Some(var_865) = &input.name {
        object.key("Name").string(var_865.as_str());
    }
    if let Some(var_866) = &input.description {
        object.key("Description").string(var_866.as_str());
    }
    if let Some(var_867) = &input.replace {
        object.key("Replace").boolean(*var_867);
    }
    if let Some(var_868) = &input.cutoff_behavior {
        object.key("CutoffBehavior").string(var_868.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_managed_instance_role_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateManagedInstanceRoleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_869) = &input.instance_id {
        object.key("InstanceId").string(var_869.as_str());
    }
    if let Some(var_870) = &input.iam_role {
        object.key("IamRole").string(var_870.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ops_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOpsItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_871) = &input.description {
        object.key("Description").string(var_871.as_str());
    }
    if let Some(var_872) = &input.operational_data {
        let mut object_873 = object.key("OperationalData").start_object();
        for (key_874, value_875) in var_872 {
            {
                let mut object_876 = object_873.key(key_874).start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_data_value(
                    &mut object_876,
                    value_875,
                )?;
                object_876.finish();
            }
        }
        object_873.finish();
    }
    if let Some(var_877) = &input.operational_data_to_delete {
        let mut array_878 = object.key("OperationalDataToDelete").start_array();
        for item_879 in var_877 {
            {
                array_878.value().string(item_879.as_str());
            }
        }
        array_878.finish();
    }
    if let Some(var_880) = &input.notifications {
        let mut array_881 = object.key("Notifications").start_array();
        for item_882 in var_880 {
            {
                let mut object_883 = array_881.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_item_notification(
                    &mut object_883,
                    item_882,
                )?;
                object_883.finish();
            }
        }
        array_881.finish();
    }
    if let Some(var_884) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_884).into()),
        );
    }
    if let Some(var_885) = &input.related_ops_items {
        let mut array_886 = object.key("RelatedOpsItems").start_array();
        for item_887 in var_885 {
            {
                let mut object_888 = array_886.value().start_object();
                crate::json_ser::serialize_structure_crate_model_related_ops_item(
                    &mut object_888,
                    item_887,
                )?;
                object_888.finish();
            }
        }
        array_886.finish();
    }
    if let Some(var_889) = &input.status {
        object.key("Status").string(var_889.as_str());
    }
    if let Some(var_890) = &input.ops_item_id {
        object.key("OpsItemId").string(var_890.as_str());
    }
    if let Some(var_891) = &input.title {
        object.key("Title").string(var_891.as_str());
    }
    if let Some(var_892) = &input.category {
        object.key("Category").string(var_892.as_str());
    }
    if let Some(var_893) = &input.severity {
        object.key("Severity").string(var_893.as_str());
    }
    if let Some(var_894) = &input.actual_start_time {
        object
            .key("ActualStartTime")
            .date_time(var_894, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_895) = &input.actual_end_time {
        object
            .key("ActualEndTime")
            .date_time(var_895, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_896) = &input.planned_start_time {
        object
            .key("PlannedStartTime")
            .date_time(var_896, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_897) = &input.planned_end_time {
        object
            .key("PlannedEndTime")
            .date_time(var_897, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ops_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOpsMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_898) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_898.as_str());
    }
    if let Some(var_899) = &input.metadata_to_update {
        let mut object_900 = object.key("MetadataToUpdate").start_object();
        for (key_901, value_902) in var_899 {
            {
                let mut object_903 = object_900.key(key_901).start_object();
                crate::json_ser::serialize_structure_crate_model_metadata_value(
                    &mut object_903,
                    value_902,
                )?;
                object_903.finish();
            }
        }
        object_900.finish();
    }
    if let Some(var_904) = &input.keys_to_delete {
        let mut array_905 = object.key("KeysToDelete").start_array();
        for item_906 in var_904 {
            {
                array_905.value().string(item_906.as_str());
            }
        }
        array_905.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_patch_baseline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePatchBaselineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_907) = &input.baseline_id {
        object.key("BaselineId").string(var_907.as_str());
    }
    if let Some(var_908) = &input.name {
        object.key("Name").string(var_908.as_str());
    }
    if let Some(var_909) = &input.global_filters {
        let mut object_910 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_910,
            var_909,
        )?;
        object_910.finish();
    }
    if let Some(var_911) = &input.approval_rules {
        let mut object_912 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(
            &mut object_912,
            var_911,
        )?;
        object_912.finish();
    }
    if let Some(var_913) = &input.approved_patches {
        let mut array_914 = object.key("ApprovedPatches").start_array();
        for item_915 in var_913 {
            {
                array_914.value().string(item_915.as_str());
            }
        }
        array_914.finish();
    }
    if let Some(var_916) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_916.as_str());
    }
    if let Some(var_917) = &input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(*var_917);
    }
    if let Some(var_918) = &input.rejected_patches {
        let mut array_919 = object.key("RejectedPatches").start_array();
        for item_920 in var_918 {
            {
                array_919.value().string(item_920.as_str());
            }
        }
        array_919.finish();
    }
    if let Some(var_921) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_921.as_str());
    }
    if let Some(var_922) = &input.description {
        object.key("Description").string(var_922.as_str());
    }
    if let Some(var_923) = &input.sources {
        let mut array_924 = object.key("Sources").start_array();
        for item_925 in var_923 {
            {
                let mut object_926 = array_924.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(
                    &mut object_926,
                    item_925,
                )?;
                object_926.finish();
            }
        }
        array_924.finish();
    }
    if let Some(var_927) = &input.replace {
        object.key("Replace").boolean(*var_927);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_data_sync_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceDataSyncInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_928) = &input.sync_name {
        object.key("SyncName").string(var_928.as_str());
    }
    if let Some(var_929) = &input.sync_type {
        object.key("SyncType").string(var_929.as_str());
    }
    if let Some(var_930) = &input.sync_source {
        let mut object_931 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_source(
            &mut object_931,
            var_930,
        )?;
        object_931.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_setting_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceSettingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_932) = &input.setting_id {
        object.key("SettingId").string(var_932.as_str());
    }
    if let Some(var_933) = &input.setting_value {
        object.key("SettingValue").string(var_933.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_934) = &input.key {
        object.key("Key").string(var_934.as_str());
    }
    if let Some(var_935) = &input.value {
        object.key("Value").string(var_935.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registration_metadata_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistrationMetadataItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_936) = &input.key {
        object.key("Key").string(var_936.as_str());
    }
    if let Some(var_937) = &input.value {
        object.key("Value").string(var_937.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Target,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_938) = &input.key {
        object.key("Key").string(var_938.as_str());
    }
    if let Some(var_939) = &input.values {
        let mut array_940 = object.key("Values").start_array();
        for item_941 in var_939 {
            {
                array_940.value().string(item_941.as_str());
            }
        }
        array_940.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_association_output_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceAssociationOutputLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_942) = &input.s3_location {
        let mut object_943 = object.key("S3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_output_location(
            &mut object_943,
            var_942,
        )?;
        object_943.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_target_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_944) = &input.accounts {
        let mut array_945 = object.key("Accounts").start_array();
        for item_946 in var_944 {
            {
                array_945.value().string(item_946.as_str());
            }
        }
        array_945.finish();
    }
    if let Some(var_947) = &input.regions {
        let mut array_948 = object.key("Regions").start_array();
        for item_949 in var_947 {
            {
                array_948.value().string(item_949.as_str());
            }
        }
        array_948.finish();
    }
    if let Some(var_950) = &input.target_location_max_concurrency {
        object
            .key("TargetLocationMaxConcurrency")
            .string(var_950.as_str());
    }
    if let Some(var_951) = &input.target_location_max_errors {
        object
            .key("TargetLocationMaxErrors")
            .string(var_951.as_str());
    }
    if let Some(var_952) = &input.execution_role_name {
        object.key("ExecutionRoleName").string(var_952.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_association_batch_request_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateAssociationBatchRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_953) = &input.name {
        object.key("Name").string(var_953.as_str());
    }
    if let Some(var_954) = &input.instance_id {
        object.key("InstanceId").string(var_954.as_str());
    }
    if let Some(var_955) = &input.parameters {
        let mut object_956 = object.key("Parameters").start_object();
        for (key_957, value_958) in var_955 {
            {
                let mut array_959 = object_956.key(key_957).start_array();
                for item_960 in value_958 {
                    {
                        array_959.value().string(item_960.as_str());
                    }
                }
                array_959.finish();
            }
        }
        object_956.finish();
    }
    if let Some(var_961) = &input.automation_target_parameter_name {
        object
            .key("AutomationTargetParameterName")
            .string(var_961.as_str());
    }
    if let Some(var_962) = &input.document_version {
        object.key("DocumentVersion").string(var_962.as_str());
    }
    if let Some(var_963) = &input.targets {
        let mut array_964 = object.key("Targets").start_array();
        for item_965 in var_963 {
            {
                let mut object_966 = array_964.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(&mut object_966, item_965)?;
                object_966.finish();
            }
        }
        array_964.finish();
    }
    if let Some(var_967) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_967.as_str());
    }
    if let Some(var_968) = &input.output_location {
        let mut object_969 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_association_output_location(
            &mut object_969,
            var_968,
        )?;
        object_969.finish();
    }
    if let Some(var_970) = &input.association_name {
        object.key("AssociationName").string(var_970.as_str());
    }
    if let Some(var_971) = &input.max_errors {
        object.key("MaxErrors").string(var_971.as_str());
    }
    if let Some(var_972) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_972.as_str());
    }
    if let Some(var_973) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_973.as_str());
    }
    if let Some(var_974) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_974.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_975) = &input.calendar_names {
        let mut array_976 = object.key("CalendarNames").start_array();
        for item_977 in var_975 {
            {
                array_976.value().string(item_977.as_str());
            }
        }
        array_976.finish();
    }
    if let Some(var_978) = &input.target_locations {
        let mut array_979 = object.key("TargetLocations").start_array();
        for item_980 in var_978 {
            {
                let mut object_981 = array_979.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_981,
                    item_980,
                )?;
                object_981.finish();
            }
        }
        array_979.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_requires(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRequires,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_982) = &input.name {
        object.key("Name").string(var_982.as_str());
    }
    if let Some(var_983) = &input.version {
        object.key("Version").string(var_983.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attachments_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttachmentsSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_984) = &input.key {
        object.key("Key").string(var_984.as_str());
    }
    if let Some(var_985) = &input.values {
        let mut array_986 = object.key("Values").start_array();
        for item_987 in var_985 {
            {
                array_986.value().string(item_987.as_str());
            }
        }
        array_986.finish();
    }
    if let Some(var_988) = &input.name {
        object.key("Name").string(var_988.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_data_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemDataValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_989) = &input.value {
        object.key("Value").string(var_989.as_str());
    }
    if let Some(var_990) = &input.r#type {
        object.key("Type").string(var_990.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_notification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemNotification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_991) = &input.arn {
        object.key("Arn").string(var_991.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_related_ops_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelatedOpsItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_992) = &input.ops_item_id {
        object.key("OpsItemId").string(var_992.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metadata_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_993) = &input.value {
        object.key("Value").string(var_993.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_filter_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchFilterGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_994) = &input.patch_filters {
        let mut array_995 = object.key("PatchFilters").start_array();
        for item_996 in var_994 {
            {
                let mut object_997 = array_995.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_filter(
                    &mut object_997,
                    item_996,
                )?;
                object_997.finish();
            }
        }
        array_995.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_rule_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchRuleGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_998) = &input.patch_rules {
        let mut array_999 = object.key("PatchRules").start_array();
        for item_1000 in var_998 {
            {
                let mut object_1001 = array_999.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_rule(
                    &mut object_1001,
                    item_1000,
                )?;
                object_1001.finish();
            }
        }
        array_999.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1002) = &input.name {
        object.key("Name").string(var_1002.as_str());
    }
    if let Some(var_1003) = &input.products {
        let mut array_1004 = object.key("Products").start_array();
        for item_1005 in var_1003 {
            {
                array_1004.value().string(item_1005.as_str());
            }
        }
        array_1004.finish();
    }
    if let Some(var_1006) = &input.configuration {
        object.key("Configuration").string(var_1006.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_s3_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncS3Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1007) = &input.bucket_name {
        object.key("BucketName").string(var_1007.as_str());
    }
    if let Some(var_1008) = &input.prefix {
        object.key("Prefix").string(var_1008.as_str());
    }
    if let Some(var_1009) = &input.sync_format {
        object.key("SyncFormat").string(var_1009.as_str());
    }
    if let Some(var_1010) = &input.region {
        object.key("Region").string(var_1010.as_str());
    }
    if let Some(var_1011) = &input.awskms_key_arn {
        object.key("AWSKMSKeyARN").string(var_1011.as_str());
    }
    if let Some(var_1012) = &input.destination_data_sharing {
        let mut object_1013 = object.key("DestinationDataSharing").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_destination_data_sharing(&mut object_1013, var_1012)?;
        object_1013.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1014) = &input.source_type {
        object.key("SourceType").string(var_1014.as_str());
    }
    if let Some(var_1015) = &input.aws_organizations_source {
        let mut object_1016 = object.key("AwsOrganizationsSource").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_data_sync_aws_organizations_source(&mut object_1016, var_1015)?;
        object_1016.finish();
    }
    if let Some(var_1017) = &input.source_regions {
        let mut array_1018 = object.key("SourceRegions").start_array();
        for item_1019 in var_1017 {
            {
                array_1018.value().string(item_1019.as_str());
            }
        }
        array_1018.finish();
    }
    if input.include_future_regions {
        object
            .key("IncludeFutureRegions")
            .boolean(input.include_future_regions);
    }
    if input.enable_all_ops_data_sources {
        object
            .key("EnableAllOpsDataSources")
            .boolean(input.enable_all_ops_data_sources);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_activations_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeActivationsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1020) = &input.filter_key {
        object.key("FilterKey").string(var_1020.as_str());
    }
    if let Some(var_1021) = &input.filter_values {
        let mut array_1022 = object.key("FilterValues").start_array();
        for item_1023 in var_1021 {
            {
                array_1022.value().string(item_1023.as_str());
            }
        }
        array_1022.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_execution_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationExecutionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1024) = &input.key {
        object.key("Key").string(var_1024.as_str());
    }
    if let Some(var_1025) = &input.value {
        object.key("Value").string(var_1025.as_str());
    }
    if let Some(var_1026) = &input.r#type {
        object.key("Type").string(var_1026.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_execution_targets_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationExecutionTargetsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1027) = &input.key {
        object.key("Key").string(var_1027.as_str());
    }
    if let Some(var_1028) = &input.value {
        object.key("Value").string(var_1028.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_automation_execution_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutomationExecutionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1029) = &input.key {
        object.key("Key").string(var_1029.as_str());
    }
    if let Some(var_1030) = &input.values {
        let mut array_1031 = object.key("Values").start_array();
        for item_1032 in var_1030 {
            {
                array_1031.value().string(item_1032.as_str());
            }
        }
        array_1031.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_execution_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepExecutionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1033) = &input.key {
        object.key("Key").string(var_1033.as_str());
    }
    if let Some(var_1034) = &input.values {
        let mut array_1035 = object.key("Values").start_array();
        for item_1036 in var_1034 {
            {
                array_1035.value().string(item_1036.as_str());
            }
        }
        array_1035.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_orchestrator_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchOrchestratorFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1037) = &input.key {
        object.key("Key").string(var_1037.as_str());
    }
    if let Some(var_1038) = &input.values {
        let mut array_1039 = object.key("Values").start_array();
        for item_1040 in var_1038 {
            {
                array_1039.value().string(item_1040.as_str());
            }
        }
        array_1039.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_information_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceInformationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1041) = &input.key {
        object.key("key").string(var_1041.as_str());
    }
    if let Some(var_1042) = &input.value_set {
        let mut array_1043 = object.key("valueSet").start_array();
        for item_1044 in var_1042 {
            {
                array_1043.value().string(item_1044.as_str());
            }
        }
        array_1043.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_information_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceInformationStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1045) = &input.key {
        object.key("Key").string(var_1045.as_str());
    }
    if let Some(var_1046) = &input.values {
        let mut array_1047 = object.key("Values").start_array();
        for item_1048 in var_1046 {
            {
                array_1047.value().string(item_1048.as_str());
            }
        }
        array_1047.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_patch_state_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstancePatchStateFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1049) = &input.key {
        object.key("Key").string(var_1049.as_str());
    }
    if let Some(var_1050) = &input.values {
        let mut array_1051 = object.key("Values").start_array();
        for item_1052 in var_1050 {
            {
                array_1051.value().string(item_1052.as_str());
            }
        }
        array_1051.finish();
    }
    if let Some(var_1053) = &input.r#type {
        object.key("Type").string(var_1053.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1054) = &input.key {
        object.key("Key").string(var_1054.as_str());
    }
    if let Some(var_1055) = &input.values {
        let mut array_1056 = object.key("Values").start_array();
        for item_1057 in var_1055 {
            {
                array_1056.value().string(item_1057.as_str());
            }
        }
        array_1056.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1058) = &input.key {
        object.key("Key").string(var_1058.as_str());
    }
    if let Some(var_1059) = &input.values {
        let mut array_1060 = object.key("Values").start_array();
        for item_1061 in var_1059 {
            {
                array_1060.value().string(item_1061.as_str());
            }
        }
        array_1060.finish();
    }
    if let Some(var_1062) = &input.operator {
        object.key("Operator").string(var_1062.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameters_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParametersFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1063) = &input.key {
        object.key("Key").string(var_1063.as_str());
    }
    if let Some(var_1064) = &input.values {
        let mut array_1065 = object.key("Values").start_array();
        for item_1066 in var_1064 {
            {
                array_1065.value().string(item_1066.as_str());
            }
        }
        array_1065.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1067) = &input.key {
        object.key("Key").string(var_1067.as_str());
    }
    if let Some(var_1068) = &input.option {
        object.key("Option").string(var_1068.as_str());
    }
    if let Some(var_1069) = &input.values {
        let mut array_1070 = object.key("Values").start_array();
        for item_1071 in var_1069 {
            {
                array_1070.value().string(item_1071.as_str());
            }
        }
        array_1070.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_session_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1072) = &input.key {
        object.key("key").string(var_1072.as_str());
    }
    if let Some(var_1073) = &input.value {
        object.key("value").string(var_1073.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_baseline_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BaselineOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1074) = &input.operating_system {
        object.key("OperatingSystem").string(var_1074.as_str());
    }
    if let Some(var_1075) = &input.global_filters {
        let mut object_1076 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_1076,
            var_1075,
        )?;
        object_1076.finish();
    }
    if let Some(var_1077) = &input.approval_rules {
        let mut object_1078 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_rule_group(
            &mut object_1078,
            var_1077,
        )?;
        object_1078.finish();
    }
    if let Some(var_1079) = &input.approved_patches {
        let mut array_1080 = object.key("ApprovedPatches").start_array();
        for item_1081 in var_1079 {
            {
                array_1080.value().string(item_1081.as_str());
            }
        }
        array_1080.finish();
    }
    if let Some(var_1082) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_1082.as_str());
    }
    if let Some(var_1083) = &input.rejected_patches {
        let mut array_1084 = object.key("RejectedPatches").start_array();
        for item_1085 in var_1083 {
            {
                array_1084.value().string(item_1085.as_str());
            }
        }
        array_1084.finish();
    }
    if let Some(var_1086) = &input.rejected_patches_action {
        object
            .key("RejectedPatchesAction")
            .string(var_1086.as_str());
    }
    if input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(input.approved_patches_enable_non_security);
    }
    if let Some(var_1087) = &input.sources {
        let mut array_1088 = object.key("Sources").start_array();
        for item_1089 in var_1087 {
            {
                let mut object_1090 = array_1088.value().start_object();
                crate::json_ser::serialize_structure_crate_model_patch_source(
                    &mut object_1090,
                    item_1089,
                )?;
                object_1090.finish();
            }
        }
        array_1088.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1091) = &input.key {
        object.key("Key").string(var_1091.as_str());
    }
    if let Some(var_1092) = &input.values {
        let mut array_1093 = object.key("Values").start_array();
        for item_1094 in var_1092 {
            {
                array_1093.value().string(item_1094.as_str());
            }
        }
        array_1093.finish();
    }
    if let Some(var_1095) = &input.r#type {
        object.key("Type").string(var_1095.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_aggregator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryAggregator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1096) = &input.expression {
        object.key("Expression").string(var_1096.as_str());
    }
    if let Some(var_1097) = &input.aggregators {
        let mut array_1098 = object.key("Aggregators").start_array();
        for item_1099 in var_1097 {
            {
                let mut object_1100 = array_1098.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_aggregator(
                    &mut object_1100,
                    item_1099,
                )?;
                object_1100.finish();
            }
        }
        array_1098.finish();
    }
    if let Some(var_1101) = &input.groups {
        let mut array_1102 = object.key("Groups").start_array();
        for item_1103 in var_1101 {
            {
                let mut object_1104 = array_1102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_group(
                    &mut object_1104,
                    item_1103,
                )?;
                object_1104.finish();
            }
        }
        array_1102.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_result_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResultAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1105) = &input.type_name {
        object.key("TypeName").string(var_1105.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1106) = &input.key {
        object.key("Key").string(var_1106.as_str());
    }
    if let Some(var_1107) = &input.values {
        let mut array_1108 = object.key("Values").start_array();
        for item_1109 in var_1107 {
            {
                array_1108.value().string(item_1109.as_str());
            }
        }
        array_1108.finish();
    }
    if let Some(var_1110) = &input.r#type {
        object.key("Type").string(var_1110.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_aggregator(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsAggregator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1111) = &input.aggregator_type {
        object.key("AggregatorType").string(var_1111.as_str());
    }
    if let Some(var_1112) = &input.type_name {
        object.key("TypeName").string(var_1112.as_str());
    }
    if let Some(var_1113) = &input.attribute_name {
        object.key("AttributeName").string(var_1113.as_str());
    }
    if let Some(var_1114) = &input.values {
        let mut object_1115 = object.key("Values").start_object();
        for (key_1116, value_1117) in var_1114 {
            {
                object_1115.key(key_1116).string(value_1117.as_str());
            }
        }
        object_1115.finish();
    }
    if let Some(var_1118) = &input.filters {
        let mut array_1119 = object.key("Filters").start_array();
        for item_1120 in var_1118 {
            {
                let mut object_1121 = array_1119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_filter(
                    &mut object_1121,
                    item_1120,
                )?;
                object_1121.finish();
            }
        }
        array_1119.finish();
    }
    if let Some(var_1122) = &input.aggregators {
        let mut array_1123 = object.key("Aggregators").start_array();
        for item_1124 in var_1122 {
            {
                let mut object_1125 = array_1123.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ops_aggregator(
                    &mut object_1125,
                    item_1124,
                )?;
                object_1125.finish();
            }
        }
        array_1123.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_result_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsResultAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1126) = &input.type_name {
        object.key("TypeName").string(var_1126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1127) = &input.key {
        object.key("key").string(var_1127.as_str());
    }
    if let Some(var_1128) = &input.value {
        object.key("value").string(var_1128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_command_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CommandFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1129) = &input.key {
        object.key("key").string(var_1129.as_str());
    }
    if let Some(var_1130) = &input.value {
        object.key("value").string(var_1130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_string_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceStringFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1131) = &input.key {
        object.key("Key").string(var_1131.as_str());
    }
    if let Some(var_1132) = &input.values {
        let mut array_1133 = object.key("Values").start_array();
        for item_1134 in var_1132 {
            {
                array_1133.value().string(item_1134.as_str());
            }
        }
        array_1133.finish();
    }
    if let Some(var_1135) = &input.r#type {
        object.key("Type").string(var_1135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1136) = &input.key {
        object.key("key").string(var_1136.as_str());
    }
    if let Some(var_1137) = &input.value {
        object.key("value").string(var_1137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_key_values_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentKeyValuesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1138) = &input.key {
        object.key("Key").string(var_1138.as_str());
    }
    if let Some(var_1139) = &input.values {
        let mut array_1140 = object.key("Values").start_array();
        for item_1141 in var_1139 {
            {
                array_1140.value().string(item_1141.as_str());
            }
        }
        array_1140.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_event_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemEventFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1142) = &input.key {
        object.key("Key").string(var_1142.as_str());
    }
    if let Some(var_1143) = &input.values {
        let mut array_1144 = object.key("Values").start_array();
        for item_1145 in var_1143 {
            {
                array_1144.value().string(item_1145.as_str());
            }
        }
        array_1144.finish();
    }
    if let Some(var_1146) = &input.operator {
        object.key("Operator").string(var_1146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_item_related_items_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemRelatedItemsFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1147) = &input.key {
        object.key("Key").string(var_1147.as_str());
    }
    if let Some(var_1148) = &input.values {
        let mut array_1149 = object.key("Values").start_array();
        for item_1150 in var_1148 {
            {
                array_1149.value().string(item_1150.as_str());
            }
        }
        array_1149.finish();
    }
    if let Some(var_1151) = &input.operator {
        object.key("Operator").string(var_1151.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ops_metadata_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsMetadataFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1152) = &input.key {
        object.key("Key").string(var_1152.as_str());
    }
    if let Some(var_1153) = &input.values {
        let mut array_1154 = object.key("Values").start_array();
        for item_1155 in var_1153 {
            {
                array_1154.value().string(item_1155.as_str());
            }
        }
        array_1154.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_execution_summary(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceExecutionSummary,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1156) = &input.execution_time {
        object
            .key("ExecutionTime")
            .date_time(var_1156, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1157) = &input.execution_id {
        object.key("ExecutionId").string(var_1157.as_str());
    }
    if let Some(var_1158) = &input.execution_type {
        object.key("ExecutionType").string(var_1158.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compliance_item_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceItemEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1159) = &input.id {
        object.key("Id").string(var_1159.as_str());
    }
    if let Some(var_1160) = &input.title {
        object.key("Title").string(var_1160.as_str());
    }
    if let Some(var_1161) = &input.severity {
        object.key("Severity").string(var_1161.as_str());
    }
    if let Some(var_1162) = &input.status {
        object.key("Status").string(var_1162.as_str());
    }
    if let Some(var_1163) = &input.details {
        let mut object_1164 = object.key("Details").start_object();
        for (key_1165, value_1166) in var_1163 {
            {
                object_1164.key(key_1165).string(value_1166.as_str());
            }
        }
        object_1164.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1167) = &input.type_name {
        object.key("TypeName").string(var_1167.as_str());
    }
    if let Some(var_1168) = &input.schema_version {
        object.key("SchemaVersion").string(var_1168.as_str());
    }
    if let Some(var_1169) = &input.capture_time {
        object.key("CaptureTime").string(var_1169.as_str());
    }
    if let Some(var_1170) = &input.content_hash {
        object.key("ContentHash").string(var_1170.as_str());
    }
    if let Some(var_1171) = &input.content {
        let mut array_1172 = object.key("Content").start_array();
        for item_1173 in var_1171 {
            {
                let mut object_1174 = array_1172.value().start_object();
                for (key_1175, value_1176) in item_1173 {
                    {
                        object_1174.key(key_1175).string(value_1176.as_str());
                    }
                }
                object_1174.finish();
            }
        }
        array_1172.finish();
    }
    if let Some(var_1177) = &input.context {
        let mut object_1178 = object.key("Context").start_object();
        for (key_1179, value_1180) in var_1177 {
            {
                object_1178.key(key_1179).string(value_1180.as_str());
            }
        }
        object_1178.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_task_parameter_value_expression(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowTaskParameterValueExpression,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1181) = &input.values {
        let mut array_1182 = object.key("Values").start_array();
        for item_1183 in var_1181 {
            {
                array_1182.value().string(item_1183.as_str());
            }
        }
        array_1182.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_task_invocation_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowTaskInvocationParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1184) = &input.run_command {
        let mut object_1185 = object.key("RunCommand").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_run_command_parameters(
            &mut object_1185,
            var_1184,
        )?;
        object_1185.finish();
    }
    if let Some(var_1186) = &input.automation {
        let mut object_1187 = object.key("Automation").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_automation_parameters(
            &mut object_1187,
            var_1186,
        )?;
        object_1187.finish();
    }
    if let Some(var_1188) = &input.step_functions {
        let mut object_1189 = object.key("StepFunctions").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_step_functions_parameters(&mut object_1189, var_1188)?;
        object_1189.finish();
    }
    if let Some(var_1190) = &input.lambda {
        let mut object_1191 = object.key("Lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_maintenance_window_lambda_parameters(
            &mut object_1191,
            var_1190,
        )?;
        object_1191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1192) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1192.as_str());
    }
    if let Some(var_1193) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1193.as_str());
    }
    if let Some(var_1194) = &input.s3_region {
        object.key("S3Region").string(var_1194.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_notification_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1195) = &input.notification_arn {
        object.key("NotificationArn").string(var_1195.as_str());
    }
    if let Some(var_1196) = &input.notification_events {
        let mut array_1197 = object.key("NotificationEvents").start_array();
        for item_1198 in var_1196 {
            {
                array_1197.value().string(item_1198.as_str());
            }
        }
        array_1197.finish();
    }
    if let Some(var_1199) = &input.notification_type {
        object.key("NotificationType").string(var_1199.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_output_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchOutputConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1200) = &input.cloud_watch_log_group_name {
        object
            .key("CloudWatchLogGroupName")
            .string(var_1200.as_str());
    }
    if input.cloud_watch_output_enabled {
        object
            .key("CloudWatchOutputEnabled")
            .boolean(input.cloud_watch_output_enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_runbook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Runbook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1201) = &input.document_name {
        object.key("DocumentName").string(var_1201.as_str());
    }
    if let Some(var_1202) = &input.document_version {
        object.key("DocumentVersion").string(var_1202.as_str());
    }
    if let Some(var_1203) = &input.parameters {
        let mut object_1204 = object.key("Parameters").start_object();
        for (key_1205, value_1206) in var_1203 {
            {
                let mut array_1207 = object_1204.key(key_1205).start_array();
                for item_1208 in value_1206 {
                    {
                        array_1207.value().string(item_1208.as_str());
                    }
                }
                array_1207.finish();
            }
        }
        object_1204.finish();
    }
    if let Some(var_1209) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_1209.as_str());
    }
    if let Some(var_1210) = &input.targets {
        let mut array_1211 = object.key("Targets").start_array();
        for item_1212 in var_1210 {
            {
                let mut object_1213 = array_1211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target(
                    &mut object_1213,
                    item_1212,
                )?;
                object_1213.finish();
            }
        }
        array_1211.finish();
    }
    if let Some(var_1214) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_1214.as_str());
    }
    if let Some(var_1215) = &input.max_errors {
        object.key("MaxErrors").string(var_1215.as_str());
    }
    if let Some(var_1216) = &input.target_locations {
        let mut array_1217 = object.key("TargetLocations").start_array();
        for item_1218 in var_1216 {
            {
                let mut object_1219 = array_1217.value().start_object();
                crate::json_ser::serialize_structure_crate_model_target_location(
                    &mut object_1219,
                    item_1218,
                )?;
                object_1219.finish();
            }
        }
        array_1217.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_association_status(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationStatus,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1220) = &input.date {
        object
            .key("Date")
            .date_time(var_1220, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1221) = &input.name {
        object.key("Name").string(var_1221.as_str());
    }
    if let Some(var_1222) = &input.message {
        object.key("Message").string(var_1222.as_str());
    }
    if let Some(var_1223) = &input.additional_info {
        object.key("AdditionalInfo").string(var_1223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_reviews(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentReviews,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1224) = &input.action {
        object.key("Action").string(var_1224.as_str());
    }
    if let Some(var_1225) = &input.comment {
        let mut array_1226 = object.key("Comment").start_array();
        for item_1227 in var_1225 {
            {
                let mut object_1228 = array_1226.value().start_object();
                crate::json_ser::serialize_structure_crate_model_document_review_comment_source(
                    &mut object_1228,
                    item_1227,
                )?;
                object_1228.finish();
            }
        }
        array_1226.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_output_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3OutputLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1229) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_1229.as_str());
    }
    if let Some(var_1230) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1230.as_str());
    }
    if let Some(var_1231) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1232) = &input.key {
        object.key("Key").string(var_1232.as_str());
    }
    if let Some(var_1233) = &input.values {
        let mut array_1234 = object.key("Values").start_array();
        for item_1235 in var_1233 {
            {
                array_1234.value().string(item_1235.as_str());
            }
        }
        array_1234.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_patch_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1236) = &input.patch_filter_group {
        let mut object_1237 = object.key("PatchFilterGroup").start_object();
        crate::json_ser::serialize_structure_crate_model_patch_filter_group(
            &mut object_1237,
            var_1236,
        )?;
        object_1237.finish();
    }
    if let Some(var_1238) = &input.compliance_level {
        object.key("ComplianceLevel").string(var_1238.as_str());
    }
    if let Some(var_1239) = &input.approve_after_days {
        object.key("ApproveAfterDays").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1239).into()),
        );
    }
    if let Some(var_1240) = &input.approve_until_date {
        object.key("ApproveUntilDate").string(var_1240.as_str());
    }
    if let Some(var_1241) = &input.enable_non_security {
        object.key("EnableNonSecurity").boolean(*var_1241);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_destination_data_sharing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncDestinationDataSharing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1242) = &input.destination_data_sharing_type {
        object
            .key("DestinationDataSharingType")
            .string(var_1242.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_aws_organizations_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncAwsOrganizationsSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1243) = &input.organization_source_type {
        object
            .key("OrganizationSourceType")
            .string(var_1243.as_str());
    }
    if let Some(var_1244) = &input.organizational_units {
        let mut array_1245 = object.key("OrganizationalUnits").start_array();
        for item_1246 in var_1244 {
            {
                let mut object_1247 = array_1245.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_data_sync_organizational_unit(&mut object_1247, item_1246)?;
                object_1247.finish();
            }
        }
        array_1245.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_inventory_group(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1248) = &input.name {
        object.key("Name").string(var_1248.as_str());
    }
    if let Some(var_1249) = &input.filters {
        let mut array_1250 = object.key("Filters").start_array();
        for item_1251 in var_1249 {
            {
                let mut object_1252 = array_1250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_1252,
                    item_1251,
                )?;
                object_1252.finish();
            }
        }
        array_1250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_run_command_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowRunCommandParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1253) = &input.comment {
        object.key("Comment").string(var_1253.as_str());
    }
    if let Some(var_1254) = &input.cloud_watch_output_config {
        let mut object_1255 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_output_config(
            &mut object_1255,
            var_1254,
        )?;
        object_1255.finish();
    }
    if let Some(var_1256) = &input.document_hash {
        object.key("DocumentHash").string(var_1256.as_str());
    }
    if let Some(var_1257) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_1257.as_str());
    }
    if let Some(var_1258) = &input.document_version {
        object.key("DocumentVersion").string(var_1258.as_str());
    }
    if let Some(var_1259) = &input.notification_config {
        let mut object_1260 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_notification_config(
            &mut object_1260,
            var_1259,
        )?;
        object_1260.finish();
    }
    if let Some(var_1261) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1261.as_str());
    }
    if let Some(var_1262) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1262.as_str());
    }
    if let Some(var_1263) = &input.parameters {
        let mut object_1264 = object.key("Parameters").start_object();
        for (key_1265, value_1266) in var_1263 {
            {
                let mut array_1267 = object_1264.key(key_1265).start_array();
                for item_1268 in value_1266 {
                    {
                        array_1267.value().string(item_1268.as_str());
                    }
                }
                array_1267.finish();
            }
        }
        object_1264.finish();
    }
    if let Some(var_1269) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_1269.as_str());
    }
    if let Some(var_1270) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1270).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_automation_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowAutomationParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1271) = &input.document_version {
        object.key("DocumentVersion").string(var_1271.as_str());
    }
    if let Some(var_1272) = &input.parameters {
        let mut object_1273 = object.key("Parameters").start_object();
        for (key_1274, value_1275) in var_1272 {
            {
                let mut array_1276 = object_1273.key(key_1274).start_array();
                for item_1277 in value_1275 {
                    {
                        array_1276.value().string(item_1277.as_str());
                    }
                }
                array_1276.finish();
            }
        }
        object_1273.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_step_functions_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowStepFunctionsParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1278) = &input.input {
        object.key("Input").string(var_1278.as_str());
    }
    if let Some(var_1279) = &input.name {
        object.key("Name").string(var_1279.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_maintenance_window_lambda_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowLambdaParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1280) = &input.client_context {
        object.key("ClientContext").string(var_1280.as_str());
    }
    if let Some(var_1281) = &input.qualifier {
        object.key("Qualifier").string(var_1281.as_str());
    }
    if let Some(var_1282) = &input.payload {
        object
            .key("Payload")
            .string_unchecked(&aws_smithy_types::base64::encode(var_1282));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_document_review_comment_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentReviewCommentSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1283) = &input.r#type {
        object.key("Type").string(var_1283.as_str());
    }
    if let Some(var_1284) = &input.content {
        object.key("Content").string(var_1284.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_data_sync_organizational_unit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncOrganizationalUnit,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1285) = &input.organizational_unit_id {
        object.key("OrganizationalUnitId").string(var_1285.as_str());
    }
    Ok(())
}
