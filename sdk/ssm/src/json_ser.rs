// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_tags_to_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) {
    if let Some(var_1) = &input.resource_type {
        object.key("ResourceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2);
    }
    if let Some(var_3) = &input.tags {
        let mut array_4 = object.key("Tags").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_6, item_5);
                object_6.finish();
            }
        }
        array_4.finish();
    }
}

pub fn serialize_structure_associate_ops_item_related_item_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateOpsItemRelatedItemInput,
) {
    if let Some(var_7) = &input.ops_item_id {
        object.key("OpsItemId").string(var_7);
    }
    if let Some(var_8) = &input.association_type {
        object.key("AssociationType").string(var_8);
    }
    if let Some(var_9) = &input.resource_type {
        object.key("ResourceType").string(var_9);
    }
    if let Some(var_10) = &input.resource_uri {
        object.key("ResourceUri").string(var_10);
    }
}

pub fn serialize_structure_cancel_command_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelCommandInput,
) {
    if let Some(var_11) = &input.command_id {
        object.key("CommandId").string(var_11);
    }
    if let Some(var_12) = &input.instance_ids {
        let mut array_13 = object.key("InstanceIds").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14);
            }
        }
        array_13.finish();
    }
}

pub fn serialize_structure_cancel_maintenance_window_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMaintenanceWindowExecutionInput,
) {
    if let Some(var_15) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_15);
    }
}

pub fn serialize_structure_create_activation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateActivationInput,
) {
    if let Some(var_16) = &input.description {
        object.key("Description").string(var_16);
    }
    if let Some(var_17) = &input.default_instance_name {
        object.key("DefaultInstanceName").string(var_17);
    }
    if let Some(var_18) = &input.iam_role {
        object.key("IamRole").string(var_18);
    }
    if let Some(var_19) = &input.registration_limit {
        object.key("RegistrationLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.expiration_date {
        object
            .key("ExpirationDate")
            .instant(var_20, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_21) = &input.tags {
        let mut array_22 = object.key("Tags").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_24, item_23);
                object_24.finish();
            }
        }
        array_22.finish();
    }
}

pub fn serialize_structure_create_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssociationInput,
) {
    if let Some(var_25) = &input.name {
        object.key("Name").string(var_25);
    }
    if let Some(var_26) = &input.document_version {
        object.key("DocumentVersion").string(var_26);
    }
    if let Some(var_27) = &input.instance_id {
        object.key("InstanceId").string(var_27);
    }
    if let Some(var_28) = &input.parameters {
        let mut object_29 = object.key("Parameters").start_object();
        for (key_30, value_31) in var_28 {
            {
                let mut array_32 = object_29.key(key_30).start_array();
                for item_33 in value_31 {
                    {
                        array_32.value().string(item_33);
                    }
                }
                array_32.finish();
            }
        }
        object_29.finish();
    }
    if let Some(var_34) = &input.targets {
        let mut array_35 = object.key("Targets").start_array();
        for item_36 in var_34 {
            {
                let mut object_37 = array_35.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_37, item_36);
                object_37.finish();
            }
        }
        array_35.finish();
    }
    if let Some(var_38) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_38);
    }
    if let Some(var_39) = &input.output_location {
        let mut object_40 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_instance_association_output_location(
            &mut object_40,
            var_39,
        );
        object_40.finish();
    }
    if let Some(var_41) = &input.association_name {
        object.key("AssociationName").string(var_41);
    }
    if let Some(var_42) = &input.automation_target_parameter_name {
        object.key("AutomationTargetParameterName").string(var_42);
    }
    if let Some(var_43) = &input.max_errors {
        object.key("MaxErrors").string(var_43);
    }
    if let Some(var_44) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_44);
    }
    if let Some(var_45) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_45.as_str());
    }
    if let Some(var_46) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_46.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_47) = &input.calendar_names {
        let mut array_48 = object.key("CalendarNames").start_array();
        for item_49 in var_47 {
            {
                array_48.value().string(item_49);
            }
        }
        array_48.finish();
    }
    if let Some(var_50) = &input.target_locations {
        let mut array_51 = object.key("TargetLocations").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_target_location(&mut object_53, item_52);
                object_53.finish();
            }
        }
        array_51.finish();
    }
}

pub fn serialize_structure_create_association_batch_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAssociationBatchInput,
) {
    if let Some(var_54) = &input.entries {
        let mut array_55 = object.key("Entries").start_array();
        for item_56 in var_54 {
            {
                let mut object_57 = array_55.value().start_object();
                crate::json_ser::serialize_structure_create_association_batch_request_entry(
                    &mut object_57,
                    item_56,
                );
                object_57.finish();
            }
        }
        array_55.finish();
    }
}

pub fn serialize_structure_create_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDocumentInput,
) {
    if let Some(var_58) = &input.content {
        object.key("Content").string(var_58);
    }
    if let Some(var_59) = &input.requires {
        let mut array_60 = object.key("Requires").start_array();
        for item_61 in var_59 {
            {
                let mut object_62 = array_60.value().start_object();
                crate::json_ser::serialize_structure_document_requires(&mut object_62, item_61);
                object_62.finish();
            }
        }
        array_60.finish();
    }
    if let Some(var_63) = &input.attachments {
        let mut array_64 = object.key("Attachments").start_array();
        for item_65 in var_63 {
            {
                let mut object_66 = array_64.value().start_object();
                crate::json_ser::serialize_structure_attachments_source(&mut object_66, item_65);
                object_66.finish();
            }
        }
        array_64.finish();
    }
    if let Some(var_67) = &input.name {
        object.key("Name").string(var_67);
    }
    if let Some(var_68) = &input.display_name {
        object.key("DisplayName").string(var_68);
    }
    if let Some(var_69) = &input.version_name {
        object.key("VersionName").string(var_69);
    }
    if let Some(var_70) = &input.document_type {
        object.key("DocumentType").string(var_70.as_str());
    }
    if let Some(var_71) = &input.document_format {
        object.key("DocumentFormat").string(var_71.as_str());
    }
    if let Some(var_72) = &input.target_type {
        object.key("TargetType").string(var_72);
    }
    if let Some(var_73) = &input.tags {
        let mut array_74 = object.key("Tags").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_76, item_75);
                object_76.finish();
            }
        }
        array_74.finish();
    }
}

pub fn serialize_structure_create_maintenance_window_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMaintenanceWindowInput,
) {
    if let Some(var_77) = &input.name {
        object.key("Name").string(var_77);
    }
    if let Some(var_78) = &input.description {
        object.key("Description").string(var_78);
    }
    if let Some(var_79) = &input.start_date {
        object.key("StartDate").string(var_79);
    }
    if let Some(var_80) = &input.end_date {
        object.key("EndDate").string(var_80);
    }
    if let Some(var_81) = &input.schedule {
        object.key("Schedule").string(var_81);
    }
    if let Some(var_82) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_82);
    }
    if let Some(var_83) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_83).into()),
        );
    }
    {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.duration).into()),
        );
    }
    {
        object.key("Cutoff").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.cutoff).into()),
        );
    }
    {
        object
            .key("AllowUnassociatedTargets")
            .boolean(input.allow_unassociated_targets);
    }
    if let Some(var_84) = &input.client_token {
        object.key("ClientToken").string(var_84);
    }
    if let Some(var_85) = &input.tags {
        let mut array_86 = object.key("Tags").start_array();
        for item_87 in var_85 {
            {
                let mut object_88 = array_86.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_88, item_87);
                object_88.finish();
            }
        }
        array_86.finish();
    }
}

pub fn serialize_structure_create_ops_item_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOpsItemInput,
) {
    if let Some(var_89) = &input.description {
        object.key("Description").string(var_89);
    }
    if let Some(var_90) = &input.ops_item_type {
        object.key("OpsItemType").string(var_90);
    }
    if let Some(var_91) = &input.operational_data {
        let mut object_92 = object.key("OperationalData").start_object();
        for (key_93, value_94) in var_91 {
            {
                let mut object_95 = object_92.key(key_93).start_object();
                crate::json_ser::serialize_structure_ops_item_data_value(&mut object_95, value_94);
                object_95.finish();
            }
        }
        object_92.finish();
    }
    if let Some(var_96) = &input.notifications {
        let mut array_97 = object.key("Notifications").start_array();
        for item_98 in var_96 {
            {
                let mut object_99 = array_97.value().start_object();
                crate::json_ser::serialize_structure_ops_item_notification(&mut object_99, item_98);
                object_99.finish();
            }
        }
        array_97.finish();
    }
    if let Some(var_100) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_100).into()),
        );
    }
    if let Some(var_101) = &input.related_ops_items {
        let mut array_102 = object.key("RelatedOpsItems").start_array();
        for item_103 in var_101 {
            {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_related_ops_item(&mut object_104, item_103);
                object_104.finish();
            }
        }
        array_102.finish();
    }
    if let Some(var_105) = &input.source {
        object.key("Source").string(var_105);
    }
    if let Some(var_106) = &input.title {
        object.key("Title").string(var_106);
    }
    if let Some(var_107) = &input.tags {
        let mut array_108 = object.key("Tags").start_array();
        for item_109 in var_107 {
            {
                let mut object_110 = array_108.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_110, item_109);
                object_110.finish();
            }
        }
        array_108.finish();
    }
    if let Some(var_111) = &input.category {
        object.key("Category").string(var_111);
    }
    if let Some(var_112) = &input.severity {
        object.key("Severity").string(var_112);
    }
    if let Some(var_113) = &input.actual_start_time {
        object
            .key("ActualStartTime")
            .instant(var_113, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_114) = &input.actual_end_time {
        object
            .key("ActualEndTime")
            .instant(var_114, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_115) = &input.planned_start_time {
        object
            .key("PlannedStartTime")
            .instant(var_115, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_116) = &input.planned_end_time {
        object
            .key("PlannedEndTime")
            .instant(var_116, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_create_ops_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOpsMetadataInput,
) {
    if let Some(var_117) = &input.resource_id {
        object.key("ResourceId").string(var_117);
    }
    if let Some(var_118) = &input.metadata {
        let mut object_119 = object.key("Metadata").start_object();
        for (key_120, value_121) in var_118 {
            {
                let mut object_122 = object_119.key(key_120).start_object();
                crate::json_ser::serialize_structure_metadata_value(&mut object_122, value_121);
                object_122.finish();
            }
        }
        object_119.finish();
    }
    if let Some(var_123) = &input.tags {
        let mut array_124 = object.key("Tags").start_array();
        for item_125 in var_123 {
            {
                let mut object_126 = array_124.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_126, item_125);
                object_126.finish();
            }
        }
        array_124.finish();
    }
}

pub fn serialize_structure_create_patch_baseline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePatchBaselineInput,
) {
    if let Some(var_127) = &input.operating_system {
        object.key("OperatingSystem").string(var_127.as_str());
    }
    if let Some(var_128) = &input.name {
        object.key("Name").string(var_128);
    }
    if let Some(var_129) = &input.global_filters {
        let mut object_130 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_patch_filter_group(&mut object_130, var_129);
        object_130.finish();
    }
    if let Some(var_131) = &input.approval_rules {
        let mut object_132 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_patch_rule_group(&mut object_132, var_131);
        object_132.finish();
    }
    if let Some(var_133) = &input.approved_patches {
        let mut array_134 = object.key("ApprovedPatches").start_array();
        for item_135 in var_133 {
            {
                array_134.value().string(item_135);
            }
        }
        array_134.finish();
    }
    if let Some(var_136) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_136.as_str());
    }
    if let Some(var_137) = &input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(*var_137);
    }
    if let Some(var_138) = &input.rejected_patches {
        let mut array_139 = object.key("RejectedPatches").start_array();
        for item_140 in var_138 {
            {
                array_139.value().string(item_140);
            }
        }
        array_139.finish();
    }
    if let Some(var_141) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_141.as_str());
    }
    if let Some(var_142) = &input.description {
        object.key("Description").string(var_142);
    }
    if let Some(var_143) = &input.sources {
        let mut array_144 = object.key("Sources").start_array();
        for item_145 in var_143 {
            {
                let mut object_146 = array_144.value().start_object();
                crate::json_ser::serialize_structure_patch_source(&mut object_146, item_145);
                object_146.finish();
            }
        }
        array_144.finish();
    }
    if let Some(var_147) = &input.client_token {
        object.key("ClientToken").string(var_147);
    }
    if let Some(var_148) = &input.tags {
        let mut array_149 = object.key("Tags").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_151, item_150);
                object_151.finish();
            }
        }
        array_149.finish();
    }
}

pub fn serialize_structure_create_resource_data_sync_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourceDataSyncInput,
) {
    if let Some(var_152) = &input.sync_name {
        object.key("SyncName").string(var_152);
    }
    if let Some(var_153) = &input.s3_destination {
        let mut object_154 = object.key("S3Destination").start_object();
        crate::json_ser::serialize_structure_resource_data_sync_s3_destination(
            &mut object_154,
            var_153,
        );
        object_154.finish();
    }
    if let Some(var_155) = &input.sync_type {
        object.key("SyncType").string(var_155);
    }
    if let Some(var_156) = &input.sync_source {
        let mut object_157 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_resource_data_sync_source(&mut object_157, var_156);
        object_157.finish();
    }
}

pub fn serialize_structure_delete_activation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteActivationInput,
) {
    if let Some(var_158) = &input.activation_id {
        object.key("ActivationId").string(var_158);
    }
}

pub fn serialize_structure_delete_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAssociationInput,
) {
    if let Some(var_159) = &input.name {
        object.key("Name").string(var_159);
    }
    if let Some(var_160) = &input.instance_id {
        object.key("InstanceId").string(var_160);
    }
    if let Some(var_161) = &input.association_id {
        object.key("AssociationId").string(var_161);
    }
}

pub fn serialize_structure_delete_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDocumentInput,
) {
    if let Some(var_162) = &input.name {
        object.key("Name").string(var_162);
    }
    if let Some(var_163) = &input.document_version {
        object.key("DocumentVersion").string(var_163);
    }
    if let Some(var_164) = &input.version_name {
        object.key("VersionName").string(var_164);
    }
    if input.force {
        object.key("Force").boolean(input.force);
    }
}

pub fn serialize_structure_delete_inventory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteInventoryInput,
) {
    if let Some(var_165) = &input.type_name {
        object.key("TypeName").string(var_165);
    }
    if let Some(var_166) = &input.schema_delete_option {
        object.key("SchemaDeleteOption").string(var_166.as_str());
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    if let Some(var_167) = &input.client_token {
        object.key("ClientToken").string(var_167);
    }
}

pub fn serialize_structure_delete_maintenance_window_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMaintenanceWindowInput,
) {
    if let Some(var_168) = &input.window_id {
        object.key("WindowId").string(var_168);
    }
}

pub fn serialize_structure_delete_ops_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOpsMetadataInput,
) {
    if let Some(var_169) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_169);
    }
}

pub fn serialize_structure_delete_parameter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteParameterInput,
) {
    if let Some(var_170) = &input.name {
        object.key("Name").string(var_170);
    }
}

pub fn serialize_structure_delete_parameters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteParametersInput,
) {
    if let Some(var_171) = &input.names {
        let mut array_172 = object.key("Names").start_array();
        for item_173 in var_171 {
            {
                array_172.value().string(item_173);
            }
        }
        array_172.finish();
    }
}

pub fn serialize_structure_delete_patch_baseline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePatchBaselineInput,
) {
    if let Some(var_174) = &input.baseline_id {
        object.key("BaselineId").string(var_174);
    }
}

pub fn serialize_structure_delete_resource_data_sync_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceDataSyncInput,
) {
    if let Some(var_175) = &input.sync_name {
        object.key("SyncName").string(var_175);
    }
    if let Some(var_176) = &input.sync_type {
        object.key("SyncType").string(var_176);
    }
}

pub fn serialize_structure_deregister_managed_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterManagedInstanceInput,
) {
    if let Some(var_177) = &input.instance_id {
        object.key("InstanceId").string(var_177);
    }
}

pub fn serialize_structure_deregister_patch_baseline_for_patch_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterPatchBaselineForPatchGroupInput,
) {
    if let Some(var_178) = &input.baseline_id {
        object.key("BaselineId").string(var_178);
    }
    if let Some(var_179) = &input.patch_group {
        object.key("PatchGroup").string(var_179);
    }
}

pub fn serialize_structure_deregister_target_from_maintenance_window_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTargetFromMaintenanceWindowInput,
) {
    if let Some(var_180) = &input.window_id {
        object.key("WindowId").string(var_180);
    }
    if let Some(var_181) = &input.window_target_id {
        object.key("WindowTargetId").string(var_181);
    }
    if let Some(var_182) = &input.safe {
        object.key("Safe").boolean(*var_182);
    }
}

pub fn serialize_structure_deregister_task_from_maintenance_window_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterTaskFromMaintenanceWindowInput,
) {
    if let Some(var_183) = &input.window_id {
        object.key("WindowId").string(var_183);
    }
    if let Some(var_184) = &input.window_task_id {
        object.key("WindowTaskId").string(var_184);
    }
}

pub fn serialize_structure_describe_activations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeActivationsInput,
) {
    if let Some(var_185) = &input.filters {
        let mut array_186 = object.key("Filters").start_array();
        for item_187 in var_185 {
            {
                let mut object_188 = array_186.value().start_object();
                crate::json_ser::serialize_structure_describe_activations_filter(
                    &mut object_188,
                    item_187,
                );
                object_188.finish();
            }
        }
        array_186.finish();
    }
    if let Some(var_189) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.next_token {
        object.key("NextToken").string(var_190);
    }
}

pub fn serialize_structure_describe_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationInput,
) {
    if let Some(var_191) = &input.name {
        object.key("Name").string(var_191);
    }
    if let Some(var_192) = &input.instance_id {
        object.key("InstanceId").string(var_192);
    }
    if let Some(var_193) = &input.association_id {
        object.key("AssociationId").string(var_193);
    }
    if let Some(var_194) = &input.association_version {
        object.key("AssociationVersion").string(var_194);
    }
}

pub fn serialize_structure_describe_association_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationExecutionsInput,
) {
    if let Some(var_195) = &input.association_id {
        object.key("AssociationId").string(var_195);
    }
    if let Some(var_196) = &input.filters {
        let mut array_197 = object.key("Filters").start_array();
        for item_198 in var_196 {
            {
                let mut object_199 = array_197.value().start_object();
                crate::json_ser::serialize_structure_association_execution_filter(
                    &mut object_199,
                    item_198,
                );
                object_199.finish();
            }
        }
        array_197.finish();
    }
    if let Some(var_200) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_200).into()),
        );
    }
    if let Some(var_201) = &input.next_token {
        object.key("NextToken").string(var_201);
    }
}

pub fn serialize_structure_describe_association_execution_targets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAssociationExecutionTargetsInput,
) {
    if let Some(var_202) = &input.association_id {
        object.key("AssociationId").string(var_202);
    }
    if let Some(var_203) = &input.execution_id {
        object.key("ExecutionId").string(var_203);
    }
    if let Some(var_204) = &input.filters {
        let mut array_205 = object.key("Filters").start_array();
        for item_206 in var_204 {
            {
                let mut object_207 = array_205.value().start_object();
                crate::json_ser::serialize_structure_association_execution_targets_filter(
                    &mut object_207,
                    item_206,
                );
                object_207.finish();
            }
        }
        array_205.finish();
    }
    if let Some(var_208) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_208).into()),
        );
    }
    if let Some(var_209) = &input.next_token {
        object.key("NextToken").string(var_209);
    }
}

pub fn serialize_structure_describe_automation_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutomationExecutionsInput,
) {
    if let Some(var_210) = &input.filters {
        let mut array_211 = object.key("Filters").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_automation_execution_filter(
                    &mut object_213,
                    item_212,
                );
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_214).into()),
        );
    }
    if let Some(var_215) = &input.next_token {
        object.key("NextToken").string(var_215);
    }
}

pub fn serialize_structure_describe_automation_step_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutomationStepExecutionsInput,
) {
    if let Some(var_216) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_216);
    }
    if let Some(var_217) = &input.filters {
        let mut array_218 = object.key("Filters").start_array();
        for item_219 in var_217 {
            {
                let mut object_220 = array_218.value().start_object();
                crate::json_ser::serialize_structure_step_execution_filter(
                    &mut object_220,
                    item_219,
                );
                object_220.finish();
            }
        }
        array_218.finish();
    }
    if let Some(var_221) = &input.next_token {
        object.key("NextToken").string(var_221);
    }
    if let Some(var_222) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_222).into()),
        );
    }
    if let Some(var_223) = &input.reverse_order {
        object.key("ReverseOrder").boolean(*var_223);
    }
}

pub fn serialize_structure_describe_available_patches_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAvailablePatchesInput,
) {
    if let Some(var_224) = &input.filters {
        let mut array_225 = object.key("Filters").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_patch_orchestrator_filter(
                    &mut object_227,
                    item_226,
                );
                object_227.finish();
            }
        }
        array_225.finish();
    }
    if let Some(var_228) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_228).into()),
        );
    }
    if let Some(var_229) = &input.next_token {
        object.key("NextToken").string(var_229);
    }
}

pub fn serialize_structure_describe_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentInput,
) {
    if let Some(var_230) = &input.name {
        object.key("Name").string(var_230);
    }
    if let Some(var_231) = &input.document_version {
        object.key("DocumentVersion").string(var_231);
    }
    if let Some(var_232) = &input.version_name {
        object.key("VersionName").string(var_232);
    }
}

pub fn serialize_structure_describe_document_permission_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDocumentPermissionInput,
) {
    if let Some(var_233) = &input.name {
        object.key("Name").string(var_233);
    }
    if let Some(var_234) = &input.permission_type {
        object.key("PermissionType").string(var_234.as_str());
    }
    if let Some(var_235) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    if let Some(var_236) = &input.next_token {
        object.key("NextToken").string(var_236);
    }
}

pub fn serialize_structure_describe_effective_instance_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEffectiveInstanceAssociationsInput,
) {
    if let Some(var_237) = &input.instance_id {
        object.key("InstanceId").string(var_237);
    }
    if let Some(var_238) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_238).into()),
        );
    }
    if let Some(var_239) = &input.next_token {
        object.key("NextToken").string(var_239);
    }
}

pub fn serialize_structure_describe_effective_patches_for_patch_baseline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEffectivePatchesForPatchBaselineInput,
) {
    if let Some(var_240) = &input.baseline_id {
        object.key("BaselineId").string(var_240);
    }
    if let Some(var_241) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_241).into()),
        );
    }
    if let Some(var_242) = &input.next_token {
        object.key("NextToken").string(var_242);
    }
}

pub fn serialize_structure_describe_instance_associations_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstanceAssociationsStatusInput,
) {
    if let Some(var_243) = &input.instance_id {
        object.key("InstanceId").string(var_243);
    }
    if let Some(var_244) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_244).into()),
        );
    }
    if let Some(var_245) = &input.next_token {
        object.key("NextToken").string(var_245);
    }
}

pub fn serialize_structure_describe_instance_information_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstanceInformationInput,
) {
    if let Some(var_246) = &input.instance_information_filter_list {
        let mut array_247 = object.key("InstanceInformationFilterList").start_array();
        for item_248 in var_246 {
            {
                let mut object_249 = array_247.value().start_object();
                crate::json_ser::serialize_structure_instance_information_filter(
                    &mut object_249,
                    item_248,
                );
                object_249.finish();
            }
        }
        array_247.finish();
    }
    if let Some(var_250) = &input.filters {
        let mut array_251 = object.key("Filters").start_array();
        for item_252 in var_250 {
            {
                let mut object_253 = array_251.value().start_object();
                crate::json_ser::serialize_structure_instance_information_string_filter(
                    &mut object_253,
                    item_252,
                );
                object_253.finish();
            }
        }
        array_251.finish();
    }
    if let Some(var_254) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_254).into()),
        );
    }
    if let Some(var_255) = &input.next_token {
        object.key("NextToken").string(var_255);
    }
}

pub fn serialize_structure_describe_instance_patches_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchesInput,
) {
    if let Some(var_256) = &input.instance_id {
        object.key("InstanceId").string(var_256);
    }
    if let Some(var_257) = &input.filters {
        let mut array_258 = object.key("Filters").start_array();
        for item_259 in var_257 {
            {
                let mut object_260 = array_258.value().start_object();
                crate::json_ser::serialize_structure_patch_orchestrator_filter(
                    &mut object_260,
                    item_259,
                );
                object_260.finish();
            }
        }
        array_258.finish();
    }
    if let Some(var_261) = &input.next_token {
        object.key("NextToken").string(var_261);
    }
    if let Some(var_262) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_262).into()),
        );
    }
}

pub fn serialize_structure_describe_instance_patch_states_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchStatesInput,
) {
    if let Some(var_263) = &input.instance_ids {
        let mut array_264 = object.key("InstanceIds").start_array();
        for item_265 in var_263 {
            {
                array_264.value().string(item_265);
            }
        }
        array_264.finish();
    }
    if let Some(var_266) = &input.next_token {
        object.key("NextToken").string(var_266);
    }
    if let Some(var_267) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_267).into()),
        );
    }
}

pub fn serialize_structure_describe_instance_patch_states_for_patch_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInstancePatchStatesForPatchGroupInput,
) {
    if let Some(var_268) = &input.patch_group {
        object.key("PatchGroup").string(var_268);
    }
    if let Some(var_269) = &input.filters {
        let mut array_270 = object.key("Filters").start_array();
        for item_271 in var_269 {
            {
                let mut object_272 = array_270.value().start_object();
                crate::json_ser::serialize_structure_instance_patch_state_filter(
                    &mut object_272,
                    item_271,
                );
                object_272.finish();
            }
        }
        array_270.finish();
    }
    if let Some(var_273) = &input.next_token {
        object.key("NextToken").string(var_273);
    }
    if let Some(var_274) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_274).into()),
        );
    }
}

pub fn serialize_structure_describe_inventory_deletions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInventoryDeletionsInput,
) {
    if let Some(var_275) = &input.deletion_id {
        object.key("DeletionId").string(var_275);
    }
    if let Some(var_276) = &input.next_token {
        object.key("NextToken").string(var_276);
    }
    if let Some(var_277) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_277).into()),
        );
    }
}

pub fn serialize_structure_describe_maintenance_window_executions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionsInput,
) {
    if let Some(var_278) = &input.window_id {
        object.key("WindowId").string(var_278);
    }
    if let Some(var_279) = &input.filters {
        let mut array_280 = object.key("Filters").start_array();
        for item_281 in var_279 {
            {
                let mut object_282 = array_280.value().start_object();
                crate::json_ser::serialize_structure_maintenance_window_filter(
                    &mut object_282,
                    item_281,
                );
                object_282.finish();
            }
        }
        array_280.finish();
    }
    if let Some(var_283) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_283).into()),
        );
    }
    if let Some(var_284) = &input.next_token {
        object.key("NextToken").string(var_284);
    }
}

pub fn serialize_structure_describe_maintenance_window_execution_task_invocations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionTaskInvocationsInput,
) {
    if let Some(var_285) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_285);
    }
    if let Some(var_286) = &input.task_id {
        object.key("TaskId").string(var_286);
    }
    if let Some(var_287) = &input.filters {
        let mut array_288 = object.key("Filters").start_array();
        for item_289 in var_287 {
            {
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_maintenance_window_filter(
                    &mut object_290,
                    item_289,
                );
                object_290.finish();
            }
        }
        array_288.finish();
    }
    if let Some(var_291) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_291).into()),
        );
    }
    if let Some(var_292) = &input.next_token {
        object.key("NextToken").string(var_292);
    }
}

pub fn serialize_structure_describe_maintenance_window_execution_tasks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowExecutionTasksInput,
) {
    if let Some(var_293) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_293);
    }
    if let Some(var_294) = &input.filters {
        let mut array_295 = object.key("Filters").start_array();
        for item_296 in var_294 {
            {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_maintenance_window_filter(
                    &mut object_297,
                    item_296,
                );
                object_297.finish();
            }
        }
        array_295.finish();
    }
    if let Some(var_298) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_298).into()),
        );
    }
    if let Some(var_299) = &input.next_token {
        object.key("NextToken").string(var_299);
    }
}

pub fn serialize_structure_describe_maintenance_windows_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowsInput,
) {
    if let Some(var_300) = &input.filters {
        let mut array_301 = object.key("Filters").start_array();
        for item_302 in var_300 {
            {
                let mut object_303 = array_301.value().start_object();
                crate::json_ser::serialize_structure_maintenance_window_filter(
                    &mut object_303,
                    item_302,
                );
                object_303.finish();
            }
        }
        array_301.finish();
    }
    if let Some(var_304) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_304).into()),
        );
    }
    if let Some(var_305) = &input.next_token {
        object.key("NextToken").string(var_305);
    }
}

pub fn serialize_structure_describe_maintenance_window_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowScheduleInput,
) {
    if let Some(var_306) = &input.window_id {
        object.key("WindowId").string(var_306);
    }
    if let Some(var_307) = &input.targets {
        let mut array_308 = object.key("Targets").start_array();
        for item_309 in var_307 {
            {
                let mut object_310 = array_308.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_310, item_309);
                object_310.finish();
            }
        }
        array_308.finish();
    }
    if let Some(var_311) = &input.resource_type {
        object.key("ResourceType").string(var_311.as_str());
    }
    if let Some(var_312) = &input.filters {
        let mut array_313 = object.key("Filters").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_patch_orchestrator_filter(
                    &mut object_315,
                    item_314,
                );
                object_315.finish();
            }
        }
        array_313.finish();
    }
    if let Some(var_316) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_316).into()),
        );
    }
    if let Some(var_317) = &input.next_token {
        object.key("NextToken").string(var_317);
    }
}

pub fn serialize_structure_describe_maintenance_windows_for_target_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowsForTargetInput,
) {
    if let Some(var_318) = &input.targets {
        let mut array_319 = object.key("Targets").start_array();
        for item_320 in var_318 {
            {
                let mut object_321 = array_319.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_321, item_320);
                object_321.finish();
            }
        }
        array_319.finish();
    }
    if let Some(var_322) = &input.resource_type {
        object.key("ResourceType").string(var_322.as_str());
    }
    if let Some(var_323) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    if let Some(var_324) = &input.next_token {
        object.key("NextToken").string(var_324);
    }
}

pub fn serialize_structure_describe_maintenance_window_targets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowTargetsInput,
) {
    if let Some(var_325) = &input.window_id {
        object.key("WindowId").string(var_325);
    }
    if let Some(var_326) = &input.filters {
        let mut array_327 = object.key("Filters").start_array();
        for item_328 in var_326 {
            {
                let mut object_329 = array_327.value().start_object();
                crate::json_ser::serialize_structure_maintenance_window_filter(
                    &mut object_329,
                    item_328,
                );
                object_329.finish();
            }
        }
        array_327.finish();
    }
    if let Some(var_330) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_330).into()),
        );
    }
    if let Some(var_331) = &input.next_token {
        object.key("NextToken").string(var_331);
    }
}

pub fn serialize_structure_describe_maintenance_window_tasks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceWindowTasksInput,
) {
    if let Some(var_332) = &input.window_id {
        object.key("WindowId").string(var_332);
    }
    if let Some(var_333) = &input.filters {
        let mut array_334 = object.key("Filters").start_array();
        for item_335 in var_333 {
            {
                let mut object_336 = array_334.value().start_object();
                crate::json_ser::serialize_structure_maintenance_window_filter(
                    &mut object_336,
                    item_335,
                );
                object_336.finish();
            }
        }
        array_334.finish();
    }
    if let Some(var_337) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_337).into()),
        );
    }
    if let Some(var_338) = &input.next_token {
        object.key("NextToken").string(var_338);
    }
}

pub fn serialize_structure_describe_ops_items_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOpsItemsInput,
) {
    if let Some(var_339) = &input.ops_item_filters {
        let mut array_340 = object.key("OpsItemFilters").start_array();
        for item_341 in var_339 {
            {
                let mut object_342 = array_340.value().start_object();
                crate::json_ser::serialize_structure_ops_item_filter(&mut object_342, item_341);
                object_342.finish();
            }
        }
        array_340.finish();
    }
    if let Some(var_343) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_343).into()),
        );
    }
    if let Some(var_344) = &input.next_token {
        object.key("NextToken").string(var_344);
    }
}

pub fn serialize_structure_describe_parameters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeParametersInput,
) {
    if let Some(var_345) = &input.filters {
        let mut array_346 = object.key("Filters").start_array();
        for item_347 in var_345 {
            {
                let mut object_348 = array_346.value().start_object();
                crate::json_ser::serialize_structure_parameters_filter(&mut object_348, item_347);
                object_348.finish();
            }
        }
        array_346.finish();
    }
    if let Some(var_349) = &input.parameter_filters {
        let mut array_350 = object.key("ParameterFilters").start_array();
        for item_351 in var_349 {
            {
                let mut object_352 = array_350.value().start_object();
                crate::json_ser::serialize_structure_parameter_string_filter(
                    &mut object_352,
                    item_351,
                );
                object_352.finish();
            }
        }
        array_350.finish();
    }
    if let Some(var_353) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_353).into()),
        );
    }
    if let Some(var_354) = &input.next_token {
        object.key("NextToken").string(var_354);
    }
}

pub fn serialize_structure_describe_patch_baselines_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchBaselinesInput,
) {
    if let Some(var_355) = &input.filters {
        let mut array_356 = object.key("Filters").start_array();
        for item_357 in var_355 {
            {
                let mut object_358 = array_356.value().start_object();
                crate::json_ser::serialize_structure_patch_orchestrator_filter(
                    &mut object_358,
                    item_357,
                );
                object_358.finish();
            }
        }
        array_356.finish();
    }
    if let Some(var_359) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_359).into()),
        );
    }
    if let Some(var_360) = &input.next_token {
        object.key("NextToken").string(var_360);
    }
}

pub fn serialize_structure_describe_patch_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchGroupsInput,
) {
    if let Some(var_361) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_361).into()),
        );
    }
    if let Some(var_362) = &input.filters {
        let mut array_363 = object.key("Filters").start_array();
        for item_364 in var_362 {
            {
                let mut object_365 = array_363.value().start_object();
                crate::json_ser::serialize_structure_patch_orchestrator_filter(
                    &mut object_365,
                    item_364,
                );
                object_365.finish();
            }
        }
        array_363.finish();
    }
    if let Some(var_366) = &input.next_token {
        object.key("NextToken").string(var_366);
    }
}

pub fn serialize_structure_describe_patch_group_state_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchGroupStateInput,
) {
    if let Some(var_367) = &input.patch_group {
        object.key("PatchGroup").string(var_367);
    }
}

pub fn serialize_structure_describe_patch_properties_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePatchPropertiesInput,
) {
    if let Some(var_368) = &input.operating_system {
        object.key("OperatingSystem").string(var_368.as_str());
    }
    if let Some(var_369) = &input.property {
        object.key("Property").string(var_369.as_str());
    }
    if let Some(var_370) = &input.patch_set {
        object.key("PatchSet").string(var_370.as_str());
    }
    if let Some(var_371) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_371).into()),
        );
    }
    if let Some(var_372) = &input.next_token {
        object.key("NextToken").string(var_372);
    }
}

pub fn serialize_structure_describe_sessions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSessionsInput,
) {
    if let Some(var_373) = &input.state {
        object.key("State").string(var_373.as_str());
    }
    if let Some(var_374) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_374).into()),
        );
    }
    if let Some(var_375) = &input.next_token {
        object.key("NextToken").string(var_375);
    }
    if let Some(var_376) = &input.filters {
        let mut array_377 = object.key("Filters").start_array();
        for item_378 in var_376 {
            {
                let mut object_379 = array_377.value().start_object();
                crate::json_ser::serialize_structure_session_filter(&mut object_379, item_378);
                object_379.finish();
            }
        }
        array_377.finish();
    }
}

pub fn serialize_structure_disassociate_ops_item_related_item_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateOpsItemRelatedItemInput,
) {
    if let Some(var_380) = &input.ops_item_id {
        object.key("OpsItemId").string(var_380);
    }
    if let Some(var_381) = &input.association_id {
        object.key("AssociationId").string(var_381);
    }
}

pub fn serialize_structure_get_automation_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutomationExecutionInput,
) {
    if let Some(var_382) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_382);
    }
}

pub fn serialize_structure_get_calendar_state_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCalendarStateInput,
) {
    if let Some(var_383) = &input.calendar_names {
        let mut array_384 = object.key("CalendarNames").start_array();
        for item_385 in var_383 {
            {
                array_384.value().string(item_385);
            }
        }
        array_384.finish();
    }
    if let Some(var_386) = &input.at_time {
        object.key("AtTime").string(var_386);
    }
}

pub fn serialize_structure_get_command_invocation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCommandInvocationInput,
) {
    if let Some(var_387) = &input.command_id {
        object.key("CommandId").string(var_387);
    }
    if let Some(var_388) = &input.instance_id {
        object.key("InstanceId").string(var_388);
    }
    if let Some(var_389) = &input.plugin_name {
        object.key("PluginName").string(var_389);
    }
}

pub fn serialize_structure_get_connection_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetConnectionStatusInput,
) {
    if let Some(var_390) = &input.target {
        object.key("Target").string(var_390);
    }
}

pub fn serialize_structure_get_default_patch_baseline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDefaultPatchBaselineInput,
) {
    if let Some(var_391) = &input.operating_system {
        object.key("OperatingSystem").string(var_391.as_str());
    }
}

pub fn serialize_structure_get_deployable_patch_snapshot_for_instance_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDeployablePatchSnapshotForInstanceInput,
) {
    if let Some(var_392) = &input.instance_id {
        object.key("InstanceId").string(var_392);
    }
    if let Some(var_393) = &input.snapshot_id {
        object.key("SnapshotId").string(var_393);
    }
    if let Some(var_394) = &input.baseline_override {
        let mut object_395 = object.key("BaselineOverride").start_object();
        crate::json_ser::serialize_structure_baseline_override(&mut object_395, var_394);
        object_395.finish();
    }
}

pub fn serialize_structure_get_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDocumentInput,
) {
    if let Some(var_396) = &input.name {
        object.key("Name").string(var_396);
    }
    if let Some(var_397) = &input.version_name {
        object.key("VersionName").string(var_397);
    }
    if let Some(var_398) = &input.document_version {
        object.key("DocumentVersion").string(var_398);
    }
    if let Some(var_399) = &input.document_format {
        object.key("DocumentFormat").string(var_399.as_str());
    }
}

pub fn serialize_structure_get_inventory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInventoryInput,
) {
    if let Some(var_400) = &input.filters {
        let mut array_401 = object.key("Filters").start_array();
        for item_402 in var_400 {
            {
                let mut object_403 = array_401.value().start_object();
                crate::json_ser::serialize_structure_inventory_filter(&mut object_403, item_402);
                object_403.finish();
            }
        }
        array_401.finish();
    }
    if let Some(var_404) = &input.aggregators {
        let mut array_405 = object.key("Aggregators").start_array();
        for item_406 in var_404 {
            {
                let mut object_407 = array_405.value().start_object();
                crate::json_ser::serialize_structure_inventory_aggregator(
                    &mut object_407,
                    item_406,
                );
                object_407.finish();
            }
        }
        array_405.finish();
    }
    if let Some(var_408) = &input.result_attributes {
        let mut array_409 = object.key("ResultAttributes").start_array();
        for item_410 in var_408 {
            {
                let mut object_411 = array_409.value().start_object();
                crate::json_ser::serialize_structure_result_attribute(&mut object_411, item_410);
                object_411.finish();
            }
        }
        array_409.finish();
    }
    if let Some(var_412) = &input.next_token {
        object.key("NextToken").string(var_412);
    }
    if let Some(var_413) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_413).into()),
        );
    }
}

pub fn serialize_structure_get_inventory_schema_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetInventorySchemaInput,
) {
    if let Some(var_414) = &input.type_name {
        object.key("TypeName").string(var_414);
    }
    if let Some(var_415) = &input.next_token {
        object.key("NextToken").string(var_415);
    }
    if let Some(var_416) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_416).into()),
        );
    }
    if input.aggregator {
        object.key("Aggregator").boolean(input.aggregator);
    }
    if let Some(var_417) = &input.sub_type {
        object.key("SubType").boolean(*var_417);
    }
}

pub fn serialize_structure_get_maintenance_window_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowInput,
) {
    if let Some(var_418) = &input.window_id {
        object.key("WindowId").string(var_418);
    }
}

pub fn serialize_structure_get_maintenance_window_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionInput,
) {
    if let Some(var_419) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_419);
    }
}

pub fn serialize_structure_get_maintenance_window_execution_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionTaskInput,
) {
    if let Some(var_420) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_420);
    }
    if let Some(var_421) = &input.task_id {
        object.key("TaskId").string(var_421);
    }
}

pub fn serialize_structure_get_maintenance_window_execution_task_invocation_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowExecutionTaskInvocationInput,
) {
    if let Some(var_422) = &input.window_execution_id {
        object.key("WindowExecutionId").string(var_422);
    }
    if let Some(var_423) = &input.task_id {
        object.key("TaskId").string(var_423);
    }
    if let Some(var_424) = &input.invocation_id {
        object.key("InvocationId").string(var_424);
    }
}

pub fn serialize_structure_get_maintenance_window_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMaintenanceWindowTaskInput,
) {
    if let Some(var_425) = &input.window_id {
        object.key("WindowId").string(var_425);
    }
    if let Some(var_426) = &input.window_task_id {
        object.key("WindowTaskId").string(var_426);
    }
}

pub fn serialize_structure_get_ops_item_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsItemInput,
) {
    if let Some(var_427) = &input.ops_item_id {
        object.key("OpsItemId").string(var_427);
    }
}

pub fn serialize_structure_get_ops_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsMetadataInput,
) {
    if let Some(var_428) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_428);
    }
    if let Some(var_429) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_429).into()),
        );
    }
    if let Some(var_430) = &input.next_token {
        object.key("NextToken").string(var_430);
    }
}

pub fn serialize_structure_get_ops_summary_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetOpsSummaryInput,
) {
    if let Some(var_431) = &input.sync_name {
        object.key("SyncName").string(var_431);
    }
    if let Some(var_432) = &input.filters {
        let mut array_433 = object.key("Filters").start_array();
        for item_434 in var_432 {
            {
                let mut object_435 = array_433.value().start_object();
                crate::json_ser::serialize_structure_ops_filter(&mut object_435, item_434);
                object_435.finish();
            }
        }
        array_433.finish();
    }
    if let Some(var_436) = &input.aggregators {
        let mut array_437 = object.key("Aggregators").start_array();
        for item_438 in var_436 {
            {
                let mut object_439 = array_437.value().start_object();
                crate::json_ser::serialize_structure_ops_aggregator(&mut object_439, item_438);
                object_439.finish();
            }
        }
        array_437.finish();
    }
    if let Some(var_440) = &input.result_attributes {
        let mut array_441 = object.key("ResultAttributes").start_array();
        for item_442 in var_440 {
            {
                let mut object_443 = array_441.value().start_object();
                crate::json_ser::serialize_structure_ops_result_attribute(
                    &mut object_443,
                    item_442,
                );
                object_443.finish();
            }
        }
        array_441.finish();
    }
    if let Some(var_444) = &input.next_token {
        object.key("NextToken").string(var_444);
    }
    if let Some(var_445) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_445).into()),
        );
    }
}

pub fn serialize_structure_get_parameter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParameterInput,
) {
    if let Some(var_446) = &input.name {
        object.key("Name").string(var_446);
    }
    if let Some(var_447) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_447);
    }
}

pub fn serialize_structure_get_parameter_history_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParameterHistoryInput,
) {
    if let Some(var_448) = &input.name {
        object.key("Name").string(var_448);
    }
    if let Some(var_449) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_449);
    }
    if let Some(var_450) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_450).into()),
        );
    }
    if let Some(var_451) = &input.next_token {
        object.key("NextToken").string(var_451);
    }
}

pub fn serialize_structure_get_parameters_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersInput,
) {
    if let Some(var_452) = &input.names {
        let mut array_453 = object.key("Names").start_array();
        for item_454 in var_452 {
            {
                array_453.value().string(item_454);
            }
        }
        array_453.finish();
    }
    if let Some(var_455) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_455);
    }
}

pub fn serialize_structure_get_parameters_by_path_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetParametersByPathInput,
) {
    if let Some(var_456) = &input.path {
        object.key("Path").string(var_456);
    }
    if let Some(var_457) = &input.recursive {
        object.key("Recursive").boolean(*var_457);
    }
    if let Some(var_458) = &input.parameter_filters {
        let mut array_459 = object.key("ParameterFilters").start_array();
        for item_460 in var_458 {
            {
                let mut object_461 = array_459.value().start_object();
                crate::json_ser::serialize_structure_parameter_string_filter(
                    &mut object_461,
                    item_460,
                );
                object_461.finish();
            }
        }
        array_459.finish();
    }
    if let Some(var_462) = &input.with_decryption {
        object.key("WithDecryption").boolean(*var_462);
    }
    if let Some(var_463) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_463).into()),
        );
    }
    if let Some(var_464) = &input.next_token {
        object.key("NextToken").string(var_464);
    }
}

pub fn serialize_structure_get_patch_baseline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPatchBaselineInput,
) {
    if let Some(var_465) = &input.baseline_id {
        object.key("BaselineId").string(var_465);
    }
}

pub fn serialize_structure_get_patch_baseline_for_patch_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPatchBaselineForPatchGroupInput,
) {
    if let Some(var_466) = &input.patch_group {
        object.key("PatchGroup").string(var_466);
    }
    if let Some(var_467) = &input.operating_system {
        object.key("OperatingSystem").string(var_467.as_str());
    }
}

pub fn serialize_structure_get_service_setting_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetServiceSettingInput,
) {
    if let Some(var_468) = &input.setting_id {
        object.key("SettingId").string(var_468);
    }
}

pub fn serialize_structure_label_parameter_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::LabelParameterVersionInput,
) {
    if let Some(var_469) = &input.name {
        object.key("Name").string(var_469);
    }
    if let Some(var_470) = &input.parameter_version {
        object.key("ParameterVersion").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_470).into()),
        );
    }
    if let Some(var_471) = &input.labels {
        let mut array_472 = object.key("Labels").start_array();
        for item_473 in var_471 {
            {
                array_472.value().string(item_473);
            }
        }
        array_472.finish();
    }
}

pub fn serialize_structure_list_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsInput,
) {
    if let Some(var_474) = &input.association_filter_list {
        let mut array_475 = object.key("AssociationFilterList").start_array();
        for item_476 in var_474 {
            {
                let mut object_477 = array_475.value().start_object();
                crate::json_ser::serialize_structure_association_filter(&mut object_477, item_476);
                object_477.finish();
            }
        }
        array_475.finish();
    }
    if let Some(var_478) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_478).into()),
        );
    }
    if let Some(var_479) = &input.next_token {
        object.key("NextToken").string(var_479);
    }
}

pub fn serialize_structure_list_association_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationVersionsInput,
) {
    if let Some(var_480) = &input.association_id {
        object.key("AssociationId").string(var_480);
    }
    if let Some(var_481) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_481).into()),
        );
    }
    if let Some(var_482) = &input.next_token {
        object.key("NextToken").string(var_482);
    }
}

pub fn serialize_structure_list_command_invocations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCommandInvocationsInput,
) {
    if let Some(var_483) = &input.command_id {
        object.key("CommandId").string(var_483);
    }
    if let Some(var_484) = &input.instance_id {
        object.key("InstanceId").string(var_484);
    }
    if let Some(var_485) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_485).into()),
        );
    }
    if let Some(var_486) = &input.next_token {
        object.key("NextToken").string(var_486);
    }
    if let Some(var_487) = &input.filters {
        let mut array_488 = object.key("Filters").start_array();
        for item_489 in var_487 {
            {
                let mut object_490 = array_488.value().start_object();
                crate::json_ser::serialize_structure_command_filter(&mut object_490, item_489);
                object_490.finish();
            }
        }
        array_488.finish();
    }
    if input.details {
        object.key("Details").boolean(input.details);
    }
}

pub fn serialize_structure_list_commands_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCommandsInput,
) {
    if let Some(var_491) = &input.command_id {
        object.key("CommandId").string(var_491);
    }
    if let Some(var_492) = &input.instance_id {
        object.key("InstanceId").string(var_492);
    }
    if let Some(var_493) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_493).into()),
        );
    }
    if let Some(var_494) = &input.next_token {
        object.key("NextToken").string(var_494);
    }
    if let Some(var_495) = &input.filters {
        let mut array_496 = object.key("Filters").start_array();
        for item_497 in var_495 {
            {
                let mut object_498 = array_496.value().start_object();
                crate::json_ser::serialize_structure_command_filter(&mut object_498, item_497);
                object_498.finish();
            }
        }
        array_496.finish();
    }
}

pub fn serialize_structure_list_compliance_items_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComplianceItemsInput,
) {
    if let Some(var_499) = &input.filters {
        let mut array_500 = object.key("Filters").start_array();
        for item_501 in var_499 {
            {
                let mut object_502 = array_500.value().start_object();
                crate::json_ser::serialize_structure_compliance_string_filter(
                    &mut object_502,
                    item_501,
                );
                object_502.finish();
            }
        }
        array_500.finish();
    }
    if let Some(var_503) = &input.resource_ids {
        let mut array_504 = object.key("ResourceIds").start_array();
        for item_505 in var_503 {
            {
                array_504.value().string(item_505);
            }
        }
        array_504.finish();
    }
    if let Some(var_506) = &input.resource_types {
        let mut array_507 = object.key("ResourceTypes").start_array();
        for item_508 in var_506 {
            {
                array_507.value().string(item_508);
            }
        }
        array_507.finish();
    }
    if let Some(var_509) = &input.next_token {
        object.key("NextToken").string(var_509);
    }
    if let Some(var_510) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_510).into()),
        );
    }
}

pub fn serialize_structure_list_compliance_summaries_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComplianceSummariesInput,
) {
    if let Some(var_511) = &input.filters {
        let mut array_512 = object.key("Filters").start_array();
        for item_513 in var_511 {
            {
                let mut object_514 = array_512.value().start_object();
                crate::json_ser::serialize_structure_compliance_string_filter(
                    &mut object_514,
                    item_513,
                );
                object_514.finish();
            }
        }
        array_512.finish();
    }
    if let Some(var_515) = &input.next_token {
        object.key("NextToken").string(var_515);
    }
    if let Some(var_516) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_516).into()),
        );
    }
}

pub fn serialize_structure_list_document_metadata_history_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentMetadataHistoryInput,
) {
    if let Some(var_517) = &input.name {
        object.key("Name").string(var_517);
    }
    if let Some(var_518) = &input.document_version {
        object.key("DocumentVersion").string(var_518);
    }
    if let Some(var_519) = &input.metadata {
        object.key("Metadata").string(var_519.as_str());
    }
    if let Some(var_520) = &input.next_token {
        object.key("NextToken").string(var_520);
    }
    if let Some(var_521) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_521).into()),
        );
    }
}

pub fn serialize_structure_list_documents_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentsInput,
) {
    if let Some(var_522) = &input.document_filter_list {
        let mut array_523 = object.key("DocumentFilterList").start_array();
        for item_524 in var_522 {
            {
                let mut object_525 = array_523.value().start_object();
                crate::json_ser::serialize_structure_document_filter(&mut object_525, item_524);
                object_525.finish();
            }
        }
        array_523.finish();
    }
    if let Some(var_526) = &input.filters {
        let mut array_527 = object.key("Filters").start_array();
        for item_528 in var_526 {
            {
                let mut object_529 = array_527.value().start_object();
                crate::json_ser::serialize_structure_document_key_values_filter(
                    &mut object_529,
                    item_528,
                );
                object_529.finish();
            }
        }
        array_527.finish();
    }
    if let Some(var_530) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_530).into()),
        );
    }
    if let Some(var_531) = &input.next_token {
        object.key("NextToken").string(var_531);
    }
}

pub fn serialize_structure_list_document_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDocumentVersionsInput,
) {
    if let Some(var_532) = &input.name {
        object.key("Name").string(var_532);
    }
    if let Some(var_533) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    if let Some(var_534) = &input.next_token {
        object.key("NextToken").string(var_534);
    }
}

pub fn serialize_structure_list_inventory_entries_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInventoryEntriesInput,
) {
    if let Some(var_535) = &input.instance_id {
        object.key("InstanceId").string(var_535);
    }
    if let Some(var_536) = &input.type_name {
        object.key("TypeName").string(var_536);
    }
    if let Some(var_537) = &input.filters {
        let mut array_538 = object.key("Filters").start_array();
        for item_539 in var_537 {
            {
                let mut object_540 = array_538.value().start_object();
                crate::json_ser::serialize_structure_inventory_filter(&mut object_540, item_539);
                object_540.finish();
            }
        }
        array_538.finish();
    }
    if let Some(var_541) = &input.next_token {
        object.key("NextToken").string(var_541);
    }
    if let Some(var_542) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_542).into()),
        );
    }
}

pub fn serialize_structure_list_ops_item_events_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsItemEventsInput,
) {
    if let Some(var_543) = &input.filters {
        let mut array_544 = object.key("Filters").start_array();
        for item_545 in var_543 {
            {
                let mut object_546 = array_544.value().start_object();
                crate::json_ser::serialize_structure_ops_item_event_filter(
                    &mut object_546,
                    item_545,
                );
                object_546.finish();
            }
        }
        array_544.finish();
    }
    if let Some(var_547) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_547).into()),
        );
    }
    if let Some(var_548) = &input.next_token {
        object.key("NextToken").string(var_548);
    }
}

pub fn serialize_structure_list_ops_item_related_items_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsItemRelatedItemsInput,
) {
    if let Some(var_549) = &input.ops_item_id {
        object.key("OpsItemId").string(var_549);
    }
    if let Some(var_550) = &input.filters {
        let mut array_551 = object.key("Filters").start_array();
        for item_552 in var_550 {
            {
                let mut object_553 = array_551.value().start_object();
                crate::json_ser::serialize_structure_ops_item_related_items_filter(
                    &mut object_553,
                    item_552,
                );
                object_553.finish();
            }
        }
        array_551.finish();
    }
    if let Some(var_554) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_554).into()),
        );
    }
    if let Some(var_555) = &input.next_token {
        object.key("NextToken").string(var_555);
    }
}

pub fn serialize_structure_list_ops_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOpsMetadataInput,
) {
    if let Some(var_556) = &input.filters {
        let mut array_557 = object.key("Filters").start_array();
        for item_558 in var_556 {
            {
                let mut object_559 = array_557.value().start_object();
                crate::json_ser::serialize_structure_ops_metadata_filter(&mut object_559, item_558);
                object_559.finish();
            }
        }
        array_557.finish();
    }
    if let Some(var_560) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_560).into()),
        );
    }
    if let Some(var_561) = &input.next_token {
        object.key("NextToken").string(var_561);
    }
}

pub fn serialize_structure_list_resource_compliance_summaries_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceComplianceSummariesInput,
) {
    if let Some(var_562) = &input.filters {
        let mut array_563 = object.key("Filters").start_array();
        for item_564 in var_562 {
            {
                let mut object_565 = array_563.value().start_object();
                crate::json_ser::serialize_structure_compliance_string_filter(
                    &mut object_565,
                    item_564,
                );
                object_565.finish();
            }
        }
        array_563.finish();
    }
    if let Some(var_566) = &input.next_token {
        object.key("NextToken").string(var_566);
    }
    if let Some(var_567) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_567).into()),
        );
    }
}

pub fn serialize_structure_list_resource_data_sync_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceDataSyncInput,
) {
    if let Some(var_568) = &input.sync_type {
        object.key("SyncType").string(var_568);
    }
    if let Some(var_569) = &input.next_token {
        object.key("NextToken").string(var_569);
    }
    if let Some(var_570) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_570).into()),
        );
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_571) = &input.resource_type {
        object.key("ResourceType").string(var_571.as_str());
    }
    if let Some(var_572) = &input.resource_id {
        object.key("ResourceId").string(var_572);
    }
}

pub fn serialize_structure_modify_document_permission_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyDocumentPermissionInput,
) {
    if let Some(var_573) = &input.name {
        object.key("Name").string(var_573);
    }
    if let Some(var_574) = &input.permission_type {
        object.key("PermissionType").string(var_574.as_str());
    }
    if let Some(var_575) = &input.account_ids_to_add {
        let mut array_576 = object.key("AccountIdsToAdd").start_array();
        for item_577 in var_575 {
            {
                array_576.value().string(item_577);
            }
        }
        array_576.finish();
    }
    if let Some(var_578) = &input.account_ids_to_remove {
        let mut array_579 = object.key("AccountIdsToRemove").start_array();
        for item_580 in var_578 {
            {
                array_579.value().string(item_580);
            }
        }
        array_579.finish();
    }
    if let Some(var_581) = &input.shared_document_version {
        object.key("SharedDocumentVersion").string(var_581);
    }
}

pub fn serialize_structure_put_compliance_items_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutComplianceItemsInput,
) {
    if let Some(var_582) = &input.resource_id {
        object.key("ResourceId").string(var_582);
    }
    if let Some(var_583) = &input.resource_type {
        object.key("ResourceType").string(var_583);
    }
    if let Some(var_584) = &input.compliance_type {
        object.key("ComplianceType").string(var_584);
    }
    if let Some(var_585) = &input.execution_summary {
        let mut object_586 = object.key("ExecutionSummary").start_object();
        crate::json_ser::serialize_structure_compliance_execution_summary(&mut object_586, var_585);
        object_586.finish();
    }
    if let Some(var_587) = &input.items {
        let mut array_588 = object.key("Items").start_array();
        for item_589 in var_587 {
            {
                let mut object_590 = array_588.value().start_object();
                crate::json_ser::serialize_structure_compliance_item_entry(
                    &mut object_590,
                    item_589,
                );
                object_590.finish();
            }
        }
        array_588.finish();
    }
    if let Some(var_591) = &input.item_content_hash {
        object.key("ItemContentHash").string(var_591);
    }
    if let Some(var_592) = &input.upload_type {
        object.key("UploadType").string(var_592.as_str());
    }
}

pub fn serialize_structure_put_inventory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutInventoryInput,
) {
    if let Some(var_593) = &input.instance_id {
        object.key("InstanceId").string(var_593);
    }
    if let Some(var_594) = &input.items {
        let mut array_595 = object.key("Items").start_array();
        for item_596 in var_594 {
            {
                let mut object_597 = array_595.value().start_object();
                crate::json_ser::serialize_structure_inventory_item(&mut object_597, item_596);
                object_597.finish();
            }
        }
        array_595.finish();
    }
}

pub fn serialize_structure_put_parameter_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutParameterInput,
) {
    if let Some(var_598) = &input.name {
        object.key("Name").string(var_598);
    }
    if let Some(var_599) = &input.description {
        object.key("Description").string(var_599);
    }
    if let Some(var_600) = &input.value {
        object.key("Value").string(var_600);
    }
    if let Some(var_601) = &input.r#type {
        object.key("Type").string(var_601.as_str());
    }
    if let Some(var_602) = &input.key_id {
        object.key("KeyId").string(var_602);
    }
    if let Some(var_603) = &input.overwrite {
        object.key("Overwrite").boolean(*var_603);
    }
    if let Some(var_604) = &input.allowed_pattern {
        object.key("AllowedPattern").string(var_604);
    }
    if let Some(var_605) = &input.tags {
        let mut array_606 = object.key("Tags").start_array();
        for item_607 in var_605 {
            {
                let mut object_608 = array_606.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_608, item_607);
                object_608.finish();
            }
        }
        array_606.finish();
    }
    if let Some(var_609) = &input.tier {
        object.key("Tier").string(var_609.as_str());
    }
    if let Some(var_610) = &input.policies {
        object.key("Policies").string(var_610);
    }
    if let Some(var_611) = &input.data_type {
        object.key("DataType").string(var_611);
    }
}

pub fn serialize_structure_register_default_patch_baseline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterDefaultPatchBaselineInput,
) {
    if let Some(var_612) = &input.baseline_id {
        object.key("BaselineId").string(var_612);
    }
}

pub fn serialize_structure_register_patch_baseline_for_patch_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterPatchBaselineForPatchGroupInput,
) {
    if let Some(var_613) = &input.baseline_id {
        object.key("BaselineId").string(var_613);
    }
    if let Some(var_614) = &input.patch_group {
        object.key("PatchGroup").string(var_614);
    }
}

pub fn serialize_structure_register_target_with_maintenance_window_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTargetWithMaintenanceWindowInput,
) {
    if let Some(var_615) = &input.window_id {
        object.key("WindowId").string(var_615);
    }
    if let Some(var_616) = &input.resource_type {
        object.key("ResourceType").string(var_616.as_str());
    }
    if let Some(var_617) = &input.targets {
        let mut array_618 = object.key("Targets").start_array();
        for item_619 in var_617 {
            {
                let mut object_620 = array_618.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_620, item_619);
                object_620.finish();
            }
        }
        array_618.finish();
    }
    if let Some(var_621) = &input.owner_information {
        object.key("OwnerInformation").string(var_621);
    }
    if let Some(var_622) = &input.name {
        object.key("Name").string(var_622);
    }
    if let Some(var_623) = &input.description {
        object.key("Description").string(var_623);
    }
    if let Some(var_624) = &input.client_token {
        object.key("ClientToken").string(var_624);
    }
}

pub fn serialize_structure_register_task_with_maintenance_window_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterTaskWithMaintenanceWindowInput,
) {
    if let Some(var_625) = &input.window_id {
        object.key("WindowId").string(var_625);
    }
    if let Some(var_626) = &input.targets {
        let mut array_627 = object.key("Targets").start_array();
        for item_628 in var_626 {
            {
                let mut object_629 = array_627.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_629, item_628);
                object_629.finish();
            }
        }
        array_627.finish();
    }
    if let Some(var_630) = &input.task_arn {
        object.key("TaskArn").string(var_630);
    }
    if let Some(var_631) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_631);
    }
    if let Some(var_632) = &input.task_type {
        object.key("TaskType").string(var_632.as_str());
    }
    if let Some(var_633) = &input.task_parameters {
        let mut object_634 = object.key("TaskParameters").start_object();
        for (key_635, value_636) in var_633 {
            {
                let mut object_637 = object_634.key(key_635).start_object();
                crate::json_ser::serialize_structure_maintenance_window_task_parameter_value_expression(&mut object_637, value_636);
                object_637.finish();
            }
        }
        object_634.finish();
    }
    if let Some(var_638) = &input.task_invocation_parameters {
        let mut object_639 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_maintenance_window_task_invocation_parameters(
            &mut object_639,
            var_638,
        );
        object_639.finish();
    }
    if let Some(var_640) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_640).into()),
        );
    }
    if let Some(var_641) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_641);
    }
    if let Some(var_642) = &input.max_errors {
        object.key("MaxErrors").string(var_642);
    }
    if let Some(var_643) = &input.logging_info {
        let mut object_644 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_logging_info(&mut object_644, var_643);
        object_644.finish();
    }
    if let Some(var_645) = &input.name {
        object.key("Name").string(var_645);
    }
    if let Some(var_646) = &input.description {
        object.key("Description").string(var_646);
    }
    if let Some(var_647) = &input.client_token {
        object.key("ClientToken").string(var_647);
    }
}

pub fn serialize_structure_remove_tags_from_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) {
    if let Some(var_648) = &input.resource_type {
        object.key("ResourceType").string(var_648.as_str());
    }
    if let Some(var_649) = &input.resource_id {
        object.key("ResourceId").string(var_649);
    }
    if let Some(var_650) = &input.tag_keys {
        let mut array_651 = object.key("TagKeys").start_array();
        for item_652 in var_650 {
            {
                array_651.value().string(item_652);
            }
        }
        array_651.finish();
    }
}

pub fn serialize_structure_reset_service_setting_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetServiceSettingInput,
) {
    if let Some(var_653) = &input.setting_id {
        object.key("SettingId").string(var_653);
    }
}

pub fn serialize_structure_resume_session_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeSessionInput,
) {
    if let Some(var_654) = &input.session_id {
        object.key("SessionId").string(var_654);
    }
}

pub fn serialize_structure_send_automation_signal_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendAutomationSignalInput,
) {
    if let Some(var_655) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_655);
    }
    if let Some(var_656) = &input.signal_type {
        object.key("SignalType").string(var_656.as_str());
    }
    if let Some(var_657) = &input.payload {
        let mut object_658 = object.key("Payload").start_object();
        for (key_659, value_660) in var_657 {
            {
                let mut array_661 = object_658.key(key_659).start_array();
                for item_662 in value_660 {
                    {
                        array_661.value().string(item_662);
                    }
                }
                array_661.finish();
            }
        }
        object_658.finish();
    }
}

pub fn serialize_structure_send_command_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendCommandInput,
) {
    if let Some(var_663) = &input.instance_ids {
        let mut array_664 = object.key("InstanceIds").start_array();
        for item_665 in var_663 {
            {
                array_664.value().string(item_665);
            }
        }
        array_664.finish();
    }
    if let Some(var_666) = &input.targets {
        let mut array_667 = object.key("Targets").start_array();
        for item_668 in var_666 {
            {
                let mut object_669 = array_667.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_669, item_668);
                object_669.finish();
            }
        }
        array_667.finish();
    }
    if let Some(var_670) = &input.document_name {
        object.key("DocumentName").string(var_670);
    }
    if let Some(var_671) = &input.document_version {
        object.key("DocumentVersion").string(var_671);
    }
    if let Some(var_672) = &input.document_hash {
        object.key("DocumentHash").string(var_672);
    }
    if let Some(var_673) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_673.as_str());
    }
    if let Some(var_674) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_674).into()),
        );
    }
    if let Some(var_675) = &input.comment {
        object.key("Comment").string(var_675);
    }
    if let Some(var_676) = &input.parameters {
        let mut object_677 = object.key("Parameters").start_object();
        for (key_678, value_679) in var_676 {
            {
                let mut array_680 = object_677.key(key_678).start_array();
                for item_681 in value_679 {
                    {
                        array_680.value().string(item_681);
                    }
                }
                array_680.finish();
            }
        }
        object_677.finish();
    }
    if let Some(var_682) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_682);
    }
    if let Some(var_683) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_683);
    }
    if let Some(var_684) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_684);
    }
    if let Some(var_685) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_685);
    }
    if let Some(var_686) = &input.max_errors {
        object.key("MaxErrors").string(var_686);
    }
    if let Some(var_687) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_687);
    }
    if let Some(var_688) = &input.notification_config {
        let mut object_689 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_notification_config(&mut object_689, var_688);
        object_689.finish();
    }
    if let Some(var_690) = &input.cloud_watch_output_config {
        let mut object_691 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_cloud_watch_output_config(&mut object_691, var_690);
        object_691.finish();
    }
}

pub fn serialize_structure_start_associations_once_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAssociationsOnceInput,
) {
    if let Some(var_692) = &input.association_ids {
        let mut array_693 = object.key("AssociationIds").start_array();
        for item_694 in var_692 {
            {
                array_693.value().string(item_694);
            }
        }
        array_693.finish();
    }
}

pub fn serialize_structure_start_automation_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAutomationExecutionInput,
) {
    if let Some(var_695) = &input.document_name {
        object.key("DocumentName").string(var_695);
    }
    if let Some(var_696) = &input.document_version {
        object.key("DocumentVersion").string(var_696);
    }
    if let Some(var_697) = &input.parameters {
        let mut object_698 = object.key("Parameters").start_object();
        for (key_699, value_700) in var_697 {
            {
                let mut array_701 = object_698.key(key_699).start_array();
                for item_702 in value_700 {
                    {
                        array_701.value().string(item_702);
                    }
                }
                array_701.finish();
            }
        }
        object_698.finish();
    }
    if let Some(var_703) = &input.client_token {
        object.key("ClientToken").string(var_703);
    }
    if let Some(var_704) = &input.mode {
        object.key("Mode").string(var_704.as_str());
    }
    if let Some(var_705) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_705);
    }
    if let Some(var_706) = &input.targets {
        let mut array_707 = object.key("Targets").start_array();
        for item_708 in var_706 {
            {
                let mut object_709 = array_707.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_709, item_708);
                object_709.finish();
            }
        }
        array_707.finish();
    }
    if let Some(var_710) = &input.target_maps {
        let mut array_711 = object.key("TargetMaps").start_array();
        for item_712 in var_710 {
            {
                let mut object_713 = array_711.value().start_object();
                for (key_714, value_715) in item_712 {
                    {
                        let mut array_716 = object_713.key(key_714).start_array();
                        for item_717 in value_715 {
                            {
                                array_716.value().string(item_717);
                            }
                        }
                        array_716.finish();
                    }
                }
                object_713.finish();
            }
        }
        array_711.finish();
    }
    if let Some(var_718) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_718);
    }
    if let Some(var_719) = &input.max_errors {
        object.key("MaxErrors").string(var_719);
    }
    if let Some(var_720) = &input.target_locations {
        let mut array_721 = object.key("TargetLocations").start_array();
        for item_722 in var_720 {
            {
                let mut object_723 = array_721.value().start_object();
                crate::json_ser::serialize_structure_target_location(&mut object_723, item_722);
                object_723.finish();
            }
        }
        array_721.finish();
    }
    if let Some(var_724) = &input.tags {
        let mut array_725 = object.key("Tags").start_array();
        for item_726 in var_724 {
            {
                let mut object_727 = array_725.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_727, item_726);
                object_727.finish();
            }
        }
        array_725.finish();
    }
}

pub fn serialize_structure_start_change_request_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartChangeRequestExecutionInput,
) {
    if let Some(var_728) = &input.scheduled_time {
        object
            .key("ScheduledTime")
            .instant(var_728, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_729) = &input.document_name {
        object.key("DocumentName").string(var_729);
    }
    if let Some(var_730) = &input.document_version {
        object.key("DocumentVersion").string(var_730);
    }
    if let Some(var_731) = &input.parameters {
        let mut object_732 = object.key("Parameters").start_object();
        for (key_733, value_734) in var_731 {
            {
                let mut array_735 = object_732.key(key_733).start_array();
                for item_736 in value_734 {
                    {
                        array_735.value().string(item_736);
                    }
                }
                array_735.finish();
            }
        }
        object_732.finish();
    }
    if let Some(var_737) = &input.change_request_name {
        object.key("ChangeRequestName").string(var_737);
    }
    if let Some(var_738) = &input.client_token {
        object.key("ClientToken").string(var_738);
    }
    if let Some(var_739) = &input.runbooks {
        let mut array_740 = object.key("Runbooks").start_array();
        for item_741 in var_739 {
            {
                let mut object_742 = array_740.value().start_object();
                crate::json_ser::serialize_structure_runbook(&mut object_742, item_741);
                object_742.finish();
            }
        }
        array_740.finish();
    }
    if let Some(var_743) = &input.tags {
        let mut array_744 = object.key("Tags").start_array();
        for item_745 in var_743 {
            {
                let mut object_746 = array_744.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_746, item_745);
                object_746.finish();
            }
        }
        array_744.finish();
    }
    if let Some(var_747) = &input.scheduled_end_time {
        object
            .key("ScheduledEndTime")
            .instant(var_747, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_748) = &input.change_details {
        object.key("ChangeDetails").string(var_748);
    }
}

pub fn serialize_structure_start_session_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSessionInput,
) {
    if let Some(var_749) = &input.target {
        object.key("Target").string(var_749);
    }
    if let Some(var_750) = &input.document_name {
        object.key("DocumentName").string(var_750);
    }
    if let Some(var_751) = &input.parameters {
        let mut object_752 = object.key("Parameters").start_object();
        for (key_753, value_754) in var_751 {
            {
                let mut array_755 = object_752.key(key_753).start_array();
                for item_756 in value_754 {
                    {
                        array_755.value().string(item_756);
                    }
                }
                array_755.finish();
            }
        }
        object_752.finish();
    }
}

pub fn serialize_structure_stop_automation_execution_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopAutomationExecutionInput,
) {
    if let Some(var_757) = &input.automation_execution_id {
        object.key("AutomationExecutionId").string(var_757);
    }
    if let Some(var_758) = &input.r#type {
        object.key("Type").string(var_758.as_str());
    }
}

pub fn serialize_structure_terminate_session_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateSessionInput,
) {
    if let Some(var_759) = &input.session_id {
        object.key("SessionId").string(var_759);
    }
}

pub fn serialize_structure_unlabel_parameter_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UnlabelParameterVersionInput,
) {
    if let Some(var_760) = &input.name {
        object.key("Name").string(var_760);
    }
    if let Some(var_761) = &input.parameter_version {
        object.key("ParameterVersion").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_761).into()),
        );
    }
    if let Some(var_762) = &input.labels {
        let mut array_763 = object.key("Labels").start_array();
        for item_764 in var_762 {
            {
                array_763.value().string(item_764);
            }
        }
        array_763.finish();
    }
}

pub fn serialize_structure_update_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssociationInput,
) {
    if let Some(var_765) = &input.association_id {
        object.key("AssociationId").string(var_765);
    }
    if let Some(var_766) = &input.parameters {
        let mut object_767 = object.key("Parameters").start_object();
        for (key_768, value_769) in var_766 {
            {
                let mut array_770 = object_767.key(key_768).start_array();
                for item_771 in value_769 {
                    {
                        array_770.value().string(item_771);
                    }
                }
                array_770.finish();
            }
        }
        object_767.finish();
    }
    if let Some(var_772) = &input.document_version {
        object.key("DocumentVersion").string(var_772);
    }
    if let Some(var_773) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_773);
    }
    if let Some(var_774) = &input.output_location {
        let mut object_775 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_instance_association_output_location(
            &mut object_775,
            var_774,
        );
        object_775.finish();
    }
    if let Some(var_776) = &input.name {
        object.key("Name").string(var_776);
    }
    if let Some(var_777) = &input.targets {
        let mut array_778 = object.key("Targets").start_array();
        for item_779 in var_777 {
            {
                let mut object_780 = array_778.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_780, item_779);
                object_780.finish();
            }
        }
        array_778.finish();
    }
    if let Some(var_781) = &input.association_name {
        object.key("AssociationName").string(var_781);
    }
    if let Some(var_782) = &input.association_version {
        object.key("AssociationVersion").string(var_782);
    }
    if let Some(var_783) = &input.automation_target_parameter_name {
        object.key("AutomationTargetParameterName").string(var_783);
    }
    if let Some(var_784) = &input.max_errors {
        object.key("MaxErrors").string(var_784);
    }
    if let Some(var_785) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_785);
    }
    if let Some(var_786) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_786.as_str());
    }
    if let Some(var_787) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_787.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_788) = &input.calendar_names {
        let mut array_789 = object.key("CalendarNames").start_array();
        for item_790 in var_788 {
            {
                array_789.value().string(item_790);
            }
        }
        array_789.finish();
    }
    if let Some(var_791) = &input.target_locations {
        let mut array_792 = object.key("TargetLocations").start_array();
        for item_793 in var_791 {
            {
                let mut object_794 = array_792.value().start_object();
                crate::json_ser::serialize_structure_target_location(&mut object_794, item_793);
                object_794.finish();
            }
        }
        array_792.finish();
    }
}

pub fn serialize_structure_update_association_status_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssociationStatusInput,
) {
    if let Some(var_795) = &input.name {
        object.key("Name").string(var_795);
    }
    if let Some(var_796) = &input.instance_id {
        object.key("InstanceId").string(var_796);
    }
    if let Some(var_797) = &input.association_status {
        let mut object_798 = object.key("AssociationStatus").start_object();
        crate::json_ser::serialize_structure_association_status(&mut object_798, var_797);
        object_798.finish();
    }
}

pub fn serialize_structure_update_document_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentInput,
) {
    if let Some(var_799) = &input.content {
        object.key("Content").string(var_799);
    }
    if let Some(var_800) = &input.attachments {
        let mut array_801 = object.key("Attachments").start_array();
        for item_802 in var_800 {
            {
                let mut object_803 = array_801.value().start_object();
                crate::json_ser::serialize_structure_attachments_source(&mut object_803, item_802);
                object_803.finish();
            }
        }
        array_801.finish();
    }
    if let Some(var_804) = &input.name {
        object.key("Name").string(var_804);
    }
    if let Some(var_805) = &input.display_name {
        object.key("DisplayName").string(var_805);
    }
    if let Some(var_806) = &input.version_name {
        object.key("VersionName").string(var_806);
    }
    if let Some(var_807) = &input.document_version {
        object.key("DocumentVersion").string(var_807);
    }
    if let Some(var_808) = &input.document_format {
        object.key("DocumentFormat").string(var_808.as_str());
    }
    if let Some(var_809) = &input.target_type {
        object.key("TargetType").string(var_809);
    }
}

pub fn serialize_structure_update_document_default_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentDefaultVersionInput,
) {
    if let Some(var_810) = &input.name {
        object.key("Name").string(var_810);
    }
    if let Some(var_811) = &input.document_version {
        object.key("DocumentVersion").string(var_811);
    }
}

pub fn serialize_structure_update_document_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDocumentMetadataInput,
) {
    if let Some(var_812) = &input.name {
        object.key("Name").string(var_812);
    }
    if let Some(var_813) = &input.document_version {
        object.key("DocumentVersion").string(var_813);
    }
    if let Some(var_814) = &input.document_reviews {
        let mut object_815 = object.key("DocumentReviews").start_object();
        crate::json_ser::serialize_structure_document_reviews(&mut object_815, var_814);
        object_815.finish();
    }
}

pub fn serialize_structure_update_maintenance_window_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowInput,
) {
    if let Some(var_816) = &input.window_id {
        object.key("WindowId").string(var_816);
    }
    if let Some(var_817) = &input.name {
        object.key("Name").string(var_817);
    }
    if let Some(var_818) = &input.description {
        object.key("Description").string(var_818);
    }
    if let Some(var_819) = &input.start_date {
        object.key("StartDate").string(var_819);
    }
    if let Some(var_820) = &input.end_date {
        object.key("EndDate").string(var_820);
    }
    if let Some(var_821) = &input.schedule {
        object.key("Schedule").string(var_821);
    }
    if let Some(var_822) = &input.schedule_timezone {
        object.key("ScheduleTimezone").string(var_822);
    }
    if let Some(var_823) = &input.schedule_offset {
        object.key("ScheduleOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_823).into()),
        );
    }
    if let Some(var_824) = &input.duration {
        object.key("Duration").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_824).into()),
        );
    }
    if let Some(var_825) = &input.cutoff {
        object.key("Cutoff").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_825).into()),
        );
    }
    if let Some(var_826) = &input.allow_unassociated_targets {
        object.key("AllowUnassociatedTargets").boolean(*var_826);
    }
    if let Some(var_827) = &input.enabled {
        object.key("Enabled").boolean(*var_827);
    }
    if let Some(var_828) = &input.replace {
        object.key("Replace").boolean(*var_828);
    }
}

pub fn serialize_structure_update_maintenance_window_target_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowTargetInput,
) {
    if let Some(var_829) = &input.window_id {
        object.key("WindowId").string(var_829);
    }
    if let Some(var_830) = &input.window_target_id {
        object.key("WindowTargetId").string(var_830);
    }
    if let Some(var_831) = &input.targets {
        let mut array_832 = object.key("Targets").start_array();
        for item_833 in var_831 {
            {
                let mut object_834 = array_832.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_834, item_833);
                object_834.finish();
            }
        }
        array_832.finish();
    }
    if let Some(var_835) = &input.owner_information {
        object.key("OwnerInformation").string(var_835);
    }
    if let Some(var_836) = &input.name {
        object.key("Name").string(var_836);
    }
    if let Some(var_837) = &input.description {
        object.key("Description").string(var_837);
    }
    if let Some(var_838) = &input.replace {
        object.key("Replace").boolean(*var_838);
    }
}

pub fn serialize_structure_update_maintenance_window_task_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceWindowTaskInput,
) {
    if let Some(var_839) = &input.window_id {
        object.key("WindowId").string(var_839);
    }
    if let Some(var_840) = &input.window_task_id {
        object.key("WindowTaskId").string(var_840);
    }
    if let Some(var_841) = &input.targets {
        let mut array_842 = object.key("Targets").start_array();
        for item_843 in var_841 {
            {
                let mut object_844 = array_842.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_844, item_843);
                object_844.finish();
            }
        }
        array_842.finish();
    }
    if let Some(var_845) = &input.task_arn {
        object.key("TaskArn").string(var_845);
    }
    if let Some(var_846) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_846);
    }
    if let Some(var_847) = &input.task_parameters {
        let mut object_848 = object.key("TaskParameters").start_object();
        for (key_849, value_850) in var_847 {
            {
                let mut object_851 = object_848.key(key_849).start_object();
                crate::json_ser::serialize_structure_maintenance_window_task_parameter_value_expression(&mut object_851, value_850);
                object_851.finish();
            }
        }
        object_848.finish();
    }
    if let Some(var_852) = &input.task_invocation_parameters {
        let mut object_853 = object.key("TaskInvocationParameters").start_object();
        crate::json_ser::serialize_structure_maintenance_window_task_invocation_parameters(
            &mut object_853,
            var_852,
        );
        object_853.finish();
    }
    if let Some(var_854) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_854).into()),
        );
    }
    if let Some(var_855) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_855);
    }
    if let Some(var_856) = &input.max_errors {
        object.key("MaxErrors").string(var_856);
    }
    if let Some(var_857) = &input.logging_info {
        let mut object_858 = object.key("LoggingInfo").start_object();
        crate::json_ser::serialize_structure_logging_info(&mut object_858, var_857);
        object_858.finish();
    }
    if let Some(var_859) = &input.name {
        object.key("Name").string(var_859);
    }
    if let Some(var_860) = &input.description {
        object.key("Description").string(var_860);
    }
    if let Some(var_861) = &input.replace {
        object.key("Replace").boolean(*var_861);
    }
}

pub fn serialize_structure_update_managed_instance_role_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateManagedInstanceRoleInput,
) {
    if let Some(var_862) = &input.instance_id {
        object.key("InstanceId").string(var_862);
    }
    if let Some(var_863) = &input.iam_role {
        object.key("IamRole").string(var_863);
    }
}

pub fn serialize_structure_update_ops_item_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOpsItemInput,
) {
    if let Some(var_864) = &input.description {
        object.key("Description").string(var_864);
    }
    if let Some(var_865) = &input.operational_data {
        let mut object_866 = object.key("OperationalData").start_object();
        for (key_867, value_868) in var_865 {
            {
                let mut object_869 = object_866.key(key_867).start_object();
                crate::json_ser::serialize_structure_ops_item_data_value(
                    &mut object_869,
                    value_868,
                );
                object_869.finish();
            }
        }
        object_866.finish();
    }
    if let Some(var_870) = &input.operational_data_to_delete {
        let mut array_871 = object.key("OperationalDataToDelete").start_array();
        for item_872 in var_870 {
            {
                array_871.value().string(item_872);
            }
        }
        array_871.finish();
    }
    if let Some(var_873) = &input.notifications {
        let mut array_874 = object.key("Notifications").start_array();
        for item_875 in var_873 {
            {
                let mut object_876 = array_874.value().start_object();
                crate::json_ser::serialize_structure_ops_item_notification(
                    &mut object_876,
                    item_875,
                );
                object_876.finish();
            }
        }
        array_874.finish();
    }
    if let Some(var_877) = &input.priority {
        object.key("Priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_877).into()),
        );
    }
    if let Some(var_878) = &input.related_ops_items {
        let mut array_879 = object.key("RelatedOpsItems").start_array();
        for item_880 in var_878 {
            {
                let mut object_881 = array_879.value().start_object();
                crate::json_ser::serialize_structure_related_ops_item(&mut object_881, item_880);
                object_881.finish();
            }
        }
        array_879.finish();
    }
    if let Some(var_882) = &input.status {
        object.key("Status").string(var_882.as_str());
    }
    if let Some(var_883) = &input.ops_item_id {
        object.key("OpsItemId").string(var_883);
    }
    if let Some(var_884) = &input.title {
        object.key("Title").string(var_884);
    }
    if let Some(var_885) = &input.category {
        object.key("Category").string(var_885);
    }
    if let Some(var_886) = &input.severity {
        object.key("Severity").string(var_886);
    }
    if let Some(var_887) = &input.actual_start_time {
        object
            .key("ActualStartTime")
            .instant(var_887, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_888) = &input.actual_end_time {
        object
            .key("ActualEndTime")
            .instant(var_888, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_889) = &input.planned_start_time {
        object
            .key("PlannedStartTime")
            .instant(var_889, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_890) = &input.planned_end_time {
        object
            .key("PlannedEndTime")
            .instant(var_890, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_update_ops_metadata_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateOpsMetadataInput,
) {
    if let Some(var_891) = &input.ops_metadata_arn {
        object.key("OpsMetadataArn").string(var_891);
    }
    if let Some(var_892) = &input.metadata_to_update {
        let mut object_893 = object.key("MetadataToUpdate").start_object();
        for (key_894, value_895) in var_892 {
            {
                let mut object_896 = object_893.key(key_894).start_object();
                crate::json_ser::serialize_structure_metadata_value(&mut object_896, value_895);
                object_896.finish();
            }
        }
        object_893.finish();
    }
    if let Some(var_897) = &input.keys_to_delete {
        let mut array_898 = object.key("KeysToDelete").start_array();
        for item_899 in var_897 {
            {
                array_898.value().string(item_899);
            }
        }
        array_898.finish();
    }
}

pub fn serialize_structure_update_patch_baseline_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePatchBaselineInput,
) {
    if let Some(var_900) = &input.baseline_id {
        object.key("BaselineId").string(var_900);
    }
    if let Some(var_901) = &input.name {
        object.key("Name").string(var_901);
    }
    if let Some(var_902) = &input.global_filters {
        let mut object_903 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_patch_filter_group(&mut object_903, var_902);
        object_903.finish();
    }
    if let Some(var_904) = &input.approval_rules {
        let mut object_905 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_patch_rule_group(&mut object_905, var_904);
        object_905.finish();
    }
    if let Some(var_906) = &input.approved_patches {
        let mut array_907 = object.key("ApprovedPatches").start_array();
        for item_908 in var_906 {
            {
                array_907.value().string(item_908);
            }
        }
        array_907.finish();
    }
    if let Some(var_909) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_909.as_str());
    }
    if let Some(var_910) = &input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(*var_910);
    }
    if let Some(var_911) = &input.rejected_patches {
        let mut array_912 = object.key("RejectedPatches").start_array();
        for item_913 in var_911 {
            {
                array_912.value().string(item_913);
            }
        }
        array_912.finish();
    }
    if let Some(var_914) = &input.rejected_patches_action {
        object.key("RejectedPatchesAction").string(var_914.as_str());
    }
    if let Some(var_915) = &input.description {
        object.key("Description").string(var_915);
    }
    if let Some(var_916) = &input.sources {
        let mut array_917 = object.key("Sources").start_array();
        for item_918 in var_916 {
            {
                let mut object_919 = array_917.value().start_object();
                crate::json_ser::serialize_structure_patch_source(&mut object_919, item_918);
                object_919.finish();
            }
        }
        array_917.finish();
    }
    if let Some(var_920) = &input.replace {
        object.key("Replace").boolean(*var_920);
    }
}

pub fn serialize_structure_update_resource_data_sync_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceDataSyncInput,
) {
    if let Some(var_921) = &input.sync_name {
        object.key("SyncName").string(var_921);
    }
    if let Some(var_922) = &input.sync_type {
        object.key("SyncType").string(var_922);
    }
    if let Some(var_923) = &input.sync_source {
        let mut object_924 = object.key("SyncSource").start_object();
        crate::json_ser::serialize_structure_resource_data_sync_source(&mut object_924, var_923);
        object_924.finish();
    }
}

pub fn serialize_structure_update_service_setting_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceSettingInput,
) {
    if let Some(var_925) = &input.setting_id {
        object.key("SettingId").string(var_925);
    }
    if let Some(var_926) = &input.setting_value {
        object.key("SettingValue").string(var_926);
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_927) = &input.key {
        object.key("Key").string(var_927);
    }
    if let Some(var_928) = &input.value {
        object.key("Value").string(var_928);
    }
}

pub fn serialize_structure_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Target,
) {
    if let Some(var_929) = &input.key {
        object.key("Key").string(var_929);
    }
    if let Some(var_930) = &input.values {
        let mut array_931 = object.key("Values").start_array();
        for item_932 in var_930 {
            {
                array_931.value().string(item_932);
            }
        }
        array_931.finish();
    }
}

pub fn serialize_structure_instance_association_output_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceAssociationOutputLocation,
) {
    if let Some(var_933) = &input.s3_location {
        let mut object_934 = object.key("S3Location").start_object();
        crate::json_ser::serialize_structure_s3_output_location(&mut object_934, var_933);
        object_934.finish();
    }
}

pub fn serialize_structure_target_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TargetLocation,
) {
    if let Some(var_935) = &input.accounts {
        let mut array_936 = object.key("Accounts").start_array();
        for item_937 in var_935 {
            {
                array_936.value().string(item_937);
            }
        }
        array_936.finish();
    }
    if let Some(var_938) = &input.regions {
        let mut array_939 = object.key("Regions").start_array();
        for item_940 in var_938 {
            {
                array_939.value().string(item_940);
            }
        }
        array_939.finish();
    }
    if let Some(var_941) = &input.target_location_max_concurrency {
        object.key("TargetLocationMaxConcurrency").string(var_941);
    }
    if let Some(var_942) = &input.target_location_max_errors {
        object.key("TargetLocationMaxErrors").string(var_942);
    }
    if let Some(var_943) = &input.execution_role_name {
        object.key("ExecutionRoleName").string(var_943);
    }
}

pub fn serialize_structure_create_association_batch_request_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateAssociationBatchRequestEntry,
) {
    if let Some(var_944) = &input.name {
        object.key("Name").string(var_944);
    }
    if let Some(var_945) = &input.instance_id {
        object.key("InstanceId").string(var_945);
    }
    if let Some(var_946) = &input.parameters {
        let mut object_947 = object.key("Parameters").start_object();
        for (key_948, value_949) in var_946 {
            {
                let mut array_950 = object_947.key(key_948).start_array();
                for item_951 in value_949 {
                    {
                        array_950.value().string(item_951);
                    }
                }
                array_950.finish();
            }
        }
        object_947.finish();
    }
    if let Some(var_952) = &input.automation_target_parameter_name {
        object.key("AutomationTargetParameterName").string(var_952);
    }
    if let Some(var_953) = &input.document_version {
        object.key("DocumentVersion").string(var_953);
    }
    if let Some(var_954) = &input.targets {
        let mut array_955 = object.key("Targets").start_array();
        for item_956 in var_954 {
            {
                let mut object_957 = array_955.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_957, item_956);
                object_957.finish();
            }
        }
        array_955.finish();
    }
    if let Some(var_958) = &input.schedule_expression {
        object.key("ScheduleExpression").string(var_958);
    }
    if let Some(var_959) = &input.output_location {
        let mut object_960 = object.key("OutputLocation").start_object();
        crate::json_ser::serialize_structure_instance_association_output_location(
            &mut object_960,
            var_959,
        );
        object_960.finish();
    }
    if let Some(var_961) = &input.association_name {
        object.key("AssociationName").string(var_961);
    }
    if let Some(var_962) = &input.max_errors {
        object.key("MaxErrors").string(var_962);
    }
    if let Some(var_963) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_963);
    }
    if let Some(var_964) = &input.compliance_severity {
        object.key("ComplianceSeverity").string(var_964.as_str());
    }
    if let Some(var_965) = &input.sync_compliance {
        object.key("SyncCompliance").string(var_965.as_str());
    }
    if input.apply_only_at_cron_interval {
        object
            .key("ApplyOnlyAtCronInterval")
            .boolean(input.apply_only_at_cron_interval);
    }
    if let Some(var_966) = &input.calendar_names {
        let mut array_967 = object.key("CalendarNames").start_array();
        for item_968 in var_966 {
            {
                array_967.value().string(item_968);
            }
        }
        array_967.finish();
    }
    if let Some(var_969) = &input.target_locations {
        let mut array_970 = object.key("TargetLocations").start_array();
        for item_971 in var_969 {
            {
                let mut object_972 = array_970.value().start_object();
                crate::json_ser::serialize_structure_target_location(&mut object_972, item_971);
                object_972.finish();
            }
        }
        array_970.finish();
    }
}

pub fn serialize_structure_document_requires(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentRequires,
) {
    if let Some(var_973) = &input.name {
        object.key("Name").string(var_973);
    }
    if let Some(var_974) = &input.version {
        object.key("Version").string(var_974);
    }
}

pub fn serialize_structure_attachments_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttachmentsSource,
) {
    if let Some(var_975) = &input.key {
        object.key("Key").string(var_975.as_str());
    }
    if let Some(var_976) = &input.values {
        let mut array_977 = object.key("Values").start_array();
        for item_978 in var_976 {
            {
                array_977.value().string(item_978);
            }
        }
        array_977.finish();
    }
    if let Some(var_979) = &input.name {
        object.key("Name").string(var_979);
    }
}

pub fn serialize_structure_ops_item_data_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemDataValue,
) {
    if let Some(var_980) = &input.value {
        object.key("Value").string(var_980);
    }
    if let Some(var_981) = &input.r#type {
        object.key("Type").string(var_981.as_str());
    }
}

pub fn serialize_structure_ops_item_notification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemNotification,
) {
    if let Some(var_982) = &input.arn {
        object.key("Arn").string(var_982);
    }
}

pub fn serialize_structure_related_ops_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelatedOpsItem,
) {
    if let Some(var_983) = &input.ops_item_id {
        object.key("OpsItemId").string(var_983);
    }
}

pub fn serialize_structure_metadata_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetadataValue,
) {
    if let Some(var_984) = &input.value {
        object.key("Value").string(var_984);
    }
}

pub fn serialize_structure_patch_filter_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchFilterGroup,
) {
    if let Some(var_985) = &input.patch_filters {
        let mut array_986 = object.key("PatchFilters").start_array();
        for item_987 in var_985 {
            {
                let mut object_988 = array_986.value().start_object();
                crate::json_ser::serialize_structure_patch_filter(&mut object_988, item_987);
                object_988.finish();
            }
        }
        array_986.finish();
    }
}

pub fn serialize_structure_patch_rule_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchRuleGroup,
) {
    if let Some(var_989) = &input.patch_rules {
        let mut array_990 = object.key("PatchRules").start_array();
        for item_991 in var_989 {
            {
                let mut object_992 = array_990.value().start_object();
                crate::json_ser::serialize_structure_patch_rule(&mut object_992, item_991);
                object_992.finish();
            }
        }
        array_990.finish();
    }
}

pub fn serialize_structure_patch_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchSource,
) {
    if let Some(var_993) = &input.name {
        object.key("Name").string(var_993);
    }
    if let Some(var_994) = &input.products {
        let mut array_995 = object.key("Products").start_array();
        for item_996 in var_994 {
            {
                array_995.value().string(item_996);
            }
        }
        array_995.finish();
    }
    if let Some(var_997) = &input.configuration {
        object.key("Configuration").string(var_997);
    }
}

pub fn serialize_structure_resource_data_sync_s3_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncS3Destination,
) {
    if let Some(var_998) = &input.bucket_name {
        object.key("BucketName").string(var_998);
    }
    if let Some(var_999) = &input.prefix {
        object.key("Prefix").string(var_999);
    }
    if let Some(var_1000) = &input.sync_format {
        object.key("SyncFormat").string(var_1000.as_str());
    }
    if let Some(var_1001) = &input.region {
        object.key("Region").string(var_1001);
    }
    if let Some(var_1002) = &input.awskms_key_arn {
        object.key("AWSKMSKeyARN").string(var_1002);
    }
    if let Some(var_1003) = &input.destination_data_sharing {
        let mut object_1004 = object.key("DestinationDataSharing").start_object();
        crate::json_ser::serialize_structure_resource_data_sync_destination_data_sharing(
            &mut object_1004,
            var_1003,
        );
        object_1004.finish();
    }
}

pub fn serialize_structure_resource_data_sync_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncSource,
) {
    if let Some(var_1005) = &input.source_type {
        object.key("SourceType").string(var_1005);
    }
    if let Some(var_1006) = &input.aws_organizations_source {
        let mut object_1007 = object.key("AwsOrganizationsSource").start_object();
        crate::json_ser::serialize_structure_resource_data_sync_aws_organizations_source(
            &mut object_1007,
            var_1006,
        );
        object_1007.finish();
    }
    if let Some(var_1008) = &input.source_regions {
        let mut array_1009 = object.key("SourceRegions").start_array();
        for item_1010 in var_1008 {
            {
                array_1009.value().string(item_1010);
            }
        }
        array_1009.finish();
    }
    if input.include_future_regions {
        object
            .key("IncludeFutureRegions")
            .boolean(input.include_future_regions);
    }
    if input.enable_all_ops_data_sources {
        object
            .key("EnableAllOpsDataSources")
            .boolean(input.enable_all_ops_data_sources);
    }
}

pub fn serialize_structure_describe_activations_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeActivationsFilter,
) {
    if let Some(var_1011) = &input.filter_key {
        object.key("FilterKey").string(var_1011.as_str());
    }
    if let Some(var_1012) = &input.filter_values {
        let mut array_1013 = object.key("FilterValues").start_array();
        for item_1014 in var_1012 {
            {
                array_1013.value().string(item_1014);
            }
        }
        array_1013.finish();
    }
}

pub fn serialize_structure_association_execution_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationExecutionFilter,
) {
    if let Some(var_1015) = &input.key {
        object.key("Key").string(var_1015.as_str());
    }
    if let Some(var_1016) = &input.value {
        object.key("Value").string(var_1016);
    }
    if let Some(var_1017) = &input.r#type {
        object.key("Type").string(var_1017.as_str());
    }
}

pub fn serialize_structure_association_execution_targets_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationExecutionTargetsFilter,
) {
    if let Some(var_1018) = &input.key {
        object.key("Key").string(var_1018.as_str());
    }
    if let Some(var_1019) = &input.value {
        object.key("Value").string(var_1019);
    }
}

pub fn serialize_structure_automation_execution_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutomationExecutionFilter,
) {
    if let Some(var_1020) = &input.key {
        object.key("Key").string(var_1020.as_str());
    }
    if let Some(var_1021) = &input.values {
        let mut array_1022 = object.key("Values").start_array();
        for item_1023 in var_1021 {
            {
                array_1022.value().string(item_1023);
            }
        }
        array_1022.finish();
    }
}

pub fn serialize_structure_step_execution_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepExecutionFilter,
) {
    if let Some(var_1024) = &input.key {
        object.key("Key").string(var_1024.as_str());
    }
    if let Some(var_1025) = &input.values {
        let mut array_1026 = object.key("Values").start_array();
        for item_1027 in var_1025 {
            {
                array_1026.value().string(item_1027);
            }
        }
        array_1026.finish();
    }
}

pub fn serialize_structure_patch_orchestrator_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchOrchestratorFilter,
) {
    if let Some(var_1028) = &input.key {
        object.key("Key").string(var_1028);
    }
    if let Some(var_1029) = &input.values {
        let mut array_1030 = object.key("Values").start_array();
        for item_1031 in var_1029 {
            {
                array_1030.value().string(item_1031);
            }
        }
        array_1030.finish();
    }
}

pub fn serialize_structure_instance_information_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceInformationFilter,
) {
    if let Some(var_1032) = &input.key {
        object.key("key").string(var_1032.as_str());
    }
    if let Some(var_1033) = &input.value_set {
        let mut array_1034 = object.key("valueSet").start_array();
        for item_1035 in var_1033 {
            {
                array_1034.value().string(item_1035);
            }
        }
        array_1034.finish();
    }
}

pub fn serialize_structure_instance_information_string_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceInformationStringFilter,
) {
    if let Some(var_1036) = &input.key {
        object.key("Key").string(var_1036);
    }
    if let Some(var_1037) = &input.values {
        let mut array_1038 = object.key("Values").start_array();
        for item_1039 in var_1037 {
            {
                array_1038.value().string(item_1039);
            }
        }
        array_1038.finish();
    }
}

pub fn serialize_structure_instance_patch_state_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstancePatchStateFilter,
) {
    if let Some(var_1040) = &input.key {
        object.key("Key").string(var_1040);
    }
    if let Some(var_1041) = &input.values {
        let mut array_1042 = object.key("Values").start_array();
        for item_1043 in var_1041 {
            {
                array_1042.value().string(item_1043);
            }
        }
        array_1042.finish();
    }
    if let Some(var_1044) = &input.r#type {
        object.key("Type").string(var_1044.as_str());
    }
}

pub fn serialize_structure_maintenance_window_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowFilter,
) {
    if let Some(var_1045) = &input.key {
        object.key("Key").string(var_1045);
    }
    if let Some(var_1046) = &input.values {
        let mut array_1047 = object.key("Values").start_array();
        for item_1048 in var_1046 {
            {
                array_1047.value().string(item_1048);
            }
        }
        array_1047.finish();
    }
}

pub fn serialize_structure_ops_item_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemFilter,
) {
    if let Some(var_1049) = &input.key {
        object.key("Key").string(var_1049.as_str());
    }
    if let Some(var_1050) = &input.values {
        let mut array_1051 = object.key("Values").start_array();
        for item_1052 in var_1050 {
            {
                array_1051.value().string(item_1052);
            }
        }
        array_1051.finish();
    }
    if let Some(var_1053) = &input.operator {
        object.key("Operator").string(var_1053.as_str());
    }
}

pub fn serialize_structure_parameters_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParametersFilter,
) {
    if let Some(var_1054) = &input.key {
        object.key("Key").string(var_1054.as_str());
    }
    if let Some(var_1055) = &input.values {
        let mut array_1056 = object.key("Values").start_array();
        for item_1057 in var_1055 {
            {
                array_1056.value().string(item_1057);
            }
        }
        array_1056.finish();
    }
}

pub fn serialize_structure_parameter_string_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterStringFilter,
) {
    if let Some(var_1058) = &input.key {
        object.key("Key").string(var_1058);
    }
    if let Some(var_1059) = &input.option {
        object.key("Option").string(var_1059);
    }
    if let Some(var_1060) = &input.values {
        let mut array_1061 = object.key("Values").start_array();
        for item_1062 in var_1060 {
            {
                array_1061.value().string(item_1062);
            }
        }
        array_1061.finish();
    }
}

pub fn serialize_structure_session_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SessionFilter,
) {
    if let Some(var_1063) = &input.key {
        object.key("key").string(var_1063.as_str());
    }
    if let Some(var_1064) = &input.value {
        object.key("value").string(var_1064);
    }
}

pub fn serialize_structure_baseline_override(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BaselineOverride,
) {
    if let Some(var_1065) = &input.operating_system {
        object.key("OperatingSystem").string(var_1065.as_str());
    }
    if let Some(var_1066) = &input.global_filters {
        let mut object_1067 = object.key("GlobalFilters").start_object();
        crate::json_ser::serialize_structure_patch_filter_group(&mut object_1067, var_1066);
        object_1067.finish();
    }
    if let Some(var_1068) = &input.approval_rules {
        let mut object_1069 = object.key("ApprovalRules").start_object();
        crate::json_ser::serialize_structure_patch_rule_group(&mut object_1069, var_1068);
        object_1069.finish();
    }
    if let Some(var_1070) = &input.approved_patches {
        let mut array_1071 = object.key("ApprovedPatches").start_array();
        for item_1072 in var_1070 {
            {
                array_1071.value().string(item_1072);
            }
        }
        array_1071.finish();
    }
    if let Some(var_1073) = &input.approved_patches_compliance_level {
        object
            .key("ApprovedPatchesComplianceLevel")
            .string(var_1073.as_str());
    }
    if let Some(var_1074) = &input.rejected_patches {
        let mut array_1075 = object.key("RejectedPatches").start_array();
        for item_1076 in var_1074 {
            {
                array_1075.value().string(item_1076);
            }
        }
        array_1075.finish();
    }
    if let Some(var_1077) = &input.rejected_patches_action {
        object
            .key("RejectedPatchesAction")
            .string(var_1077.as_str());
    }
    if input.approved_patches_enable_non_security {
        object
            .key("ApprovedPatchesEnableNonSecurity")
            .boolean(input.approved_patches_enable_non_security);
    }
    if let Some(var_1078) = &input.sources {
        let mut array_1079 = object.key("Sources").start_array();
        for item_1080 in var_1078 {
            {
                let mut object_1081 = array_1079.value().start_object();
                crate::json_ser::serialize_structure_patch_source(&mut object_1081, item_1080);
                object_1081.finish();
            }
        }
        array_1079.finish();
    }
}

pub fn serialize_structure_inventory_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryFilter,
) {
    if let Some(var_1082) = &input.key {
        object.key("Key").string(var_1082);
    }
    if let Some(var_1083) = &input.values {
        let mut array_1084 = object.key("Values").start_array();
        for item_1085 in var_1083 {
            {
                array_1084.value().string(item_1085);
            }
        }
        array_1084.finish();
    }
    if let Some(var_1086) = &input.r#type {
        object.key("Type").string(var_1086.as_str());
    }
}

pub fn serialize_structure_inventory_aggregator(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryAggregator,
) {
    if let Some(var_1087) = &input.expression {
        object.key("Expression").string(var_1087);
    }
    if let Some(var_1088) = &input.aggregators {
        let mut array_1089 = object.key("Aggregators").start_array();
        for item_1090 in var_1088 {
            {
                let mut object_1091 = array_1089.value().start_object();
                crate::json_ser::serialize_structure_inventory_aggregator(
                    &mut object_1091,
                    item_1090,
                );
                object_1091.finish();
            }
        }
        array_1089.finish();
    }
    if let Some(var_1092) = &input.groups {
        let mut array_1093 = object.key("Groups").start_array();
        for item_1094 in var_1092 {
            {
                let mut object_1095 = array_1093.value().start_object();
                crate::json_ser::serialize_structure_inventory_group(&mut object_1095, item_1094);
                object_1095.finish();
            }
        }
        array_1093.finish();
    }
}

pub fn serialize_structure_result_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResultAttribute,
) {
    if let Some(var_1096) = &input.type_name {
        object.key("TypeName").string(var_1096);
    }
}

pub fn serialize_structure_ops_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsFilter,
) {
    if let Some(var_1097) = &input.key {
        object.key("Key").string(var_1097);
    }
    if let Some(var_1098) = &input.values {
        let mut array_1099 = object.key("Values").start_array();
        for item_1100 in var_1098 {
            {
                array_1099.value().string(item_1100);
            }
        }
        array_1099.finish();
    }
    if let Some(var_1101) = &input.r#type {
        object.key("Type").string(var_1101.as_str());
    }
}

pub fn serialize_structure_ops_aggregator(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsAggregator,
) {
    if let Some(var_1102) = &input.aggregator_type {
        object.key("AggregatorType").string(var_1102);
    }
    if let Some(var_1103) = &input.type_name {
        object.key("TypeName").string(var_1103);
    }
    if let Some(var_1104) = &input.attribute_name {
        object.key("AttributeName").string(var_1104);
    }
    if let Some(var_1105) = &input.values {
        let mut object_1106 = object.key("Values").start_object();
        for (key_1107, value_1108) in var_1105 {
            {
                object_1106.key(key_1107).string(value_1108);
            }
        }
        object_1106.finish();
    }
    if let Some(var_1109) = &input.filters {
        let mut array_1110 = object.key("Filters").start_array();
        for item_1111 in var_1109 {
            {
                let mut object_1112 = array_1110.value().start_object();
                crate::json_ser::serialize_structure_ops_filter(&mut object_1112, item_1111);
                object_1112.finish();
            }
        }
        array_1110.finish();
    }
    if let Some(var_1113) = &input.aggregators {
        let mut array_1114 = object.key("Aggregators").start_array();
        for item_1115 in var_1113 {
            {
                let mut object_1116 = array_1114.value().start_object();
                crate::json_ser::serialize_structure_ops_aggregator(&mut object_1116, item_1115);
                object_1116.finish();
            }
        }
        array_1114.finish();
    }
}

pub fn serialize_structure_ops_result_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsResultAttribute,
) {
    if let Some(var_1117) = &input.type_name {
        object.key("TypeName").string(var_1117);
    }
}

pub fn serialize_structure_association_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationFilter,
) {
    if let Some(var_1118) = &input.key {
        object.key("key").string(var_1118.as_str());
    }
    if let Some(var_1119) = &input.value {
        object.key("value").string(var_1119);
    }
}

pub fn serialize_structure_command_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CommandFilter,
) {
    if let Some(var_1120) = &input.key {
        object.key("key").string(var_1120.as_str());
    }
    if let Some(var_1121) = &input.value {
        object.key("value").string(var_1121);
    }
}

pub fn serialize_structure_compliance_string_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceStringFilter,
) {
    if let Some(var_1122) = &input.key {
        object.key("Key").string(var_1122);
    }
    if let Some(var_1123) = &input.values {
        let mut array_1124 = object.key("Values").start_array();
        for item_1125 in var_1123 {
            {
                array_1124.value().string(item_1125);
            }
        }
        array_1124.finish();
    }
    if let Some(var_1126) = &input.r#type {
        object.key("Type").string(var_1126.as_str());
    }
}

pub fn serialize_structure_document_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentFilter,
) {
    if let Some(var_1127) = &input.key {
        object.key("key").string(var_1127.as_str());
    }
    if let Some(var_1128) = &input.value {
        object.key("value").string(var_1128);
    }
}

pub fn serialize_structure_document_key_values_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentKeyValuesFilter,
) {
    if let Some(var_1129) = &input.key {
        object.key("Key").string(var_1129);
    }
    if let Some(var_1130) = &input.values {
        let mut array_1131 = object.key("Values").start_array();
        for item_1132 in var_1130 {
            {
                array_1131.value().string(item_1132);
            }
        }
        array_1131.finish();
    }
}

pub fn serialize_structure_ops_item_event_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemEventFilter,
) {
    if let Some(var_1133) = &input.key {
        object.key("Key").string(var_1133.as_str());
    }
    if let Some(var_1134) = &input.values {
        let mut array_1135 = object.key("Values").start_array();
        for item_1136 in var_1134 {
            {
                array_1135.value().string(item_1136);
            }
        }
        array_1135.finish();
    }
    if let Some(var_1137) = &input.operator {
        object.key("Operator").string(var_1137.as_str());
    }
}

pub fn serialize_structure_ops_item_related_items_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsItemRelatedItemsFilter,
) {
    if let Some(var_1138) = &input.key {
        object.key("Key").string(var_1138.as_str());
    }
    if let Some(var_1139) = &input.values {
        let mut array_1140 = object.key("Values").start_array();
        for item_1141 in var_1139 {
            {
                array_1140.value().string(item_1141);
            }
        }
        array_1140.finish();
    }
    if let Some(var_1142) = &input.operator {
        object.key("Operator").string(var_1142.as_str());
    }
}

pub fn serialize_structure_ops_metadata_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpsMetadataFilter,
) {
    if let Some(var_1143) = &input.key {
        object.key("Key").string(var_1143);
    }
    if let Some(var_1144) = &input.values {
        let mut array_1145 = object.key("Values").start_array();
        for item_1146 in var_1144 {
            {
                array_1145.value().string(item_1146);
            }
        }
        array_1145.finish();
    }
}

pub fn serialize_structure_compliance_execution_summary(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceExecutionSummary,
) {
    if let Some(var_1147) = &input.execution_time {
        object
            .key("ExecutionTime")
            .instant(var_1147, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1148) = &input.execution_id {
        object.key("ExecutionId").string(var_1148);
    }
    if let Some(var_1149) = &input.execution_type {
        object.key("ExecutionType").string(var_1149);
    }
}

pub fn serialize_structure_compliance_item_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComplianceItemEntry,
) {
    if let Some(var_1150) = &input.id {
        object.key("Id").string(var_1150);
    }
    if let Some(var_1151) = &input.title {
        object.key("Title").string(var_1151);
    }
    if let Some(var_1152) = &input.severity {
        object.key("Severity").string(var_1152.as_str());
    }
    if let Some(var_1153) = &input.status {
        object.key("Status").string(var_1153.as_str());
    }
    if let Some(var_1154) = &input.details {
        let mut object_1155 = object.key("Details").start_object();
        for (key_1156, value_1157) in var_1154 {
            {
                object_1155.key(key_1156).string(value_1157);
            }
        }
        object_1155.finish();
    }
}

pub fn serialize_structure_inventory_item(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryItem,
) {
    if let Some(var_1158) = &input.type_name {
        object.key("TypeName").string(var_1158);
    }
    if let Some(var_1159) = &input.schema_version {
        object.key("SchemaVersion").string(var_1159);
    }
    if let Some(var_1160) = &input.capture_time {
        object.key("CaptureTime").string(var_1160);
    }
    if let Some(var_1161) = &input.content_hash {
        object.key("ContentHash").string(var_1161);
    }
    if let Some(var_1162) = &input.content {
        let mut array_1163 = object.key("Content").start_array();
        for item_1164 in var_1162 {
            {
                let mut object_1165 = array_1163.value().start_object();
                for (key_1166, value_1167) in item_1164 {
                    {
                        object_1165.key(key_1166).string(value_1167);
                    }
                }
                object_1165.finish();
            }
        }
        array_1163.finish();
    }
    if let Some(var_1168) = &input.context {
        let mut object_1169 = object.key("Context").start_object();
        for (key_1170, value_1171) in var_1168 {
            {
                object_1169.key(key_1170).string(value_1171);
            }
        }
        object_1169.finish();
    }
}

pub fn serialize_structure_maintenance_window_task_parameter_value_expression(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowTaskParameterValueExpression,
) {
    if let Some(var_1172) = &input.values {
        let mut array_1173 = object.key("Values").start_array();
        for item_1174 in var_1172 {
            {
                array_1173.value().string(item_1174);
            }
        }
        array_1173.finish();
    }
}

pub fn serialize_structure_maintenance_window_task_invocation_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowTaskInvocationParameters,
) {
    if let Some(var_1175) = &input.run_command {
        let mut object_1176 = object.key("RunCommand").start_object();
        crate::json_ser::serialize_structure_maintenance_window_run_command_parameters(
            &mut object_1176,
            var_1175,
        );
        object_1176.finish();
    }
    if let Some(var_1177) = &input.automation {
        let mut object_1178 = object.key("Automation").start_object();
        crate::json_ser::serialize_structure_maintenance_window_automation_parameters(
            &mut object_1178,
            var_1177,
        );
        object_1178.finish();
    }
    if let Some(var_1179) = &input.step_functions {
        let mut object_1180 = object.key("StepFunctions").start_object();
        crate::json_ser::serialize_structure_maintenance_window_step_functions_parameters(
            &mut object_1180,
            var_1179,
        );
        object_1180.finish();
    }
    if let Some(var_1181) = &input.lambda {
        let mut object_1182 = object.key("Lambda").start_object();
        crate::json_ser::serialize_structure_maintenance_window_lambda_parameters(
            &mut object_1182,
            var_1181,
        );
        object_1182.finish();
    }
}

pub fn serialize_structure_logging_info(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingInfo,
) {
    if let Some(var_1183) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_1183);
    }
    if let Some(var_1184) = &input.s3_key_prefix {
        object.key("S3KeyPrefix").string(var_1184);
    }
    if let Some(var_1185) = &input.s3_region {
        object.key("S3Region").string(var_1185);
    }
}

pub fn serialize_structure_notification_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NotificationConfig,
) {
    if let Some(var_1186) = &input.notification_arn {
        object.key("NotificationArn").string(var_1186);
    }
    if let Some(var_1187) = &input.notification_events {
        let mut array_1188 = object.key("NotificationEvents").start_array();
        for item_1189 in var_1187 {
            {
                array_1188.value().string(item_1189.as_str());
            }
        }
        array_1188.finish();
    }
    if let Some(var_1190) = &input.notification_type {
        object.key("NotificationType").string(var_1190.as_str());
    }
}

pub fn serialize_structure_cloud_watch_output_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchOutputConfig,
) {
    if let Some(var_1191) = &input.cloud_watch_log_group_name {
        object.key("CloudWatchLogGroupName").string(var_1191);
    }
    if input.cloud_watch_output_enabled {
        object
            .key("CloudWatchOutputEnabled")
            .boolean(input.cloud_watch_output_enabled);
    }
}

pub fn serialize_structure_runbook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Runbook,
) {
    if let Some(var_1192) = &input.document_name {
        object.key("DocumentName").string(var_1192);
    }
    if let Some(var_1193) = &input.document_version {
        object.key("DocumentVersion").string(var_1193);
    }
    if let Some(var_1194) = &input.parameters {
        let mut object_1195 = object.key("Parameters").start_object();
        for (key_1196, value_1197) in var_1194 {
            {
                let mut array_1198 = object_1195.key(key_1196).start_array();
                for item_1199 in value_1197 {
                    {
                        array_1198.value().string(item_1199);
                    }
                }
                array_1198.finish();
            }
        }
        object_1195.finish();
    }
    if let Some(var_1200) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_1200);
    }
    if let Some(var_1201) = &input.targets {
        let mut array_1202 = object.key("Targets").start_array();
        for item_1203 in var_1201 {
            {
                let mut object_1204 = array_1202.value().start_object();
                crate::json_ser::serialize_structure_target(&mut object_1204, item_1203);
                object_1204.finish();
            }
        }
        array_1202.finish();
    }
    if let Some(var_1205) = &input.max_concurrency {
        object.key("MaxConcurrency").string(var_1205);
    }
    if let Some(var_1206) = &input.max_errors {
        object.key("MaxErrors").string(var_1206);
    }
    if let Some(var_1207) = &input.target_locations {
        let mut array_1208 = object.key("TargetLocations").start_array();
        for item_1209 in var_1207 {
            {
                let mut object_1210 = array_1208.value().start_object();
                crate::json_ser::serialize_structure_target_location(&mut object_1210, item_1209);
                object_1210.finish();
            }
        }
        array_1208.finish();
    }
}

pub fn serialize_structure_association_status(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssociationStatus,
) {
    if let Some(var_1211) = &input.date {
        object
            .key("Date")
            .instant(var_1211, smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_1212) = &input.name {
        object.key("Name").string(var_1212.as_str());
    }
    if let Some(var_1213) = &input.message {
        object.key("Message").string(var_1213);
    }
    if let Some(var_1214) = &input.additional_info {
        object.key("AdditionalInfo").string(var_1214);
    }
}

pub fn serialize_structure_document_reviews(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentReviews,
) {
    if let Some(var_1215) = &input.action {
        object.key("Action").string(var_1215.as_str());
    }
    if let Some(var_1216) = &input.comment {
        let mut array_1217 = object.key("Comment").start_array();
        for item_1218 in var_1216 {
            {
                let mut object_1219 = array_1217.value().start_object();
                crate::json_ser::serialize_structure_document_review_comment_source(
                    &mut object_1219,
                    item_1218,
                );
                object_1219.finish();
            }
        }
        array_1217.finish();
    }
}

pub fn serialize_structure_s3_output_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3OutputLocation,
) {
    if let Some(var_1220) = &input.output_s3_region {
        object.key("OutputS3Region").string(var_1220);
    }
    if let Some(var_1221) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1221);
    }
    if let Some(var_1222) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1222);
    }
}

pub fn serialize_structure_patch_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchFilter,
) {
    if let Some(var_1223) = &input.key {
        object.key("Key").string(var_1223.as_str());
    }
    if let Some(var_1224) = &input.values {
        let mut array_1225 = object.key("Values").start_array();
        for item_1226 in var_1224 {
            {
                array_1225.value().string(item_1226);
            }
        }
        array_1225.finish();
    }
}

pub fn serialize_structure_patch_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PatchRule,
) {
    if let Some(var_1227) = &input.patch_filter_group {
        let mut object_1228 = object.key("PatchFilterGroup").start_object();
        crate::json_ser::serialize_structure_patch_filter_group(&mut object_1228, var_1227);
        object_1228.finish();
    }
    if let Some(var_1229) = &input.compliance_level {
        object.key("ComplianceLevel").string(var_1229.as_str());
    }
    if let Some(var_1230) = &input.approve_after_days {
        object.key("ApproveAfterDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1230).into()),
        );
    }
    if let Some(var_1231) = &input.approve_until_date {
        object.key("ApproveUntilDate").string(var_1231);
    }
    if let Some(var_1232) = &input.enable_non_security {
        object.key("EnableNonSecurity").boolean(*var_1232);
    }
}

pub fn serialize_structure_resource_data_sync_destination_data_sharing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncDestinationDataSharing,
) {
    if let Some(var_1233) = &input.destination_data_sharing_type {
        object.key("DestinationDataSharingType").string(var_1233);
    }
}

pub fn serialize_structure_resource_data_sync_aws_organizations_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncAwsOrganizationsSource,
) {
    if let Some(var_1234) = &input.organization_source_type {
        object.key("OrganizationSourceType").string(var_1234);
    }
    if let Some(var_1235) = &input.organizational_units {
        let mut array_1236 = object.key("OrganizationalUnits").start_array();
        for item_1237 in var_1235 {
            {
                let mut object_1238 = array_1236.value().start_object();
                crate::json_ser::serialize_structure_resource_data_sync_organizational_unit(
                    &mut object_1238,
                    item_1237,
                );
                object_1238.finish();
            }
        }
        array_1236.finish();
    }
}

pub fn serialize_structure_inventory_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryGroup,
) {
    if let Some(var_1239) = &input.name {
        object.key("Name").string(var_1239);
    }
    if let Some(var_1240) = &input.filters {
        let mut array_1241 = object.key("Filters").start_array();
        for item_1242 in var_1240 {
            {
                let mut object_1243 = array_1241.value().start_object();
                crate::json_ser::serialize_structure_inventory_filter(&mut object_1243, item_1242);
                object_1243.finish();
            }
        }
        array_1241.finish();
    }
}

pub fn serialize_structure_maintenance_window_run_command_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowRunCommandParameters,
) {
    if let Some(var_1244) = &input.comment {
        object.key("Comment").string(var_1244);
    }
    if let Some(var_1245) = &input.cloud_watch_output_config {
        let mut object_1246 = object.key("CloudWatchOutputConfig").start_object();
        crate::json_ser::serialize_structure_cloud_watch_output_config(&mut object_1246, var_1245);
        object_1246.finish();
    }
    if let Some(var_1247) = &input.document_hash {
        object.key("DocumentHash").string(var_1247);
    }
    if let Some(var_1248) = &input.document_hash_type {
        object.key("DocumentHashType").string(var_1248.as_str());
    }
    if let Some(var_1249) = &input.document_version {
        object.key("DocumentVersion").string(var_1249);
    }
    if let Some(var_1250) = &input.notification_config {
        let mut object_1251 = object.key("NotificationConfig").start_object();
        crate::json_ser::serialize_structure_notification_config(&mut object_1251, var_1250);
        object_1251.finish();
    }
    if let Some(var_1252) = &input.output_s3_bucket_name {
        object.key("OutputS3BucketName").string(var_1252);
    }
    if let Some(var_1253) = &input.output_s3_key_prefix {
        object.key("OutputS3KeyPrefix").string(var_1253);
    }
    if let Some(var_1254) = &input.parameters {
        let mut object_1255 = object.key("Parameters").start_object();
        for (key_1256, value_1257) in var_1254 {
            {
                let mut array_1258 = object_1255.key(key_1256).start_array();
                for item_1259 in value_1257 {
                    {
                        array_1258.value().string(item_1259);
                    }
                }
                array_1258.finish();
            }
        }
        object_1255.finish();
    }
    if let Some(var_1260) = &input.service_role_arn {
        object.key("ServiceRoleArn").string(var_1260);
    }
    if let Some(var_1261) = &input.timeout_seconds {
        object.key("TimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1261).into()),
        );
    }
}

pub fn serialize_structure_maintenance_window_automation_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowAutomationParameters,
) {
    if let Some(var_1262) = &input.document_version {
        object.key("DocumentVersion").string(var_1262);
    }
    if let Some(var_1263) = &input.parameters {
        let mut object_1264 = object.key("Parameters").start_object();
        for (key_1265, value_1266) in var_1263 {
            {
                let mut array_1267 = object_1264.key(key_1265).start_array();
                for item_1268 in value_1266 {
                    {
                        array_1267.value().string(item_1268);
                    }
                }
                array_1267.finish();
            }
        }
        object_1264.finish();
    }
}

pub fn serialize_structure_maintenance_window_step_functions_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowStepFunctionsParameters,
) {
    if let Some(var_1269) = &input.input {
        object.key("Input").string(var_1269);
    }
    if let Some(var_1270) = &input.name {
        object.key("Name").string(var_1270);
    }
}

pub fn serialize_structure_maintenance_window_lambda_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MaintenanceWindowLambdaParameters,
) {
    if let Some(var_1271) = &input.client_context {
        object.key("ClientContext").string(var_1271);
    }
    if let Some(var_1272) = &input.qualifier {
        object.key("Qualifier").string(var_1272);
    }
    if let Some(var_1273) = &input.payload {
        object
            .key("Payload")
            .string_unchecked(&smithy_types::base64::encode(var_1273));
    }
}

pub fn serialize_structure_document_review_comment_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DocumentReviewCommentSource,
) {
    if let Some(var_1274) = &input.r#type {
        object.key("Type").string(var_1274.as_str());
    }
    if let Some(var_1275) = &input.content {
        object.key("Content").string(var_1275);
    }
}

pub fn serialize_structure_resource_data_sync_organizational_unit(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceDataSyncOrganizationalUnit,
) {
    if let Some(var_1276) = &input.organizational_unit_id {
        object.key("OrganizationalUnitId").string(var_1276);
    }
}
