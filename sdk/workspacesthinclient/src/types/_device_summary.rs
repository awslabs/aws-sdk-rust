// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a thin client device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeviceSummary {
    /// <p>The ID of the device.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The hardware serial number of the device.</p>
    pub serial_number: ::std::option::Option<::std::string::String>,
    /// <p>The name of the device.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The model number of the device.</p>
    pub model: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the environment the device is associated with.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the device.</p>
    pub status: ::std::option::Option<crate::types::DeviceStatus>,
    /// <p>The ID of the software set currently installed on the device.</p>
    pub current_software_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the software set which the device has been set to.</p>
    pub desired_software_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the software set that is pending to be installed on the device.</p>
    pub pending_software_set_id: ::std::option::Option<::std::string::String>,
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub software_set_update_schedule: ::std::option::Option<crate::types::SoftwareSetUpdateSchedule>,
    /// <p>The timestamp of the most recent session on the device.</p>
    pub last_connected_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of the most recent check-in of the device.</p>
    pub last_posture_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the device was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the device was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The user ID of the most recent session on the device.</p>
    pub last_user_id: ::std::option::Option<::std::string::String>,
}
impl DeviceSummary {
    /// <p>The ID of the device.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The hardware serial number of the device.</p>
    pub fn serial_number(&self) -> ::std::option::Option<&str> {
        self.serial_number.as_deref()
    }
    /// <p>The name of the device.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The model number of the device.</p>
    pub fn model(&self) -> ::std::option::Option<&str> {
        self.model.as_deref()
    }
    /// <p>The ID of the environment the device is associated with.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The status of the device.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DeviceStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of the software set currently installed on the device.</p>
    pub fn current_software_set_id(&self) -> ::std::option::Option<&str> {
        self.current_software_set_id.as_deref()
    }
    /// <p>The ID of the software set which the device has been set to.</p>
    pub fn desired_software_set_id(&self) -> ::std::option::Option<&str> {
        self.desired_software_set_id.as_deref()
    }
    /// <p>The ID of the software set that is pending to be installed on the device.</p>
    pub fn pending_software_set_id(&self) -> ::std::option::Option<&str> {
        self.pending_software_set_id.as_deref()
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn software_set_update_schedule(&self) -> ::std::option::Option<&crate::types::SoftwareSetUpdateSchedule> {
        self.software_set_update_schedule.as_ref()
    }
    /// <p>The timestamp of the most recent session on the device.</p>
    pub fn last_connected_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_connected_at.as_ref()
    }
    /// <p>The timestamp of the most recent check-in of the device.</p>
    pub fn last_posture_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_posture_at.as_ref()
    }
    /// <p>The timestamp of when the device was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the device was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The user ID of the most recent session on the device.</p>
    pub fn last_user_id(&self) -> ::std::option::Option<&str> {
        self.last_user_id.as_deref()
    }
}
impl ::std::fmt::Debug for DeviceSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeviceSummary");
        formatter.field("id", &self.id);
        formatter.field("serial_number", &self.serial_number);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("model", &self.model);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("status", &self.status);
        formatter.field("current_software_set_id", &self.current_software_set_id);
        formatter.field("desired_software_set_id", &self.desired_software_set_id);
        formatter.field("pending_software_set_id", &self.pending_software_set_id);
        formatter.field("software_set_update_schedule", &self.software_set_update_schedule);
        formatter.field("last_connected_at", &self.last_connected_at);
        formatter.field("last_posture_at", &self.last_posture_at);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("arn", &self.arn);
        formatter.field("last_user_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DeviceSummary {
    /// Creates a new builder-style object to manufacture [`DeviceSummary`](crate::types::DeviceSummary).
    pub fn builder() -> crate::types::builders::DeviceSummaryBuilder {
        crate::types::builders::DeviceSummaryBuilder::default()
    }
}

/// A builder for [`DeviceSummary`](crate::types::DeviceSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DeviceSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) serial_number: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) model: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DeviceStatus>,
    pub(crate) current_software_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) desired_software_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) pending_software_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) software_set_update_schedule: ::std::option::Option<crate::types::SoftwareSetUpdateSchedule>,
    pub(crate) last_connected_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_posture_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) last_user_id: ::std::option::Option<::std::string::String>,
}
impl DeviceSummaryBuilder {
    /// <p>The ID of the device.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the device.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the device.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The hardware serial number of the device.</p>
    pub fn serial_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.serial_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hardware serial number of the device.</p>
    pub fn set_serial_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.serial_number = input;
        self
    }
    /// <p>The hardware serial number of the device.</p>
    pub fn get_serial_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.serial_number
    }
    /// <p>The name of the device.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the device.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the device.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The model number of the device.</p>
    pub fn model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model number of the device.</p>
    pub fn set_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model = input;
        self
    }
    /// <p>The model number of the device.</p>
    pub fn get_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.model
    }
    /// <p>The ID of the environment the device is associated with.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environment the device is associated with.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The ID of the environment the device is associated with.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The status of the device.</p>
    pub fn status(mut self, input: crate::types::DeviceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the device.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DeviceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the device.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DeviceStatus> {
        &self.status
    }
    /// <p>The ID of the software set currently installed on the device.</p>
    pub fn current_software_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_software_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the software set currently installed on the device.</p>
    pub fn set_current_software_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_software_set_id = input;
        self
    }
    /// <p>The ID of the software set currently installed on the device.</p>
    pub fn get_current_software_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_software_set_id
    }
    /// <p>The ID of the software set which the device has been set to.</p>
    pub fn desired_software_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.desired_software_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the software set which the device has been set to.</p>
    pub fn set_desired_software_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.desired_software_set_id = input;
        self
    }
    /// <p>The ID of the software set which the device has been set to.</p>
    pub fn get_desired_software_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.desired_software_set_id
    }
    /// <p>The ID of the software set that is pending to be installed on the device.</p>
    pub fn pending_software_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pending_software_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the software set that is pending to be installed on the device.</p>
    pub fn set_pending_software_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pending_software_set_id = input;
        self
    }
    /// <p>The ID of the software set that is pending to be installed on the device.</p>
    pub fn get_pending_software_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pending_software_set_id
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn software_set_update_schedule(mut self, input: crate::types::SoftwareSetUpdateSchedule) -> Self {
        self.software_set_update_schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn set_software_set_update_schedule(mut self, input: ::std::option::Option<crate::types::SoftwareSetUpdateSchedule>) -> Self {
        self.software_set_update_schedule = input;
        self
    }
    /// <p>An option to define if software updates should be applied within a maintenance window.</p>
    pub fn get_software_set_update_schedule(&self) -> &::std::option::Option<crate::types::SoftwareSetUpdateSchedule> {
        &self.software_set_update_schedule
    }
    /// <p>The timestamp of the most recent session on the device.</p>
    pub fn last_connected_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_connected_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the most recent session on the device.</p>
    pub fn set_last_connected_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_connected_at = input;
        self
    }
    /// <p>The timestamp of the most recent session on the device.</p>
    pub fn get_last_connected_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_connected_at
    }
    /// <p>The timestamp of the most recent check-in of the device.</p>
    pub fn last_posture_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_posture_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the most recent check-in of the device.</p>
    pub fn set_last_posture_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_posture_at = input;
        self
    }
    /// <p>The timestamp of the most recent check-in of the device.</p>
    pub fn get_last_posture_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_posture_at
    }
    /// <p>The timestamp of when the device was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the device was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the device was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the device was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the device was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the device was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The user ID of the most recent session on the device.</p>
    pub fn last_user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user ID of the most recent session on the device.</p>
    pub fn set_last_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_user_id = input;
        self
    }
    /// <p>The user ID of the most recent session on the device.</p>
    pub fn get_last_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_user_id
    }
    /// Consumes the builder and constructs a [`DeviceSummary`](crate::types::DeviceSummary).
    pub fn build(self) -> crate::types::DeviceSummary {
        crate::types::DeviceSummary {
            id: self.id,
            serial_number: self.serial_number,
            name: self.name,
            model: self.model,
            environment_id: self.environment_id,
            status: self.status,
            current_software_set_id: self.current_software_set_id,
            desired_software_set_id: self.desired_software_set_id,
            pending_software_set_id: self.pending_software_set_id,
            software_set_update_schedule: self.software_set_update_schedule,
            last_connected_at: self.last_connected_at,
            last_posture_at: self.last_posture_at,
            created_at: self.created_at,
            updated_at: self.updated_at,
            arn: self.arn,
            last_user_id: self.last_user_id,
        }
    }
}
impl ::std::fmt::Debug for DeviceSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeviceSummaryBuilder");
        formatter.field("id", &self.id);
        formatter.field("serial_number", &self.serial_number);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("model", &self.model);
        formatter.field("environment_id", &self.environment_id);
        formatter.field("status", &self.status);
        formatter.field("current_software_set_id", &self.current_software_set_id);
        formatter.field("desired_software_set_id", &self.desired_software_set_id);
        formatter.field("pending_software_set_id", &self.pending_software_set_id);
        formatter.field("software_set_update_schedule", &self.software_set_update_schedule);
        formatter.field("last_connected_at", &self.last_connected_at);
        formatter.field("last_posture_at", &self.last_posture_at);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("arn", &self.arn);
        formatter.field("last_user_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
