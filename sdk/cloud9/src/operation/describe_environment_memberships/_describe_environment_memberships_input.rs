// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEnvironmentMembershipsInput {
    /// <p>The Amazon Resource Name (ARN) of an individual environment member to get information about. If no value is specified, information about all environment members are returned.</p>
    #[doc(hidden)]
    pub user_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the environment to get environment member information about.</p>
    #[doc(hidden)]
    pub environment_id: std::option::Option<std::string::String>,
    /// <p>The type of environment member permissions to get information about. Available values include:</p>
    /// <ul>
    /// <li> <p> <code>owner</code>: Owns the environment.</p> </li>
    /// <li> <p> <code>read-only</code>: Has read-only access to the environment.</p> </li>
    /// <li> <p> <code>read-write</code>: Has read-write access to the environment.</p> </li>
    /// </ul>
    /// <p>If no value is specified, information about all environment members are returned.</p>
    #[doc(hidden)]
    pub permissions: std::option::Option<std::vec::Vec<crate::types::Permissions>>,
    /// <p>During a previous call, if there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a <i>next token</i>. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of environment members to get information about.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl DescribeEnvironmentMembershipsInput {
    /// <p>The Amazon Resource Name (ARN) of an individual environment member to get information about. If no value is specified, information about all environment members are returned.</p>
    pub fn user_arn(&self) -> std::option::Option<&str> {
        self.user_arn.as_deref()
    }
    /// <p>The ID of the environment to get environment member information about.</p>
    pub fn environment_id(&self) -> std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The type of environment member permissions to get information about. Available values include:</p>
    /// <ul>
    /// <li> <p> <code>owner</code>: Owns the environment.</p> </li>
    /// <li> <p> <code>read-only</code>: Has read-only access to the environment.</p> </li>
    /// <li> <p> <code>read-write</code>: Has read-write access to the environment.</p> </li>
    /// </ul>
    /// <p>If no value is specified, information about all environment members are returned.</p>
    pub fn permissions(&self) -> std::option::Option<&[crate::types::Permissions]> {
        self.permissions.as_deref()
    }
    /// <p>During a previous call, if there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a <i>next token</i>. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of environment members to get information about.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl DescribeEnvironmentMembershipsInput {
    /// Creates a new builder-style object to manufacture [`DescribeEnvironmentMembershipsInput`](crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsInput).
    pub fn builder() -> crate::operation::describe_environment_memberships::builders::DescribeEnvironmentMembershipsInputBuilder{
        crate::operation::describe_environment_memberships::builders::DescribeEnvironmentMembershipsInputBuilder::default()
    }
}

/// A builder for [`DescribeEnvironmentMembershipsInput`](crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEnvironmentMembershipsInputBuilder {
    pub(crate) user_arn: std::option::Option<std::string::String>,
    pub(crate) environment_id: std::option::Option<std::string::String>,
    pub(crate) permissions: std::option::Option<std::vec::Vec<crate::types::Permissions>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl DescribeEnvironmentMembershipsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of an individual environment member to get information about. If no value is specified, information about all environment members are returned.</p>
    pub fn user_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an individual environment member to get information about. If no value is specified, information about all environment members are returned.</p>
    pub fn set_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_arn = input;
        self
    }
    /// <p>The ID of the environment to get environment member information about.</p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_id = Some(input.into());
        self
    }
    /// <p>The ID of the environment to get environment member information about.</p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>The type of environment member permissions to get information about. Available values include:</p>
    /// <ul>
    /// <li> <p> <code>owner</code>: Owns the environment.</p> </li>
    /// <li> <p> <code>read-only</code>: Has read-only access to the environment.</p> </li>
    /// <li> <p> <code>read-write</code>: Has read-write access to the environment.</p> </li>
    /// </ul>
    /// <p>If no value is specified, information about all environment members are returned.</p>
    pub fn permissions(mut self, input: crate::types::Permissions) -> Self {
        let mut v = self.permissions.unwrap_or_default();
        v.push(input);
        self.permissions = Some(v);
        self
    }
    /// <p>The type of environment member permissions to get information about. Available values include:</p>
    /// <ul>
    /// <li> <p> <code>owner</code>: Owns the environment.</p> </li>
    /// <li> <p> <code>read-only</code>: Has read-only access to the environment.</p> </li>
    /// <li> <p> <code>read-write</code>: Has read-write access to the environment.</p> </li>
    /// </ul>
    /// <p>If no value is specified, information about all environment members are returned.</p>
    pub fn set_permissions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Permissions>>,
    ) -> Self {
        self.permissions = input;
        self
    }
    /// <p>During a previous call, if there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a <i>next token</i>. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>During a previous call, if there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a <i>next token</i>. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of environment members to get information about.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of environment members to get information about.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEnvironmentMembershipsInput`](crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsInput {
                user_arn: self.user_arn
                ,
                environment_id: self.environment_id
                ,
                permissions: self.permissions
                ,
                next_token: self.next_token
                ,
                max_results: self.max_results
                ,
            }
        )
    }
}
