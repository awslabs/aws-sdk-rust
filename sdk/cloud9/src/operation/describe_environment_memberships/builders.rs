// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_environment_memberships::_describe_environment_memberships_output::DescribeEnvironmentMembershipsOutputBuilder;

pub use crate::operation::describe_environment_memberships::_describe_environment_memberships_input::DescribeEnvironmentMembershipsInputBuilder;

impl crate::operation::describe_environment_memberships::builders::DescribeEnvironmentMembershipsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_environment_memberships();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeEnvironmentMemberships`.
///
/// <p>Gets information about environment members for an Cloud9 development environment.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeEnvironmentMembershipsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_environment_memberships::builders::DescribeEnvironmentMembershipsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsOutput,
        crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError,
    > for DescribeEnvironmentMembershipsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsOutput,
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeEnvironmentMembershipsFluentBuilder {
    /// Creates a new `DescribeEnvironmentMemberships`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeEnvironmentMemberships as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_environment_memberships::builders::DescribeEnvironmentMembershipsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_environment_memberships::DescribeEnvironmentMemberships::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_environment_memberships::DescribeEnvironmentMemberships::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsOutput,
        crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_environment_memberships::paginator::DescribeEnvironmentMembershipsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::describe_environment_memberships::paginator::DescribeEnvironmentMembershipsPaginator {
        crate::operation::describe_environment_memberships::paginator::DescribeEnvironmentMembershipsPaginator::new(self.handle, self.inner)
    }
    /// <p>The Amazon Resource Name (ARN) of an individual environment member to get information about. If no value is specified, information about all environment members are returned.</p>
    pub fn user_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an individual environment member to get information about. If no value is specified, information about all environment members are returned.</p>
    pub fn set_user_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an individual environment member to get information about. If no value is specified, information about all environment members are returned.</p>
    pub fn get_user_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_arn()
    }
    /// <p>The ID of the environment to get environment member information about.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.environment_id(input.into());
        self
    }
    /// <p>The ID of the environment to get environment member information about.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_environment_id(input);
        self
    }
    /// <p>The ID of the environment to get environment member information about.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_environment_id()
    }
    ///
    /// Appends an item to `permissions`.
    ///
    /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
    ///
    /// <p>The type of environment member permissions to get information about. Available values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>owner</code>: Owns the environment.</p></li>
    /// <li>
    /// <p><code>read-only</code>: Has read-only access to the environment.</p></li>
    /// <li>
    /// <p><code>read-write</code>: Has read-write access to the environment.</p></li>
    /// </ul>
    /// <p>If no value is specified, information about all environment members are returned.</p>
    pub fn permissions(mut self, input: crate::types::Permissions) -> Self {
        self.inner = self.inner.permissions(input);
        self
    }
    /// <p>The type of environment member permissions to get information about. Available values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>owner</code>: Owns the environment.</p></li>
    /// <li>
    /// <p><code>read-only</code>: Has read-only access to the environment.</p></li>
    /// <li>
    /// <p><code>read-write</code>: Has read-write access to the environment.</p></li>
    /// </ul>
    /// <p>If no value is specified, information about all environment members are returned.</p>
    pub fn set_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Permissions>>) -> Self {
        self.inner = self.inner.set_permissions(input);
        self
    }
    /// <p>The type of environment member permissions to get information about. Available values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>owner</code>: Owns the environment.</p></li>
    /// <li>
    /// <p><code>read-only</code>: Has read-only access to the environment.</p></li>
    /// <li>
    /// <p><code>read-write</code>: Has read-write access to the environment.</p></li>
    /// </ul>
    /// <p>If no value is specified, information about all environment members are returned.</p>
    pub fn get_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Permissions>> {
        self.inner.get_permissions()
    }
    /// <p>During a previous call, if there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a <i>next token</i>. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>During a previous call, if there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a <i>next token</i>. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>During a previous call, if there are more than 25 items in the list, only the first 25 items are returned, along with a unique string called a <i>next token</i>. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of environment members to get information about.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of environment members to get information about.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of environment members to get information about.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
