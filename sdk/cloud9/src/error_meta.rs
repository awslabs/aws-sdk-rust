// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The target request is invalid.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>A concurrent access issue occurred.</p>
    ConcurrentAccessException(crate::types::error::ConcurrentAccessException),
    /// <p>A conflict occurred.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An access permissions issue occurred.</p>
    ForbiddenException(crate::types::error::ForbiddenException),
    /// <p>An internal server error occurred.</p>
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// <p>A service limit was exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The target resource cannot be found.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>Too many service requests were made over the given time period.</p>
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConcurrentAccessException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_environment_ec2::CreateEnvironmentEC2Error> for Error {
    fn from(err: crate::operation::create_environment_ec2::CreateEnvironmentEC2Error) -> Self {
        match err {
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_environment_ec2::CreateEnvironmentEC2Error::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_environment_membership::CreateEnvironmentMembershipError>
    for Error
{
    fn from(
        err: crate::operation::create_environment_membership::CreateEnvironmentMembershipError,
    ) -> Self {
        match err {
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_environment_membership::CreateEnvironmentMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_environment::DeleteEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_environment::DeleteEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_environment::DeleteEnvironmentError> for Error {
    fn from(err: crate::operation::delete_environment::DeleteEnvironmentError) -> Self {
        match err {
            crate::operation::delete_environment::DeleteEnvironmentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError>
    for Error
{
    fn from(
        err: crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError,
    ) -> Self {
        match err {
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_environment_membership::DeleteEnvironmentMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError>
    for Error
{
    fn from(
        err: crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError,
    ) -> Self {
        match err {
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_environment_memberships::DescribeEnvironmentMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_environments::DescribeEnvironmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_environments::DescribeEnvironmentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_environments::DescribeEnvironmentsError> for Error {
    fn from(err: crate::operation::describe_environments::DescribeEnvironmentsError) -> Self {
        match err {
            crate::operation::describe_environments::DescribeEnvironmentsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_environments::DescribeEnvironmentsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::describe_environments::DescribeEnvironmentsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_environments::DescribeEnvironmentsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_environments::DescribeEnvironmentsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::describe_environments::DescribeEnvironmentsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_environments::DescribeEnvironmentsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_environments::DescribeEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_environment_status::DescribeEnvironmentStatusError> for Error {
    fn from(
        err: crate::operation::describe_environment_status::DescribeEnvironmentStatusError,
    ) -> Self {
        match err {
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::describe_environment_status::DescribeEnvironmentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_environments::ListEnvironmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_environments::ListEnvironmentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environments::ListEnvironmentsError> for Error {
    fn from(err: crate::operation::list_environments::ListEnvironmentsError) -> Self {
        match err {
            crate::operation::list_environments::ListEnvironmentsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_environments::ListEnvironmentsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_environments::ListEnvironmentsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_environments::ListEnvironmentsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_environments::ListEnvironmentsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_environments::ListEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ConcurrentAccessException(inner) => {
                Error::ConcurrentAccessException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::tag_resource::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ConcurrentAccessException(
                inner,
            ) => Error::ConcurrentAccessException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::operation::untag_resource::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_environment::UpdateEnvironmentError> for Error {
    fn from(err: crate::operation::update_environment::UpdateEnvironmentError) -> Self {
        match err {
            crate::operation::update_environment::UpdateEnvironmentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_environment_membership::UpdateEnvironmentMembershipError>
    for Error
{
    fn from(
        err: crate::operation::update_environment_membership::UpdateEnvironmentMembershipError,
    ) -> Self {
        match err {
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_environment_membership::UpdateEnvironmentMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConcurrentAccessException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
