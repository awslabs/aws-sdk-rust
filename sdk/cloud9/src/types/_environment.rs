// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an Cloud9 development environment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Environment {
    /// <p>The ID of the environment.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the environment.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description for the environment.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of environment. Valid values include the following:</p>
    /// <ul>
    /// <li> <p> <code>ec2</code>: An Amazon Elastic Compute Cloud (Amazon EC2) instance connects to the environment.</p> </li>
    /// <li> <p> <code>ssh</code>: Your own server connects to the environment.</p> </li>
    /// </ul>
    pub r#type: crate::types::EnvironmentType,
    /// <p>The connection type used for connecting to an Amazon EC2 environment. <code>CONNECT_SSH</code> is selected by default.</p>
    pub connection_type: ::std::option::Option<crate::types::ConnectionType>,
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the environment owner.</p>
    pub owner_arn: ::std::string::String,
    /// <p>The state of the environment in its creation or deletion lifecycle.</p>
    pub lifecycle: ::std::option::Option<crate::types::EnvironmentLifecycle>,
    /// <p>Describes the status of Amazon Web Services managed temporary credentials for the Cloud9 environment. Available values are:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED_ON_CREATE</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>FAILED_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// </ul>
    pub managed_credentials_status: ::std::option::Option<crate::types::ManagedCredentialsStatus>,
}
impl Environment {
    /// <p>The ID of the environment.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the environment.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description for the environment.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of environment. Valid values include the following:</p>
    /// <ul>
    /// <li> <p> <code>ec2</code>: An Amazon Elastic Compute Cloud (Amazon EC2) instance connects to the environment.</p> </li>
    /// <li> <p> <code>ssh</code>: Your own server connects to the environment.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> &crate::types::EnvironmentType {
        &self.r#type
    }
    /// <p>The connection type used for connecting to an Amazon EC2 environment. <code>CONNECT_SSH</code> is selected by default.</p>
    pub fn connection_type(&self) -> ::std::option::Option<&crate::types::ConnectionType> {
        self.connection_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the environment owner.</p>
    pub fn owner_arn(&self) -> &str {
        use std::ops::Deref;
        self.owner_arn.deref()
    }
    /// <p>The state of the environment in its creation or deletion lifecycle.</p>
    pub fn lifecycle(&self) -> ::std::option::Option<&crate::types::EnvironmentLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>Describes the status of Amazon Web Services managed temporary credentials for the Cloud9 environment. Available values are:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED_ON_CREATE</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>FAILED_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// </ul>
    pub fn managed_credentials_status(&self) -> ::std::option::Option<&crate::types::ManagedCredentialsStatus> {
        self.managed_credentials_status.as_ref()
    }
}
impl ::std::fmt::Debug for Environment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Environment");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("connection_type", &self.connection_type);
        formatter.field("arn", &self.arn);
        formatter.field("owner_arn", &self.owner_arn);
        formatter.field("lifecycle", &self.lifecycle);
        formatter.field("managed_credentials_status", &self.managed_credentials_status);
        formatter.finish()
    }
}
impl Environment {
    /// Creates a new builder-style object to manufacture [`Environment`](crate::types::Environment).
    pub fn builder() -> crate::types::builders::EnvironmentBuilder {
        crate::types::builders::EnvironmentBuilder::default()
    }
}

/// A builder for [`Environment`](crate::types::Environment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct EnvironmentBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::EnvironmentType>,
    pub(crate) connection_type: ::std::option::Option<crate::types::ConnectionType>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner_arn: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle: ::std::option::Option<crate::types::EnvironmentLifecycle>,
    pub(crate) managed_credentials_status: ::std::option::Option<crate::types::ManagedCredentialsStatus>,
}
impl EnvironmentBuilder {
    /// <p>The ID of the environment.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environment.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the environment.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the environment.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the environment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description for the environment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the environment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the environment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The type of environment. Valid values include the following:</p>
    /// <ul>
    /// <li> <p> <code>ec2</code>: An Amazon Elastic Compute Cloud (Amazon EC2) instance connects to the environment.</p> </li>
    /// <li> <p> <code>ssh</code>: Your own server connects to the environment.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::EnvironmentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of environment. Valid values include the following:</p>
    /// <ul>
    /// <li> <p> <code>ec2</code>: An Amazon Elastic Compute Cloud (Amazon EC2) instance connects to the environment.</p> </li>
    /// <li> <p> <code>ssh</code>: Your own server connects to the environment.</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::EnvironmentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of environment. Valid values include the following:</p>
    /// <ul>
    /// <li> <p> <code>ec2</code>: An Amazon Elastic Compute Cloud (Amazon EC2) instance connects to the environment.</p> </li>
    /// <li> <p> <code>ssh</code>: Your own server connects to the environment.</p> </li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::EnvironmentType> {
        &self.r#type
    }
    /// <p>The connection type used for connecting to an Amazon EC2 environment. <code>CONNECT_SSH</code> is selected by default.</p>
    pub fn connection_type(mut self, input: crate::types::ConnectionType) -> Self {
        self.connection_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connection type used for connecting to an Amazon EC2 environment. <code>CONNECT_SSH</code> is selected by default.</p>
    pub fn set_connection_type(mut self, input: ::std::option::Option<crate::types::ConnectionType>) -> Self {
        self.connection_type = input;
        self
    }
    /// <p>The connection type used for connecting to an Amazon EC2 environment. <code>CONNECT_SSH</code> is selected by default.</p>
    pub fn get_connection_type(&self) -> &::std::option::Option<crate::types::ConnectionType> {
        &self.connection_type
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Amazon Resource Name (ARN) of the environment owner.</p>
    /// This field is required.
    pub fn owner_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment owner.</p>
    pub fn set_owner_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment owner.</p>
    pub fn get_owner_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_arn
    }
    /// <p>The state of the environment in its creation or deletion lifecycle.</p>
    pub fn lifecycle(mut self, input: crate::types::EnvironmentLifecycle) -> Self {
        self.lifecycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the environment in its creation or deletion lifecycle.</p>
    pub fn set_lifecycle(mut self, input: ::std::option::Option<crate::types::EnvironmentLifecycle>) -> Self {
        self.lifecycle = input;
        self
    }
    /// <p>The state of the environment in its creation or deletion lifecycle.</p>
    pub fn get_lifecycle(&self) -> &::std::option::Option<crate::types::EnvironmentLifecycle> {
        &self.lifecycle
    }
    /// <p>Describes the status of Amazon Web Services managed temporary credentials for the Cloud9 environment. Available values are:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED_ON_CREATE</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>FAILED_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// </ul>
    pub fn managed_credentials_status(mut self, input: crate::types::ManagedCredentialsStatus) -> Self {
        self.managed_credentials_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the status of Amazon Web Services managed temporary credentials for the Cloud9 environment. Available values are:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED_ON_CREATE</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>FAILED_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// </ul>
    pub fn set_managed_credentials_status(mut self, input: ::std::option::Option<crate::types::ManagedCredentialsStatus>) -> Self {
        self.managed_credentials_status = input;
        self
    }
    /// <p>Describes the status of Amazon Web Services managed temporary credentials for the Cloud9 environment. Available values are:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED_ON_CREATE</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>PENDING_REMOVAL_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>FAILED_REMOVAL_BY_COLLABORATOR</code> </p> </li>
    /// <li> <p> <code>ENABLED_BY_OWNER</code> </p> </li>
    /// <li> <p> <code>DISABLED_BY_DEFAULT</code> </p> </li>
    /// </ul>
    pub fn get_managed_credentials_status(&self) -> &::std::option::Option<crate::types::ManagedCredentialsStatus> {
        &self.managed_credentials_status
    }
    /// Consumes the builder and constructs a [`Environment`](crate::types::Environment).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::EnvironmentBuilder::r#type)
    /// - [`arn`](crate::types::builders::EnvironmentBuilder::arn)
    /// - [`owner_arn`](crate::types::builders::EnvironmentBuilder::owner_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::Environment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Environment {
            id: self.id,
            name: self.name,
            description: self.description,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building Environment",
                )
            })?,
            connection_type: self.connection_type,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Environment",
                )
            })?,
            owner_arn: self.owner_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner_arn",
                    "owner_arn was not specified but it is required when building Environment",
                )
            })?,
            lifecycle: self.lifecycle,
            managed_credentials_status: self.managed_credentials_status,
        })
    }
}
impl ::std::fmt::Debug for EnvironmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("connection_type", &self.connection_type);
        formatter.field("arn", &self.arn);
        formatter.field("owner_arn", &self.owner_arn);
        formatter.field("lifecycle", &self.lifecycle);
        formatter.field("managed_credentials_status", &self.managed_credentials_status);
        formatter.finish()
    }
}
