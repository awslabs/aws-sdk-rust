// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Access to the resource is denied.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request couldn't be completed because it conflicted with the current state of the resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An exception occurred with the service.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The resource couldn't be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request has exceeded the quotas imposed by the service.</p>
    ServiceLimitExceededException(crate::types::error::ServiceLimitExceededException),
    /// <p>The limit on the number of requests per second was exceeded.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request was invalid.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceLimitExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::cancel_job::CancelJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::cancel_job::CancelJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_job::CancelJobError> for Error {
    fn from(err: crate::operation::cancel_job::CancelJobError) -> Self {
        match err {
            crate::operation::cancel_job::CancelJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::cancel_job::CancelJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::cancel_job::CancelJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_job::CancelJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::cancel_job::CancelJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::cancel_job::CancelJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::create_data_set::CreateDataSetError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_data_set::CreateDataSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_set::CreateDataSetError> for Error {
    fn from(err: crate::operation::create_data_set::CreateDataSetError) -> Self {
        match err {
            crate::operation::create_data_set::CreateDataSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_data_set::CreateDataSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_set::CreateDataSetError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::operation::create_data_set::CreateDataSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_data_set::CreateDataSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_data_set::CreateDataSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_event_action::CreateEventActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_event_action::CreateEventActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_event_action::CreateEventActionError> for Error {
    fn from(err: crate::operation::create_event_action::CreateEventActionError) -> Self {
        match err {
            crate::operation::create_event_action::CreateEventActionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_event_action::CreateEventActionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_event_action::CreateEventActionError::ServiceLimitExceededException(inner) => Error::ServiceLimitExceededException(inner),
            crate::operation::create_event_action::CreateEventActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_event_action::CreateEventActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_event_action::CreateEventActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_job::CreateJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_job::CreateJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_job::CreateJobError> for Error {
    fn from(err: crate::operation::create_job::CreateJobError) -> Self {
        match err {
            crate::operation::create_job::CreateJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_job::CreateJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_job::CreateJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_job::CreateJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_job::CreateJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_job::CreateJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_job::CreateJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_revision::CreateRevisionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_revision::CreateRevisionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_revision::CreateRevisionError> for Error {
    fn from(err: crate::operation::create_revision::CreateRevisionError) -> Self {
        match err {
            crate::operation::create_revision::CreateRevisionError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::create_revision::CreateRevisionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_revision::CreateRevisionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_revision::CreateRevisionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_revision::CreateRevisionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_revision::CreateRevisionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_asset::DeleteAssetError> for Error {
    fn from(err: crate::operation::delete_asset::DeleteAssetError) -> Self {
        match err {
            crate::operation::delete_asset::DeleteAssetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_asset::DeleteAssetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_asset::DeleteAssetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_asset::DeleteAssetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_asset::DeleteAssetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_asset::DeleteAssetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_asset::DeleteAssetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::delete_data_set::DeleteDataSetError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_data_set::DeleteDataSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_data_set::DeleteDataSetError> for Error {
    fn from(err: crate::operation::delete_data_set::DeleteDataSetError) -> Self {
        match err {
            crate::operation::delete_data_set::DeleteDataSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_data_set::DeleteDataSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_data_set::DeleteDataSetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_data_set::DeleteDataSetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_data_set::DeleteDataSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_data_set::DeleteDataSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_data_set::DeleteDataSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_event_action::DeleteEventActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_event_action::DeleteEventActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_event_action::DeleteEventActionError> for Error {
    fn from(err: crate::operation::delete_event_action::DeleteEventActionError) -> Self {
        match err {
            crate::operation::delete_event_action::DeleteEventActionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_event_action::DeleteEventActionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_event_action::DeleteEventActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_event_action::DeleteEventActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_event_action::DeleteEventActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_revision::DeleteRevisionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_revision::DeleteRevisionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_revision::DeleteRevisionError> for Error {
    fn from(err: crate::operation::delete_revision::DeleteRevisionError) -> Self {
        match err {
            crate::operation::delete_revision::DeleteRevisionError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_revision::DeleteRevisionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_revision::DeleteRevisionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_revision::DeleteRevisionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_revision::DeleteRevisionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_revision::DeleteRevisionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_revision::DeleteRevisionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_asset::GetAssetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_asset::GetAssetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_asset::GetAssetError> for Error {
    fn from(err: crate::operation::get_asset::GetAssetError) -> Self {
        match err {
            crate::operation::get_asset::GetAssetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_asset::GetAssetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_asset::GetAssetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_asset::GetAssetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_asset::GetAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_data_set::GetDataSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_data_set::GetDataSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_data_set::GetDataSetError> for Error {
    fn from(err: crate::operation::get_data_set::GetDataSetError) -> Self {
        match err {
            crate::operation::get_data_set::GetDataSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_data_set::GetDataSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_data_set::GetDataSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_data_set::GetDataSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_data_set::GetDataSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_event_action::GetEventActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_event_action::GetEventActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_event_action::GetEventActionError> for Error {
    fn from(err: crate::operation::get_event_action::GetEventActionError) -> Self {
        match err {
            crate::operation::get_event_action::GetEventActionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_event_action::GetEventActionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_event_action::GetEventActionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_event_action::GetEventActionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_event_action::GetEventActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_job::GetJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_job::GetJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_job::GetJobError> for Error {
    fn from(err: crate::operation::get_job::GetJobError) -> Self {
        match err {
            crate::operation::get_job::GetJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_job::GetJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_job::GetJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_job::GetJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_job::GetJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_revision::GetRevisionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_revision::GetRevisionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_revision::GetRevisionError> for Error {
    fn from(err: crate::operation::get_revision::GetRevisionError) -> Self {
        match err {
            crate::operation::get_revision::GetRevisionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_revision::GetRevisionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_revision::GetRevisionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_revision::GetRevisionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_revision::GetRevisionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_data_set_revisions::ListDataSetRevisionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_data_set_revisions::ListDataSetRevisionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_set_revisions::ListDataSetRevisionsError> for Error {
    fn from(err: crate::operation::list_data_set_revisions::ListDataSetRevisionsError) -> Self {
        match err {
            crate::operation::list_data_set_revisions::ListDataSetRevisionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_set_revisions::ListDataSetRevisionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_data_set_revisions::ListDataSetRevisionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_set_revisions::ListDataSetRevisionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_set_revisions::ListDataSetRevisionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_data_sets::ListDataSetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_data_sets::ListDataSetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_sets::ListDataSetsError> for Error {
    fn from(err: crate::operation::list_data_sets::ListDataSetsError) -> Self {
        match err {
            crate::operation::list_data_sets::ListDataSetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_sets::ListDataSetsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_data_sets::ListDataSetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_data_sets::ListDataSetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_data_sets::ListDataSetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_event_actions::ListEventActionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_event_actions::ListEventActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_event_actions::ListEventActionsError> for Error {
    fn from(err: crate::operation::list_event_actions::ListEventActionsError) -> Self {
        match err {
            crate::operation::list_event_actions::ListEventActionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_event_actions::ListEventActionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_event_actions::ListEventActionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_event_actions::ListEventActionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_event_actions::ListEventActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_jobs::ListJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_jobs::ListJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_jobs::ListJobsError> for Error {
    fn from(err: crate::operation::list_jobs::ListJobsError) -> Self {
        match err {
            crate::operation::list_jobs::ListJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_jobs::ListJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_jobs::ListJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_jobs::ListJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_jobs::ListJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_revision_assets::ListRevisionAssetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_revision_assets::ListRevisionAssetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_revision_assets::ListRevisionAssetsError> for Error {
    fn from(err: crate::operation::list_revision_assets::ListRevisionAssetsError) -> Self {
        match err {
            crate::operation::list_revision_assets::ListRevisionAssetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_revision_assets::ListRevisionAssetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_revision_assets::ListRevisionAssetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_revision_assets::ListRevisionAssetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_revision_assets::ListRevisionAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::revoke_revision::RevokeRevisionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::revoke_revision::RevokeRevisionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::revoke_revision::RevokeRevisionError> for Error {
    fn from(err: crate::operation::revoke_revision::RevokeRevisionError) -> Self {
        match err {
            crate::operation::revoke_revision::RevokeRevisionError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::revoke_revision::RevokeRevisionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::revoke_revision::RevokeRevisionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::revoke_revision::RevokeRevisionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::revoke_revision::RevokeRevisionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::revoke_revision::RevokeRevisionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::revoke_revision::RevokeRevisionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::send_api_asset::SendApiAssetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_api_asset::SendApiAssetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_api_asset::SendApiAssetError> for Error {
    fn from(err: crate::operation::send_api_asset::SendApiAssetError) -> Self {
        match err {
            crate::operation::send_api_asset::SendApiAssetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::send_api_asset::SendApiAssetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::send_api_asset::SendApiAssetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::send_api_asset::SendApiAssetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::send_api_asset::SendApiAssetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::send_api_asset::SendApiAssetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::start_job::StartJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::start_job::StartJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_job::StartJobError> for Error {
    fn from(err: crate::operation::start_job::StartJobError) -> Self {
        match err {
            crate::operation::start_job::StartJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_job::StartJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_job::StartJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_job::StartJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_job::StartJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_job::StartJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_job::StartJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_asset::UpdateAssetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_asset::UpdateAssetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_asset::UpdateAssetError> for Error {
    fn from(err: crate::operation::update_asset::UpdateAssetError) -> Self {
        match err {
            crate::operation::update_asset::UpdateAssetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_asset::UpdateAssetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_asset::UpdateAssetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_asset::UpdateAssetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_asset::UpdateAssetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_asset::UpdateAssetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_asset::UpdateAssetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::update_data_set::UpdateDataSetError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_data_set::UpdateDataSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_data_set::UpdateDataSetError> for Error {
    fn from(err: crate::operation::update_data_set::UpdateDataSetError) -> Self {
        match err {
            crate::operation::update_data_set::UpdateDataSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_data_set::UpdateDataSetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_data_set::UpdateDataSetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_data_set::UpdateDataSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_data_set::UpdateDataSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_data_set::UpdateDataSetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_event_action::UpdateEventActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_event_action::UpdateEventActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_event_action::UpdateEventActionError> for Error {
    fn from(err: crate::operation::update_event_action::UpdateEventActionError) -> Self {
        match err {
            crate::operation::update_event_action::UpdateEventActionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_event_action::UpdateEventActionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_event_action::UpdateEventActionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_event_action::UpdateEventActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_event_action::UpdateEventActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_event_action::UpdateEventActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_revision::UpdateRevisionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_revision::UpdateRevisionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_revision::UpdateRevisionError> for Error {
    fn from(err: crate::operation::update_revision::UpdateRevisionError) -> Self {
        match err {
            crate::operation::update_revision::UpdateRevisionError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::update_revision::UpdateRevisionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_revision::UpdateRevisionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_revision::UpdateRevisionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_revision::UpdateRevisionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_revision::UpdateRevisionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_revision::UpdateRevisionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceLimitExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
