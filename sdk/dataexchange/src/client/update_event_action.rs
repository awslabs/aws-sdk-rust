// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateEventAction`](crate::client::fluent_builders::UpdateEventAction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`action(Action)`](crate::client::fluent_builders::UpdateEventAction::action) / [`set_action(Option<Action>)`](crate::client::fluent_builders::UpdateEventAction::set_action): <p>What occurs after a certain event.</p>
    ///   - [`event_action_id(impl Into<String>)`](crate::client::fluent_builders::UpdateEventAction::event_action_id) / [`set_event_action_id(Option<String>)`](crate::client::fluent_builders::UpdateEventAction::set_event_action_id): <p>The unique identifier for the event action.</p>
    /// - On success, responds with [`UpdateEventActionOutput`](crate::output::UpdateEventActionOutput) with field(s):
    ///   - [`action(Option<Action>)`](crate::output::UpdateEventActionOutput::action): <p>What occurs after a certain event.</p>
    ///   - [`arn(Option<String>)`](crate::output::UpdateEventActionOutput::arn): <p>The ARN for the event action.</p>
    ///   - [`created_at(Option<DateTime>)`](crate::output::UpdateEventActionOutput::created_at): <p>The date and time that the event action was created, in ISO 8601 format.</p>
    ///   - [`event(Option<Event>)`](crate::output::UpdateEventActionOutput::event): <p>What occurs to start an action.</p>
    ///   - [`id(Option<String>)`](crate::output::UpdateEventActionOutput::id): <p>The unique identifier for the event action.</p>
    ///   - [`updated_at(Option<DateTime>)`](crate::output::UpdateEventActionOutput::updated_at): <p>The date and time that the event action was last updated, in ISO 8601 format.</p>
    /// - On failure, responds with [`SdkError<UpdateEventActionError>`](crate::error::UpdateEventActionError)
    pub fn update_event_action(&self) -> crate::client::fluent_builders::UpdateEventAction {
        crate::client::fluent_builders::UpdateEventAction::new(self.handle.clone())
    }
}
