// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceLimitExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceLimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_details_correct_errors(
    mut builder: crate::types::builders::OriginDetailsBuilder,
) -> crate::types::builders::OriginDetailsBuilder {
    if builder.product_id.is_none() {
        builder.product_id = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_entry_correct_errors(mut builder: crate::types::builders::AssetEntryBuilder) -> crate::types::builders::AssetEntryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.asset_details.is_none() {
        builder.asset_details = {
            let builder = crate::types::builders::AssetDetailsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.asset_type.is_none() {
        builder.asset_type = "no value was set".parse::<crate::types::AssetType>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn auto_export_revision_to_s3_request_details_correct_errors(
    mut builder: crate::types::builders::AutoExportRevisionToS3RequestDetailsBuilder,
) -> crate::types::builders::AutoExportRevisionToS3RequestDetailsBuilder {
    if builder.revision_destination.is_none() {
        builder.revision_destination = {
            let builder = crate::types::builders::AutoExportRevisionDestinationEntryBuilder::default();
            crate::serde_util::auto_export_revision_destination_entry_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn create_s3_data_access_from_s3_bucket_response_details_correct_errors(
    mut builder: crate::types::builders::CreateS3DataAccessFromS3BucketResponseDetailsBuilder,
) -> crate::types::builders::CreateS3DataAccessFromS3BucketResponseDetailsBuilder {
    if builder.asset_source.is_none() {
        builder.asset_source = {
            let builder = crate::types::builders::S3DataAccessAssetSourceEntryBuilder::default();
            crate::serde_util::s3_data_access_asset_source_entry_correct_errors(builder).build().ok()
        }
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn data_set_entry_correct_errors(mut builder: crate::types::builders::DataSetEntryBuilder) -> crate::types::builders::DataSetEntryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.asset_type.is_none() {
        builder.asset_type = "no value was set".parse::<crate::types::AssetType>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.origin.is_none() {
        builder.origin = "no value was set".parse::<crate::types::Origin>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn event_action_entry_correct_errors(
    mut builder: crate::types::builders::EventActionEntryBuilder,
) -> crate::types::builders::EventActionEntryBuilder {
    if builder.action.is_none() {
        builder.action = {
            let builder = crate::types::builders::ActionBuilder::default();
            Some(builder.build())
        }
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.event.is_none() {
        builder.event = {
            let builder = crate::types::builders::EventBuilder::default();
            Some(builder.build())
        }
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn export_asset_to_signed_url_response_details_correct_errors(
    mut builder: crate::types::builders::ExportAssetToSignedUrlResponseDetailsBuilder,
) -> crate::types::builders::ExportAssetToSignedUrlResponseDetailsBuilder {
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn export_assets_to_s3_response_details_correct_errors(
    mut builder: crate::types::builders::ExportAssetsToS3ResponseDetailsBuilder,
) -> crate::types::builders::ExportAssetsToS3ResponseDetailsBuilder {
    if builder.asset_destinations.is_none() {
        builder.asset_destinations = Some(Default::default())
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn export_revisions_to_s3_response_details_correct_errors(
    mut builder: crate::types::builders::ExportRevisionsToS3ResponseDetailsBuilder,
) -> crate::types::builders::ExportRevisionsToS3ResponseDetailsBuilder {
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.revision_destinations.is_none() {
        builder.revision_destinations = Some(Default::default())
    }
    builder
}

pub(crate) fn import_asset_from_api_gateway_api_response_details_correct_errors(
    mut builder: crate::types::builders::ImportAssetFromApiGatewayApiResponseDetailsBuilder,
) -> crate::types::builders::ImportAssetFromApiGatewayApiResponseDetailsBuilder {
    if builder.api_id.is_none() {
        builder.api_id = Some(Default::default())
    }
    if builder.api_name.is_none() {
        builder.api_name = Some(Default::default())
    }
    if builder.api_specification_md5_hash.is_none() {
        builder.api_specification_md5_hash = Some(Default::default())
    }
    if builder.api_specification_upload_url.is_none() {
        builder.api_specification_upload_url = Some(Default::default())
    }
    if builder.api_specification_upload_url_expires_at.is_none() {
        builder.api_specification_upload_url_expires_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.protocol_type.is_none() {
        builder.protocol_type = "no value was set".parse::<crate::types::ProtocolType>().ok()
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    if builder.stage.is_none() {
        builder.stage = Some(Default::default())
    }
    builder
}

pub(crate) fn import_asset_from_signed_url_response_details_correct_errors(
    mut builder: crate::types::builders::ImportAssetFromSignedUrlResponseDetailsBuilder,
) -> crate::types::builders::ImportAssetFromSignedUrlResponseDetailsBuilder {
    if builder.asset_name.is_none() {
        builder.asset_name = Some(Default::default())
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn import_assets_from_lake_formation_tag_policy_response_details_correct_errors(
    mut builder: crate::types::builders::ImportAssetsFromLakeFormationTagPolicyResponseDetailsBuilder,
) -> crate::types::builders::ImportAssetsFromLakeFormationTagPolicyResponseDetailsBuilder {
    if builder.catalog_id.is_none() {
        builder.catalog_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn import_assets_from_redshift_data_shares_response_details_correct_errors(
    mut builder: crate::types::builders::ImportAssetsFromRedshiftDataSharesResponseDetailsBuilder,
) -> crate::types::builders::ImportAssetsFromRedshiftDataSharesResponseDetailsBuilder {
    if builder.asset_sources.is_none() {
        builder.asset_sources = Some(Default::default())
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn import_assets_from_s3_response_details_correct_errors(
    mut builder: crate::types::builders::ImportAssetsFromS3ResponseDetailsBuilder,
) -> crate::types::builders::ImportAssetsFromS3ResponseDetailsBuilder {
    if builder.asset_sources.is_none() {
        builder.asset_sources = Some(Default::default())
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn job_entry_correct_errors(mut builder: crate::types::builders::JobEntryBuilder) -> crate::types::builders::JobEntryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.details.is_none() {
        builder.details = {
            let builder = crate::types::builders::ResponseDetailsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::Type>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn job_error_correct_errors(mut builder: crate::types::builders::JobErrorBuilder) -> crate::types::builders::JobErrorBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::Code>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn lake_formation_data_permission_asset_correct_errors(
    mut builder: crate::types::builders::LakeFormationDataPermissionAssetBuilder,
) -> crate::types::builders::LakeFormationDataPermissionAssetBuilder {
    if builder.lake_formation_data_permission_details.is_none() {
        builder.lake_formation_data_permission_details = {
            let builder = crate::types::builders::LakeFormationDataPermissionDetailsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.lake_formation_data_permission_type.is_none() {
        builder.lake_formation_data_permission_type = "no value was set".parse::<crate::types::LakeFormationDataPermissionType>().ok()
    }
    if builder.permissions.is_none() {
        builder.permissions = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_data_share_asset_correct_errors(
    mut builder: crate::types::builders::RedshiftDataShareAssetBuilder,
) -> crate::types::builders::RedshiftDataShareAssetBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn revision_entry_correct_errors(
    mut builder: crate::types::builders::RevisionEntryBuilder,
) -> crate::types::builders::RevisionEntryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn revision_published_correct_errors(
    mut builder: crate::types::builders::RevisionPublishedBuilder,
) -> crate::types::builders::RevisionPublishedBuilder {
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_data_access_asset_correct_errors(
    mut builder: crate::types::builders::S3DataAccessAssetBuilder,
) -> crate::types::builders::S3DataAccessAssetBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_snapshot_asset_correct_errors(
    mut builder: crate::types::builders::S3SnapshotAssetBuilder,
) -> crate::types::builders::S3SnapshotAssetBuilder {
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_export_revision_destination_entry_correct_errors(
    mut builder: crate::types::builders::AutoExportRevisionDestinationEntryBuilder,
) -> crate::types::builders::AutoExportRevisionDestinationEntryBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn database_lf_tag_policy_and_permissions_correct_errors(
    mut builder: crate::types::builders::DatabaseLfTagPolicyAndPermissionsBuilder,
) -> crate::types::builders::DatabaseLfTagPolicyAndPermissionsBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    if builder.permissions.is_none() {
        builder.permissions = Some(Default::default())
    }
    builder
}

pub(crate) fn export_server_side_encryption_correct_errors(
    mut builder: crate::types::builders::ExportServerSideEncryptionBuilder,
) -> crate::types::builders::ExportServerSideEncryptionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ServerSideEncryptionTypes>().ok()
    }
    builder
}

pub(crate) fn s3_data_access_asset_source_entry_correct_errors(
    mut builder: crate::types::builders::S3DataAccessAssetSourceEntryBuilder,
) -> crate::types::builders::S3DataAccessAssetSourceEntryBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn table_lf_tag_policy_and_permissions_correct_errors(
    mut builder: crate::types::builders::TableLfTagPolicyAndPermissionsBuilder,
) -> crate::types::builders::TableLfTagPolicyAndPermissionsBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    if builder.permissions.is_none() {
        builder.permissions = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_destination_entry_correct_errors(
    mut builder: crate::types::builders::AssetDestinationEntryBuilder,
) -> crate::types::builders::AssetDestinationEntryBuilder {
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_source_entry_correct_errors(
    mut builder: crate::types::builders::AssetSourceEntryBuilder,
) -> crate::types::builders::AssetSourceEntryBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn import_asset_from_signed_url_job_error_details_correct_errors(
    mut builder: crate::types::builders::ImportAssetFromSignedUrlJobErrorDetailsBuilder,
) -> crate::types::builders::ImportAssetFromSignedUrlJobErrorDetailsBuilder {
    if builder.asset_name.is_none() {
        builder.asset_name = Some(Default::default())
    }
    builder
}

pub(crate) fn kms_key_to_grant_correct_errors(
    mut builder: crate::types::builders::KmsKeyToGrantBuilder,
) -> crate::types::builders::KmsKeyToGrantBuilder {
    if builder.kms_key_arn.is_none() {
        builder.kms_key_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn lf_tag_policy_details_correct_errors(
    mut builder: crate::types::builders::LfTagPolicyDetailsBuilder,
) -> crate::types::builders::LfTagPolicyDetailsBuilder {
    if builder.catalog_id.is_none() {
        builder.catalog_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::LfResourceType>().ok()
    }
    if builder.resource_details.is_none() {
        builder.resource_details = {
            let builder = crate::types::builders::LfResourceDetailsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn redshift_data_share_asset_source_entry_correct_errors(
    mut builder: crate::types::builders::RedshiftDataShareAssetSourceEntryBuilder,
) -> crate::types::builders::RedshiftDataShareAssetSourceEntryBuilder {
    if builder.data_share_arn.is_none() {
        builder.data_share_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn revision_destination_entry_correct_errors(
    mut builder: crate::types::builders::RevisionDestinationEntryBuilder,
) -> crate::types::builders::RevisionDestinationEntryBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    builder
}

pub(crate) fn lf_tag_correct_errors(mut builder: crate::types::builders::LfTagBuilder) -> crate::types::builders::LfTagBuilder {
    if builder.tag_key.is_none() {
        builder.tag_key = Some(Default::default())
    }
    if builder.tag_values.is_none() {
        builder.tag_values = Some(Default::default())
    }
    builder
}

pub(crate) fn database_lf_tag_policy_correct_errors(
    mut builder: crate::types::builders::DatabaseLfTagPolicyBuilder,
) -> crate::types::builders::DatabaseLfTagPolicyBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn table_lf_tag_policy_correct_errors(
    mut builder: crate::types::builders::TableLfTagPolicyBuilder,
) -> crate::types::builders::TableLfTagPolicyBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}
