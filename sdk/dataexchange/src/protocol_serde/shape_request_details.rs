// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_request_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RequestDetails,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.export_asset_to_signed_url {
        #[allow(unused_mut)]
        let mut object_2 = object.key("ExportAssetToSignedUrl").start_object();
        crate::protocol_serde::shape_export_asset_to_signed_url_request_details::ser_export_asset_to_signed_url_request_details(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.export_assets_to_s3 {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ExportAssetsToS3").start_object();
        crate::protocol_serde::shape_export_assets_to_s3_request_details::ser_export_assets_to_s3_request_details(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.export_revisions_to_s3 {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ExportRevisionsToS3").start_object();
        crate::protocol_serde::shape_export_revisions_to_s3_request_details::ser_export_revisions_to_s3_request_details(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.import_asset_from_signed_url {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ImportAssetFromSignedUrl").start_object();
        crate::protocol_serde::shape_import_asset_from_signed_url_request_details::ser_import_asset_from_signed_url_request_details(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.import_assets_from_s3 {
        #[allow(unused_mut)]
        let mut object_10 = object.key("ImportAssetsFromS3").start_object();
        crate::protocol_serde::shape_import_assets_from_s3_request_details::ser_import_assets_from_s3_request_details(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.import_assets_from_redshift_data_shares {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ImportAssetsFromRedshiftDataShares").start_object();
        crate::protocol_serde::shape_import_assets_from_redshift_data_shares_request_details::ser_import_assets_from_redshift_data_shares_request_details(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.import_asset_from_api_gateway_api {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ImportAssetFromApiGatewayApi").start_object();
        crate::protocol_serde::shape_import_asset_from_api_gateway_api_request_details::ser_import_asset_from_api_gateway_api_request_details(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.create_s3_data_access_from_s3_bucket {
        #[allow(unused_mut)]
        let mut object_16 = object.key("CreateS3DataAccessFromS3Bucket").start_object();
        crate::protocol_serde::shape_create_s3_data_access_from_s3_bucket_request_details::ser_create_s3_data_access_from_s3_bucket_request_details(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.import_assets_from_lake_formation_tag_policy {
        #[allow(unused_mut)]
        let mut object_18 = object.key("ImportAssetsFromLakeFormationTagPolicy").start_object();
        crate::protocol_serde::shape_import_assets_from_lake_formation_tag_policy_request_details::ser_import_assets_from_lake_formation_tag_policy_request_details(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
