// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details from an import from Amazon Redshift datashare request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportAssetsFromRedshiftDataSharesRequestDetails {
    /// <p>A list of Amazon Redshift datashare assets.</p>
    #[doc(hidden)]
    pub asset_sources:
        std::option::Option<std::vec::Vec<crate::types::RedshiftDataShareAssetSourceEntry>>,
    /// <p>The unique identifier for the data set associated with this import job.</p>
    #[doc(hidden)]
    pub data_set_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the revision associated with this import job.</p>
    #[doc(hidden)]
    pub revision_id: std::option::Option<std::string::String>,
}
impl ImportAssetsFromRedshiftDataSharesRequestDetails {
    /// <p>A list of Amazon Redshift datashare assets.</p>
    pub fn asset_sources(
        &self,
    ) -> std::option::Option<&[crate::types::RedshiftDataShareAssetSourceEntry]> {
        self.asset_sources.as_deref()
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub fn data_set_id(&self) -> std::option::Option<&str> {
        self.data_set_id.as_deref()
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub fn revision_id(&self) -> std::option::Option<&str> {
        self.revision_id.as_deref()
    }
}
impl ImportAssetsFromRedshiftDataSharesRequestDetails {
    /// Creates a new builder-style object to manufacture [`ImportAssetsFromRedshiftDataSharesRequestDetails`](crate::types::ImportAssetsFromRedshiftDataSharesRequestDetails).
    pub fn builder(
    ) -> crate::types::builders::ImportAssetsFromRedshiftDataSharesRequestDetailsBuilder {
        crate::types::builders::ImportAssetsFromRedshiftDataSharesRequestDetailsBuilder::default()
    }
}

/// A builder for [`ImportAssetsFromRedshiftDataSharesRequestDetails`](crate::types::ImportAssetsFromRedshiftDataSharesRequestDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportAssetsFromRedshiftDataSharesRequestDetailsBuilder {
    pub(crate) asset_sources:
        std::option::Option<std::vec::Vec<crate::types::RedshiftDataShareAssetSourceEntry>>,
    pub(crate) data_set_id: std::option::Option<std::string::String>,
    pub(crate) revision_id: std::option::Option<std::string::String>,
}
impl ImportAssetsFromRedshiftDataSharesRequestDetailsBuilder {
    /// Appends an item to `asset_sources`.
    ///
    /// To override the contents of this collection use [`set_asset_sources`](Self::set_asset_sources).
    ///
    /// <p>A list of Amazon Redshift datashare assets.</p>
    pub fn asset_sources(mut self, input: crate::types::RedshiftDataShareAssetSourceEntry) -> Self {
        let mut v = self.asset_sources.unwrap_or_default();
        v.push(input);
        self.asset_sources = Some(v);
        self
    }
    /// <p>A list of Amazon Redshift datashare assets.</p>
    pub fn set_asset_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RedshiftDataShareAssetSourceEntry>>,
    ) -> Self {
        self.asset_sources = input;
        self
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub fn data_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_set_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub fn set_data_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub fn revision_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.revision_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub fn set_revision_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.revision_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ImportAssetsFromRedshiftDataSharesRequestDetails`](crate::types::ImportAssetsFromRedshiftDataSharesRequestDetails).
    pub fn build(self) -> crate::types::ImportAssetsFromRedshiftDataSharesRequestDetails {
        crate::types::ImportAssetsFromRedshiftDataSharesRequestDetails {
            asset_sources: self.asset_sources,
            data_set_id: self.data_set_id,
            revision_id: self.revision_id,
        }
    }
}
