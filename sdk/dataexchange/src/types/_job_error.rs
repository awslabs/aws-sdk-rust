// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An error that occurred with the job request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobError {
    /// <p>The code for the job error.</p>
    pub code: crate::types::Code,
    /// <p>The details about the job error.</p>
    pub details: ::std::option::Option<crate::types::Details>,
    /// <p>The name of the limit that was reached.</p>
    pub limit_name: ::std::option::Option<crate::types::JobErrorLimitName>,
    /// <p>The value of the exceeded limit.</p>
    pub limit_value: f64,
    /// <p>The message related to the job error.</p>
    pub message: ::std::string::String,
    /// <p>The unique identifier for the resource related to the error.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource related to the error.</p>
    pub resource_type: ::std::option::Option<crate::types::JobErrorResourceTypes>,
}
impl JobError {
    /// <p>The code for the job error.</p>
    pub fn code(&self) -> &crate::types::Code {
        &self.code
    }
    /// <p>The details about the job error.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::Details> {
        self.details.as_ref()
    }
    /// <p>The name of the limit that was reached.</p>
    pub fn limit_name(&self) -> ::std::option::Option<&crate::types::JobErrorLimitName> {
        self.limit_name.as_ref()
    }
    /// <p>The value of the exceeded limit.</p>
    pub fn limit_value(&self) -> f64 {
        self.limit_value
    }
    /// <p>The message related to the job error.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>The unique identifier for the resource related to the error.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The type of resource related to the error.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::JobErrorResourceTypes> {
        self.resource_type.as_ref()
    }
}
impl JobError {
    /// Creates a new builder-style object to manufacture [`JobError`](crate::types::JobError).
    pub fn builder() -> crate::types::builders::JobErrorBuilder {
        crate::types::builders::JobErrorBuilder::default()
    }
}

/// A builder for [`JobError`](crate::types::JobError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobErrorBuilder {
    pub(crate) code: ::std::option::Option<crate::types::Code>,
    pub(crate) details: ::std::option::Option<crate::types::Details>,
    pub(crate) limit_name: ::std::option::Option<crate::types::JobErrorLimitName>,
    pub(crate) limit_value: ::std::option::Option<f64>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::JobErrorResourceTypes>,
}
impl JobErrorBuilder {
    /// <p>The code for the job error.</p>
    /// This field is required.
    pub fn code(mut self, input: crate::types::Code) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The code for the job error.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::Code>) -> Self {
        self.code = input;
        self
    }
    /// <p>The code for the job error.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::Code> {
        &self.code
    }
    /// <p>The details about the job error.</p>
    pub fn details(mut self, input: crate::types::Details) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details about the job error.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::Details>) -> Self {
        self.details = input;
        self
    }
    /// <p>The details about the job error.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::Details> {
        &self.details
    }
    /// <p>The name of the limit that was reached.</p>
    pub fn limit_name(mut self, input: crate::types::JobErrorLimitName) -> Self {
        self.limit_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the limit that was reached.</p>
    pub fn set_limit_name(mut self, input: ::std::option::Option<crate::types::JobErrorLimitName>) -> Self {
        self.limit_name = input;
        self
    }
    /// <p>The name of the limit that was reached.</p>
    pub fn get_limit_name(&self) -> &::std::option::Option<crate::types::JobErrorLimitName> {
        &self.limit_name
    }
    /// <p>The value of the exceeded limit.</p>
    pub fn limit_value(mut self, input: f64) -> Self {
        self.limit_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the exceeded limit.</p>
    pub fn set_limit_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.limit_value = input;
        self
    }
    /// <p>The value of the exceeded limit.</p>
    pub fn get_limit_value(&self) -> &::std::option::Option<f64> {
        &self.limit_value
    }
    /// <p>The message related to the job error.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message related to the job error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The message related to the job error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The unique identifier for the resource related to the error.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the resource related to the error.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The unique identifier for the resource related to the error.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The type of resource related to the error.</p>
    pub fn resource_type(mut self, input: crate::types::JobErrorResourceTypes) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource related to the error.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::JobErrorResourceTypes>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource related to the error.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::JobErrorResourceTypes> {
        &self.resource_type
    }
    /// Consumes the builder and constructs a [`JobError`](crate::types::JobError).
    /// This method will fail if any of the following fields are not set:
    /// - [`code`](crate::types::builders::JobErrorBuilder::code)
    /// - [`message`](crate::types::builders::JobErrorBuilder::message)
    pub fn build(self) -> ::std::result::Result<crate::types::JobError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::JobError {
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building JobError",
                )
            })?,
            details: self.details,
            limit_name: self.limit_name,
            limit_value: self.limit_value.unwrap_or_default(),
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building JobError",
                )
            })?,
            resource_id: self.resource_id,
            resource_type: self.resource_type,
        })
    }
}
