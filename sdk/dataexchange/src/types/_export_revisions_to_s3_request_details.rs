// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the operation to be performed by the job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportRevisionsToS3RequestDetails {
    /// <p>The unique identifier for the data set associated with this export job.</p>
    #[doc(hidden)]
    pub data_set_id: std::option::Option<std::string::String>,
    /// <p>Encryption configuration for the export job.</p>
    #[doc(hidden)]
    pub encryption: std::option::Option<crate::types::ExportServerSideEncryption>,
    /// <p>The destination for the revision.</p>
    #[doc(hidden)]
    pub revision_destinations:
        std::option::Option<std::vec::Vec<crate::types::RevisionDestinationEntry>>,
}
impl ExportRevisionsToS3RequestDetails {
    /// <p>The unique identifier for the data set associated with this export job.</p>
    pub fn data_set_id(&self) -> std::option::Option<&str> {
        self.data_set_id.as_deref()
    }
    /// <p>Encryption configuration for the export job.</p>
    pub fn encryption(&self) -> std::option::Option<&crate::types::ExportServerSideEncryption> {
        self.encryption.as_ref()
    }
    /// <p>The destination for the revision.</p>
    pub fn revision_destinations(
        &self,
    ) -> std::option::Option<&[crate::types::RevisionDestinationEntry]> {
        self.revision_destinations.as_deref()
    }
}
impl ExportRevisionsToS3RequestDetails {
    /// Creates a new builder-style object to manufacture [`ExportRevisionsToS3RequestDetails`](crate::types::ExportRevisionsToS3RequestDetails).
    pub fn builder() -> crate::types::builders::ExportRevisionsToS3RequestDetailsBuilder {
        crate::types::builders::ExportRevisionsToS3RequestDetailsBuilder::default()
    }
}

/// A builder for [`ExportRevisionsToS3RequestDetails`](crate::types::ExportRevisionsToS3RequestDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExportRevisionsToS3RequestDetailsBuilder {
    pub(crate) data_set_id: std::option::Option<std::string::String>,
    pub(crate) encryption: std::option::Option<crate::types::ExportServerSideEncryption>,
    pub(crate) revision_destinations:
        std::option::Option<std::vec::Vec<crate::types::RevisionDestinationEntry>>,
}
impl ExportRevisionsToS3RequestDetailsBuilder {
    /// <p>The unique identifier for the data set associated with this export job.</p>
    pub fn data_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_set_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the data set associated with this export job.</p>
    pub fn set_data_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>Encryption configuration for the export job.</p>
    pub fn encryption(mut self, input: crate::types::ExportServerSideEncryption) -> Self {
        self.encryption = Some(input);
        self
    }
    /// <p>Encryption configuration for the export job.</p>
    pub fn set_encryption(
        mut self,
        input: std::option::Option<crate::types::ExportServerSideEncryption>,
    ) -> Self {
        self.encryption = input;
        self
    }
    /// Appends an item to `revision_destinations`.
    ///
    /// To override the contents of this collection use [`set_revision_destinations`](Self::set_revision_destinations).
    ///
    /// <p>The destination for the revision.</p>
    pub fn revision_destinations(mut self, input: crate::types::RevisionDestinationEntry) -> Self {
        let mut v = self.revision_destinations.unwrap_or_default();
        v.push(input);
        self.revision_destinations = Some(v);
        self
    }
    /// <p>The destination for the revision.</p>
    pub fn set_revision_destinations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RevisionDestinationEntry>>,
    ) -> Self {
        self.revision_destinations = input;
        self
    }
    /// Consumes the builder and constructs a [`ExportRevisionsToS3RequestDetails`](crate::types::ExportRevisionsToS3RequestDetails).
    pub fn build(self) -> crate::types::ExportRevisionsToS3RequestDetails {
        crate::types::ExportRevisionsToS3RequestDetails {
            data_set_id: self.data_set_id,
            encryption: self.encryption,
            revision_destinations: self.revision_destinations,
        }
    }
}
