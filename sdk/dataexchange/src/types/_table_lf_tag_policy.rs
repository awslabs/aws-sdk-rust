// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The LF-tag policy for a table resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TableLfTagPolicy {
    /// <p>A list of LF-tag conditions that apply to table resources.</p>
    #[doc(hidden)]
    pub expression: std::option::Option<std::vec::Vec<crate::types::LfTag>>,
}
impl TableLfTagPolicy {
    /// <p>A list of LF-tag conditions that apply to table resources.</p>
    pub fn expression(&self) -> std::option::Option<&[crate::types::LfTag]> {
        self.expression.as_deref()
    }
}
impl TableLfTagPolicy {
    /// Creates a new builder-style object to manufacture [`TableLfTagPolicy`](crate::types::TableLfTagPolicy).
    pub fn builder() -> crate::types::builders::TableLfTagPolicyBuilder {
        crate::types::builders::TableLfTagPolicyBuilder::default()
    }
}

/// A builder for [`TableLfTagPolicy`](crate::types::TableLfTagPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TableLfTagPolicyBuilder {
    pub(crate) expression: std::option::Option<std::vec::Vec<crate::types::LfTag>>,
}
impl TableLfTagPolicyBuilder {
    /// Appends an item to `expression`.
    ///
    /// To override the contents of this collection use [`set_expression`](Self::set_expression).
    ///
    /// <p>A list of LF-tag conditions that apply to table resources.</p>
    pub fn expression(mut self, input: crate::types::LfTag) -> Self {
        let mut v = self.expression.unwrap_or_default();
        v.push(input);
        self.expression = Some(v);
        self
    }
    /// <p>A list of LF-tag conditions that apply to table resources.</p>
    pub fn set_expression(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LfTag>>,
    ) -> Self {
        self.expression = input;
        self
    }
    /// Consumes the builder and constructs a [`TableLfTagPolicy`](crate::types::TableLfTagPolicy).
    pub fn build(self) -> crate::types::TableLfTagPolicy {
        crate::types::TableLfTagPolicy {
            expression: self.expression,
        }
    }
}
