// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A revision is a container for one or more assets.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RevisionEntry {
    /// <p>The ARN for the revision.</p>
    pub arn: ::std::string::String,
    /// <p>An optional comment about the revision.</p>
    pub comment: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the revision was created, in ISO 8601 format.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The unique identifier for the data set associated with the data set revision.</p>
    pub data_set_id: ::std::string::String,
    /// <p>To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.</p>
    pub finalized: bool,
    /// <p>The unique identifier for the revision.</p>
    pub id: ::std::string::String,
    /// <p>The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.</p>
    pub source_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the revision was last updated, in ISO 8601 format.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>A required comment to inform subscribers of the reason their access to the revision was revoked.</p>
    pub revocation_comment: ::std::option::Option<::std::string::String>,
    /// <p>A status indicating that subscribers' access to the revision was revoked.</p>
    pub revoked: bool,
    /// <p>The date and time that the revision was revoked, in ISO 8601 format.</p>
    pub revoked_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RevisionEntry {
    /// <p>The ARN for the revision.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>An optional comment about the revision.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The date and time that the revision was created, in ISO 8601 format.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The unique identifier for the data set associated with the data set revision.</p>
    pub fn data_set_id(&self) -> &str {
        use std::ops::Deref;
        self.data_set_id.deref()
    }
    /// <p>To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.</p>
    pub fn finalized(&self) -> bool {
        self.finalized
    }
    /// <p>The unique identifier for the revision.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.</p>
    pub fn source_id(&self) -> ::std::option::Option<&str> {
        self.source_id.as_deref()
    }
    /// <p>The date and time that the revision was last updated, in ISO 8601 format.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>A required comment to inform subscribers of the reason their access to the revision was revoked.</p>
    pub fn revocation_comment(&self) -> ::std::option::Option<&str> {
        self.revocation_comment.as_deref()
    }
    /// <p>A status indicating that subscribers' access to the revision was revoked.</p>
    pub fn revoked(&self) -> bool {
        self.revoked
    }
    /// <p>The date and time that the revision was revoked, in ISO 8601 format.</p>
    pub fn revoked_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.revoked_at.as_ref()
    }
}
impl RevisionEntry {
    /// Creates a new builder-style object to manufacture [`RevisionEntry`](crate::types::RevisionEntry).
    pub fn builder() -> crate::types::builders::RevisionEntryBuilder {
        crate::types::builders::RevisionEntryBuilder::default()
    }
}

/// A builder for [`RevisionEntry`](crate::types::RevisionEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RevisionEntryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) data_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) finalized: ::std::option::Option<bool>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) source_id: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) revocation_comment: ::std::option::Option<::std::string::String>,
    pub(crate) revoked: ::std::option::Option<bool>,
    pub(crate) revoked_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RevisionEntryBuilder {
    /// <p>The ARN for the revision.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the revision.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN for the revision.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>An optional comment about the revision.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional comment about the revision.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>An optional comment about the revision.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// <p>The date and time that the revision was created, in ISO 8601 format.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the revision was created, in ISO 8601 format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the revision was created, in ISO 8601 format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The unique identifier for the data set associated with the data set revision.</p>
    /// This field is required.
    pub fn data_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the data set associated with the data set revision.</p>
    pub fn set_data_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>The unique identifier for the data set associated with the data set revision.</p>
    pub fn get_data_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_id
    }
    /// <p>To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.</p>
    pub fn finalized(mut self, input: bool) -> Self {
        self.finalized = ::std::option::Option::Some(input);
        self
    }
    /// <p>To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.</p>
    pub fn set_finalized(mut self, input: ::std::option::Option<bool>) -> Self {
        self.finalized = input;
        self
    }
    /// <p>To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.</p>
    pub fn get_finalized(&self) -> &::std::option::Option<bool> {
        &self.finalized
    }
    /// <p>The unique identifier for the revision.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the revision.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier for the revision.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.</p>
    pub fn source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.</p>
    pub fn set_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_id = input;
        self
    }
    /// <p>The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.</p>
    pub fn get_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_id
    }
    /// <p>The date and time that the revision was last updated, in ISO 8601 format.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the revision was last updated, in ISO 8601 format.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time that the revision was last updated, in ISO 8601 format.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>A required comment to inform subscribers of the reason their access to the revision was revoked.</p>
    pub fn revocation_comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revocation_comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A required comment to inform subscribers of the reason their access to the revision was revoked.</p>
    pub fn set_revocation_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revocation_comment = input;
        self
    }
    /// <p>A required comment to inform subscribers of the reason their access to the revision was revoked.</p>
    pub fn get_revocation_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.revocation_comment
    }
    /// <p>A status indicating that subscribers' access to the revision was revoked.</p>
    pub fn revoked(mut self, input: bool) -> Self {
        self.revoked = ::std::option::Option::Some(input);
        self
    }
    /// <p>A status indicating that subscribers' access to the revision was revoked.</p>
    pub fn set_revoked(mut self, input: ::std::option::Option<bool>) -> Self {
        self.revoked = input;
        self
    }
    /// <p>A status indicating that subscribers' access to the revision was revoked.</p>
    pub fn get_revoked(&self) -> &::std::option::Option<bool> {
        &self.revoked
    }
    /// <p>The date and time that the revision was revoked, in ISO 8601 format.</p>
    pub fn revoked_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.revoked_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the revision was revoked, in ISO 8601 format.</p>
    pub fn set_revoked_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.revoked_at = input;
        self
    }
    /// <p>The date and time that the revision was revoked, in ISO 8601 format.</p>
    pub fn get_revoked_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.revoked_at
    }
    /// Consumes the builder and constructs a [`RevisionEntry`](crate::types::RevisionEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::RevisionEntryBuilder::arn)
    /// - [`created_at`](crate::types::builders::RevisionEntryBuilder::created_at)
    /// - [`data_set_id`](crate::types::builders::RevisionEntryBuilder::data_set_id)
    /// - [`id`](crate::types::builders::RevisionEntryBuilder::id)
    /// - [`updated_at`](crate::types::builders::RevisionEntryBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::RevisionEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RevisionEntry {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building RevisionEntry",
                )
            })?,
            comment: self.comment,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building RevisionEntry",
                )
            })?,
            data_set_id: self.data_set_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_set_id",
                    "data_set_id was not specified but it is required when building RevisionEntry",
                )
            })?,
            finalized: self.finalized.unwrap_or_default(),
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building RevisionEntry",
                )
            })?,
            source_id: self.source_id,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building RevisionEntry",
                )
            })?,
            revocation_comment: self.revocation_comment,
            revoked: self.revoked.unwrap_or_default(),
            revoked_at: self.revoked_at,
        })
    }
}
