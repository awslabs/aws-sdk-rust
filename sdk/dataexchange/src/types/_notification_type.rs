// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `NotificationType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let notificationtype = unimplemented!();
/// match notificationtype {
///     NotificationType::DataDelay => { /* ... */ },
///     NotificationType::DataUpdate => { /* ... */ },
///     NotificationType::Deprecation => { /* ... */ },
///     NotificationType::SchemaChange => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `notificationtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `NotificationType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `NotificationType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `NotificationType::NewFeature` is defined.
/// Specifically, when `notificationtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `NotificationType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum NotificationType {
    #[allow(missing_docs)] // documentation missing in model
    DataDelay,
    #[allow(missing_docs)] // documentation missing in model
    DataUpdate,
    #[allow(missing_docs)] // documentation missing in model
    Deprecation,
    #[allow(missing_docs)] // documentation missing in model
    SchemaChange,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl ::std::convert::From<&str> for NotificationType {
    fn from(s: &str) -> Self {
        match s {
            "DATA_DELAY" => NotificationType::DataDelay,
            "DATA_UPDATE" => NotificationType::DataUpdate,
            "DEPRECATION" => NotificationType::Deprecation,
            "SCHEMA_CHANGE" => NotificationType::SchemaChange,
            other => NotificationType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for NotificationType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(NotificationType::from(s))
    }
}
impl NotificationType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            NotificationType::DataDelay => "DATA_DELAY",
            NotificationType::DataUpdate => "DATA_UPDATE",
            NotificationType::Deprecation => "DEPRECATION",
            NotificationType::SchemaChange => "SCHEMA_CHANGE",
            NotificationType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["DATA_DELAY", "DATA_UPDATE", "DEPRECATION", "SCHEMA_CHANGE"]
    }
}
impl ::std::convert::AsRef<str> for NotificationType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
