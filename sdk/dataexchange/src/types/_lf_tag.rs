// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that allows an LF-admin to grant permissions on certain conditions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LfTag {
    /// <p>The key name for the LF-tag.</p>
    #[doc(hidden)]
    pub tag_key: std::option::Option<std::string::String>,
    /// <p>A list of LF-tag values.</p>
    #[doc(hidden)]
    pub tag_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LfTag {
    /// <p>The key name for the LF-tag.</p>
    pub fn tag_key(&self) -> std::option::Option<&str> {
        self.tag_key.as_deref()
    }
    /// <p>A list of LF-tag values.</p>
    pub fn tag_values(&self) -> std::option::Option<&[std::string::String]> {
        self.tag_values.as_deref()
    }
}
impl LfTag {
    /// Creates a new builder-style object to manufacture [`LfTag`](crate::types::LfTag).
    pub fn builder() -> crate::types::builders::LfTagBuilder {
        crate::types::builders::LfTagBuilder::default()
    }
}

/// A builder for [`LfTag`](crate::types::LfTag).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LfTagBuilder {
    pub(crate) tag_key: std::option::Option<std::string::String>,
    pub(crate) tag_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LfTagBuilder {
    /// <p>The key name for the LF-tag.</p>
    pub fn tag_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.tag_key = Some(input.into());
        self
    }
    /// <p>The key name for the LF-tag.</p>
    pub fn set_tag_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tag_key = input;
        self
    }
    /// Appends an item to `tag_values`.
    ///
    /// To override the contents of this collection use [`set_tag_values`](Self::set_tag_values).
    ///
    /// <p>A list of LF-tag values.</p>
    pub fn tag_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.tag_values.unwrap_or_default();
        v.push(input.into());
        self.tag_values = Some(v);
        self
    }
    /// <p>A list of LF-tag values.</p>
    pub fn set_tag_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.tag_values = input;
        self
    }
    /// Consumes the builder and constructs a [`LfTag`](crate::types::LfTag).
    pub fn build(self) -> crate::types::LfTag {
        crate::types::LfTag {
            tag_key: self.tag_key,
            tag_values: self.tag_values,
        }
    }
}
