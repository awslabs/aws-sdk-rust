// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>AWS Data Exchange Jobs are asynchronous import or export operations used to create or copy assets. A data set owner can both import and export as they see fit. Someone with an entitlement to a data set can only export. Jobs are deleted 90 days after they are created.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobEntry {
    /// <p>The ARN for the job.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time that the job was created, in ISO 8601 format.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Details of the operation to be performed by the job, such as export destination details or import source details.</p>
    #[doc(hidden)]
    pub details: std::option::Option<crate::types::ResponseDetails>,
    /// <p>Errors for jobs.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::types::JobError>>,
    /// <p>The unique identifier for the job.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The state of the job.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::State>,
    /// <p>The job type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::Type>,
    /// <p>The date and time that the job was last updated, in ISO 8601 format.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl JobEntry {
    /// <p>The ARN for the job.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time that the job was created, in ISO 8601 format.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Details of the operation to be performed by the job, such as export destination details or import source details.</p>
    pub fn details(&self) -> std::option::Option<&crate::types::ResponseDetails> {
        self.details.as_ref()
    }
    /// <p>Errors for jobs.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::types::JobError]> {
        self.errors.as_deref()
    }
    /// <p>The unique identifier for the job.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The state of the job.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::State> {
        self.state.as_ref()
    }
    /// <p>The job type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::Type> {
        self.r#type.as_ref()
    }
    /// <p>The date and time that the job was last updated, in ISO 8601 format.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl JobEntry {
    /// Creates a new builder-style object to manufacture [`JobEntry`](crate::types::JobEntry).
    pub fn builder() -> crate::types::builders::JobEntryBuilder {
        crate::types::builders::JobEntryBuilder::default()
    }
}

/// A builder for [`JobEntry`](crate::types::JobEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobEntryBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) details: std::option::Option<crate::types::ResponseDetails>,
    pub(crate) errors: std::option::Option<std::vec::Vec<crate::types::JobError>>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::State>,
    pub(crate) r#type: std::option::Option<crate::types::Type>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl JobEntryBuilder {
    /// <p>The ARN for the job.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN for the job.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The date and time that the job was created, in ISO 8601 format.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time that the job was created, in ISO 8601 format.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Details of the operation to be performed by the job, such as export destination details or import source details.</p>
    pub fn details(mut self, input: crate::types::ResponseDetails) -> Self {
        self.details = Some(input);
        self
    }
    /// <p>Details of the operation to be performed by the job, such as export destination details or import source details.</p>
    pub fn set_details(
        mut self,
        input: std::option::Option<crate::types::ResponseDetails>,
    ) -> Self {
        self.details = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>Errors for jobs.</p>
    pub fn errors(mut self, input: crate::types::JobError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>Errors for jobs.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::JobError>>,
    ) -> Self {
        self.errors = input;
        self
    }
    /// <p>The unique identifier for the job.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the job.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The state of the job.</p>
    pub fn state(mut self, input: crate::types::State) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the job.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::State>) -> Self {
        self.state = input;
        self
    }
    /// <p>The job type.</p>
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The job type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The date and time that the job was last updated, in ISO 8601 format.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The date and time that the job was last updated, in ISO 8601 format.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// Consumes the builder and constructs a [`JobEntry`](crate::types::JobEntry).
    pub fn build(self) -> crate::types::JobEntry {
        crate::types::JobEntry {
            arn: self.arn,
            created_at: self.created_at,
            details: self.details,
            errors: self.errors,
            id: self.id,
            state: self.state,
            r#type: self.r#type,
            updated_at: self.updated_at,
        }
    }
}
