// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the assets imported from an AWS Lake Formation tag policy request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportAssetsFromLakeFormationTagPolicyRequestDetails {
    /// <p>The identifier for the AWS Glue Data Catalog.</p>
    pub catalog_id: ::std::string::String,
    /// <p>A structure for the database object.</p>
    pub database: ::std::option::Option<crate::types::DatabaseLfTagPolicyAndPermissions>,
    /// <p>A structure for the table object.</p>
    pub table: ::std::option::Option<crate::types::TableLfTagPolicyAndPermissions>,
    /// <p>The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.</p>
    pub role_arn: ::std::string::String,
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub data_set_id: ::std::string::String,
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub revision_id: ::std::string::String,
}
impl ImportAssetsFromLakeFormationTagPolicyRequestDetails {
    /// <p>The identifier for the AWS Glue Data Catalog.</p>
    pub fn catalog_id(&self) -> &str {
        use std::ops::Deref;
        self.catalog_id.deref()
    }
    /// <p>A structure for the database object.</p>
    pub fn database(&self) -> ::std::option::Option<&crate::types::DatabaseLfTagPolicyAndPermissions> {
        self.database.as_ref()
    }
    /// <p>A structure for the table object.</p>
    pub fn table(&self) -> ::std::option::Option<&crate::types::TableLfTagPolicyAndPermissions> {
        self.table.as_ref()
    }
    /// <p>The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub fn data_set_id(&self) -> &str {
        use std::ops::Deref;
        self.data_set_id.deref()
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub fn revision_id(&self) -> &str {
        use std::ops::Deref;
        self.revision_id.deref()
    }
}
impl ImportAssetsFromLakeFormationTagPolicyRequestDetails {
    /// Creates a new builder-style object to manufacture [`ImportAssetsFromLakeFormationTagPolicyRequestDetails`](crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails).
    pub fn builder() -> crate::types::builders::ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder {
        crate::types::builders::ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder::default()
    }
}

/// A builder for [`ImportAssetsFromLakeFormationTagPolicyRequestDetails`](crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder {
    pub(crate) catalog_id: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<crate::types::DatabaseLfTagPolicyAndPermissions>,
    pub(crate) table: ::std::option::Option<crate::types::TableLfTagPolicyAndPermissions>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) revision_id: ::std::option::Option<::std::string::String>,
}
impl ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder {
    /// <p>The identifier for the AWS Glue Data Catalog.</p>
    /// This field is required.
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the AWS Glue Data Catalog.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>The identifier for the AWS Glue Data Catalog.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog_id
    }
    /// <p>A structure for the database object.</p>
    pub fn database(mut self, input: crate::types::DatabaseLfTagPolicyAndPermissions) -> Self {
        self.database = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure for the database object.</p>
    pub fn set_database(mut self, input: ::std::option::Option<crate::types::DatabaseLfTagPolicyAndPermissions>) -> Self {
        self.database = input;
        self
    }
    /// <p>A structure for the database object.</p>
    pub fn get_database(&self) -> &::std::option::Option<crate::types::DatabaseLfTagPolicyAndPermissions> {
        &self.database
    }
    /// <p>A structure for the table object.</p>
    pub fn table(mut self, input: crate::types::TableLfTagPolicyAndPermissions) -> Self {
        self.table = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure for the table object.</p>
    pub fn set_table(mut self, input: ::std::option::Option<crate::types::TableLfTagPolicyAndPermissions>) -> Self {
        self.table = input;
        self
    }
    /// <p>A structure for the table object.</p>
    pub fn get_table(&self) -> &::std::option::Option<crate::types::TableLfTagPolicyAndPermissions> {
        &self.table
    }
    /// <p>The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    /// This field is required.
    pub fn data_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub fn set_data_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub fn get_data_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_id
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    /// This field is required.
    pub fn revision_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.revision_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub fn set_revision_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.revision_id = input;
        self
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub fn get_revision_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.revision_id
    }
    /// Consumes the builder and constructs a [`ImportAssetsFromLakeFormationTagPolicyRequestDetails`](crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`catalog_id`](crate::types::builders::ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder::catalog_id)
    /// - [`role_arn`](crate::types::builders::ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder::role_arn)
    /// - [`data_set_id`](crate::types::builders::ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder::data_set_id)
    /// - [`revision_id`](crate::types::builders::ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder::revision_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails {
            catalog_id: self.catalog_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "catalog_id",
                    "catalog_id was not specified but it is required when building ImportAssetsFromLakeFormationTagPolicyRequestDetails",
                )
            })?,
            database: self.database,
            table: self.table,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building ImportAssetsFromLakeFormationTagPolicyRequestDetails",
                )
            })?,
            data_set_id: self.data_set_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_set_id",
                    "data_set_id was not specified but it is required when building ImportAssetsFromLakeFormationTagPolicyRequestDetails",
                )
            })?,
            revision_id: self.revision_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "revision_id",
                    "revision_id was not specified but it is required when building ImportAssetsFromLakeFormationTagPolicyRequestDetails",
                )
            })?,
        })
    }
}
