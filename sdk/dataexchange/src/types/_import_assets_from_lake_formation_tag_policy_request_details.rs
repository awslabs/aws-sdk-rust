// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the assets imported from an AWS Lake Formation tag policy request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportAssetsFromLakeFormationTagPolicyRequestDetails {
    /// <p>The identifier for the AWS Glue Data Catalog.</p>
    #[doc(hidden)]
    pub catalog_id: std::option::Option<std::string::String>,
    /// <p>A structure for the database object.</p>
    #[doc(hidden)]
    pub database: std::option::Option<crate::types::DatabaseLfTagPolicyAndPermissions>,
    /// <p>A structure for the table object.</p>
    #[doc(hidden)]
    pub table: std::option::Option<crate::types::TableLfTagPolicyAndPermissions>,
    /// <p>The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the data set associated with this import job.</p>
    #[doc(hidden)]
    pub data_set_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the revision associated with this import job.</p>
    #[doc(hidden)]
    pub revision_id: std::option::Option<std::string::String>,
}
impl ImportAssetsFromLakeFormationTagPolicyRequestDetails {
    /// <p>The identifier for the AWS Glue Data Catalog.</p>
    pub fn catalog_id(&self) -> std::option::Option<&str> {
        self.catalog_id.as_deref()
    }
    /// <p>A structure for the database object.</p>
    pub fn database(
        &self,
    ) -> std::option::Option<&crate::types::DatabaseLfTagPolicyAndPermissions> {
        self.database.as_ref()
    }
    /// <p>A structure for the table object.</p>
    pub fn table(&self) -> std::option::Option<&crate::types::TableLfTagPolicyAndPermissions> {
        self.table.as_ref()
    }
    /// <p>The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub fn data_set_id(&self) -> std::option::Option<&str> {
        self.data_set_id.as_deref()
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub fn revision_id(&self) -> std::option::Option<&str> {
        self.revision_id.as_deref()
    }
}
impl ImportAssetsFromLakeFormationTagPolicyRequestDetails {
    /// Creates a new builder-style object to manufacture [`ImportAssetsFromLakeFormationTagPolicyRequestDetails`](crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails).
    pub fn builder(
    ) -> crate::types::builders::ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder {
        crate::types::builders::ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder::default(
        )
    }
}

/// A builder for [`ImportAssetsFromLakeFormationTagPolicyRequestDetails`](crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder {
    pub(crate) catalog_id: std::option::Option<std::string::String>,
    pub(crate) database: std::option::Option<crate::types::DatabaseLfTagPolicyAndPermissions>,
    pub(crate) table: std::option::Option<crate::types::TableLfTagPolicyAndPermissions>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) data_set_id: std::option::Option<std::string::String>,
    pub(crate) revision_id: std::option::Option<std::string::String>,
}
impl ImportAssetsFromLakeFormationTagPolicyRequestDetailsBuilder {
    /// <p>The identifier for the AWS Glue Data Catalog.</p>
    pub fn catalog_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.catalog_id = Some(input.into());
        self
    }
    /// <p>The identifier for the AWS Glue Data Catalog.</p>
    pub fn set_catalog_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.catalog_id = input;
        self
    }
    /// <p>A structure for the database object.</p>
    pub fn database(mut self, input: crate::types::DatabaseLfTagPolicyAndPermissions) -> Self {
        self.database = Some(input);
        self
    }
    /// <p>A structure for the database object.</p>
    pub fn set_database(
        mut self,
        input: std::option::Option<crate::types::DatabaseLfTagPolicyAndPermissions>,
    ) -> Self {
        self.database = input;
        self
    }
    /// <p>A structure for the table object.</p>
    pub fn table(mut self, input: crate::types::TableLfTagPolicyAndPermissions) -> Self {
        self.table = Some(input);
        self
    }
    /// <p>A structure for the table object.</p>
    pub fn set_table(
        mut self,
        input: std::option::Option<crate::types::TableLfTagPolicyAndPermissions>,
    ) -> Self {
        self.table = input;
        self
    }
    /// <p>The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub fn data_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_set_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the data set associated with this import job.</p>
    pub fn set_data_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub fn revision_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.revision_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the revision associated with this import job.</p>
    pub fn set_revision_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.revision_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ImportAssetsFromLakeFormationTagPolicyRequestDetails`](crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails).
    pub fn build(self) -> crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails {
        crate::types::ImportAssetsFromLakeFormationTagPolicyRequestDetails {
            catalog_id: self.catalog_id,
            database: self.database,
            table: self.table,
            role_arn: self.role_arn,
            data_set_id: self.data_set_id,
            revision_id: self.revision_id,
        }
    }
}
