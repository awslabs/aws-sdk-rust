// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `LimitName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let limitname = unimplemented!();
/// match limitname {
///     LimitName::AwsLakeFormationDataPermissionAssetsPerRevision => { /* ... */ },
///     LimitName::AmazonApiGatewayApiAssetsPerRevision => { /* ... */ },
///     LimitName::AmazonRedshiftDatashareAssetsPerImportJobFromRedshift => { /* ... */ },
///     LimitName::AmazonRedshiftDatashareAssetsPerRevision => { /* ... */ },
///     LimitName::AmazonS3DataAccessAssetsPerRevision => { /* ... */ },
///     LimitName::AssetPerExportJobFromAmazonS3 => { /* ... */ },
///     LimitName::AssetSizeInGb => { /* ... */ },
///     LimitName::AssetsPerImportJobFromAmazonS3 => { /* ... */ },
///     LimitName::AssetsPerRevision => { /* ... */ },
///     LimitName::AutoExportEventActionsPerDataSet => { /* ... */ },
///     LimitName::ConcurrentInProgressJobsToCreateAmazonS3DataAccessAssetsFromS3Buckets => { /* ... */ },
///     LimitName::ConcurrentInProgressJobsToExportAssetsToAmazonS3 => { /* ... */ },
///     LimitName::ConcurrentInProgressJobsToExportAssetsToASignedUrl => { /* ... */ },
///     LimitName::ConcurrentInProgressJobsToExportRevisionsToAmazonS3 => { /* ... */ },
///     LimitName::ConcurrentInProgressJobsToImportAssetsFromAmazonRedshiftDatashares => { /* ... */ },
///     LimitName::ConcurrentInProgressJobsToImportAssetsFromAmazonS3 => { /* ... */ },
///     LimitName::ConcurrentInProgressJobsToImportAssetsFromASignedUrl => { /* ... */ },
///     LimitName::ConcurrentInProgressJobsToImportAssetsFromAnApiGatewayApi => { /* ... */ },
///     LimitName::ConcurrentInProgressJobsToImportAssetsFromAnAwsLakeFormationTagPolicy => { /* ... */ },
///     LimitName::DataSetsPerAccount => { /* ... */ },
///     LimitName::DataSetsPerProduct => { /* ... */ },
///     LimitName::EventActionsPerAccount => { /* ... */ },
///     LimitName::ProductsPerAccount => { /* ... */ },
///     LimitName::RevisionsPerAwsLakeFormationDataPermissionDataSet => { /* ... */ },
///     LimitName::RevisionsPerAmazonApiGatewayApiDataSet => { /* ... */ },
///     LimitName::RevisionsPerAmazonRedshiftDatashareDataSet => { /* ... */ },
///     LimitName::RevisionsPerAmazonS3DataAccessDataSet => { /* ... */ },
///     LimitName::RevisionsPerDataSet => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `limitname` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `LimitName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `LimitName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `LimitName::NewFeature` is defined.
/// Specifically, when `limitname` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `LimitName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum LimitName {
    #[allow(missing_docs)] // documentation missing in model
    AwsLakeFormationDataPermissionAssetsPerRevision,
    #[allow(missing_docs)] // documentation missing in model
    AmazonApiGatewayApiAssetsPerRevision,
    #[allow(missing_docs)] // documentation missing in model
    AmazonRedshiftDatashareAssetsPerImportJobFromRedshift,
    #[allow(missing_docs)] // documentation missing in model
    AmazonRedshiftDatashareAssetsPerRevision,
    #[allow(missing_docs)] // documentation missing in model
    AmazonS3DataAccessAssetsPerRevision,
    #[allow(missing_docs)] // documentation missing in model
    AssetPerExportJobFromAmazonS3,
    #[allow(missing_docs)] // documentation missing in model
    AssetSizeInGb,
    #[allow(missing_docs)] // documentation missing in model
    AssetsPerImportJobFromAmazonS3,
    #[allow(missing_docs)] // documentation missing in model
    AssetsPerRevision,
    #[allow(missing_docs)] // documentation missing in model
    AutoExportEventActionsPerDataSet,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentInProgressJobsToCreateAmazonS3DataAccessAssetsFromS3Buckets,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentInProgressJobsToExportAssetsToAmazonS3,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentInProgressJobsToExportAssetsToASignedUrl,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentInProgressJobsToExportRevisionsToAmazonS3,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentInProgressJobsToImportAssetsFromAmazonRedshiftDatashares,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentInProgressJobsToImportAssetsFromAmazonS3,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentInProgressJobsToImportAssetsFromASignedUrl,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentInProgressJobsToImportAssetsFromAnApiGatewayApi,
    #[allow(missing_docs)] // documentation missing in model
    ConcurrentInProgressJobsToImportAssetsFromAnAwsLakeFormationTagPolicy,
    #[allow(missing_docs)] // documentation missing in model
    DataSetsPerAccount,
    #[allow(missing_docs)] // documentation missing in model
    DataSetsPerProduct,
    #[allow(missing_docs)] // documentation missing in model
    EventActionsPerAccount,
    #[allow(missing_docs)] // documentation missing in model
    ProductsPerAccount,
    #[allow(missing_docs)] // documentation missing in model
    RevisionsPerAwsLakeFormationDataPermissionDataSet,
    #[allow(missing_docs)] // documentation missing in model
    RevisionsPerAmazonApiGatewayApiDataSet,
    #[allow(missing_docs)] // documentation missing in model
    RevisionsPerAmazonRedshiftDatashareDataSet,
    #[allow(missing_docs)] // documentation missing in model
    RevisionsPerAmazonS3DataAccessDataSet,
    #[allow(missing_docs)] // documentation missing in model
    RevisionsPerDataSet,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for LimitName {
    fn from(s: &str) -> Self {
        match s {
                        "AWS Lake Formation data permission assets per revision" => LimitName::AwsLakeFormationDataPermissionAssetsPerRevision,
"Amazon API Gateway API assets per revision" => LimitName::AmazonApiGatewayApiAssetsPerRevision,
"Amazon Redshift datashare assets per import job from Redshift" => LimitName::AmazonRedshiftDatashareAssetsPerImportJobFromRedshift,
"Amazon Redshift datashare assets per revision" => LimitName::AmazonRedshiftDatashareAssetsPerRevision,
"Amazon S3 data access assets per revision" => LimitName::AmazonS3DataAccessAssetsPerRevision,
"Asset per export job from Amazon S3" => LimitName::AssetPerExportJobFromAmazonS3,
"Asset size in GB" => LimitName::AssetSizeInGb,
"Assets per import job from Amazon S3" => LimitName::AssetsPerImportJobFromAmazonS3,
"Assets per revision" => LimitName::AssetsPerRevision,
"Auto export event actions per data set" => LimitName::AutoExportEventActionsPerDataSet,
"Concurrent in progress jobs to create Amazon S3 data access assets from S3 buckets" => LimitName::ConcurrentInProgressJobsToCreateAmazonS3DataAccessAssetsFromS3Buckets,
"Concurrent in progress jobs to export assets to Amazon S3" => LimitName::ConcurrentInProgressJobsToExportAssetsToAmazonS3,
"Concurrent in progress jobs to export assets to a signed URL" => LimitName::ConcurrentInProgressJobsToExportAssetsToASignedUrl,
"Concurrent in progress jobs to export revisions to Amazon S3" => LimitName::ConcurrentInProgressJobsToExportRevisionsToAmazonS3,
"Concurrent in progress jobs to import assets from Amazon Redshift datashares" => LimitName::ConcurrentInProgressJobsToImportAssetsFromAmazonRedshiftDatashares,
"Concurrent in progress jobs to import assets from Amazon S3" => LimitName::ConcurrentInProgressJobsToImportAssetsFromAmazonS3,
"Concurrent in progress jobs to import assets from a signed URL" => LimitName::ConcurrentInProgressJobsToImportAssetsFromASignedUrl,
"Concurrent in progress jobs to import assets from an API Gateway API" => LimitName::ConcurrentInProgressJobsToImportAssetsFromAnApiGatewayApi,
"Concurrent in progress jobs to import assets from an AWS Lake Formation tag policy" => LimitName::ConcurrentInProgressJobsToImportAssetsFromAnAwsLakeFormationTagPolicy,
"Data sets per account" => LimitName::DataSetsPerAccount,
"Data sets per product" => LimitName::DataSetsPerProduct,
"Event actions per account" => LimitName::EventActionsPerAccount,
"Products per account" => LimitName::ProductsPerAccount,
"Revisions per AWS Lake Formation data permission data set" => LimitName::RevisionsPerAwsLakeFormationDataPermissionDataSet,
"Revisions per Amazon API Gateway API data set" => LimitName::RevisionsPerAmazonApiGatewayApiDataSet,
"Revisions per Amazon Redshift datashare data set" => LimitName::RevisionsPerAmazonRedshiftDatashareDataSet,
"Revisions per Amazon S3 data access data set" => LimitName::RevisionsPerAmazonS3DataAccessDataSet,
"Revisions per data set" => LimitName::RevisionsPerDataSet,
other => LimitName::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
                    }
    }
}
impl std::str::FromStr for LimitName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(LimitName::from(s))
    }
}
impl LimitName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            LimitName::AwsLakeFormationDataPermissionAssetsPerRevision => {
                "AWS Lake Formation data permission assets per revision"
            }
            LimitName::AmazonApiGatewayApiAssetsPerRevision => {
                "Amazon API Gateway API assets per revision"
            }
            LimitName::AmazonRedshiftDatashareAssetsPerImportJobFromRedshift => {
                "Amazon Redshift datashare assets per import job from Redshift"
            }
            LimitName::AmazonRedshiftDatashareAssetsPerRevision => {
                "Amazon Redshift datashare assets per revision"
            }
            LimitName::AmazonS3DataAccessAssetsPerRevision => {
                "Amazon S3 data access assets per revision"
            }
            LimitName::AssetPerExportJobFromAmazonS3 => "Asset per export job from Amazon S3",
            LimitName::AssetSizeInGb => "Asset size in GB",
            LimitName::AssetsPerImportJobFromAmazonS3 => "Assets per import job from Amazon S3",
            LimitName::AssetsPerRevision => "Assets per revision",
            LimitName::AutoExportEventActionsPerDataSet => "Auto export event actions per data set",
            LimitName::ConcurrentInProgressJobsToCreateAmazonS3DataAccessAssetsFromS3Buckets => {
                "Concurrent in progress jobs to create Amazon S3 data access assets from S3 buckets"
            }
            LimitName::ConcurrentInProgressJobsToExportAssetsToAmazonS3 => {
                "Concurrent in progress jobs to export assets to Amazon S3"
            }
            LimitName::ConcurrentInProgressJobsToExportAssetsToASignedUrl => {
                "Concurrent in progress jobs to export assets to a signed URL"
            }
            LimitName::ConcurrentInProgressJobsToExportRevisionsToAmazonS3 => {
                "Concurrent in progress jobs to export revisions to Amazon S3"
            }
            LimitName::ConcurrentInProgressJobsToImportAssetsFromAmazonRedshiftDatashares => {
                "Concurrent in progress jobs to import assets from Amazon Redshift datashares"
            }
            LimitName::ConcurrentInProgressJobsToImportAssetsFromAmazonS3 => {
                "Concurrent in progress jobs to import assets from Amazon S3"
            }
            LimitName::ConcurrentInProgressJobsToImportAssetsFromASignedUrl => {
                "Concurrent in progress jobs to import assets from a signed URL"
            }
            LimitName::ConcurrentInProgressJobsToImportAssetsFromAnApiGatewayApi => {
                "Concurrent in progress jobs to import assets from an API Gateway API"
            }
            LimitName::ConcurrentInProgressJobsToImportAssetsFromAnAwsLakeFormationTagPolicy => {
                "Concurrent in progress jobs to import assets from an AWS Lake Formation tag policy"
            }
            LimitName::DataSetsPerAccount => "Data sets per account",
            LimitName::DataSetsPerProduct => "Data sets per product",
            LimitName::EventActionsPerAccount => "Event actions per account",
            LimitName::ProductsPerAccount => "Products per account",
            LimitName::RevisionsPerAwsLakeFormationDataPermissionDataSet => {
                "Revisions per AWS Lake Formation data permission data set"
            }
            LimitName::RevisionsPerAmazonApiGatewayApiDataSet => {
                "Revisions per Amazon API Gateway API data set"
            }
            LimitName::RevisionsPerAmazonRedshiftDatashareDataSet => {
                "Revisions per Amazon Redshift datashare data set"
            }
            LimitName::RevisionsPerAmazonS3DataAccessDataSet => {
                "Revisions per Amazon S3 data access data set"
            }
            LimitName::RevisionsPerDataSet => "Revisions per data set",
            LimitName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AWS Lake Formation data permission assets per revision",
            "Amazon API Gateway API assets per revision",
            "Amazon Redshift datashare assets per import job from Redshift",
            "Amazon Redshift datashare assets per revision",
            "Amazon S3 data access assets per revision",
            "Asset per export job from Amazon S3",
            "Asset size in GB",
            "Assets per import job from Amazon S3",
            "Assets per revision",
            "Auto export event actions per data set",
            "Concurrent in progress jobs to create Amazon S3 data access assets from S3 buckets",
            "Concurrent in progress jobs to export assets to Amazon S3",
            "Concurrent in progress jobs to export assets to a signed URL",
            "Concurrent in progress jobs to export revisions to Amazon S3",
            "Concurrent in progress jobs to import assets from Amazon Redshift datashares",
            "Concurrent in progress jobs to import assets from Amazon S3",
            "Concurrent in progress jobs to import assets from a signed URL",
            "Concurrent in progress jobs to import assets from an API Gateway API",
            "Concurrent in progress jobs to import assets from an AWS Lake Formation tag policy",
            "Data sets per account",
            "Data sets per product",
            "Event actions per account",
            "Products per account",
            "Revisions per AWS Lake Formation data permission data set",
            "Revisions per Amazon API Gateway API data set",
            "Revisions per Amazon Redshift datashare data set",
            "Revisions per Amazon S3 data access data set",
            "Revisions per data set",
        ]
    }
}
impl AsRef<str> for LimitName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
