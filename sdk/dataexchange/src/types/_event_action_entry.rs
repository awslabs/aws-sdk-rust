// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An event action is an object that defines the relationship between a specific event and an automated action that will be taken on behalf of the customer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventActionEntry {
    /// <p>What occurs after a certain event.</p>
    pub action: ::std::option::Option<crate::types::Action>,
    /// <p>The Amazon Resource Name (ARN) for the event action.</p>
    pub arn: ::std::string::String,
    /// <p>The date and time that the event action was created, in ISO 8601 format.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>What occurs to start an action.</p>
    pub event: ::std::option::Option<crate::types::Event>,
    /// <p>The unique identifier for the event action.</p>
    pub id: ::std::string::String,
    /// <p>The date and time that the event action was last updated, in ISO 8601 format.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
}
impl EventActionEntry {
    /// <p>What occurs after a certain event.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) for the event action.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The date and time that the event action was created, in ISO 8601 format.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>What occurs to start an action.</p>
    pub fn event(&self) -> ::std::option::Option<&crate::types::Event> {
        self.event.as_ref()
    }
    /// <p>The unique identifier for the event action.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The date and time that the event action was last updated, in ISO 8601 format.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
}
impl EventActionEntry {
    /// Creates a new builder-style object to manufacture [`EventActionEntry`](crate::types::EventActionEntry).
    pub fn builder() -> crate::types::builders::EventActionEntryBuilder {
        crate::types::builders::EventActionEntryBuilder::default()
    }
}

/// A builder for [`EventActionEntry`](crate::types::EventActionEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventActionEntryBuilder {
    pub(crate) action: ::std::option::Option<crate::types::Action>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) event: ::std::option::Option<crate::types::Event>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl EventActionEntryBuilder {
    /// <p>What occurs after a certain event.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>What occurs after a certain event.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>What occurs after a certain event.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        &self.action
    }
    /// <p>The Amazon Resource Name (ARN) for the event action.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the event action.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the event action.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The date and time that the event action was created, in ISO 8601 format.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the event action was created, in ISO 8601 format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the event action was created, in ISO 8601 format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>What occurs to start an action.</p>
    /// This field is required.
    pub fn event(mut self, input: crate::types::Event) -> Self {
        self.event = ::std::option::Option::Some(input);
        self
    }
    /// <p>What occurs to start an action.</p>
    pub fn set_event(mut self, input: ::std::option::Option<crate::types::Event>) -> Self {
        self.event = input;
        self
    }
    /// <p>What occurs to start an action.</p>
    pub fn get_event(&self) -> &::std::option::Option<crate::types::Event> {
        &self.event
    }
    /// <p>The unique identifier for the event action.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the event action.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier for the event action.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The date and time that the event action was last updated, in ISO 8601 format.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the event action was last updated, in ISO 8601 format.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time that the event action was last updated, in ISO 8601 format.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`EventActionEntry`](crate::types::EventActionEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::EventActionEntryBuilder::arn)
    /// - [`created_at`](crate::types::builders::EventActionEntryBuilder::created_at)
    /// - [`id`](crate::types::builders::EventActionEntryBuilder::id)
    /// - [`updated_at`](crate::types::builders::EventActionEntryBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::EventActionEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EventActionEntry {
            action: self.action,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building EventActionEntry",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building EventActionEntry",
                )
            })?,
            event: self.event,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building EventActionEntry",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building EventActionEntry",
                )
            })?,
        })
    }
}
