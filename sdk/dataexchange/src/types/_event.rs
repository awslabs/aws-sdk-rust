// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>What occurs to start an action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Event {
    /// <p>What occurs to start the revision publish action.</p>
    #[doc(hidden)]
    pub revision_published: std::option::Option<crate::types::RevisionPublished>,
}
impl Event {
    /// <p>What occurs to start the revision publish action.</p>
    pub fn revision_published(&self) -> std::option::Option<&crate::types::RevisionPublished> {
        self.revision_published.as_ref()
    }
}
impl Event {
    /// Creates a new builder-style object to manufacture [`Event`](crate::types::Event).
    pub fn builder() -> crate::types::builders::EventBuilder {
        crate::types::builders::EventBuilder::default()
    }
}

/// A builder for [`Event`](crate::types::Event).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventBuilder {
    pub(crate) revision_published: std::option::Option<crate::types::RevisionPublished>,
}
impl EventBuilder {
    /// <p>What occurs to start the revision publish action.</p>
    pub fn revision_published(mut self, input: crate::types::RevisionPublished) -> Self {
        self.revision_published = Some(input);
        self
    }
    /// <p>What occurs to start the revision publish action.</p>
    pub fn set_revision_published(
        mut self,
        input: std::option::Option<crate::types::RevisionPublished>,
    ) -> Self {
        self.revision_published = input;
        self
    }
    /// Consumes the builder and constructs a [`Event`](crate::types::Event).
    pub fn build(self) -> crate::types::Event {
        crate::types::Event {
            revision_published: self.revision_published,
        }
    }
}
