// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 object that is the asset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3SnapshotAsset {
    /// <p>The size of the Amazon S3 object that is the object.</p>
    pub size: f64,
}
impl S3SnapshotAsset {
    /// <p>The size of the Amazon S3 object that is the object.</p>
    pub fn size(&self) -> f64 {
        self.size
    }
}
impl S3SnapshotAsset {
    /// Creates a new builder-style object to manufacture [`S3SnapshotAsset`](crate::types::S3SnapshotAsset).
    pub fn builder() -> crate::types::builders::S3SnapshotAssetBuilder {
        crate::types::builders::S3SnapshotAssetBuilder::default()
    }
}

/// A builder for [`S3SnapshotAsset`](crate::types::S3SnapshotAsset).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3SnapshotAssetBuilder {
    pub(crate) size: ::std::option::Option<f64>,
}
impl S3SnapshotAssetBuilder {
    /// <p>The size of the Amazon S3 object that is the object.</p>
    /// This field is required.
    pub fn size(mut self, input: f64) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the Amazon S3 object that is the object.</p>
    pub fn set_size(mut self, input: ::std::option::Option<f64>) -> Self {
        self.size = input;
        self
    }
    /// <p>The size of the Amazon S3 object that is the object.</p>
    pub fn get_size(&self) -> &::std::option::Option<f64> {
        &self.size
    }
    /// Consumes the builder and constructs a [`S3SnapshotAsset`](crate::types::S3SnapshotAsset).
    pub fn build(self) -> crate::types::S3SnapshotAsset {
        crate::types::S3SnapshotAsset {
            size: self.size.unwrap_or_default(),
        }
    }
}
