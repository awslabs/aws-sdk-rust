// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Extra details specific to this notification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotificationDetails {
    /// <p>Extra details specific to a data update type notification.</p>
    pub data_update: ::std::option::Option<crate::types::DataUpdateRequestDetails>,
    /// <p>Extra details specific to a deprecation type notification.</p>
    pub deprecation: ::std::option::Option<crate::types::DeprecationRequestDetails>,
    /// <p>Extra details specific to a schema change type notification.</p>
    pub schema_change: ::std::option::Option<crate::types::SchemaChangeRequestDetails>,
}
impl NotificationDetails {
    /// <p>Extra details specific to a data update type notification.</p>
    pub fn data_update(&self) -> ::std::option::Option<&crate::types::DataUpdateRequestDetails> {
        self.data_update.as_ref()
    }
    /// <p>Extra details specific to a deprecation type notification.</p>
    pub fn deprecation(&self) -> ::std::option::Option<&crate::types::DeprecationRequestDetails> {
        self.deprecation.as_ref()
    }
    /// <p>Extra details specific to a schema change type notification.</p>
    pub fn schema_change(&self) -> ::std::option::Option<&crate::types::SchemaChangeRequestDetails> {
        self.schema_change.as_ref()
    }
}
impl NotificationDetails {
    /// Creates a new builder-style object to manufacture [`NotificationDetails`](crate::types::NotificationDetails).
    pub fn builder() -> crate::types::builders::NotificationDetailsBuilder {
        crate::types::builders::NotificationDetailsBuilder::default()
    }
}

/// A builder for [`NotificationDetails`](crate::types::NotificationDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NotificationDetailsBuilder {
    pub(crate) data_update: ::std::option::Option<crate::types::DataUpdateRequestDetails>,
    pub(crate) deprecation: ::std::option::Option<crate::types::DeprecationRequestDetails>,
    pub(crate) schema_change: ::std::option::Option<crate::types::SchemaChangeRequestDetails>,
}
impl NotificationDetailsBuilder {
    /// <p>Extra details specific to a data update type notification.</p>
    pub fn data_update(mut self, input: crate::types::DataUpdateRequestDetails) -> Self {
        self.data_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Extra details specific to a data update type notification.</p>
    pub fn set_data_update(mut self, input: ::std::option::Option<crate::types::DataUpdateRequestDetails>) -> Self {
        self.data_update = input;
        self
    }
    /// <p>Extra details specific to a data update type notification.</p>
    pub fn get_data_update(&self) -> &::std::option::Option<crate::types::DataUpdateRequestDetails> {
        &self.data_update
    }
    /// <p>Extra details specific to a deprecation type notification.</p>
    pub fn deprecation(mut self, input: crate::types::DeprecationRequestDetails) -> Self {
        self.deprecation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Extra details specific to a deprecation type notification.</p>
    pub fn set_deprecation(mut self, input: ::std::option::Option<crate::types::DeprecationRequestDetails>) -> Self {
        self.deprecation = input;
        self
    }
    /// <p>Extra details specific to a deprecation type notification.</p>
    pub fn get_deprecation(&self) -> &::std::option::Option<crate::types::DeprecationRequestDetails> {
        &self.deprecation
    }
    /// <p>Extra details specific to a schema change type notification.</p>
    pub fn schema_change(mut self, input: crate::types::SchemaChangeRequestDetails) -> Self {
        self.schema_change = ::std::option::Option::Some(input);
        self
    }
    /// <p>Extra details specific to a schema change type notification.</p>
    pub fn set_schema_change(mut self, input: ::std::option::Option<crate::types::SchemaChangeRequestDetails>) -> Self {
        self.schema_change = input;
        self
    }
    /// <p>Extra details specific to a schema change type notification.</p>
    pub fn get_schema_change(&self) -> &::std::option::Option<crate::types::SchemaChangeRequestDetails> {
        &self.schema_change
    }
    /// Consumes the builder and constructs a [`NotificationDetails`](crate::types::NotificationDetails).
    pub fn build(self) -> crate::types::NotificationDetails {
        crate::types::NotificationDetails {
            data_update: self.data_update,
            deprecation: self.deprecation,
            schema_change: self.schema_change,
        }
    }
}
