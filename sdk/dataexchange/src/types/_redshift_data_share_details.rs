// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Extra details specific to the affected scope in this Redshift data set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedshiftDataShareDetails {
    /// <p>The ARN of the underlying Redshift data share that is being affected by this notification.</p>
    pub arn: ::std::string::String,
    /// <p>The database name in the Redshift data share that is being affected by this notification.</p>
    pub database: ::std::string::String,
    /// <p>A function name in the Redshift database that is being affected by this notification.</p>
    pub function: ::std::option::Option<::std::string::String>,
    /// <p>A table name in the Redshift database that is being affected by this notification.</p>
    pub table: ::std::option::Option<::std::string::String>,
    /// <p>A schema name in the Redshift database that is being affected by this notification.</p>
    pub schema: ::std::option::Option<::std::string::String>,
    /// <p>A view name in the Redshift database that is being affected by this notification.</p>
    pub view: ::std::option::Option<::std::string::String>,
}
impl RedshiftDataShareDetails {
    /// <p>The ARN of the underlying Redshift data share that is being affected by this notification.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The database name in the Redshift data share that is being affected by this notification.</p>
    pub fn database(&self) -> &str {
        use std::ops::Deref;
        self.database.deref()
    }
    /// <p>A function name in the Redshift database that is being affected by this notification.</p>
    pub fn function(&self) -> ::std::option::Option<&str> {
        self.function.as_deref()
    }
    /// <p>A table name in the Redshift database that is being affected by this notification.</p>
    pub fn table(&self) -> ::std::option::Option<&str> {
        self.table.as_deref()
    }
    /// <p>A schema name in the Redshift database that is being affected by this notification.</p>
    pub fn schema(&self) -> ::std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// <p>A view name in the Redshift database that is being affected by this notification.</p>
    pub fn view(&self) -> ::std::option::Option<&str> {
        self.view.as_deref()
    }
}
impl RedshiftDataShareDetails {
    /// Creates a new builder-style object to manufacture [`RedshiftDataShareDetails`](crate::types::RedshiftDataShareDetails).
    pub fn builder() -> crate::types::builders::RedshiftDataShareDetailsBuilder {
        crate::types::builders::RedshiftDataShareDetailsBuilder::default()
    }
}

/// A builder for [`RedshiftDataShareDetails`](crate::types::RedshiftDataShareDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RedshiftDataShareDetailsBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) function: ::std::option::Option<::std::string::String>,
    pub(crate) table: ::std::option::Option<::std::string::String>,
    pub(crate) schema: ::std::option::Option<::std::string::String>,
    pub(crate) view: ::std::option::Option<::std::string::String>,
}
impl RedshiftDataShareDetailsBuilder {
    /// <p>The ARN of the underlying Redshift data share that is being affected by this notification.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the underlying Redshift data share that is being affected by this notification.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the underlying Redshift data share that is being affected by this notification.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The database name in the Redshift data share that is being affected by this notification.</p>
    /// This field is required.
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database name in the Redshift data share that is being affected by this notification.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The database name in the Redshift data share that is being affected by this notification.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>A function name in the Redshift database that is being affected by this notification.</p>
    pub fn function(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A function name in the Redshift database that is being affected by this notification.</p>
    pub fn set_function(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function = input;
        self
    }
    /// <p>A function name in the Redshift database that is being affected by this notification.</p>
    pub fn get_function(&self) -> &::std::option::Option<::std::string::String> {
        &self.function
    }
    /// <p>A table name in the Redshift database that is being affected by this notification.</p>
    pub fn table(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A table name in the Redshift database that is being affected by this notification.</p>
    pub fn set_table(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>A table name in the Redshift database that is being affected by this notification.</p>
    pub fn get_table(&self) -> &::std::option::Option<::std::string::String> {
        &self.table
    }
    /// <p>A schema name in the Redshift database that is being affected by this notification.</p>
    pub fn schema(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A schema name in the Redshift database that is being affected by this notification.</p>
    pub fn set_schema(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// <p>A schema name in the Redshift database that is being affected by this notification.</p>
    pub fn get_schema(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema
    }
    /// <p>A view name in the Redshift database that is being affected by this notification.</p>
    pub fn view(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.view = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A view name in the Redshift database that is being affected by this notification.</p>
    pub fn set_view(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.view = input;
        self
    }
    /// <p>A view name in the Redshift database that is being affected by this notification.</p>
    pub fn get_view(&self) -> &::std::option::Option<::std::string::String> {
        &self.view
    }
    /// Consumes the builder and constructs a [`RedshiftDataShareDetails`](crate::types::RedshiftDataShareDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::RedshiftDataShareDetailsBuilder::arn)
    /// - [`database`](crate::types::builders::RedshiftDataShareDetailsBuilder::database)
    pub fn build(self) -> ::std::result::Result<crate::types::RedshiftDataShareDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RedshiftDataShareDetails {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building RedshiftDataShareDetails",
                )
            })?,
            database: self.database.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database",
                    "database was not specified but it is required when building RedshiftDataShareDetails",
                )
            })?,
            function: self.function,
            table: self.table,
            schema: self.schema,
            view: self.view,
        })
    }
}
