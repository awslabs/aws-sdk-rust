// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_data_set_revisions_output_next_token(
    input: &crate::output::ListDataSetRevisionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_data_sets_output_next_token(
    input: &crate::output::ListDataSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_event_actions_output_next_token(
    input: &crate::output::ListEventActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_jobs_output_next_token(
    input: &crate::output::ListJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_revision_assets_output_next_token(
    input: &crate::output::ListRevisionAssetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_data_set_revisions_output_revisions(
    input: crate::output::ListDataSetRevisionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RevisionEntry>> {
    let input = match input.revisions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_data_sets_output_data_sets(
    input: crate::output::ListDataSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DataSetEntry>> {
    let input = match input.data_sets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_event_actions_output_event_actions(
    input: crate::output::ListEventActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EventActionEntry>> {
    let input = match input.event_actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_jobs_output_jobs(
    input: crate::output::ListJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobEntry>> {
    let input = match input.jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_revision_assets_output_assets(
    input: crate::output::ListRevisionAssetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AssetEntry>> {
    let input = match input.assets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
