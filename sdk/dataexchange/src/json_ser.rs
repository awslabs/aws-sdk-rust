// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_data_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSetInput,
) {
    if let Some(var_1) = &input.asset_type {
        object.key("AssetType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2);
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3);
    }
    if let Some(var_4) = &input.tags {
        let mut object_5 = object.key("Tags").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6).string(value_7);
            }
        }
        object_5.finish();
    }
}

pub fn serialize_structure_create_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) {
    if let Some(var_8) = &input.details {
        let mut object_9 = object.key("Details").start_object();
        crate::json_ser::serialize_structure_request_details(&mut object_9, var_8);
        object_9.finish();
    }
    if let Some(var_10) = &input.r#type {
        object.key("Type").string(var_10.as_str());
    }
}

pub fn serialize_structure_create_revision_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRevisionInput,
) {
    if let Some(var_11) = &input.comment {
        object.key("Comment").string(var_11);
    }
    if let Some(var_12) = &input.tags {
        let mut object_13 = object.key("Tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14).string(value_15);
            }
        }
        object_13.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_16) = &input.tags {
        let mut object_17 = object.key("tags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18).string(value_19);
            }
        }
        object_17.finish();
    }
}

pub fn serialize_structure_update_asset_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssetInput,
) {
    if let Some(var_20) = &input.name {
        object.key("Name").string(var_20);
    }
}

pub fn serialize_structure_update_data_set_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetInput,
) {
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21);
    }
    if let Some(var_22) = &input.name {
        object.key("Name").string(var_22);
    }
}

pub fn serialize_structure_update_revision_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRevisionInput,
) {
    if let Some(var_23) = &input.comment {
        object.key("Comment").string(var_23);
    }
    if input.finalized {
        object.key("Finalized").boolean(input.finalized);
    }
}

pub fn serialize_structure_request_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RequestDetails,
) {
    if let Some(var_24) = &input.export_asset_to_signed_url {
        let mut object_25 = object.key("ExportAssetToSignedUrl").start_object();
        crate::json_ser::serialize_structure_export_asset_to_signed_url_request_details(
            &mut object_25,
            var_24,
        );
        object_25.finish();
    }
    if let Some(var_26) = &input.export_assets_to_s3 {
        let mut object_27 = object.key("ExportAssetsToS3").start_object();
        crate::json_ser::serialize_structure_export_assets_to_s3_request_details(
            &mut object_27,
            var_26,
        );
        object_27.finish();
    }
    if let Some(var_28) = &input.export_revisions_to_s3 {
        let mut object_29 = object.key("ExportRevisionsToS3").start_object();
        crate::json_ser::serialize_structure_export_revisions_to_s3_request_details(
            &mut object_29,
            var_28,
        );
        object_29.finish();
    }
    if let Some(var_30) = &input.import_asset_from_signed_url {
        let mut object_31 = object.key("ImportAssetFromSignedUrl").start_object();
        crate::json_ser::serialize_structure_import_asset_from_signed_url_request_details(
            &mut object_31,
            var_30,
        );
        object_31.finish();
    }
    if let Some(var_32) = &input.import_assets_from_s3 {
        let mut object_33 = object.key("ImportAssetsFromS3").start_object();
        crate::json_ser::serialize_structure_import_assets_from_s3_request_details(
            &mut object_33,
            var_32,
        );
        object_33.finish();
    }
}

pub fn serialize_structure_export_asset_to_signed_url_request_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportAssetToSignedUrlRequestDetails,
) {
    if let Some(var_34) = &input.asset_id {
        object.key("AssetId").string(var_34);
    }
    if let Some(var_35) = &input.data_set_id {
        object.key("DataSetId").string(var_35);
    }
    if let Some(var_36) = &input.revision_id {
        object.key("RevisionId").string(var_36);
    }
}

pub fn serialize_structure_export_assets_to_s3_request_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportAssetsToS3RequestDetails,
) {
    if let Some(var_37) = &input.asset_destinations {
        let mut array_38 = object.key("AssetDestinations").start_array();
        for item_39 in var_37 {
            {
                let mut object_40 = array_38.value().start_object();
                crate::json_ser::serialize_structure_asset_destination_entry(
                    &mut object_40,
                    item_39,
                );
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.data_set_id {
        object.key("DataSetId").string(var_41);
    }
    if let Some(var_42) = &input.encryption {
        let mut object_43 = object.key("Encryption").start_object();
        crate::json_ser::serialize_structure_export_server_side_encryption(&mut object_43, var_42);
        object_43.finish();
    }
    if let Some(var_44) = &input.revision_id {
        object.key("RevisionId").string(var_44);
    }
}

pub fn serialize_structure_export_revisions_to_s3_request_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportRevisionsToS3RequestDetails,
) {
    if let Some(var_45) = &input.data_set_id {
        object.key("DataSetId").string(var_45);
    }
    if let Some(var_46) = &input.encryption {
        let mut object_47 = object.key("Encryption").start_object();
        crate::json_ser::serialize_structure_export_server_side_encryption(&mut object_47, var_46);
        object_47.finish();
    }
    if let Some(var_48) = &input.revision_destinations {
        let mut array_49 = object.key("RevisionDestinations").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_revision_destination_entry(
                    &mut object_51,
                    item_50,
                );
                object_51.finish();
            }
        }
        array_49.finish();
    }
}

pub fn serialize_structure_import_asset_from_signed_url_request_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportAssetFromSignedUrlRequestDetails,
) {
    if let Some(var_52) = &input.asset_name {
        object.key("AssetName").string(var_52);
    }
    if let Some(var_53) = &input.data_set_id {
        object.key("DataSetId").string(var_53);
    }
    if let Some(var_54) = &input.md5_hash {
        object.key("Md5Hash").string(var_54);
    }
    if let Some(var_55) = &input.revision_id {
        object.key("RevisionId").string(var_55);
    }
}

pub fn serialize_structure_import_assets_from_s3_request_details(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportAssetsFromS3RequestDetails,
) {
    if let Some(var_56) = &input.asset_sources {
        let mut array_57 = object.key("AssetSources").start_array();
        for item_58 in var_56 {
            {
                let mut object_59 = array_57.value().start_object();
                crate::json_ser::serialize_structure_asset_source_entry(&mut object_59, item_58);
                object_59.finish();
            }
        }
        array_57.finish();
    }
    if let Some(var_60) = &input.data_set_id {
        object.key("DataSetId").string(var_60);
    }
    if let Some(var_61) = &input.revision_id {
        object.key("RevisionId").string(var_61);
    }
}

pub fn serialize_structure_asset_destination_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetDestinationEntry,
) {
    if let Some(var_62) = &input.asset_id {
        object.key("AssetId").string(var_62);
    }
    if let Some(var_63) = &input.bucket {
        object.key("Bucket").string(var_63);
    }
    if let Some(var_64) = &input.key {
        object.key("Key").string(var_64);
    }
}

pub fn serialize_structure_export_server_side_encryption(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportServerSideEncryption,
) {
    if let Some(var_65) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_65);
    }
    if let Some(var_66) = &input.r#type {
        object.key("Type").string(var_66.as_str());
    }
}

pub fn serialize_structure_revision_destination_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RevisionDestinationEntry,
) {
    if let Some(var_67) = &input.bucket {
        object.key("Bucket").string(var_67);
    }
    if let Some(var_68) = &input.key_pattern {
        object.key("KeyPattern").string(var_68);
    }
    if let Some(var_69) = &input.revision_id {
        object.key("RevisionId").string(var_69);
    }
}

pub fn serialize_structure_asset_source_entry(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetSourceEntry,
) {
    if let Some(var_70) = &input.bucket {
        object.key("Bucket").string(var_70);
    }
    if let Some(var_71) = &input.key {
        object.key("Key").string(var_71);
    }
}
