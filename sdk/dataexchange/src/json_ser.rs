// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDataSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.asset_type {
        object.key("AssetType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.tags {
        let mut object_5 = object.key("Tags").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_event_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.action {
        let mut object_9 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.event {
        let mut object_11 = object.key("Event").start_object();
        crate::json_ser::serialize_structure_crate_model_event(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.details {
        let mut object_13 = object.key("Details").start_object();
        crate::json_ser::serialize_structure_crate_model_request_details(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.r#type {
        object.key("Type").string(var_14.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_revision_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRevisionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.comment {
        object.key("Comment").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        let mut object_17 = object.key("Tags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_revoke_revision_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RevokeRevisionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.revocation_comment {
        object.key("RevocationComment").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.tags {
        let mut object_22 = object.key("tags").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_asset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAssetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.name {
        object.key("Name").string(var_25.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_data_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDataSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.description {
        object.key("Description").string(var_26.as_str());
    }
    if let Some(var_27) = &input.name {
        object.key("Name").string(var_27.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_event_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEventActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.action {
        let mut object_29 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_29, var_28)?;
        object_29.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_revision_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRevisionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.comment {
        object.key("Comment").string(var_30.as_str());
    }
    if input.finalized {
        object.key("Finalized").boolean(input.finalized);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.export_revision_to_s3 {
        let mut object_32 = object.key("ExportRevisionToS3").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_export_revision_to_s3_request_details(&mut object_32, var_31)?;
        object_32.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_event(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Event,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.revision_published {
        let mut object_34 = object.key("RevisionPublished").start_object();
        crate::json_ser::serialize_structure_crate_model_revision_published(
            &mut object_34,
            var_33,
        )?;
        object_34.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_request_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RequestDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.export_asset_to_signed_url {
        let mut object_36 = object.key("ExportAssetToSignedUrl").start_object();
        crate::json_ser::serialize_structure_crate_model_export_asset_to_signed_url_request_details(&mut object_36, var_35)?;
        object_36.finish();
    }
    if let Some(var_37) = &input.export_assets_to_s3 {
        let mut object_38 = object.key("ExportAssetsToS3").start_object();
        crate::json_ser::serialize_structure_crate_model_export_assets_to_s3_request_details(
            &mut object_38,
            var_37,
        )?;
        object_38.finish();
    }
    if let Some(var_39) = &input.export_revisions_to_s3 {
        let mut object_40 = object.key("ExportRevisionsToS3").start_object();
        crate::json_ser::serialize_structure_crate_model_export_revisions_to_s3_request_details(
            &mut object_40,
            var_39,
        )?;
        object_40.finish();
    }
    if let Some(var_41) = &input.import_asset_from_signed_url {
        let mut object_42 = object.key("ImportAssetFromSignedUrl").start_object();
        crate::json_ser::serialize_structure_crate_model_import_asset_from_signed_url_request_details(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.import_assets_from_s3 {
        let mut object_44 = object.key("ImportAssetsFromS3").start_object();
        crate::json_ser::serialize_structure_crate_model_import_assets_from_s3_request_details(
            &mut object_44,
            var_43,
        )?;
        object_44.finish();
    }
    if let Some(var_45) = &input.import_assets_from_redshift_data_shares {
        let mut object_46 = object
            .key("ImportAssetsFromRedshiftDataShares")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_import_assets_from_redshift_data_shares_request_details(&mut object_46, var_45)?;
        object_46.finish();
    }
    if let Some(var_47) = &input.import_asset_from_api_gateway_api {
        let mut object_48 = object.key("ImportAssetFromApiGatewayApi").start_object();
        crate::json_ser::serialize_structure_crate_model_import_asset_from_api_gateway_api_request_details(&mut object_48, var_47)?;
        object_48.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_export_revision_to_s3_request_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoExportRevisionToS3RequestDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.encryption {
        let mut object_50 = object.key("Encryption").start_object();
        crate::json_ser::serialize_structure_crate_model_export_server_side_encryption(
            &mut object_50,
            var_49,
        )?;
        object_50.finish();
    }
    if let Some(var_51) = &input.revision_destination {
        let mut object_52 = object.key("RevisionDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_export_revision_destination_entry(
            &mut object_52,
            var_51,
        )?;
        object_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_revision_published(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RevisionPublished,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.data_set_id {
        object.key("DataSetId").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_asset_to_signed_url_request_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportAssetToSignedUrlRequestDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.asset_id {
        object.key("AssetId").string(var_54.as_str());
    }
    if let Some(var_55) = &input.data_set_id {
        object.key("DataSetId").string(var_55.as_str());
    }
    if let Some(var_56) = &input.revision_id {
        object.key("RevisionId").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_assets_to_s3_request_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportAssetsToS3RequestDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.asset_destinations {
        let mut array_58 = object.key("AssetDestinations").start_array();
        for item_59 in var_57 {
            {
                let mut object_60 = array_58.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_destination_entry(
                    &mut object_60,
                    item_59,
                )?;
                object_60.finish();
            }
        }
        array_58.finish();
    }
    if let Some(var_61) = &input.data_set_id {
        object.key("DataSetId").string(var_61.as_str());
    }
    if let Some(var_62) = &input.encryption {
        let mut object_63 = object.key("Encryption").start_object();
        crate::json_ser::serialize_structure_crate_model_export_server_side_encryption(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    if let Some(var_64) = &input.revision_id {
        object.key("RevisionId").string(var_64.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_revisions_to_s3_request_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportRevisionsToS3RequestDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.data_set_id {
        object.key("DataSetId").string(var_65.as_str());
    }
    if let Some(var_66) = &input.encryption {
        let mut object_67 = object.key("Encryption").start_object();
        crate::json_ser::serialize_structure_crate_model_export_server_side_encryption(
            &mut object_67,
            var_66,
        )?;
        object_67.finish();
    }
    if let Some(var_68) = &input.revision_destinations {
        let mut array_69 = object.key("RevisionDestinations").start_array();
        for item_70 in var_68 {
            {
                let mut object_71 = array_69.value().start_object();
                crate::json_ser::serialize_structure_crate_model_revision_destination_entry(
                    &mut object_71,
                    item_70,
                )?;
                object_71.finish();
            }
        }
        array_69.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_asset_from_signed_url_request_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportAssetFromSignedUrlRequestDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.asset_name {
        object.key("AssetName").string(var_72.as_str());
    }
    if let Some(var_73) = &input.data_set_id {
        object.key("DataSetId").string(var_73.as_str());
    }
    if let Some(var_74) = &input.md5_hash {
        object.key("Md5Hash").string(var_74.as_str());
    }
    if let Some(var_75) = &input.revision_id {
        object.key("RevisionId").string(var_75.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_assets_from_s3_request_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportAssetsFromS3RequestDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.asset_sources {
        let mut array_77 = object.key("AssetSources").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_source_entry(
                    &mut object_79,
                    item_78,
                )?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    if let Some(var_80) = &input.data_set_id {
        object.key("DataSetId").string(var_80.as_str());
    }
    if let Some(var_81) = &input.revision_id {
        object.key("RevisionId").string(var_81.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_assets_from_redshift_data_shares_request_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportAssetsFromRedshiftDataSharesRequestDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.asset_sources {
        let mut array_83 = object.key("AssetSources").start_array();
        for item_84 in var_82 {
            {
                let mut object_85 = array_83.value().start_object();
                crate::json_ser::serialize_structure_crate_model_redshift_data_share_asset_source_entry(&mut object_85, item_84)?;
                object_85.finish();
            }
        }
        array_83.finish();
    }
    if let Some(var_86) = &input.data_set_id {
        object.key("DataSetId").string(var_86.as_str());
    }
    if let Some(var_87) = &input.revision_id {
        object.key("RevisionId").string(var_87.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_import_asset_from_api_gateway_api_request_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImportAssetFromApiGatewayApiRequestDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.api_description {
        object.key("ApiDescription").string(var_88.as_str());
    }
    if let Some(var_89) = &input.api_id {
        object.key("ApiId").string(var_89.as_str());
    }
    if let Some(var_90) = &input.api_key {
        object.key("ApiKey").string(var_90.as_str());
    }
    if let Some(var_91) = &input.api_name {
        object.key("ApiName").string(var_91.as_str());
    }
    if let Some(var_92) = &input.api_specification_md5_hash {
        object
            .key("ApiSpecificationMd5Hash")
            .string(var_92.as_str());
    }
    if let Some(var_93) = &input.data_set_id {
        object.key("DataSetId").string(var_93.as_str());
    }
    if let Some(var_94) = &input.protocol_type {
        object.key("ProtocolType").string(var_94.as_str());
    }
    if let Some(var_95) = &input.revision_id {
        object.key("RevisionId").string(var_95.as_str());
    }
    if let Some(var_96) = &input.stage {
        object.key("Stage").string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_export_server_side_encryption(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExportServerSideEncryption,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_97.as_str());
    }
    if let Some(var_98) = &input.r#type {
        object.key("Type").string(var_98.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_export_revision_destination_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoExportRevisionDestinationEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.bucket {
        object.key("Bucket").string(var_99.as_str());
    }
    if let Some(var_100) = &input.key_pattern {
        object.key("KeyPattern").string(var_100.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_destination_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetDestinationEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.asset_id {
        object.key("AssetId").string(var_101.as_str());
    }
    if let Some(var_102) = &input.bucket {
        object.key("Bucket").string(var_102.as_str());
    }
    if let Some(var_103) = &input.key {
        object.key("Key").string(var_103.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_revision_destination_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RevisionDestinationEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.bucket {
        object.key("Bucket").string(var_104.as_str());
    }
    if let Some(var_105) = &input.key_pattern {
        object.key("KeyPattern").string(var_105.as_str());
    }
    if let Some(var_106) = &input.revision_id {
        object.key("RevisionId").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_source_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetSourceEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.bucket {
        object.key("Bucket").string(var_107.as_str());
    }
    if let Some(var_108) = &input.key {
        object.key("Key").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_redshift_data_share_asset_source_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RedshiftDataShareAssetSourceEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.data_share_arn {
        object.key("DataShareArn").string(var_109.as_str());
    }
    Ok(())
}
