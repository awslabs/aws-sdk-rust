// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRevisionInput {
    /// <p>An optional comment about the revision.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
    /// <p>The unique identifier for a data set.</p>
    #[doc(hidden)]
    pub data_set_id: std::option::Option<std::string::String>,
    /// <p>Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.</p>
    #[doc(hidden)]
    pub finalized: bool,
    /// <p>The unique identifier for a revision.</p>
    #[doc(hidden)]
    pub revision_id: std::option::Option<std::string::String>,
}
impl UpdateRevisionInput {
    /// <p>An optional comment about the revision.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The unique identifier for a data set.</p>
    pub fn data_set_id(&self) -> std::option::Option<&str> {
        self.data_set_id.as_deref()
    }
    /// <p>Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.</p>
    pub fn finalized(&self) -> bool {
        self.finalized
    }
    /// <p>The unique identifier for a revision.</p>
    pub fn revision_id(&self) -> std::option::Option<&str> {
        self.revision_id.as_deref()
    }
}
impl UpdateRevisionInput {
    /// Creates a new builder-style object to manufacture [`UpdateRevisionInput`](crate::operation::update_revision::UpdateRevisionInput).
    pub fn builder() -> crate::operation::update_revision::builders::UpdateRevisionInputBuilder {
        crate::operation::update_revision::builders::UpdateRevisionInputBuilder::default()
    }
}

/// A builder for [`UpdateRevisionInput`](crate::operation::update_revision::UpdateRevisionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateRevisionInputBuilder {
    pub(crate) comment: std::option::Option<std::string::String>,
    pub(crate) data_set_id: std::option::Option<std::string::String>,
    pub(crate) finalized: std::option::Option<bool>,
    pub(crate) revision_id: std::option::Option<std::string::String>,
}
impl UpdateRevisionInputBuilder {
    /// <p>An optional comment about the revision.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>An optional comment about the revision.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>The unique identifier for a data set.</p>
    pub fn data_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_set_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for a data set.</p>
    pub fn set_data_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.</p>
    pub fn finalized(mut self, input: bool) -> Self {
        self.finalized = Some(input);
        self
    }
    /// <p>Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.</p>
    pub fn set_finalized(mut self, input: std::option::Option<bool>) -> Self {
        self.finalized = input;
        self
    }
    /// <p>The unique identifier for a revision.</p>
    pub fn revision_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.revision_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for a revision.</p>
    pub fn set_revision_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.revision_id = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRevisionInput`](crate::operation::update_revision::UpdateRevisionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_revision::UpdateRevisionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_revision::UpdateRevisionInput {
            comment: self.comment,
            data_set_id: self.data_set_id,
            finalized: self.finalized.unwrap_or_default(),
            revision_id: self.revision_id,
        })
    }
}
