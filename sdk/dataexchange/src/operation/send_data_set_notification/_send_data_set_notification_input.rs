// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendDataSetNotificationInput {
    /// <p>Affected scope of this notification such as the underlying resources affected by the notification event.</p>
    pub scope: ::std::option::Option<crate::types::ScopeDetails>,
    /// <p>Idempotency key for the notification, this key allows us to deduplicate notifications that are sent in quick succession erroneously.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Free-form text field for providers to add information about their notifications.</p>
    pub comment: ::std::option::Option<::std::string::String>,
    /// <p>Affected data set of the notification.</p>
    pub data_set_id: ::std::option::Option<::std::string::String>,
    /// <p>Extra details specific to this notification type.</p>
    pub details: ::std::option::Option<crate::types::NotificationDetails>,
    /// <p>The type of the notification. Describing the kind of event the notification is alerting you to.</p>
    pub r#type: ::std::option::Option<crate::types::NotificationType>,
}
impl SendDataSetNotificationInput {
    /// <p>Affected scope of this notification such as the underlying resources affected by the notification event.</p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::ScopeDetails> {
        self.scope.as_ref()
    }
    /// <p>Idempotency key for the notification, this key allows us to deduplicate notifications that are sent in quick succession erroneously.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Free-form text field for providers to add information about their notifications.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>Affected data set of the notification.</p>
    pub fn data_set_id(&self) -> ::std::option::Option<&str> {
        self.data_set_id.as_deref()
    }
    /// <p>Extra details specific to this notification type.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::NotificationDetails> {
        self.details.as_ref()
    }
    /// <p>The type of the notification. Describing the kind of event the notification is alerting you to.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::NotificationType> {
        self.r#type.as_ref()
    }
}
impl SendDataSetNotificationInput {
    /// Creates a new builder-style object to manufacture [`SendDataSetNotificationInput`](crate::operation::send_data_set_notification::SendDataSetNotificationInput).
    pub fn builder() -> crate::operation::send_data_set_notification::builders::SendDataSetNotificationInputBuilder {
        crate::operation::send_data_set_notification::builders::SendDataSetNotificationInputBuilder::default()
    }
}

/// A builder for [`SendDataSetNotificationInput`](crate::operation::send_data_set_notification::SendDataSetNotificationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SendDataSetNotificationInputBuilder {
    pub(crate) scope: ::std::option::Option<crate::types::ScopeDetails>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) data_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<crate::types::NotificationDetails>,
    pub(crate) r#type: ::std::option::Option<crate::types::NotificationType>,
}
impl SendDataSetNotificationInputBuilder {
    /// <p>Affected scope of this notification such as the underlying resources affected by the notification event.</p>
    pub fn scope(mut self, input: crate::types::ScopeDetails) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Affected scope of this notification such as the underlying resources affected by the notification event.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::ScopeDetails>) -> Self {
        self.scope = input;
        self
    }
    /// <p>Affected scope of this notification such as the underlying resources affected by the notification event.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::ScopeDetails> {
        &self.scope
    }
    /// <p>Idempotency key for the notification, this key allows us to deduplicate notifications that are sent in quick succession erroneously.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Idempotency key for the notification, this key allows us to deduplicate notifications that are sent in quick succession erroneously.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Idempotency key for the notification, this key allows us to deduplicate notifications that are sent in quick succession erroneously.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Free-form text field for providers to add information about their notifications.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Free-form text field for providers to add information about their notifications.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>Free-form text field for providers to add information about their notifications.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// <p>Affected data set of the notification.</p>
    /// This field is required.
    pub fn data_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Affected data set of the notification.</p>
    pub fn set_data_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_id = input;
        self
    }
    /// <p>Affected data set of the notification.</p>
    pub fn get_data_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_id
    }
    /// <p>Extra details specific to this notification type.</p>
    pub fn details(mut self, input: crate::types::NotificationDetails) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Extra details specific to this notification type.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::NotificationDetails>) -> Self {
        self.details = input;
        self
    }
    /// <p>Extra details specific to this notification type.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::NotificationDetails> {
        &self.details
    }
    /// <p>The type of the notification. Describing the kind of event the notification is alerting you to.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::NotificationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the notification. Describing the kind of event the notification is alerting you to.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::NotificationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the notification. Describing the kind of event the notification is alerting you to.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::NotificationType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`SendDataSetNotificationInput`](crate::operation::send_data_set_notification::SendDataSetNotificationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_data_set_notification::SendDataSetNotificationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::send_data_set_notification::SendDataSetNotificationInput {
            scope: self.scope,
            client_token: self.client_token,
            comment: self.comment,
            data_set_id: self.data_set_id,
            details: self.details,
            r#type: self.r#type,
        })
    }
}
