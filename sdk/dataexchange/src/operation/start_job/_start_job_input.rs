// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartJobInput {
    /// <p>The unique identifier for a job.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
}
impl StartJobInput {
    /// <p>The unique identifier for a job.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
}
impl StartJobInput {
    /// Creates a new builder-style object to manufacture [`StartJobInput`](crate::operation::start_job::StartJobInput).
    pub fn builder() -> crate::operation::start_job::builders::StartJobInputBuilder {
        crate::operation::start_job::builders::StartJobInputBuilder::default()
    }
}

/// A builder for [`StartJobInput`](crate::operation::start_job::StartJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartJobInputBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
}
impl StartJobInputBuilder {
    /// <p>The unique identifier for a job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for a job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The unique identifier for a job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// Consumes the builder and constructs a [`StartJobInput`](crate::operation::start_job::StartJobInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::start_job::StartJobInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_job::StartJobInput { job_id: self.job_id })
    }
}
