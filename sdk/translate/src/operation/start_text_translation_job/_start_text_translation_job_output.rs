// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartTextTranslationJobOutput {
    /// <p>The identifier generated for the job. To get the status of a job, use this ID with the <code>DescribeTextTranslationJob</code> operation.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The status of the job. Possible values include:</p>
    /// <ul>
    /// <li> <p> <code>SUBMITTED</code> - The job has been received and is queued for processing.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Amazon Translate is processing the job.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - The job was successfully completed and the output is available.</p> </li>
    /// <li> <p> <code>COMPLETED_WITH_ERROR</code> - The job was completed with errors. The errors can be analyzed in the job's output.</p> </li>
    /// <li> <p> <code>FAILED</code> - The job did not complete. To get details, use the <code>DescribeTextTranslationJob</code> operation.</p> </li>
    /// <li> <p> <code>STOP_REQUESTED</code> - The user who started the job has requested that it be stopped.</p> </li>
    /// <li> <p> <code>STOPPED</code> - The job has been stopped.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::JobStatus>,
    _request_id: Option<String>,
}
impl StartTextTranslationJobOutput {
    /// <p>The identifier generated for the job. To get the status of a job, use this ID with the <code>DescribeTextTranslationJob</code> operation.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The status of the job. Possible values include:</p>
    /// <ul>
    /// <li> <p> <code>SUBMITTED</code> - The job has been received and is queued for processing.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Amazon Translate is processing the job.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - The job was successfully completed and the output is available.</p> </li>
    /// <li> <p> <code>COMPLETED_WITH_ERROR</code> - The job was completed with errors. The errors can be analyzed in the job's output.</p> </li>
    /// <li> <p> <code>FAILED</code> - The job did not complete. To get details, use the <code>DescribeTextTranslationJob</code> operation.</p> </li>
    /// <li> <p> <code>STOP_REQUESTED</code> - The user who started the job has requested that it be stopped.</p> </li>
    /// <li> <p> <code>STOPPED</code> - The job has been stopped.</p> </li>
    /// </ul>
    pub fn job_status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartTextTranslationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartTextTranslationJobOutput {
    /// Creates a new builder-style object to manufacture [`StartTextTranslationJobOutput`](crate::operation::start_text_translation_job::StartTextTranslationJobOutput).
    pub fn builder(
    ) -> crate::operation::start_text_translation_job::builders::StartTextTranslationJobOutputBuilder
    {
        crate::operation::start_text_translation_job::builders::StartTextTranslationJobOutputBuilder::default()
    }
}

/// A builder for [`StartTextTranslationJobOutput`](crate::operation::start_text_translation_job::StartTextTranslationJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartTextTranslationJobOutputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) job_status: std::option::Option<crate::types::JobStatus>,
    _request_id: Option<String>,
}
impl StartTextTranslationJobOutputBuilder {
    /// <p>The identifier generated for the job. To get the status of a job, use this ID with the <code>DescribeTextTranslationJob</code> operation.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The identifier generated for the job. To get the status of a job, use this ID with the <code>DescribeTextTranslationJob</code> operation.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The status of the job. Possible values include:</p>
    /// <ul>
    /// <li> <p> <code>SUBMITTED</code> - The job has been received and is queued for processing.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Amazon Translate is processing the job.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - The job was successfully completed and the output is available.</p> </li>
    /// <li> <p> <code>COMPLETED_WITH_ERROR</code> - The job was completed with errors. The errors can be analyzed in the job's output.</p> </li>
    /// <li> <p> <code>FAILED</code> - The job did not complete. To get details, use the <code>DescribeTextTranslationJob</code> operation.</p> </li>
    /// <li> <p> <code>STOP_REQUESTED</code> - The user who started the job has requested that it be stopped.</p> </li>
    /// <li> <p> <code>STOPPED</code> - The job has been stopped.</p> </li>
    /// </ul>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p>The status of the job. Possible values include:</p>
    /// <ul>
    /// <li> <p> <code>SUBMITTED</code> - The job has been received and is queued for processing.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Amazon Translate is processing the job.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - The job was successfully completed and the output is available.</p> </li>
    /// <li> <p> <code>COMPLETED_WITH_ERROR</code> - The job was completed with errors. The errors can be analyzed in the job's output.</p> </li>
    /// <li> <p> <code>FAILED</code> - The job did not complete. To get details, use the <code>DescribeTextTranslationJob</code> operation.</p> </li>
    /// <li> <p> <code>STOP_REQUESTED</code> - The user who started the job has requested that it be stopped.</p> </li>
    /// <li> <p> <code>STOPPED</code> - The job has been stopped.</p> </li>
    /// </ul>
    pub fn set_job_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartTextTranslationJobOutput`](crate::operation::start_text_translation_job::StartTextTranslationJobOutput).
    pub fn build(
        self,
    ) -> crate::operation::start_text_translation_job::StartTextTranslationJobOutput {
        crate::operation::start_text_translation_job::StartTextTranslationJobOutput {
            job_id: self.job_id,
            job_status: self.job_status,
            _request_id: self._request_id,
        }
    }
}
