// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_import_terminology_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::import_terminology::ImportTerminologyInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.merge_strategy {
        object.key("MergeStrategy").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("Description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.terminology_data {
        #[allow(unused_mut)]
        let mut object_5 = object.key("TerminologyData").start_object();
        crate::protocol_serde::shape_terminology_data::ser_terminology_data(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.encryption_key {
        #[allow(unused_mut)]
        let mut object_7 = object.key("EncryptionKey").start_object();
        crate::protocol_serde::shape_encryption_key::ser_encryption_key(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
