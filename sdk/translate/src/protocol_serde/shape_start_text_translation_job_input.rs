// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_text_translation_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_text_translation_job::StartTextTranslationJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.job_name {
        object.key("JobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.input_data_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("InputDataConfig").start_object();
        crate::protocol_serde::shape_input_data_config::ser_input_data_config(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.output_data_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("OutputDataConfig").start_object();
        crate::protocol_serde::shape_output_data_config::ser_output_data_config(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.data_access_role_arn {
        object.key("DataAccessRoleArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.source_language_code {
        object.key("SourceLanguageCode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.target_language_codes {
        let mut array_9 = object.key("TargetLanguageCodes").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.terminology_names {
        let mut array_12 = object.key("TerminologyNames").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.parallel_data_names {
        let mut array_15 = object.key("ParallelDataNames").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.client_token {
        object.key("ClientToken").string(var_17.as_str());
    }
    if let Some(var_18) = &input.settings {
        #[allow(unused_mut)]
        let mut object_19 = object.key("Settings").start_object();
        crate::protocol_serde::shape_translation_settings::ser_translation_settings(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    Ok(())
}
