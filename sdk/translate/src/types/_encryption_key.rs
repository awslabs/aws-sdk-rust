// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The encryption key used to encrypt this object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EncryptionKey {
    /// <p>The type of encryption key used by Amazon Translate to encrypt this object.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::EncryptionKeyType>,
    /// <p>The Amazon Resource Name (ARN) of the encryption key being used to encrypt this object.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl EncryptionKey {
    /// <p>The type of encryption key used by Amazon Translate to encrypt this object.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::EncryptionKeyType> {
        self.r#type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key being used to encrypt this object.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl EncryptionKey {
    /// Creates a new builder-style object to manufacture [`EncryptionKey`](crate::types::EncryptionKey).
    pub fn builder() -> crate::types::builders::EncryptionKeyBuilder {
        crate::types::builders::EncryptionKeyBuilder::default()
    }
}

/// A builder for [`EncryptionKey`](crate::types::EncryptionKey).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EncryptionKeyBuilder {
    pub(crate) r#type: std::option::Option<crate::types::EncryptionKeyType>,
    pub(crate) id: std::option::Option<std::string::String>,
}
impl EncryptionKeyBuilder {
    /// <p>The type of encryption key used by Amazon Translate to encrypt this object.</p>
    pub fn r#type(mut self, input: crate::types::EncryptionKeyType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of encryption key used by Amazon Translate to encrypt this object.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::EncryptionKeyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key being used to encrypt this object.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the encryption key being used to encrypt this object.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Consumes the builder and constructs a [`EncryptionKey`](crate::types::EncryptionKey).
    pub fn build(self) -> crate::types::EncryptionKey {
        crate::types::EncryptionKey {
            r#type: self.r#type,
            id: self.id,
        }
    }
}
