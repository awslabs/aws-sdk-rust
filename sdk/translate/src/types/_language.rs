// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A supported language.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Language {
    /// <p>Language name of the supported language.</p>
    #[doc(hidden)]
    pub language_name: std::option::Option<std::string::String>,
    /// <p>Language code for the supported language.</p>
    #[doc(hidden)]
    pub language_code: std::option::Option<std::string::String>,
}
impl Language {
    /// <p>Language name of the supported language.</p>
    pub fn language_name(&self) -> std::option::Option<&str> {
        self.language_name.as_deref()
    }
    /// <p>Language code for the supported language.</p>
    pub fn language_code(&self) -> std::option::Option<&str> {
        self.language_code.as_deref()
    }
}
impl Language {
    /// Creates a new builder-style object to manufacture [`Language`](crate::types::Language).
    pub fn builder() -> crate::types::builders::LanguageBuilder {
        crate::types::builders::LanguageBuilder::default()
    }
}

/// A builder for [`Language`](crate::types::Language).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LanguageBuilder {
    pub(crate) language_name: std::option::Option<std::string::String>,
    pub(crate) language_code: std::option::Option<std::string::String>,
}
impl LanguageBuilder {
    /// <p>Language name of the supported language.</p>
    pub fn language_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.language_name = Some(input.into());
        self
    }
    /// <p>Language name of the supported language.</p>
    pub fn set_language_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language_name = input;
        self
    }
    /// <p>Language code for the supported language.</p>
    pub fn language_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.language_code = Some(input.into());
        self
    }
    /// <p>Language code for the supported language.</p>
    pub fn set_language_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// Consumes the builder and constructs a [`Language`](crate::types::Language).
    pub fn build(self) -> crate::types::Language {
        crate::types::Language {
            language_name: self.language_name,
            language_code: self.language_code,
        }
    }
}
