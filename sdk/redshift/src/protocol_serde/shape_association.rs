// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_association(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::Association, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Association::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CustomDomainCertificateArn") /* CustomDomainCertificateArn com.amazonaws.redshift#Association$CustomDomainCertificateArn */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_custom_domain_certificate_arn(var_1);
            }
            ,
            s if s.matches("CustomDomainCertificateExpiryDate") /* CustomDomainCertificateExpiryDate com.amazonaws.redshift#Association$CustomDomainCertificateExpiryDate */ =>  {
                let var_2 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.redshift#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_custom_domain_certificate_expiry_date(var_2);
            }
            ,
            s if s.matches("CertificateAssociations") /* CertificateAssociations com.amazonaws.redshift#Association$CertificateAssociations */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_certificate_association_list::de_certificate_association_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_certificate_associations(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
