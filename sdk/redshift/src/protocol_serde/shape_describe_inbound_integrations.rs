// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_inbound_integrations_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsOutput,
    crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "IntegrationNotFoundFault" => crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::IntegrationNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::IntegrationNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_integration_not_found_fault::de_integration_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidNamespaceFault" => crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::InvalidNamespaceFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidNamespaceFaultBuilder::default();
                output = crate::protocol_serde::shape_invalid_namespace_fault::de_invalid_namespace_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedOperation" => crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::UnsupportedOperationFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::UnsupportedOperationFaultBuilder::default();
                output = crate::protocol_serde::shape_unsupported_operation_fault::de_unsupported_operation_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_inbound_integrations_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsOutput,
    crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_inbound_integrations::builders::DescribeInboundIntegrationsOutputBuilder::default();
        output = crate::protocol_serde::shape_describe_inbound_integrations::de_describe_inbound_integrations(_response_body, output)
            .map_err(crate::operation::describe_inbound_integrations::DescribeInboundIntegrationsError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_describe_inbound_integrations(
    inp: &[u8],
    mut builder: crate::operation::describe_inbound_integrations::builders::DescribeInboundIntegrationsOutputBuilder,
) -> Result<
    crate::operation::describe_inbound_integrations::builders::DescribeInboundIntegrationsOutputBuilder,
    ::aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeInboundIntegrationsResponse")) {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected DescribeInboundIntegrationsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeInboundIntegrationsResult")) {
            return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected DescribeInboundIntegrationsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Marker") /* Marker com.amazonaws.redshift.synthetic#DescribeInboundIntegrationsOutput$Marker */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_1);
            }
            ,
            s if s.matches("InboundIntegrations") /* InboundIntegrations com.amazonaws.redshift.synthetic#DescribeInboundIntegrationsOutput$InboundIntegrations */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_inbound_integration_list::de_inbound_integration_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_inbound_integrations(var_2);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected DescribeInboundIntegrationsResult tag",
        ));
    };
    Ok(builder)
}
