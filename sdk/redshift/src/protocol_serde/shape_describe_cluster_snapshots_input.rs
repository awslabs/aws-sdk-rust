// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_cluster_snapshots_input_input(
    input: &crate::operation::describe_cluster_snapshots::DescribeClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ClusterIdentifier");
    if let Some(var_2) = &input.cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("SnapshotIdentifier");
    if let Some(var_4) = &input.snapshot_identifier {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("SnapshotArn");
    if let Some(var_6) = &input.snapshot_arn {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("SnapshotType");
    if let Some(var_8) = &input.snapshot_type {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("StartTime");
    if let Some(var_10) = &input.start_time {
        scope_9.date_time(var_10, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("EndTime");
    if let Some(var_12) = &input.end_time {
        scope_11.date_time(var_12, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("MaxRecords");
    if let Some(var_14) = &input.max_records {
        scope_13.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("Marker");
    if let Some(var_16) = &input.marker {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("OwnerAccount");
    if let Some(var_18) = &input.owner_account {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("TagKeys");
    if let Some(var_20) = &input.tag_keys {
        let mut list_22 = scope_19.start_list(false, Some("TagKey"));
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            entry_23.string(item_21);
        }
        list_22.finish();
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("TagValues");
    if let Some(var_25) = &input.tag_values {
        let mut list_27 = scope_24.start_list(false, Some("TagValue"));
        for item_26 in var_25 {
            #[allow(unused_mut)]
            let mut entry_28 = list_27.entry();
            entry_28.string(item_26);
        }
        list_27.finish();
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("ClusterExists");
    if let Some(var_30) = &input.cluster_exists {
        scope_29.boolean(*var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("SortingEntities");
    if let Some(var_32) = &input.sorting_entities {
        let mut list_34 = scope_31.start_list(false, Some("SnapshotSortingEntity"));
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            crate::protocol_serde::shape_snapshot_sorting_entity::ser_snapshot_sorting_entity(
                entry_35, item_33,
            )?;
        }
        list_34.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
