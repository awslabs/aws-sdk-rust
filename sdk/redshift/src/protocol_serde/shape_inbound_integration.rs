// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_inbound_integration(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::InboundIntegration, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::InboundIntegration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("IntegrationArn") /* IntegrationArn com.amazonaws.redshift#InboundIntegration$IntegrationArn */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_integration_arn(var_1);
            }
            ,
            s if s.matches("SourceArn") /* SourceArn com.amazonaws.redshift#InboundIntegration$SourceArn */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_arn(var_2);
            }
            ,
            s if s.matches("TargetArn") /* TargetArn com.amazonaws.redshift#InboundIntegration$TargetArn */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_arn(var_3);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.redshift#InboundIntegration$Status */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::ZeroEtlIntegrationStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ZeroEtlIntegrationStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_4);
            }
            ,
            s if s.matches("Errors") /* Errors com.amazonaws.redshift#InboundIntegration$Errors */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_integration_error_list::de_integration_error_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_errors(var_5);
            }
            ,
            s if s.matches("CreateTime") /* CreateTime com.amazonaws.redshift#InboundIntegration$CreateTime */ =>  {
                let var_6 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.redshift#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_create_time(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
