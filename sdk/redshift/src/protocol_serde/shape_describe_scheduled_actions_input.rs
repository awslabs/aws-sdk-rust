// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_scheduled_actions_input_input(
    input: &crate::operation::describe_scheduled_actions::DescribeScheduledActionsInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledActions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ScheduledActionName");
    if let Some(var_2) = &input.scheduled_action_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TargetActionType");
    if let Some(var_4) = &input.target_action_type {
        scope_3.string(var_4.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("StartTime");
    if let Some(var_6) = &input.start_time {
        scope_5.date_time(var_6, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("EndTime");
    if let Some(var_8) = &input.end_time {
        scope_7.date_time(var_8, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("Active");
    if let Some(var_10) = &input.active {
        scope_9.boolean(*var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("Filters");
    if let Some(var_12) = &input.filters {
        let mut list_14 = scope_11.start_list(false, Some("ScheduledActionFilter"));
        for item_13 in var_12 {
            #[allow(unused_mut)]
            let mut entry_15 = list_14.entry();
            crate::protocol_serde::shape_scheduled_action_filter::ser_scheduled_action_filter(entry_15, item_13)?;
        }
        list_14.finish();
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("Marker");
    if let Some(var_17) = &input.marker {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("MaxRecords");
    if let Some(var_19) = &input.max_records {
        scope_18.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
