// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_cluster_input_input(
    input: &crate::operation::create_cluster::CreateClusterInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBName");
    if let Some(var_2) = &input.db_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ClusterIdentifier");
    if let Some(var_4) = &input.cluster_identifier {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ClusterType");
    if let Some(var_6) = &input.cluster_type {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("NodeType");
    if let Some(var_8) = &input.node_type {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("MasterUsername");
    if let Some(var_10) = &input.master_username {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("MasterUserPassword");
    if let Some(var_12) = &input.master_user_password {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_14) = &input.cluster_security_groups {
        let mut list_16 = scope_13.start_list(false, Some("ClusterSecurityGroupName"));
        for item_15 in var_14 {
            #[allow(unused_mut)]
            let mut entry_17 = list_16.entry();
            entry_17.string(item_15);
        }
        list_16.finish();
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_19) = &input.vpc_security_group_ids {
        let mut list_21 = scope_18.start_list(false, Some("VpcSecurityGroupId"));
        for item_20 in var_19 {
            #[allow(unused_mut)]
            let mut entry_22 = list_21.entry();
            entry_22.string(item_20);
        }
        list_21.finish();
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_24) = &input.cluster_subnet_group_name {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("AvailabilityZone");
    if let Some(var_26) = &input.availability_zone {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_28) = &input.preferred_maintenance_window {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_30) = &input.cluster_parameter_group_name {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_32) = &input.automated_snapshot_retention_period {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_34) = &input.manual_snapshot_retention_period {
        scope_33.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_34).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("Port");
    if let Some(var_36) = &input.port {
        scope_35.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_36).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("ClusterVersion");
    if let Some(var_38) = &input.cluster_version {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_40) = &input.allow_version_upgrade {
        scope_39.boolean(*var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("NumberOfNodes");
    if let Some(var_42) = &input.number_of_nodes {
        scope_41.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_42).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("PubliclyAccessible");
    if let Some(var_44) = &input.publicly_accessible {
        scope_43.boolean(*var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Encrypted");
    if let Some(var_46) = &input.encrypted {
        scope_45.boolean(*var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_48) = &input.hsm_client_certificate_identifier {
        scope_47.string(var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_50) = &input.hsm_configuration_identifier {
        scope_49.string(var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("ElasticIp");
    if let Some(var_52) = &input.elastic_ip {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("Tags");
    if let Some(var_54) = &input.tags {
        let mut list_56 = scope_53.start_list(false, Some("Tag"));
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_57, item_55)?;
        }
        list_56.finish();
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("KmsKeyId");
    if let Some(var_59) = &input.kms_key_id {
        scope_58.string(var_59);
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_61) = &input.enhanced_vpc_routing {
        scope_60.boolean(*var_61);
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("AdditionalInfo");
    if let Some(var_63) = &input.additional_info {
        scope_62.string(var_63);
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("IamRoles");
    if let Some(var_65) = &input.iam_roles {
        let mut list_67 = scope_64.start_list(false, Some("IamRoleArn"));
        for item_66 in var_65 {
            #[allow(unused_mut)]
            let mut entry_68 = list_67.entry();
            entry_68.string(item_66);
        }
        list_67.finish();
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("MaintenanceTrackName");
    if let Some(var_70) = &input.maintenance_track_name {
        scope_69.string(var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("SnapshotScheduleIdentifier");
    if let Some(var_72) = &input.snapshot_schedule_identifier {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_74) = &input.availability_zone_relocation {
        scope_73.boolean(*var_74);
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_76) = &input.aqua_configuration_status {
        scope_75.string(var_76.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_78) = &input.default_iam_role_arn {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("LoadSampleData");
    if let Some(var_80) = &input.load_sample_data {
        scope_79.string(var_80);
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("ManageMasterPassword");
    if let Some(var_82) = &input.manage_master_password {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("MasterPasswordSecretKmsKeyId");
    if let Some(var_84) = &input.master_password_secret_kms_key_id {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("IpAddressType");
    if let Some(var_86) = &input.ip_address_type {
        scope_85.string(var_86);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
