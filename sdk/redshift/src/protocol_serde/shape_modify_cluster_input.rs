// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_modify_cluster_input_input(
    input: &crate::operation::modify_cluster::ModifyClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ClusterIdentifier");
    if let Some(var_2) = &input.cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ClusterType");
    if let Some(var_4) = &input.cluster_type {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("NodeType");
    if let Some(var_6) = &input.node_type {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("NumberOfNodes");
    if let Some(var_8) = &input.number_of_nodes {
        scope_7.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_10) = &input.cluster_security_groups {
        let mut list_12 = scope_9.start_list(false, Some("ClusterSecurityGroupName"));
        for item_11 in var_10 {
            #[allow(unused_mut)]
            let mut entry_13 = list_12.entry();
            entry_13.string(item_11);
        }
        list_12.finish();
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_15) = &input.vpc_security_group_ids {
        let mut list_17 = scope_14.start_list(false, Some("VpcSecurityGroupId"));
        for item_16 in var_15 {
            #[allow(unused_mut)]
            let mut entry_18 = list_17.entry();
            entry_18.string(item_16);
        }
        list_17.finish();
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("MasterUserPassword");
    if let Some(var_20) = &input.master_user_password {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_22) = &input.cluster_parameter_group_name {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_24) = &input.automated_snapshot_retention_period {
        scope_23.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_24).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_26) = &input.manual_snapshot_retention_period {
        scope_25.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_28) = &input.preferred_maintenance_window {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("ClusterVersion");
    if let Some(var_30) = &input.cluster_version {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_32) = &input.allow_version_upgrade {
        scope_31.boolean(*var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_34) = &input.hsm_client_certificate_identifier {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_36) = &input.hsm_configuration_identifier {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("NewClusterIdentifier");
    if let Some(var_38) = &input.new_cluster_identifier {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("PubliclyAccessible");
    if let Some(var_40) = &input.publicly_accessible {
        scope_39.boolean(*var_40);
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("ElasticIp");
    if let Some(var_42) = &input.elastic_ip {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_44) = &input.enhanced_vpc_routing {
        scope_43.boolean(*var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("MaintenanceTrackName");
    if let Some(var_46) = &input.maintenance_track_name {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("Encrypted");
    if let Some(var_48) = &input.encrypted {
        scope_47.boolean(*var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("KmsKeyId");
    if let Some(var_50) = &input.kms_key_id {
        scope_49.string(var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_52) = &input.availability_zone_relocation {
        scope_51.boolean(*var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("AvailabilityZone");
    if let Some(var_54) = &input.availability_zone {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("Port");
    if let Some(var_56) = &input.port {
        scope_55.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_56).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
