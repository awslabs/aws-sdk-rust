// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the status of a cluster while it is in the process of resizing with an incremental resize.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataTransferProgress {
    /// <p>Describes the status of the cluster. While the transfer is in progress the status is <code>transferringdata</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>Describes the data transfer rate in MB's per second.</p>
    #[doc(hidden)]
    pub current_rate_in_mega_bytes_per_second: std::option::Option<f64>,
    /// <p>Describes the total amount of data to be transfered in megabytes.</p>
    #[doc(hidden)]
    pub total_data_in_mega_bytes: i64,
    /// <p>Describes the total amount of data that has been transfered in MB's.</p>
    #[doc(hidden)]
    pub data_transferred_in_mega_bytes: i64,
    /// <p>Describes the estimated number of seconds remaining to complete the transfer.</p>
    #[doc(hidden)]
    pub estimated_time_to_completion_in_seconds: std::option::Option<i64>,
    /// <p>Describes the number of seconds that have elapsed during the data transfer.</p>
    #[doc(hidden)]
    pub elapsed_time_in_seconds: std::option::Option<i64>,
}
impl DataTransferProgress {
    /// <p>Describes the status of the cluster. While the transfer is in progress the status is <code>transferringdata</code>.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Describes the data transfer rate in MB's per second.</p>
    pub fn current_rate_in_mega_bytes_per_second(&self) -> std::option::Option<f64> {
        self.current_rate_in_mega_bytes_per_second
    }
    /// <p>Describes the total amount of data to be transfered in megabytes.</p>
    pub fn total_data_in_mega_bytes(&self) -> i64 {
        self.total_data_in_mega_bytes
    }
    /// <p>Describes the total amount of data that has been transfered in MB's.</p>
    pub fn data_transferred_in_mega_bytes(&self) -> i64 {
        self.data_transferred_in_mega_bytes
    }
    /// <p>Describes the estimated number of seconds remaining to complete the transfer.</p>
    pub fn estimated_time_to_completion_in_seconds(&self) -> std::option::Option<i64> {
        self.estimated_time_to_completion_in_seconds
    }
    /// <p>Describes the number of seconds that have elapsed during the data transfer.</p>
    pub fn elapsed_time_in_seconds(&self) -> std::option::Option<i64> {
        self.elapsed_time_in_seconds
    }
}
impl DataTransferProgress {
    /// Creates a new builder-style object to manufacture [`DataTransferProgress`](crate::types::DataTransferProgress).
    pub fn builder() -> crate::types::builders::DataTransferProgressBuilder {
        crate::types::builders::DataTransferProgressBuilder::default()
    }
}

/// A builder for [`DataTransferProgress`](crate::types::DataTransferProgress).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataTransferProgressBuilder {
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) current_rate_in_mega_bytes_per_second: std::option::Option<f64>,
    pub(crate) total_data_in_mega_bytes: std::option::Option<i64>,
    pub(crate) data_transferred_in_mega_bytes: std::option::Option<i64>,
    pub(crate) estimated_time_to_completion_in_seconds: std::option::Option<i64>,
    pub(crate) elapsed_time_in_seconds: std::option::Option<i64>,
}
impl DataTransferProgressBuilder {
    /// <p>Describes the status of the cluster. While the transfer is in progress the status is <code>transferringdata</code>.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Describes the status of the cluster. While the transfer is in progress the status is <code>transferringdata</code>.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Describes the data transfer rate in MB's per second.</p>
    pub fn current_rate_in_mega_bytes_per_second(mut self, input: f64) -> Self {
        self.current_rate_in_mega_bytes_per_second = Some(input);
        self
    }
    /// <p>Describes the data transfer rate in MB's per second.</p>
    pub fn set_current_rate_in_mega_bytes_per_second(
        mut self,
        input: std::option::Option<f64>,
    ) -> Self {
        self.current_rate_in_mega_bytes_per_second = input;
        self
    }
    /// <p>Describes the total amount of data to be transfered in megabytes.</p>
    pub fn total_data_in_mega_bytes(mut self, input: i64) -> Self {
        self.total_data_in_mega_bytes = Some(input);
        self
    }
    /// <p>Describes the total amount of data to be transfered in megabytes.</p>
    pub fn set_total_data_in_mega_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.total_data_in_mega_bytes = input;
        self
    }
    /// <p>Describes the total amount of data that has been transfered in MB's.</p>
    pub fn data_transferred_in_mega_bytes(mut self, input: i64) -> Self {
        self.data_transferred_in_mega_bytes = Some(input);
        self
    }
    /// <p>Describes the total amount of data that has been transfered in MB's.</p>
    pub fn set_data_transferred_in_mega_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.data_transferred_in_mega_bytes = input;
        self
    }
    /// <p>Describes the estimated number of seconds remaining to complete the transfer.</p>
    pub fn estimated_time_to_completion_in_seconds(mut self, input: i64) -> Self {
        self.estimated_time_to_completion_in_seconds = Some(input);
        self
    }
    /// <p>Describes the estimated number of seconds remaining to complete the transfer.</p>
    pub fn set_estimated_time_to_completion_in_seconds(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.estimated_time_to_completion_in_seconds = input;
        self
    }
    /// <p>Describes the number of seconds that have elapsed during the data transfer.</p>
    pub fn elapsed_time_in_seconds(mut self, input: i64) -> Self {
        self.elapsed_time_in_seconds = Some(input);
        self
    }
    /// <p>Describes the number of seconds that have elapsed during the data transfer.</p>
    pub fn set_elapsed_time_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.elapsed_time_in_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`DataTransferProgress`](crate::types::DataTransferProgress).
    pub fn build(self) -> crate::types::DataTransferProgress {
        crate::types::DataTransferProgress {
            status: self.status,
            current_rate_in_mega_bytes_per_second: self.current_rate_in_mega_bytes_per_second,
            total_data_in_mega_bytes: self.total_data_in_mega_bytes.unwrap_or_default(),
            data_transferred_in_mega_bytes: self.data_transferred_in_mega_bytes.unwrap_or_default(),
            estimated_time_to_completion_in_seconds: self.estimated_time_to_completion_in_seconds,
            elapsed_time_in_seconds: self.elapsed_time_in_seconds,
        }
    }
}
