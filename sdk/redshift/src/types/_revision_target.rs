// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a <code>RevisionTarget</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RevisionTarget {
    /// <p>A unique string that identifies the version to update the cluster to. You can use this value in <code>ModifyClusterDbRevision</code>.</p>
    #[doc(hidden)]
    pub database_revision: std::option::Option<std::string::String>,
    /// <p>A string that describes the changes and features that will be applied to the cluster when it is updated to the corresponding <code>ClusterDbRevision</code>.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The date on which the database revision was released.</p>
    #[doc(hidden)]
    pub database_revision_release_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl RevisionTarget {
    /// <p>A unique string that identifies the version to update the cluster to. You can use this value in <code>ModifyClusterDbRevision</code>.</p>
    pub fn database_revision(&self) -> std::option::Option<&str> {
        self.database_revision.as_deref()
    }
    /// <p>A string that describes the changes and features that will be applied to the cluster when it is updated to the corresponding <code>ClusterDbRevision</code>.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date on which the database revision was released.</p>
    pub fn database_revision_release_date(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.database_revision_release_date.as_ref()
    }
}
impl RevisionTarget {
    /// Creates a new builder-style object to manufacture [`RevisionTarget`](crate::types::RevisionTarget).
    pub fn builder() -> crate::types::builders::RevisionTargetBuilder {
        crate::types::builders::RevisionTargetBuilder::default()
    }
}

/// A builder for [`RevisionTarget`](crate::types::RevisionTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RevisionTargetBuilder {
    pub(crate) database_revision: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) database_revision_release_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl RevisionTargetBuilder {
    /// <p>A unique string that identifies the version to update the cluster to. You can use this value in <code>ModifyClusterDbRevision</code>.</p>
    pub fn database_revision(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_revision = Some(input.into());
        self
    }
    /// <p>A unique string that identifies the version to update the cluster to. You can use this value in <code>ModifyClusterDbRevision</code>.</p>
    pub fn set_database_revision(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.database_revision = input;
        self
    }
    /// <p>A string that describes the changes and features that will be applied to the cluster when it is updated to the corresponding <code>ClusterDbRevision</code>.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A string that describes the changes and features that will be applied to the cluster when it is updated to the corresponding <code>ClusterDbRevision</code>.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The date on which the database revision was released.</p>
    pub fn database_revision_release_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.database_revision_release_date = Some(input);
        self
    }
    /// <p>The date on which the database revision was released.</p>
    pub fn set_database_revision_release_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.database_revision_release_date = input;
        self
    }
    /// Consumes the builder and constructs a [`RevisionTarget`](crate::types::RevisionTarget).
    pub fn build(self) -> crate::types::RevisionTarget {
        crate::types::RevisionTarget {
            database_revision: self.database_revision,
            description: self.description,
            database_revision_release_date: self.database_revision_release_date,
        }
    }
}
