// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an orderable cluster option.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrderableClusterOption {
    /// <p>The version of the orderable cluster.</p>
    pub cluster_version: ::std::option::Option<::std::string::String>,
    /// <p>The cluster type, for example <code>multi-node</code>. </p>
    pub cluster_type: ::std::option::Option<::std::string::String>,
    /// <p>The node type for the orderable cluster.</p>
    pub node_type: ::std::option::Option<::std::string::String>,
    /// <p>A list of availability zones for the orderable cluster.</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>,
}
impl OrderableClusterOption {
    /// <p>The version of the orderable cluster.</p>
    pub fn cluster_version(&self) -> ::std::option::Option<&str> {
        self.cluster_version.as_deref()
    }
    /// <p>The cluster type, for example <code>multi-node</code>. </p>
    pub fn cluster_type(&self) -> ::std::option::Option<&str> {
        self.cluster_type.as_deref()
    }
    /// <p>The node type for the orderable cluster.</p>
    pub fn node_type(&self) -> ::std::option::Option<&str> {
        self.node_type.as_deref()
    }
    /// <p>A list of availability zones for the orderable cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[crate::types::AvailabilityZone] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
}
impl OrderableClusterOption {
    /// Creates a new builder-style object to manufacture [`OrderableClusterOption`](crate::types::OrderableClusterOption).
    pub fn builder() -> crate::types::builders::OrderableClusterOptionBuilder {
        crate::types::builders::OrderableClusterOptionBuilder::default()
    }
}

/// A builder for [`OrderableClusterOption`](crate::types::OrderableClusterOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrderableClusterOptionBuilder {
    pub(crate) cluster_version: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_type: ::std::option::Option<::std::string::String>,
    pub(crate) node_type: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>,
}
impl OrderableClusterOptionBuilder {
    /// <p>The version of the orderable cluster.</p>
    pub fn cluster_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the orderable cluster.</p>
    pub fn set_cluster_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_version = input;
        self
    }
    /// <p>The version of the orderable cluster.</p>
    pub fn get_cluster_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_version
    }
    /// <p>The cluster type, for example <code>multi-node</code>. </p>
    pub fn cluster_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster type, for example <code>multi-node</code>. </p>
    pub fn set_cluster_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_type = input;
        self
    }
    /// <p>The cluster type, for example <code>multi-node</code>. </p>
    pub fn get_cluster_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_type
    }
    /// <p>The node type for the orderable cluster.</p>
    pub fn node_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The node type for the orderable cluster.</p>
    pub fn set_node_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The node type for the orderable cluster.</p>
    pub fn get_node_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_type
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>A list of availability zones for the orderable cluster.</p>
    pub fn availability_zones(mut self, input: crate::types::AvailabilityZone) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input);
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of availability zones for the orderable cluster.</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>A list of availability zones for the orderable cluster.</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>> {
        &self.availability_zones
    }
    /// Consumes the builder and constructs a [`OrderableClusterOption`](crate::types::OrderableClusterOption).
    pub fn build(self) -> crate::types::OrderableClusterOption {
        crate::types::OrderableClusterOption {
            cluster_version: self.cluster_version,
            cluster_type: self.cluster_type,
            node_type: self.node_type,
            availability_zones: self.availability_zones,
        }
    }
}
