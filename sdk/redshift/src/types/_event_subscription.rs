// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes event subscriptions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventSubscription {
    /// <p>The Amazon Web Services account associated with the Amazon Redshift event notification subscription.</p>
    pub customer_aws_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon Redshift event notification subscription.</p>
    pub cust_subscription_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.</p>
    pub sns_topic_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Amazon Redshift event notification subscription.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can be one of the following: active | no-permission | topic-not-exist</p> </li>
    /// <li> <p>The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the Amazon Redshift event notification subscription was created.</p>
    pub subscription_creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The source type of the events returned by the Amazon Redshift event notification, such as cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, or scheduled-action. </p>
    pub source_type: ::std::option::Option<::std::string::String>,
    /// <p>A list of the sources that publish events to the Amazon Redshift event notification subscription.</p>
    pub source_ids_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of Amazon Redshift event categories specified in the event notification subscription.</p>
    /// <p>Values: Configuration, Management, Monitoring, Security, Pending</p>
    pub event_categories_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The event severity specified in the Amazon Redshift event notification subscription.</p>
    /// <p>Values: ERROR, INFO</p>
    pub severity: ::std::option::Option<::std::string::String>,
    /// <p>A boolean value indicating whether the subscription is enabled; <code>true</code> indicates that the subscription is enabled.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The list of tags for the event subscription.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl EventSubscription {
    /// <p>The Amazon Web Services account associated with the Amazon Redshift event notification subscription.</p>
    pub fn customer_aws_id(&self) -> ::std::option::Option<&str> {
        self.customer_aws_id.as_deref()
    }
    /// <p>The name of the Amazon Redshift event notification subscription.</p>
    pub fn cust_subscription_id(&self) -> ::std::option::Option<&str> {
        self.cust_subscription_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.</p>
    pub fn sns_topic_arn(&self) -> ::std::option::Option<&str> {
        self.sns_topic_arn.as_deref()
    }
    /// <p>The status of the Amazon Redshift event notification subscription.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can be one of the following: active | no-permission | topic-not-exist</p> </li>
    /// <li> <p>The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The date and time the Amazon Redshift event notification subscription was created.</p>
    pub fn subscription_creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.subscription_creation_time.as_ref()
    }
    /// <p>The source type of the events returned by the Amazon Redshift event notification, such as cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, or scheduled-action. </p>
    pub fn source_type(&self) -> ::std::option::Option<&str> {
        self.source_type.as_deref()
    }
    /// <p>A list of the sources that publish events to the Amazon Redshift event notification subscription.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_ids_list.is_none()`.
    pub fn source_ids_list(&self) -> &[::std::string::String] {
        self.source_ids_list.as_deref().unwrap_or_default()
    }
    /// <p>The list of Amazon Redshift event categories specified in the event notification subscription.</p>
    /// <p>Values: Configuration, Management, Monitoring, Security, Pending</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_categories_list.is_none()`.
    pub fn event_categories_list(&self) -> &[::std::string::String] {
        self.event_categories_list.as_deref().unwrap_or_default()
    }
    /// <p>The event severity specified in the Amazon Redshift event notification subscription.</p>
    /// <p>Values: ERROR, INFO</p>
    pub fn severity(&self) -> ::std::option::Option<&str> {
        self.severity.as_deref()
    }
    /// <p>A boolean value indicating whether the subscription is enabled; <code>true</code> indicates that the subscription is enabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The list of tags for the event subscription.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl EventSubscription {
    /// Creates a new builder-style object to manufacture [`EventSubscription`](crate::types::EventSubscription).
    pub fn builder() -> crate::types::builders::EventSubscriptionBuilder {
        crate::types::builders::EventSubscriptionBuilder::default()
    }
}

/// A builder for [`EventSubscription`](crate::types::EventSubscription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventSubscriptionBuilder {
    pub(crate) customer_aws_id: ::std::option::Option<::std::string::String>,
    pub(crate) cust_subscription_id: ::std::option::Option<::std::string::String>,
    pub(crate) sns_topic_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) source_type: ::std::option::Option<::std::string::String>,
    pub(crate) source_ids_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) event_categories_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) severity: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl EventSubscriptionBuilder {
    /// <p>The Amazon Web Services account associated with the Amazon Redshift event notification subscription.</p>
    pub fn customer_aws_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_aws_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account associated with the Amazon Redshift event notification subscription.</p>
    pub fn set_customer_aws_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_aws_id = input;
        self
    }
    /// <p>The Amazon Web Services account associated with the Amazon Redshift event notification subscription.</p>
    pub fn get_customer_aws_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_aws_id
    }
    /// <p>The name of the Amazon Redshift event notification subscription.</p>
    pub fn cust_subscription_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cust_subscription_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Redshift event notification subscription.</p>
    pub fn set_cust_subscription_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cust_subscription_id = input;
        self
    }
    /// <p>The name of the Amazon Redshift event notification subscription.</p>
    pub fn get_cust_subscription_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cust_subscription_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.</p>
    pub fn sns_topic_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sns_topic_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.</p>
    pub fn set_sns_topic_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sns_topic_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.</p>
    pub fn get_sns_topic_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.sns_topic_arn
    }
    /// <p>The status of the Amazon Redshift event notification subscription.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can be one of the following: active | no-permission | topic-not-exist</p> </li>
    /// <li> <p>The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.</p> </li>
    /// </ul>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the Amazon Redshift event notification subscription.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can be one of the following: active | no-permission | topic-not-exist</p> </li>
    /// <li> <p>The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Amazon Redshift event notification subscription.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can be one of the following: active | no-permission | topic-not-exist</p> </li>
    /// <li> <p>The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The date and time the Amazon Redshift event notification subscription was created.</p>
    pub fn subscription_creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.subscription_creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the Amazon Redshift event notification subscription was created.</p>
    pub fn set_subscription_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.subscription_creation_time = input;
        self
    }
    /// <p>The date and time the Amazon Redshift event notification subscription was created.</p>
    pub fn get_subscription_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.subscription_creation_time
    }
    /// <p>The source type of the events returned by the Amazon Redshift event notification, such as cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, or scheduled-action. </p>
    pub fn source_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source type of the events returned by the Amazon Redshift event notification, such as cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, or scheduled-action. </p>
    pub fn set_source_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The source type of the events returned by the Amazon Redshift event notification, such as cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, or scheduled-action. </p>
    pub fn get_source_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_type
    }
    /// Appends an item to `source_ids_list`.
    ///
    /// To override the contents of this collection use [`set_source_ids_list`](Self::set_source_ids_list).
    ///
    /// <p>A list of the sources that publish events to the Amazon Redshift event notification subscription.</p>
    pub fn source_ids_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_ids_list.unwrap_or_default();
        v.push(input.into());
        self.source_ids_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the sources that publish events to the Amazon Redshift event notification subscription.</p>
    pub fn set_source_ids_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_ids_list = input;
        self
    }
    /// <p>A list of the sources that publish events to the Amazon Redshift event notification subscription.</p>
    pub fn get_source_ids_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_ids_list
    }
    /// Appends an item to `event_categories_list`.
    ///
    /// To override the contents of this collection use [`set_event_categories_list`](Self::set_event_categories_list).
    ///
    /// <p>The list of Amazon Redshift event categories specified in the event notification subscription.</p>
    /// <p>Values: Configuration, Management, Monitoring, Security, Pending</p>
    pub fn event_categories_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.event_categories_list.unwrap_or_default();
        v.push(input.into());
        self.event_categories_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Amazon Redshift event categories specified in the event notification subscription.</p>
    /// <p>Values: Configuration, Management, Monitoring, Security, Pending</p>
    pub fn set_event_categories_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.event_categories_list = input;
        self
    }
    /// <p>The list of Amazon Redshift event categories specified in the event notification subscription.</p>
    /// <p>Values: Configuration, Management, Monitoring, Security, Pending</p>
    pub fn get_event_categories_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.event_categories_list
    }
    /// <p>The event severity specified in the Amazon Redshift event notification subscription.</p>
    /// <p>Values: ERROR, INFO</p>
    pub fn severity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.severity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The event severity specified in the Amazon Redshift event notification subscription.</p>
    /// <p>Values: ERROR, INFO</p>
    pub fn set_severity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The event severity specified in the Amazon Redshift event notification subscription.</p>
    /// <p>Values: ERROR, INFO</p>
    pub fn get_severity(&self) -> &::std::option::Option<::std::string::String> {
        &self.severity
    }
    /// <p>A boolean value indicating whether the subscription is enabled; <code>true</code> indicates that the subscription is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean value indicating whether the subscription is enabled; <code>true</code> indicates that the subscription is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>A boolean value indicating whether the subscription is enabled; <code>true</code> indicates that the subscription is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tags for the event subscription.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of tags for the event subscription.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tags for the event subscription.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`EventSubscription`](crate::types::EventSubscription).
    pub fn build(self) -> crate::types::EventSubscription {
        crate::types::EventSubscription {
            customer_aws_id: self.customer_aws_id,
            cust_subscription_id: self.cust_subscription_id,
            sns_topic_arn: self.sns_topic_arn,
            status: self.status,
            subscription_creation_time: self.subscription_creation_time,
            source_type: self.source_type,
            source_ids_list: self.source_ids_list,
            event_categories_list: self.event_categories_list,
            severity: self.severity,
            enabled: self.enabled,
            tags: self.tags,
        }
    }
}
