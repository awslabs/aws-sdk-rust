// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataShare {
    /// <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    pub data_share_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the producer.</p>
    pub producer_arn: ::std::option::Option<::std::string::String>,
    /// <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    pub allow_publicly_accessible_consumers: ::std::option::Option<bool>,
    /// <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    pub data_share_associations: ::std::option::Option<::std::vec::Vec<crate::types::DataShareAssociation>>,
    /// <p>The identifier of a datashare to show its managing entity.</p>
    pub managed_by: ::std::option::Option<::std::string::String>,
}
impl DataShare {
    /// <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    pub fn data_share_arn(&self) -> ::std::option::Option<&str> {
        self.data_share_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the producer.</p>
    pub fn producer_arn(&self) -> ::std::option::Option<&str> {
        self.producer_arn.as_deref()
    }
    /// <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    pub fn allow_publicly_accessible_consumers(&self) -> ::std::option::Option<bool> {
        self.allow_publicly_accessible_consumers
    }
    /// <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.data_share_associations.is_none()`.
    pub fn data_share_associations(&self) -> &[crate::types::DataShareAssociation] {
        self.data_share_associations.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of a datashare to show its managing entity.</p>
    pub fn managed_by(&self) -> ::std::option::Option<&str> {
        self.managed_by.as_deref()
    }
}
impl DataShare {
    /// Creates a new builder-style object to manufacture [`DataShare`](crate::types::DataShare).
    pub fn builder() -> crate::types::builders::DataShareBuilder {
        crate::types::builders::DataShareBuilder::default()
    }
}

/// A builder for [`DataShare`](crate::types::DataShare).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataShareBuilder {
    pub(crate) data_share_arn: ::std::option::Option<::std::string::String>,
    pub(crate) producer_arn: ::std::option::Option<::std::string::String>,
    pub(crate) allow_publicly_accessible_consumers: ::std::option::Option<bool>,
    pub(crate) data_share_associations: ::std::option::Option<::std::vec::Vec<crate::types::DataShareAssociation>>,
    pub(crate) managed_by: ::std::option::Option<::std::string::String>,
}
impl DataShareBuilder {
    /// <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    pub fn data_share_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_share_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    pub fn set_data_share_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_share_arn = input;
        self
    }
    /// <p>An Amazon Resource Name (ARN) that references the datashare that is owned by a specific namespace of the producer cluster. A datashare ARN is in the <code>arn:aws:redshift:{region}:{account-id}:{datashare}:{namespace-guid}/{datashare-name}</code> format.</p>
    pub fn get_data_share_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_share_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the producer.</p>
    pub fn producer_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.producer_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the producer.</p>
    pub fn set_producer_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.producer_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the producer.</p>
    pub fn get_producer_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.producer_arn
    }
    /// <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    pub fn allow_publicly_accessible_consumers(mut self, input: bool) -> Self {
        self.allow_publicly_accessible_consumers = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    pub fn set_allow_publicly_accessible_consumers(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_publicly_accessible_consumers = input;
        self
    }
    /// <p>A value that specifies whether the datashare can be shared to a publicly accessible cluster.</p>
    pub fn get_allow_publicly_accessible_consumers(&self) -> &::std::option::Option<bool> {
        &self.allow_publicly_accessible_consumers
    }
    /// Appends an item to `data_share_associations`.
    ///
    /// To override the contents of this collection use [`set_data_share_associations`](Self::set_data_share_associations).
    ///
    /// <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    pub fn data_share_associations(mut self, input: crate::types::DataShareAssociation) -> Self {
        let mut v = self.data_share_associations.unwrap_or_default();
        v.push(input);
        self.data_share_associations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    pub fn set_data_share_associations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataShareAssociation>>) -> Self {
        self.data_share_associations = input;
        self
    }
    /// <p>A value that specifies when the datashare has an association between producer and data consumers.</p>
    pub fn get_data_share_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataShareAssociation>> {
        &self.data_share_associations
    }
    /// <p>The identifier of a datashare to show its managing entity.</p>
    pub fn managed_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a datashare to show its managing entity.</p>
    pub fn set_managed_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_by = input;
        self
    }
    /// <p>The identifier of a datashare to show its managing entity.</p>
    pub fn get_managed_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_by
    }
    /// Consumes the builder and constructs a [`DataShare`](crate::types::DataShare).
    pub fn build(self) -> crate::types::DataShare {
        crate::types::DataShare {
            data_share_arn: self.data_share_arn,
            producer_arn: self.producer_arn,
            allow_publicly_accessible_consumers: self.allow_publicly_accessible_consumers,
            data_share_associations: self.data_share_associations,
            managed_by: self.managed_by,
        }
    }
}
