// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of node configurations.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NodeConfigurationOption {
    /// <p>The node type, such as, "ds2.8xlarge".</p>
    #[doc(hidden)]
    pub node_type: std::option::Option<std::string::String>,
    /// <p>The number of nodes.</p>
    #[doc(hidden)]
    pub number_of_nodes: i32,
    /// <p>The estimated disk utilizaton percentage.</p>
    #[doc(hidden)]
    pub estimated_disk_utilization_percent: std::option::Option<f64>,
    /// <p>The category of the node configuration recommendation.</p>
    #[doc(hidden)]
    pub mode: std::option::Option<crate::types::Mode>,
}
impl NodeConfigurationOption {
    /// <p>The node type, such as, "ds2.8xlarge".</p>
    pub fn node_type(&self) -> std::option::Option<&str> {
        self.node_type.as_deref()
    }
    /// <p>The number of nodes.</p>
    pub fn number_of_nodes(&self) -> i32 {
        self.number_of_nodes
    }
    /// <p>The estimated disk utilizaton percentage.</p>
    pub fn estimated_disk_utilization_percent(&self) -> std::option::Option<f64> {
        self.estimated_disk_utilization_percent
    }
    /// <p>The category of the node configuration recommendation.</p>
    pub fn mode(&self) -> std::option::Option<&crate::types::Mode> {
        self.mode.as_ref()
    }
}
impl NodeConfigurationOption {
    /// Creates a new builder-style object to manufacture [`NodeConfigurationOption`](crate::types::NodeConfigurationOption).
    pub fn builder() -> crate::types::builders::NodeConfigurationOptionBuilder {
        crate::types::builders::NodeConfigurationOptionBuilder::default()
    }
}

/// A builder for [`NodeConfigurationOption`](crate::types::NodeConfigurationOption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodeConfigurationOptionBuilder {
    pub(crate) node_type: std::option::Option<std::string::String>,
    pub(crate) number_of_nodes: std::option::Option<i32>,
    pub(crate) estimated_disk_utilization_percent: std::option::Option<f64>,
    pub(crate) mode: std::option::Option<crate::types::Mode>,
}
impl NodeConfigurationOptionBuilder {
    /// <p>The node type, such as, "ds2.8xlarge".</p>
    pub fn node_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_type = Some(input.into());
        self
    }
    /// <p>The node type, such as, "ds2.8xlarge".</p>
    pub fn set_node_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The number of nodes.</p>
    pub fn number_of_nodes(mut self, input: i32) -> Self {
        self.number_of_nodes = Some(input);
        self
    }
    /// <p>The number of nodes.</p>
    pub fn set_number_of_nodes(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_nodes = input;
        self
    }
    /// <p>The estimated disk utilizaton percentage.</p>
    pub fn estimated_disk_utilization_percent(mut self, input: f64) -> Self {
        self.estimated_disk_utilization_percent = Some(input);
        self
    }
    /// <p>The estimated disk utilizaton percentage.</p>
    pub fn set_estimated_disk_utilization_percent(
        mut self,
        input: std::option::Option<f64>,
    ) -> Self {
        self.estimated_disk_utilization_percent = input;
        self
    }
    /// <p>The category of the node configuration recommendation.</p>
    pub fn mode(mut self, input: crate::types::Mode) -> Self {
        self.mode = Some(input);
        self
    }
    /// <p>The category of the node configuration recommendation.</p>
    pub fn set_mode(mut self, input: std::option::Option<crate::types::Mode>) -> Self {
        self.mode = input;
        self
    }
    /// Consumes the builder and constructs a [`NodeConfigurationOption`](crate::types::NodeConfigurationOption).
    pub fn build(self) -> crate::types::NodeConfigurationOption {
        crate::types::NodeConfigurationOption {
            node_type: self.node_type,
            number_of_nodes: self.number_of_nodes.unwrap_or_default(),
            estimated_disk_utilization_percent: self.estimated_disk_utilization_percent,
            mode: self.mode,
        }
    }
}
