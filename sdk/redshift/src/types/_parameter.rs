// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a parameter in a cluster parameter group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Parameter {
    /// <p>The name of the parameter.</p>
    #[doc(hidden)]
    pub parameter_name: std::option::Option<std::string::String>,
    /// <p>The value of the parameter. If <code>ParameterName</code> is <code>wlm_json_configuration</code>, then the maximum size of <code>ParameterValue</code> is 8000 characters.</p>
    #[doc(hidden)]
    pub parameter_value: std::option::Option<std::string::String>,
    /// <p>A description of the parameter.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The source of the parameter value, such as "engine-default" or "user".</p>
    #[doc(hidden)]
    pub source: std::option::Option<std::string::String>,
    /// <p>The data type of the parameter.</p>
    #[doc(hidden)]
    pub data_type: std::option::Option<std::string::String>,
    /// <p>The valid range of values for the parameter.</p>
    #[doc(hidden)]
    pub allowed_values: std::option::Option<std::string::String>,
    /// <p>Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
    #[doc(hidden)]
    pub apply_type: std::option::Option<crate::types::ParameterApplyType>,
    /// <p>If <code>true</code>, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. </p>
    #[doc(hidden)]
    pub is_modifiable: bool,
    /// <p>The earliest engine version to which the parameter can apply.</p>
    #[doc(hidden)]
    pub minimum_engine_version: std::option::Option<std::string::String>,
}
impl Parameter {
    /// <p>The name of the parameter.</p>
    pub fn parameter_name(&self) -> std::option::Option<&str> {
        self.parameter_name.as_deref()
    }
    /// <p>The value of the parameter. If <code>ParameterName</code> is <code>wlm_json_configuration</code>, then the maximum size of <code>ParameterValue</code> is 8000 characters.</p>
    pub fn parameter_value(&self) -> std::option::Option<&str> {
        self.parameter_value.as_deref()
    }
    /// <p>A description of the parameter.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The source of the parameter value, such as "engine-default" or "user".</p>
    pub fn source(&self) -> std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>The data type of the parameter.</p>
    pub fn data_type(&self) -> std::option::Option<&str> {
        self.data_type.as_deref()
    }
    /// <p>The valid range of values for the parameter.</p>
    pub fn allowed_values(&self) -> std::option::Option<&str> {
        self.allowed_values.as_deref()
    }
    /// <p>Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
    pub fn apply_type(&self) -> std::option::Option<&crate::types::ParameterApplyType> {
        self.apply_type.as_ref()
    }
    /// <p>If <code>true</code>, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. </p>
    pub fn is_modifiable(&self) -> bool {
        self.is_modifiable
    }
    /// <p>The earliest engine version to which the parameter can apply.</p>
    pub fn minimum_engine_version(&self) -> std::option::Option<&str> {
        self.minimum_engine_version.as_deref()
    }
}
impl Parameter {
    /// Creates a new builder-style object to manufacture [`Parameter`](crate::types::Parameter).
    pub fn builder() -> crate::types::builders::ParameterBuilder {
        crate::types::builders::ParameterBuilder::default()
    }
}

/// A builder for [`Parameter`](crate::types::Parameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParameterBuilder {
    pub(crate) parameter_name: std::option::Option<std::string::String>,
    pub(crate) parameter_value: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<std::string::String>,
    pub(crate) data_type: std::option::Option<std::string::String>,
    pub(crate) allowed_values: std::option::Option<std::string::String>,
    pub(crate) apply_type: std::option::Option<crate::types::ParameterApplyType>,
    pub(crate) is_modifiable: std::option::Option<bool>,
    pub(crate) minimum_engine_version: std::option::Option<std::string::String>,
}
impl ParameterBuilder {
    /// <p>The name of the parameter.</p>
    pub fn parameter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_name = Some(input.into());
        self
    }
    /// <p>The name of the parameter.</p>
    pub fn set_parameter_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter_name = input;
        self
    }
    /// <p>The value of the parameter. If <code>ParameterName</code> is <code>wlm_json_configuration</code>, then the maximum size of <code>ParameterValue</code> is 8000 characters.</p>
    pub fn parameter_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_value = Some(input.into());
        self
    }
    /// <p>The value of the parameter. If <code>ParameterName</code> is <code>wlm_json_configuration</code>, then the maximum size of <code>ParameterValue</code> is 8000 characters.</p>
    pub fn set_parameter_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter_value = input;
        self
    }
    /// <p>A description of the parameter.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the parameter.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The source of the parameter value, such as "engine-default" or "user".</p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.source = Some(input.into());
        self
    }
    /// <p>The source of the parameter value, such as "engine-default" or "user".</p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The data type of the parameter.</p>
    pub fn data_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_type = Some(input.into());
        self
    }
    /// <p>The data type of the parameter.</p>
    pub fn set_data_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>The valid range of values for the parameter.</p>
    pub fn allowed_values(mut self, input: impl Into<std::string::String>) -> Self {
        self.allowed_values = Some(input.into());
        self
    }
    /// <p>The valid range of values for the parameter.</p>
    pub fn set_allowed_values(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.allowed_values = input;
        self
    }
    /// <p>Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
    pub fn apply_type(mut self, input: crate::types::ParameterApplyType) -> Self {
        self.apply_type = Some(input);
        self
    }
    /// <p>Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
    pub fn set_apply_type(
        mut self,
        input: std::option::Option<crate::types::ParameterApplyType>,
    ) -> Self {
        self.apply_type = input;
        self
    }
    /// <p>If <code>true</code>, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. </p>
    pub fn is_modifiable(mut self, input: bool) -> Self {
        self.is_modifiable = Some(input);
        self
    }
    /// <p>If <code>true</code>, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. </p>
    pub fn set_is_modifiable(mut self, input: std::option::Option<bool>) -> Self {
        self.is_modifiable = input;
        self
    }
    /// <p>The earliest engine version to which the parameter can apply.</p>
    pub fn minimum_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.minimum_engine_version = Some(input.into());
        self
    }
    /// <p>The earliest engine version to which the parameter can apply.</p>
    pub fn set_minimum_engine_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.minimum_engine_version = input;
        self
    }
    /// Consumes the builder and constructs a [`Parameter`](crate::types::Parameter).
    pub fn build(self) -> crate::types::Parameter {
        crate::types::Parameter {
            parameter_name: self.parameter_name,
            parameter_value: self.parameter_value,
            description: self.description,
            source: self.source,
            data_type: self.data_type,
            allowed_values: self.allowed_values,
            apply_type: self.apply_type,
            is_modifiable: self.is_modifiable.unwrap_or_default(),
            minimum_engine_version: self.minimum_engine_version,
        }
    }
}
