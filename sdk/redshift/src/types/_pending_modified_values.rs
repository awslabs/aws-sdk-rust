// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes cluster attributes that are in a pending state. A change to one or more the attributes was requested and is in progress or will be applied.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PendingModifiedValues {
    /// <p>The pending or in-progress change of the admin user password for the cluster.</p>
    #[doc(hidden)]
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>The pending or in-progress change of the cluster's node type.</p>
    #[doc(hidden)]
    pub node_type: std::option::Option<std::string::String>,
    /// <p>The pending or in-progress change of the number of nodes in the cluster.</p>
    #[doc(hidden)]
    pub number_of_nodes: std::option::Option<i32>,
    /// <p>The pending or in-progress change of the cluster type.</p>
    #[doc(hidden)]
    pub cluster_type: std::option::Option<std::string::String>,
    /// <p>The pending or in-progress change of the service version.</p>
    #[doc(hidden)]
    pub cluster_version: std::option::Option<std::string::String>,
    /// <p>The pending or in-progress change of the automated snapshot retention period.</p>
    #[doc(hidden)]
    pub automated_snapshot_retention_period: std::option::Option<i32>,
    /// <p>The pending or in-progress change of the new identifier for the cluster.</p>
    #[doc(hidden)]
    pub cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The pending or in-progress change of the ability to connect to the cluster from the public network.</p>
    #[doc(hidden)]
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p>
    /// <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p>
    /// <p>Default: false</p>
    #[doc(hidden)]
    pub enhanced_vpc_routing: std::option::Option<bool>,
    /// <p>The name of the maintenance track that the cluster will change to during the next maintenance window.</p>
    #[doc(hidden)]
    pub maintenance_track_name: std::option::Option<std::string::String>,
    /// <p>The encryption type for a cluster. Possible values are: KMS and None. </p>
    #[doc(hidden)]
    pub encryption_type: std::option::Option<std::string::String>,
}
impl PendingModifiedValues {
    /// <p>The pending or in-progress change of the admin user password for the cluster.</p>
    pub fn master_user_password(&self) -> std::option::Option<&str> {
        self.master_user_password.as_deref()
    }
    /// <p>The pending or in-progress change of the cluster's node type.</p>
    pub fn node_type(&self) -> std::option::Option<&str> {
        self.node_type.as_deref()
    }
    /// <p>The pending or in-progress change of the number of nodes in the cluster.</p>
    pub fn number_of_nodes(&self) -> std::option::Option<i32> {
        self.number_of_nodes
    }
    /// <p>The pending or in-progress change of the cluster type.</p>
    pub fn cluster_type(&self) -> std::option::Option<&str> {
        self.cluster_type.as_deref()
    }
    /// <p>The pending or in-progress change of the service version.</p>
    pub fn cluster_version(&self) -> std::option::Option<&str> {
        self.cluster_version.as_deref()
    }
    /// <p>The pending or in-progress change of the automated snapshot retention period.</p>
    pub fn automated_snapshot_retention_period(&self) -> std::option::Option<i32> {
        self.automated_snapshot_retention_period
    }
    /// <p>The pending or in-progress change of the new identifier for the cluster.</p>
    pub fn cluster_identifier(&self) -> std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>The pending or in-progress change of the ability to connect to the cluster from the public network.</p>
    pub fn publicly_accessible(&self) -> std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p>
    /// <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p>
    /// <p>Default: false</p>
    pub fn enhanced_vpc_routing(&self) -> std::option::Option<bool> {
        self.enhanced_vpc_routing
    }
    /// <p>The name of the maintenance track that the cluster will change to during the next maintenance window.</p>
    pub fn maintenance_track_name(&self) -> std::option::Option<&str> {
        self.maintenance_track_name.as_deref()
    }
    /// <p>The encryption type for a cluster. Possible values are: KMS and None. </p>
    pub fn encryption_type(&self) -> std::option::Option<&str> {
        self.encryption_type.as_deref()
    }
}
impl PendingModifiedValues {
    /// Creates a new builder-style object to manufacture [`PendingModifiedValues`](crate::types::PendingModifiedValues).
    pub fn builder() -> crate::types::builders::PendingModifiedValuesBuilder {
        crate::types::builders::PendingModifiedValuesBuilder::default()
    }
}

/// A builder for [`PendingModifiedValues`](crate::types::PendingModifiedValues).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PendingModifiedValuesBuilder {
    pub(crate) master_user_password: std::option::Option<std::string::String>,
    pub(crate) node_type: std::option::Option<std::string::String>,
    pub(crate) number_of_nodes: std::option::Option<i32>,
    pub(crate) cluster_type: std::option::Option<std::string::String>,
    pub(crate) cluster_version: std::option::Option<std::string::String>,
    pub(crate) automated_snapshot_retention_period: std::option::Option<i32>,
    pub(crate) cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) publicly_accessible: std::option::Option<bool>,
    pub(crate) enhanced_vpc_routing: std::option::Option<bool>,
    pub(crate) maintenance_track_name: std::option::Option<std::string::String>,
    pub(crate) encryption_type: std::option::Option<std::string::String>,
}
impl PendingModifiedValuesBuilder {
    /// <p>The pending or in-progress change of the admin user password for the cluster.</p>
    pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_user_password = Some(input.into());
        self
    }
    /// <p>The pending or in-progress change of the admin user password for the cluster.</p>
    pub fn set_master_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_user_password = input;
        self
    }
    /// <p>The pending or in-progress change of the cluster's node type.</p>
    pub fn node_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_type = Some(input.into());
        self
    }
    /// <p>The pending or in-progress change of the cluster's node type.</p>
    pub fn set_node_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The pending or in-progress change of the number of nodes in the cluster.</p>
    pub fn number_of_nodes(mut self, input: i32) -> Self {
        self.number_of_nodes = Some(input);
        self
    }
    /// <p>The pending or in-progress change of the number of nodes in the cluster.</p>
    pub fn set_number_of_nodes(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_nodes = input;
        self
    }
    /// <p>The pending or in-progress change of the cluster type.</p>
    pub fn cluster_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_type = Some(input.into());
        self
    }
    /// <p>The pending or in-progress change of the cluster type.</p>
    pub fn set_cluster_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_type = input;
        self
    }
    /// <p>The pending or in-progress change of the service version.</p>
    pub fn cluster_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_version = Some(input.into());
        self
    }
    /// <p>The pending or in-progress change of the service version.</p>
    pub fn set_cluster_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_version = input;
        self
    }
    /// <p>The pending or in-progress change of the automated snapshot retention period.</p>
    pub fn automated_snapshot_retention_period(mut self, input: i32) -> Self {
        self.automated_snapshot_retention_period = Some(input);
        self
    }
    /// <p>The pending or in-progress change of the automated snapshot retention period.</p>
    pub fn set_automated_snapshot_retention_period(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.automated_snapshot_retention_period = input;
        self
    }
    /// <p>The pending or in-progress change of the new identifier for the cluster.</p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_identifier = Some(input.into());
        self
    }
    /// <p>The pending or in-progress change of the new identifier for the cluster.</p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>The pending or in-progress change of the ability to connect to the cluster from the public network.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = Some(input);
        self
    }
    /// <p>The pending or in-progress change of the ability to connect to the cluster from the public network.</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p>
    /// <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p>
    /// <p>Default: false</p>
    pub fn enhanced_vpc_routing(mut self, input: bool) -> Self {
        self.enhanced_vpc_routing = Some(input);
        self
    }
    /// <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p>
    /// <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p>
    /// <p>Default: false</p>
    pub fn set_enhanced_vpc_routing(mut self, input: std::option::Option<bool>) -> Self {
        self.enhanced_vpc_routing = input;
        self
    }
    /// <p>The name of the maintenance track that the cluster will change to during the next maintenance window.</p>
    pub fn maintenance_track_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.maintenance_track_name = Some(input.into());
        self
    }
    /// <p>The name of the maintenance track that the cluster will change to during the next maintenance window.</p>
    pub fn set_maintenance_track_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.maintenance_track_name = input;
        self
    }
    /// <p>The encryption type for a cluster. Possible values are: KMS and None. </p>
    pub fn encryption_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_type = Some(input.into());
        self
    }
    /// <p>The encryption type for a cluster. Possible values are: KMS and None. </p>
    pub fn set_encryption_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_type = input;
        self
    }
    /// Consumes the builder and constructs a [`PendingModifiedValues`](crate::types::PendingModifiedValues).
    pub fn build(self) -> crate::types::PendingModifiedValues {
        crate::types::PendingModifiedValues {
            master_user_password: self.master_user_password,
            node_type: self.node_type,
            number_of_nodes: self.number_of_nodes,
            cluster_type: self.cluster_type,
            cluster_version: self.cluster_version,
            automated_snapshot_retention_period: self.automated_snapshot_retention_period,
            cluster_identifier: self.cluster_identifier,
            publicly_accessible: self.publicly_accessible,
            enhanced_vpc_routing: self.enhanced_vpc_routing,
            maintenance_track_name: self.maintenance_track_name,
            encryption_type: self.encryption_type,
        }
    }
}
