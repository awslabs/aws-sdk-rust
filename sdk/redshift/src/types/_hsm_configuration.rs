// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HsmConfiguration {
    /// <p>The name of the Amazon Redshift HSM configuration.</p>
    pub hsm_configuration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A text description of the HSM configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The IP address that the Amazon Redshift cluster must use to access the HSM.</p>
    pub hsm_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.</p>
    pub hsm_partition_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of tags for the HSM configuration.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl HsmConfiguration {
    /// <p>The name of the Amazon Redshift HSM configuration.</p>
    pub fn hsm_configuration_identifier(&self) -> ::std::option::Option<&str> {
        self.hsm_configuration_identifier.as_deref()
    }
    /// <p>A text description of the HSM configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The IP address that the Amazon Redshift cluster must use to access the HSM.</p>
    pub fn hsm_ip_address(&self) -> ::std::option::Option<&str> {
        self.hsm_ip_address.as_deref()
    }
    /// <p>The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.</p>
    pub fn hsm_partition_name(&self) -> ::std::option::Option<&str> {
        self.hsm_partition_name.as_deref()
    }
    /// <p>The list of tags for the HSM configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl HsmConfiguration {
    /// Creates a new builder-style object to manufacture [`HsmConfiguration`](crate::types::HsmConfiguration).
    pub fn builder() -> crate::types::builders::HsmConfigurationBuilder {
        crate::types::builders::HsmConfigurationBuilder::default()
    }
}

/// A builder for [`HsmConfiguration`](crate::types::HsmConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HsmConfigurationBuilder {
    pub(crate) hsm_configuration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) hsm_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) hsm_partition_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl HsmConfigurationBuilder {
    /// <p>The name of the Amazon Redshift HSM configuration.</p>
    pub fn hsm_configuration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hsm_configuration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Redshift HSM configuration.</p>
    pub fn set_hsm_configuration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hsm_configuration_identifier = input;
        self
    }
    /// <p>The name of the Amazon Redshift HSM configuration.</p>
    pub fn get_hsm_configuration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.hsm_configuration_identifier
    }
    /// <p>A text description of the HSM configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A text description of the HSM configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A text description of the HSM configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The IP address that the Amazon Redshift cluster must use to access the HSM.</p>
    pub fn hsm_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hsm_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address that the Amazon Redshift cluster must use to access the HSM.</p>
    pub fn set_hsm_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hsm_ip_address = input;
        self
    }
    /// <p>The IP address that the Amazon Redshift cluster must use to access the HSM.</p>
    pub fn get_hsm_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.hsm_ip_address
    }
    /// <p>The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.</p>
    pub fn hsm_partition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hsm_partition_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.</p>
    pub fn set_hsm_partition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hsm_partition_name = input;
        self
    }
    /// <p>The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.</p>
    pub fn get_hsm_partition_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.hsm_partition_name
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tags for the HSM configuration.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of tags for the HSM configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tags for the HSM configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`HsmConfiguration`](crate::types::HsmConfiguration).
    pub fn build(self) -> crate::types::HsmConfiguration {
        crate::types::HsmConfiguration {
            hsm_configuration_identifier: self.hsm_configuration_identifier,
            description: self.description,
            hsm_ip_address: self.hsm_ip_address,
            hsm_partition_name: self.hsm_partition_name,
            tags: self.tags,
        }
    }
}
