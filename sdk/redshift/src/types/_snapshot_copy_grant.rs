// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified encrypted symmetric key from Amazon Web Services KMS in the destination region.</p>
/// <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SnapshotCopyGrant {
    /// <p>The name of the snapshot copy grant.</p>
    #[doc(hidden)]
    pub snapshot_copy_grant_name: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the encrypted symmetric key in Amazon Web Services KMS to which Amazon Redshift is granted permission.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>A list of tag instances.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl SnapshotCopyGrant {
    /// <p>The name of the snapshot copy grant.</p>
    pub fn snapshot_copy_grant_name(&self) -> std::option::Option<&str> {
        self.snapshot_copy_grant_name.as_deref()
    }
    /// <p>The unique identifier of the encrypted symmetric key in Amazon Web Services KMS to which Amazon Redshift is granted permission.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>A list of tag instances.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl SnapshotCopyGrant {
    /// Creates a new builder-style object to manufacture [`SnapshotCopyGrant`](crate::types::SnapshotCopyGrant).
    pub fn builder() -> crate::types::builders::SnapshotCopyGrantBuilder {
        crate::types::builders::SnapshotCopyGrantBuilder::default()
    }
}

/// A builder for [`SnapshotCopyGrant`](crate::types::SnapshotCopyGrant).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SnapshotCopyGrantBuilder {
    pub(crate) snapshot_copy_grant_name: std::option::Option<std::string::String>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl SnapshotCopyGrantBuilder {
    /// <p>The name of the snapshot copy grant.</p>
    pub fn snapshot_copy_grant_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_copy_grant_name = Some(input.into());
        self
    }
    /// <p>The name of the snapshot copy grant.</p>
    pub fn set_snapshot_copy_grant_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.snapshot_copy_grant_name = input;
        self
    }
    /// <p>The unique identifier of the encrypted symmetric key in Amazon Web Services KMS to which Amazon Redshift is granted permission.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the encrypted symmetric key in Amazon Web Services KMS to which Amazon Redshift is granted permission.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tag instances.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tag instances.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`SnapshotCopyGrant`](crate::types::SnapshotCopyGrant).
    pub fn build(self) -> crate::types::SnapshotCopyGrant {
        crate::types::SnapshotCopyGrant {
            snapshot_copy_grant_name: self.snapshot_copy_grant_name,
            kms_key_id: self.kms_key_id,
            tags: self.tags,
        }
    }
}
