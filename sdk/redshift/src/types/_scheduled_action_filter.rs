// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of elements to filter the returned scheduled actions. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduledActionFilter {
    /// <p>The type of element to filter. </p>
    pub name: ::std::option::Option<crate::types::ScheduledActionFilterName>,
    /// <p>List of values. Compare if the value (of type defined by <code>Name</code>) equals an item in the list of scheduled actions. </p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ScheduledActionFilter {
    /// <p>The type of element to filter. </p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::ScheduledActionFilterName> {
        self.name.as_ref()
    }
    /// <p>List of values. Compare if the value (of type defined by <code>Name</code>) equals an item in the list of scheduled actions. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl ScheduledActionFilter {
    /// Creates a new builder-style object to manufacture [`ScheduledActionFilter`](crate::types::ScheduledActionFilter).
    pub fn builder() -> crate::types::builders::ScheduledActionFilterBuilder {
        crate::types::builders::ScheduledActionFilterBuilder::default()
    }
}

/// A builder for [`ScheduledActionFilter`](crate::types::ScheduledActionFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScheduledActionFilterBuilder {
    pub(crate) name: ::std::option::Option<crate::types::ScheduledActionFilterName>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ScheduledActionFilterBuilder {
    /// <p>The type of element to filter. </p>
    /// This field is required.
    pub fn name(mut self, input: crate::types::ScheduledActionFilterName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of element to filter. </p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::ScheduledActionFilterName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of element to filter. </p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::ScheduledActionFilterName> {
        &self.name
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>List of values. Compare if the value (of type defined by <code>Name</code>) equals an item in the list of scheduled actions. </p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of values. Compare if the value (of type defined by <code>Name</code>) equals an item in the list of scheduled actions. </p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>List of values. Compare if the value (of type defined by <code>Name</code>) equals an item in the list of scheduled actions. </p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`ScheduledActionFilter`](crate::types::ScheduledActionFilter).
    pub fn build(self) -> crate::types::ScheduledActionFilter {
        crate::types::ScheduledActionFilter {
            name: self.name,
            values: self.values,
        }
    }
}
