// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a maintenance track that determines which Amazon Redshift version to apply during a maintenance window. If the value for <code>MaintenanceTrack</code> is <code>current</code>, the cluster is updated to the most recently certified maintenance release. If the value is <code>trailing</code>, the cluster is updated to the previously certified maintenance release. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MaintenanceTrack {
    /// <p>The name of the maintenance track. Possible values are <code>current</code> and <code>trailing</code>.</p>
    #[doc(hidden)]
    pub maintenance_track_name: std::option::Option<std::string::String>,
    /// <p>The version number for the cluster release.</p>
    #[doc(hidden)]
    pub database_version: std::option::Option<std::string::String>,
    /// <p>An array of <code>UpdateTarget</code> objects to update with the maintenance track. </p>
    #[doc(hidden)]
    pub update_targets: std::option::Option<std::vec::Vec<crate::types::UpdateTarget>>,
}
impl MaintenanceTrack {
    /// <p>The name of the maintenance track. Possible values are <code>current</code> and <code>trailing</code>.</p>
    pub fn maintenance_track_name(&self) -> std::option::Option<&str> {
        self.maintenance_track_name.as_deref()
    }
    /// <p>The version number for the cluster release.</p>
    pub fn database_version(&self) -> std::option::Option<&str> {
        self.database_version.as_deref()
    }
    /// <p>An array of <code>UpdateTarget</code> objects to update with the maintenance track. </p>
    pub fn update_targets(&self) -> std::option::Option<&[crate::types::UpdateTarget]> {
        self.update_targets.as_deref()
    }
}
impl MaintenanceTrack {
    /// Creates a new builder-style object to manufacture [`MaintenanceTrack`](crate::types::MaintenanceTrack).
    pub fn builder() -> crate::types::builders::MaintenanceTrackBuilder {
        crate::types::builders::MaintenanceTrackBuilder::default()
    }
}

/// A builder for [`MaintenanceTrack`](crate::types::MaintenanceTrack).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MaintenanceTrackBuilder {
    pub(crate) maintenance_track_name: std::option::Option<std::string::String>,
    pub(crate) database_version: std::option::Option<std::string::String>,
    pub(crate) update_targets: std::option::Option<std::vec::Vec<crate::types::UpdateTarget>>,
}
impl MaintenanceTrackBuilder {
    /// <p>The name of the maintenance track. Possible values are <code>current</code> and <code>trailing</code>.</p>
    pub fn maintenance_track_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.maintenance_track_name = Some(input.into());
        self
    }
    /// <p>The name of the maintenance track. Possible values are <code>current</code> and <code>trailing</code>.</p>
    pub fn set_maintenance_track_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.maintenance_track_name = input;
        self
    }
    /// <p>The version number for the cluster release.</p>
    pub fn database_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_version = Some(input.into());
        self
    }
    /// <p>The version number for the cluster release.</p>
    pub fn set_database_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_version = input;
        self
    }
    /// Appends an item to `update_targets`.
    ///
    /// To override the contents of this collection use [`set_update_targets`](Self::set_update_targets).
    ///
    /// <p>An array of <code>UpdateTarget</code> objects to update with the maintenance track. </p>
    pub fn update_targets(mut self, input: crate::types::UpdateTarget) -> Self {
        let mut v = self.update_targets.unwrap_or_default();
        v.push(input);
        self.update_targets = Some(v);
        self
    }
    /// <p>An array of <code>UpdateTarget</code> objects to update with the maintenance track. </p>
    pub fn set_update_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UpdateTarget>>,
    ) -> Self {
        self.update_targets = input;
        self
    }
    /// Consumes the builder and constructs a [`MaintenanceTrack`](crate::types::MaintenanceTrack).
    pub fn build(self) -> crate::types::MaintenanceTrack {
        crate::types::MaintenanceTrack {
            maintenance_track_name: self.maintenance_track_name,
            database_version: self.database_version,
            update_targets: self.update_targets,
        }
    }
}
