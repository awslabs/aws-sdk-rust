// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes event categories.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventCategoriesMap {
    /// <p>The source type, such as cluster or cluster-snapshot, that the returned categories belong to.</p>
    pub source_type: ::std::option::Option<::std::string::String>,
    /// <p>The events in the event category.</p>
    pub events: ::std::option::Option<::std::vec::Vec<crate::types::EventInfoMap>>,
}
impl EventCategoriesMap {
    /// <p>The source type, such as cluster or cluster-snapshot, that the returned categories belong to.</p>
    pub fn source_type(&self) -> ::std::option::Option<&str> {
        self.source_type.as_deref()
    }
    /// <p>The events in the event category.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.events.is_none()`.
    pub fn events(&self) -> &[crate::types::EventInfoMap] {
        self.events.as_deref().unwrap_or_default()
    }
}
impl EventCategoriesMap {
    /// Creates a new builder-style object to manufacture [`EventCategoriesMap`](crate::types::EventCategoriesMap).
    pub fn builder() -> crate::types::builders::EventCategoriesMapBuilder {
        crate::types::builders::EventCategoriesMapBuilder::default()
    }
}

/// A builder for [`EventCategoriesMap`](crate::types::EventCategoriesMap).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventCategoriesMapBuilder {
    pub(crate) source_type: ::std::option::Option<::std::string::String>,
    pub(crate) events: ::std::option::Option<::std::vec::Vec<crate::types::EventInfoMap>>,
}
impl EventCategoriesMapBuilder {
    /// <p>The source type, such as cluster or cluster-snapshot, that the returned categories belong to.</p>
    pub fn source_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source type, such as cluster or cluster-snapshot, that the returned categories belong to.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The source type, such as cluster or cluster-snapshot, that the returned categories belong to.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_type
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The events in the event category.</p>
    pub fn events(mut self, input: crate::types::EventInfoMap) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The events in the event category.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventInfoMap>>) -> Self {
        self.events = input;
        self
    }
    /// <p>The events in the event category.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventInfoMap>> {
        &self.events
    }
    /// Consumes the builder and constructs a [`EventCategoriesMap`](crate::types::EventCategoriesMap).
    pub fn build(self) -> crate::types::EventCategoriesMap {
        crate::types::EventCategoriesMap {
            source_type: self.source_type,
            events: self.events,
        }
    }
}
