// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteClusterSnapshotMessage {
    /// <p>The unique identifier of the manual snapshot to be deleted.</p>
    /// <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
    #[doc(hidden)]
    pub snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p>
    /// <p>Constraints: Must be the name of valid cluster.</p>
    #[doc(hidden)]
    pub snapshot_cluster_identifier: std::option::Option<std::string::String>,
}
impl DeleteClusterSnapshotMessage {
    /// <p>The unique identifier of the manual snapshot to be deleted.</p>
    /// <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
    pub fn snapshot_identifier(&self) -> std::option::Option<&str> {
        self.snapshot_identifier.as_deref()
    }
    /// <p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p>
    /// <p>Constraints: Must be the name of valid cluster.</p>
    pub fn snapshot_cluster_identifier(&self) -> std::option::Option<&str> {
        self.snapshot_cluster_identifier.as_deref()
    }
}
impl DeleteClusterSnapshotMessage {
    /// Creates a new builder-style object to manufacture [`DeleteClusterSnapshotMessage`](crate::types::DeleteClusterSnapshotMessage).
    pub fn builder() -> crate::types::builders::DeleteClusterSnapshotMessageBuilder {
        crate::types::builders::DeleteClusterSnapshotMessageBuilder::default()
    }
}

/// A builder for [`DeleteClusterSnapshotMessage`](crate::types::DeleteClusterSnapshotMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteClusterSnapshotMessageBuilder {
    pub(crate) snapshot_identifier: std::option::Option<std::string::String>,
    pub(crate) snapshot_cluster_identifier: std::option::Option<std::string::String>,
}
impl DeleteClusterSnapshotMessageBuilder {
    /// <p>The unique identifier of the manual snapshot to be deleted.</p>
    /// <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
    pub fn snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_identifier = Some(input.into());
        self
    }
    /// <p>The unique identifier of the manual snapshot to be deleted.</p>
    /// <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
    pub fn set_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.snapshot_identifier = input;
        self
    }
    /// <p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p>
    /// <p>Constraints: Must be the name of valid cluster.</p>
    pub fn snapshot_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_cluster_identifier = Some(input.into());
        self
    }
    /// <p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p>
    /// <p>Constraints: Must be the name of valid cluster.</p>
    pub fn set_snapshot_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.snapshot_cluster_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteClusterSnapshotMessage`](crate::types::DeleteClusterSnapshotMessage).
    pub fn build(self) -> crate::types::DeleteClusterSnapshotMessage {
        crate::types::DeleteClusterSnapshotMessage {
            snapshot_identifier: self.snapshot_identifier,
            snapshot_cluster_identifier: self.snapshot_cluster_identifier,
        }
    }
}
