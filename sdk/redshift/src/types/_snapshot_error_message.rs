// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the errors returned by a snapshot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SnapshotErrorMessage {
    /// <p>A unique identifier for the snapshot returning the error.</p>
    #[doc(hidden)]
    pub snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the cluster.</p>
    #[doc(hidden)]
    pub snapshot_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The failure code for the error.</p>
    #[doc(hidden)]
    pub failure_code: std::option::Option<std::string::String>,
    /// <p>The text message describing the error.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
}
impl SnapshotErrorMessage {
    /// <p>A unique identifier for the snapshot returning the error.</p>
    pub fn snapshot_identifier(&self) -> std::option::Option<&str> {
        self.snapshot_identifier.as_deref()
    }
    /// <p>A unique identifier for the cluster.</p>
    pub fn snapshot_cluster_identifier(&self) -> std::option::Option<&str> {
        self.snapshot_cluster_identifier.as_deref()
    }
    /// <p>The failure code for the error.</p>
    pub fn failure_code(&self) -> std::option::Option<&str> {
        self.failure_code.as_deref()
    }
    /// <p>The text message describing the error.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl SnapshotErrorMessage {
    /// Creates a new builder-style object to manufacture [`SnapshotErrorMessage`](crate::types::SnapshotErrorMessage).
    pub fn builder() -> crate::types::builders::SnapshotErrorMessageBuilder {
        crate::types::builders::SnapshotErrorMessageBuilder::default()
    }
}

/// A builder for [`SnapshotErrorMessage`](crate::types::SnapshotErrorMessage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SnapshotErrorMessageBuilder {
    pub(crate) snapshot_identifier: std::option::Option<std::string::String>,
    pub(crate) snapshot_cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) failure_code: std::option::Option<std::string::String>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
}
impl SnapshotErrorMessageBuilder {
    /// <p>A unique identifier for the snapshot returning the error.</p>
    pub fn snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_identifier = Some(input.into());
        self
    }
    /// <p>A unique identifier for the snapshot returning the error.</p>
    pub fn set_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.snapshot_identifier = input;
        self
    }
    /// <p>A unique identifier for the cluster.</p>
    pub fn snapshot_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_cluster_identifier = Some(input.into());
        self
    }
    /// <p>A unique identifier for the cluster.</p>
    pub fn set_snapshot_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.snapshot_cluster_identifier = input;
        self
    }
    /// <p>The failure code for the error.</p>
    pub fn failure_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_code = Some(input.into());
        self
    }
    /// <p>The failure code for the error.</p>
    pub fn set_failure_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The text message describing the error.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The text message describing the error.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`SnapshotErrorMessage`](crate::types::SnapshotErrorMessage).
    pub fn build(self) -> crate::types::SnapshotErrorMessage {
        crate::types::SnapshotErrorMessage {
            snapshot_identifier: self.snapshot_identifier,
            snapshot_cluster_identifier: self.snapshot_cluster_identifier,
            failure_code: self.failure_code,
            failure_reason: self.failure_reason,
        }
    }
}
