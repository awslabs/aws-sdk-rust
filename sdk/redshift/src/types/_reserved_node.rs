// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a reserved node. You can call the <code>DescribeReservedNodeOfferings</code> API to obtain the available reserved node offerings. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReservedNode {
    /// <p>The unique identifier for the reservation.</p>
    #[doc(hidden)]
    pub reserved_node_id: std::option::Option<std::string::String>,
    /// <p>The identifier for the reserved node offering.</p>
    #[doc(hidden)]
    pub reserved_node_offering_id: std::option::Option<std::string::String>,
    /// <p>The node type of the reserved node.</p>
    #[doc(hidden)]
    pub node_type: std::option::Option<std::string::String>,
    /// <p>The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The duration of the node reservation in seconds.</p>
    #[doc(hidden)]
    pub duration: i32,
    /// <p>The fixed cost Amazon Redshift charges you for this reserved node.</p>
    #[doc(hidden)]
    pub fixed_price: f64,
    /// <p>The hourly rate Amazon Redshift charges you for this reserved node.</p>
    #[doc(hidden)]
    pub usage_price: f64,
    /// <p>The currency code for the reserved cluster.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<std::string::String>,
    /// <p>The number of reserved compute nodes.</p>
    #[doc(hidden)]
    pub node_count: i32,
    /// <p>The state of the reserved compute node.</p>
    /// <p>Possible Values:</p>
    /// <ul>
    /// <li> <p>pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.</p> </li>
    /// <li> <p>active-This reserved node is owned by the caller and is available for use.</p> </li>
    /// <li> <p>payment-failed-Payment failed for the purchase attempt.</p> </li>
    /// <li> <p>retired-The reserved node is no longer available. </p> </li>
    /// <li> <p>exchanging-The owner is exchanging the reserved node for another reserved node.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>The anticipated utilization of the reserved node, as defined in the reserved node offering.</p>
    #[doc(hidden)]
    pub offering_type: std::option::Option<std::string::String>,
    /// <p>The recurring charges for the reserved node.</p>
    #[doc(hidden)]
    pub recurring_charges: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
    /// <p></p>
    #[doc(hidden)]
    pub reserved_node_offering_type: std::option::Option<crate::types::ReservedNodeOfferingType>,
}
impl ReservedNode {
    /// <p>The unique identifier for the reservation.</p>
    pub fn reserved_node_id(&self) -> std::option::Option<&str> {
        self.reserved_node_id.as_deref()
    }
    /// <p>The identifier for the reserved node offering.</p>
    pub fn reserved_node_offering_id(&self) -> std::option::Option<&str> {
        self.reserved_node_offering_id.as_deref()
    }
    /// <p>The node type of the reserved node.</p>
    pub fn node_type(&self) -> std::option::Option<&str> {
        self.node_type.as_deref()
    }
    /// <p>The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The duration of the node reservation in seconds.</p>
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// <p>The fixed cost Amazon Redshift charges you for this reserved node.</p>
    pub fn fixed_price(&self) -> f64 {
        self.fixed_price
    }
    /// <p>The hourly rate Amazon Redshift charges you for this reserved node.</p>
    pub fn usage_price(&self) -> f64 {
        self.usage_price
    }
    /// <p>The currency code for the reserved cluster.</p>
    pub fn currency_code(&self) -> std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>The number of reserved compute nodes.</p>
    pub fn node_count(&self) -> i32 {
        self.node_count
    }
    /// <p>The state of the reserved compute node.</p>
    /// <p>Possible Values:</p>
    /// <ul>
    /// <li> <p>pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.</p> </li>
    /// <li> <p>active-This reserved node is owned by the caller and is available for use.</p> </li>
    /// <li> <p>payment-failed-Payment failed for the purchase attempt.</p> </li>
    /// <li> <p>retired-The reserved node is no longer available. </p> </li>
    /// <li> <p>exchanging-The owner is exchanging the reserved node for another reserved node.</p> </li>
    /// </ul>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The anticipated utilization of the reserved node, as defined in the reserved node offering.</p>
    pub fn offering_type(&self) -> std::option::Option<&str> {
        self.offering_type.as_deref()
    }
    /// <p>The recurring charges for the reserved node.</p>
    pub fn recurring_charges(&self) -> std::option::Option<&[crate::types::RecurringCharge]> {
        self.recurring_charges.as_deref()
    }
    /// <p></p>
    pub fn reserved_node_offering_type(
        &self,
    ) -> std::option::Option<&crate::types::ReservedNodeOfferingType> {
        self.reserved_node_offering_type.as_ref()
    }
}
impl ReservedNode {
    /// Creates a new builder-style object to manufacture [`ReservedNode`](crate::types::ReservedNode).
    pub fn builder() -> crate::types::builders::ReservedNodeBuilder {
        crate::types::builders::ReservedNodeBuilder::default()
    }
}

/// A builder for [`ReservedNode`](crate::types::ReservedNode).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReservedNodeBuilder {
    pub(crate) reserved_node_id: std::option::Option<std::string::String>,
    pub(crate) reserved_node_offering_id: std::option::Option<std::string::String>,
    pub(crate) node_type: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) duration: std::option::Option<i32>,
    pub(crate) fixed_price: std::option::Option<f64>,
    pub(crate) usage_price: std::option::Option<f64>,
    pub(crate) currency_code: std::option::Option<std::string::String>,
    pub(crate) node_count: std::option::Option<i32>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) offering_type: std::option::Option<std::string::String>,
    pub(crate) recurring_charges: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
    pub(crate) reserved_node_offering_type:
        std::option::Option<crate::types::ReservedNodeOfferingType>,
}
impl ReservedNodeBuilder {
    /// <p>The unique identifier for the reservation.</p>
    pub fn reserved_node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reserved_node_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the reservation.</p>
    pub fn set_reserved_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reserved_node_id = input;
        self
    }
    /// <p>The identifier for the reserved node offering.</p>
    pub fn reserved_node_offering_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reserved_node_offering_id = Some(input.into());
        self
    }
    /// <p>The identifier for the reserved node offering.</p>
    pub fn set_reserved_node_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_node_offering_id = input;
        self
    }
    /// <p>The node type of the reserved node.</p>
    pub fn node_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_type = Some(input.into());
        self
    }
    /// <p>The node type of the reserved node.</p>
    pub fn set_node_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The duration of the node reservation in seconds.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>The duration of the node reservation in seconds.</p>
    pub fn set_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The fixed cost Amazon Redshift charges you for this reserved node.</p>
    pub fn fixed_price(mut self, input: f64) -> Self {
        self.fixed_price = Some(input);
        self
    }
    /// <p>The fixed cost Amazon Redshift charges you for this reserved node.</p>
    pub fn set_fixed_price(mut self, input: std::option::Option<f64>) -> Self {
        self.fixed_price = input;
        self
    }
    /// <p>The hourly rate Amazon Redshift charges you for this reserved node.</p>
    pub fn usage_price(mut self, input: f64) -> Self {
        self.usage_price = Some(input);
        self
    }
    /// <p>The hourly rate Amazon Redshift charges you for this reserved node.</p>
    pub fn set_usage_price(mut self, input: std::option::Option<f64>) -> Self {
        self.usage_price = input;
        self
    }
    /// <p>The currency code for the reserved cluster.</p>
    pub fn currency_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.currency_code = Some(input.into());
        self
    }
    /// <p>The currency code for the reserved cluster.</p>
    pub fn set_currency_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>The number of reserved compute nodes.</p>
    pub fn node_count(mut self, input: i32) -> Self {
        self.node_count = Some(input);
        self
    }
    /// <p>The number of reserved compute nodes.</p>
    pub fn set_node_count(mut self, input: std::option::Option<i32>) -> Self {
        self.node_count = input;
        self
    }
    /// <p>The state of the reserved compute node.</p>
    /// <p>Possible Values:</p>
    /// <ul>
    /// <li> <p>pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.</p> </li>
    /// <li> <p>active-This reserved node is owned by the caller and is available for use.</p> </li>
    /// <li> <p>payment-failed-Payment failed for the purchase attempt.</p> </li>
    /// <li> <p>retired-The reserved node is no longer available. </p> </li>
    /// <li> <p>exchanging-The owner is exchanging the reserved node for another reserved node.</p> </li>
    /// </ul>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state of the reserved compute node.</p>
    /// <p>Possible Values:</p>
    /// <ul>
    /// <li> <p>pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.</p> </li>
    /// <li> <p>active-This reserved node is owned by the caller and is available for use.</p> </li>
    /// <li> <p>payment-failed-Payment failed for the purchase attempt.</p> </li>
    /// <li> <p>retired-The reserved node is no longer available. </p> </li>
    /// <li> <p>exchanging-The owner is exchanging the reserved node for another reserved node.</p> </li>
    /// </ul>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The anticipated utilization of the reserved node, as defined in the reserved node offering.</p>
    pub fn offering_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.offering_type = Some(input.into());
        self
    }
    /// <p>The anticipated utilization of the reserved node, as defined in the reserved node offering.</p>
    pub fn set_offering_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.offering_type = input;
        self
    }
    /// Appends an item to `recurring_charges`.
    ///
    /// To override the contents of this collection use [`set_recurring_charges`](Self::set_recurring_charges).
    ///
    /// <p>The recurring charges for the reserved node.</p>
    pub fn recurring_charges(mut self, input: crate::types::RecurringCharge) -> Self {
        let mut v = self.recurring_charges.unwrap_or_default();
        v.push(input);
        self.recurring_charges = Some(v);
        self
    }
    /// <p>The recurring charges for the reserved node.</p>
    pub fn set_recurring_charges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
    ) -> Self {
        self.recurring_charges = input;
        self
    }
    /// <p></p>
    pub fn reserved_node_offering_type(
        mut self,
        input: crate::types::ReservedNodeOfferingType,
    ) -> Self {
        self.reserved_node_offering_type = Some(input);
        self
    }
    /// <p></p>
    pub fn set_reserved_node_offering_type(
        mut self,
        input: std::option::Option<crate::types::ReservedNodeOfferingType>,
    ) -> Self {
        self.reserved_node_offering_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ReservedNode`](crate::types::ReservedNode).
    pub fn build(self) -> crate::types::ReservedNode {
        crate::types::ReservedNode {
            reserved_node_id: self.reserved_node_id,
            reserved_node_offering_id: self.reserved_node_offering_id,
            node_type: self.node_type,
            start_time: self.start_time,
            duration: self.duration.unwrap_or_default(),
            fixed_price: self.fixed_price.unwrap_or_default(),
            usage_price: self.usage_price.unwrap_or_default(),
            currency_code: self.currency_code,
            node_count: self.node_count.unwrap_or_default(),
            state: self.state,
            offering_type: self.offering_type,
            recurring_charges: self.recurring_charges,
            reserved_node_offering_type: self.reserved_node_offering_type,
        }
    }
}
