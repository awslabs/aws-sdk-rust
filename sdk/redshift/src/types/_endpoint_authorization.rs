// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EndpointAuthorization {
    /// <p>The Amazon Web Services account ID of the cluster owner.</p>
    #[doc(hidden)]
    pub grantor: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID of the grantee of the cluster.</p>
    #[doc(hidden)]
    pub grantee: std::option::Option<std::string::String>,
    /// <p>The cluster identifier.</p>
    #[doc(hidden)]
    pub cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The time (UTC) when the authorization was created.</p>
    #[doc(hidden)]
    pub authorize_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the cluster.</p>
    #[doc(hidden)]
    pub cluster_status: std::option::Option<std::string::String>,
    /// <p>The status of the authorization action.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AuthorizationStatus>,
    /// <p>Indicates whether all VPCs in the grantee account are allowed access to the cluster.</p>
    #[doc(hidden)]
    pub allowed_all_vp_cs: bool,
    /// <p>The VPCs allowed access to the cluster.</p>
    #[doc(hidden)]
    pub allowed_vp_cs: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of Redshift-managed VPC endpoints created for the authorization.</p>
    #[doc(hidden)]
    pub endpoint_count: i32,
}
impl EndpointAuthorization {
    /// <p>The Amazon Web Services account ID of the cluster owner.</p>
    pub fn grantor(&self) -> std::option::Option<&str> {
        self.grantor.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the grantee of the cluster.</p>
    pub fn grantee(&self) -> std::option::Option<&str> {
        self.grantee.as_deref()
    }
    /// <p>The cluster identifier.</p>
    pub fn cluster_identifier(&self) -> std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>The time (UTC) when the authorization was created.</p>
    pub fn authorize_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.authorize_time.as_ref()
    }
    /// <p>The status of the cluster.</p>
    pub fn cluster_status(&self) -> std::option::Option<&str> {
        self.cluster_status.as_deref()
    }
    /// <p>The status of the authorization action.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::AuthorizationStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates whether all VPCs in the grantee account are allowed access to the cluster.</p>
    pub fn allowed_all_vp_cs(&self) -> bool {
        self.allowed_all_vp_cs
    }
    /// <p>The VPCs allowed access to the cluster.</p>
    pub fn allowed_vp_cs(&self) -> std::option::Option<&[std::string::String]> {
        self.allowed_vp_cs.as_deref()
    }
    /// <p>The number of Redshift-managed VPC endpoints created for the authorization.</p>
    pub fn endpoint_count(&self) -> i32 {
        self.endpoint_count
    }
}
impl EndpointAuthorization {
    /// Creates a new builder-style object to manufacture [`EndpointAuthorization`](crate::types::EndpointAuthorization).
    pub fn builder() -> crate::types::builders::EndpointAuthorizationBuilder {
        crate::types::builders::EndpointAuthorizationBuilder::default()
    }
}

/// A builder for [`EndpointAuthorization`](crate::types::EndpointAuthorization).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EndpointAuthorizationBuilder {
    pub(crate) grantor: std::option::Option<std::string::String>,
    pub(crate) grantee: std::option::Option<std::string::String>,
    pub(crate) cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) authorize_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) cluster_status: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::AuthorizationStatus>,
    pub(crate) allowed_all_vp_cs: std::option::Option<bool>,
    pub(crate) allowed_vp_cs: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) endpoint_count: std::option::Option<i32>,
}
impl EndpointAuthorizationBuilder {
    /// <p>The Amazon Web Services account ID of the cluster owner.</p>
    pub fn grantor(mut self, input: impl Into<std::string::String>) -> Self {
        self.grantor = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the cluster owner.</p>
    pub fn set_grantor(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.grantor = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the grantee of the cluster.</p>
    pub fn grantee(mut self, input: impl Into<std::string::String>) -> Self {
        self.grantee = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the grantee of the cluster.</p>
    pub fn set_grantee(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.grantee = input;
        self
    }
    /// <p>The cluster identifier.</p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_identifier = Some(input.into());
        self
    }
    /// <p>The cluster identifier.</p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>The time (UTC) when the authorization was created.</p>
    pub fn authorize_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.authorize_time = Some(input);
        self
    }
    /// <p>The time (UTC) when the authorization was created.</p>
    pub fn set_authorize_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.authorize_time = input;
        self
    }
    /// <p>The status of the cluster.</p>
    pub fn cluster_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_status = Some(input.into());
        self
    }
    /// <p>The status of the cluster.</p>
    pub fn set_cluster_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_status = input;
        self
    }
    /// <p>The status of the authorization action.</p>
    pub fn status(mut self, input: crate::types::AuthorizationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the authorization action.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::AuthorizationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates whether all VPCs in the grantee account are allowed access to the cluster.</p>
    pub fn allowed_all_vp_cs(mut self, input: bool) -> Self {
        self.allowed_all_vp_cs = Some(input);
        self
    }
    /// <p>Indicates whether all VPCs in the grantee account are allowed access to the cluster.</p>
    pub fn set_allowed_all_vp_cs(mut self, input: std::option::Option<bool>) -> Self {
        self.allowed_all_vp_cs = input;
        self
    }
    /// Appends an item to `allowed_vp_cs`.
    ///
    /// To override the contents of this collection use [`set_allowed_vp_cs`](Self::set_allowed_vp_cs).
    ///
    /// <p>The VPCs allowed access to the cluster.</p>
    pub fn allowed_vp_cs(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allowed_vp_cs.unwrap_or_default();
        v.push(input.into());
        self.allowed_vp_cs = Some(v);
        self
    }
    /// <p>The VPCs allowed access to the cluster.</p>
    pub fn set_allowed_vp_cs(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allowed_vp_cs = input;
        self
    }
    /// <p>The number of Redshift-managed VPC endpoints created for the authorization.</p>
    pub fn endpoint_count(mut self, input: i32) -> Self {
        self.endpoint_count = Some(input);
        self
    }
    /// <p>The number of Redshift-managed VPC endpoints created for the authorization.</p>
    pub fn set_endpoint_count(mut self, input: std::option::Option<i32>) -> Self {
        self.endpoint_count = input;
        self
    }
    /// Consumes the builder and constructs a [`EndpointAuthorization`](crate::types::EndpointAuthorization).
    pub fn build(self) -> crate::types::EndpointAuthorization {
        crate::types::EndpointAuthorization {
            grantor: self.grantor,
            grantee: self.grantee,
            cluster_identifier: self.cluster_identifier,
            authorize_time: self.authorize_time,
            cluster_status: self.cluster_status,
            status: self.status,
            allowed_all_vp_cs: self.allowed_all_vp_cs.unwrap_or_default(),
            allowed_vp_cs: self.allowed_vp_cs,
            endpoint_count: self.endpoint_count.unwrap_or_default(),
        }
    }
}
