// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes event information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventInfoMap {
    /// <p>The identifier of an Amazon Redshift event.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>The category of an Amazon Redshift event.</p>
    pub event_categories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The description of an Amazon Redshift event.</p>
    pub event_description: ::std::option::Option<::std::string::String>,
    /// <p>The severity of the event.</p>
    /// <p>Values: ERROR, INFO</p>
    pub severity: ::std::option::Option<::std::string::String>,
}
impl EventInfoMap {
    /// <p>The identifier of an Amazon Redshift event.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The category of an Amazon Redshift event.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_categories.is_none()`.
    pub fn event_categories(&self) -> &[::std::string::String] {
        self.event_categories.as_deref().unwrap_or_default()
    }
    /// <p>The description of an Amazon Redshift event.</p>
    pub fn event_description(&self) -> ::std::option::Option<&str> {
        self.event_description.as_deref()
    }
    /// <p>The severity of the event.</p>
    /// <p>Values: ERROR, INFO</p>
    pub fn severity(&self) -> ::std::option::Option<&str> {
        self.severity.as_deref()
    }
}
impl EventInfoMap {
    /// Creates a new builder-style object to manufacture [`EventInfoMap`](crate::types::EventInfoMap).
    pub fn builder() -> crate::types::builders::EventInfoMapBuilder {
        crate::types::builders::EventInfoMapBuilder::default()
    }
}

/// A builder for [`EventInfoMap`](crate::types::EventInfoMap).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventInfoMapBuilder {
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_categories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) event_description: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<::std::string::String>,
}
impl EventInfoMapBuilder {
    /// <p>The identifier of an Amazon Redshift event.</p>
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an Amazon Redshift event.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The identifier of an Amazon Redshift event.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// Appends an item to `event_categories`.
    ///
    /// To override the contents of this collection use [`set_event_categories`](Self::set_event_categories).
    ///
    /// <p>The category of an Amazon Redshift event.</p>
    pub fn event_categories(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.event_categories.unwrap_or_default();
        v.push(input.into());
        self.event_categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The category of an Amazon Redshift event.</p>
    pub fn set_event_categories(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.event_categories = input;
        self
    }
    /// <p>The category of an Amazon Redshift event.</p>
    pub fn get_event_categories(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.event_categories
    }
    /// <p>The description of an Amazon Redshift event.</p>
    pub fn event_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of an Amazon Redshift event.</p>
    pub fn set_event_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_description = input;
        self
    }
    /// <p>The description of an Amazon Redshift event.</p>
    pub fn get_event_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_description
    }
    /// <p>The severity of the event.</p>
    /// <p>Values: ERROR, INFO</p>
    pub fn severity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.severity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The severity of the event.</p>
    /// <p>Values: ERROR, INFO</p>
    pub fn set_severity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The severity of the event.</p>
    /// <p>Values: ERROR, INFO</p>
    pub fn get_severity(&self) -> &::std::option::Option<::std::string::String> {
        &self.severity
    }
    /// Consumes the builder and constructs a [`EventInfoMap`](crate::types::EventInfoMap).
    pub fn build(self) -> crate::types::EventInfoMap {
        crate::types::EventInfoMap {
            event_id: self.event_id,
            event_categories: self.event_categories,
            event_description: self.event_description,
            severity: self.severity,
        }
    }
}
