// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a usage limit object for a cluster. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UsageLimit {
    /// <p>The identifier of the usage limit.</p>
    #[doc(hidden)]
    pub usage_limit_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the cluster with a usage limit.</p>
    #[doc(hidden)]
    pub cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Redshift feature to which the limit applies.</p>
    #[doc(hidden)]
    pub feature_type: std::option::Option<crate::types::UsageLimitFeatureType>,
    /// <p>The type of limit. Depending on the feature type, this can be based on a time duration or data size.</p>
    #[doc(hidden)]
    pub limit_type: std::option::Option<crate::types::UsageLimitLimitType>,
    /// <p>The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).</p>
    #[doc(hidden)]
    pub amount: i64,
    /// <p>The time period that the amount applies to. A <code>weekly</code> period begins on Sunday. The default is <code>monthly</code>. </p>
    #[doc(hidden)]
    pub period: std::option::Option<crate::types::UsageLimitPeriod>,
    /// <p>The action that Amazon Redshift takes when the limit is reached. Possible values are: </p>
    /// <ul>
    /// <li> <p> <b>log</b> - To log an event in a system table. The default is log.</p> </li>
    /// <li> <p> <b>emit-metric</b> - To emit CloudWatch metrics.</p> </li>
    /// <li> <p> <b>disable</b> - To disable the feature until the next usage period begins.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub breach_action: std::option::Option<crate::types::UsageLimitBreachAction>,
    /// <p>A list of tag instances.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl UsageLimit {
    /// <p>The identifier of the usage limit.</p>
    pub fn usage_limit_id(&self) -> std::option::Option<&str> {
        self.usage_limit_id.as_deref()
    }
    /// <p>The identifier of the cluster with a usage limit.</p>
    pub fn cluster_identifier(&self) -> std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>The Amazon Redshift feature to which the limit applies.</p>
    pub fn feature_type(&self) -> std::option::Option<&crate::types::UsageLimitFeatureType> {
        self.feature_type.as_ref()
    }
    /// <p>The type of limit. Depending on the feature type, this can be based on a time duration or data size.</p>
    pub fn limit_type(&self) -> std::option::Option<&crate::types::UsageLimitLimitType> {
        self.limit_type.as_ref()
    }
    /// <p>The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).</p>
    pub fn amount(&self) -> i64 {
        self.amount
    }
    /// <p>The time period that the amount applies to. A <code>weekly</code> period begins on Sunday. The default is <code>monthly</code>. </p>
    pub fn period(&self) -> std::option::Option<&crate::types::UsageLimitPeriod> {
        self.period.as_ref()
    }
    /// <p>The action that Amazon Redshift takes when the limit is reached. Possible values are: </p>
    /// <ul>
    /// <li> <p> <b>log</b> - To log an event in a system table. The default is log.</p> </li>
    /// <li> <p> <b>emit-metric</b> - To emit CloudWatch metrics.</p> </li>
    /// <li> <p> <b>disable</b> - To disable the feature until the next usage period begins.</p> </li>
    /// </ul>
    pub fn breach_action(&self) -> std::option::Option<&crate::types::UsageLimitBreachAction> {
        self.breach_action.as_ref()
    }
    /// <p>A list of tag instances.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl UsageLimit {
    /// Creates a new builder-style object to manufacture [`UsageLimit`](crate::types::UsageLimit).
    pub fn builder() -> crate::types::builders::UsageLimitBuilder {
        crate::types::builders::UsageLimitBuilder::default()
    }
}

/// A builder for [`UsageLimit`](crate::types::UsageLimit).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UsageLimitBuilder {
    pub(crate) usage_limit_id: std::option::Option<std::string::String>,
    pub(crate) cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) feature_type: std::option::Option<crate::types::UsageLimitFeatureType>,
    pub(crate) limit_type: std::option::Option<crate::types::UsageLimitLimitType>,
    pub(crate) amount: std::option::Option<i64>,
    pub(crate) period: std::option::Option<crate::types::UsageLimitPeriod>,
    pub(crate) breach_action: std::option::Option<crate::types::UsageLimitBreachAction>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl UsageLimitBuilder {
    /// <p>The identifier of the usage limit.</p>
    pub fn usage_limit_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.usage_limit_id = Some(input.into());
        self
    }
    /// <p>The identifier of the usage limit.</p>
    pub fn set_usage_limit_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.usage_limit_id = input;
        self
    }
    /// <p>The identifier of the cluster with a usage limit.</p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_identifier = Some(input.into());
        self
    }
    /// <p>The identifier of the cluster with a usage limit.</p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>The Amazon Redshift feature to which the limit applies.</p>
    pub fn feature_type(mut self, input: crate::types::UsageLimitFeatureType) -> Self {
        self.feature_type = Some(input);
        self
    }
    /// <p>The Amazon Redshift feature to which the limit applies.</p>
    pub fn set_feature_type(
        mut self,
        input: std::option::Option<crate::types::UsageLimitFeatureType>,
    ) -> Self {
        self.feature_type = input;
        self
    }
    /// <p>The type of limit. Depending on the feature type, this can be based on a time duration or data size.</p>
    pub fn limit_type(mut self, input: crate::types::UsageLimitLimitType) -> Self {
        self.limit_type = Some(input);
        self
    }
    /// <p>The type of limit. Depending on the feature type, this can be based on a time duration or data size.</p>
    pub fn set_limit_type(
        mut self,
        input: std::option::Option<crate::types::UsageLimitLimitType>,
    ) -> Self {
        self.limit_type = input;
        self
    }
    /// <p>The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).</p>
    pub fn amount(mut self, input: i64) -> Self {
        self.amount = Some(input);
        self
    }
    /// <p>The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB).</p>
    pub fn set_amount(mut self, input: std::option::Option<i64>) -> Self {
        self.amount = input;
        self
    }
    /// <p>The time period that the amount applies to. A <code>weekly</code> period begins on Sunday. The default is <code>monthly</code>. </p>
    pub fn period(mut self, input: crate::types::UsageLimitPeriod) -> Self {
        self.period = Some(input);
        self
    }
    /// <p>The time period that the amount applies to. A <code>weekly</code> period begins on Sunday. The default is <code>monthly</code>. </p>
    pub fn set_period(
        mut self,
        input: std::option::Option<crate::types::UsageLimitPeriod>,
    ) -> Self {
        self.period = input;
        self
    }
    /// <p>The action that Amazon Redshift takes when the limit is reached. Possible values are: </p>
    /// <ul>
    /// <li> <p> <b>log</b> - To log an event in a system table. The default is log.</p> </li>
    /// <li> <p> <b>emit-metric</b> - To emit CloudWatch metrics.</p> </li>
    /// <li> <p> <b>disable</b> - To disable the feature until the next usage period begins.</p> </li>
    /// </ul>
    pub fn breach_action(mut self, input: crate::types::UsageLimitBreachAction) -> Self {
        self.breach_action = Some(input);
        self
    }
    /// <p>The action that Amazon Redshift takes when the limit is reached. Possible values are: </p>
    /// <ul>
    /// <li> <p> <b>log</b> - To log an event in a system table. The default is log.</p> </li>
    /// <li> <p> <b>emit-metric</b> - To emit CloudWatch metrics.</p> </li>
    /// <li> <p> <b>disable</b> - To disable the feature until the next usage period begins.</p> </li>
    /// </ul>
    pub fn set_breach_action(
        mut self,
        input: std::option::Option<crate::types::UsageLimitBreachAction>,
    ) -> Self {
        self.breach_action = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tag instances.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tag instances.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`UsageLimit`](crate::types::UsageLimit).
    pub fn build(self) -> crate::types::UsageLimit {
        crate::types::UsageLimit {
            usage_limit_id: self.usage_limit_id,
            cluster_identifier: self.cluster_identifier,
            feature_type: self.feature_type,
            limit_type: self.limit_type,
            amount: self.amount.unwrap_or_default(),
            period: self.period,
            breach_action: self.breach_action,
            tags: self.tags,
        }
    }
}
