// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a subnet group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClusterSubnetGroup {
    /// <p>The name of the cluster subnet group.</p>
    #[doc(hidden)]
    pub cluster_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The description of the cluster subnet group.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The VPC ID of the cluster subnet group.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The status of the cluster subnet group. Possible values are <code>Complete</code>, <code>Incomplete</code> and <code>Invalid</code>. </p>
    #[doc(hidden)]
    pub subnet_group_status: std::option::Option<std::string::String>,
    /// <p>A list of the VPC <code>Subnet</code> elements. </p>
    #[doc(hidden)]
    pub subnets: std::option::Option<std::vec::Vec<crate::types::Subnet>>,
    /// <p>The list of tags for the cluster subnet group.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ClusterSubnetGroup {
    /// <p>The name of the cluster subnet group.</p>
    pub fn cluster_subnet_group_name(&self) -> std::option::Option<&str> {
        self.cluster_subnet_group_name.as_deref()
    }
    /// <p>The description of the cluster subnet group.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The VPC ID of the cluster subnet group.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The status of the cluster subnet group. Possible values are <code>Complete</code>, <code>Incomplete</code> and <code>Invalid</code>. </p>
    pub fn subnet_group_status(&self) -> std::option::Option<&str> {
        self.subnet_group_status.as_deref()
    }
    /// <p>A list of the VPC <code>Subnet</code> elements. </p>
    pub fn subnets(&self) -> std::option::Option<&[crate::types::Subnet]> {
        self.subnets.as_deref()
    }
    /// <p>The list of tags for the cluster subnet group.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl ClusterSubnetGroup {
    /// Creates a new builder-style object to manufacture [`ClusterSubnetGroup`](crate::types::ClusterSubnetGroup).
    pub fn builder() -> crate::types::builders::ClusterSubnetGroupBuilder {
        crate::types::builders::ClusterSubnetGroupBuilder::default()
    }
}

/// A builder for [`ClusterSubnetGroup`](crate::types::ClusterSubnetGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClusterSubnetGroupBuilder {
    pub(crate) cluster_subnet_group_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) subnet_group_status: std::option::Option<std::string::String>,
    pub(crate) subnets: std::option::Option<std::vec::Vec<crate::types::Subnet>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ClusterSubnetGroupBuilder {
    /// <p>The name of the cluster subnet group.</p>
    pub fn cluster_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_subnet_group_name = Some(input.into());
        self
    }
    /// <p>The name of the cluster subnet group.</p>
    pub fn set_cluster_subnet_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_subnet_group_name = input;
        self
    }
    /// <p>The description of the cluster subnet group.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the cluster subnet group.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The VPC ID of the cluster subnet group.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The VPC ID of the cluster subnet group.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The status of the cluster subnet group. Possible values are <code>Complete</code>, <code>Incomplete</code> and <code>Invalid</code>. </p>
    pub fn subnet_group_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_group_status = Some(input.into());
        self
    }
    /// <p>The status of the cluster subnet group. Possible values are <code>Complete</code>, <code>Incomplete</code> and <code>Invalid</code>. </p>
    pub fn set_subnet_group_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.subnet_group_status = input;
        self
    }
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>A list of the VPC <code>Subnet</code> elements. </p>
    pub fn subnets(mut self, input: crate::types::Subnet) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input);
        self.subnets = Some(v);
        self
    }
    /// <p>A list of the VPC <code>Subnet</code> elements. </p>
    pub fn set_subnets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Subnet>>,
    ) -> Self {
        self.subnets = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tags for the cluster subnet group.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The list of tags for the cluster subnet group.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ClusterSubnetGroup`](crate::types::ClusterSubnetGroup).
    pub fn build(self) -> crate::types::ClusterSubnetGroup {
        crate::types::ClusterSubnetGroup {
            cluster_subnet_group_name: self.cluster_subnet_group_name,
            description: self.description,
            vpc_id: self.vpc_id,
            subnet_group_status: self.subnet_group_status,
            subnets: self.subnets,
            tags: self.tags,
        }
    }
}
