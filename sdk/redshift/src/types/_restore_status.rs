// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the status of a cluster restore action. Returns null if the cluster was not created by restoring a snapshot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreStatus {
    /// <p>The status of the restore action. Returns starting, restoring, completed, or failed.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup. This field is only updated when you restore to DC2 and DS2 node types. </p>
    #[doc(hidden)]
    pub current_restore_rate_in_mega_bytes_per_second: f64,
    /// <p>The size of the set of snapshot data used to restore the cluster. This field is only updated when you restore to DC2 and DS2 node types. </p>
    #[doc(hidden)]
    pub snapshot_size_in_mega_bytes: i64,
    /// <p>The number of megabytes that have been transferred from snapshot storage. This field is only updated when you restore to DC2 and DS2 node types. </p>
    #[doc(hidden)]
    pub progress_in_mega_bytes: i64,
    /// <p>The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish. This field is only updated when you restore to DC2 and DS2 node types. </p>
    #[doc(hidden)]
    pub elapsed_time_in_seconds: i64,
    /// <p>The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore. This field is only updated when you restore to DC2 and DS2 node types. </p>
    #[doc(hidden)]
    pub estimated_time_to_completion_in_seconds: i64,
}
impl RestoreStatus {
    /// <p>The status of the restore action. Returns starting, restoring, completed, or failed.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn current_restore_rate_in_mega_bytes_per_second(&self) -> f64 {
        self.current_restore_rate_in_mega_bytes_per_second
    }
    /// <p>The size of the set of snapshot data used to restore the cluster. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn snapshot_size_in_mega_bytes(&self) -> i64 {
        self.snapshot_size_in_mega_bytes
    }
    /// <p>The number of megabytes that have been transferred from snapshot storage. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn progress_in_mega_bytes(&self) -> i64 {
        self.progress_in_mega_bytes
    }
    /// <p>The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn elapsed_time_in_seconds(&self) -> i64 {
        self.elapsed_time_in_seconds
    }
    /// <p>The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn estimated_time_to_completion_in_seconds(&self) -> i64 {
        self.estimated_time_to_completion_in_seconds
    }
}
impl RestoreStatus {
    /// Creates a new builder-style object to manufacture [`RestoreStatus`](crate::types::RestoreStatus).
    pub fn builder() -> crate::types::builders::RestoreStatusBuilder {
        crate::types::builders::RestoreStatusBuilder::default()
    }
}

/// A builder for [`RestoreStatus`](crate::types::RestoreStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RestoreStatusBuilder {
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) current_restore_rate_in_mega_bytes_per_second: std::option::Option<f64>,
    pub(crate) snapshot_size_in_mega_bytes: std::option::Option<i64>,
    pub(crate) progress_in_mega_bytes: std::option::Option<i64>,
    pub(crate) elapsed_time_in_seconds: std::option::Option<i64>,
    pub(crate) estimated_time_to_completion_in_seconds: std::option::Option<i64>,
}
impl RestoreStatusBuilder {
    /// <p>The status of the restore action. Returns starting, restoring, completed, or failed.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the restore action. Returns starting, restoring, completed, or failed.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn current_restore_rate_in_mega_bytes_per_second(mut self, input: f64) -> Self {
        self.current_restore_rate_in_mega_bytes_per_second = Some(input);
        self
    }
    /// <p>The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn set_current_restore_rate_in_mega_bytes_per_second(
        mut self,
        input: std::option::Option<f64>,
    ) -> Self {
        self.current_restore_rate_in_mega_bytes_per_second = input;
        self
    }
    /// <p>The size of the set of snapshot data used to restore the cluster. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn snapshot_size_in_mega_bytes(mut self, input: i64) -> Self {
        self.snapshot_size_in_mega_bytes = Some(input);
        self
    }
    /// <p>The size of the set of snapshot data used to restore the cluster. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn set_snapshot_size_in_mega_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.snapshot_size_in_mega_bytes = input;
        self
    }
    /// <p>The number of megabytes that have been transferred from snapshot storage. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn progress_in_mega_bytes(mut self, input: i64) -> Self {
        self.progress_in_mega_bytes = Some(input);
        self
    }
    /// <p>The number of megabytes that have been transferred from snapshot storage. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn set_progress_in_mega_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.progress_in_mega_bytes = input;
        self
    }
    /// <p>The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn elapsed_time_in_seconds(mut self, input: i64) -> Self {
        self.elapsed_time_in_seconds = Some(input);
        self
    }
    /// <p>The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn set_elapsed_time_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.elapsed_time_in_seconds = input;
        self
    }
    /// <p>The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn estimated_time_to_completion_in_seconds(mut self, input: i64) -> Self {
        self.estimated_time_to_completion_in_seconds = Some(input);
        self
    }
    /// <p>The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore. This field is only updated when you restore to DC2 and DS2 node types. </p>
    pub fn set_estimated_time_to_completion_in_seconds(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.estimated_time_to_completion_in_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`RestoreStatus`](crate::types::RestoreStatus).
    pub fn build(self) -> crate::types::RestoreStatus {
        crate::types::RestoreStatus {
            status: self.status,
            current_restore_rate_in_mega_bytes_per_second: self
                .current_restore_rate_in_mega_bytes_per_second
                .unwrap_or_default(),
            snapshot_size_in_mega_bytes: self.snapshot_size_in_mega_bytes.unwrap_or_default(),
            progress_in_mega_bytes: self.progress_in_mega_bytes.unwrap_or_default(),
            elapsed_time_in_seconds: self.elapsed_time_in_seconds.unwrap_or_default(),
            estimated_time_to_completion_in_seconds: self
                .estimated_time_to_completion_in_seconds
                .unwrap_or_default(),
        }
    }
}
