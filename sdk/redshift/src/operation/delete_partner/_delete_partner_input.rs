// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePartnerInput {
    /// <p>The Amazon Web Services account ID that owns the cluster.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The cluster identifier of the cluster that receives data from the partner.</p>
    #[doc(hidden)]
    pub cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The name of the database that receives data from the partner.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The name of the partner that is authorized to send data.</p>
    #[doc(hidden)]
    pub partner_name: std::option::Option<std::string::String>,
}
impl DeletePartnerInput {
    /// <p>The Amazon Web Services account ID that owns the cluster.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The cluster identifier of the cluster that receives data from the partner.</p>
    pub fn cluster_identifier(&self) -> std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>The name of the database that receives data from the partner.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the partner that is authorized to send data.</p>
    pub fn partner_name(&self) -> std::option::Option<&str> {
        self.partner_name.as_deref()
    }
}
impl DeletePartnerInput {
    /// Creates a new builder-style object to manufacture [`DeletePartnerInput`](crate::operation::delete_partner::DeletePartnerInput).
    pub fn builder() -> crate::operation::delete_partner::builders::DeletePartnerInputBuilder {
        crate::operation::delete_partner::builders::DeletePartnerInputBuilder::default()
    }
}

/// A builder for [`DeletePartnerInput`](crate::operation::delete_partner::DeletePartnerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeletePartnerInputBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) partner_name: std::option::Option<std::string::String>,
}
impl DeletePartnerInputBuilder {
    /// <p>The Amazon Web Services account ID that owns the cluster.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the cluster.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The cluster identifier of the cluster that receives data from the partner.</p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_identifier = Some(input.into());
        self
    }
    /// <p>The cluster identifier of the cluster that receives data from the partner.</p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>The name of the database that receives data from the partner.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of the database that receives data from the partner.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the partner that is authorized to send data.</p>
    pub fn partner_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.partner_name = Some(input.into());
        self
    }
    /// <p>The name of the partner that is authorized to send data.</p>
    pub fn set_partner_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.partner_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeletePartnerInput`](crate::operation::delete_partner::DeletePartnerInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_partner::DeletePartnerInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_partner::DeletePartnerInput {
            account_id: self.account_id,
            cluster_identifier: self.cluster_identifier,
            database_name: self.database_name,
            partner_name: self.partner_name,
        })
    }
}
